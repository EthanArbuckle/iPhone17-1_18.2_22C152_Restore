uint64_t CMMsl::DopplerDebugRecord::readFrom(CMMsl::DopplerDebugRecord *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;

  v2 = *((void *)a2 + 1);
  v3 = *((void *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3) {
        v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      v2 = *((void *)a2 + 1);
      goto LABEL_151;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 30) |= 1u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        v2 = *((void *)a2 + 1) + 8;
        goto LABEL_150;
      case 2u:
        *((_DWORD *)this + 30) |= 0x1000000u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 3u:
        *((_DWORD *)this + 30) |= 0x200000u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 4u:
        *((_DWORD *)this + 30) |= 0x400000u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 5u:
        *((_DWORD *)this + 30) |= 0x800000u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 6u:
        *((_DWORD *)this + 30) |= 0x100000u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 7u:
        *((_DWORD *)this + 30) |= 0x2000000u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 8u:
        *((_DWORD *)this + 30) |= 8u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 9u:
        *((_DWORD *)this + 30) |= 0x20u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0xAu:
        *((_DWORD *)this + 30) |= 0x10u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0xBu:
        *((_DWORD *)this + 30) |= 0x20000u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0xCu:
        *((_DWORD *)this + 30) |= 0x10000u;
        v20 = *((void *)a2 + 1);
        v2 = *((void *)a2 + 2);
        v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v24 = 0;
          if (v2 <= v20) {
            v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_160;
            }
            v46 = v20++;
            v47 = *(unsigned char *)(v21 + v46);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_159:
              v2 = v46 + 1;
              goto LABEL_160;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_159;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_160;
          }
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_160:
        *((_DWORD *)this + 19) = v24;
        break;
      case 0xDu:
        *((_DWORD *)this + 30) |= 0x4000u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0xEu:
        *((_DWORD *)this + 30) |= 0x8000u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0xFu:
        *((_DWORD *)this + 30) |= 0x2000u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0x10u:
        *((_DWORD *)this + 30) |= 0x800u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0x11u:
        *((_DWORD *)this + 30) |= 0x1000u;
        v26 = *((void *)a2 + 1);
        v2 = *((void *)a2 + 2);
        v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v30 = 0;
          if (v2 <= v26) {
            v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_165;
            }
            v50 = v26++;
            v51 = *(unsigned char *)(v27 + v50);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_164:
              v2 = v50 + 1;
              goto LABEL_165;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_164;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_165;
          }
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_165:
        *((_DWORD *)this + 15) = v30;
        break;
      case 0x12u:
        *((_DWORD *)this + 30) |= 0x200u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0x13u:
        *((_DWORD *)this + 30) |= 0x400u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0x14u:
        *((_DWORD *)this + 30) |= 0x100u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0x15u:
        *((_DWORD *)this + 30) |= 0x40u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0x16u:
        *((_DWORD *)this + 30) |= 0x80u;
        v32 = *((void *)a2 + 1);
        v2 = *((void *)a2 + 2);
        v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v52 = 0;
          v53 = 0;
          v36 = 0;
          if (v2 <= v32) {
            v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_170;
            }
            v54 = v32++;
            v55 = *(unsigned char *)(v33 + v54);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0) {
              break;
            }
            v52 += 7;
            v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_169:
              v2 = v54 + 1;
              goto LABEL_170;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_169;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_170;
          }
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_170:
        *((_DWORD *)this + 10) = v36;
        break;
      case 0x17u:
        *((_DWORD *)this + 30) |= 2u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0x18u:
        *((_DWORD *)this + 30) |= 0x4000000u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0x19u:
        *((_DWORD *)this + 30) |= 0x80000u;
        v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_119;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_149;
      case 0x1Au:
        *((_DWORD *)this + 30) |= 4u;
        v38 = *((void *)a2 + 1);
        v2 = *((void *)a2 + 2);
        v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v42 = 0;
          if (v2 <= v38) {
            v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_175;
            }
            v58 = v38++;
            v59 = *(unsigned char *)(v39 + v58);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_174:
              v2 = v58 + 1;
              goto LABEL_175;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_174;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_175;
          }
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_175:
        *((_DWORD *)this + 5) = v42;
        break;
      case 0x1Bu:
        *((_DWORD *)this + 30) |= 0x40000u;
        v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_149:
          v2 = *((void *)a2 + 1) + 4;
LABEL_150:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_119:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_151:
    v3 = *((void *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::DopplerDebugRecord::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 120);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    int v4 = *(_DWORD *)(v3 + 120);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0) {
      goto LABEL_27;
    }
LABEL_54:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_DWORD *)(v3 + 120) & 0x40000) == 0) {
      return this;
    }
    goto LABEL_55;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 4) != 0) {
    goto LABEL_54;
  }
LABEL_27:
  if ((v4 & 0x40000) == 0) {
    return this;
  }
LABEL_55:
  float v5 = *(float *)(v3 + 84);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::DopplerDebugRecord::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 120);
  int v3 = *(_DWORD *)(a2 + 120);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40000) == 0;
  if ((v2 & 0x40000) != 0) {
    return (v3 & 0x40000) != 0 && *(float *)(a1 + 84) == *(float *)(a2 + 84);
  }
  return v4;
}

uint64_t CMMsl::DopplerDebugRecord::hash_value(CMMsl::DopplerDebugRecord *this)
{
  int v1 = *((_DWORD *)this + 30);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_3;
    }
LABEL_76:
    uint64_t v4 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_6;
    }
LABEL_77:
    uint64_t v6 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_9;
    }
LABEL_78:
    uint64_t v8 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_12;
    }
LABEL_79:
    uint64_t v10 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_15;
    }
LABEL_80:
    uint64_t v12 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_18;
    }
LABEL_81:
    uint64_t v14 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_21;
    }
LABEL_82:
    uint64_t v16 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_24;
    }
LABEL_83:
    uint64_t v18 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_27;
    }
LABEL_84:
    uint64_t v20 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_30;
    }
LABEL_85:
    uint64_t v22 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_86;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_76;
  }
LABEL_3:
  float v3 = *((float *)this + 27);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_77;
  }
LABEL_6:
  float v5 = *((float *)this + 24);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_78;
  }
LABEL_9:
  float v7 = *((float *)this + 25);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_79;
  }
LABEL_12:
  float v9 = *((float *)this + 26);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_80;
  }
LABEL_15:
  float v11 = *((float *)this + 23);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_81;
  }
LABEL_18:
  float v13 = *((float *)this + 28);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_82;
  }
LABEL_21:
  float v15 = *((float *)this + 6);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_83;
  }
LABEL_24:
  float v17 = *((float *)this + 8);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_84;
  }
LABEL_27:
  float v19 = *((float *)this + 7);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_85;
  }
LABEL_30:
  float v21 = *((float *)this + 20);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_33:
    uint64_t v23 = *((int *)this + 19);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_34;
    }
LABEL_87:
    uint64_t v25 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_37;
    }
LABEL_88:
    uint64_t v27 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_40;
    }
LABEL_89:
    uint64_t v29 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_43;
    }
LABEL_90:
    uint64_t v31 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_46;
    }
    goto LABEL_91;
  }
LABEL_86:
  uint64_t v23 = 0;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_87;
  }
LABEL_34:
  float v24 = *((float *)this + 17);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_88;
  }
LABEL_37:
  float v26 = *((float *)this + 18);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_89;
  }
LABEL_40:
  float v28 = *((float *)this + 16);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_90;
  }
LABEL_43:
  float v30 = *((float *)this + 14);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  if ((v1 & 0x1000) != 0)
  {
LABEL_46:
    uint64_t v32 = *((int *)this + 15);
    if ((v1 & 0x200) != 0) {
      goto LABEL_47;
    }
LABEL_92:
    uint64_t v34 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_50;
    }
LABEL_93:
    uint64_t v36 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_53;
    }
LABEL_94:
    uint64_t v38 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_56;
    }
LABEL_95:
    uint64_t v40 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_59;
    }
    goto LABEL_96;
  }
LABEL_91:
  uint64_t v32 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_92;
  }
LABEL_47:
  float v33 = *((float *)this + 12);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_93;
  }
LABEL_50:
  float v35 = *((float *)this + 13);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_94;
  }
LABEL_53:
  float v37 = *((float *)this + 11);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_95;
  }
LABEL_56:
  float v39 = *((float *)this + 9);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_59:
    uint64_t v41 = *((int *)this + 10);
    if ((v1 & 2) != 0) {
      goto LABEL_60;
    }
LABEL_97:
    uint64_t v43 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_63;
    }
LABEL_98:
    uint64_t v45 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_66;
    }
LABEL_99:
    uint64_t v47 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_69;
    }
    goto LABEL_100;
  }
LABEL_96:
  uint64_t v41 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_97;
  }
LABEL_60:
  float v42 = *((float *)this + 4);
  uint64_t v43 = LODWORD(v42);
  if (v42 == 0.0) {
    uint64_t v43 = 0;
  }
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_98;
  }
LABEL_63:
  float v44 = *((float *)this + 29);
  uint64_t v45 = LODWORD(v44);
  if (v44 == 0.0) {
    uint64_t v45 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_99;
  }
LABEL_66:
  float v46 = *((float *)this + 22);
  uint64_t v47 = LODWORD(v46);
  if (v46 == 0.0) {
    uint64_t v47 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_69:
    uint64_t v48 = *((unsigned int *)this + 5);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_70;
    }
LABEL_101:
    uint64_t v50 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v41 ^ v43 ^ v45 ^ v47 ^ v48 ^ v50;
  }
LABEL_100:
  uint64_t v48 = 0;
  if ((v1 & 0x40000) == 0) {
    goto LABEL_101;
  }
LABEL_70:
  float v49 = *((float *)this + 21);
  uint64_t v50 = LODWORD(v49);
  if (v49 == 0.0) {
    uint64_t v50 = 0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v41 ^ v43 ^ v45 ^ v47 ^ v48 ^ v50;
}

uint64_t CMMsl::DopplerProximityEvent::DopplerProximityEvent(uint64_t this)
{
  *(void *)this = &unk_2706412F8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_2706412F8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::DopplerProximityEvent::~DopplerProximityEvent(CMMsl::DopplerProximityEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::DopplerProximityEvent::DopplerProximityEvent(uint64_t this, const CMMsl::DopplerProximityEvent *a2)
{
  *(void *)this = &unk_2706412F8;
  *(_DWORD *)(this + 24) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 24) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 24) = v3 | 2;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t CMMsl::DopplerProximityEvent::operator=(uint64_t a1, const CMMsl::DopplerProximityEvent *a2)
{
  if ((const CMMsl::DopplerProximityEvent *)a1 != a2)
  {
    CMMsl::DopplerProximityEvent::DopplerProximityEvent((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v4 = v10;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v4;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DopplerProximityEvent *a2, CMMsl::DopplerProximityEvent *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

double CMMsl::DopplerProximityEvent::DopplerProximityEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706412F8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706412F8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::DopplerProximityEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v7[0] = &unk_2706412F8;
    int v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::DopplerProximityEvent::formatText(CMMsl::DopplerProximityEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "proximityRawValue");
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "proximityState");
  if (*((unsigned char *)this + 24)) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::DopplerProximityEvent::readFrom(CMMsl::DopplerProximityEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v26 = 0;
          if (v2 <= v22) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v36 = v22++;
            char v37 = *(unsigned char *)(v23 + v36);
            *((void *)a2 + 1) = v22;
            v26 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
LABEL_66:
          unint64_t v2 = v36 + 1;
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v2 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v27 = *(unsigned char *)(v23 + v22);
            v26 |= (unint64_t)(v27 & 0x7F) << v24;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v22 = v2;
            BOOL v14 = v25++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 4) = v26;
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v29 = *(void *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v32 = 0;
          if (v2 <= v28) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_72;
            }
            unint64_t v40 = v28++;
            char v41 = *(unsigned char *)(v29 + v40);
            *((void *)a2 + 1) = v28;
            v32 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              goto LABEL_71;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v32) = 0;
          }
LABEL_71:
          unint64_t v2 = v40 + 1;
        }
        else
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          while (1)
          {
            unint64_t v2 = v28 + 1;
            *((void *)a2 + 1) = v28 + 1;
            char v33 = *(unsigned char *)(v29 + v28);
            v32 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v28 = v2;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              break;
            }
          }
        }
LABEL_72:
        *((_DWORD *)this + 5) = v32;
      }
      else if (v19 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_27:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_27;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DopplerProximityEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 24) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 24) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::DopplerProximityEvent::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 2) == 0;
  if ((*(unsigned char *)(a1 + 24) & 2) != 0) {
    return (*(unsigned char *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::DopplerProximityEvent::hash_value(CMMsl::DopplerProximityEvent *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v2 ^ *(void *)&v1 ^ v3;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1 ^ v3;
}

void *CMMsl::DopplerRawDataInput::DopplerRawDataInput(void *this)
{
  *this = &unk_270641330;
  *(void *)((char *)this + 164) = 0;
  return this;
}

{
  *this = &unk_270641330;
  *(void *)((char *)this + 164) = 0;
  return this;
}

void CMMsl::DopplerRawDataInput::~DopplerRawDataInput(CMMsl::DopplerRawDataInput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::DopplerRawDataInput::DopplerRawDataInput(uint64_t this, const CMMsl::DopplerRawDataInput *a2)
{
  *(void *)this = &unk_270641330;
  *(void *)(this + 164) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    uint64_t v3 = 16;
    *(void *)(this + 164) = 16;
    *(void *)(this + 40) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 164);
    if ((v2 & 0x80000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 26);
    v3 |= 0x80000uLL;
    *(void *)(this + 164) = v3;
    *(_DWORD *)(this + 104) = v5;
    uint64_t v2 = *(void *)((char *)a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x20000000) != 0)
  {
    int v6 = *((_DWORD *)a2 + 36);
    v3 |= 0x20000000uLL;
    *(void *)(this + 164) = v3;
    *(_DWORD *)(this + 144) = v6;
    uint64_t v2 = *(void *)((char *)a2 + 164);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_41;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 12);
  v3 |= 0x20uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 48) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v8 = *((_DWORD *)a2 + 37);
  v3 |= 0x40000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 148) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v9 = *((_DWORD *)a2 + 13);
  v3 |= 0x40uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 52) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v10 = *((_DWORD *)a2 + 39);
  v3 |= 0x100000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 156) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v11 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 80) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v12 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 76) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v13 = *((_DWORD *)a2 + 14);
  v3 |= 0x80uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 56) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v14 = *((_DWORD *)a2 + 40);
  v3 |= 0x200000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 160) = v14;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v15 = *((_DWORD *)a2 + 35);
  v3 |= 0x10000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 140) = v15;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v16 = *((_DWORD *)a2 + 17);
  v3 |= 0x400uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 68) = v16;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v17 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 84) = v17;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v18 = *((_DWORD *)a2 + 30);
  v3 |= 0x800000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 120) = v18;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v19 = *((_DWORD *)a2 + 32);
  v3 |= 0x2000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 128) = v19;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v20 = *((_DWORD *)a2 + 34);
  v3 |= 0x8000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 136) = v20;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v21 = *((_DWORD *)a2 + 33);
  v3 |= 0x4000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 132) = v21;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v22 = *((_DWORD *)a2 + 29);
  v3 |= 0x400000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 116) = v22;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v23 = *((_DWORD *)a2 + 31);
  v3 |= 0x1000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 124) = v23;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v24 = *((_DWORD *)a2 + 38);
  v3 |= 0x80000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 152) = v24;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v25 = *((_DWORD *)a2 + 22);
  v3 |= 0x8000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 88) = v25;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v26 = *((_DWORD *)a2 + 27);
  v3 |= 0x100000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 108) = v26;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v27 = *((_DWORD *)a2 + 15);
  v3 |= 0x100uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 60) = v27;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x200) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v28 = *((_DWORD *)a2 + 28);
  v3 |= 0x200000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 112) = v28;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_30:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v29 = *((_DWORD *)a2 + 16);
  v3 |= 0x200uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 64) = v29;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_31:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v30 = *((_DWORD *)a2 + 24);
  v3 |= 0x20000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 96) = v30;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_32:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v31 = *((_DWORD *)a2 + 25);
  v3 |= 0x40000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 100) = v31;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10000) == 0)
  {
LABEL_33:
    if ((v2 & 8) == 0) {
      goto LABEL_34;
    }
    goto LABEL_66;
  }
LABEL_65:
  int v32 = *((_DWORD *)a2 + 23);
  v3 |= 0x10000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 92) = v32;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 8) == 0)
  {
LABEL_34:
    if ((v2 & 4) == 0) {
      goto LABEL_35;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v33 = *((void *)a2 + 4);
  v3 |= 8uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 32) = v33;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_35:
    if ((v2 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v34 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 24) = v34;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_36:
    if ((v2 & 2) == 0) {
      goto LABEL_37;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v35 = *((void *)a2 + 1);
  v3 |= 1uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 8) = v35;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_37:
    if ((v2 & 0x800) == 0) {
      return this;
    }
LABEL_70:
    int v37 = *((_DWORD *)a2 + 18);
    *(void *)(this + 164) = v3 | 0x800;
    *(_DWORD *)(this + 72) = v37;
    return this;
  }
LABEL_69:
  uint64_t v36 = *((void *)a2 + 2);
  v3 |= 2uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 16) = v36;
  if ((*(void *)((unsigned char *)a2 + 164) & 0x800) != 0) {
    goto LABEL_70;
  }
  return this;
}

CMMsl *CMMsl::DopplerRawDataInput::operator=(CMMsl *a1, const CMMsl::DopplerRawDataInput *a2)
{
  if (a1 != a2)
  {
    CMMsl::DopplerRawDataInput::DopplerRawDataInput((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerRawDataInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DopplerRawDataInput *a2, CMMsl::DopplerRawDataInput *a3)
{
  uint64_t v3 = *(void *)((char *)this + 164);
  *(void *)((char *)this + 164) = *(void *)((char *)a2 + 164);
  *(void *)((char *)a2 + 164) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v4;
  LODWORD(v3) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  LODWORD(v3) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  LODWORD(v3) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  LODWORD(v3) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v3;
  LODWORD(v3) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v3;
  LODWORD(v3) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  LODWORD(v3) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  LODWORD(v3) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  LODWORD(v3) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  LODWORD(v3) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  LODWORD(v3) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  LODWORD(v3) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  float result = *((float *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((float *)a2 + 16) = result;
  LODWORD(v3) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  LODWORD(v9) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  return result;
}

float CMMsl::DopplerRawDataInput::DopplerRawDataInput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641330;
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(void *)(a2 + 164) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  float result = *(float *)(a2 + 64);
  *(float *)(a1 + 64) = result;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return result;
}

CMMsl *CMMsl::DopplerRawDataInput::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DopplerRawDataInput::DopplerRawDataInput((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerRawDataInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::DopplerRawDataInput::formatText(CMMsl::DopplerRawDataInput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "ambientRatePerSPAD", *((float *)this + 12));
    uint64_t v5 = *(void *)((char *)this + 164);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_41;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "ambientRateTotal", *((float *)this + 13));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "blockSelectByte");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "correctedSignalRatePerSPAD", *((float *)this + 15));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "estimatedAmbientBias", *((float *)this + 16));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "integrationTime");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "numAOPClients");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "numAperturedSPADs");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "numFullSPADs");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "oscFrequencySetting");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "oscTrim");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "pearlScanWindowOnTs");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "pearlScanWindowOpen");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "pearlScanWindownOffTs");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 4) == 0)
  {
LABEL_16:
    if ((v5 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "pearlSessionOffTs");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 8) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "pearlSessionOnTs");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "pearlSessionRunning");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "pearlSessionType");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "rawRange", *((float *)this + 26));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "refPhaseOffset");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "refSignalRateTotal", *((float *)this + 28));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "regValAmbientWindowEvents");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "regValRange");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "regValRefAmbientWindowEvents");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "regValRefRange");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "regValRefSignalTotalEvents");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "regValSignalTotalEvents");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "signalEventLimit");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "signalRatePerSPAD", *((float *)this + 36));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "signalRateTotal", *((float *)this + 37));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "signalToAmbientWindowRatio");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "totalRateTotal", *((float *)this + 39));
  if ((*(void *)((unsigned char *)this + 164) & 0x200000000) != 0) {
LABEL_35:
  }
    PB::TextFormatter::format(a2, "vhvSetting");
LABEL_36:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::DopplerRawDataInput::readFrom(CMMsl::DopplerRawDataInput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(void *)((char *)this + 164) |= 0x10uLL;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v21);
        uint64_t v22 = *((void *)a2 + 1) + 8;
        goto LABEL_395;
      case 2u:
        *(void *)((char *)this + 164) |= 0x80000uLL;
        unint64_t v23 = *((void *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v23);
        goto LABEL_394;
      case 3u:
        *(void *)((char *)this + 164) |= 0x20000000uLL;
        unint64_t v24 = *((void *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v24);
        goto LABEL_394;
      case 4u:
        *(void *)((char *)this + 164) |= 0x20uLL;
        unint64_t v25 = *((void *)a2 + 1);
        if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v25);
        goto LABEL_394;
      case 5u:
        *(void *)((char *)this + 164) |= 0x40000000uLL;
        unint64_t v26 = *((void *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v26);
        goto LABEL_394;
      case 6u:
        *(void *)((char *)this + 164) |= 0x40uLL;
        unint64_t v27 = *((void *)a2 + 1);
        if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v27);
        goto LABEL_394;
      case 7u:
        *(void *)((char *)this + 164) |= 0x100000000uLL;
        unint64_t v28 = *((void *)a2 + 1);
        if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v28);
        goto LABEL_394;
      case 8u:
        *(void *)((char *)this + 164) |= 0x2000uLL;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          do
          {
            unint64_t v35 = v29 + 1;
            *((void *)a2 + 1) = v29 + 1;
            char v36 = *(unsigned char *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              goto LABEL_399;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
          }
          while (!v14);
LABEL_231:
          LODWORD(v34) = 0;
          goto LABEL_399;
        }
        char v224 = 0;
        unsigned int v225 = 0;
        uint64_t v34 = 0;
        if (v30 <= v29) {
          unint64_t v30 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v226 = v29 + 1;
            char v227 = *(unsigned char *)(v31 + v29);
            *((void *)a2 + 1) = v226;
            v34 |= (unint64_t)(v227 & 0x7F) << v224;
            if (v227 < 0)
            {
              v224 += 7;
              unint64_t v29 = v226;
              BOOL v14 = v225++ > 8;
              if (v14) {
                goto LABEL_231;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v34) = 0;
            }
          }
          break;
        }
LABEL_399:
        *((_DWORD *)this + 20) = v34;
        goto LABEL_20;
      case 9u:
        *(void *)((char *)this + 164) |= 0x1000uLL;
        unint64_t v37 = *((void *)a2 + 1);
        unint64_t v38 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v42 = 0;
          do
          {
            unint64_t v43 = v37 + 1;
            *((void *)a2 + 1) = v37 + 1;
            char v44 = *(unsigned char *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0) {
              goto LABEL_403;
            }
            v40 += 7;
            unint64_t v37 = v43;
            BOOL v14 = v41++ > 8;
          }
          while (!v14);
LABEL_238:
          LODWORD(v42) = 0;
          goto LABEL_403;
        }
        char v228 = 0;
        unsigned int v229 = 0;
        uint64_t v42 = 0;
        if (v38 <= v37) {
          unint64_t v38 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v38 == v37)
          {
            LODWORD(v42) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v230 = v37 + 1;
            char v231 = *(unsigned char *)(v39 + v37);
            *((void *)a2 + 1) = v230;
            v42 |= (unint64_t)(v231 & 0x7F) << v228;
            if (v231 < 0)
            {
              v228 += 7;
              unint64_t v37 = v230;
              BOOL v14 = v229++ > 8;
              if (v14) {
                goto LABEL_238;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v42) = 0;
            }
          }
          break;
        }
LABEL_403:
        *((_DWORD *)this + 19) = v42;
        goto LABEL_20;
      case 0xAu:
        *(void *)((char *)this + 164) |= 0x80uLL;
        unint64_t v45 = *((void *)a2 + 1);
        unint64_t v46 = *((void *)a2 + 2);
        uint64_t v47 = *(void *)a2;
        if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v50 = 0;
          do
          {
            unint64_t v51 = v45 + 1;
            *((void *)a2 + 1) = v45 + 1;
            char v52 = *(unsigned char *)(v47 + v45);
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if ((v52 & 0x80) == 0) {
              goto LABEL_407;
            }
            v48 += 7;
            unint64_t v45 = v51;
            BOOL v14 = v49++ > 8;
          }
          while (!v14);
LABEL_245:
          LODWORD(v50) = 0;
          goto LABEL_407;
        }
        char v232 = 0;
        unsigned int v233 = 0;
        uint64_t v50 = 0;
        if (v46 <= v45) {
          unint64_t v46 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v46 == v45)
          {
            LODWORD(v50) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v234 = v45 + 1;
            char v235 = *(unsigned char *)(v47 + v45);
            *((void *)a2 + 1) = v234;
            v50 |= (unint64_t)(v235 & 0x7F) << v232;
            if (v235 < 0)
            {
              v232 += 7;
              unint64_t v45 = v234;
              BOOL v14 = v233++ > 8;
              if (v14) {
                goto LABEL_245;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v50) = 0;
            }
          }
          break;
        }
LABEL_407:
        *((_DWORD *)this + 14) = v50;
        goto LABEL_20;
      case 0xBu:
        *(void *)((char *)this + 164) |= 0x200000000uLL;
        unint64_t v53 = *((void *)a2 + 1);
        unint64_t v54 = *((void *)a2 + 2);
        uint64_t v55 = *(void *)a2;
        if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v58 = 0;
          do
          {
            unint64_t v59 = v53 + 1;
            *((void *)a2 + 1) = v53 + 1;
            char v60 = *(unsigned char *)(v55 + v53);
            v58 |= (unint64_t)(v60 & 0x7F) << v56;
            if ((v60 & 0x80) == 0) {
              goto LABEL_411;
            }
            v56 += 7;
            unint64_t v53 = v59;
            BOOL v14 = v57++ > 8;
          }
          while (!v14);
LABEL_252:
          LODWORD(v58) = 0;
          goto LABEL_411;
        }
        char v236 = 0;
        unsigned int v237 = 0;
        uint64_t v58 = 0;
        if (v54 <= v53) {
          unint64_t v54 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v54 == v53)
          {
            LODWORD(v58) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v238 = v53 + 1;
            char v239 = *(unsigned char *)(v55 + v53);
            *((void *)a2 + 1) = v238;
            v58 |= (unint64_t)(v239 & 0x7F) << v236;
            if (v239 < 0)
            {
              v236 += 7;
              unint64_t v53 = v238;
              BOOL v14 = v237++ > 8;
              if (v14) {
                goto LABEL_252;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v58) = 0;
            }
          }
          break;
        }
LABEL_411:
        *((_DWORD *)this + 40) = v58;
        goto LABEL_20;
      case 0xCu:
        *(void *)((char *)this + 164) |= 0x10000000uLL;
        unint64_t v61 = *((void *)a2 + 1);
        unint64_t v62 = *((void *)a2 + 2);
        uint64_t v63 = *(void *)a2;
        if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
        {
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v66 = 0;
          do
          {
            unint64_t v67 = v61 + 1;
            *((void *)a2 + 1) = v61 + 1;
            char v68 = *(unsigned char *)(v63 + v61);
            v66 |= (unint64_t)(v68 & 0x7F) << v64;
            if ((v68 & 0x80) == 0) {
              goto LABEL_415;
            }
            v64 += 7;
            unint64_t v61 = v67;
            BOOL v14 = v65++ > 8;
          }
          while (!v14);
LABEL_259:
          LODWORD(v66) = 0;
          goto LABEL_415;
        }
        char v240 = 0;
        unsigned int v241 = 0;
        uint64_t v66 = 0;
        if (v62 <= v61) {
          unint64_t v62 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v62 == v61)
          {
            LODWORD(v66) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v242 = v61 + 1;
            char v243 = *(unsigned char *)(v63 + v61);
            *((void *)a2 + 1) = v242;
            v66 |= (unint64_t)(v243 & 0x7F) << v240;
            if (v243 < 0)
            {
              v240 += 7;
              unint64_t v61 = v242;
              BOOL v14 = v241++ > 8;
              if (v14) {
                goto LABEL_259;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v66) = 0;
            }
          }
          break;
        }
LABEL_415:
        *((_DWORD *)this + 35) = v66;
        goto LABEL_20;
      case 0xDu:
        *(void *)((char *)this + 164) |= 0x400uLL;
        unint64_t v69 = *((void *)a2 + 1);
        unint64_t v70 = *((void *)a2 + 2);
        uint64_t v71 = *(void *)a2;
        if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
        {
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v74 = 0;
          do
          {
            unint64_t v75 = v69 + 1;
            *((void *)a2 + 1) = v69 + 1;
            char v76 = *(unsigned char *)(v71 + v69);
            v74 |= (unint64_t)(v76 & 0x7F) << v72;
            if ((v76 & 0x80) == 0) {
              goto LABEL_419;
            }
            v72 += 7;
            unint64_t v69 = v75;
            BOOL v14 = v73++ > 8;
          }
          while (!v14);
LABEL_266:
          LODWORD(v74) = 0;
          goto LABEL_419;
        }
        char v244 = 0;
        unsigned int v245 = 0;
        uint64_t v74 = 0;
        if (v70 <= v69) {
          unint64_t v70 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v70 == v69)
          {
            LODWORD(v74) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v246 = v69 + 1;
            char v247 = *(unsigned char *)(v71 + v69);
            *((void *)a2 + 1) = v246;
            v74 |= (unint64_t)(v247 & 0x7F) << v244;
            if (v247 < 0)
            {
              v244 += 7;
              unint64_t v69 = v246;
              BOOL v14 = v245++ > 8;
              if (v14) {
                goto LABEL_266;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v74) = 0;
            }
          }
          break;
        }
LABEL_419:
        *((_DWORD *)this + 17) = v74;
        goto LABEL_20;
      case 0xEu:
        *(void *)((char *)this + 164) |= 0x4000uLL;
        unint64_t v77 = *((void *)a2 + 1);
        unint64_t v78 = *((void *)a2 + 2);
        uint64_t v79 = *(void *)a2;
        if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
        {
          char v80 = 0;
          unsigned int v81 = 0;
          uint64_t v82 = 0;
          do
          {
            unint64_t v83 = v77 + 1;
            *((void *)a2 + 1) = v77 + 1;
            char v84 = *(unsigned char *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0) {
              goto LABEL_423;
            }
            v80 += 7;
            unint64_t v77 = v83;
            BOOL v14 = v81++ > 8;
          }
          while (!v14);
LABEL_273:
          LODWORD(v82) = 0;
          goto LABEL_423;
        }
        char v248 = 0;
        unsigned int v249 = 0;
        uint64_t v82 = 0;
        if (v78 <= v77) {
          unint64_t v78 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v78 == v77)
          {
            LODWORD(v82) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v250 = v77 + 1;
            char v251 = *(unsigned char *)(v79 + v77);
            *((void *)a2 + 1) = v250;
            v82 |= (unint64_t)(v251 & 0x7F) << v248;
            if (v251 < 0)
            {
              v248 += 7;
              unint64_t v77 = v250;
              BOOL v14 = v249++ > 8;
              if (v14) {
                goto LABEL_273;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v82) = 0;
            }
          }
          break;
        }
LABEL_423:
        *((_DWORD *)this + 21) = v82;
        goto LABEL_20;
      case 0xFu:
        *(void *)((char *)this + 164) |= 0x800000uLL;
        unint64_t v85 = *((void *)a2 + 1);
        unint64_t v86 = *((void *)a2 + 2);
        uint64_t v87 = *(void *)a2;
        if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
        {
          char v88 = 0;
          unsigned int v89 = 0;
          uint64_t v90 = 0;
          do
          {
            unint64_t v91 = v85 + 1;
            *((void *)a2 + 1) = v85 + 1;
            char v92 = *(unsigned char *)(v87 + v85);
            v90 |= (unint64_t)(v92 & 0x7F) << v88;
            if ((v92 & 0x80) == 0) {
              goto LABEL_427;
            }
            v88 += 7;
            unint64_t v85 = v91;
            BOOL v14 = v89++ > 8;
          }
          while (!v14);
LABEL_280:
          LODWORD(v90) = 0;
          goto LABEL_427;
        }
        char v252 = 0;
        unsigned int v253 = 0;
        uint64_t v90 = 0;
        if (v86 <= v85) {
          unint64_t v86 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v254 = v85 + 1;
            char v255 = *(unsigned char *)(v87 + v85);
            *((void *)a2 + 1) = v254;
            v90 |= (unint64_t)(v255 & 0x7F) << v252;
            if (v255 < 0)
            {
              v252 += 7;
              unint64_t v85 = v254;
              BOOL v14 = v253++ > 8;
              if (v14) {
                goto LABEL_280;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v90) = 0;
            }
          }
          break;
        }
LABEL_427:
        *((_DWORD *)this + 30) = v90;
        goto LABEL_20;
      case 0x10u:
        *(void *)((char *)this + 164) |= 0x2000000uLL;
        unint64_t v93 = *((void *)a2 + 1);
        unint64_t v94 = *((void *)a2 + 2);
        uint64_t v95 = *(void *)a2;
        if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
        {
          char v96 = 0;
          unsigned int v97 = 0;
          uint64_t v98 = 0;
          do
          {
            unint64_t v99 = v93 + 1;
            *((void *)a2 + 1) = v93 + 1;
            char v100 = *(unsigned char *)(v95 + v93);
            v98 |= (unint64_t)(v100 & 0x7F) << v96;
            if ((v100 & 0x80) == 0) {
              goto LABEL_431;
            }
            v96 += 7;
            unint64_t v93 = v99;
            BOOL v14 = v97++ > 8;
          }
          while (!v14);
LABEL_287:
          LODWORD(v98) = 0;
          goto LABEL_431;
        }
        char v256 = 0;
        unsigned int v257 = 0;
        uint64_t v98 = 0;
        if (v94 <= v93) {
          unint64_t v94 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v94 == v93)
          {
            LODWORD(v98) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v258 = v93 + 1;
            char v259 = *(unsigned char *)(v95 + v93);
            *((void *)a2 + 1) = v258;
            v98 |= (unint64_t)(v259 & 0x7F) << v256;
            if (v259 < 0)
            {
              v256 += 7;
              unint64_t v93 = v258;
              BOOL v14 = v257++ > 8;
              if (v14) {
                goto LABEL_287;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v98) = 0;
            }
          }
          break;
        }
LABEL_431:
        *((_DWORD *)this + 32) = v98;
        goto LABEL_20;
      case 0x11u:
        *(void *)((char *)this + 164) |= 0x8000000uLL;
        unint64_t v101 = *((void *)a2 + 1);
        unint64_t v102 = *((void *)a2 + 2);
        uint64_t v103 = *(void *)a2;
        if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
        {
          char v104 = 0;
          unsigned int v105 = 0;
          uint64_t v106 = 0;
          do
          {
            unint64_t v107 = v101 + 1;
            *((void *)a2 + 1) = v101 + 1;
            char v108 = *(unsigned char *)(v103 + v101);
            v106 |= (unint64_t)(v108 & 0x7F) << v104;
            if ((v108 & 0x80) == 0) {
              goto LABEL_435;
            }
            v104 += 7;
            unint64_t v101 = v107;
            BOOL v14 = v105++ > 8;
          }
          while (!v14);
LABEL_294:
          LODWORD(v106) = 0;
          goto LABEL_435;
        }
        char v260 = 0;
        unsigned int v261 = 0;
        uint64_t v106 = 0;
        if (v102 <= v101) {
          unint64_t v102 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v102 == v101)
          {
            LODWORD(v106) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v262 = v101 + 1;
            char v263 = *(unsigned char *)(v103 + v101);
            *((void *)a2 + 1) = v262;
            v106 |= (unint64_t)(v263 & 0x7F) << v260;
            if (v263 < 0)
            {
              v260 += 7;
              unint64_t v101 = v262;
              BOOL v14 = v261++ > 8;
              if (v14) {
                goto LABEL_294;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v106) = 0;
            }
          }
          break;
        }
LABEL_435:
        *((_DWORD *)this + 34) = v106;
        goto LABEL_20;
      case 0x12u:
        *(void *)((char *)this + 164) |= 0x4000000uLL;
        unint64_t v109 = *((void *)a2 + 1);
        unint64_t v110 = *((void *)a2 + 2);
        uint64_t v111 = *(void *)a2;
        if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
        {
          char v112 = 0;
          unsigned int v113 = 0;
          uint64_t v114 = 0;
          do
          {
            unint64_t v115 = v109 + 1;
            *((void *)a2 + 1) = v109 + 1;
            char v116 = *(unsigned char *)(v111 + v109);
            v114 |= (unint64_t)(v116 & 0x7F) << v112;
            if ((v116 & 0x80) == 0) {
              goto LABEL_439;
            }
            v112 += 7;
            unint64_t v109 = v115;
            BOOL v14 = v113++ > 8;
          }
          while (!v14);
LABEL_301:
          LODWORD(v114) = 0;
          goto LABEL_439;
        }
        char v264 = 0;
        unsigned int v265 = 0;
        uint64_t v114 = 0;
        if (v110 <= v109) {
          unint64_t v110 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v110 == v109)
          {
            LODWORD(v114) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v266 = v109 + 1;
            char v267 = *(unsigned char *)(v111 + v109);
            *((void *)a2 + 1) = v266;
            v114 |= (unint64_t)(v267 & 0x7F) << v264;
            if (v267 < 0)
            {
              v264 += 7;
              unint64_t v109 = v266;
              BOOL v14 = v265++ > 8;
              if (v14) {
                goto LABEL_301;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v114) = 0;
            }
          }
          break;
        }
LABEL_439:
        *((_DWORD *)this + 33) = v114;
        goto LABEL_20;
      case 0x13u:
        *(void *)((char *)this + 164) |= 0x400000uLL;
        unint64_t v117 = *((void *)a2 + 1);
        unint64_t v118 = *((void *)a2 + 2);
        uint64_t v119 = *(void *)a2;
        if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
        {
          char v120 = 0;
          unsigned int v121 = 0;
          uint64_t v122 = 0;
          do
          {
            unint64_t v123 = v117 + 1;
            *((void *)a2 + 1) = v117 + 1;
            char v124 = *(unsigned char *)(v119 + v117);
            v122 |= (unint64_t)(v124 & 0x7F) << v120;
            if ((v124 & 0x80) == 0) {
              goto LABEL_443;
            }
            v120 += 7;
            unint64_t v117 = v123;
            BOOL v14 = v121++ > 8;
          }
          while (!v14);
LABEL_308:
          LODWORD(v122) = 0;
          goto LABEL_443;
        }
        char v268 = 0;
        unsigned int v269 = 0;
        uint64_t v122 = 0;
        if (v118 <= v117) {
          unint64_t v118 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v118 == v117)
          {
            LODWORD(v122) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v270 = v117 + 1;
            char v271 = *(unsigned char *)(v119 + v117);
            *((void *)a2 + 1) = v270;
            v122 |= (unint64_t)(v271 & 0x7F) << v268;
            if (v271 < 0)
            {
              v268 += 7;
              unint64_t v117 = v270;
              BOOL v14 = v269++ > 8;
              if (v14) {
                goto LABEL_308;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v122) = 0;
            }
          }
          break;
        }
LABEL_443:
        *((_DWORD *)this + 29) = v122;
        goto LABEL_20;
      case 0x14u:
        *(void *)((char *)this + 164) |= 0x1000000uLL;
        unint64_t v125 = *((void *)a2 + 1);
        unint64_t v126 = *((void *)a2 + 2);
        uint64_t v127 = *(void *)a2;
        if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
        {
          char v128 = 0;
          unsigned int v129 = 0;
          uint64_t v130 = 0;
          do
          {
            unint64_t v131 = v125 + 1;
            *((void *)a2 + 1) = v125 + 1;
            char v132 = *(unsigned char *)(v127 + v125);
            v130 |= (unint64_t)(v132 & 0x7F) << v128;
            if ((v132 & 0x80) == 0) {
              goto LABEL_447;
            }
            v128 += 7;
            unint64_t v125 = v131;
            BOOL v14 = v129++ > 8;
          }
          while (!v14);
LABEL_315:
          LODWORD(v130) = 0;
          goto LABEL_447;
        }
        char v272 = 0;
        unsigned int v273 = 0;
        uint64_t v130 = 0;
        if (v126 <= v125) {
          unint64_t v126 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v126 == v125)
          {
            LODWORD(v130) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v274 = v125 + 1;
            char v275 = *(unsigned char *)(v127 + v125);
            *((void *)a2 + 1) = v274;
            v130 |= (unint64_t)(v275 & 0x7F) << v272;
            if (v275 < 0)
            {
              v272 += 7;
              unint64_t v125 = v274;
              BOOL v14 = v273++ > 8;
              if (v14) {
                goto LABEL_315;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v130) = 0;
            }
          }
          break;
        }
LABEL_447:
        *((_DWORD *)this + 31) = v130;
        goto LABEL_20;
      case 0x15u:
        *(void *)((char *)this + 164) |= 0x80000000uLL;
        unint64_t v133 = *((void *)a2 + 1);
        unint64_t v134 = *((void *)a2 + 2);
        uint64_t v135 = *(void *)a2;
        if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
        {
          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v138 = 0;
          do
          {
            unint64_t v139 = v133 + 1;
            *((void *)a2 + 1) = v133 + 1;
            char v140 = *(unsigned char *)(v135 + v133);
            v138 |= (unint64_t)(v140 & 0x7F) << v136;
            if ((v140 & 0x80) == 0) {
              goto LABEL_451;
            }
            v136 += 7;
            unint64_t v133 = v139;
            BOOL v14 = v137++ > 8;
          }
          while (!v14);
LABEL_322:
          LODWORD(v138) = 0;
          goto LABEL_451;
        }
        char v276 = 0;
        unsigned int v277 = 0;
        uint64_t v138 = 0;
        if (v134 <= v133) {
          unint64_t v134 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v134 == v133)
          {
            LODWORD(v138) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v278 = v133 + 1;
            char v279 = *(unsigned char *)(v135 + v133);
            *((void *)a2 + 1) = v278;
            v138 |= (unint64_t)(v279 & 0x7F) << v276;
            if (v279 < 0)
            {
              v276 += 7;
              unint64_t v133 = v278;
              BOOL v14 = v277++ > 8;
              if (v14) {
                goto LABEL_322;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v138) = 0;
            }
          }
          break;
        }
LABEL_451:
        *((_DWORD *)this + 38) = v138;
        goto LABEL_20;
      case 0x16u:
        *(void *)((char *)this + 164) |= 0x8000uLL;
        unint64_t v141 = *((void *)a2 + 1);
        unint64_t v142 = *((void *)a2 + 2);
        uint64_t v143 = *(void *)a2;
        if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
        {
          char v144 = 0;
          unsigned int v145 = 0;
          uint64_t v146 = 0;
          do
          {
            unint64_t v147 = v141 + 1;
            *((void *)a2 + 1) = v141 + 1;
            char v148 = *(unsigned char *)(v143 + v141);
            v146 |= (unint64_t)(v148 & 0x7F) << v144;
            if ((v148 & 0x80) == 0) {
              goto LABEL_455;
            }
            v144 += 7;
            unint64_t v141 = v147;
            BOOL v14 = v145++ > 8;
          }
          while (!v14);
LABEL_329:
          LODWORD(v146) = 0;
          goto LABEL_455;
        }
        char v280 = 0;
        unsigned int v281 = 0;
        uint64_t v146 = 0;
        if (v142 <= v141) {
          unint64_t v142 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v142 == v141)
          {
            LODWORD(v146) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v282 = v141 + 1;
            char v283 = *(unsigned char *)(v143 + v141);
            *((void *)a2 + 1) = v282;
            v146 |= (unint64_t)(v283 & 0x7F) << v280;
            if (v283 < 0)
            {
              v280 += 7;
              unint64_t v141 = v282;
              BOOL v14 = v281++ > 8;
              if (v14) {
                goto LABEL_329;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v146) = 0;
            }
          }
          break;
        }
LABEL_455:
        *((_DWORD *)this + 22) = v146;
        goto LABEL_20;
      case 0x17u:
        *(void *)((char *)this + 164) |= 0x100000uLL;
        unint64_t v149 = *((void *)a2 + 1);
        unint64_t v150 = *((void *)a2 + 2);
        uint64_t v151 = *(void *)a2;
        if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
        {
          char v152 = 0;
          unsigned int v153 = 0;
          uint64_t v154 = 0;
          do
          {
            unint64_t v155 = v149 + 1;
            *((void *)a2 + 1) = v149 + 1;
            char v156 = *(unsigned char *)(v151 + v149);
            v154 |= (unint64_t)(v156 & 0x7F) << v152;
            if ((v156 & 0x80) == 0) {
              goto LABEL_459;
            }
            v152 += 7;
            unint64_t v149 = v155;
            BOOL v14 = v153++ > 8;
          }
          while (!v14);
LABEL_336:
          LODWORD(v154) = 0;
          goto LABEL_459;
        }
        char v284 = 0;
        unsigned int v285 = 0;
        uint64_t v154 = 0;
        if (v150 <= v149) {
          unint64_t v150 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v150 == v149)
          {
            LODWORD(v154) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v286 = v149 + 1;
            char v287 = *(unsigned char *)(v151 + v149);
            *((void *)a2 + 1) = v286;
            v154 |= (unint64_t)(v287 & 0x7F) << v284;
            if (v287 < 0)
            {
              v284 += 7;
              unint64_t v149 = v286;
              BOOL v14 = v285++ > 8;
              if (v14) {
                goto LABEL_336;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v154) = 0;
            }
          }
          break;
        }
LABEL_459:
        *((_DWORD *)this + 27) = v154;
        goto LABEL_20;
      case 0x18u:
        *(void *)((char *)this + 164) |= 0x100uLL;
        unint64_t v157 = *((void *)a2 + 1);
        if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v157);
        goto LABEL_394;
      case 0x19u:
        *(void *)((char *)this + 164) |= 0x200000uLL;
        unint64_t v158 = *((void *)a2 + 1);
        if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v158);
        goto LABEL_394;
      case 0x1Au:
        *(void *)((char *)this + 164) |= 0x200uLL;
        unint64_t v159 = *((void *)a2 + 1);
        if (v159 <= 0xFFFFFFFFFFFFFFFBLL && v159 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v159);
LABEL_394:
          uint64_t v22 = *((void *)a2 + 1) + 4;
LABEL_395:
          *((void *)a2 + 1) = v22;
        }
        else
        {
LABEL_168:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 0x1Bu:
        *(void *)((char *)this + 164) |= 0x20000uLL;
        unint64_t v160 = *((void *)a2 + 1);
        unint64_t v161 = *((void *)a2 + 2);
        uint64_t v162 = *(void *)a2;
        if (v160 <= 0xFFFFFFFFFFFFFFF5 && v160 + 10 <= v161)
        {
          char v163 = 0;
          unsigned int v164 = 0;
          uint64_t v165 = 0;
          do
          {
            unint64_t v166 = v160 + 1;
            *((void *)a2 + 1) = v160 + 1;
            char v167 = *(unsigned char *)(v162 + v160);
            v165 |= (unint64_t)(v167 & 0x7F) << v163;
            if ((v167 & 0x80) == 0) {
              goto LABEL_463;
            }
            v163 += 7;
            unint64_t v160 = v166;
            BOOL v14 = v164++ > 8;
          }
          while (!v14);
LABEL_343:
          LODWORD(v165) = 0;
          goto LABEL_463;
        }
        char v288 = 0;
        unsigned int v289 = 0;
        uint64_t v165 = 0;
        if (v161 <= v160) {
          unint64_t v161 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v161 == v160)
          {
            LODWORD(v165) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v290 = v160 + 1;
            char v291 = *(unsigned char *)(v162 + v160);
            *((void *)a2 + 1) = v290;
            v165 |= (unint64_t)(v291 & 0x7F) << v288;
            if (v291 < 0)
            {
              v288 += 7;
              unint64_t v160 = v290;
              BOOL v14 = v289++ > 8;
              if (v14) {
                goto LABEL_343;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v165) = 0;
            }
          }
          break;
        }
LABEL_463:
        *((_DWORD *)this + 24) = v165;
        goto LABEL_20;
      case 0x1Cu:
        *(void *)((char *)this + 164) |= 0x40000uLL;
        unint64_t v168 = *((void *)a2 + 1);
        unint64_t v169 = *((void *)a2 + 2);
        uint64_t v170 = *(void *)a2;
        if (v168 <= 0xFFFFFFFFFFFFFFF5 && v168 + 10 <= v169)
        {
          char v171 = 0;
          unsigned int v172 = 0;
          uint64_t v173 = 0;
          do
          {
            unint64_t v174 = v168 + 1;
            *((void *)a2 + 1) = v168 + 1;
            char v175 = *(unsigned char *)(v170 + v168);
            v173 |= (unint64_t)(v175 & 0x7F) << v171;
            if ((v175 & 0x80) == 0) {
              goto LABEL_467;
            }
            v171 += 7;
            unint64_t v168 = v174;
            BOOL v14 = v172++ > 8;
          }
          while (!v14);
LABEL_350:
          LODWORD(v173) = 0;
          goto LABEL_467;
        }
        char v292 = 0;
        unsigned int v293 = 0;
        uint64_t v173 = 0;
        if (v169 <= v168) {
          unint64_t v169 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v169 == v168)
          {
            LODWORD(v173) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v294 = v168 + 1;
            char v295 = *(unsigned char *)(v170 + v168);
            *((void *)a2 + 1) = v294;
            v173 |= (unint64_t)(v295 & 0x7F) << v292;
            if (v295 < 0)
            {
              v292 += 7;
              unint64_t v168 = v294;
              BOOL v14 = v293++ > 8;
              if (v14) {
                goto LABEL_350;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v173) = 0;
            }
          }
          break;
        }
LABEL_467:
        *((_DWORD *)this + 25) = v173;
        goto LABEL_20;
      case 0x1Du:
        *(void *)((char *)this + 164) |= 0x10000uLL;
        unint64_t v176 = *((void *)a2 + 1);
        unint64_t v177 = *((void *)a2 + 2);
        uint64_t v178 = *(void *)a2;
        if (v176 <= 0xFFFFFFFFFFFFFFF5 && v176 + 10 <= v177)
        {
          char v179 = 0;
          unsigned int v180 = 0;
          uint64_t v181 = 0;
          do
          {
            unint64_t v182 = v176 + 1;
            *((void *)a2 + 1) = v176 + 1;
            char v183 = *(unsigned char *)(v178 + v176);
            v181 |= (unint64_t)(v183 & 0x7F) << v179;
            if ((v183 & 0x80) == 0) {
              goto LABEL_471;
            }
            v179 += 7;
            unint64_t v176 = v182;
            BOOL v14 = v180++ > 8;
          }
          while (!v14);
LABEL_357:
          LODWORD(v181) = 0;
          goto LABEL_471;
        }
        char v296 = 0;
        unsigned int v297 = 0;
        uint64_t v181 = 0;
        if (v177 <= v176) {
          unint64_t v177 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v177 == v176)
          {
            LODWORD(v181) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v298 = v176 + 1;
            char v299 = *(unsigned char *)(v178 + v176);
            *((void *)a2 + 1) = v298;
            v181 |= (unint64_t)(v299 & 0x7F) << v296;
            if (v299 < 0)
            {
              v296 += 7;
              unint64_t v176 = v298;
              BOOL v14 = v297++ > 8;
              if (v14) {
                goto LABEL_357;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v181) = 0;
            }
          }
          break;
        }
LABEL_471:
        *((_DWORD *)this + 23) = v181;
        goto LABEL_20;
      case 0x1Eu:
        *(void *)((char *)this + 164) |= 8uLL;
        unint64_t v184 = *((void *)a2 + 1);
        unint64_t v185 = *((void *)a2 + 2);
        uint64_t v186 = *(void *)a2;
        if (v184 <= 0xFFFFFFFFFFFFFFF5 && v184 + 10 <= v185)
        {
          char v187 = 0;
          unsigned int v188 = 0;
          uint64_t v189 = 0;
          do
          {
            unint64_t v190 = v184 + 1;
            *((void *)a2 + 1) = v184 + 1;
            char v191 = *(unsigned char *)(v186 + v184);
            v189 |= (unint64_t)(v191 & 0x7F) << v187;
            if ((v191 & 0x80) == 0) {
              goto LABEL_475;
            }
            v187 += 7;
            unint64_t v184 = v190;
            BOOL v14 = v188++ > 8;
          }
          while (!v14);
LABEL_364:
          uint64_t v189 = 0;
          goto LABEL_475;
        }
        char v300 = 0;
        unsigned int v301 = 0;
        uint64_t v189 = 0;
        if (v185 <= v184) {
          unint64_t v185 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v185 == v184)
          {
            uint64_t v189 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v302 = v184 + 1;
            char v303 = *(unsigned char *)(v186 + v184);
            *((void *)a2 + 1) = v302;
            v189 |= (unint64_t)(v303 & 0x7F) << v300;
            if (v303 < 0)
            {
              v300 += 7;
              unint64_t v184 = v302;
              BOOL v14 = v301++ > 8;
              if (v14) {
                goto LABEL_364;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v189 = 0;
            }
          }
          break;
        }
LABEL_475:
        *((void *)this + 4) = v189;
        goto LABEL_20;
      case 0x1Fu:
        *(void *)((char *)this + 164) |= 4uLL;
        unint64_t v192 = *((void *)a2 + 1);
        unint64_t v193 = *((void *)a2 + 2);
        uint64_t v194 = *(void *)a2;
        if (v192 <= 0xFFFFFFFFFFFFFFF5 && v192 + 10 <= v193)
        {
          char v195 = 0;
          unsigned int v196 = 0;
          uint64_t v197 = 0;
          do
          {
            unint64_t v198 = v192 + 1;
            *((void *)a2 + 1) = v192 + 1;
            char v199 = *(unsigned char *)(v194 + v192);
            v197 |= (unint64_t)(v199 & 0x7F) << v195;
            if ((v199 & 0x80) == 0) {
              goto LABEL_479;
            }
            v195 += 7;
            unint64_t v192 = v198;
            BOOL v14 = v196++ > 8;
          }
          while (!v14);
LABEL_371:
          uint64_t v197 = 0;
          goto LABEL_479;
        }
        char v304 = 0;
        unsigned int v305 = 0;
        uint64_t v197 = 0;
        if (v193 <= v192) {
          unint64_t v193 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v193 == v192)
          {
            uint64_t v197 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v306 = v192 + 1;
            char v307 = *(unsigned char *)(v194 + v192);
            *((void *)a2 + 1) = v306;
            v197 |= (unint64_t)(v307 & 0x7F) << v304;
            if (v307 < 0)
            {
              v304 += 7;
              unint64_t v192 = v306;
              BOOL v14 = v305++ > 8;
              if (v14) {
                goto LABEL_371;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v197 = 0;
            }
          }
          break;
        }
LABEL_479:
        *((void *)this + 3) = v197;
        goto LABEL_20;
      case 0x20u:
        *(void *)((char *)this + 164) |= 1uLL;
        unint64_t v200 = *((void *)a2 + 1);
        unint64_t v201 = *((void *)a2 + 2);
        uint64_t v202 = *(void *)a2;
        if (v200 <= 0xFFFFFFFFFFFFFFF5 && v200 + 10 <= v201)
        {
          char v203 = 0;
          unsigned int v204 = 0;
          uint64_t v205 = 0;
          do
          {
            unint64_t v206 = v200 + 1;
            *((void *)a2 + 1) = v200 + 1;
            char v207 = *(unsigned char *)(v202 + v200);
            v205 |= (unint64_t)(v207 & 0x7F) << v203;
            if ((v207 & 0x80) == 0) {
              goto LABEL_483;
            }
            v203 += 7;
            unint64_t v200 = v206;
            BOOL v14 = v204++ > 8;
          }
          while (!v14);
LABEL_378:
          uint64_t v205 = 0;
          goto LABEL_483;
        }
        char v308 = 0;
        unsigned int v309 = 0;
        uint64_t v205 = 0;
        if (v201 <= v200) {
          unint64_t v201 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v201 == v200)
          {
            uint64_t v205 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v310 = v200 + 1;
            char v311 = *(unsigned char *)(v202 + v200);
            *((void *)a2 + 1) = v310;
            v205 |= (unint64_t)(v311 & 0x7F) << v308;
            if (v311 < 0)
            {
              v308 += 7;
              unint64_t v200 = v310;
              BOOL v14 = v309++ > 8;
              if (v14) {
                goto LABEL_378;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v205 = 0;
            }
          }
          break;
        }
LABEL_483:
        *((void *)this + 1) = v205;
        goto LABEL_20;
      case 0x21u:
        *(void *)((char *)this + 164) |= 2uLL;
        unint64_t v208 = *((void *)a2 + 1);
        unint64_t v209 = *((void *)a2 + 2);
        uint64_t v210 = *(void *)a2;
        if (v208 <= 0xFFFFFFFFFFFFFFF5 && v208 + 10 <= v209)
        {
          char v211 = 0;
          unsigned int v212 = 0;
          uint64_t v213 = 0;
          do
          {
            unint64_t v214 = v208 + 1;
            *((void *)a2 + 1) = v208 + 1;
            char v215 = *(unsigned char *)(v210 + v208);
            v213 |= (unint64_t)(v215 & 0x7F) << v211;
            if ((v215 & 0x80) == 0) {
              goto LABEL_487;
            }
            v211 += 7;
            unint64_t v208 = v214;
            BOOL v14 = v212++ > 8;
          }
          while (!v14);
LABEL_385:
          uint64_t v213 = 0;
          goto LABEL_487;
        }
        char v312 = 0;
        unsigned int v313 = 0;
        uint64_t v213 = 0;
        if (v209 <= v208) {
          unint64_t v209 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v209 == v208)
          {
            uint64_t v213 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v314 = v208 + 1;
            char v315 = *(unsigned char *)(v210 + v208);
            *((void *)a2 + 1) = v314;
            v213 |= (unint64_t)(v315 & 0x7F) << v312;
            if (v315 < 0)
            {
              v312 += 7;
              unint64_t v208 = v314;
              BOOL v14 = v313++ > 8;
              if (v14) {
                goto LABEL_385;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v213 = 0;
            }
          }
          break;
        }
LABEL_487:
        *((void *)this + 2) = v213;
        goto LABEL_20;
      case 0x22u:
        *(void *)((char *)this + 164) |= 0x800uLL;
        unint64_t v216 = *((void *)a2 + 1);
        unint64_t v217 = *((void *)a2 + 2);
        uint64_t v218 = *(void *)a2;
        if (v216 <= 0xFFFFFFFFFFFFFFF5 && v216 + 10 <= v217)
        {
          char v219 = 0;
          unsigned int v220 = 0;
          uint64_t v221 = 0;
          do
          {
            unint64_t v222 = v216 + 1;
            *((void *)a2 + 1) = v216 + 1;
            char v223 = *(unsigned char *)(v218 + v216);
            v221 |= (unint64_t)(v223 & 0x7F) << v219;
            if ((v223 & 0x80) == 0) {
              goto LABEL_491;
            }
            v219 += 7;
            unint64_t v216 = v222;
            BOOL v14 = v220++ > 8;
          }
          while (!v14);
LABEL_392:
          LODWORD(v221) = 0;
          goto LABEL_491;
        }
        char v316 = 0;
        unsigned int v317 = 0;
        uint64_t v221 = 0;
        if (v217 <= v216) {
          unint64_t v217 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v217 == v216)
      {
        LODWORD(v221) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_491;
      }
      unint64_t v318 = v216 + 1;
      char v319 = *(unsigned char *)(v218 + v216);
      *((void *)a2 + 1) = v318;
      v221 |= (unint64_t)(v319 & 0x7F) << v316;
      if ((v319 & 0x80) == 0) {
        break;
      }
      v316 += 7;
      unint64_t v216 = v318;
      BOOL v14 = v317++ > 8;
      if (v14) {
        goto LABEL_392;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v221) = 0;
    }
LABEL_491:
    *((_DWORD *)this + 18) = v221;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::DopplerRawDataInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 164);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    uint64_t v4 = *(void *)(v3 + 164);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_38;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_29:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_30:
    if ((v4 & 8) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_31:
    if ((v4 & 4) == 0) {
      goto LABEL_32;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_33:
    if ((v4 & 2) == 0) {
      goto LABEL_34;
    }
LABEL_68:
    this = PB::Writer::writeVarInt(a2);
    if ((*(void *)(v3 + 164) & 0x800) == 0) {
      return this;
    }
    goto LABEL_69;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 2) != 0) {
    goto LABEL_68;
  }
LABEL_34:
  if ((v4 & 0x800) == 0) {
    return this;
  }
LABEL_69:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::DopplerRawDataInput::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 164);
  uint64_t v3 = *(void *)(a2 + 164);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(void *)(a2 + 164) & 0x800) == 0;
  if ((v2 & 0x800) != 0) {
    return (v3 & 0x800) != 0 && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72);
  }
  return v4;
}

uint64_t CMMsl::DopplerRawDataInput::hash_value(CMMsl::DopplerRawDataInput *this)
{
  uint64_t v1 = *(void *)((char *)this + 164);
  if ((v1 & 0x10) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_3;
    }
LABEL_61:
    uint64_t v51 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_6;
    }
LABEL_62:
    uint64_t v50 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_63:
    uint64_t v49 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_12;
    }
LABEL_64:
    uint64_t v48 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_65:
    uint64_t v47 = 0;
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_18;
    }
LABEL_66:
    uint64_t v46 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_67;
  }
  if (*((double *)this + 5) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 5);
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_61;
  }
LABEL_3:
  float v3 = *((float *)this + 26);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v51 = v4;
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_62;
  }
LABEL_6:
  float v5 = *((float *)this + 36);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v50 = v6;
  if ((v1 & 0x20) == 0) {
    goto LABEL_63;
  }
LABEL_9:
  float v7 = *((float *)this + 12);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v49 = v8;
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_64;
  }
LABEL_12:
  float v9 = *((float *)this + 37);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v48 = v10;
  if ((v1 & 0x40) == 0) {
    goto LABEL_65;
  }
LABEL_15:
  float v11 = *((float *)this + 13);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v47 = v12;
  if ((v1 & 0x100000000) == 0) {
    goto LABEL_66;
  }
LABEL_18:
  float v13 = *((float *)this + 39);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v46 = v14;
  if ((v1 & 0x2000) != 0)
  {
LABEL_21:
    uint64_t v45 = *((unsigned int *)this + 20);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_22;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v45 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_22:
    uint64_t v15 = *((unsigned int *)this + 19);
    if ((v1 & 0x80) != 0) {
      goto LABEL_23;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v15 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_23:
    uint64_t v16 = *((unsigned int *)this + 14);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_24;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v16 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_24:
    uint64_t v17 = *((unsigned int *)this + 40);
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t v17 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_25:
    uint64_t v18 = *((unsigned int *)this + 35);
    if ((v1 & 0x400) != 0) {
      goto LABEL_26;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v18 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_26:
    uint64_t v19 = *((unsigned int *)this + 17);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_27;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v19 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_27:
    uint64_t v20 = *((unsigned int *)this + 21);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v20 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_28:
    uint64_t v21 = *((unsigned int *)this + 30);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_29;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t v21 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_29:
    uint64_t v22 = *((unsigned int *)this + 32);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t v22 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_30:
    uint64_t v23 = *((int *)this + 34);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v23 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_31:
    uint64_t v24 = *((int *)this + 33);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t v24 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_32:
    uint64_t v25 = *((unsigned int *)this + 29);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t v25 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_33:
    uint64_t v26 = *((unsigned int *)this + 31);
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_34;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t v26 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_34:
    uint64_t v27 = *((unsigned int *)this + 38);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v27 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_35:
    uint64_t v28 = *((unsigned int *)this + 22);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_36;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v28 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_36:
    uint64_t v29 = *((unsigned int *)this + 27);
    if ((v1 & 0x100) != 0) {
      goto LABEL_37;
    }
LABEL_83:
    uint64_t v31 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_41;
    }
LABEL_84:
    uint64_t v33 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_45;
    }
LABEL_85:
    uint64_t v35 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_49;
    }
    goto LABEL_86;
  }
LABEL_82:
  uint64_t v29 = 0;
  if ((v1 & 0x100) == 0) {
    goto LABEL_83;
  }
LABEL_37:
  float v30 = *((float *)this + 15);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = LODWORD(v30);
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_84;
  }
LABEL_41:
  float v32 = *((float *)this + 28);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = LODWORD(v32);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_85;
  }
LABEL_45:
  float v34 = *((float *)this + 16);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = LODWORD(v34);
  }
  if ((v1 & 0x20000) != 0)
  {
LABEL_49:
    uint64_t v36 = *((unsigned int *)this + 24);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_50;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v36 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_50:
    uint64_t v37 = *((unsigned int *)this + 25);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_51;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t v37 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_51:
    uint64_t v38 = *((unsigned int *)this + 23);
    if ((v1 & 8) != 0) {
      goto LABEL_52;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t v38 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_52:
    uint64_t v39 = *((void *)this + 4);
    if ((v1 & 4) != 0) {
      goto LABEL_53;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v39 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_53:
    uint64_t v40 = *((void *)this + 3);
    if (v1) {
      goto LABEL_54;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v40 = 0;
  if (v1)
  {
LABEL_54:
    uint64_t v41 = *((void *)this + 1);
    if ((v1 & 2) != 0) {
      goto LABEL_55;
    }
LABEL_92:
    uint64_t v42 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_56;
    }
LABEL_93:
    uint64_t v43 = 0;
    return v51 ^ v2 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43;
  }
LABEL_91:
  uint64_t v41 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_92;
  }
LABEL_55:
  uint64_t v42 = *((void *)this + 2);
  if ((v1 & 0x800) == 0) {
    goto LABEL_93;
  }
LABEL_56:
  uint64_t v43 = *((unsigned int *)this + 18);
  return v51 ^ v2 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43;
}

uint64_t CMMsl::DopplerSample::DopplerSample(uint64_t this)
{
  *(void *)this = &unk_270641368;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270641368;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::DopplerSample::~DopplerSample(CMMsl::DopplerSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::DopplerSample::DopplerSample(uint64_t this, const CMMsl::DopplerSample *a2)
{
  *(void *)this = &unk_270641368;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::DopplerSample *CMMsl::DopplerSample::operator=(const CMMsl::DopplerSample *a1, const CMMsl::DopplerSample *a2)
{
  if (a1 != a2)
  {
    CMMsl::DopplerSample::DopplerSample((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DopplerSample *a2, CMMsl::DopplerSample *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::DopplerSample::DopplerSample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641368;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270641368;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::DopplerSample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = &unk_270641368;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::DopplerSample::formatText(CMMsl::DopplerSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "proximityState");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::DopplerSample::readFrom(CMMsl::DopplerSample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DopplerSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::DopplerSample::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::DopplerSample::hash_value(CMMsl::DopplerSample *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::DoubleTap::DoubleTap(uint64_t this)
{
  *(void *)this = &unk_2706413A0;
  *(_DWORD *)(this + 28) = -1;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = &unk_2706413A0;
  *(_DWORD *)(this + 28) = -1;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::DoubleTap::~DoubleTap(CMMsl::DoubleTap *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::DoubleTap::DoubleTap(uint64_t this, const CMMsl::DoubleTap *a2)
{
  *(void *)this = &unk_2706413A0;
  *(_DWORD *)(this + 28) = -1;
  *(_DWORD *)(this + 48) = 0;
  __int16 v2 = *((_WORD *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 48) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 10);
    v3 |= 0x80u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 40) = v5;
    __int16 v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 28) = v6;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 16) = v7;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v8 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 20) = v8;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  int v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 32) = v9;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v10 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v10;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_20:
    int v12 = *((_DWORD *)a2 + 6);
    *(_WORD *)(this + 48) = v3 | 8;
    *(_DWORD *)(this + 24) = v12;
    return this;
  }
LABEL_19:
  int v11 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 44) = v11;
  if ((*((_WORD *)a2 + 24) & 8) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::DoubleTap::operator=(uint64_t a1, const CMMsl::DoubleTap *a2)
{
  if ((const CMMsl::DoubleTap *)a1 != a2)
  {
    CMMsl::DoubleTap::DoubleTap((uint64_t)v13, a2);
    uint64_t v3 = v15;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v3;
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    int v6 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v19;
    int v19 = v6;
    uint64_t v7 = v17;
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v16;
    *(void *)(a1 + 32) = v7;
    int v10 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v20;
    int v20 = v10;
    int v11 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v18;
    int v18 = v11;
    uint64_t v16 = v9;
    uint64_t v17 = v8;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DoubleTap *a2, CMMsl::DoubleTap *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  double result = *((double *)a2 + 3);
  uint64_t v7 = *((void *)this + 3);
  *((double *)this + 3) = result;
  *((void *)a2 + 3) = v7;
  return result;
}

double CMMsl::DoubleTap::DoubleTap(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706413A0;
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::DoubleTap::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::DoubleTap::DoubleTap((uint64_t)v13, a2);
    uint64_t v3 = v15;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v3;
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    int v6 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v19;
    int v19 = v6;
    uint64_t v7 = v17;
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v16;
    *(void *)(a1 + 32) = v7;
    int v10 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v20;
    int v20 = v10;
    int v11 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v18;
    int v18 = v11;
    uint64_t v16 = v9;
    uint64_t v17 = v8;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::DoubleTap::formatText(CMMsl::DoubleTap *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "currentMeanAngleY", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaMeanAngleY", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "doubleTapCounter");
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "doubleTapStatus");
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "entropyConcha", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "entropyTragus", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "location");
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "tapInterval", *((float *)this + 11));
  if (*((_WORD *)this + 24)) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_11:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::DoubleTap::readFrom(CMMsl::DoubleTap *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_101;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_85;
      case 2u:
        *((_WORD *)this + 24) |= 0x80u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_90;
            }
            unint64_t v40 = v20++;
            char v41 = *(unsigned char *)(v21 + v40);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_89:
              unint64_t v2 = v40 + 1;
              goto LABEL_90;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_89;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_90;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_90:
        *((_DWORD *)this + 10) = v24;
        break;
      case 3u:
        *((_WORD *)this + 24) |= 0x10u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_95;
            }
            unint64_t v44 = v26++;
            char v45 = *(unsigned char *)(v27 + v44);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            BOOL v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_94:
              unint64_t v2 = v44 + 1;
              goto LABEL_95;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_94;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_95;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_95:
        *((_DWORD *)this + 7) = v30;
        break;
      case 4u:
        *((_WORD *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_84;
      case 5u:
        *((_WORD *)this + 24) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_84;
      case 6u:
        *((_WORD *)this + 24) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_84;
      case 7u:
        *((_WORD *)this + 24) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_84;
      case 8u:
        *((_WORD *)this + 24) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_84:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_85:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_54:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 9u:
        *((_WORD *)this + 24) |= 8u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_100;
            }
            unint64_t v48 = v32++;
            char v49 = *(unsigned char *)(v33 + v48);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v46 += 7;
            BOOL v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_99:
              unint64_t v2 = v48 + 1;
              goto LABEL_100;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_99;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_100;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_100:
        *((_DWORD *)this + 6) = v36;
        break;
      default:
        goto LABEL_19;
    }
LABEL_101:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::DoubleTap::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 48);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(float *)(v3 + 44));
    if ((*(_WORD *)(v3 + 48) & 8) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_19:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::DoubleTap::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 48);
  __int16 v3 = *(_WORD *)(a2 + 48);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0) {
    return (v3 & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
  return v4;
}

uint64_t CMMsl::DoubleTap::hash_value(CMMsl::DoubleTap *this)
{
  __int16 v1 = *((_WORD *)this + 24);
  if (v1)
  {
    double v2 = *((double *)this + 1);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 10);
      if ((v1 & 0x10) != 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_4:
    uint64_t v4 = *((int *)this + 7);
    if ((v1 & 2) != 0) {
      goto LABEL_5;
    }
LABEL_26:
    uint64_t v6 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_8;
    }
LABEL_27:
    uint64_t v8 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_11;
    }
LABEL_28:
    uint64_t v10 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_14;
    }
LABEL_29:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 24) & 0x100) != 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_25:
  uint64_t v4 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_26;
  }
LABEL_5:
  float v5 = *((float *)this + 4);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_27;
  }
LABEL_8:
  float v7 = *((float *)this + 5);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_28;
  }
LABEL_11:
  float v9 = *((float *)this + 8);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_29;
  }
LABEL_14:
  float v11 = *((float *)this + 9);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_17:
    float v13 = *((float *)this + 11);
    uint64_t v14 = LODWORD(v13);
    if (v13 == 0.0) {
      uint64_t v14 = 0;
    }
    if ((v1 & 8) != 0) {
      goto LABEL_20;
    }
LABEL_31:
    uint64_t v15 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15;
  }
LABEL_30:
  uint64_t v14 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_31;
  }
LABEL_20:
  uint64_t v15 = *((unsigned int *)this + 6);
  return v3 ^ *(void *)&v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15;
}

uint64_t CMMsl::ElevationChange::ElevationChange(uint64_t this)
{
  *(void *)this = &unk_2706413D8;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = &unk_2706413D8;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void CMMsl::ElevationChange::~ElevationChange(CMMsl::ElevationChange *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::ElevationChange::ElevationChange(uint64_t this, const CMMsl::ElevationChange *a2)
{
  *(void *)this = &unk_2706413D8;
  *(_DWORD *)(this + 60) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    __int16 v3 = 2;
    *(_WORD *)(this + 60) = 2;
    *(void *)(this + 16) = v4;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if (v2)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 60) = v3;
    *(void *)(this + 8) = v5;
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x10u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 32) = v6;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 36) = v7;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v8 = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 52) = v8;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v9 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 28) = v9;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v10 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 40) = v10;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 48) = v11;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v12 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 44) = v12;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0) {
      return this;
    }
LABEL_24:
    char v14 = *((unsigned char *)a2 + 56);
    *(_WORD *)(this + 60) = v3 | 0x400;
    *(unsigned char *)(this + 56) = v14;
    return this;
  }
LABEL_23:
  int v13 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 24) = v13;
  if ((*((_WORD *)a2 + 30) & 0x400) != 0) {
    goto LABEL_24;
  }
  return this;
}

CMMsl *CMMsl::ElevationChange::operator=(CMMsl *a1, const CMMsl::ElevationChange *a2)
{
  if (a1 != a2)
  {
    CMMsl::ElevationChange::ElevationChange((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ElevationChange *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ElevationChange *a2, CMMsl::ElevationChange *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  int v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  int v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  int v8 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v8;
  int v9 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  int v10 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  int v11 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v11;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LOBYTE(v11) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v11;
  return result;
}

float CMMsl::ElevationChange::ElevationChange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706413D8;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return result;
}

CMMsl *CMMsl::ElevationChange::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ElevationChange::ElevationChange((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ElevationChange *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ElevationChange::formatText(CMMsl::ElevationChange *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "averageFilteredPressure", *((float *)this + 6));
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaStepCount");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "elevationAscended");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "elevationDescended");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "isWorkoutElevationFusion");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "pressureAmplitude", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "pressureFailureState");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "pressureQuality");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "source");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  if ((*((_WORD *)this + 30) & 2) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ElevationChange::readFrom(CMMsl::ElevationChange *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 30) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_34;
      case 2u:
        *((_WORD *)this + 30) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_34:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_131;
      case 3u:
        *((_WORD *)this + 30) |= 0x10u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_136;
            }
            unint64_t v61 = v21++;
            char v62 = *(unsigned char *)(v22 + v61);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v62 & 0x7F) << v59;
            if ((v62 & 0x80) == 0) {
              break;
            }
            v59 += 7;
            BOOL v14 = v60++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_135:
              unint64_t v2 = v61 + 1;
              goto LABEL_136;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
          goto LABEL_135;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_136;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_136:
        *((_DWORD *)this + 8) = v25;
        break;
      case 4u:
        *((_WORD *)this + 30) |= 0x20u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_141;
            }
            unint64_t v65 = v27++;
            char v66 = *(unsigned char *)(v28 + v65);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v66 & 0x7F) << v63;
            if ((v66 & 0x80) == 0) {
              break;
            }
            v63 += 7;
            BOOL v14 = v64++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_140:
              unint64_t v2 = v65 + 1;
              goto LABEL_141;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
          goto LABEL_140;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_141;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_141:
        *((_DWORD *)this + 9) = v31;
        break;
      case 5u:
        *((_WORD *)this + 30) |= 0x200u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_146;
            }
            unint64_t v69 = v33++;
            char v70 = *(unsigned char *)(v34 + v69);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v70 & 0x7F) << v67;
            if ((v70 & 0x80) == 0) {
              break;
            }
            v67 += 7;
            BOOL v14 = v68++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_145:
              unint64_t v2 = v69 + 1;
              goto LABEL_146;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
          goto LABEL_145;
        }
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        do
        {
          unint64_t v2 = v33 + 1;
          *((void *)a2 + 1) = v33 + 1;
          char v38 = *(unsigned char *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0) {
            goto LABEL_146;
          }
          v35 += 7;
          unint64_t v33 = v2;
          BOOL v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_146:
        *((_DWORD *)this + 13) = v37;
        break;
      case 6u:
        *((_WORD *)this + 30) |= 8u;
        unint64_t v39 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v40 = *(void *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v43 = 0;
          if (v2 <= v39) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_151;
            }
            unint64_t v73 = v39++;
            char v74 = *(unsigned char *)(v40 + v73);
            *((void *)a2 + 1) = v39;
            v43 |= (unint64_t)(v74 & 0x7F) << v71;
            if ((v74 & 0x80) == 0) {
              break;
            }
            v71 += 7;
            BOOL v14 = v72++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_150:
              unint64_t v2 = v73 + 1;
              goto LABEL_151;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v43) = 0;
          }
          goto LABEL_150;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        do
        {
          unint64_t v2 = v39 + 1;
          *((void *)a2 + 1) = v39 + 1;
          char v44 = *(unsigned char *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0) {
            goto LABEL_151;
          }
          v41 += 7;
          unint64_t v39 = v2;
          BOOL v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_151:
        *((_DWORD *)this + 7) = v43;
        break;
      case 7u:
        *((_WORD *)this + 30) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_130;
      case 8u:
        *((_WORD *)this + 30) |= 0x100u;
        unint64_t v45 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v46 = *(void *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          char v75 = 0;
          unsigned int v76 = 0;
          uint64_t v49 = 0;
          if (v2 <= v45) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_156;
            }
            unint64_t v77 = v45++;
            char v78 = *(unsigned char *)(v46 + v77);
            *((void *)a2 + 1) = v45;
            v49 |= (unint64_t)(v78 & 0x7F) << v75;
            if ((v78 & 0x80) == 0) {
              break;
            }
            v75 += 7;
            BOOL v14 = v76++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_155:
              unint64_t v2 = v77 + 1;
              goto LABEL_156;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v49) = 0;
          }
          goto LABEL_155;
        }
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        do
        {
          unint64_t v2 = v45 + 1;
          *((void *)a2 + 1) = v45 + 1;
          char v50 = *(unsigned char *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0) {
            goto LABEL_156;
          }
          v47 += 7;
          unint64_t v45 = v2;
          BOOL v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_156:
        *((_DWORD *)this + 12) = v49;
        break;
      case 9u:
        *((_WORD *)this + 30) |= 0x80u;
        unint64_t v51 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v52 = *(void *)a2;
        if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
        {
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v55 = 0;
          if (v2 <= v51) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v51)
            {
              LODWORD(v55) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_161;
            }
            unint64_t v81 = v51++;
            char v82 = *(unsigned char *)(v52 + v81);
            *((void *)a2 + 1) = v51;
            v55 |= (unint64_t)(v82 & 0x7F) << v79;
            if ((v82 & 0x80) == 0) {
              break;
            }
            v79 += 7;
            BOOL v14 = v80++ > 8;
            if (v14)
            {
              LODWORD(v55) = 0;
LABEL_160:
              unint64_t v2 = v81 + 1;
              goto LABEL_161;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v55) = 0;
          }
          goto LABEL_160;
        }
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v55 = 0;
        do
        {
          unint64_t v2 = v51 + 1;
          *((void *)a2 + 1) = v51 + 1;
          char v56 = *(unsigned char *)(v52 + v51);
          v55 |= (unint64_t)(v56 & 0x7F) << v53;
          if ((v56 & 0x80) == 0) {
            goto LABEL_161;
          }
          v53 += 7;
          unint64_t v51 = v2;
          BOOL v14 = v54++ > 8;
        }
        while (!v14);
        LODWORD(v55) = 0;
LABEL_161:
        *((_DWORD *)this + 11) = v55;
        break;
      case 0xAu:
        *((_WORD *)this + 30) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_130:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_131:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_82:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xBu:
        *((_WORD *)this + 30) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v58 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v57 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v58 = v57 != 0;
        }
        *((unsigned char *)this + 56) = v58;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ElevationChange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(float *)(v3 + 24));
    if ((*(_WORD *)(v3 + 60) & 0x400) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x400) == 0) {
    return this;
  }
LABEL_23:
  return PB::Writer::write(a2);
}

BOOL CMMsl::ElevationChange::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 60);
  __int16 v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x400) == 0;
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0) {
    return (*(_WORD *)(a2 + 60) & 0x400) != 0 && *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56);
  }
  return v4;
}

uint64_t CMMsl::ElevationChange::hash_value(CMMsl::ElevationChange *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 2) == 0)
  {
    double v2 = 0.0;
    if (v1) {
      goto LABEL_3;
    }
LABEL_22:
    double v3 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_3:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_6:
    uint64_t v4 = *((unsigned int *)this + 8);
    if ((v1 & 0x20) != 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v4 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_7:
    uint64_t v5 = *((unsigned int *)this + 9);
    if ((*((_WORD *)this + 30) & 0x200) != 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v5 = 0;
  if ((*((_WORD *)this + 30) & 0x200) != 0)
  {
LABEL_8:
    uint64_t v6 = *((unsigned int *)this + 13);
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_9:
    uint64_t v7 = *((int *)this + 7);
    if ((v1 & 0x40) != 0) {
      goto LABEL_10;
    }
LABEL_27:
    uint64_t v9 = 0;
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_26:
  uint64_t v7 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_27;
  }
LABEL_10:
  float v8 = *((float *)this + 10);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x100) != 0)
  {
LABEL_13:
    uint64_t v10 = *((int *)this + 12);
    if ((v1 & 0x80) != 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v10 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    uint64_t v11 = *((int *)this + 11);
    if ((v1 & 4) != 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v11 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_15:
    float v12 = *((float *)this + 6);
    uint64_t v13 = LODWORD(v12);
    if (v12 == 0.0) {
      uint64_t v13 = 0;
    }
    if ((*((_WORD *)this + 30) & 0x400) != 0) {
      goto LABEL_18;
    }
LABEL_31:
    uint64_t v14 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10 ^ v11 ^ v13 ^ v14;
  }
LABEL_30:
  uint64_t v13 = 0;
  if ((*((_WORD *)this + 30) & 0x400) == 0) {
    goto LABEL_31;
  }
LABEL_18:
  uint64_t v14 = *((unsigned __int8 *)this + 56);
  return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10 ^ v11 ^ v13 ^ v14;
}

uint64_t CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(uint64_t this)
{
  *(void *)this = &unk_270641410;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(void *)this = &unk_270641410;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

void CMMsl::ElevationGradeEstimator::~ElevationGradeEstimator(CMMsl::ElevationGradeEstimator *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(uint64_t this, const CMMsl::ElevationGradeEstimator *a2)
{
  *(void *)this = &unk_270641410;
  *(_DWORD *)(this + 92) = 0;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 8) != 0)
  {
    uint64_t v4 = *((void *)a2 + 4);
    int v3 = 8;
    *(_DWORD *)(this + 92) = 8;
    *(void *)(this + 32) = v4;
    int v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_DWORD *)(this + 92) = v3;
    *(void *)(this + 16) = v5;
    int v2 = *((_DWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *(_DWORD *)(this + 92) = v3;
    *(void *)(this + 24) = v6;
    int v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 76) = v7;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v8 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 48) = v8;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v9 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v9;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v10 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 60) = v10;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v11 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 56) = v11;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  char v12 = *((unsigned char *)a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 92) = v3;
  *(unsigned char *)(this + 88) = v12;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v13 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 64) = v13;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v14 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 92) = v3;
  *(void *)(this + 40) = v14;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v15 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 52) = v15;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v16 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 80) = v16;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 1) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v17 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 92) = v3;
  *(void *)(this + 8) = v17;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v18 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 68) = v18;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      return this;
    }
LABEL_36:
    char v20 = *((unsigned char *)a2 + 89);
    *(_DWORD *)(this + 92) = v3 | 0x10000;
    *(unsigned char *)(this + 89) = v20;
    return this;
  }
LABEL_35:
  int v19 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 72) = v19;
  if ((*((_DWORD *)a2 + 23) & 0x10000) != 0) {
    goto LABEL_36;
  }
  return this;
}

CMMsl *CMMsl::ElevationGradeEstimator::operator=(CMMsl *a1, const CMMsl::ElevationGradeEstimator *a2)
{
  if (a1 != a2)
  {
    CMMsl::ElevationGradeEstimator::ElevationGradeEstimator((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ElevationGradeEstimator *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ElevationGradeEstimator *a2, CMMsl::ElevationGradeEstimator *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v6) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LOBYTE(v6) = *((unsigned char *)this + 88);
  *((unsigned char *)this + 88) = *((unsigned char *)a2 + 88);
  *((unsigned char *)a2 + 88) = v6;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  LODWORD(v7) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  float result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  LOBYTE(v6) = *((unsigned char *)this + 89);
  *((unsigned char *)this + 89) = *((unsigned char *)a2 + 89);
  *((unsigned char *)a2 + 89) = v6;
  return result;
}

float CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641410;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  float result = *(float *)(a2 + 72);
  *(float *)(a1 + 72) = result;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return result;
}

CMMsl *CMMsl::ElevationGradeEstimator::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ElevationGradeEstimator::ElevationGradeEstimator((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ElevationGradeEstimator *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ElevationGradeEstimator::formatText(CMMsl::ElevationGradeEstimator *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "altitudeDelta", *((float *)this + 12));
    int v5 = *((_DWORD *)this + 23);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "altitudeDeltaStreaming", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "deltaTime", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "didEstimate");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "downhillStartTime", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "elevationAscended");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "elevationDescended");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "gradeType");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "heightRef", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "isWorkoutElevationFusion");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "predictionError", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "predictionIntercept", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "source");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 8) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "timeDeltaStreaming", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "timeRef", *((double *)this + 5));
  if ((*((_DWORD *)this + 23) & 0x4000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(a2, "verticalSpeed", *((float *)this + 21));
LABEL_19:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ElevationGradeEstimator::readFrom(CMMsl::ElevationGradeEstimator *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_144;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 23) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_86;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_80;
      case 2u:
        *((_DWORD *)this + 23) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_128;
            }
            unint64_t v50 = v20++;
            char v51 = *(unsigned char *)(v21 + v50);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            BOOL v14 = v49++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_127:
              unint64_t v2 = v50 + 1;
              goto LABEL_128;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_127;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_128;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_128:
        *((void *)this + 2) = v24;
        break;
      case 3u:
        *((_DWORD *)this + 23) |= 4u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_133;
            }
            unint64_t v54 = v26++;
            char v55 = *(unsigned char *)(v27 + v54);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0) {
              break;
            }
            v52 += 7;
            BOOL v14 = v53++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
LABEL_132:
              unint64_t v2 = v54 + 1;
              goto LABEL_133;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v30 = 0;
          }
          goto LABEL_132;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_133;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        uint64_t v30 = 0;
LABEL_133:
        *((void *)this + 3) = v30;
        break;
      case 4u:
        *((_DWORD *)this + 23) |= 0x1000u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_138;
            }
            unint64_t v58 = v32++;
            char v59 = *(unsigned char *)(v33 + v58);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            BOOL v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_137:
              unint64_t v2 = v58 + 1;
              goto LABEL_138;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_137;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_138;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_138:
        *((_DWORD *)this + 19) = v36;
        break;
      case 5u:
        *((_DWORD *)this + 23) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_86;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_122;
      case 6u:
        *((_DWORD *)this + 23) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_86;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_122;
      case 7u:
        *((_DWORD *)this + 23) |= 0x100u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_143;
            }
            unint64_t v62 = v38++;
            char v63 = *(unsigned char *)(v39 + v62);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0) {
              break;
            }
            v60 += 7;
            BOOL v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_142:
              unint64_t v2 = v62 + 1;
              goto LABEL_143;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_142;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_143;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_143:
        *((_DWORD *)this + 15) = v42;
        break;
      case 8u:
        *((_DWORD *)this + 23) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_86;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_122;
      case 9u:
        *((_DWORD *)this + 23) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v45 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v44 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v45 = v44 != 0;
        }
        *((unsigned char *)this + 88) = v45;
        break;
      case 0xAu:
        *((_DWORD *)this + 23) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_86;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_122;
      case 0xBu:
        *((_DWORD *)this + 23) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_86;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_80;
      case 0xCu:
        *((_DWORD *)this + 23) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_86;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_122;
      case 0xDu:
        *((_DWORD *)this + 23) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_86;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_122;
      case 0xEu:
        *((_DWORD *)this + 23) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_86;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_80:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_123;
      case 0xFu:
        *((_DWORD *)this + 23) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_86;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_122;
      case 0x10u:
        *((_DWORD *)this + 23) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_122:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_123:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_86:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0x11u:
        *((_DWORD *)this + 23) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v47 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v46 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v47 = v46 != 0;
        }
        *((unsigned char *)this + 89) = v47;
        break;
      default:
        goto LABEL_19;
    }
LABEL_144:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ElevationGradeEstimator::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 92);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    int v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
LABEL_34:
    this = PB::Writer::write(a2, *(float *)(v3 + 72));
    if ((*(_DWORD *)(v3 + 92) & 0x10000) == 0) {
      return this;
    }
    goto LABEL_35;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) != 0) {
    goto LABEL_34;
  }
LABEL_17:
  if ((v4 & 0x10000) == 0) {
    return this;
  }
LABEL_35:
  return PB::Writer::write(a2);
}

BOOL CMMsl::ElevationGradeEstimator::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 92);
  int v3 = *(_DWORD *)(a2 + 92);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 88) != *(unsigned __int8 *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x10000) == 0;
  if ((v2 & 0x10000) != 0) {
    return (v3 & 0x10000) != 0 && *(unsigned __int8 *)(a1 + 89) == *(unsigned __int8 *)(a2 + 89);
  }
  return v4;
}

uint64_t CMMsl::ElevationGradeEstimator::hash_value(CMMsl::ElevationGradeEstimator *this)
{
  int v1 = *((_DWORD *)this + 23);
  if ((v1 & 8) != 0)
  {
    double v2 = *((double *)this + 4);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 2) != 0)
    {
LABEL_3:
      uint64_t v3 = *((void *)this + 2);
      if ((v1 & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_4:
    uint64_t v4 = *((void *)this + 3);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v4 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_5:
    uint64_t v5 = *((int *)this + 19);
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_45:
    uint64_t v7 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_9;
    }
LABEL_46:
    uint64_t v9 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_44:
  uint64_t v5 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_45;
  }
LABEL_6:
  float v6 = *((float *)this + 12);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_46;
  }
LABEL_9:
  float v8 = *((float *)this + 21);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_12:
    uint64_t v10 = *((int *)this + 15);
    if ((v1 & 0x80) != 0) {
      goto LABEL_13;
    }
LABEL_48:
    uint64_t v12 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_47:
  uint64_t v10 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_48;
  }
LABEL_13:
  float v11 = *((float *)this + 14);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_16:
    uint64_t v13 = *((unsigned __int8 *)this + 88);
    if ((v1 & 0x200) != 0) {
      goto LABEL_17;
    }
LABEL_50:
    uint64_t v15 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_20;
    }
LABEL_51:
    double v16 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_23;
    }
LABEL_52:
    uint64_t v18 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_26;
    }
LABEL_53:
    uint64_t v20 = 0;
    if (v1) {
      goto LABEL_29;
    }
LABEL_54:
    double v21 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_32;
    }
LABEL_55:
    uint64_t v23 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_35;
    }
    goto LABEL_56;
  }
LABEL_49:
  uint64_t v13 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_50;
  }
LABEL_17:
  float v14 = *((float *)this + 16);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_51;
  }
LABEL_20:
  double v16 = *((double *)this + 5);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_52;
  }
LABEL_23:
  float v17 = *((float *)this + 13);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_53;
  }
LABEL_26:
  float v19 = *((float *)this + 20);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_54;
  }
LABEL_29:
  double v21 = *((double *)this + 1);
  if (v21 == 0.0) {
    double v21 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_55;
  }
LABEL_32:
  float v22 = *((float *)this + 17);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x800) != 0)
  {
LABEL_35:
    float v24 = *((float *)this + 18);
    uint64_t v25 = LODWORD(v24);
    if (v24 == 0.0) {
      uint64_t v25 = 0;
    }
    if ((v1 & 0x10000) != 0) {
      goto LABEL_38;
    }
LABEL_57:
    uint64_t v26 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v10 ^ v12 ^ v13 ^ v15 ^ *(void *)&v16 ^ v18 ^ v20 ^ *(void *)&v21 ^ v23 ^ v25 ^ v26;
  }
LABEL_56:
  uint64_t v25 = 0;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_57;
  }
LABEL_38:
  uint64_t v26 = *((unsigned __int8 *)this + 89);
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v10 ^ v12 ^ v13 ^ v15 ^ *(void *)&v16 ^ v18 ^ v20 ^ *(void *)&v21 ^ v23 ^ v25 ^ v26;
}

uint64_t CMMsl::ElevationThreshold::ElevationThreshold(uint64_t this)
{
  *(void *)this = &unk_270641448;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_270641448;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::ElevationThreshold::~ElevationThreshold(CMMsl::ElevationThreshold *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270641448;
  *((void *)this + 1) = 0;
  if (v2) {
    sub_2572C6E48(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ElevationThreshold::~ElevationThreshold(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::ElevationThreshold::ElevationThreshold(uint64_t this, const CMMsl::ElevationThreshold *a2)
{
  *(void *)this = &unk_270641448;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*((unsigned char *)a2 + 32))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 16) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v3 = *((unsigned char *)a2 + 32);
  if ((v3 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 32) |= 2u;
    *(_DWORD *)(this + 24) = v4;
    char v3 = *((unsigned char *)a2 + 32);
  }
  if ((v3 & 4) != 0)
  {
    char v5 = *((unsigned char *)a2 + 28);
    *(unsigned char *)(this + 32) |= 4u;
    *(unsigned char *)(this + 28) = v5;
  }
  return this;
}

uint64_t CMMsl::ElevationThreshold::operator=(uint64_t a1, const CMMsl::ElevationThreshold *a2)
{
  if ((const CMMsl::ElevationThreshold *)a1 != a2)
  {
    CMMsl::ElevationThreshold::ElevationThreshold((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v4;
    LOBYTE(v5) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v11;
    char v11 = v5;
    CMMsl::ElevationThreshold::~ElevationThreshold((CMMsl::ElevationThreshold *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ElevationThreshold *a2, CMMsl::ElevationThreshold *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LOBYTE(v5) = *((unsigned char *)this + 28);
  *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
  *((unsigned char *)a2 + 28) = v5;
  return result;
}

uint64_t CMMsl::ElevationThreshold::ElevationThreshold(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641448;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    sub_2572C6E48(v5);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return a1;
}

uint64_t CMMsl::ElevationThreshold::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::ElevationThreshold::ElevationThreshold((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v4;
    LOBYTE(v5) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v11;
    char v11 = v5;
    CMMsl::ElevationThreshold::~ElevationThreshold((CMMsl::ElevationThreshold *)v7);
  }
  return a1;
}

uint64_t CMMsl::ElevationThreshold::formatText(CMMsl::ElevationThreshold *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 32) & 4) != 0) {
    PB::TextFormatter::format(a2, "active");
  }
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "threshold", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ElevationThreshold::readFrom(CMMsl::ElevationThreshold *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
          goto LABEL_29;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v20);
        uint64_t v21 = *((void *)a2 + 1) + 8;
        goto LABEL_35;
      case 2u:
        operator new();
      case 3u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v22);
          uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_35:
          *((void *)a2 + 1) = v21;
        }
        else
        {
LABEL_29:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v23 = *((void *)a2 + 1);
        if (v23 >= *((void *)a2 + 2))
        {
          BOOL v26 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v24 = v23 + 1;
          int v25 = *(unsigned __int8 *)(*(void *)a2 + v23);
          *((void *)a2 + 1) = v24;
          BOOL v26 = v25 != 0;
        }
        *((unsigned char *)this + 28) = v26;
        break;
      default:
        goto LABEL_19;
    }
LABEL_36:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_36;
  }
  return result;
}

uint64_t CMMsl::ElevationThreshold::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 32)) {
    this = PB::Writer::write(a2, *(double *)(this + 16));
  }
  if (*(void *)(v3 + 8)) {
    this = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 24));
    char v4 = *(unsigned char *)(v3 + 32);
  }
  if ((v4 & 4) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::ElevationThreshold::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 32);
  char v5 = *(unsigned char *)(a2 + 32);
  if (v4)
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  float v6 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 8);
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    uint64_t v8 = v6[23];
    if ((v8 & 0x80u) == 0) {
      char v9 = (unsigned __int8 *)v6[23];
    }
    else {
      char v9 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    unsigned int v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      unsigned int v10 = v7[1];
    }
    if (v9 != v10) {
      return 0;
    }
    if (v11 >= 0) {
      unint64_t v12 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      unint64_t v12 = *v7;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((void *)v6 + 1))) {
        return 0;
      }
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8) {
          goto LABEL_23;
        }
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  BOOL result = (v5 & 4) == 0;
  if ((v4 & 4) == 0) {
    return result;
  }
  return (v5 & 4) != 0 && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28);
}

unint64_t CMMsl::ElevationThreshold::hash_value(CMMsl::ElevationThreshold *this)
{
  char v2 = *((unsigned char *)this + 32);
  if (v2)
  {
    if (*((double *)this + 2) == 0.0) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = *((void *)this + 2);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 1);
  if (v4) {
    unint64_t v4 = sub_2572C6F9C(v4);
  }
  if ((v2 & 2) != 0)
  {
    float v7 = *((float *)this + 6);
    uint64_t v5 = LODWORD(v7);
    if (v7 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((v2 & 4) != 0) {
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v6 = 0;
    return v4 ^ v3 ^ v5 ^ v6;
  }
  uint64_t v5 = 0;
  if ((v2 & 4) == 0) {
    goto LABEL_14;
  }
LABEL_10:
  uint64_t v6 = *((unsigned __int8 *)this + 28);
  return v4 ^ v3 ^ v5 ^ v6;
}

uint64_t CMMsl::EmergencyState::EmergencyState(uint64_t this)
{
  *(void *)this = &unk_270641480;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_270641480;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::EmergencyState::~EmergencyState(CMMsl::EmergencyState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::EmergencyState::EmergencyState(uint64_t this, const CMMsl::EmergencyState *a2)
{
  *(void *)this = &unk_270641480;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(void *)this = &unk_270641480;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::EmergencyState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &unk_270641480;
    int v3 = *(unsigned char *)(a2 + 12) & 1;
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = &unk_270641480;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::EmergencyState *a2, CMMsl::EmergencyState *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::EmergencyState::EmergencyState(uint64_t result, uint64_t a2)
{
  *(void *)BOOL result = &unk_270641480;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)BOOL result = &unk_270641480;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::EmergencyState::formatText(CMMsl::EmergencyState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "state");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::EmergencyState::readFrom(CMMsl::EmergencyState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_42:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::EmergencyState::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::EmergencyState::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::EmergencyState::hash_value(CMMsl::EmergencyState *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned int *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(uint64_t this)
{
  *(void *)this = &unk_2706414B8;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(void *)this = &unk_2706414B8;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

void CMMsl::EnhancedDeviceMotion::~EnhancedDeviceMotion(CMMsl::EnhancedDeviceMotion *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(uint64_t this, const CMMsl::EnhancedDeviceMotion *a2)
{
  *(void *)this = &unk_2706414B8;
  *(_DWORD *)(this + 96) = 0;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    int v3 = 16;
    *(_DWORD *)(this + 96) = 16;
    *(void *)(this + 40) = v4;
    int v2 = *((_DWORD *)a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_DWORD *)(this + 96) = v3;
    *(void *)(this + 16) = v5;
    int v2 = *((_DWORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *(_DWORD *)(this + 96) = v3;
    *(void *)(this + 24) = v6;
    int v2 = *((_DWORD *)a2 + 24);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 96) = v3;
  *(void *)(this + 32) = v7;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v8 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 96) = v3;
  *(void *)(this + 8) = v8;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 76) = v9;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v10 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 80) = v10;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v11 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 84) = v11;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v12 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 64) = v12;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v13 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 68) = v13;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v14 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 72) = v14;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v15 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 52) = v15;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v16 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 56) = v16;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v17 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 60) = v17;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v18 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 48) = v18;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x10000) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  char v19 = *((unsigned char *)a2 + 92);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 96) = v3;
  *(unsigned char *)(this + 92) = v19;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      return this;
    }
LABEL_38:
    int v21 = *((_DWORD *)a2 + 22);
    *(_DWORD *)(this + 96) = v3 | 0x8000;
    *(_DWORD *)(this + 88) = v21;
    return this;
  }
LABEL_37:
  char v20 = *((unsigned char *)a2 + 93);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 96) = v3;
  *(unsigned char *)(this + 93) = v20;
  if ((*((_DWORD *)a2 + 24) & 0x8000) != 0) {
    goto LABEL_38;
  }
  return this;
}

CMMsl *CMMsl::EnhancedDeviceMotion::operator=(CMMsl *a1, const CMMsl::EnhancedDeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::EnhancedDeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::EnhancedDeviceMotion *a2, CMMsl::EnhancedDeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v8;
  LODWORD(v8) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v8;
  LODWORD(v8) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  LODWORD(v8) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  LODWORD(v8) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v8;
  LODWORD(v8) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v8;
  LODWORD(v8) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  float result = *((float *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((float *)a2 + 15) = result;
  int v10 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 92);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
  *((unsigned char *)a2 + 92) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 93);
  *((unsigned char *)this + 93) = *((unsigned char *)a2 + 93);
  *((unsigned char *)a2 + 93) = v10;
  int v11 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v11;
  return result;
}

float CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706414B8;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  float result = *(float *)(a2 + 60);
  *(float *)(a1 + 60) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return result;
}

CMMsl *CMMsl::EnhancedDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::EnhancedDeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::EnhancedDeviceMotion::formatText(CMMsl::EnhancedDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "doingBiasEstimation");
    int v5 = *((_DWORD *)this + 24);
    if ((v5 & 0x20000) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "doingYawCorrection");
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "magneticFieldCalibrationLevel");
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "rotationRateX", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "rotationRateY", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "rotationRateZ", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "userAccelerationX", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "userAccelerationY", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "userAccelerationZ", *((float *)this + 21));
  if ((*((_DWORD *)this + 24) & 0x8000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(a2, "variant");
LABEL_20:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::EnhancedDeviceMotion::readFrom(CMMsl::EnhancedDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_115;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 24) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_38;
      case 2u:
        *((_DWORD *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_38;
      case 3u:
        *((_DWORD *)this + 24) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_38;
      case 4u:
        *((_DWORD *)this + 24) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_38;
      case 5u:
        *((_DWORD *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_38:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_104;
      case 6u:
        *((_DWORD *)this + 24) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 7u:
        *((_DWORD *)this + 24) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 8u:
        *((_DWORD *)this + 24) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 9u:
        *((_DWORD *)this + 24) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0xAu:
        *((_DWORD *)this + 24) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0xBu:
        *((_DWORD *)this + 24) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0xCu:
        *((_DWORD *)this + 24) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0xDu:
        *((_DWORD *)this + 24) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0xEu:
        *((_DWORD *)this + 24) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_103:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_104:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_65:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xFu:
        *((_DWORD *)this + 24) |= 0x20u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_109;
            }
            unint64_t v38 = v20++;
            char v39 = *(unsigned char *)(v21 + v38);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_108:
              unint64_t v2 = v38 + 1;
              goto LABEL_109;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_108;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_109;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_109:
        *((_DWORD *)this + 12) = v24;
        break;
      case 0x10u:
        *((_DWORD *)this + 24) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 92) = v27;
        break;
      case 0x11u:
        *((_DWORD *)this + 24) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 93) = v29;
        break;
      case 0x12u:
        *((_DWORD *)this + 24) |= 0x8000u;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v2)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v34 = 0;
          if (v2 <= v30) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v30)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_114;
            }
            unint64_t v42 = v30++;
            char v43 = *(unsigned char *)(v31 + v42);
            *((void *)a2 + 1) = v30;
            v34 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0) {
              break;
            }
            v40 += 7;
            BOOL v14 = v41++ > 8;
            if (v14)
            {
              LODWORD(v34) = 0;
LABEL_113:
              unint64_t v2 = v42 + 1;
              goto LABEL_114;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v34) = 0;
          }
          goto LABEL_113;
        }
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        do
        {
          unint64_t v2 = v30 + 1;
          *((void *)a2 + 1) = v30 + 1;
          char v35 = *(unsigned char *)(v31 + v30);
          v34 |= (unint64_t)(v35 & 0x7F) << v32;
          if ((v35 & 0x80) == 0) {
            goto LABEL_114;
          }
          v32 += 7;
          unint64_t v30 = v2;
          BOOL v14 = v33++ > 8;
        }
        while (!v14);
        LODWORD(v34) = 0;
LABEL_114:
        *((_DWORD *)this + 22) = v34;
        break;
      default:
        goto LABEL_19;
    }
LABEL_115:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::EnhancedDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 96);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    int v4 = *(_DWORD *)(v3 + 96);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    this = PB::Writer::write(a2);
    if ((*(_DWORD *)(v3 + 96) & 0x8000) == 0) {
      return this;
    }
    goto LABEL_37;
  }
LABEL_35:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20000) != 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((v4 & 0x8000) == 0) {
    return this;
  }
LABEL_37:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::EnhancedDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 96);
  int v3 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 96) & 0x8000) == 0;
  if ((v2 & 0x8000) != 0) {
    return (v3 & 0x8000) != 0 && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88);
  }
  return v4;
}

uint64_t CMMsl::EnhancedDeviceMotion::hash_value(CMMsl::EnhancedDeviceMotion *this)
{
  int v1 = *((_DWORD *)this + 24);
  if ((v1 & 0x10) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_49:
    double v3 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_50:
    double v4 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_51:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_52:
    double v6 = 0.0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_15;
    }
LABEL_53:
    uint64_t v8 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_18;
    }
LABEL_54:
    uint64_t v10 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_21;
    }
LABEL_55:
    uint64_t v12 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_24;
    }
LABEL_56:
    uint64_t v14 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_27;
    }
LABEL_57:
    uint64_t v16 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_30;
    }
LABEL_58:
    uint64_t v18 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_33;
    }
LABEL_59:
    uint64_t v20 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_36;
    }
LABEL_60:
    uint64_t v22 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_39;
    }
LABEL_61:
    uint64_t v24 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_42;
    }
    goto LABEL_62;
  }
  double v2 = *((double *)this + 5);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_49;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_50;
  }
LABEL_6:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_51;
  }
LABEL_9:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_53;
  }
LABEL_15:
  float v7 = *((float *)this + 19);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_54;
  }
LABEL_18:
  float v9 = *((float *)this + 20);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_55;
  }
LABEL_21:
  float v11 = *((float *)this + 21);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_56;
  }
LABEL_24:
  float v13 = *((float *)this + 16);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_57;
  }
LABEL_27:
  float v15 = *((float *)this + 17);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_58;
  }
LABEL_30:
  float v17 = *((float *)this + 18);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_59;
  }
LABEL_33:
  float v19 = *((float *)this + 13);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_60;
  }
LABEL_36:
  float v21 = *((float *)this + 14);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_61;
  }
LABEL_39:
  float v23 = *((float *)this + 15);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_42:
    uint64_t v25 = *((int *)this + 12);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v25 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_43:
    uint64_t v26 = *((unsigned __int8 *)this + 92);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_44;
    }
LABEL_64:
    uint64_t v27 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_45;
    }
LABEL_65:
    uint64_t v28 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28;
  }
LABEL_63:
  uint64_t v26 = 0;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_64;
  }
LABEL_44:
  uint64_t v27 = *((unsigned __int8 *)this + 93);
  if ((v1 & 0x8000) == 0) {
    goto LABEL_65;
  }
LABEL_45:
  uint64_t v28 = *((unsigned int *)this + 22);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients(uint64_t this)
{
  *(void *)this = &unk_2706414F0;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_2706414F0;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::FaceBlendShapeCoefficients::~FaceBlendShapeCoefficients(CMMsl::FaceBlendShapeCoefficients *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients(CMMsl::FaceBlendShapeCoefficients *this, const CMMsl::FaceBlendShapeCoefficients *a2)
{
  *(void *)this = &unk_2706414F0;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    int v3 = *((_DWORD *)a2 + 2);
    *((unsigned char *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    *((unsigned char *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

const CMMsl::FaceBlendShapeCoefficients *CMMsl::FaceBlendShapeCoefficients::operator=(const CMMsl::FaceBlendShapeCoefficients *a1, const CMMsl::FaceBlendShapeCoefficients *a2)
{
  if (a1 != a2)
  {
    CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients((CMMsl::FaceBlendShapeCoefficients *)v7, a2);
    int v3 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v10;
    int v10 = v3;
    int v4 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v8;
    int v8 = v4;
    int v5 = *((_DWORD *)a1 + 3);
    *((_DWORD *)a1 + 3) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FaceBlendShapeCoefficients *a2, CMMsl::FaceBlendShapeCoefficients *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706414F0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_2706414F0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

_DWORD *CMMsl::FaceBlendShapeCoefficients::operator=(_DWORD *a1, _DWORD *a2)
{
  if (a1 != a2)
  {
    int v10 = &unk_2706414F0;
    int v3 = a2[4];
    a2[4] = 0;
    int v4 = a2[2];
    int v5 = a2[3];
    int v6 = a1[4];
    a1[4] = v3;
    int v13 = v6;
    int v7 = a1[2];
    a1[2] = v4;
    int v11 = v7;
    int v8 = a1[3];
    a1[3] = v5;
    int v12 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::formatText(CMMsl::FaceBlendShapeCoefficients *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "name");
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "value", *((float *)this + 3));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FaceBlendShapeCoefficients::readFrom(CMMsl::FaceBlendShapeCoefficients *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 12);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

BOOL CMMsl::FaceBlendShapeCoefficients::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 2) == 0;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    return (*(unsigned char *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  }
  return v2;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::hash_value(CMMsl::FaceBlendShapeCoefficients *this)
{
  if ((*((unsigned char *)this + 16) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 16) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v3 ^ v1;
  }
  uint64_t v1 = *((int *)this + 2);
  if ((*((unsigned char *)this + 16) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v1;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(uint64_t this)
{
  *(void *)this = &unk_270641528;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = &unk_270641528;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::FaceBlendShapeCoefficientsSample::~FaceBlendShapeCoefficientsSample(CMMsl::FaceBlendShapeCoefficientsSample *this)
{
  *(void *)this = &unk_270641528;
  float v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270641528;
  float v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270641528;
  float v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(uint64_t this, const CMMsl::FaceBlendShapeCoefficientsSample *a2)
{
  *(void *)this = &unk_270641528;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 5);
    *(unsigned char *)(this + 48) |= 2u;
    *(void *)(this + 40) = v3;
    char v2 = *((unsigned char *)a2 + 48);
  }
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 4);
    *(unsigned char *)(this + 48) |= 1u;
    *(void *)(this + 32) = v4;
  }
  return this;
}

void sub_2571126BC(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_2570AFA4C(a1);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::operator=(uint64_t a1, const CMMsl::FaceBlendShapeCoefficientsSample *a2)
{
  if ((const CMMsl::FaceBlendShapeCoefficientsSample *)a1 != a2)
  {
    CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    long long v11 = v6;
    uint64_t v8 = &unk_270641528;
    char v13 = (void **)&v9;
    sub_2572C6D4C(&v13);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FaceBlendShapeCoefficientsSample *a2, CMMsl::FaceBlendShapeCoefficientsSample *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641528;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  if (*(void *)(a1 + 8))
  {
    sub_2572C6DA0((void *)(a1 + 8));
    operator delete(*(void **)v4);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    long long v11 = v6;
    uint64_t v8 = &unk_270641528;
    char v13 = (void **)&v9;
    sub_2572C6D4C(&v13);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::formatText(CMMsl::FaceBlendShapeCoefficientsSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "blendShapeCoefficients");
  }
  char v8 = *((unsigned char *)this + 48);
  if (v8)
  {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 4));
    char v8 = *((unsigned char *)this + 48);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::readFrom(CMMsl::FaceBlendShapeCoefficientsSample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_21;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v21);
LABEL_33:
        *((void *)a2 + 1) += 8;
        goto LABEL_34;
      }
      if (v20 == 1) {
        operator new();
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
LABEL_34:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 48) |= 1u;
    unint64_t v22 = *((void *)a2 + 1);
    if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2))
    {
LABEL_31:
      *((unsigned char *)a2 + 24) = 1;
      goto LABEL_34;
    }
    *((void *)this + 4) = *(void *)(*(void *)a2 + v22);
    goto LABEL_33;
  }
  return v4 == 0;
}

void sub_257112DD0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base ***)(this + 8);
  uint64_t v5 = *(const PB::Base ***)(this + 16);
  while (v4 != v5)
  {
    long long v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  char v7 = *(unsigned char *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
    char v7 = *(unsigned char *)(v3 + 48);
  }
  if (v7)
  {
    double v8 = *(double *)(v3 + 32);
    return PB::Writer::write(a2, v8);
  }
  return this;
}

BOOL CMMsl::FaceBlendShapeCoefficientsSample::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  int v4 = *(uint64_t **)(a2 + 8);
  if ((char *)v3 - (char *)v2 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v2 != v3)
  {
    BOOL result = CMMsl::FaceBlendShapeCoefficients::operator==(*v2, *v4);
    if (!result) {
      return result;
    }
    ++v2;
    ++v4;
  }
  if ((*(unsigned char *)(a1 + 48) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 48) & 1) == 0;
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::hash_value(CMMsl::FaceBlendShapeCoefficientsSample *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 1);
  unint64_t v2 = (uint64_t *)*((void *)this + 2);
  if (v1 == v2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v5 = *v1++;
      uint64_t v4 = v5;
      char v6 = *(unsigned char *)(v5 + 16);
      uint64_t v7 = *(int *)(v5 + 8);
      if ((v6 & 1) == 0) {
        uint64_t v7 = 0;
      }
      int v8 = v6 & 2;
      float v9 = *(float *)(v4 + 12);
      BOOL v10 = v9 == 0.0 || v8 == 0;
      uint64_t v11 = LODWORD(v9);
      if (v10) {
        uint64_t v11 = 0;
      }
      v3 ^= v7 ^ v11;
    }
    while (v1 != v2);
  }
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
    double v12 = *((double *)this + 5);
    if (v12 == 0.0) {
      double v12 = 0.0;
    }
    if (*((unsigned char *)this + 48)) {
      goto LABEL_15;
    }
LABEL_21:
    double v13 = 0.0;
    return *(void *)&v12 ^ v3 ^ *(void *)&v13;
  }
  double v12 = 0.0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_21;
  }
LABEL_15:
  double v13 = *((double *)this + 4);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  return *(void *)&v12 ^ v3 ^ *(void *)&v13;
}

uint64_t CMMsl::FaceCovered::FaceCovered(uint64_t this)
{
  *(void *)this = &unk_270641560;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270641560;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::FaceCovered::~FaceCovered(CMMsl::FaceCovered *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::FaceCovered::FaceCovered(uint64_t this, const CMMsl::FaceCovered *a2)
{
  *(void *)this = &unk_270641560;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::FaceCovered::operator=(uint64_t a1, const CMMsl::FaceCovered *a2)
{
  if ((const CMMsl::FaceCovered *)a1 != a2)
  {
    CMMsl::FaceCovered::FaceCovered((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FaceCovered *a2, CMMsl::FaceCovered *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::FaceCovered::FaceCovered(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641560;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270641560;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::FaceCovered::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = &unk_270641560;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::FaceCovered::formatText(CMMsl::FaceCovered *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "isCovered");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FaceCovered::readFrom(CMMsl::FaceCovered *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FaceCovered::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::FaceCovered::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::FaceCovered::hash_value(CMMsl::FaceCovered *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

double CMMsl::FaceDownDetection::FaceDownDetection(CMMsl::FaceDownDetection *this)
{
  *(void *)this = &unk_270641598;
  *((_DWORD *)this + 24) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270641598;
  *((_DWORD *)this + 24) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::FaceDownDetection::~FaceDownDetection(CMMsl::FaceDownDetection *this)
{
  *(void *)this = &unk_270641598;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FaceDownDetection::~FaceDownDetection(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::FaceDownDetection *CMMsl::FaceDownDetection::FaceDownDetection(CMMsl::FaceDownDetection *this, const CMMsl::FaceDownDetection *a2)
{
  *(void *)this = &unk_270641598;
  *(_OWORD *)((char *)this + 8) = 0u;
  char v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_WORD *)a2 + 48) & 2) != 0)
  {
    uint64_t v5 = *((void *)a2 + 8);
    *((_WORD *)this + 48) = 2;
    *((void *)this + 8) = v5;
  }
  if (this != a2)
  {
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v6 = *((_WORD *)a2 + 48);
  if ((v6 & 8) != 0)
  {
    int v9 = *((_DWORD *)a2 + 19);
    *((_WORD *)this + 48) |= 8u;
    *((_DWORD *)this + 19) = v9;
    __int16 v6 = *((_WORD *)a2 + 48);
    if ((v6 & 0x10) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0) {
        goto LABEL_8;
      }
      goto LABEL_17;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_7;
  }
  int v10 = *((_DWORD *)a2 + 20);
  *((_WORD *)this + 48) |= 0x10u;
  *((_DWORD *)this + 20) = v10;
  __int16 v6 = *((_WORD *)a2 + 48);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  char v11 = *((unsigned char *)a2 + 92);
  *((_WORD *)this + 48) |= 0x80u;
  *((unsigned char *)this + 92) = v11;
  __int16 v6 = *((_WORD *)a2 + 48);
  if ((v6 & 0x100) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v12 = *((unsigned char *)a2 + 93);
  *((_WORD *)this + 48) |= 0x100u;
  *((unsigned char *)this + 93) = v12;
  __int16 v6 = *((_WORD *)a2 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_10:
    if ((v6 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v13 = *((_DWORD *)a2 + 18);
  *((_WORD *)this + 48) |= 4u;
  *((_DWORD *)this + 18) = v13;
  __int16 v6 = *((_WORD *)a2 + 48);
  if ((v6 & 0x20) == 0)
  {
LABEL_11:
    if ((v6 & 0x40) == 0) {
      goto LABEL_12;
    }
LABEL_21:
    int v15 = *((_DWORD *)a2 + 22);
    *((_WORD *)this + 48) |= 0x40u;
    *((_DWORD *)this + 22) = v15;
    if ((*((_WORD *)a2 + 48) & 1) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_20:
  int v14 = *((_DWORD *)a2 + 21);
  *((_WORD *)this + 48) |= 0x20u;
  *((_DWORD *)this + 21) = v14;
  __int16 v6 = *((_WORD *)a2 + 48);
  if ((v6 & 0x40) != 0) {
    goto LABEL_21;
  }
LABEL_12:
  if (v6)
  {
LABEL_13:
    uint64_t v7 = *((void *)a2 + 7);
    *((_WORD *)this + 48) |= 1u;
    *((void *)this + 7) = v7;
  }
  return this;
}

CMMsl *CMMsl::FaceDownDetection::operator=(CMMsl *a1, const CMMsl::FaceDownDetection *a2)
{
  if (a1 != a2)
  {
    CMMsl::FaceDownDetection::FaceDownDetection((CMMsl::FaceDownDetection *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FaceDownDetection *)v5, v3);
    CMMsl::FaceDownDetection::~FaceDownDetection((CMMsl::FaceDownDetection *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FaceDownDetection *a2, CMMsl::FaceDownDetection *a3)
{
  int v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LOBYTE(v10) = *((unsigned char *)this + 92);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
  *((unsigned char *)a2 + 92) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 93);
  *((unsigned char *)this + 93) = *((unsigned char *)a2 + 93);
  *((unsigned char *)a2 + 93) = v10;
  LODWORD(v10) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v10;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::FaceDownDetection::FaceDownDetection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641598;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

CMMsl *CMMsl::FaceDownDetection::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FaceDownDetection::FaceDownDetection((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FaceDownDetection *)v5, v3);
    CMMsl::FaceDownDetection::~FaceDownDetection((CMMsl::FaceDownDetection *)v5);
  }
  return a1;
}

uint64_t CMMsl::FaceDownDetection::formatText(CMMsl::FaceDownDetection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 4);
  uint64_t v6 = (float *)*((void *)this + 5);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "accel", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 1);
  uint64_t v9 = (float *)*((void *)this + 2);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "accelFiltered", v10);
  }
  __int16 v11 = *((_WORD *)this + 48);
  if (v11)
  {
    PB::TextFormatter::format(a2, "faceDownLookbackTimestamp", *((double *)this + 7));
    __int16 v11 = *((_WORD *)this + 48);
    if ((v11 & 4) == 0)
    {
LABEL_7:
      if ((v11 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
  }
  else if ((v11 & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "faceDownState");
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 8) == 0)
  {
LABEL_8:
    if ((v11 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "gravityAngle", *((float *)this + 19));
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 0x10) == 0)
  {
LABEL_9:
    if ((v11 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "gravityAngleVar", *((float *)this + 20));
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 0x80) == 0)
  {
LABEL_10:
    if ((v11 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isFaceDown");
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 0x20) == 0)
  {
LABEL_11:
    if ((v11 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "pocketProbability", *((float *)this + 21));
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 0x40) == 0)
  {
LABEL_12:
    if ((v11 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "pocketProbabilityVar", *((float *)this + 22));
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 0x100) == 0)
  {
LABEL_13:
    if ((v11 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "shouldSuppress");
  if ((*((_WORD *)this + 48) & 2) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
LABEL_15:
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::FaceDownDetection::readFrom(CMMsl::FaceDownDetection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 48) |= 2u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_154;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v20);
          goto LABEL_100;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v21 = *((void *)a2 + 1);
            unint64_t v22 = *((void *)a2 + 2);
            while (v21 < v22 && !*((unsigned char *)a2 + 24))
            {
              char v24 = (char *)*((void *)this + 5);
              unint64_t v23 = *((void *)this + 6);
              if ((unint64_t)v24 >= v23)
              {
                char v26 = (char *)*((void *)this + 4);
                uint64_t v27 = (v24 - v26) >> 2;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 62) {
                  goto LABEL_167;
                }
                uint64_t v29 = v23 - (void)v26;
                if (v29 >> 1 > v28) {
                  unint64_t v28 = v29 >> 1;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30)
                {
                  unint64_t v30 = (unint64_t)sub_2572C76F0(v30);
                  char v26 = (char *)*((void *)this + 4);
                  char v24 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v31 = 0;
                }
                char v32 = (_DWORD *)(v30 + 4 * v27);
                *char v32 = 0;
                uint64_t v25 = v32 + 1;
                while (v24 != v26)
                {
                  int v33 = *((_DWORD *)v24 - 1);
                  v24 -= 4;
                  *--char v32 = v33;
                }
                *((void *)this + 4) = v32;
                *((void *)this + 5) = v25;
                *((void *)this + 6) = v30 + 4 * v31;
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                *(_DWORD *)char v24 = 0;
                uint64_t v25 = v24 + 4;
              }
              *((void *)this + 5) = v25;
              unint64_t v34 = *((void *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)a2 + 2)) {
                goto LABEL_116;
              }
              *(v25 - 1) = *(_DWORD *)(*(void *)a2 + v34);
              unint64_t v22 = *((void *)a2 + 2);
              unint64_t v21 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v21;
            }
            goto LABEL_117;
          }
          unsigned int v72 = (char *)*((void *)this + 5);
          unint64_t v71 = *((void *)this + 6);
          if ((unint64_t)v72 >= v71)
          {
            unsigned int v80 = (char *)*((void *)this + 4);
            uint64_t v81 = (v72 - v80) >> 2;
            unint64_t v82 = v81 + 1;
            if ((unint64_t)(v81 + 1) >> 62) {
              goto LABEL_167;
            }
            uint64_t v83 = v71 - (void)v80;
            if (v83 >> 1 > v82) {
              unint64_t v82 = v83 >> 1;
            }
            if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v84 = v82;
            }
            if (v84)
            {
              unint64_t v84 = (unint64_t)sub_2572C76F0(v84);
              unsigned int v80 = (char *)*((void *)this + 4);
              unsigned int v72 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v85 = 0;
            }
            char v92 = (_DWORD *)(v84 + 4 * v81);
            *char v92 = 0;
            unint64_t v73 = v92 + 1;
            while (v72 != v80)
            {
              int v93 = *((_DWORD *)v72 - 1);
              v72 -= 4;
              *--char v92 = v93;
            }
            *((void *)this + 4) = v92;
            *((void *)this + 5) = v73;
            *((void *)this + 6) = v84 + 4 * v85;
            if (v80) {
              operator delete(v80);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v72 = 0;
            unint64_t v73 = v72 + 4;
          }
          *((void *)this + 5) = v73;
          goto LABEL_152;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v35 = *((void *)a2 + 1);
            unint64_t v36 = *((void *)a2 + 2);
            while (v35 < v36 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v38 = (char *)*((void *)this + 2);
              unint64_t v37 = *((void *)this + 3);
              if ((unint64_t)v38 >= v37)
              {
                char v40 = (char *)*((void *)this + 1);
                uint64_t v41 = (v38 - v40) >> 2;
                unint64_t v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 62) {
                  goto LABEL_167;
                }
                uint64_t v43 = v37 - (void)v40;
                if (v43 >> 1 > v42) {
                  unint64_t v42 = v43 >> 1;
                }
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v44 = v42;
                }
                if (v44)
                {
                  unint64_t v44 = (unint64_t)sub_2572C76F0(v44);
                  char v40 = (char *)*((void *)this + 1);
                  unint64_t v38 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v45 = 0;
                }
                int v46 = (_DWORD *)(v44 + 4 * v41);
                *int v46 = 0;
                char v39 = v46 + 1;
                while (v38 != v40)
                {
                  int v47 = *((_DWORD *)v38 - 1);
                  v38 -= 4;
                  *--int v46 = v47;
                }
                *((void *)this + 1) = v46;
                *((void *)this + 2) = v39;
                *((void *)this + 3) = v44 + 4 * v45;
                if (v40) {
                  operator delete(v40);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v38 = 0;
                char v39 = v38 + 4;
              }
              *((void *)this + 2) = v39;
              unint64_t v48 = *((void *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2))
              {
LABEL_116:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v39 - 1) = *(_DWORD *)(*(void *)a2 + v48);
              unint64_t v36 = *((void *)a2 + 2);
              unint64_t v35 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v35;
            }
LABEL_117:
            PB::Reader::recallMark();
          }
          else
          {
            char v75 = (char *)*((void *)this + 2);
            unint64_t v74 = *((void *)this + 3);
            if ((unint64_t)v75 >= v74)
            {
              unint64_t v86 = (char *)*((void *)this + 1);
              uint64_t v87 = (v75 - v86) >> 2;
              unint64_t v88 = v87 + 1;
              if ((unint64_t)(v87 + 1) >> 62) {
LABEL_167:
              }
                sub_2570AFD0C();
              uint64_t v89 = v74 - (void)v86;
              if (v89 >> 1 > v88) {
                unint64_t v88 = v89 >> 1;
              }
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v90 = v88;
              }
              if (v90)
              {
                unint64_t v90 = (unint64_t)sub_2572C76F0(v90);
                unint64_t v86 = (char *)*((void *)this + 1);
                char v75 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v91 = 0;
              }
              unint64_t v94 = (_DWORD *)(v90 + 4 * v87);
              *unint64_t v94 = 0;
              unint64_t v73 = v94 + 1;
              while (v75 != v86)
              {
                int v95 = *((_DWORD *)v75 - 1);
                v75 -= 4;
                *--unint64_t v94 = v95;
              }
              *((void *)this + 1) = v94;
              *((void *)this + 2) = v73;
              *((void *)this + 3) = v90 + 4 * v91;
              if (v86) {
                operator delete(v86);
              }
            }
            else
            {
              *(_DWORD *)char v75 = 0;
              unint64_t v73 = v75 + 4;
            }
            *((void *)this + 2) = v73;
LABEL_152:
            unint64_t v96 = *((void *)a2 + 1);
            if (v96 <= 0xFFFFFFFFFFFFFFFBLL && v96 + 4 <= *((void *)a2 + 2))
            {
              *(v73 - 1) = *(_DWORD *)(*(void *)a2 + v96);
LABEL_156:
              uint64_t v70 = *((void *)a2 + 1) + 4;
LABEL_157:
              *((void *)a2 + 1) = v70;
            }
            else
            {
LABEL_154:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        case 4u:
          *((_WORD *)this + 48) |= 8u;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
            goto LABEL_154;
          }
          *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v49);
          goto LABEL_156;
        case 5u:
          *((_WORD *)this + 48) |= 0x10u;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
            goto LABEL_154;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v50);
          goto LABEL_156;
        case 6u:
          *((_WORD *)this + 48) |= 0x80u;
          unint64_t v51 = *((void *)a2 + 1);
          if (v51 >= *((void *)a2 + 2))
          {
            BOOL v54 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v52 = v51 + 1;
            int v53 = *(unsigned __int8 *)(*(void *)a2 + v51);
            *((void *)a2 + 1) = v52;
            BOOL v54 = v53 != 0;
          }
          *((unsigned char *)this + 92) = v54;
          goto LABEL_158;
        case 7u:
          *((_WORD *)this + 48) |= 0x100u;
          unint64_t v55 = *((void *)a2 + 1);
          if (v55 >= *((void *)a2 + 2))
          {
            BOOL v58 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v56 = v55 + 1;
            int v57 = *(unsigned __int8 *)(*(void *)a2 + v55);
            *((void *)a2 + 1) = v56;
            BOOL v58 = v57 != 0;
          }
          *((unsigned char *)this + 93) = v58;
          goto LABEL_158;
        case 8u:
          *((_WORD *)this + 48) |= 4u;
          unint64_t v59 = *((void *)a2 + 1);
          unint64_t v60 = *((void *)a2 + 2);
          uint64_t v61 = *(void *)a2;
          if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
          {
            char v62 = 0;
            unsigned int v63 = 0;
            uint64_t v64 = 0;
            do
            {
              unint64_t v65 = v59 + 1;
              *((void *)a2 + 1) = v59 + 1;
              char v66 = *(unsigned char *)(v61 + v59);
              v64 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0) {
                goto LABEL_137;
              }
              v62 += 7;
              unint64_t v59 = v65;
              BOOL v14 = v63++ > 8;
            }
            while (!v14);
LABEL_115:
            LODWORD(v64) = 0;
            goto LABEL_137;
          }
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v64 = 0;
          if (v60 <= v59) {
            unint64_t v60 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v60 == v59)
            {
              LODWORD(v64) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v78 = v59 + 1;
              char v79 = *(unsigned char *)(v61 + v59);
              *((void *)a2 + 1) = v78;
              v64 |= (unint64_t)(v79 & 0x7F) << v76;
              if (v79 < 0)
              {
                v76 += 7;
                unint64_t v59 = v78;
                BOOL v14 = v77++ > 8;
                if (v14) {
                  goto LABEL_115;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v64) = 0;
              }
            }
            break;
          }
LABEL_137:
          *((_DWORD *)this + 18) = v64;
          goto LABEL_158;
        case 9u:
          *((_WORD *)this + 48) |= 0x20u;
          unint64_t v67 = *((void *)a2 + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)a2 + 2)) {
            goto LABEL_154;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v67);
          goto LABEL_156;
        case 0xAu:
          *((_WORD *)this + 48) |= 0x40u;
          unint64_t v68 = *((void *)a2 + 1);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)a2 + 2)) {
            goto LABEL_154;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v68);
          goto LABEL_156;
        case 0xBu:
          *((_WORD *)this + 48) |= 1u;
          unint64_t v69 = *((void *)a2 + 1);
          if (v69 > 0xFFFFFFFFFFFFFFF7 || v69 + 8 > *((void *)a2 + 2)) {
            goto LABEL_154;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v69);
LABEL_100:
          uint64_t v70 = *((void *)a2 + 1) + 8;
          goto LABEL_157;
        default:
          goto LABEL_19;
      }
      goto LABEL_158;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_158:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::FaceDownDetection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(_WORD *)(this + 96) & 2) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 64));
  }
  int v4 = *(float **)(v3 + 32);
  uint64_t v5 = *(float **)(v3 + 40);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  float v7 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 76));
    __int16 v10 = *(_WORD *)(v3 + 96);
    if ((v10 & 0x10) == 0)
    {
LABEL_11:
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else if ((v10 & 0x10) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x80) == 0)
  {
LABEL_12:
    if ((v10 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2);
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x100) == 0)
  {
LABEL_13:
    if ((v10 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2);
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 4) == 0)
  {
LABEL_14:
    if ((v10 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x20) == 0)
  {
LABEL_15:
    if ((v10 & 0x40) == 0) {
      goto LABEL_16;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(float *)(v3 + 88));
    if ((*(_WORD *)(v3 + 96) & 1) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x40) != 0) {
    goto LABEL_24;
  }
LABEL_16:
  if ((v10 & 1) == 0) {
    return this;
  }
LABEL_25:
  double v11 = *(double *)(v3 + 56);
  return PB::Writer::write(a2, v11);
}

BOOL CMMsl::FaceDownDetection::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 96);
  __int16 v3 = *(_WORD *)(a2 + 96);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  uint64_t v5 = *(float **)(a1 + 32);
  int v4 = *(float **)(a1 + 40);
  float v6 = *(float **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 40) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  uint64_t v8 = *(float **)(a1 + 8);
  float v7 = *(float **)(a1 + 16);
  float v9 = *(float **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 16) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 96) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  BOOL v10 = (v3 & 1) == 0;
  if (v2) {
    return (v3 & 1) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  }
  return v10;
}

uint64_t CMMsl::FaceDownDetection::hash_value(CMMsl::FaceDownDetection *this)
{
  if ((*((_WORD *)this + 48) & 2) != 0)
  {
    if (*((double *)this + 8) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 8);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 8) == 0)
  {
    uint64_t v6 = 0;
    if ((v5 & 0x10) != 0) {
      goto LABEL_8;
    }
LABEL_26:
    uint64_t v8 = 0;
    if ((v5 & 0x80) != 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
  float v17 = *((float *)this + 19);
  uint64_t v6 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v5 & 0x10) == 0) {
    goto LABEL_26;
  }
LABEL_8:
  float v7 = *((float *)this + 20);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v5 & 0x80) != 0)
  {
LABEL_11:
    uint64_t v9 = *((unsigned __int8 *)this + 92);
    if ((*((_WORD *)this + 48) & 0x100) != 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v9 = 0;
  if ((*((_WORD *)this + 48) & 0x100) != 0)
  {
LABEL_12:
    uint64_t v10 = *((unsigned __int8 *)this + 93);
    if ((v5 & 4) != 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v10 = 0;
  if ((v5 & 4) != 0)
  {
LABEL_13:
    uint64_t v11 = *((unsigned int *)this + 18);
    if ((v5 & 0x20) != 0) {
      goto LABEL_14;
    }
LABEL_30:
    uint64_t v13 = 0;
    if ((v5 & 0x40) != 0) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }
LABEL_29:
  uint64_t v11 = 0;
  if ((v5 & 0x20) == 0) {
    goto LABEL_30;
  }
LABEL_14:
  float v12 = *((float *)this + 21);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v5 & 0x40) != 0)
  {
LABEL_17:
    float v14 = *((float *)this + 22);
    uint64_t v15 = LODWORD(v14);
    if (v14 == 0.0) {
      uint64_t v15 = 0;
    }
    if (v5) {
      goto LABEL_20;
    }
LABEL_32:
    double v16 = 0.0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ *(void *)&v16;
  }
LABEL_31:
  uint64_t v15 = 0;
  if ((v5 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_20:
  double v16 = *((double *)this + 7);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ *(void *)&v16;
}

uint64_t CMMsl::FacePose::FacePose(uint64_t this)
{
  *(void *)this = &unk_2706415D0;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

{
  *(void *)this = &unk_2706415D0;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

void CMMsl::FacePose::~FacePose(CMMsl::FacePose *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::FacePose::FacePose(CMMsl::FacePose *this, const CMMsl::FacePose *a2)
{
  *(void *)this = &unk_2706415D0;
  *((_DWORD *)this + 34) = 0;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    int v3 = 2;
    *((_DWORD *)this + 34) = 2;
    *((void *)this + 2) = v4;
    int v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 29);
    v3 |= 0x2000000u;
    *((_DWORD *)this + 34) = v3;
    *((_DWORD *)this + 29) = v5;
    int v2 = *((_DWORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    int v6 = *((_DWORD *)a2 + 20);
    v3 |= 0x10000u;
    *((_DWORD *)this + 34) = v3;
    *((_DWORD *)this + 20) = v6;
    int v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_38;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x80000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 23) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x100000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 24) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x200000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x200000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 25) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x40000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 22) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(v4) = *((_DWORD *)a2 + 30);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 30) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 31) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 32);
  v3 |= 0x10000000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 32) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x8000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 19) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 9) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x400u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 14) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 6) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 8) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v7 = *((_DWORD *)a2 + 21);
  v3 |= 0x20000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 21) = v7;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 10) = v8;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v4 = *((void *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 34) = v3;
  *((void *)this + 1) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  char v9 = *((unsigned char *)a2 + 133);
  v3 |= 0x40000000u;
  *((_DWORD *)this + 34) = v3;
  *((unsigned char *)this + 133) = v9;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  char v10 = *((unsigned char *)a2 + 132);
  v3 |= 0x20000000u;
  *((_DWORD *)this + 34) = v3;
  *((unsigned char *)this + 132) = v10;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 7) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0) {
      goto LABEL_27;
    }
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x4000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0) {
      goto LABEL_28;
    }
    goto LABEL_57;
  }
LABEL_56:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 11) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200) == 0) {
      goto LABEL_29;
    }
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 12) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_59;
  }
LABEL_58:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 13) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_60;
  }
LABEL_59:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x800u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 15) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_31:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x1000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 16) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x2000) == 0)
  {
LABEL_32:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x2000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x400000) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x400000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 26) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x800000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x800000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 27) = v4;
  if ((*((_DWORD *)a2 + 34) & 0x1000000) == 0) {
    return *(float *)&v4;
  }
LABEL_64:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  *((_DWORD *)this + 34) = v3 | 0x1000000;
  *((_DWORD *)this + 28) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::FacePose::operator=(CMMsl *a1, const CMMsl::FacePose *a2)
{
  if (a1 != a2)
  {
    CMMsl::FacePose::FacePose((CMMsl::FacePose *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FacePose *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FacePose *a2, CMMsl::FacePose *a3)
{
  int v3 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v5;
  int v6 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v6;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  int v7 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v7;
  int v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  LOBYTE(v8) = *((unsigned char *)this + 133);
  *((unsigned char *)this + 133) = *((unsigned char *)a2 + 133);
  *((unsigned char *)a2 + 133) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 132);
  *((unsigned char *)this + 132) = *((unsigned char *)a2 + 132);
  *((unsigned char *)a2 + 132) = v8;
  LODWORD(v9) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  LODWORD(v9) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  LODWORD(v9) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v9;
  LODWORD(v9) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  LODWORD(v9) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  LODWORD(v9) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v9;
  LODWORD(v9) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v9;
  LODWORD(v9) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v9;
  LODWORD(v9) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v9;
  LODWORD(v9) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v9;
  float result = *((float *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((float *)a2 + 28) = result;
  return result;
}

float CMMsl::FacePose::FacePose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706415D0;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 133) = *(unsigned char *)(a2 + 133);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  float result = *(float *)(a2 + 112);
  *(float *)(a1 + 112) = result;
  return result;
}

CMMsl *CMMsl::FacePose::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FacePose::FacePose((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FacePose *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FacePose::formatText(CMMsl::FacePose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "aperture", *((float *)this + 6));
    int v5 = *((_DWORD *)this + 34);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_38;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "ev", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "exposureDuration", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "failureCode");
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "gaze_x", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "gaze_y", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "gaze_z", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "iso", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "left_eye_x", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "left_eye_y", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "left_eye_z", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "lidAngle", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "lux", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "orientation");
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "poseLibrary");
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40000) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "qw", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x80000) == 0)
  {
LABEL_19:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "qx", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x100000) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "qy", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x200000) == 0)
  {
LABEL_21:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "qz", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x400000) == 0)
  {
LABEL_22:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "right_eye_x", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x800000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "right_eye_y", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "right_eye_z", *((float *)this + 28));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 1) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "rollValue", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "sensorCovered");
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "tooDark");
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "type");
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "x", *((float *)this + 30));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "y", *((float *)this + 31));
  if ((*((_DWORD *)this + 34) & 0x10000000) != 0) {
LABEL_32:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 32));
LABEL_33:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FacePose::readFrom(CMMsl::FacePose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_166;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 34) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 2u:
        *((_DWORD *)this + 34) |= 0x2000000u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_175;
            }
            unint64_t v50 = v20++;
            char v51 = *(unsigned char *)(v21 + v50);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            BOOL v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_174:
              unint64_t v2 = v50 + 1;
              goto LABEL_175;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_174;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_175;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_175:
        *((_DWORD *)this + 29) = v24;
        break;
      case 3u:
        *((_DWORD *)this + 34) |= 0x10000u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_180;
            }
            unint64_t v54 = v26++;
            char v55 = *(unsigned char *)(v27 + v54);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0) {
              break;
            }
            v52 += 7;
            BOOL v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_179:
              unint64_t v2 = v54 + 1;
              goto LABEL_180;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_179;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_180;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_180:
        *((_DWORD *)this + 20) = v30;
        break;
      case 4u:
        *((_DWORD *)this + 34) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 5u:
        *((_DWORD *)this + 34) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 6u:
        *((_DWORD *)this + 34) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 7u:
        *((_DWORD *)this + 34) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 8u:
        *((_DWORD *)this + 34) |= 0x4000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 9u:
        *((_DWORD *)this + 34) |= 0x8000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0xAu:
        *((_DWORD *)this + 34) |= 0x10000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0xBu:
        *((_DWORD *)this + 34) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0xCu:
        *((_DWORD *)this + 34) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0xDu:
        *((_DWORD *)this + 34) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0xEu:
        *((_DWORD *)this + 34) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0xFu:
        *((_DWORD *)this + 34) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0x10u:
        *((_DWORD *)this + 34) |= 0x20000u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_185;
            }
            unint64_t v58 = v32++;
            char v59 = *(unsigned char *)(v33 + v58);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            BOOL v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_184:
              unint64_t v2 = v58 + 1;
              goto LABEL_185;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_184;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_185;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_185:
        *((_DWORD *)this + 21) = v36;
        break;
      case 0x11u:
        *((_DWORD *)this + 34) |= 0x40u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_190;
            }
            unint64_t v62 = v38++;
            char v63 = *(unsigned char *)(v39 + v62);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0) {
              break;
            }
            v60 += 7;
            BOOL v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_189:
              unint64_t v2 = v62 + 1;
              goto LABEL_190;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_189;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_190;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_190:
        *((_DWORD *)this + 10) = v42;
        break;
      case 0x12u:
        *((_DWORD *)this + 34) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_93:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_165;
      case 0x13u:
        *((_DWORD *)this + 34) |= 0x40000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v45 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v44 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v45 = v44 != 0;
        }
        *((unsigned char *)this + 133) = v45;
        break;
      case 0x14u:
        *((_DWORD *)this + 34) |= 0x20000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v47 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v46 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v47 = v46 != 0;
        }
        *((unsigned char *)this + 132) = v47;
        break;
      case 0x15u:
        *((_DWORD *)this + 34) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0x16u:
        *((_DWORD *)this + 34) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0x17u:
        *((_DWORD *)this + 34) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0x18u:
        *((_DWORD *)this + 34) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0x19u:
        *((_DWORD *)this + 34) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0x1Au:
        *((_DWORD *)this + 34) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0x1Bu:
        *((_DWORD *)this + 34) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0x1Cu:
        *((_DWORD *)this + 34) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0x1Du:
        *((_DWORD *)this + 34) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0x1Eu:
        *((_DWORD *)this + 34) |= 0x800000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_130;
        }
        *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_164;
      case 0x1Fu:
        *((_DWORD *)this + 34) |= 0x1000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_164:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_165:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_130:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_166:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FacePose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 136);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    int v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_28:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_31;
    }
LABEL_62:
    this = PB::Writer::write(a2, *(float *)(v3 + 108));
    if ((*(_DWORD *)(v3 + 136) & 0x1000000) == 0) {
      return this;
    }
    goto LABEL_63;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800000) != 0) {
    goto LABEL_62;
  }
LABEL_31:
  if ((v4 & 0x1000000) == 0) {
    return this;
  }
LABEL_63:
  float v5 = *(float *)(v3 + 112);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::FacePose::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a2 + 136);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 133) != *(unsigned __int8 *)(a2 + 133)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 132) != *(unsigned __int8 *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x1000000) == 0;
  if ((v2 & 0x1000000) != 0) {
    return (v3 & 0x1000000) != 0 && *(float *)(a1 + 112) == *(float *)(a2 + 112);
  }
  return v4;
}

uint64_t CMMsl::FacePose::hash_value(CMMsl::FacePose *this)
{
  int v1 = *((_DWORD *)this + 34);
  if ((v1 & 2) != 0)
  {
    double v53 = *((double *)this + 2);
    if (v53 == 0.0) {
      double v53 = 0.0;
    }
    double v59 = v53;
    if ((v1 & 0x2000000) != 0)
    {
LABEL_3:
      uint64_t v58 = *((unsigned int *)this + 29);
      if ((v1 & 0x10000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_103;
    }
  }
  else
  {
    double v59 = 0.0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v58 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_4:
    uint64_t v57 = *((unsigned int *)this + 20);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_5;
    }
LABEL_104:
    uint64_t v56 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_8;
    }
LABEL_105:
    uint64_t v55 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_11;
    }
LABEL_106:
    uint64_t v7 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_15;
    }
LABEL_107:
    uint64_t v9 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_19;
    }
LABEL_108:
    uint64_t v11 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_23;
    }
LABEL_109:
    uint64_t v13 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_27;
    }
LABEL_110:
    uint64_t v15 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_31;
    }
LABEL_111:
    uint64_t v17 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_35;
    }
LABEL_112:
    uint64_t v19 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_39;
    }
LABEL_113:
    uint64_t v21 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_43;
    }
LABEL_114:
    uint64_t v23 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_47;
    }
LABEL_115:
    uint64_t v25 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_51;
    }
    goto LABEL_116;
  }
LABEL_103:
  uint64_t v57 = 0;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_104;
  }
LABEL_5:
  float v2 = *((float *)this + 23);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  uint64_t v56 = v3;
  if ((v1 & 0x100000) == 0) {
    goto LABEL_105;
  }
LABEL_8:
  float v4 = *((float *)this + 24);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  uint64_t v55 = v5;
  if ((v1 & 0x200000) == 0) {
    goto LABEL_106;
  }
LABEL_11:
  float v6 = *((float *)this + 25);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = LODWORD(v6);
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_107;
  }
LABEL_15:
  float v8 = *((float *)this + 22);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = LODWORD(v8);
  }
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_108;
  }
LABEL_19:
  float v10 = *((float *)this + 30);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = LODWORD(v10);
  }
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_109;
  }
LABEL_23:
  float v12 = *((float *)this + 31);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = LODWORD(v12);
  }
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_110;
  }
LABEL_27:
  float v14 = *((float *)this + 32);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = LODWORD(v14);
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_111;
  }
LABEL_31:
  float v16 = *((float *)this + 19);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = LODWORD(v16);
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_112;
  }
LABEL_35:
  float v18 = *((float *)this + 9);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = LODWORD(v18);
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_113;
  }
LABEL_39:
  float v20 = *((float *)this + 14);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = LODWORD(v20);
  }
  if ((v1 & 4) == 0) {
    goto LABEL_114;
  }
LABEL_43:
  float v22 = *((float *)this + 6);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = LODWORD(v22);
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_115;
  }
LABEL_47:
  float v24 = *((float *)this + 8);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = LODWORD(v24);
  }
  if ((v1 & 0x20000) != 0)
  {
LABEL_51:
    uint64_t v26 = *((unsigned int *)this + 21);
    if ((v1 & 0x40) != 0) {
      goto LABEL_52;
    }
    goto LABEL_117;
  }
LABEL_116:
  uint64_t v26 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_52:
    uint64_t v27 = *((int *)this + 10);
    if (v1) {
      goto LABEL_53;
    }
LABEL_118:
    uint64_t v28 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_57;
    }
    goto LABEL_119;
  }
LABEL_117:
  uint64_t v27 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_118;
  }
LABEL_53:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *((void *)this + 1);
  }
  if ((v1 & 0x40000000) != 0)
  {
LABEL_57:
    uint64_t v29 = *((unsigned __int8 *)this + 133);
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_58;
    }
    goto LABEL_120;
  }
LABEL_119:
  uint64_t v29 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_58:
    uint64_t v30 = *((unsigned __int8 *)this + 132);
    if ((v1 & 8) != 0) {
      goto LABEL_59;
    }
LABEL_121:
    uint64_t v32 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_63;
    }
LABEL_122:
    uint64_t v34 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_67;
    }
LABEL_123:
    uint64_t v36 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_71;
    }
LABEL_124:
    uint64_t v38 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_75;
    }
LABEL_125:
    uint64_t v40 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_79;
    }
LABEL_126:
    uint64_t v42 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_83;
    }
LABEL_127:
    uint64_t v44 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_87;
    }
LABEL_128:
    uint64_t v46 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_90;
    }
LABEL_129:
    uint64_t v48 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_93;
    }
    goto LABEL_130;
  }
LABEL_120:
  uint64_t v30 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_121;
  }
LABEL_59:
  float v31 = *((float *)this + 7);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = LODWORD(v31);
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_122;
  }
LABEL_63:
  float v33 = *((float *)this + 18);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = LODWORD(v33);
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_123;
  }
LABEL_67:
  float v35 = *((float *)this + 11);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = LODWORD(v35);
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_124;
  }
LABEL_71:
  float v37 = *((float *)this + 12);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = LODWORD(v37);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_125;
  }
LABEL_75:
  float v39 = *((float *)this + 13);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = LODWORD(v39);
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_126;
  }
LABEL_79:
  float v41 = *((float *)this + 15);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = LODWORD(v41);
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_127;
  }
LABEL_83:
  float v43 = *((float *)this + 16);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = LODWORD(v43);
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_128;
  }
LABEL_87:
  float v45 = *((float *)this + 17);
  uint64_t v46 = LODWORD(v45);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_129;
  }
LABEL_90:
  float v47 = *((float *)this + 26);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  if ((v1 & 0x800000) != 0)
  {
LABEL_93:
    float v49 = *((float *)this + 27);
    uint64_t v50 = LODWORD(v49);
    if (v49 == 0.0) {
      uint64_t v50 = 0;
    }
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_96;
    }
LABEL_131:
    uint64_t v52 = 0;
    return v58 ^ *(void *)&v59 ^ v57 ^ v56 ^ v55 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
  }
LABEL_130:
  uint64_t v50 = 0;
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_131;
  }
LABEL_96:
  float v51 = *((float *)this + 28);
  uint64_t v52 = LODWORD(v51);
  if (v51 == 0.0) {
    uint64_t v52 = 0;
  }
  return v58 ^ *(void *)&v59 ^ v57 ^ v56 ^ v55 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
}

uint64_t CMMsl::FacePoseSynchronized::FacePoseSynchronized(uint64_t this)
{
  *(void *)this = &unk_270641608;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_270641608;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::FacePoseSynchronized::~FacePoseSynchronized(CMMsl::FacePoseSynchronized *this)
{
  *(void *)this = &unk_270641608;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FacePoseSynchronized::~FacePoseSynchronized(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::FacePoseSynchronized::FacePoseSynchronized(uint64_t this, const CMMsl::FacePoseSynchronized *a2)
{
  *(void *)this = &unk_270641608;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  if ((*((unsigned char *)a2 + 32) & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 2);
    *(unsigned char *)(this + 32) = 2;
    *(void *)(this + 16) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 32) & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 32))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 32) = v2;
    *(void *)(this + 8) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 3)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FacePoseSynchronized::operator=(uint64_t a1, const CMMsl::FacePoseSynchronized *a2)
{
  if ((const CMMsl::FacePoseSynchronized *)a1 != a2)
  {
    CMMsl::FacePoseSynchronized::FacePoseSynchronized((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    CMMsl::FacePoseSynchronized::~FacePoseSynchronized((CMMsl::FacePoseSynchronized *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FacePoseSynchronized *a2, CMMsl::FacePoseSynchronized *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  return result;
}

uint64_t CMMsl::FacePoseSynchronized::FacePoseSynchronized(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641608;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::FacePoseSynchronized::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::FacePoseSynchronized::FacePoseSynchronized((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    CMMsl::FacePoseSynchronized::~FacePoseSynchronized((CMMsl::FacePoseSynchronized *)v7);
  }
  return a1;
}

uint64_t CMMsl::FacePoseSynchronized::formatText(CMMsl::FacePoseSynchronized *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 32);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FacePoseSynchronized::readFrom(CMMsl::FacePoseSynchronized *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_21;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v22);
      }
      else
      {
        if (v20 != 1)
        {
LABEL_19:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          goto LABEL_34;
        }
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
        {
LABEL_31:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v21);
      }
      *((void *)a2 + 1) += 8;
LABEL_34:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::FacePoseSynchronized::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 32);
  }
  if (v4) {
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
  }
  char v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

BOOL CMMsl::FacePoseSynchronized::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a2 + 24);
  BOOL result = v3 == 0;
  if (!v2) {
    return result;
  }
  return v3 && CMMsl::FacePose::operator==(v2, v3);
}

unint64_t CMMsl::FacePoseSynchronized::hash_value(CMMsl::FacePoseSynchronized *this)
{
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
    if (*((double *)this + 2) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 2);
    }
    if (*((unsigned char *)this + 32)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v2 = 0;
    goto LABEL_11;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_10;
  }
LABEL_3:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 1);
  }
LABEL_11:
  unint64_t v3 = *((void *)this + 3);
  if (v3) {
    unint64_t v3 = CMMsl::FacePose::hash_value((CMMsl::FacePose *)v3);
  }
  return v2 ^ v1 ^ v3;
}

uint64_t CMMsl::FacePoseSynchronized::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(uint64_t this)
{
  *(void *)this = &unk_270641640;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_270641640;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::FallDetectionActivityClassifierReplay::~FallDetectionActivityClassifierReplay(CMMsl::FallDetectionActivityClassifierReplay *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(CMMsl::FallDetectionActivityClassifierReplay *this, const CMMsl::FallDetectionActivityClassifierReplay *a2)
{
  *(void *)this = &unk_270641640;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 7) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 4) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        return result;
      }
LABEL_12:
      float result = *((float *)a2 + 6);
      *((unsigned char *)this + 32) = v3 | 8;
      *((float *)this + 6) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 5) = v7;
  if ((*((unsigned char *)a2 + 32) & 8) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::operator=(uint64_t a1, const CMMsl::FallDetectionActivityClassifierReplay *a2)
{
  if ((const CMMsl::FallDetectionActivityClassifierReplay *)a1 != a2)
  {
    CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay((CMMsl::FallDetectionActivityClassifierReplay *)v8, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v3;
    uint64_t v4 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v12;
    uint64_t v12 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v10;
    uint64_t v10 = v5;
    int v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallDetectionActivityClassifierReplay *a2, CMMsl::FallDetectionActivityClassifierReplay *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641640;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270641640;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 28);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v10[0] = &unk_270641640;
    v10[1] = v7;
    uint64_t v12 = *(void *)(a1 + 28);
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 28) = v6;
    *(void *)(a1 + 16) = v5;
    v10[2] = v8;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v11 = v5;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::formatText(CMMsl::FallDetectionActivityClassifierReplay *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "cyclingState");
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cyclingStateSummary");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "distanceTraveledOverTimeWindow", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "motionType");
  if (*((unsigned char *)this + 32)) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp");
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::readFrom(CMMsl::FallDetectionActivityClassifierReplay *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_92;
            }
            unint64_t v47 = v21++;
            char v48 = *(unsigned char *)(v22 + v47);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v48 & 0x7F) << v45;
            if ((v48 & 0x80) == 0) {
              break;
            }
            v45 += 7;
            BOOL v14 = v46++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
LABEL_91:
              unint64_t v2 = v47 + 1;
              goto LABEL_92;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
          goto LABEL_91;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_92;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        uint64_t v25 = 0;
LABEL_92:
        *((void *)this + 1) = v25;
        break;
      case 2u:
        *((unsigned char *)this + 32) |= 0x10u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_97;
            }
            unint64_t v51 = v27++;
            char v52 = *(unsigned char *)(v28 + v51);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v52 & 0x7F) << v49;
            if ((v52 & 0x80) == 0) {
              break;
            }
            v49 += 7;
            BOOL v14 = v50++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_96:
              unint64_t v2 = v51 + 1;
              goto LABEL_97;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
          goto LABEL_96;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_97;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_97:
        *((_DWORD *)this + 7) = v31;
        break;
      case 3u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_102;
            }
            unint64_t v55 = v33++;
            char v56 = *(unsigned char *)(v34 + v55);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v56 & 0x7F) << v53;
            if ((v56 & 0x80) == 0) {
              break;
            }
            v53 += 7;
            BOOL v14 = v54++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_101:
              unint64_t v2 = v55 + 1;
              goto LABEL_102;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
          goto LABEL_101;
        }
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        do
        {
          unint64_t v2 = v33 + 1;
          *((void *)a2 + 1) = v33 + 1;
          char v38 = *(unsigned char *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0) {
            goto LABEL_102;
          }
          v35 += 7;
          unint64_t v33 = v2;
          BOOL v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_102:
        *((_DWORD *)this + 4) = v37;
        break;
      case 4u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v39 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v40 = *(void *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          char v57 = 0;
          unsigned int v58 = 0;
          uint64_t v43 = 0;
          if (v2 <= v39) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_107;
            }
            unint64_t v59 = v39++;
            char v60 = *(unsigned char *)(v40 + v59);
            *((void *)a2 + 1) = v39;
            v43 |= (unint64_t)(v60 & 0x7F) << v57;
            if ((v60 & 0x80) == 0) {
              break;
            }
            v57 += 7;
            BOOL v14 = v58++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_106:
              unint64_t v2 = v59 + 1;
              goto LABEL_107;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v43) = 0;
          }
          goto LABEL_106;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        do
        {
          unint64_t v2 = v39 + 1;
          *((void *)a2 + 1) = v39 + 1;
          char v44 = *(unsigned char *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0) {
            goto LABEL_107;
          }
          v41 += 7;
          unint64_t v39 = v2;
          BOOL v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_107:
        *((_DWORD *)this + 5) = v43;
        break;
      case 5u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::FallDetectionActivityClassifierReplay::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 8) == 0;
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
    return (*(unsigned char *)(a2 + 32) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::hash_value(CMMsl::FallDetectionActivityClassifierReplay *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v2 = *((int *)this + 7);
      if ((*((unsigned char *)this + 32) & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 4);
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_5:
    uint64_t v4 = *((int *)this + 5);
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_13:
    uint64_t v6 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v6;
  }
LABEL_12:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  float v5 = *((float *)this + 6);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  return v2 ^ v1 ^ v3 ^ v4 ^ v6;
}

void *CMMsl::FallDetectionDetector::FallDetectionDetector(void *this)
{
  *this = &unk_270641678;
  *(void *)((char *)this + 156) = 0;
  return this;
}

{
  *this = &unk_270641678;
  *(void *)((char *)this + 156) = 0;
  return this;
}

void CMMsl::FallDetectionDetector::~FallDetectionDetector(CMMsl::FallDetectionDetector *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::FallDetectionDetector::FallDetectionDetector(CMMsl::FallDetectionDetector *this, const CMMsl::FallDetectionDetector *a2)
{
  *(void *)this = &unk_270641678;
  *(void *)((char *)this + 156) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    uint64_t v3 = 1;
    *(void *)((char *)this + 156) = 1;
    *((void *)this + 1) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 156);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4uLL;
    *(void *)((char *)this + 156) = v3;
    *((void *)this + 3) = v5;
    uint64_t v2 = *(void *)((char *)a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2uLL;
    *(void *)((char *)this + 156) = v3;
    *((void *)this + 2) = v6;
    uint64_t v2 = *(void *)((char *)a2 + 156);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_44;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 11) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x20uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 10) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x20000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 22) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x2000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 18) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x10000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 21) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x80000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 24) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x10uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 9) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 20) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 19) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x4000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 31) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 33);
  v3 |= 0x10000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 33) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 35);
  v3 |= 0x40000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 35) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 34);
  v3 |= 0x20000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 34) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v7 = *((_DWORD *)a2 + 12);
  v3 |= 0x80uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 12) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *((_DWORD *)a2 + 32);
  v3 |= 0x8000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 32) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  char v8 = *((unsigned char *)a2 + 152);
  v3 |= 0x200000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 152) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v9 = *((_DWORD *)a2 + 37);
  v3 |= 0x100000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 37) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *((_DWORD *)a2 + 36);
  v3 |= 0x80000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 36) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x400) == 0)
  {
LABEL_26:
    if ((v2 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x400uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 15) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x800uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 16) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 17) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  char v10 = *((unsigned char *)a2 + 153);
  v3 |= 0x400000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 153) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x800000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 28) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 27) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_68;
  }
LABEL_67:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 29) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x200000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 26) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_70;
  }
LABEL_69:
  char v11 = *((unsigned char *)a2 + 155);
  v3 |= 0x1000000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 155) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_35:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_71;
  }
LABEL_70:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x100000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 25) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0) {
      goto LABEL_37;
    }
    goto LABEL_72;
  }
LABEL_71:
  int v12 = *((_DWORD *)a2 + 30);
  v3 |= 0x2000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 30) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x100) == 0) {
      goto LABEL_38;
    }
    goto LABEL_73;
  }
LABEL_72:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 14) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_38:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_74;
  }
LABEL_73:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 13) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_75;
  }
LABEL_74:
  char v13 = *((unsigned char *)a2 + 154);
  v3 |= 0x800000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 154) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_40:
    if ((v2 & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x40000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 23) = v4;
  if ((*(void *)((unsigned char *)a2 + 156) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_76:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *(void *)((char *)this + 156) = v3 | 8;
  *((_DWORD *)this + 8) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::FallDetectionDetector::operator=(CMMsl *a1, const CMMsl::FallDetectionDetector *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallDetectionDetector::FallDetectionDetector((CMMsl::FallDetectionDetector *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionDetector *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallDetectionDetector *a2, CMMsl::FallDetectionDetector *a3)
{
  uint64_t v3 = *(void *)((char *)this + 156);
  *(void *)((char *)this + 156) = *(void *)((char *)a2 + 156);
  *(void *)((char *)a2 + 156) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LOBYTE(v6) = *((unsigned char *)this + 152);
  *((unsigned char *)this + 152) = *((unsigned char *)a2 + 152);
  *((unsigned char *)a2 + 152) = v6;
  LODWORD(v6) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v6;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LOBYTE(v6) = *((unsigned char *)this + 153);
  *((unsigned char *)this + 153) = *((unsigned char *)a2 + 153);
  *((unsigned char *)a2 + 153) = v6;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LOBYTE(v6) = *((unsigned char *)this + 155);
  *((unsigned char *)this + 155) = *((unsigned char *)a2 + 155);
  *((unsigned char *)a2 + 155) = v6;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v6) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v6;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LOBYTE(v6) = *((unsigned char *)this + 154);
  *((unsigned char *)this + 154) = *((unsigned char *)a2 + 154);
  *((unsigned char *)a2 + 154) = v6;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  return result;
}

float CMMsl::FallDetectionDetector::FallDetectionDetector(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641678;
  *(void *)(a1 + 156) = *(void *)(a2 + 156);
  *(void *)(a2 + 156) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

CMMsl *CMMsl::FallDetectionDetector::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionDetector::FallDetectionDetector((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionDetector *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionDetector::formatText(CMMsl::FallDetectionDetector *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "abruptGravityChangeAngle", *((float *)this + 8));
    uint64_t v5 = *(void *)((char *)this + 156);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_44;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelPathLength", *((float *)this + 9));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "angleChangePostImpact", *((float *)this + 10));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "angleChangePreImpact", *((float *)this + 11));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "crown");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "crownVariance", *((float *)this + 13));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "gravityVariance", *((float *)this + 14));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 1));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "isFall");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "isNearFall");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "maxAbsX", *((float *)this + 15));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "maxAbsY", *((float *)this + 16));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "maxAbsZ", *((float *)this + 17));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 18));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "maxAngleChangePostImpact", *((float *)this + 19));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "maxAngleChangePreImpact", *((float *)this + 20));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "maxJerkVM", *((float *)this + 21));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "maxMinusMin", *((float *)this + 22));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "medianAbsGravityY", *((float *)this + 23));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "minInertialZ", *((float *)this + 24));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "minInertialZHighFreq", *((float *)this + 25));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "multiPeakAccelPathLengthWithPeak", *((float *)this + 26));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "multiPeakPathLengthDecorrelation", *((float *)this + 27));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "multiPeakPathLengthDelaySpread", *((float *)this + 28));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "multiPeakPathLengthHarmonicMean", *((float *)this + 29));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 2) == 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "operatingMode");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 2) == 0)
  {
LABEL_28:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "peakTimestamp");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "poseAtImpact", *((float *)this + 31));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v5 & 4) == 0) {
      goto LABEL_31;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "posteriorRatio", *((float *)this + 32));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 4) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "sensorTime");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "sumDeltaAngles", *((float *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "swingAngle", *((float *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "tiltAngle", *((float *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "timeto3rdZC", *((float *)this + 36));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "type");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "withinCyclingImpactThresholds");
  if ((*(void *)((unsigned char *)this + 156) & 0x1000000000) != 0) {
LABEL_38:
  }
    PB::TextFormatter::format(a2, "withinHardThresholds");
LABEL_39:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FallDetectionDetector::readFrom(CMMsl::FallDetectionDetector *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_196;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(void *)((char *)this + 156) |= 1uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_195;
      case 2u:
        *(void *)((char *)this + 156) |= 4uLL;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_205;
            }
            unint64_t v60 = v20++;
            char v61 = *(unsigned char *)(v21 + v60);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0) {
              break;
            }
            v58 += 7;
            BOOL v14 = v59++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_204:
              unint64_t v2 = v60 + 1;
              goto LABEL_205;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_204;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_205;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_205:
        *((void *)this + 3) = v24;
        break;
      case 3u:
        *(void *)((char *)this + 156) |= 2uLL;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_210;
            }
            unint64_t v64 = v26++;
            char v65 = *(unsigned char *)(v27 + v64);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0) {
              break;
            }
            v62 += 7;
            BOOL v14 = v63++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
LABEL_209:
              unint64_t v2 = v64 + 1;
              goto LABEL_210;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v30 = 0;
          }
          goto LABEL_209;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_210;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        uint64_t v30 = 0;
LABEL_210:
        *((void *)this + 2) = v30;
        break;
      case 4u:
        *(void *)((char *)this + 156) |= 0x40uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 5u:
        *(void *)((char *)this + 156) |= 0x20uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 6u:
        *(void *)((char *)this + 156) |= 0x20000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 7u:
        *(void *)((char *)this + 156) |= 0x2000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 8u:
        *(void *)((char *)this + 156) |= 0x10000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 9u:
        *(void *)((char *)this + 156) |= 0x80000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0xAu:
        *(void *)((char *)this + 156) |= 0x10uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0xBu:
        *(void *)((char *)this + 156) |= 0x8000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0xCu:
        *(void *)((char *)this + 156) |= 0x4000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0xDu:
        *(void *)((char *)this + 156) |= 0x4000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0xEu:
        *(void *)((char *)this + 156) |= 0x10000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0xFu:
        *(void *)((char *)this + 156) |= 0x40000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x10u:
        *(void *)((char *)this + 156) |= 0x20000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x11u:
        *(void *)((char *)this + 156) |= 0x80uLL;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_215;
            }
            unint64_t v68 = v32++;
            char v69 = *(unsigned char *)(v33 + v68);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0) {
              break;
            }
            v66 += 7;
            BOOL v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_214:
              unint64_t v2 = v68 + 1;
              goto LABEL_215;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_214;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_215;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_215:
        *((_DWORD *)this + 12) = v36;
        break;
      case 0x12u:
        *(void *)((char *)this + 156) |= 0x8000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x13u:
        *(void *)((char *)this + 156) |= 0x200000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v39 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v38 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v39 = v38 != 0;
        }
        *((unsigned char *)this + 152) = v39;
        break;
      case 0x14u:
        *(void *)((char *)this + 156) |= 0x100000000uLL;
        unint64_t v40 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v41 = *(void *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v44 = 0;
          if (v2 <= v40) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_220;
            }
            unint64_t v72 = v40++;
            char v73 = *(unsigned char *)(v41 + v72);
            *((void *)a2 + 1) = v40;
            v44 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0) {
              break;
            }
            v70 += 7;
            BOOL v14 = v71++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_219:
              unint64_t v2 = v72 + 1;
              goto LABEL_220;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v44) = 0;
          }
          goto LABEL_219;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        do
        {
          unint64_t v2 = v40 + 1;
          *((void *)a2 + 1) = v40 + 1;
          char v45 = *(unsigned char *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0) {
            goto LABEL_220;
          }
          v42 += 7;
          unint64_t v40 = v2;
          BOOL v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_220:
        *((_DWORD *)this + 37) = v44;
        break;
      case 0x15u:
        *(void *)((char *)this + 156) |= 0x80000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x16u:
        *(void *)((char *)this + 156) |= 0x400uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x17u:
        *(void *)((char *)this + 156) |= 0x800uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x18u:
        *(void *)((char *)this + 156) |= 0x1000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x19u:
        *(void *)((char *)this + 156) |= 0x400000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v47 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v46 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v47 = v46 != 0;
        }
        *((unsigned char *)this + 153) = v47;
        break;
      case 0x1Au:
        *(void *)((char *)this + 156) |= 0x800000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x1Bu:
        *(void *)((char *)this + 156) |= 0x400000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x1Cu:
        *(void *)((char *)this + 156) |= 0x1000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x1Du:
        *(void *)((char *)this + 156) |= 0x200000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x1Eu:
        *(void *)((char *)this + 156) |= 0x1000000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v49 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v48 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v49 = v48 != 0;
        }
        *((unsigned char *)this + 155) = v49;
        break;
      case 0x1Fu:
        *(void *)((char *)this + 156) |= 0x100000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x20u:
        *(void *)((char *)this + 156) |= 0x2000000uLL;
        unint64_t v50 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v51 = *(void *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v54 = 0;
          if (v2 <= v50) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v50)
            {
              LODWORD(v54) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_225;
            }
            unint64_t v76 = v50++;
            char v77 = *(unsigned char *)(v51 + v76);
            *((void *)a2 + 1) = v50;
            v54 |= (unint64_t)(v77 & 0x7F) << v74;
            if ((v77 & 0x80) == 0) {
              break;
            }
            v74 += 7;
            BOOL v14 = v75++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_224:
              unint64_t v2 = v76 + 1;
              goto LABEL_225;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v54) = 0;
          }
          goto LABEL_224;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        do
        {
          unint64_t v2 = v50 + 1;
          *((void *)a2 + 1) = v50 + 1;
          char v55 = *(unsigned char *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0) {
            goto LABEL_225;
          }
          v52 += 7;
          unint64_t v50 = v2;
          BOOL v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_225:
        *((_DWORD *)this + 30) = v54;
        break;
      case 0x21u:
        *(void *)((char *)this + 156) |= 0x200uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x22u:
        *(void *)((char *)this + 156) |= 0x100uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x23u:
        *(void *)((char *)this + 156) |= 0x800000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v57 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v56 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v57 = v56 != 0;
        }
        *((unsigned char *)this + 154) = v57;
        break;
      case 0x24u:
        *(void *)((char *)this + 156) |= 0x40000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_149;
        }
        *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_194;
      case 0x25u:
        *(void *)((char *)this + 156) |= 8uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_194:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_195:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_149:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_196:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionDetector::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 156);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    uint64_t v4 = *(void *)(v3 + 156);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_41;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_23:
    if ((v4 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0) {
      goto LABEL_34;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x100) == 0) {
      goto LABEL_35;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_37;
    }
LABEL_74:
    this = PB::Writer::write(a2, *(float *)(v3 + 92));
    if ((*(void *)(v3 + 156) & 8) == 0) {
      return this;
    }
    goto LABEL_75;
  }
LABEL_73:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000) != 0) {
    goto LABEL_74;
  }
LABEL_37:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_75:
  float v5 = *(float *)(v3 + 32);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::FallDetectionDetector::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 156);
  uint64_t v3 = *(void *)(a2 + 156);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 152) != *(unsigned __int8 *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 155) != *(unsigned __int8 *)(a2 + 155)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 154) != *(unsigned __int8 *)(a2 + 154)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(void *)(a2 + 156) & 8) == 0;
  if ((v2 & 8) != 0) {
    return (v3 & 8) != 0 && *(float *)(a1 + 32) == *(float *)(a2 + 32);
  }
  return v4;
}

uint64_t CMMsl::FallDetectionDetector::hash_value(CMMsl::FallDetectionDetector *this)
{
  uint64_t v1 = *(void *)((char *)this + 156);
  if (v1)
  {
    if (*((double *)this + 1) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 1);
    }
    if ((v1 & 4) != 0)
    {
LABEL_3:
      uint64_t v74 = *((void *)this + 3);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_110;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v74 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    uint64_t v73 = *((void *)this + 2);
    if ((v1 & 0x40) != 0) {
      goto LABEL_5;
    }
LABEL_111:
    uint64_t v72 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_8;
    }
LABEL_112:
    uint64_t v71 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_11;
    }
LABEL_113:
    uint64_t v70 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_14;
    }
LABEL_114:
    uint64_t v69 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_17;
    }
LABEL_115:
    uint64_t v68 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_20;
    }
LABEL_116:
    uint64_t v67 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_23;
    }
LABEL_117:
    uint64_t v66 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_26;
    }
LABEL_118:
    uint64_t v65 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_29;
    }
LABEL_119:
    uint64_t v20 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_33;
    }
LABEL_120:
    uint64_t v22 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_37;
    }
LABEL_121:
    uint64_t v24 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_41;
    }
LABEL_122:
    uint64_t v26 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_45;
    }
LABEL_123:
    uint64_t v28 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_49;
    }
    goto LABEL_124;
  }
LABEL_110:
  uint64_t v73 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_111;
  }
LABEL_5:
  float v3 = *((float *)this + 11);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v72 = v4;
  if ((v1 & 0x20) == 0) {
    goto LABEL_112;
  }
LABEL_8:
  float v5 = *((float *)this + 10);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v71 = v6;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_113;
  }
LABEL_11:
  float v7 = *((float *)this + 22);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v70 = v8;
  if ((v1 & 0x2000) == 0) {
    goto LABEL_114;
  }
LABEL_14:
  float v9 = *((float *)this + 18);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v69 = v10;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_115;
  }
LABEL_17:
  float v11 = *((float *)this + 21);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v68 = v12;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_116;
  }
LABEL_20:
  float v13 = *((float *)this + 24);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v67 = v14;
  if ((v1 & 0x10) == 0) {
    goto LABEL_117;
  }
LABEL_23:
  float v15 = *((float *)this + 9);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v66 = v16;
  if ((v1 & 0x8000) == 0) {
    goto LABEL_118;
  }
LABEL_26:
  float v17 = *((float *)this + 20);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  uint64_t v65 = v18;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_119;
  }
LABEL_29:
  float v19 = *((float *)this + 19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = LODWORD(v19);
  }
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_120;
  }
LABEL_33:
  float v21 = *((float *)this + 31);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = LODWORD(v21);
  }
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_121;
  }
LABEL_37:
  float v23 = *((float *)this + 33);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = LODWORD(v23);
  }
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_122;
  }
LABEL_41:
  float v25 = *((float *)this + 35);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = LODWORD(v25);
  }
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_123;
  }
LABEL_45:
  float v27 = *((float *)this + 34);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = LODWORD(v27);
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_49:
    uint64_t v29 = *((int *)this + 12);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_50;
    }
LABEL_125:
    uint64_t v31 = 0;
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_54;
    }
    goto LABEL_126;
  }
LABEL_124:
  uint64_t v29 = 0;
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_125;
  }
LABEL_50:
  float v30 = *((float *)this + 32);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = LODWORD(v30);
  }
  if ((v1 & 0x200000000) != 0)
  {
LABEL_54:
    uint64_t v32 = *((unsigned __int8 *)this + 152);
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_55;
    }
    goto LABEL_127;
  }
LABEL_126:
  uint64_t v32 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_55:
    uint64_t v33 = *((int *)this + 37);
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_56;
    }
LABEL_128:
    uint64_t v35 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_60;
    }
LABEL_129:
    uint64_t v37 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_64;
    }
LABEL_130:
    uint64_t v39 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_68;
    }
LABEL_131:
    uint64_t v41 = 0;
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_72;
    }
    goto LABEL_132;
  }
LABEL_127:
  uint64_t v33 = 0;
  if ((v1 & 0x80000000) == 0) {
    goto LABEL_128;
  }
LABEL_56:
  float v34 = *((float *)this + 36);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = LODWORD(v34);
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_129;
  }
LABEL_60:
  float v36 = *((float *)this + 15);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = LODWORD(v36);
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_130;
  }
LABEL_64:
  float v38 = *((float *)this + 16);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = LODWORD(v38);
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_131;
  }
LABEL_68:
  float v40 = *((float *)this + 17);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = LODWORD(v40);
  }
  if ((v1 & 0x400000000) != 0)
  {
LABEL_72:
    uint64_t v42 = *((unsigned __int8 *)this + 153);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_73;
    }
LABEL_133:
    uint64_t v44 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_77;
    }
LABEL_134:
    uint64_t v46 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_81;
    }
LABEL_135:
    uint64_t v48 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_84;
    }
LABEL_136:
    uint64_t v50 = 0;
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_87;
    }
    goto LABEL_137;
  }
LABEL_132:
  uint64_t v42 = 0;
  if ((v1 & 0x800000) == 0) {
    goto LABEL_133;
  }
LABEL_73:
  float v43 = *((float *)this + 28);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = LODWORD(v43);
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_134;
  }
LABEL_77:
  float v45 = *((float *)this + 27);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  else {
    uint64_t v46 = LODWORD(v45);
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_135;
  }
LABEL_81:
  float v47 = *((float *)this + 29);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_136;
  }
LABEL_84:
  float v49 = *((float *)this + 26);
  uint64_t v50 = LODWORD(v49);
  if (v49 == 0.0) {
    uint64_t v50 = 0;
  }
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_87:
    uint64_t v51 = *((unsigned __int8 *)this + 155);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_88;
    }
LABEL_138:
    uint64_t v53 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_91;
    }
    goto LABEL_139;
  }
LABEL_137:
  uint64_t v51 = 0;
  if ((v1 & 0x100000) == 0) {
    goto LABEL_138;
  }
LABEL_88:
  float v52 = *((float *)this + 25);
  uint64_t v53 = LODWORD(v52);
  if (v52 == 0.0) {
    uint64_t v53 = 0;
  }
  if ((v1 & 0x2000000) != 0)
  {
LABEL_91:
    uint64_t v54 = *((unsigned int *)this + 30);
    if ((v1 & 0x200) != 0) {
      goto LABEL_92;
    }
LABEL_140:
    uint64_t v56 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_95;
    }
LABEL_141:
    uint64_t v58 = 0;
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_98;
    }
    goto LABEL_142;
  }
LABEL_139:
  uint64_t v54 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_140;
  }
LABEL_92:
  float v55 = *((float *)this + 14);
  uint64_t v56 = LODWORD(v55);
  if (v55 == 0.0) {
    uint64_t v56 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_141;
  }
LABEL_95:
  float v57 = *((float *)this + 13);
  uint64_t v58 = LODWORD(v57);
  if (v57 == 0.0) {
    uint64_t v58 = 0;
  }
  if ((v1 & 0x800000000) != 0)
  {
LABEL_98:
    uint64_t v59 = *((unsigned __int8 *)this + 154);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_99;
    }
    goto LABEL_143;
  }
LABEL_142:
  uint64_t v59 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_99:
    float v60 = *((float *)this + 23);
    uint64_t v61 = LODWORD(v60);
    if (v60 == 0.0) {
      uint64_t v61 = 0;
    }
    if ((v1 & 8) != 0) {
      goto LABEL_102;
    }
LABEL_144:
    uint64_t v63 = 0;
    return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v31 ^ v32 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v51 ^ v53 ^ v54 ^ v56 ^ v58 ^ v59 ^ v61 ^ v63;
  }
LABEL_143:
  uint64_t v61 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_144;
  }
LABEL_102:
  float v62 = *((float *)this + 8);
  uint64_t v63 = LODWORD(v62);
  if (v62 == 0.0) {
    uint64_t v63 = 0;
  }
  return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v31 ^ v32 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v51 ^ v53 ^ v54 ^ v56 ^ v58 ^ v59 ^ v61 ^ v63;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay(uint64_t this)
{
  *(void *)this = &unk_2706416B0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_2706416B0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::FallDetectionGyroControllerReplay::~FallDetectionGyroControllerReplay(CMMsl::FallDetectionGyroControllerReplay *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay(uint64_t this, const CMMsl::FallDetectionGyroControllerReplay *a2)
{
  *(void *)this = &unk_2706416B0;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::operator=(uint64_t a1, const CMMsl::FallDetectionGyroControllerReplay *a2)
{
  if ((const CMMsl::FallDetectionGyroControllerReplay *)a1 != a2)
  {
    CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FallDetectionGyroControllerReplay *a2, CMMsl::FallDetectionGyroControllerReplay *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_2706416B0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = &unk_2706416B0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[0] = &unk_2706416B0;
    v9[1] = v7;
    LOBYTE(v7) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::formatText(CMMsl::FallDetectionGyroControllerReplay *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "gyroOn");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::readFrom(CMMsl::FallDetectionGyroControllerReplay *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 16) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              uint64_t v23 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_48;
            }
            unint64_t v30 = v19++;
            char v31 = *(unsigned char *)(v20 + v30);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_47;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v23 = 0;
          }
LABEL_47:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              break;
            }
          }
        }
LABEL_48:
        *((void *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::FallDetectionGyroControllerReplay::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::hash_value(CMMsl::FallDetectionGyroControllerReplay *this)
{
  if (*((unsigned char *)this + 20))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ v1;
}

uint64_t CMMsl::FallDetectionReferee::FallDetectionReferee(uint64_t this)
{
  *(void *)this = &unk_2706416E8;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = &unk_2706416E8;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::FallDetectionReferee::~FallDetectionReferee(CMMsl::FallDetectionReferee *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::FallDetectionReferee::FallDetectionReferee(uint64_t this, const CMMsl::FallDetectionReferee *a2)
{
  *(void *)this = &unk_2706416E8;
  *(_DWORD *)(this + 52) = 0;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    __int16 v3 = 2;
    *(_WORD *)(this + 52) = 2;
    *(void *)(this + 16) = v4;
    __int16 v2 = *((_WORD *)a2 + 26);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 52) = v3;
    *(void *)(this + 24) = v5;
    __int16 v2 = *((_WORD *)a2 + 26);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *((void *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 52) = v3;
    *(void *)(this + 8) = v6;
    __int16 v2 = *((_WORD *)a2 + 26);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_WORD *)(this + 52) = v3;
  *(_DWORD *)(this + 32) = v7;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *(_WORD *)(this + 52) = v3;
  *(_DWORD *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_WORD *)(this + 52) = v3;
  *(_DWORD *)(this + 36) = v9;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  char v10 = *((unsigned char *)a2 + 50);
  v3 |= 0x1000u;
  *(_WORD *)(this + 52) = v3;
  *(unsigned char *)(this + 50) = v10;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  char v11 = *((unsigned char *)a2 + 44);
  v3 |= 0x40u;
  *(_WORD *)(this + 52) = v3;
  *(unsigned char *)(this + 44) = v11;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  char v12 = *((unsigned char *)a2 + 45);
  v3 |= 0x80u;
  *(_WORD *)(this + 52) = v3;
  *(unsigned char *)(this + 45) = v12;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  char v13 = *((unsigned char *)a2 + 46);
  v3 |= 0x100u;
  *(_WORD *)(this + 52) = v3;
  *(unsigned char *)(this + 46) = v13;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v14 = *((unsigned char *)a2 + 47);
  v3 |= 0x200u;
  *(_WORD *)(this + 52) = v3;
  *(unsigned char *)(this + 47) = v14;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0) {
      return this;
    }
LABEL_28:
    char v16 = *((unsigned char *)a2 + 49);
    *(_WORD *)(this + 52) = v3 | 0x800;
    *(unsigned char *)(this + 49) = v16;
    return this;
  }
LABEL_27:
  char v15 = *((unsigned char *)a2 + 48);
  v3 |= 0x400u;
  *(_WORD *)(this + 52) = v3;
  *(unsigned char *)(this + 48) = v15;
  if ((*((_WORD *)a2 + 26) & 0x800) != 0) {
    goto LABEL_28;
  }
  return this;
}

CMMsl *CMMsl::FallDetectionReferee::operator=(CMMsl *a1, const CMMsl::FallDetectionReferee *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallDetectionReferee::FallDetectionReferee((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReferee *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionReferee *a2, CMMsl::FallDetectionReferee *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 50);
  *((unsigned char *)this + 50) = *((unsigned char *)a2 + 50);
  *((unsigned char *)a2 + 50) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 45);
  *((unsigned char *)this + 45) = *((unsigned char *)a2 + 45);
  *((unsigned char *)a2 + 45) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 46);
  *((unsigned char *)this + 46) = *((unsigned char *)a2 + 46);
  *((unsigned char *)a2 + 46) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 47);
  *((unsigned char *)this + 47) = *((unsigned char *)a2 + 47);
  *((unsigned char *)a2 + 47) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 48);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *((unsigned char *)a2 + 48) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 49);
  *((unsigned char *)this + 49) = *((unsigned char *)a2 + 49);
  *((unsigned char *)a2 + 49) = v6;
  return result;
}

double CMMsl::FallDetectionReferee::FallDetectionReferee(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706416E8;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 46);
  *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 47);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  return result;
}

CMMsl *CMMsl::FallDetectionReferee::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionReferee::FallDetectionReferee((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReferee *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionReferee::formatText(CMMsl::FallDetectionReferee *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "consideredAlert");
    __int16 v5 = *((_WORD *)this + 26);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "consideredRecovery");
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "consideredSOS");
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "droppedAlert");
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "droppedRecovery");
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "droppedSOS");
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "fallTime");
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "impactOperatingMode");
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x1000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isOtherStateMachineProcessingNearbyImpact");
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x10) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "refereeCyclingStateDecision");
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "refereeOperatingMode");
  if ((*((_WORD *)this + 26) & 4) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "sensorTime");
LABEL_15:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FallDetectionReferee::readFrom(CMMsl::FallDetectionReferee *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 26) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((_WORD *)this + 26) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_134;
            }
            unint64_t v67 = v21++;
            char v68 = *(unsigned char *)(v22 + v67);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0) {
              break;
            }
            v65 += 7;
            BOOL v14 = v66++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
LABEL_133:
              unint64_t v2 = v67 + 1;
              goto LABEL_134;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
          goto LABEL_133;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_134;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        uint64_t v25 = 0;
LABEL_134:
        *((void *)this + 3) = v25;
        break;
      case 3u:
        *((_WORD *)this + 26) |= 1u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              uint64_t v31 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_139;
            }
            unint64_t v71 = v27++;
            char v72 = *(unsigned char *)(v28 + v71);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v72 & 0x7F) << v69;
            if ((v72 & 0x80) == 0) {
              break;
            }
            v69 += 7;
            BOOL v14 = v70++ > 8;
            if (v14)
            {
              uint64_t v31 = 0;
LABEL_138:
              unint64_t v2 = v71 + 1;
              goto LABEL_139;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v31 = 0;
          }
          goto LABEL_138;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_139;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        uint64_t v31 = 0;
LABEL_139:
        *((void *)this + 1) = v31;
        break;
      case 4u:
        *((_WORD *)this + 26) |= 8u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v73 = 0;
          unsigned int v74 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_144;
            }
            unint64_t v75 = v33++;
            char v76 = *(unsigned char *)(v34 + v75);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v76 & 0x7F) << v73;
            if ((v76 & 0x80) == 0) {
              break;
            }
            v73 += 7;
            BOOL v14 = v74++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_143:
              unint64_t v2 = v75 + 1;
              goto LABEL_144;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
          goto LABEL_143;
        }
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        do
        {
          unint64_t v2 = v33 + 1;
          *((void *)a2 + 1) = v33 + 1;
          char v38 = *(unsigned char *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0) {
            goto LABEL_144;
          }
          v35 += 7;
          unint64_t v33 = v2;
          BOOL v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_144:
        *((_DWORD *)this + 8) = v37;
        break;
      case 5u:
        *((_WORD *)this + 26) |= 0x20u;
        unint64_t v39 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v40 = *(void *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          char v77 = 0;
          unsigned int v78 = 0;
          uint64_t v43 = 0;
          if (v2 <= v39) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_149;
            }
            unint64_t v79 = v39++;
            char v80 = *(unsigned char *)(v40 + v79);
            *((void *)a2 + 1) = v39;
            v43 |= (unint64_t)(v80 & 0x7F) << v77;
            if ((v80 & 0x80) == 0) {
              break;
            }
            v77 += 7;
            BOOL v14 = v78++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_148:
              unint64_t v2 = v79 + 1;
              goto LABEL_149;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v43) = 0;
          }
          goto LABEL_148;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        do
        {
          unint64_t v2 = v39 + 1;
          *((void *)a2 + 1) = v39 + 1;
          char v44 = *(unsigned char *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0) {
            goto LABEL_149;
          }
          v41 += 7;
          unint64_t v39 = v2;
          BOOL v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_149:
        *((_DWORD *)this + 10) = v43;
        break;
      case 6u:
        *((_WORD *)this + 26) |= 0x10u;
        unint64_t v45 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v46 = *(void *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          char v81 = 0;
          unsigned int v82 = 0;
          uint64_t v49 = 0;
          if (v2 <= v45) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_154;
            }
            unint64_t v83 = v45++;
            char v84 = *(unsigned char *)(v46 + v83);
            *((void *)a2 + 1) = v45;
            v49 |= (unint64_t)(v84 & 0x7F) << v81;
            if ((v84 & 0x80) == 0) {
              break;
            }
            v81 += 7;
            BOOL v14 = v82++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_153:
              unint64_t v2 = v83 + 1;
              goto LABEL_154;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v49) = 0;
          }
          goto LABEL_153;
        }
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        do
        {
          unint64_t v2 = v45 + 1;
          *((void *)a2 + 1) = v45 + 1;
          char v50 = *(unsigned char *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0) {
            goto LABEL_154;
          }
          v47 += 7;
          unint64_t v45 = v2;
          BOOL v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_154:
        *((_DWORD *)this + 9) = v49;
        break;
      case 7u:
        *((_WORD *)this + 26) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v52 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v51 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v52 = v51 != 0;
        }
        *((unsigned char *)this + 50) = v52;
        break;
      case 0xBu:
        *((_WORD *)this + 26) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v54 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v53 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v54 = v53 != 0;
        }
        *((unsigned char *)this + 44) = v54;
        break;
      case 0xCu:
        *((_WORD *)this + 26) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v56 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v55 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v56 = v55 != 0;
        }
        *((unsigned char *)this + 45) = v56;
        break;
      case 0xDu:
        *((_WORD *)this + 26) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v58 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v57 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v58 = v57 != 0;
        }
        *((unsigned char *)this + 46) = v58;
        break;
      case 0x15u:
        *((_WORD *)this + 26) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v60 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v59 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v60 = v59 != 0;
        }
        *((unsigned char *)this + 47) = v60;
        break;
      case 0x16u:
        *((_WORD *)this + 26) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v62 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v61 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v62 = v61 != 0;
        }
        *((unsigned char *)this + 48) = v62;
        break;
      case 0x17u:
        *((_WORD *)this + 26) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v64 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v63 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v64 = v63 != 0;
        }
        *((unsigned char *)this + 49) = v64;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionReferee::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 52);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = PB::Writer::write(a2);
    if ((*(_WORD *)(v3 + 52) & 0x800) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x800) == 0) {
    return this;
  }
LABEL_27:
  return PB::Writer::write(a2);
}

BOOL CMMsl::FallDetectionReferee::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 52);
  __int16 v3 = *(_WORD *)(a2 + 52);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 50) != *(unsigned __int8 *)(a2 + 50)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 46) != *(unsigned __int8 *)(a2 + 46)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 47) != *(unsigned __int8 *)(a2 + 47)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x400) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 52) & 0x800) != 0) {
    return (*(_WORD *)(a2 + 52) & 0x800) != 0 && *(unsigned __int8 *)(a1 + 49) == *(unsigned __int8 *)(a2 + 49);
  }
  return v4;
}

uint64_t CMMsl::FallDetectionReferee::hash_value(CMMsl::FallDetectionReferee *this)
{
  __int16 v1 = *((_WORD *)this + 26);
  if ((v1 & 2) != 0)
  {
    double v2 = *((double *)this + 2);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 4) != 0)
    {
LABEL_3:
      uint64_t v3 = *((void *)this + 3);
      if (v1) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if (v1)
  {
LABEL_4:
    uint64_t v4 = *((void *)this + 1);
    if ((v1 & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v4 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *((int *)this + 8);
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v5 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_6:
    uint64_t v6 = *((int *)this + 10);
    if ((v1 & 0x10) != 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v6 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_7:
    uint64_t v7 = *((int *)this + 9);
    if ((*((_WORD *)this + 26) & 0x1000) != 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 26) & 0x1000) != 0)
  {
LABEL_8:
    uint64_t v8 = *((unsigned __int8 *)this + 50);
    if ((v1 & 0x40) != 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v8 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_9:
    uint64_t v9 = *((unsigned __int8 *)this + 44);
    if ((v1 & 0x80) != 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v9 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_10:
    uint64_t v10 = *((unsigned __int8 *)this + 45);
    if ((*((_WORD *)this + 26) & 0x100) != 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
  if ((*((_WORD *)this + 26) & 0x100) != 0)
  {
LABEL_11:
    uint64_t v11 = *((unsigned __int8 *)this + 46);
    if ((*((_WORD *)this + 26) & 0x200) != 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v11 = 0;
  if ((*((_WORD *)this + 26) & 0x200) != 0)
  {
LABEL_12:
    uint64_t v12 = *((unsigned __int8 *)this + 47);
    if ((*((_WORD *)this + 26) & 0x400) != 0) {
      goto LABEL_13;
    }
LABEL_28:
    uint64_t v13 = 0;
    if ((*((_WORD *)this + 26) & 0x800) != 0) {
      goto LABEL_14;
    }
LABEL_29:
    uint64_t v14 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14;
  }
LABEL_27:
  uint64_t v12 = 0;
  if ((*((_WORD *)this + 26) & 0x400) == 0) {
    goto LABEL_28;
  }
LABEL_13:
  uint64_t v13 = *((unsigned __int8 *)this + 48);
  if ((*((_WORD *)this + 26) & 0x800) == 0) {
    goto LABEL_29;
  }
LABEL_14:
  uint64_t v14 = *((unsigned __int8 *)this + 49);
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14;
}

void *CMMsl::FallDetectionReplay::FallDetectionReplay(void *this)
{
  *this = &unk_270641720;
  *(void *)((char *)this + 364) = 0;
  return this;
}

{
  *this = &unk_270641720;
  *(void *)((char *)this + 364) = 0;
  return this;
}

void CMMsl::FallDetectionReplay::~FallDetectionReplay(CMMsl::FallDetectionReplay *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::FallDetectionReplay::FallDetectionReplay(CMMsl::FallDetectionReplay *this, const CMMsl::FallDetectionReplay *a2)
{
  *(void *)this = &unk_270641720;
  double v2 = (uint64_t *)((char *)this + 364);
  *(void *)((char *)this + 364) = 0;
  uint64_t v3 = (uint64_t *)((char *)a2 + 364);
  uint64_t v4 = *(void *)((char *)a2 + 364);
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v6 = *((void *)a2 + 31);
    uint64_t v5 = 0x40000000;
    *double v2 = 0x40000000;
    *((void *)this + 31) = v6;
    uint64_t v4 = *v3;
    if ((*v3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  if ((v4 & 0x80000000) != 0)
  {
LABEL_5:
    uint64_t v7 = *((void *)a2 + 32);
    v5 |= 0x80000000uLL;
    *double v2 = v5;
    *((void *)this + 32) = v7;
    uint64_t v4 = *v3;
  }
LABEL_6:
  if ((v4 & 0x80000) != 0)
  {
    uint64_t v8 = *((void *)a2 + 20);
    v5 |= 0x80000uLL;
    *double v2 = v5;
    *((void *)this + 20) = v8;
    uint64_t v4 = *v3;
    if ((*v3 & 0x100000) == 0)
    {
LABEL_8:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_52;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v9 = *((void *)a2 + 21);
  v5 |= 0x100000uLL;
  *double v2 = v5;
  *((void *)this + 21) = v9;
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v10 = *((void *)a2 + 22);
  v5 |= 0x200000uLL;
  *double v2 = v5;
  *((void *)this + 22) = v10;
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v11 = *((void *)a2 + 40);
  v5 |= 0x8000000000uLL;
  *double v2 = v5;
  *((void *)this + 40) = v11;
  uint64_t v4 = *v3;
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v12 = *((void *)a2 + 43);
  v5 |= 0x40000000000uLL;
  *double v2 = v5;
  *((void *)this + 43) = v12;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v13 = *((void *)a2 + 41);
  v5 |= 0x10000000000uLL;
  *double v2 = v5;
  *((void *)this + 41) = v13;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v14 = *((void *)a2 + 42);
  v5 |= 0x20000000000uLL;
  *double v2 = v5;
  *((void *)this + 42) = v14;
  uint64_t v4 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v15 = *((void *)a2 + 44);
  v5 |= 0x80000000000uLL;
  *double v2 = v5;
  *((void *)this + 44) = v15;
  uint64_t v4 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v16 = *((_DWORD *)a2 + 90);
  v5 |= 0x100000000000uLL;
  *double v2 = v5;
  *((_DWORD *)this + 90) = v16;
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v17 = *((void *)a2 + 25);
  v5 |= 0x1000000uLL;
  *double v2 = v5;
  *((void *)this + 25) = v17;
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t v18 = *((void *)a2 + 28);
  v5 |= 0x8000000uLL;
  *double v2 = v5;
  *((void *)this + 28) = v18;
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v19 = *((void *)a2 + 26);
  v5 |= 0x2000000uLL;
  *double v2 = v5;
  *((void *)this + 26) = v19;
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v20 = *((void *)a2 + 27);
  v5 |= 0x4000000uLL;
  *double v2 = v5;
  *((void *)this + 27) = v20;
  uint64_t v4 = *v3;
  if ((*v3 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t v21 = *((void *)a2 + 23);
  v5 |= 0x400000uLL;
  *double v2 = v5;
  *((void *)this + 23) = v21;
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v22 = *((void *)a2 + 24);
  v5 |= 0x800000uLL;
  *double v2 = v5;
  *((void *)this + 24) = v22;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v23 = *((void *)a2 + 6);
  v5 |= 0x20uLL;
  *double v2 = v5;
  *((void *)this + 6) = v23;
  uint64_t v4 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v24 = *((void *)a2 + 4);
  v5 |= 8uLL;
  *double v2 = v5;
  *((void *)this + 4) = v24;
  uint64_t v4 = *v3;
  if ((*v3 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v25 = *((void *)a2 + 1);
  v5 |= 1uLL;
  *double v2 = v5;
  *((void *)this + 1) = v25;
  uint64_t v4 = *v3;
  if ((*v3 & 0x40) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v26 = *((void *)a2 + 7);
  v5 |= 0x40uLL;
  *double v2 = v5;
  *((void *)this + 7) = v26;
  uint64_t v4 = *v3;
  if ((*v3 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v27 = *((void *)a2 + 9);
  v5 |= 0x100uLL;
  *double v2 = v5;
  *((void *)this + 9) = v27;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x200) == 0) {
      goto LABEL_28;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t v28 = *((void *)a2 + 5);
  v5 |= 0x10uLL;
  *double v2 = v5;
  *((void *)this + 5) = v28;
  uint64_t v4 = *v3;
  if ((*v3 & 0x200) == 0)
  {
LABEL_28:
    if ((v4 & 0x400) == 0) {
      goto LABEL_29;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v29 = *((void *)a2 + 10);
  v5 |= 0x200uLL;
  *double v2 = v5;
  *((void *)this + 10) = v29;
  uint64_t v4 = *v3;
  if ((*v3 & 0x400) == 0)
  {
LABEL_29:
    if ((v4 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v30 = *((void *)a2 + 11);
  v5 |= 0x400uLL;
  *double v2 = v5;
  *((void *)this + 11) = v30;
  uint64_t v4 = *v3;
  if ((*v3 & 0x800) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v31 = *((void *)a2 + 12);
  v5 |= 0x800uLL;
  *double v2 = v5;
  *((void *)this + 12) = v31;
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 2) == 0) {
      goto LABEL_32;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t v32 = *((void *)a2 + 15);
  v5 |= 0x4000uLL;
  *double v2 = v5;
  *((void *)this + 15) = v32;
  uint64_t v4 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t v33 = *((void *)a2 + 2);
  v5 |= 2uLL;
  *double v2 = v5;
  *((void *)this + 2) = v33;
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v34 = *((void *)a2 + 16);
  v5 |= 0x8000uLL;
  *double v2 = v5;
  *((void *)this + 16) = v34;
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t v35 = *((void *)a2 + 36);
  v5 |= 0x800000000uLL;
  *double v2 = v5;
  *((void *)this + 36) = v35;
  uint64_t v4 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t v36 = *((void *)a2 + 35);
  v5 |= 0x400000000uLL;
  *double v2 = v5;
  *((void *)this + 35) = v36;
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t v37 = *((void *)a2 + 34);
  v5 |= 0x200000000uLL;
  *double v2 = v5;
  *((void *)this + 34) = v37;
  uint64_t v4 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v38 = *((void *)a2 + 33);
  v5 |= 0x100000000uLL;
  *double v2 = v5;
  *((void *)this + 33) = v38;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v39 = *((void *)a2 + 30);
  v5 |= 0x20000000uLL;
  *double v2 = v5;
  *((void *)this + 30) = v39;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v40 = *((void *)a2 + 29);
  v5 |= 0x10000000uLL;
  *double v2 = v5;
  *((void *)this + 29) = v40;
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v41 = *((void *)a2 + 14);
  v5 |= 0x2000uLL;
  *double v2 = v5;
  *((void *)this + 14) = v41;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000) == 0)
  {
LABEL_41:
    if ((v4 & 4) == 0) {
      goto LABEL_42;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t v42 = *((void *)a2 + 17);
  v5 |= 0x10000uLL;
  *double v2 = v5;
  *((void *)this + 17) = v42;
  uint64_t v4 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_42:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t v43 = *((void *)a2 + 3);
  v5 |= 4uLL;
  *double v2 = v5;
  *((void *)this + 3) = v43;
  uint64_t v4 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v44 = *((void *)a2 + 19);
  v5 |= 0x40000uLL;
  *double v2 = v5;
  *((void *)this + 19) = v44;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80) == 0) {
      goto LABEL_45;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t v45 = *((void *)a2 + 18);
  v5 |= 0x20000uLL;
  *double v2 = v5;
  *((void *)this + 18) = v45;
  uint64_t v4 = *v3;
  if ((*v3 & 0x80) == 0)
  {
LABEL_45:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t v46 = *((void *)a2 + 8);
  v5 |= 0x80uLL;
  *double v2 = v5;
  *((void *)this + 8) = v46;
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000) == 0)
  {
LABEL_46:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v47 = *((void *)a2 + 13);
  v5 |= 0x1000uLL;
  *double v2 = v5;
  *((void *)this + 13) = v47;
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v48 = *((void *)a2 + 39);
  v5 |= 0x4000000000uLL;
  *double v2 = v5;
  *((void *)this + 39) = v48;
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x2000000000) == 0) {
      return result;
    }
LABEL_92:
    double result = *((double *)a2 + 38);
    *double v2 = v5 | 0x2000000000;
    *((double *)this + 38) = result;
    return result;
  }
LABEL_91:
  uint64_t v49 = *((void *)a2 + 37);
  v5 |= 0x1000000000uLL;
  *double v2 = v5;
  *((void *)this + 37) = v49;
  if ((*v3 & 0x2000000000) != 0) {
    goto LABEL_92;
  }
  return result;
}

CMMsl *CMMsl::FallDetectionReplay::operator=(CMMsl *a1, const CMMsl::FallDetectionReplay *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallDetectionReplay::FallDetectionReplay((CMMsl::FallDetectionReplay *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReplay *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionReplay *a2, CMMsl::FallDetectionReplay *a3)
{
  uint64_t v3 = *(void *)((char *)this + 364);
  *(void *)((char *)this + 364) = *(void *)((char *)a2 + 364);
  *(void *)((char *)a2 + 364) = v3;
  uint64_t v4 = *((void *)this + 31);
  *((void *)this + 31) = *((void *)a2 + 31);
  *((void *)a2 + 31) = v4;
  uint64_t v5 = *((void *)this + 32);
  *((void *)this + 32) = *((void *)a2 + 32);
  *((void *)a2 + 32) = v5;
  uint64_t v6 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v6;
  uint64_t v7 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v7;
  uint64_t v8 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v8;
  uint64_t v9 = *((void *)this + 40);
  *((void *)this + 40) = *((void *)a2 + 40);
  *((void *)a2 + 40) = v9;
  uint64_t v10 = *((void *)this + 43);
  *((void *)this + 43) = *((void *)a2 + 43);
  *((void *)a2 + 43) = v10;
  uint64_t v11 = *((void *)this + 41);
  *((void *)this + 41) = *((void *)a2 + 41);
  *((void *)a2 + 41) = v11;
  uint64_t v12 = *((void *)this + 42);
  *((void *)this + 42) = *((void *)a2 + 42);
  *((void *)a2 + 42) = v12;
  uint64_t v13 = *((void *)this + 44);
  *((void *)this + 44) = *((void *)a2 + 44);
  *((void *)a2 + 44) = v13;
  LODWORD(v13) = *((_DWORD *)this + 90);
  *((_DWORD *)this + 90) = *((_DWORD *)a2 + 90);
  *((_DWORD *)a2 + 90) = v13;
  uint64_t v14 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v14;
  uint64_t v15 = *((void *)this + 28);
  *((void *)this + 28) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v15;
  uint64_t v16 = *((void *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((void *)a2 + 26) = v16;
  uint64_t v17 = *((void *)this + 27);
  *((void *)this + 27) = *((void *)a2 + 27);
  *((void *)a2 + 27) = v17;
  uint64_t v18 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v18;
  uint64_t v19 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v19;
  uint64_t v20 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v20;
  uint64_t v21 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v21;
  uint64_t v22 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v22;
  uint64_t v23 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v23;
  uint64_t v24 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v24;
  uint64_t v25 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v25;
  uint64_t v26 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v26;
  uint64_t v27 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v27;
  uint64_t v28 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v28;
  uint64_t v29 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v29;
  uint64_t v30 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v30;
  uint64_t v31 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v31;
  uint64_t v32 = *((void *)this + 36);
  *((void *)this + 36) = *((void *)a2 + 36);
  *((void *)a2 + 36) = v32;
  uint64_t v33 = *((void *)this + 35);
  *((void *)this + 35) = *((void *)a2 + 35);
  *((void *)a2 + 35) = v33;
  uint64_t v34 = *((void *)this + 34);
  *((void *)this + 34) = *((void *)a2 + 34);
  *((void *)a2 + 34) = v34;
  uint64_t v35 = *((void *)this + 33);
  *((void *)this + 33) = *((void *)a2 + 33);
  *((void *)a2 + 33) = v35;
  uint64_t v36 = *((void *)this + 30);
  *((void *)this + 30) = *((void *)a2 + 30);
  *((void *)a2 + 30) = v36;
  uint64_t v37 = *((void *)this + 29);
  *((void *)this + 29) = *((void *)a2 + 29);
  *((void *)a2 + 29) = v37;
  uint64_t v38 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v38;
  uint64_t v39 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v39;
  uint64_t v40 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v40;
  uint64_t v41 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v41;
  uint64_t v42 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v42;
  uint64_t v43 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v43;
  uint64_t v44 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v44;
  uint64_t v45 = *((void *)this + 39);
  *((void *)this + 39) = *((void *)a2 + 39);
  *((void *)a2 + 39) = v45;
  uint64_t v46 = *((void *)this + 37);
  *((void *)this + 37) = *((void *)a2 + 37);
  *((void *)a2 + 37) = v46;
  double result = *((double *)this + 38);
  *((void *)this + 38) = *((void *)a2 + 38);
  *((double *)a2 + 38) = result;
  return result;
}

double CMMsl::FallDetectionReplay::FallDetectionReplay(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641720;
  *(void *)(a1 + 364) = *(void *)(a2 + 364);
  *(void *)(a2 + 364) = 0;
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  double result = *(double *)(a2 + 304);
  *(double *)(a1 + 304) = result;
  return result;
}

CMMsl *CMMsl::FallDetectionReplay::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionReplay::FallDetectionReplay((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReplay *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionReplay::formatText(CMMsl::FallDetectionReplay *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)((char *)this + 364);
  uint64_t v6 = *(void *)((char *)this + 364);
  if (v6)
  {
    PB::TextFormatter::format(a2, "alertCanceledBecauseOfAbsenceOfQuiessence");
    uint64_t v6 = *v5;
    if ((*v5 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_52;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfActive");
  uint64_t v6 = *v5;
  if ((*v5 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfChargerState");
  uint64_t v6 = *v5;
  if ((*v5 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfCyclingPostImpact");
  uint64_t v6 = *v5;
  if ((*v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfDecimatedLowFrequencyFFT");
  uint64_t v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfDistanceTraveledPostImpact");
  uint64_t v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfHighFrequencyFFT");
  uint64_t v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfLockedNoMotionPre");
  uint64_t v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfLowFrequencyFFT");
  uint64_t v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfNumberOfPeaksFFT");
  uint64_t v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfOffBody");
  uint64_t v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfRepetitiveMotion");
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfRetraction");
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfSimilarPeaks");
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfStand");
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfSteps");
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfWristState");
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfWristStatePost");
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfWristStatePre");
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "fallStatsDispatchResetOnAccelSensorTime");
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "fallStatsDispatchRestoredOnAccelSensorTime");
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "hkWorkoutId");
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "impactCanceledBecauseOfExistingAlert");
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfCyclingImpactThresholds");
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfMaxAccelNormThreshold");
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfMultiPeaks");
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfNaiveBayesClassifier");
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfOtherHardThresholds");
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "leavingImpactBecauseOfNewImpactNewImpact");
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x100000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "leavingImpactBecauseOfNewImpactOldImpact");
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "operatingMode");
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "skippedFallStatsSensorTime");
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "skippedGyroSensorTime");
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfAbsenceOfLongLie");
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x400000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfActive");
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x800000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfStand");
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfSteps");
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "sosConsideredFallTimestamp");
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x4000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "sosConsideredIOSTime", *((double *)this + 38));
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x8000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "sosConsideredSensorTime");
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x10000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "workoutId");
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x20000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "workoutTransitionPause");
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x40000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "workoutTransitionResume");
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x80000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "workoutTransitionStart");
  if ((*v5 & 0x80000000000) != 0) {
LABEL_46:
  }
    PB::TextFormatter::format(a2, "workoutTransitionStop");
LABEL_47:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FallDetectionReplay::readFrom(CMMsl::FallDetectionReplay *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  uint64_t v8 = (void *)((char *)this + 364);
  while (1)
  {
    uint64_t v9 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v12 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v18 = v2 + 1;
        char v19 = *(unsigned char *)(v9 + v2);
        *((void *)a2 + 1) = v18;
        v12 |= (unint64_t)(v19 & 0x7F) << v16;
        if ((v19 & 0x80) == 0) {
          goto LABEL_26;
        }
        v16 += 7;
        unint64_t v2 = v18;
        BOOL v15 = v17++ > 8;
      }
      while (!v15);
LABEL_20:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_21;
    }
    char v10 = 0;
    unsigned int v11 = 0;
    unint64_t v12 = 0;
    while (1)
    {
      unint64_t v13 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v14 = *(unsigned char *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0) {
        break;
      }
      v10 += 7;
      unint64_t v2 = v13;
      BOOL v15 = v11++ > 8;
      if (v15) {
        goto LABEL_20;
      }
    }
LABEL_26:
    if ((v12 & 7) == 4) {
      break;
    }
    switch((v12 >> 3))
    {
      case 1u:
        *v8 |= 0x40000000uLL;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = *(void *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          do
          {
            unint64_t v28 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              goto LABEL_651;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v15 = v26++ > 8;
          }
          while (!v15);
LABEL_345:
          uint64_t v27 = 0;
          goto LABEL_651;
        }
        char v375 = 0;
        unsigned int v376 = 0;
        uint64_t v27 = 0;
        if (v23 <= v22) {
          unint64_t v23 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v23 == v22)
          {
            uint64_t v27 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v377 = v22 + 1;
            char v378 = *(unsigned char *)(v24 + v22);
            *((void *)a2 + 1) = v377;
            v27 |= (unint64_t)(v378 & 0x7F) << v375;
            if (v378 < 0)
            {
              v375 += 7;
              unint64_t v22 = v377;
              BOOL v15 = v376++ > 8;
              if (v15) {
                goto LABEL_345;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v27 = 0;
            }
          }
          break;
        }
LABEL_651:
        *((void *)this + 31) = v27;
        goto LABEL_21;
      case 2u:
        *v8 |= 0x80000000uLL;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        uint64_t v32 = *(void *)a2;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          do
          {
            unint64_t v36 = v30 + 1;
            *((void *)a2 + 1) = v30 + 1;
            char v37 = *(unsigned char *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0) {
              goto LABEL_655;
            }
            v33 += 7;
            unint64_t v30 = v36;
            BOOL v15 = v34++ > 8;
          }
          while (!v15);
LABEL_352:
          uint64_t v35 = 0;
          goto LABEL_655;
        }
        char v379 = 0;
        unsigned int v380 = 0;
        uint64_t v35 = 0;
        if (v31 <= v30) {
          unint64_t v31 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v31 == v30)
          {
            uint64_t v35 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v381 = v30 + 1;
            char v382 = *(unsigned char *)(v32 + v30);
            *((void *)a2 + 1) = v381;
            v35 |= (unint64_t)(v382 & 0x7F) << v379;
            if (v382 < 0)
            {
              v379 += 7;
              unint64_t v30 = v381;
              BOOL v15 = v380++ > 8;
              if (v15) {
                goto LABEL_352;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v35 = 0;
            }
          }
          break;
        }
LABEL_655:
        *((void *)this + 32) = v35;
        goto LABEL_21;
      case 0x15u:
        *v8 |= 0x80000uLL;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v39 = *((void *)a2 + 2);
        uint64_t v40 = *(void *)a2;
        if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
        {
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v43 = 0;
          do
          {
            unint64_t v44 = v38 + 1;
            *((void *)a2 + 1) = v38 + 1;
            char v45 = *(unsigned char *)(v40 + v38);
            v43 |= (unint64_t)(v45 & 0x7F) << v41;
            if ((v45 & 0x80) == 0) {
              goto LABEL_659;
            }
            v41 += 7;
            unint64_t v38 = v44;
            BOOL v15 = v42++ > 8;
          }
          while (!v15);
LABEL_359:
          uint64_t v43 = 0;
          goto LABEL_659;
        }
        char v383 = 0;
        unsigned int v384 = 0;
        uint64_t v43 = 0;
        if (v39 <= v38) {
          unint64_t v39 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v39 == v38)
          {
            uint64_t v43 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v385 = v38 + 1;
            char v386 = *(unsigned char *)(v40 + v38);
            *((void *)a2 + 1) = v385;
            v43 |= (unint64_t)(v386 & 0x7F) << v383;
            if (v386 < 0)
            {
              v383 += 7;
              unint64_t v38 = v385;
              BOOL v15 = v384++ > 8;
              if (v15) {
                goto LABEL_359;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v43 = 0;
            }
          }
          break;
        }
LABEL_659:
        *((void *)this + 20) = v43;
        goto LABEL_21;
      case 0x16u:
        *v8 |= 0x100000uLL;
        unint64_t v46 = *((void *)a2 + 1);
        unint64_t v47 = *((void *)a2 + 2);
        uint64_t v48 = *(void *)a2;
        if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
        {
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v51 = 0;
          do
          {
            unint64_t v52 = v46 + 1;
            *((void *)a2 + 1) = v46 + 1;
            char v53 = *(unsigned char *)(v48 + v46);
            v51 |= (unint64_t)(v53 & 0x7F) << v49;
            if ((v53 & 0x80) == 0) {
              goto LABEL_663;
            }
            v49 += 7;
            unint64_t v46 = v52;
            BOOL v15 = v50++ > 8;
          }
          while (!v15);
LABEL_366:
          uint64_t v51 = 0;
          goto LABEL_663;
        }
        char v387 = 0;
        unsigned int v388 = 0;
        uint64_t v51 = 0;
        if (v47 <= v46) {
          unint64_t v47 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v47 == v46)
          {
            uint64_t v51 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v389 = v46 + 1;
            char v390 = *(unsigned char *)(v48 + v46);
            *((void *)a2 + 1) = v389;
            v51 |= (unint64_t)(v390 & 0x7F) << v387;
            if (v390 < 0)
            {
              v387 += 7;
              unint64_t v46 = v389;
              BOOL v15 = v388++ > 8;
              if (v15) {
                goto LABEL_366;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v51 = 0;
            }
          }
          break;
        }
LABEL_663:
        *((void *)this + 21) = v51;
        goto LABEL_21;
      case 0x2Cu:
        *v8 |= 0x200000uLL;
        unint64_t v54 = *((void *)a2 + 1);
        unint64_t v55 = *((void *)a2 + 2);
        uint64_t v56 = *(void *)a2;
        if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
        {
          char v57 = 0;
          unsigned int v58 = 0;
          uint64_t v59 = 0;
          do
          {
            unint64_t v60 = v54 + 1;
            *((void *)a2 + 1) = v54 + 1;
            char v61 = *(unsigned char *)(v56 + v54);
            v59 |= (unint64_t)(v61 & 0x7F) << v57;
            if ((v61 & 0x80) == 0) {
              goto LABEL_667;
            }
            v57 += 7;
            unint64_t v54 = v60;
            BOOL v15 = v58++ > 8;
          }
          while (!v15);
LABEL_373:
          uint64_t v59 = 0;
          goto LABEL_667;
        }
        char v391 = 0;
        unsigned int v392 = 0;
        uint64_t v59 = 0;
        if (v55 <= v54) {
          unint64_t v55 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v55 == v54)
          {
            uint64_t v59 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v393 = v54 + 1;
            char v394 = *(unsigned char *)(v56 + v54);
            *((void *)a2 + 1) = v393;
            v59 |= (unint64_t)(v394 & 0x7F) << v391;
            if (v394 < 0)
            {
              v391 += 7;
              unint64_t v54 = v393;
              BOOL v15 = v392++ > 8;
              if (v15) {
                goto LABEL_373;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v59 = 0;
            }
          }
          break;
        }
LABEL_667:
        *((void *)this + 22) = v59;
        goto LABEL_21;
      case 0x2Du:
        *v8 |= 0x8000000000uLL;
        unint64_t v62 = *((void *)a2 + 1);
        unint64_t v63 = *((void *)a2 + 2);
        uint64_t v64 = *(void *)a2;
        if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
        {
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v67 = 0;
          do
          {
            unint64_t v68 = v62 + 1;
            *((void *)a2 + 1) = v62 + 1;
            char v69 = *(unsigned char *)(v64 + v62);
            v67 |= (unint64_t)(v69 & 0x7F) << v65;
            if ((v69 & 0x80) == 0) {
              goto LABEL_671;
            }
            v65 += 7;
            unint64_t v62 = v68;
            BOOL v15 = v66++ > 8;
          }
          while (!v15);
LABEL_380:
          uint64_t v67 = 0;
          goto LABEL_671;
        }
        char v395 = 0;
        unsigned int v396 = 0;
        uint64_t v67 = 0;
        if (v63 <= v62) {
          unint64_t v63 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v63 == v62)
          {
            uint64_t v67 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v397 = v62 + 1;
            char v398 = *(unsigned char *)(v64 + v62);
            *((void *)a2 + 1) = v397;
            v67 |= (unint64_t)(v398 & 0x7F) << v395;
            if (v398 < 0)
            {
              v395 += 7;
              unint64_t v62 = v397;
              BOOL v15 = v396++ > 8;
              if (v15) {
                goto LABEL_380;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v67 = 0;
            }
          }
          break;
        }
LABEL_671:
        *((void *)this + 40) = v67;
        goto LABEL_21;
      case 0x2Eu:
        *v8 |= 0x40000000000uLL;
        unint64_t v70 = *((void *)a2 + 1);
        unint64_t v71 = *((void *)a2 + 2);
        uint64_t v72 = *(void *)a2;
        if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
        {
          char v73 = 0;
          unsigned int v74 = 0;
          uint64_t v75 = 0;
          do
          {
            unint64_t v76 = v70 + 1;
            *((void *)a2 + 1) = v70 + 1;
            char v77 = *(unsigned char *)(v72 + v70);
            v75 |= (unint64_t)(v77 & 0x7F) << v73;
            if ((v77 & 0x80) == 0) {
              goto LABEL_675;
            }
            v73 += 7;
            unint64_t v70 = v76;
            BOOL v15 = v74++ > 8;
          }
          while (!v15);
LABEL_387:
          uint64_t v75 = 0;
          goto LABEL_675;
        }
        char v399 = 0;
        unsigned int v400 = 0;
        uint64_t v75 = 0;
        if (v71 <= v70) {
          unint64_t v71 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v71 == v70)
          {
            uint64_t v75 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v401 = v70 + 1;
            char v402 = *(unsigned char *)(v72 + v70);
            *((void *)a2 + 1) = v401;
            v75 |= (unint64_t)(v402 & 0x7F) << v399;
            if (v402 < 0)
            {
              v399 += 7;
              unint64_t v70 = v401;
              BOOL v15 = v400++ > 8;
              if (v15) {
                goto LABEL_387;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v75 = 0;
            }
          }
          break;
        }
LABEL_675:
        *((void *)this + 43) = v75;
        goto LABEL_21;
      case 0x2Fu:
        *v8 |= 0x10000000000uLL;
        unint64_t v78 = *((void *)a2 + 1);
        unint64_t v79 = *((void *)a2 + 2);
        uint64_t v80 = *(void *)a2;
        if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
        {
          char v81 = 0;
          unsigned int v82 = 0;
          uint64_t v83 = 0;
          do
          {
            unint64_t v84 = v78 + 1;
            *((void *)a2 + 1) = v78 + 1;
            char v85 = *(unsigned char *)(v80 + v78);
            v83 |= (unint64_t)(v85 & 0x7F) << v81;
            if ((v85 & 0x80) == 0) {
              goto LABEL_679;
            }
            v81 += 7;
            unint64_t v78 = v84;
            BOOL v15 = v82++ > 8;
          }
          while (!v15);
LABEL_394:
          uint64_t v83 = 0;
          goto LABEL_679;
        }
        char v403 = 0;
        unsigned int v404 = 0;
        uint64_t v83 = 0;
        if (v79 <= v78) {
          unint64_t v79 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v79 == v78)
          {
            uint64_t v83 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v405 = v78 + 1;
            char v406 = *(unsigned char *)(v80 + v78);
            *((void *)a2 + 1) = v405;
            v83 |= (unint64_t)(v406 & 0x7F) << v403;
            if (v406 < 0)
            {
              v403 += 7;
              unint64_t v78 = v405;
              BOOL v15 = v404++ > 8;
              if (v15) {
                goto LABEL_394;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v83 = 0;
            }
          }
          break;
        }
LABEL_679:
        *((void *)this + 41) = v83;
        goto LABEL_21;
      case 0x30u:
        *v8 |= 0x20000000000uLL;
        unint64_t v86 = *((void *)a2 + 1);
        unint64_t v87 = *((void *)a2 + 2);
        uint64_t v88 = *(void *)a2;
        if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
        {
          char v89 = 0;
          unsigned int v90 = 0;
          uint64_t v91 = 0;
          do
          {
            unint64_t v92 = v86 + 1;
            *((void *)a2 + 1) = v86 + 1;
            char v93 = *(unsigned char *)(v88 + v86);
            v91 |= (unint64_t)(v93 & 0x7F) << v89;
            if ((v93 & 0x80) == 0) {
              goto LABEL_683;
            }
            v89 += 7;
            unint64_t v86 = v92;
            BOOL v15 = v90++ > 8;
          }
          while (!v15);
LABEL_401:
          uint64_t v91 = 0;
          goto LABEL_683;
        }
        char v407 = 0;
        unsigned int v408 = 0;
        uint64_t v91 = 0;
        if (v87 <= v86) {
          unint64_t v87 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v87 == v86)
          {
            uint64_t v91 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v409 = v86 + 1;
            char v410 = *(unsigned char *)(v88 + v86);
            *((void *)a2 + 1) = v409;
            v91 |= (unint64_t)(v410 & 0x7F) << v407;
            if (v410 < 0)
            {
              v407 += 7;
              unint64_t v86 = v409;
              BOOL v15 = v408++ > 8;
              if (v15) {
                goto LABEL_401;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v91 = 0;
            }
          }
          break;
        }
LABEL_683:
        *((void *)this + 42) = v91;
        goto LABEL_21;
      case 0x31u:
        *v8 |= 0x80000000000uLL;
        unint64_t v94 = *((void *)a2 + 1);
        unint64_t v95 = *((void *)a2 + 2);
        uint64_t v96 = *(void *)a2;
        if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
        {
          char v97 = 0;
          unsigned int v98 = 0;
          uint64_t v99 = 0;
          do
          {
            unint64_t v100 = v94 + 1;
            *((void *)a2 + 1) = v94 + 1;
            char v101 = *(unsigned char *)(v96 + v94);
            v99 |= (unint64_t)(v101 & 0x7F) << v97;
            if ((v101 & 0x80) == 0) {
              goto LABEL_687;
            }
            v97 += 7;
            unint64_t v94 = v100;
            BOOL v15 = v98++ > 8;
          }
          while (!v15);
LABEL_408:
          uint64_t v99 = 0;
          goto LABEL_687;
        }
        char v411 = 0;
        unsigned int v412 = 0;
        uint64_t v99 = 0;
        if (v95 <= v94) {
          unint64_t v95 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v95 == v94)
          {
            uint64_t v99 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v413 = v94 + 1;
            char v414 = *(unsigned char *)(v96 + v94);
            *((void *)a2 + 1) = v413;
            v99 |= (unint64_t)(v414 & 0x7F) << v411;
            if (v414 < 0)
            {
              v411 += 7;
              unint64_t v94 = v413;
              BOOL v15 = v412++ > 8;
              if (v15) {
                goto LABEL_408;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v99 = 0;
            }
          }
          break;
        }
LABEL_687:
        *((void *)this + 44) = v99;
        goto LABEL_21;
      case 0x32u:
        *v8 |= 0x100000000000uLL;
        unint64_t v102 = *((void *)a2 + 1);
        unint64_t v103 = *((void *)a2 + 2);
        uint64_t v104 = *(void *)a2;
        if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
        {
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v107 = 0;
          do
          {
            unint64_t v108 = v102 + 1;
            *((void *)a2 + 1) = v102 + 1;
            char v109 = *(unsigned char *)(v104 + v102);
            v107 |= (unint64_t)(v109 & 0x7F) << v105;
            if ((v109 & 0x80) == 0) {
              goto LABEL_691;
            }
            v105 += 7;
            unint64_t v102 = v108;
            BOOL v15 = v106++ > 8;
          }
          while (!v15);
LABEL_415:
          LODWORD(v107) = 0;
          goto LABEL_691;
        }
        char v415 = 0;
        unsigned int v416 = 0;
        uint64_t v107 = 0;
        if (v103 <= v102) {
          unint64_t v103 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v103 == v102)
          {
            LODWORD(v107) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v417 = v102 + 1;
            char v418 = *(unsigned char *)(v104 + v102);
            *((void *)a2 + 1) = v417;
            v107 |= (unint64_t)(v418 & 0x7F) << v415;
            if (v418 < 0)
            {
              v415 += 7;
              unint64_t v102 = v417;
              BOOL v15 = v416++ > 8;
              if (v15) {
                goto LABEL_415;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v107) = 0;
            }
          }
          break;
        }
LABEL_691:
        *((_DWORD *)this + 90) = v107;
        goto LABEL_21;
      case 0x33u:
        *v8 |= 0x1000000uLL;
        unint64_t v110 = *((void *)a2 + 1);
        unint64_t v111 = *((void *)a2 + 2);
        uint64_t v112 = *(void *)a2;
        if (v110 <= 0xFFFFFFFFFFFFFFF5 && v110 + 10 <= v111)
        {
          char v113 = 0;
          unsigned int v114 = 0;
          uint64_t v115 = 0;
          do
          {
            unint64_t v116 = v110 + 1;
            *((void *)a2 + 1) = v110 + 1;
            char v117 = *(unsigned char *)(v112 + v110);
            v115 |= (unint64_t)(v117 & 0x7F) << v113;
            if ((v117 & 0x80) == 0) {
              goto LABEL_695;
            }
            v113 += 7;
            unint64_t v110 = v116;
            BOOL v15 = v114++ > 8;
          }
          while (!v15);
LABEL_422:
          uint64_t v115 = 0;
          goto LABEL_695;
        }
        char v419 = 0;
        unsigned int v420 = 0;
        uint64_t v115 = 0;
        if (v111 <= v110) {
          unint64_t v111 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v111 == v110)
          {
            uint64_t v115 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v421 = v110 + 1;
            char v422 = *(unsigned char *)(v112 + v110);
            *((void *)a2 + 1) = v421;
            v115 |= (unint64_t)(v422 & 0x7F) << v419;
            if (v422 < 0)
            {
              v419 += 7;
              unint64_t v110 = v421;
              BOOL v15 = v420++ > 8;
              if (v15) {
                goto LABEL_422;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v115 = 0;
            }
          }
          break;
        }
LABEL_695:
        *((void *)this + 25) = v115;
        goto LABEL_21;
      case 0x34u:
        *v8 |= 0x8000000uLL;
        unint64_t v118 = *((void *)a2 + 1);
        unint64_t v119 = *((void *)a2 + 2);
        uint64_t v120 = *(void *)a2;
        if (v118 <= 0xFFFFFFFFFFFFFFF5 && v118 + 10 <= v119)
        {
          char v121 = 0;
          unsigned int v122 = 0;
          uint64_t v123 = 0;
          do
          {
            unint64_t v124 = v118 + 1;
            *((void *)a2 + 1) = v118 + 1;
            char v125 = *(unsigned char *)(v120 + v118);
            v123 |= (unint64_t)(v125 & 0x7F) << v121;
            if ((v125 & 0x80) == 0) {
              goto LABEL_699;
            }
            v121 += 7;
            unint64_t v118 = v124;
            BOOL v15 = v122++ > 8;
          }
          while (!v15);
LABEL_429:
          uint64_t v123 = 0;
          goto LABEL_699;
        }
        char v423 = 0;
        unsigned int v424 = 0;
        uint64_t v123 = 0;
        if (v119 <= v118) {
          unint64_t v119 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v119 == v118)
          {
            uint64_t v123 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v425 = v118 + 1;
            char v426 = *(unsigned char *)(v120 + v118);
            *((void *)a2 + 1) = v425;
            v123 |= (unint64_t)(v426 & 0x7F) << v423;
            if (v426 < 0)
            {
              v423 += 7;
              unint64_t v118 = v425;
              BOOL v15 = v424++ > 8;
              if (v15) {
                goto LABEL_429;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v123 = 0;
            }
          }
          break;
        }
LABEL_699:
        *((void *)this + 28) = v123;
        goto LABEL_21;
      case 0x35u:
        *v8 |= 0x2000000uLL;
        unint64_t v126 = *((void *)a2 + 1);
        unint64_t v127 = *((void *)a2 + 2);
        uint64_t v128 = *(void *)a2;
        if (v126 <= 0xFFFFFFFFFFFFFFF5 && v126 + 10 <= v127)
        {
          char v129 = 0;
          unsigned int v130 = 0;
          uint64_t v131 = 0;
          do
          {
            unint64_t v132 = v126 + 1;
            *((void *)a2 + 1) = v126 + 1;
            char v133 = *(unsigned char *)(v128 + v126);
            v131 |= (unint64_t)(v133 & 0x7F) << v129;
            if ((v133 & 0x80) == 0) {
              goto LABEL_703;
            }
            v129 += 7;
            unint64_t v126 = v132;
            BOOL v15 = v130++ > 8;
          }
          while (!v15);
LABEL_436:
          uint64_t v131 = 0;
          goto LABEL_703;
        }
        char v427 = 0;
        unsigned int v428 = 0;
        uint64_t v131 = 0;
        if (v127 <= v126) {
          unint64_t v127 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v127 == v126)
          {
            uint64_t v131 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v429 = v126 + 1;
            char v430 = *(unsigned char *)(v128 + v126);
            *((void *)a2 + 1) = v429;
            v131 |= (unint64_t)(v430 & 0x7F) << v427;
            if (v430 < 0)
            {
              v427 += 7;
              unint64_t v126 = v429;
              BOOL v15 = v428++ > 8;
              if (v15) {
                goto LABEL_436;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v131 = 0;
            }
          }
          break;
        }
LABEL_703:
        *((void *)this + 26) = v131;
        goto LABEL_21;
      case 0x36u:
        *v8 |= 0x4000000uLL;
        unint64_t v134 = *((void *)a2 + 1);
        unint64_t v135 = *((void *)a2 + 2);
        uint64_t v136 = *(void *)a2;
        if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
        {
          char v137 = 0;
          unsigned int v138 = 0;
          uint64_t v139 = 0;
          do
          {
            unint64_t v140 = v134 + 1;
            *((void *)a2 + 1) = v134 + 1;
            char v141 = *(unsigned char *)(v136 + v134);
            v139 |= (unint64_t)(v141 & 0x7F) << v137;
            if ((v141 & 0x80) == 0) {
              goto LABEL_707;
            }
            v137 += 7;
            unint64_t v134 = v140;
            BOOL v15 = v138++ > 8;
          }
          while (!v15);
LABEL_443:
          uint64_t v139 = 0;
          goto LABEL_707;
        }
        char v431 = 0;
        unsigned int v432 = 0;
        uint64_t v139 = 0;
        if (v135 <= v134) {
          unint64_t v135 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v135 == v134)
          {
            uint64_t v139 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v433 = v134 + 1;
            char v434 = *(unsigned char *)(v136 + v134);
            *((void *)a2 + 1) = v433;
            v139 |= (unint64_t)(v434 & 0x7F) << v431;
            if (v434 < 0)
            {
              v431 += 7;
              unint64_t v134 = v433;
              BOOL v15 = v432++ > 8;
              if (v15) {
                goto LABEL_443;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v139 = 0;
            }
          }
          break;
        }
LABEL_707:
        *((void *)this + 27) = v139;
        goto LABEL_21;
      case 0x37u:
        *v8 |= 0x400000uLL;
        unint64_t v142 = *((void *)a2 + 1);
        unint64_t v143 = *((void *)a2 + 2);
        uint64_t v144 = *(void *)a2;
        if (v142 <= 0xFFFFFFFFFFFFFFF5 && v142 + 10 <= v143)
        {
          char v145 = 0;
          unsigned int v146 = 0;
          uint64_t v147 = 0;
          do
          {
            unint64_t v148 = v142 + 1;
            *((void *)a2 + 1) = v142 + 1;
            char v149 = *(unsigned char *)(v144 + v142);
            v147 |= (unint64_t)(v149 & 0x7F) << v145;
            if ((v149 & 0x80) == 0) {
              goto LABEL_711;
            }
            v145 += 7;
            unint64_t v142 = v148;
            BOOL v15 = v146++ > 8;
          }
          while (!v15);
LABEL_450:
          uint64_t v147 = 0;
          goto LABEL_711;
        }
        char v435 = 0;
        unsigned int v436 = 0;
        uint64_t v147 = 0;
        if (v143 <= v142) {
          unint64_t v143 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v143 == v142)
          {
            uint64_t v147 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v437 = v142 + 1;
            char v438 = *(unsigned char *)(v144 + v142);
            *((void *)a2 + 1) = v437;
            v147 |= (unint64_t)(v438 & 0x7F) << v435;
            if (v438 < 0)
            {
              v435 += 7;
              unint64_t v142 = v437;
              BOOL v15 = v436++ > 8;
              if (v15) {
                goto LABEL_450;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v147 = 0;
            }
          }
          break;
        }
LABEL_711:
        *((void *)this + 23) = v147;
        goto LABEL_21;
      case 0x38u:
        *v8 |= 0x800000uLL;
        unint64_t v150 = *((void *)a2 + 1);
        unint64_t v151 = *((void *)a2 + 2);
        uint64_t v152 = *(void *)a2;
        if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
        {
          char v153 = 0;
          unsigned int v154 = 0;
          uint64_t v155 = 0;
          do
          {
            unint64_t v156 = v150 + 1;
            *((void *)a2 + 1) = v150 + 1;
            char v157 = *(unsigned char *)(v152 + v150);
            v155 |= (unint64_t)(v157 & 0x7F) << v153;
            if ((v157 & 0x80) == 0) {
              goto LABEL_715;
            }
            v153 += 7;
            unint64_t v150 = v156;
            BOOL v15 = v154++ > 8;
          }
          while (!v15);
LABEL_457:
          uint64_t v155 = 0;
          goto LABEL_715;
        }
        char v439 = 0;
        unsigned int v440 = 0;
        uint64_t v155 = 0;
        if (v151 <= v150) {
          unint64_t v151 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v151 == v150)
          {
            uint64_t v155 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v441 = v150 + 1;
            char v442 = *(unsigned char *)(v152 + v150);
            *((void *)a2 + 1) = v441;
            v155 |= (unint64_t)(v442 & 0x7F) << v439;
            if (v442 < 0)
            {
              v439 += 7;
              unint64_t v150 = v441;
              BOOL v15 = v440++ > 8;
              if (v15) {
                goto LABEL_457;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v155 = 0;
            }
          }
          break;
        }
LABEL_715:
        *((void *)this + 24) = v155;
        goto LABEL_21;
      case 0x3Bu:
        *v8 |= 0x20uLL;
        unint64_t v158 = *((void *)a2 + 1);
        unint64_t v159 = *((void *)a2 + 2);
        uint64_t v160 = *(void *)a2;
        if (v158 <= 0xFFFFFFFFFFFFFFF5 && v158 + 10 <= v159)
        {
          char v161 = 0;
          unsigned int v162 = 0;
          uint64_t v163 = 0;
          do
          {
            unint64_t v164 = v158 + 1;
            *((void *)a2 + 1) = v158 + 1;
            char v165 = *(unsigned char *)(v160 + v158);
            v163 |= (unint64_t)(v165 & 0x7F) << v161;
            if ((v165 & 0x80) == 0) {
              goto LABEL_719;
            }
            v161 += 7;
            unint64_t v158 = v164;
            BOOL v15 = v162++ > 8;
          }
          while (!v15);
LABEL_464:
          uint64_t v163 = 0;
          goto LABEL_719;
        }
        char v443 = 0;
        unsigned int v444 = 0;
        uint64_t v163 = 0;
        if (v159 <= v158) {
          unint64_t v159 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v159 == v158)
          {
            uint64_t v163 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v445 = v158 + 1;
            char v446 = *(unsigned char *)(v160 + v158);
            *((void *)a2 + 1) = v445;
            v163 |= (unint64_t)(v446 & 0x7F) << v443;
            if (v446 < 0)
            {
              v443 += 7;
              unint64_t v158 = v445;
              BOOL v15 = v444++ > 8;
              if (v15) {
                goto LABEL_464;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v163 = 0;
            }
          }
          break;
        }
LABEL_719:
        *((void *)this + 6) = v163;
        goto LABEL_21;
      case 0x3Cu:
        *v8 |= 8uLL;
        unint64_t v166 = *((void *)a2 + 1);
        unint64_t v167 = *((void *)a2 + 2);
        uint64_t v168 = *(void *)a2;
        if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
        {
          char v169 = 0;
          unsigned int v170 = 0;
          uint64_t v171 = 0;
          do
          {
            unint64_t v172 = v166 + 1;
            *((void *)a2 + 1) = v166 + 1;
            char v173 = *(unsigned char *)(v168 + v166);
            v171 |= (unint64_t)(v173 & 0x7F) << v169;
            if ((v173 & 0x80) == 0) {
              goto LABEL_723;
            }
            v169 += 7;
            unint64_t v166 = v172;
            BOOL v15 = v170++ > 8;
          }
          while (!v15);
LABEL_471:
          uint64_t v171 = 0;
          goto LABEL_723;
        }
        char v447 = 0;
        unsigned int v448 = 0;
        uint64_t v171 = 0;
        if (v167 <= v166) {
          unint64_t v167 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v167 == v166)
          {
            uint64_t v171 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v449 = v166 + 1;
            char v450 = *(unsigned char *)(v168 + v166);
            *((void *)a2 + 1) = v449;
            v171 |= (unint64_t)(v450 & 0x7F) << v447;
            if (v450 < 0)
            {
              v447 += 7;
              unint64_t v166 = v449;
              BOOL v15 = v448++ > 8;
              if (v15) {
                goto LABEL_471;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v171 = 0;
            }
          }
          break;
        }
LABEL_723:
        *((void *)this + 4) = v171;
        goto LABEL_21;
      case 0x3Du:
        *v8 |= 1uLL;
        unint64_t v174 = *((void *)a2 + 1);
        unint64_t v175 = *((void *)a2 + 2);
        uint64_t v176 = *(void *)a2;
        if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
        {
          char v177 = 0;
          unsigned int v178 = 0;
          uint64_t v179 = 0;
          do
          {
            unint64_t v180 = v174 + 1;
            *((void *)a2 + 1) = v174 + 1;
            char v181 = *(unsigned char *)(v176 + v174);
            v179 |= (unint64_t)(v181 & 0x7F) << v177;
            if ((v181 & 0x80) == 0) {
              goto LABEL_727;
            }
            v177 += 7;
            unint64_t v174 = v180;
            BOOL v15 = v178++ > 8;
          }
          while (!v15);
LABEL_478:
          uint64_t v179 = 0;
          goto LABEL_727;
        }
        char v451 = 0;
        unsigned int v452 = 0;
        uint64_t v179 = 0;
        if (v175 <= v174) {
          unint64_t v175 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v175 == v174)
          {
            uint64_t v179 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v453 = v174 + 1;
            char v454 = *(unsigned char *)(v176 + v174);
            *((void *)a2 + 1) = v453;
            v179 |= (unint64_t)(v454 & 0x7F) << v451;
            if (v454 < 0)
            {
              v451 += 7;
              unint64_t v174 = v453;
              BOOL v15 = v452++ > 8;
              if (v15) {
                goto LABEL_478;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v179 = 0;
            }
          }
          break;
        }
LABEL_727:
        *((void *)this + 1) = v179;
        goto LABEL_21;
      case 0x3Eu:
        *v8 |= 0x40uLL;
        unint64_t v182 = *((void *)a2 + 1);
        unint64_t v183 = *((void *)a2 + 2);
        uint64_t v184 = *(void *)a2;
        if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
        {
          char v185 = 0;
          unsigned int v186 = 0;
          uint64_t v187 = 0;
          do
          {
            unint64_t v188 = v182 + 1;
            *((void *)a2 + 1) = v182 + 1;
            char v189 = *(unsigned char *)(v184 + v182);
            v187 |= (unint64_t)(v189 & 0x7F) << v185;
            if ((v189 & 0x80) == 0) {
              goto LABEL_731;
            }
            v185 += 7;
            unint64_t v182 = v188;
            BOOL v15 = v186++ > 8;
          }
          while (!v15);
LABEL_485:
          uint64_t v187 = 0;
          goto LABEL_731;
        }
        char v455 = 0;
        unsigned int v456 = 0;
        uint64_t v187 = 0;
        if (v183 <= v182) {
          unint64_t v183 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v183 == v182)
          {
            uint64_t v187 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v457 = v182 + 1;
            char v458 = *(unsigned char *)(v184 + v182);
            *((void *)a2 + 1) = v457;
            v187 |= (unint64_t)(v458 & 0x7F) << v455;
            if (v458 < 0)
            {
              v455 += 7;
              unint64_t v182 = v457;
              BOOL v15 = v456++ > 8;
              if (v15) {
                goto LABEL_485;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v187 = 0;
            }
          }
          break;
        }
LABEL_731:
        *((void *)this + 7) = v187;
        goto LABEL_21;
      case 0x3Fu:
        *v8 |= 0x100uLL;
        unint64_t v190 = *((void *)a2 + 1);
        unint64_t v191 = *((void *)a2 + 2);
        uint64_t v192 = *(void *)a2;
        if (v190 <= 0xFFFFFFFFFFFFFFF5 && v190 + 10 <= v191)
        {
          char v193 = 0;
          unsigned int v194 = 0;
          uint64_t v195 = 0;
          do
          {
            unint64_t v196 = v190 + 1;
            *((void *)a2 + 1) = v190 + 1;
            char v197 = *(unsigned char *)(v192 + v190);
            v195 |= (unint64_t)(v197 & 0x7F) << v193;
            if ((v197 & 0x80) == 0) {
              goto LABEL_735;
            }
            v193 += 7;
            unint64_t v190 = v196;
            BOOL v15 = v194++ > 8;
          }
          while (!v15);
LABEL_492:
          uint64_t v195 = 0;
          goto LABEL_735;
        }
        char v459 = 0;
        unsigned int v460 = 0;
        uint64_t v195 = 0;
        if (v191 <= v190) {
          unint64_t v191 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v191 == v190)
          {
            uint64_t v195 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v461 = v190 + 1;
            char v462 = *(unsigned char *)(v192 + v190);
            *((void *)a2 + 1) = v461;
            v195 |= (unint64_t)(v462 & 0x7F) << v459;
            if (v462 < 0)
            {
              v459 += 7;
              unint64_t v190 = v461;
              BOOL v15 = v460++ > 8;
              if (v15) {
                goto LABEL_492;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v195 = 0;
            }
          }
          break;
        }
LABEL_735:
        *((void *)this + 9) = v195;
        goto LABEL_21;
      case 0x40u:
        *v8 |= 0x10uLL;
        unint64_t v198 = *((void *)a2 + 1);
        unint64_t v199 = *((void *)a2 + 2);
        uint64_t v200 = *(void *)a2;
        if (v198 <= 0xFFFFFFFFFFFFFFF5 && v198 + 10 <= v199)
        {
          char v201 = 0;
          unsigned int v202 = 0;
          uint64_t v203 = 0;
          do
          {
            unint64_t v204 = v198 + 1;
            *((void *)a2 + 1) = v198 + 1;
            char v205 = *(unsigned char *)(v200 + v198);
            v203 |= (unint64_t)(v205 & 0x7F) << v201;
            if ((v205 & 0x80) == 0) {
              goto LABEL_739;
            }
            v201 += 7;
            unint64_t v198 = v204;
            BOOL v15 = v202++ > 8;
          }
          while (!v15);
LABEL_499:
          uint64_t v203 = 0;
          goto LABEL_739;
        }
        char v463 = 0;
        unsigned int v464 = 0;
        uint64_t v203 = 0;
        if (v199 <= v198) {
          unint64_t v199 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v199 == v198)
          {
            uint64_t v203 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v465 = v198 + 1;
            char v466 = *(unsigned char *)(v200 + v198);
            *((void *)a2 + 1) = v465;
            v203 |= (unint64_t)(v466 & 0x7F) << v463;
            if (v466 < 0)
            {
              v463 += 7;
              unint64_t v198 = v465;
              BOOL v15 = v464++ > 8;
              if (v15) {
                goto LABEL_499;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v203 = 0;
            }
          }
          break;
        }
LABEL_739:
        *((void *)this + 5) = v203;
        goto LABEL_21;
      case 0x41u:
        *v8 |= 0x200uLL;
        unint64_t v206 = *((void *)a2 + 1);
        unint64_t v207 = *((void *)a2 + 2);
        uint64_t v208 = *(void *)a2;
        if (v206 <= 0xFFFFFFFFFFFFFFF5 && v206 + 10 <= v207)
        {
          char v209 = 0;
          unsigned int v210 = 0;
          uint64_t v211 = 0;
          do
          {
            unint64_t v212 = v206 + 1;
            *((void *)a2 + 1) = v206 + 1;
            char v213 = *(unsigned char *)(v208 + v206);
            v211 |= (unint64_t)(v213 & 0x7F) << v209;
            if ((v213 & 0x80) == 0) {
              goto LABEL_743;
            }
            v209 += 7;
            unint64_t v206 = v212;
            BOOL v15 = v210++ > 8;
          }
          while (!v15);
LABEL_506:
          uint64_t v211 = 0;
          goto LABEL_743;
        }
        char v467 = 0;
        unsigned int v468 = 0;
        uint64_t v211 = 0;
        if (v207 <= v206) {
          unint64_t v207 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v207 == v206)
          {
            uint64_t v211 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v469 = v206 + 1;
            char v470 = *(unsigned char *)(v208 + v206);
            *((void *)a2 + 1) = v469;
            v211 |= (unint64_t)(v470 & 0x7F) << v467;
            if (v470 < 0)
            {
              v467 += 7;
              unint64_t v206 = v469;
              BOOL v15 = v468++ > 8;
              if (v15) {
                goto LABEL_506;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v211 = 0;
            }
          }
          break;
        }
LABEL_743:
        *((void *)this + 10) = v211;
        goto LABEL_21;
      case 0x42u:
        *v8 |= 0x400uLL;
        unint64_t v214 = *((void *)a2 + 1);
        unint64_t v215 = *((void *)a2 + 2);
        uint64_t v216 = *(void *)a2;
        if (v214 <= 0xFFFFFFFFFFFFFFF5 && v214 + 10 <= v215)
        {
          char v217 = 0;
          unsigned int v218 = 0;
          uint64_t v219 = 0;
          do
          {
            unint64_t v220 = v214 + 1;
            *((void *)a2 + 1) = v214 + 1;
            char v221 = *(unsigned char *)(v216 + v214);
            v219 |= (unint64_t)(v221 & 0x7F) << v217;
            if ((v221 & 0x80) == 0) {
              goto LABEL_747;
            }
            v217 += 7;
            unint64_t v214 = v220;
            BOOL v15 = v218++ > 8;
          }
          while (!v15);
LABEL_513:
          uint64_t v219 = 0;
          goto LABEL_747;
        }
        char v471 = 0;
        unsigned int v472 = 0;
        uint64_t v219 = 0;
        if (v215 <= v214) {
          unint64_t v215 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v215 == v214)
          {
            uint64_t v219 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v473 = v214 + 1;
            char v474 = *(unsigned char *)(v216 + v214);
            *((void *)a2 + 1) = v473;
            v219 |= (unint64_t)(v474 & 0x7F) << v471;
            if (v474 < 0)
            {
              v471 += 7;
              unint64_t v214 = v473;
              BOOL v15 = v472++ > 8;
              if (v15) {
                goto LABEL_513;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v219 = 0;
            }
          }
          break;
        }
LABEL_747:
        *((void *)this + 11) = v219;
        goto LABEL_21;
      case 0x43u:
        *v8 |= 0x800uLL;
        unint64_t v222 = *((void *)a2 + 1);
        unint64_t v223 = *((void *)a2 + 2);
        uint64_t v224 = *(void *)a2;
        if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
        {
          char v225 = 0;
          unsigned int v226 = 0;
          uint64_t v227 = 0;
          do
          {
            unint64_t v228 = v222 + 1;
            *((void *)a2 + 1) = v222 + 1;
            char v229 = *(unsigned char *)(v224 + v222);
            v227 |= (unint64_t)(v229 & 0x7F) << v225;
            if ((v229 & 0x80) == 0) {
              goto LABEL_751;
            }
            v225 += 7;
            unint64_t v222 = v228;
            BOOL v15 = v226++ > 8;
          }
          while (!v15);
LABEL_520:
          uint64_t v227 = 0;
          goto LABEL_751;
        }
        char v475 = 0;
        unsigned int v476 = 0;
        uint64_t v227 = 0;
        if (v223 <= v222) {
          unint64_t v223 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v223 == v222)
          {
            uint64_t v227 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v477 = v222 + 1;
            char v478 = *(unsigned char *)(v224 + v222);
            *((void *)a2 + 1) = v477;
            v227 |= (unint64_t)(v478 & 0x7F) << v475;
            if (v478 < 0)
            {
              v475 += 7;
              unint64_t v222 = v477;
              BOOL v15 = v476++ > 8;
              if (v15) {
                goto LABEL_520;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v227 = 0;
            }
          }
          break;
        }
LABEL_751:
        *((void *)this + 12) = v227;
        goto LABEL_21;
      case 0x44u:
        *v8 |= 0x4000uLL;
        unint64_t v230 = *((void *)a2 + 1);
        unint64_t v231 = *((void *)a2 + 2);
        uint64_t v232 = *(void *)a2;
        if (v230 <= 0xFFFFFFFFFFFFFFF5 && v230 + 10 <= v231)
        {
          char v233 = 0;
          unsigned int v234 = 0;
          uint64_t v235 = 0;
          do
          {
            unint64_t v236 = v230 + 1;
            *((void *)a2 + 1) = v230 + 1;
            char v237 = *(unsigned char *)(v232 + v230);
            v235 |= (unint64_t)(v237 & 0x7F) << v233;
            if ((v237 & 0x80) == 0) {
              goto LABEL_755;
            }
            v233 += 7;
            unint64_t v230 = v236;
            BOOL v15 = v234++ > 8;
          }
          while (!v15);
LABEL_527:
          uint64_t v235 = 0;
          goto LABEL_755;
        }
        char v479 = 0;
        unsigned int v480 = 0;
        uint64_t v235 = 0;
        if (v231 <= v230) {
          unint64_t v231 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v231 == v230)
          {
            uint64_t v235 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v481 = v230 + 1;
            char v482 = *(unsigned char *)(v232 + v230);
            *((void *)a2 + 1) = v481;
            v235 |= (unint64_t)(v482 & 0x7F) << v479;
            if (v482 < 0)
            {
              v479 += 7;
              unint64_t v230 = v481;
              BOOL v15 = v480++ > 8;
              if (v15) {
                goto LABEL_527;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v235 = 0;
            }
          }
          break;
        }
LABEL_755:
        *((void *)this + 15) = v235;
        goto LABEL_21;
      case 0x45u:
        *v8 |= 2uLL;
        unint64_t v238 = *((void *)a2 + 1);
        unint64_t v239 = *((void *)a2 + 2);
        uint64_t v240 = *(void *)a2;
        if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
        {
          char v241 = 0;
          unsigned int v242 = 0;
          uint64_t v243 = 0;
          do
          {
            unint64_t v244 = v238 + 1;
            *((void *)a2 + 1) = v238 + 1;
            char v245 = *(unsigned char *)(v240 + v238);
            v243 |= (unint64_t)(v245 & 0x7F) << v241;
            if ((v245 & 0x80) == 0) {
              goto LABEL_759;
            }
            v241 += 7;
            unint64_t v238 = v244;
            BOOL v15 = v242++ > 8;
          }
          while (!v15);
LABEL_534:
          uint64_t v243 = 0;
          goto LABEL_759;
        }
        char v483 = 0;
        unsigned int v484 = 0;
        uint64_t v243 = 0;
        if (v239 <= v238) {
          unint64_t v239 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v239 == v238)
          {
            uint64_t v243 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v485 = v238 + 1;
            char v486 = *(unsigned char *)(v240 + v238);
            *((void *)a2 + 1) = v485;
            v243 |= (unint64_t)(v486 & 0x7F) << v483;
            if (v486 < 0)
            {
              v483 += 7;
              unint64_t v238 = v485;
              BOOL v15 = v484++ > 8;
              if (v15) {
                goto LABEL_534;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v243 = 0;
            }
          }
          break;
        }
LABEL_759:
        *((void *)this + 2) = v243;
        goto LABEL_21;
      case 0x46u:
        *v8 |= 0x8000uLL;
        unint64_t v246 = *((void *)a2 + 1);
        unint64_t v247 = *((void *)a2 + 2);
        uint64_t v248 = *(void *)a2;
        if (v246 <= 0xFFFFFFFFFFFFFFF5 && v246 + 10 <= v247)
        {
          char v249 = 0;
          unsigned int v250 = 0;
          uint64_t v251 = 0;
          do
          {
            unint64_t v252 = v246 + 1;
            *((void *)a2 + 1) = v246 + 1;
            char v253 = *(unsigned char *)(v248 + v246);
            v251 |= (unint64_t)(v253 & 0x7F) << v249;
            if ((v253 & 0x80) == 0) {
              goto LABEL_763;
            }
            v249 += 7;
            unint64_t v246 = v252;
            BOOL v15 = v250++ > 8;
          }
          while (!v15);
LABEL_541:
          uint64_t v251 = 0;
          goto LABEL_763;
        }
        char v487 = 0;
        unsigned int v488 = 0;
        uint64_t v251 = 0;
        if (v247 <= v246) {
          unint64_t v247 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v247 == v246)
          {
            uint64_t v251 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v489 = v246 + 1;
            char v490 = *(unsigned char *)(v248 + v246);
            *((void *)a2 + 1) = v489;
            v251 |= (unint64_t)(v490 & 0x7F) << v487;
            if (v490 < 0)
            {
              v487 += 7;
              unint64_t v246 = v489;
              BOOL v15 = v488++ > 8;
              if (v15) {
                goto LABEL_541;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v251 = 0;
            }
          }
          break;
        }
LABEL_763:
        *((void *)this + 16) = v251;
        goto LABEL_21;
      case 0x47u:
        *v8 |= 0x800000000uLL;
        unint64_t v254 = *((void *)a2 + 1);
        unint64_t v255 = *((void *)a2 + 2);
        uint64_t v256 = *(void *)a2;
        if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
        {
          char v257 = 0;
          unsigned int v258 = 0;
          uint64_t v259 = 0;
          do
          {
            unint64_t v260 = v254 + 1;
            *((void *)a2 + 1) = v254 + 1;
            char v261 = *(unsigned char *)(v256 + v254);
            v259 |= (unint64_t)(v261 & 0x7F) << v257;
            if ((v261 & 0x80) == 0) {
              goto LABEL_767;
            }
            v257 += 7;
            unint64_t v254 = v260;
            BOOL v15 = v258++ > 8;
          }
          while (!v15);
LABEL_548:
          uint64_t v259 = 0;
          goto LABEL_767;
        }
        char v491 = 0;
        unsigned int v492 = 0;
        uint64_t v259 = 0;
        if (v255 <= v254) {
          unint64_t v255 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v255 == v254)
          {
            uint64_t v259 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v493 = v254 + 1;
            char v494 = *(unsigned char *)(v256 + v254);
            *((void *)a2 + 1) = v493;
            v259 |= (unint64_t)(v494 & 0x7F) << v491;
            if (v494 < 0)
            {
              v491 += 7;
              unint64_t v254 = v493;
              BOOL v15 = v492++ > 8;
              if (v15) {
                goto LABEL_548;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v259 = 0;
            }
          }
          break;
        }
LABEL_767:
        *((void *)this + 36) = v259;
        goto LABEL_21;
      case 0x48u:
        *v8 |= 0x400000000uLL;
        unint64_t v262 = *((void *)a2 + 1);
        unint64_t v263 = *((void *)a2 + 2);
        uint64_t v264 = *(void *)a2;
        if (v262 <= 0xFFFFFFFFFFFFFFF5 && v262 + 10 <= v263)
        {
          char v265 = 0;
          unsigned int v266 = 0;
          uint64_t v267 = 0;
          do
          {
            unint64_t v268 = v262 + 1;
            *((void *)a2 + 1) = v262 + 1;
            char v269 = *(unsigned char *)(v264 + v262);
            v267 |= (unint64_t)(v269 & 0x7F) << v265;
            if ((v269 & 0x80) == 0) {
              goto LABEL_771;
            }
            v265 += 7;
            unint64_t v262 = v268;
            BOOL v15 = v266++ > 8;
          }
          while (!v15);
LABEL_555:
          uint64_t v267 = 0;
          goto LABEL_771;
        }
        char v495 = 0;
        unsigned int v496 = 0;
        uint64_t v267 = 0;
        if (v263 <= v262) {
          unint64_t v263 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v263 == v262)
          {
            uint64_t v267 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v497 = v262 + 1;
            char v498 = *(unsigned char *)(v264 + v262);
            *((void *)a2 + 1) = v497;
            v267 |= (unint64_t)(v498 & 0x7F) << v495;
            if (v498 < 0)
            {
              v495 += 7;
              unint64_t v262 = v497;
              BOOL v15 = v496++ > 8;
              if (v15) {
                goto LABEL_555;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v267 = 0;
            }
          }
          break;
        }
LABEL_771:
        *((void *)this + 35) = v267;
        goto LABEL_21;
      case 0x49u:
        *v8 |= 0x200000000uLL;
        unint64_t v270 = *((void *)a2 + 1);
        unint64_t v271 = *((void *)a2 + 2);
        uint64_t v272 = *(void *)a2;
        if (v270 <= 0xFFFFFFFFFFFFFFF5 && v270 + 10 <= v271)
        {
          char v273 = 0;
          unsigned int v274 = 0;
          uint64_t v275 = 0;
          do
          {
            unint64_t v276 = v270 + 1;
            *((void *)a2 + 1) = v270 + 1;
            char v277 = *(unsigned char *)(v272 + v270);
            v275 |= (unint64_t)(v277 & 0x7F) << v273;
            if ((v277 & 0x80) == 0) {
              goto LABEL_775;
            }
            v273 += 7;
            unint64_t v270 = v276;
            BOOL v15 = v274++ > 8;
          }
          while (!v15);
LABEL_562:
          uint64_t v275 = 0;
          goto LABEL_775;
        }
        char v499 = 0;
        unsigned int v500 = 0;
        uint64_t v275 = 0;
        if (v271 <= v270) {
          unint64_t v271 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v271 == v270)
          {
            uint64_t v275 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v501 = v270 + 1;
            char v502 = *(unsigned char *)(v272 + v270);
            *((void *)a2 + 1) = v501;
            v275 |= (unint64_t)(v502 & 0x7F) << v499;
            if (v502 < 0)
            {
              v499 += 7;
              unint64_t v270 = v501;
              BOOL v15 = v500++ > 8;
              if (v15) {
                goto LABEL_562;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v275 = 0;
            }
          }
          break;
        }
LABEL_775:
        *((void *)this + 34) = v275;
        goto LABEL_21;
      case 0x4Au:
        *v8 |= 0x100000000uLL;
        unint64_t v278 = *((void *)a2 + 1);
        unint64_t v279 = *((void *)a2 + 2);
        uint64_t v280 = *(void *)a2;
        if (v278 <= 0xFFFFFFFFFFFFFFF5 && v278 + 10 <= v279)
        {
          char v281 = 0;
          unsigned int v282 = 0;
          uint64_t v283 = 0;
          do
          {
            unint64_t v284 = v278 + 1;
            *((void *)a2 + 1) = v278 + 1;
            char v285 = *(unsigned char *)(v280 + v278);
            v283 |= (unint64_t)(v285 & 0x7F) << v281;
            if ((v285 & 0x80) == 0) {
              goto LABEL_779;
            }
            v281 += 7;
            unint64_t v278 = v284;
            BOOL v15 = v282++ > 8;
          }
          while (!v15);
LABEL_569:
          uint64_t v283 = 0;
          goto LABEL_779;
        }
        char v503 = 0;
        unsigned int v504 = 0;
        uint64_t v283 = 0;
        if (v279 <= v278) {
          unint64_t v279 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v279 == v278)
          {
            uint64_t v283 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v505 = v278 + 1;
            char v506 = *(unsigned char *)(v280 + v278);
            *((void *)a2 + 1) = v505;
            v283 |= (unint64_t)(v506 & 0x7F) << v503;
            if (v506 < 0)
            {
              v503 += 7;
              unint64_t v278 = v505;
              BOOL v15 = v504++ > 8;
              if (v15) {
                goto LABEL_569;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v283 = 0;
            }
          }
          break;
        }
LABEL_779:
        *((void *)this + 33) = v283;
        goto LABEL_21;
      case 0x51u:
        *v8 |= 0x20000000uLL;
        unint64_t v286 = *((void *)a2 + 1);
        unint64_t v287 = *((void *)a2 + 2);
        uint64_t v288 = *(void *)a2;
        if (v286 <= 0xFFFFFFFFFFFFFFF5 && v286 + 10 <= v287)
        {
          char v289 = 0;
          unsigned int v290 = 0;
          uint64_t v291 = 0;
          do
          {
            unint64_t v292 = v286 + 1;
            *((void *)a2 + 1) = v286 + 1;
            char v293 = *(unsigned char *)(v288 + v286);
            v291 |= (unint64_t)(v293 & 0x7F) << v289;
            if ((v293 & 0x80) == 0) {
              goto LABEL_783;
            }
            v289 += 7;
            unint64_t v286 = v292;
            BOOL v15 = v290++ > 8;
          }
          while (!v15);
LABEL_576:
          uint64_t v291 = 0;
          goto LABEL_783;
        }
        char v507 = 0;
        unsigned int v508 = 0;
        uint64_t v291 = 0;
        if (v287 <= v286) {
          unint64_t v287 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v287 == v286)
          {
            uint64_t v291 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v509 = v286 + 1;
            char v510 = *(unsigned char *)(v288 + v286);
            *((void *)a2 + 1) = v509;
            v291 |= (unint64_t)(v510 & 0x7F) << v507;
            if (v510 < 0)
            {
              v507 += 7;
              unint64_t v286 = v509;
              BOOL v15 = v508++ > 8;
              if (v15) {
                goto LABEL_576;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v291 = 0;
            }
          }
          break;
        }
LABEL_783:
        *((void *)this + 30) = v291;
        goto LABEL_21;
      case 0x52u:
        *v8 |= 0x10000000uLL;
        unint64_t v294 = *((void *)a2 + 1);
        unint64_t v295 = *((void *)a2 + 2);
        uint64_t v296 = *(void *)a2;
        if (v294 <= 0xFFFFFFFFFFFFFFF5 && v294 + 10 <= v295)
        {
          char v297 = 0;
          unsigned int v298 = 0;
          uint64_t v299 = 0;
          do
          {
            unint64_t v300 = v294 + 1;
            *((void *)a2 + 1) = v294 + 1;
            char v301 = *(unsigned char *)(v296 + v294);
            v299 |= (unint64_t)(v301 & 0x7F) << v297;
            if ((v301 & 0x80) == 0) {
              goto LABEL_787;
            }
            v297 += 7;
            unint64_t v294 = v300;
            BOOL v15 = v298++ > 8;
          }
          while (!v15);
LABEL_583:
          uint64_t v299 = 0;
          goto LABEL_787;
        }
        char v511 = 0;
        unsigned int v512 = 0;
        uint64_t v299 = 0;
        if (v295 <= v294) {
          unint64_t v295 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v295 == v294)
          {
            uint64_t v299 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v513 = v294 + 1;
            char v514 = *(unsigned char *)(v296 + v294);
            *((void *)a2 + 1) = v513;
            v299 |= (unint64_t)(v514 & 0x7F) << v511;
            if (v514 < 0)
            {
              v511 += 7;
              unint64_t v294 = v513;
              BOOL v15 = v512++ > 8;
              if (v15) {
                goto LABEL_583;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v299 = 0;
            }
          }
          break;
        }
LABEL_787:
        *((void *)this + 29) = v299;
        goto LABEL_21;
      case 0x53u:
        *v8 |= 0x2000uLL;
        unint64_t v302 = *((void *)a2 + 1);
        unint64_t v303 = *((void *)a2 + 2);
        uint64_t v304 = *(void *)a2;
        if (v302 <= 0xFFFFFFFFFFFFFFF5 && v302 + 10 <= v303)
        {
          char v305 = 0;
          unsigned int v306 = 0;
          uint64_t v307 = 0;
          do
          {
            unint64_t v308 = v302 + 1;
            *((void *)a2 + 1) = v302 + 1;
            char v309 = *(unsigned char *)(v304 + v302);
            v307 |= (unint64_t)(v309 & 0x7F) << v305;
            if ((v309 & 0x80) == 0) {
              goto LABEL_791;
            }
            v305 += 7;
            unint64_t v302 = v308;
            BOOL v15 = v306++ > 8;
          }
          while (!v15);
LABEL_590:
          uint64_t v307 = 0;
          goto LABEL_791;
        }
        char v515 = 0;
        unsigned int v516 = 0;
        uint64_t v307 = 0;
        if (v303 <= v302) {
          unint64_t v303 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v303 == v302)
          {
            uint64_t v307 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v517 = v302 + 1;
            char v518 = *(unsigned char *)(v304 + v302);
            *((void *)a2 + 1) = v517;
            v307 |= (unint64_t)(v518 & 0x7F) << v515;
            if (v518 < 0)
            {
              v515 += 7;
              unint64_t v302 = v517;
              BOOL v15 = v516++ > 8;
              if (v15) {
                goto LABEL_590;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v307 = 0;
            }
          }
          break;
        }
LABEL_791:
        *((void *)this + 14) = v307;
        goto LABEL_21;
      case 0x54u:
        *v8 |= 0x10000uLL;
        unint64_t v310 = *((void *)a2 + 1);
        unint64_t v311 = *((void *)a2 + 2);
        uint64_t v312 = *(void *)a2;
        if (v310 <= 0xFFFFFFFFFFFFFFF5 && v310 + 10 <= v311)
        {
          char v313 = 0;
          unsigned int v314 = 0;
          uint64_t v315 = 0;
          do
          {
            unint64_t v316 = v310 + 1;
            *((void *)a2 + 1) = v310 + 1;
            char v317 = *(unsigned char *)(v312 + v310);
            v315 |= (unint64_t)(v317 & 0x7F) << v313;
            if ((v317 & 0x80) == 0) {
              goto LABEL_795;
            }
            v313 += 7;
            unint64_t v310 = v316;
            BOOL v15 = v314++ > 8;
          }
          while (!v15);
LABEL_597:
          uint64_t v315 = 0;
          goto LABEL_795;
        }
        char v519 = 0;
        unsigned int v520 = 0;
        uint64_t v315 = 0;
        if (v311 <= v310) {
          unint64_t v311 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v311 == v310)
          {
            uint64_t v315 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v521 = v310 + 1;
            char v522 = *(unsigned char *)(v312 + v310);
            *((void *)a2 + 1) = v521;
            v315 |= (unint64_t)(v522 & 0x7F) << v519;
            if (v522 < 0)
            {
              v519 += 7;
              unint64_t v310 = v521;
              BOOL v15 = v520++ > 8;
              if (v15) {
                goto LABEL_597;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v315 = 0;
            }
          }
          break;
        }
LABEL_795:
        *((void *)this + 17) = v315;
        goto LABEL_21;
      case 0x55u:
        *v8 |= 4uLL;
        unint64_t v318 = *((void *)a2 + 1);
        unint64_t v319 = *((void *)a2 + 2);
        uint64_t v320 = *(void *)a2;
        if (v318 <= 0xFFFFFFFFFFFFFFF5 && v318 + 10 <= v319)
        {
          char v321 = 0;
          unsigned int v322 = 0;
          uint64_t v323 = 0;
          do
          {
            unint64_t v324 = v318 + 1;
            *((void *)a2 + 1) = v318 + 1;
            char v325 = *(unsigned char *)(v320 + v318);
            v323 |= (unint64_t)(v325 & 0x7F) << v321;
            if ((v325 & 0x80) == 0) {
              goto LABEL_799;
            }
            v321 += 7;
            unint64_t v318 = v324;
            BOOL v15 = v322++ > 8;
          }
          while (!v15);
LABEL_604:
          uint64_t v323 = 0;
          goto LABEL_799;
        }
        char v523 = 0;
        unsigned int v524 = 0;
        uint64_t v323 = 0;
        if (v319 <= v318) {
          unint64_t v319 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v319 == v318)
          {
            uint64_t v323 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v525 = v318 + 1;
            char v526 = *(unsigned char *)(v320 + v318);
            *((void *)a2 + 1) = v525;
            v323 |= (unint64_t)(v526 & 0x7F) << v523;
            if (v526 < 0)
            {
              v523 += 7;
              unint64_t v318 = v525;
              BOOL v15 = v524++ > 8;
              if (v15) {
                goto LABEL_604;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v323 = 0;
            }
          }
          break;
        }
LABEL_799:
        *((void *)this + 3) = v323;
        goto LABEL_21;
      case 0x56u:
        *v8 |= 0x40000uLL;
        unint64_t v326 = *((void *)a2 + 1);
        unint64_t v327 = *((void *)a2 + 2);
        uint64_t v328 = *(void *)a2;
        if (v326 <= 0xFFFFFFFFFFFFFFF5 && v326 + 10 <= v327)
        {
          char v329 = 0;
          unsigned int v330 = 0;
          uint64_t v331 = 0;
          do
          {
            unint64_t v332 = v326 + 1;
            *((void *)a2 + 1) = v326 + 1;
            char v333 = *(unsigned char *)(v328 + v326);
            v331 |= (unint64_t)(v333 & 0x7F) << v329;
            if ((v333 & 0x80) == 0) {
              goto LABEL_803;
            }
            v329 += 7;
            unint64_t v326 = v332;
            BOOL v15 = v330++ > 8;
          }
          while (!v15);
LABEL_611:
          uint64_t v331 = 0;
          goto LABEL_803;
        }
        char v527 = 0;
        unsigned int v528 = 0;
        uint64_t v331 = 0;
        if (v327 <= v326) {
          unint64_t v327 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v327 == v326)
          {
            uint64_t v331 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v529 = v326 + 1;
            char v530 = *(unsigned char *)(v328 + v326);
            *((void *)a2 + 1) = v529;
            v331 |= (unint64_t)(v530 & 0x7F) << v527;
            if (v530 < 0)
            {
              v527 += 7;
              unint64_t v326 = v529;
              BOOL v15 = v528++ > 8;
              if (v15) {
                goto LABEL_611;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v331 = 0;
            }
          }
          break;
        }
LABEL_803:
        *((void *)this + 19) = v331;
        goto LABEL_21;
      case 0x57u:
        *v8 |= 0x20000uLL;
        unint64_t v334 = *((void *)a2 + 1);
        unint64_t v335 = *((void *)a2 + 2);
        uint64_t v336 = *(void *)a2;
        if (v334 <= 0xFFFFFFFFFFFFFFF5 && v334 + 10 <= v335)
        {
          char v337 = 0;
          unsigned int v338 = 0;
          uint64_t v339 = 0;
          do
          {
            unint64_t v340 = v334 + 1;
            *((void *)a2 + 1) = v334 + 1;
            char v341 = *(unsigned char *)(v336 + v334);
            v339 |= (unint64_t)(v341 & 0x7F) << v337;
            if ((v341 & 0x80) == 0) {
              goto LABEL_807;
            }
            v337 += 7;
            unint64_t v334 = v340;
            BOOL v15 = v338++ > 8;
          }
          while (!v15);
LABEL_618:
          uint64_t v339 = 0;
          goto LABEL_807;
        }
        char v531 = 0;
        unsigned int v532 = 0;
        uint64_t v339 = 0;
        if (v335 <= v334) {
          unint64_t v335 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v335 == v334)
          {
            uint64_t v339 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v533 = v334 + 1;
            char v534 = *(unsigned char *)(v336 + v334);
            *((void *)a2 + 1) = v533;
            v339 |= (unint64_t)(v534 & 0x7F) << v531;
            if (v534 < 0)
            {
              v531 += 7;
              unint64_t v334 = v533;
              BOOL v15 = v532++ > 8;
              if (v15) {
                goto LABEL_618;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v339 = 0;
            }
          }
          break;
        }
LABEL_807:
        *((void *)this + 18) = v339;
        goto LABEL_21;
      case 0x58u:
        *v8 |= 0x80uLL;
        unint64_t v342 = *((void *)a2 + 1);
        unint64_t v343 = *((void *)a2 + 2);
        uint64_t v344 = *(void *)a2;
        if (v342 <= 0xFFFFFFFFFFFFFFF5 && v342 + 10 <= v343)
        {
          char v345 = 0;
          unsigned int v346 = 0;
          uint64_t v347 = 0;
          do
          {
            unint64_t v348 = v342 + 1;
            *((void *)a2 + 1) = v342 + 1;
            char v349 = *(unsigned char *)(v344 + v342);
            v347 |= (unint64_t)(v349 & 0x7F) << v345;
            if ((v349 & 0x80) == 0) {
              goto LABEL_811;
            }
            v345 += 7;
            unint64_t v342 = v348;
            BOOL v15 = v346++ > 8;
          }
          while (!v15);
LABEL_625:
          uint64_t v347 = 0;
          goto LABEL_811;
        }
        char v535 = 0;
        unsigned int v536 = 0;
        uint64_t v347 = 0;
        if (v343 <= v342) {
          unint64_t v343 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v343 == v342)
          {
            uint64_t v347 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v537 = v342 + 1;
            char v538 = *(unsigned char *)(v344 + v342);
            *((void *)a2 + 1) = v537;
            v347 |= (unint64_t)(v538 & 0x7F) << v535;
            if (v538 < 0)
            {
              v535 += 7;
              unint64_t v342 = v537;
              BOOL v15 = v536++ > 8;
              if (v15) {
                goto LABEL_625;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v347 = 0;
            }
          }
          break;
        }
LABEL_811:
        *((void *)this + 8) = v347;
        goto LABEL_21;
      case 0x59u:
        *v8 |= 0x1000uLL;
        unint64_t v350 = *((void *)a2 + 1);
        unint64_t v351 = *((void *)a2 + 2);
        uint64_t v352 = *(void *)a2;
        if (v350 <= 0xFFFFFFFFFFFFFFF5 && v350 + 10 <= v351)
        {
          char v353 = 0;
          unsigned int v354 = 0;
          uint64_t v355 = 0;
          do
          {
            unint64_t v356 = v350 + 1;
            *((void *)a2 + 1) = v350 + 1;
            char v357 = *(unsigned char *)(v352 + v350);
            v355 |= (unint64_t)(v357 & 0x7F) << v353;
            if ((v357 & 0x80) == 0) {
              goto LABEL_815;
            }
            v353 += 7;
            unint64_t v350 = v356;
            BOOL v15 = v354++ > 8;
          }
          while (!v15);
LABEL_632:
          uint64_t v355 = 0;
          goto LABEL_815;
        }
        char v539 = 0;
        unsigned int v540 = 0;
        uint64_t v355 = 0;
        if (v351 <= v350) {
          unint64_t v351 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v351 == v350)
          {
            uint64_t v355 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v541 = v350 + 1;
            char v542 = *(unsigned char *)(v352 + v350);
            *((void *)a2 + 1) = v541;
            v355 |= (unint64_t)(v542 & 0x7F) << v539;
            if (v542 < 0)
            {
              v539 += 7;
              unint64_t v350 = v541;
              BOOL v15 = v540++ > 8;
              if (v15) {
                goto LABEL_632;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v355 = 0;
            }
          }
          break;
        }
LABEL_815:
        *((void *)this + 13) = v355;
        goto LABEL_21;
      case 0x64u:
        *v8 |= 0x4000000000uLL;
        unint64_t v358 = *((void *)a2 + 1);
        unint64_t v359 = *((void *)a2 + 2);
        uint64_t v360 = *(void *)a2;
        if (v358 <= 0xFFFFFFFFFFFFFFF5 && v358 + 10 <= v359)
        {
          char v361 = 0;
          unsigned int v362 = 0;
          uint64_t v363 = 0;
          do
          {
            unint64_t v364 = v358 + 1;
            *((void *)a2 + 1) = v358 + 1;
            char v365 = *(unsigned char *)(v360 + v358);
            v363 |= (unint64_t)(v365 & 0x7F) << v361;
            if ((v365 & 0x80) == 0) {
              goto LABEL_819;
            }
            v361 += 7;
            unint64_t v358 = v364;
            BOOL v15 = v362++ > 8;
          }
          while (!v15);
LABEL_639:
          uint64_t v363 = 0;
          goto LABEL_819;
        }
        char v543 = 0;
        unsigned int v544 = 0;
        uint64_t v363 = 0;
        if (v359 <= v358) {
          unint64_t v359 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v359 == v358)
          {
            uint64_t v363 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v545 = v358 + 1;
            char v546 = *(unsigned char *)(v360 + v358);
            *((void *)a2 + 1) = v545;
            v363 |= (unint64_t)(v546 & 0x7F) << v543;
            if (v546 < 0)
            {
              v543 += 7;
              unint64_t v358 = v545;
              BOOL v15 = v544++ > 8;
              if (v15) {
                goto LABEL_639;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v363 = 0;
            }
          }
          break;
        }
LABEL_819:
        *((void *)this + 39) = v363;
        goto LABEL_21;
      case 0x65u:
        *v8 |= 0x1000000000uLL;
        unint64_t v366 = *((void *)a2 + 1);
        unint64_t v367 = *((void *)a2 + 2);
        uint64_t v368 = *(void *)a2;
        if (v366 <= 0xFFFFFFFFFFFFFFF5 && v366 + 10 <= v367)
        {
          char v369 = 0;
          unsigned int v370 = 0;
          uint64_t v371 = 0;
          do
          {
            unint64_t v372 = v366 + 1;
            *((void *)a2 + 1) = v366 + 1;
            char v373 = *(unsigned char *)(v368 + v366);
            v371 |= (unint64_t)(v373 & 0x7F) << v369;
            if ((v373 & 0x80) == 0) {
              goto LABEL_823;
            }
            v369 += 7;
            unint64_t v366 = v372;
            BOOL v15 = v370++ > 8;
          }
          while (!v15);
LABEL_646:
          uint64_t v371 = 0;
          goto LABEL_823;
        }
        char v547 = 0;
        unsigned int v548 = 0;
        uint64_t v371 = 0;
        if (v367 <= v366) {
          unint64_t v367 = *((void *)a2 + 1);
        }
        break;
      case 0x66u:
        *v8 |= 0x2000000000uLL;
        unint64_t v374 = *((void *)a2 + 1);
        if (v374 <= 0xFFFFFFFFFFFFFFF7 && v374 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 38) = *(void *)(*(void *)a2 + v374);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_21;
      default:
        goto LABEL_20;
    }
    while (1)
    {
      if (v367 == v366)
      {
        uint64_t v371 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_823;
      }
      unint64_t v549 = v366 + 1;
      char v550 = *(unsigned char *)(v368 + v366);
      *((void *)a2 + 1) = v549;
      v371 |= (unint64_t)(v550 & 0x7F) << v547;
      if ((v550 & 0x80) == 0) {
        break;
      }
      v547 += 7;
      unint64_t v366 = v549;
      BOOL v15 = v548++ > 8;
      if (v15) {
        goto LABEL_646;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v371 = 0;
    }
LABEL_823:
    *((void *)this + 37) = v371;
LABEL_21:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = (uint64_t *)(this + 364);
  uint64_t v5 = *(void *)(this + 364);
  if ((v5 & 0x40000000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    uint64_t v5 = *v4;
    if ((*v4 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }
  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v5 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_23:
    if ((v5 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v5 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v5 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_26:
    if ((v5 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v5 & 2) == 0) {
      goto LABEL_29;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_37:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_38:
    if ((v5 & 4) == 0) {
      goto LABEL_39;
    }
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_39:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_40:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_41:
    if ((v5 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_43:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_45;
    }
LABEL_90:
    this = PB::Writer::writeVarInt(a2);
    if ((*v4 & 0x2000000000) == 0) {
      return this;
    }
    goto LABEL_91;
  }
LABEL_89:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000000) != 0) {
    goto LABEL_90;
  }
LABEL_45:
  if ((v5 & 0x2000000000) == 0) {
    return this;
  }
LABEL_91:
  double v6 = *(double *)(v3 + 304);
  return PB::Writer::write(a2, v6);
}

BOOL CMMsl::FallDetectionReplay::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 364);
  uint64_t v3 = *(void *)(a2 + 364);
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(void *)(a1 + 248) != *(void *)(a2 + 248)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(void *)(a1 + 256) != *(void *)(a2 + 256)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(void *)(a1 + 160) != *(void *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(void *)(a1 + 168) != *(void *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(void *)(a1 + 176) != *(void *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(void *)(a1 + 320) != *(void *)(a2 + 320)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(void *)(a1 + 344) != *(void *)(a2 + 344)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(void *)(a1 + 328) != *(void *)(a2 + 328)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(void *)(a1 + 336) != *(void *)(a2 + 336)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(void *)(a1 + 352) != *(void *)(a2 + 352)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(_DWORD *)(a1 + 360) != *(_DWORD *)(a2 + 360)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(void *)(a1 + 200) != *(void *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(void *)(a1 + 224) != *(void *)(a2 + 224)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(void *)(a1 + 208) != *(void *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(void *)(a1 + 216) != *(void *)(a2 + 216)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(void *)(a1 + 184) != *(void *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(void *)(a1 + 192) != *(void *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(void *)(a1 + 72) != *(void *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(void *)(a1 + 80) != *(void *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(void *)(a1 + 88) != *(void *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(void *)(a1 + 96) != *(void *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(void *)(a1 + 120) != *(void *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(void *)(a1 + 128) != *(void *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(void *)(a1 + 288) != *(void *)(a2 + 288)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(void *)(a1 + 280) != *(void *)(a2 + 280)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(void *)(a1 + 272) != *(void *)(a2 + 272)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(void *)(a1 + 264) != *(void *)(a2 + 264)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(void *)(a1 + 240) != *(void *)(a2 + 240)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(void *)(a1 + 232) != *(void *)(a2 + 232)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(void *)(a1 + 112) != *(void *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(void *)(a1 + 136) != *(void *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(void *)(a1 + 152) != *(void *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(void *)(a1 + 144) != *(void *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(void *)(a1 + 104) != *(void *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(void *)(a1 + 312) != *(void *)(a2 + 312)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(void *)(a1 + 296) != *(void *)(a2 + 296)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x2000000000) == 0;
  if ((v2 & 0x2000000000) != 0) {
    return (v3 & 0x2000000000) != 0 && *(double *)(a1 + 304) == *(double *)(a2 + 304);
  }
  return v4;
}

uint64_t CMMsl::FallDetectionReplay::hash_value(CMMsl::FallDetectionReplay *this)
{
  uint64_t v1 = *(void *)((char *)this + 364);
  if ((v1 & 0x40000000) != 0)
  {
    uint64_t v2 = *((void *)this + 31);
    if ((v1 & 0x80000000) != 0)
    {
LABEL_3:
      uint64_t v47 = *((void *)this + 32);
      if ((v1 & 0x80000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_51;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v47 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_4:
    uint64_t v46 = *((void *)this + 20);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v46 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_5:
    uint64_t v45 = *((void *)this + 21);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v45 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_6:
    uint64_t v44 = *((void *)this + 22);
    if ((v1 & 0x8000000000) != 0) {
      goto LABEL_7;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v44 = 0;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_7:
    uint64_t v43 = *((void *)this + 40);
    if ((v1 & 0x40000000000) != 0) {
      goto LABEL_8;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v43 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_8:
    uint64_t v42 = *((void *)this + 43);
    if ((v1 & 0x10000000000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v42 = 0;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_9:
    uint64_t v41 = *((void *)this + 41);
    if ((v1 & 0x20000000000) != 0) {
      goto LABEL_10;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v41 = 0;
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_10:
    uint64_t v40 = *((void *)this + 42);
    if ((v1 & 0x80000000000) != 0) {
      goto LABEL_11;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v40 = 0;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_11:
    uint64_t v39 = *((void *)this + 44);
    if ((v1 & 0x100000000000) != 0) {
      goto LABEL_12;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v39 = 0;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_12:
    uint64_t v38 = *((unsigned int *)this + 90);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_13;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v38 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_13:
    uint64_t v37 = *((void *)this + 25);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t v37 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_14:
    uint64_t v36 = *((void *)this + 28);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_15;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v36 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_15:
    uint64_t v35 = *((void *)this + 26);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v35 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_16:
    uint64_t v34 = *((void *)this + 27);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t v34 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_17:
    uint64_t v33 = *((void *)this + 23);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v33 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_18:
    uint64_t v32 = *((void *)this + 24);
    if ((v1 & 0x20) != 0) {
      goto LABEL_19;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v32 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_19:
    uint64_t v31 = *((void *)this + 6);
    if ((v1 & 8) != 0) {
      goto LABEL_20;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v31 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_20:
    uint64_t v30 = *((void *)this + 4);
    if (v1) {
      goto LABEL_21;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v30 = 0;
  if (v1)
  {
LABEL_21:
    uint64_t v3 = *((void *)this + 1);
    if ((v1 & 0x40) != 0) {
      goto LABEL_22;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v3 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_22:
    uint64_t v4 = *((void *)this + 7);
    if ((v1 & 0x100) != 0) {
      goto LABEL_23;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v4 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_23:
    uint64_t v5 = *((void *)this + 9);
    if ((v1 & 0x10) != 0) {
      goto LABEL_24;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t v5 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_24:
    uint64_t v6 = *((void *)this + 5);
    if ((v1 & 0x200) != 0) {
      goto LABEL_25;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v6 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_25:
    uint64_t v7 = *((void *)this + 10);
    if ((v1 & 0x400) != 0) {
      goto LABEL_26;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v7 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_26:
    uint64_t v8 = *((void *)this + 11);
    if ((v1 & 0x800) != 0) {
      goto LABEL_27;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v8 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_27:
    uint64_t v9 = *((void *)this + 12);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t v9 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_28:
    uint64_t v10 = *((void *)this + 15);
    if ((v1 & 2) != 0) {
      goto LABEL_29;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t v10 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_29:
    uint64_t v11 = *((void *)this + 2);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v11 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_30:
    uint64_t v12 = *((void *)this + 16);
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t v12 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_31:
    uint64_t v13 = *((void *)this + 36);
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t v13 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_32:
    uint64_t v14 = *((void *)this + 35);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t v14 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_33:
    uint64_t v15 = *((void *)this + 34);
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_34;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v15 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_34:
    uint64_t v16 = *((void *)this + 33);
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v16 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_35:
    uint64_t v17 = *((void *)this + 30);
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_36;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v17 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_36:
    uint64_t v18 = *((void *)this + 29);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_37;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v18 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_37:
    uint64_t v19 = *((void *)this + 14);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t v19 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_38:
    uint64_t v20 = *((void *)this + 17);
    if ((v1 & 4) != 0) {
      goto LABEL_39;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t v20 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_39:
    uint64_t v21 = *((void *)this + 3);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v21 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_40:
    uint64_t v22 = *((void *)this + 19);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t v22 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_41:
    uint64_t v23 = *((void *)this + 18);
    if ((v1 & 0x80) != 0) {
      goto LABEL_42;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t v23 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_42:
    uint64_t v24 = *((void *)this + 8);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v24 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_43:
    uint64_t v25 = *((void *)this + 13);
    if ((v1 & 0x4000000000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v25 = 0;
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_44:
    uint64_t v26 = *((void *)this + 39);
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_45;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t v26 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_45:
    uint64_t v27 = *((void *)this + 37);
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_46;
    }
LABEL_93:
    double v28 = 0.0;
    return v47 ^ v2 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v32 ^ v31 ^ v30 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(void *)&v28;
  }
LABEL_92:
  uint64_t v27 = 0;
  if ((v1 & 0x2000000000) == 0) {
    goto LABEL_93;
  }
LABEL_46:
  double v28 = *((double *)this + 38);
  if (v28 == 0.0) {
    double v28 = 0.0;
  }
  return v47 ^ v2 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v32 ^ v31 ^ v30 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(void *)&v28;
}

void *CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(void *this)
{
  *this = &unk_270641758;
  *(void *)((char *)this + 156) = 0;
  return this;
}

{
  *this = &unk_270641758;
  *(void *)((char *)this + 156) = 0;
  return this;
}

void CMMsl::FallDetectionStateMachine::~FallDetectionStateMachine(CMMsl::FallDetectionStateMachine *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(CMMsl::FallDetectionStateMachine *this, const CMMsl::FallDetectionStateMachine *a2)
{
  *(void *)this = &unk_270641758;
  *(void *)((char *)this + 156) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    uint64_t v3 = 4;
    *(void *)((char *)this + 156) = 4;
    *((double *)this + 3) = result;
    uint64_t v2 = *(void *)((char *)a2 + 156);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 4);
    v3 |= 8uLL;
    *(void *)((char *)this + 156) = v3;
    *((void *)this + 4) = v5;
    uint64_t v2 = *(void *)((char *)a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2uLL;
    *(void *)((char *)this + 156) = v3;
    *((void *)this + 2) = v6;
    uint64_t v2 = *(void *)((char *)a2 + 156);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_43;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 16);
  v3 |= 0x400uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 16) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *((_DWORD *)a2 + 15);
  v3 |= 0x200uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 15) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x100uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v7 = *((_DWORD *)a2 + 17);
  v3 |= 0x800uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 17) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v8 = *((_DWORD *)a2 + 37);
  v3 |= 0x80000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 37) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v9 = *((_DWORD *)a2 + 18);
  v3 |= 0x1000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 18) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(result) = *((_DWORD *)a2 + 34);
  v3 |= 0x10000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 34) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(result) = *((_DWORD *)a2 + 35);
  v3 |= 0x20000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 35) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(result) = *((_DWORD *)a2 + 33);
  v3 |= 0x8000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 33) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v10 = *((_DWORD *)a2 + 24);
  v3 |= 0x40000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 24) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(result) = *((_DWORD *)a2 + 20);
  v3 |= 0x4000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 20) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v11 = *((_DWORD *)a2 + 11);
  v3 |= 0x20uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 11) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }
LABEL_54:
  char v12 = *((unsigned char *)a2 + 154);
  v3 |= 0x400000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 154) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }
LABEL_55:
  char v13 = *((unsigned char *)a2 + 153);
  v3 |= 0x200000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 153) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v14 = *((_DWORD *)a2 + 13);
  v3 |= 0x80uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 13) = v14;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v15 = *((_DWORD *)a2 + 36);
  v3 |= 0x40000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 36) = v15;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v16 = *((_DWORD *)a2 + 31);
  v3 |= 0x2000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 31) = v16;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
LABEL_59:
  char v17 = *((unsigned char *)a2 + 155);
  v3 |= 0x800000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 155) = v17;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v18 = *((unsigned char *)a2 + 152);
  v3 |= 0x100000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 152) = v18;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v19 = *((_DWORD *)a2 + 23);
  v3 |= 0x20000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 23) = v19;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v20 = *((_DWORD *)a2 + 27);
  v3 |= 0x200000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 27) = v20;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_29:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v21 = *((_DWORD *)a2 + 28);
  v3 |= 0x400000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 28) = v21;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v22 = *((_DWORD *)a2 + 25);
  v3 |= 0x80000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 25) = v22;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_66;
  }
LABEL_65:
  int v23 = *((_DWORD *)a2 + 21);
  v3 |= 0x8000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 21) = v23;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_32:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(result) = *((_DWORD *)a2 + 29);
  v3 |= 0x800000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 29) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v24 = *((_DWORD *)a2 + 26);
  v3 |= 0x100000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 26) = v24;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(result) = *((_DWORD *)a2 + 32);
  v3 |= 0x4000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 32) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x10) == 0) {
      goto LABEL_36;
    }
    goto LABEL_70;
  }
LABEL_69:
  int v25 = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 30) = v25;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_36:
    if ((v2 & 0x40) == 0) {
      goto LABEL_37;
    }
    goto LABEL_71;
  }
LABEL_70:
  int v26 = *((_DWORD *)a2 + 10);
  v3 |= 0x10uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 10) = v26;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x40) == 0)
  {
LABEL_37:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_72;
  }
LABEL_71:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v3 |= 0x40uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 12) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_38:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_73;
  }
LABEL_72:
  int v27 = *((_DWORD *)a2 + 22);
  v3 |= 0x10000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 22) = v27;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_39:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_74:
    double result = *((double *)a2 + 1);
    *(void *)((char *)this + 156) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_73:
  int v28 = *((_DWORD *)a2 + 19);
  v3 |= 0x2000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 19) = v28;
  if (*(void *)((unsigned char *)a2 + 156)) {
    goto LABEL_74;
  }
  return result;
}

CMMsl *CMMsl::FallDetectionStateMachine::operator=(CMMsl *a1, const CMMsl::FallDetectionStateMachine *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallDetectionStateMachine::FallDetectionStateMachine((CMMsl::FallDetectionStateMachine *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionStateMachine *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionStateMachine *a2, CMMsl::FallDetectionStateMachine *a3)
{
  uint64_t v3 = *(void *)((char *)this + 156);
  *(void *)((char *)this + 156) = *(void *)((char *)a2 + 156);
  *(void *)((char *)a2 + 156) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v6) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  LODWORD(v6) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  LODWORD(v4) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v4;
  LODWORD(v6) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v6;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 154);
  *((unsigned char *)this + 154) = *((unsigned char *)a2 + 154);
  *((unsigned char *)a2 + 154) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 153);
  *((unsigned char *)this + 153) = *((unsigned char *)a2 + 153);
  *((unsigned char *)a2 + 153) = v6;
  LODWORD(v6) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  LODWORD(v6) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v6;
  LODWORD(v6) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 155);
  *((unsigned char *)this + 155) = *((unsigned char *)a2 + 155);
  *((unsigned char *)a2 + 155) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 152);
  *((unsigned char *)this + 152) = *((unsigned char *)a2 + 152);
  *((unsigned char *)a2 + 152) = v6;
  LODWORD(v6) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v6;
  LODWORD(v6) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  LODWORD(v6) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v6;
  LODWORD(v6) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v6;
  LODWORD(v6) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v6) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v6;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v6) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v6) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641758;
  *(void *)(a1 + 156) = *(void *)(a2 + 156);
  *(void *)(a2 + 156) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::FallDetectionStateMachine::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionStateMachine::FallDetectionStateMachine((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionStateMachine *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionStateMachine::formatText(CMMsl::FallDetectionStateMachine *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "conisderedSOS");
    uint64_t v5 = *(void *)((char *)this + 156);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x100000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaSteps");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "didCancelSOS");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "distanceTraveled", *((float *)this + 12));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "fallAlertUndelayedTimestamp", *((double *)this + 1));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "fallTime");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "fromState");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "gyroMaxMean", *((float *)this + 14));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 3));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "isActive");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "isStand");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "magnitudeDiffUnity", *((float *)this + 15));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "maxAccelStdAxis", *((float *)this + 16));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "maxNumQuiescentBins");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "maxNumStaticBins");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "nominalQuiescentThreshold");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "normalizedIQR", *((float *)this + 20));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "numActiveBins");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "numCyclingEpochs");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "numNonzeroStepEpochs");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "numPeaks");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "numQuiescentBins");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "numSharpPeaks");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "numStandBins");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "numStaticBins");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "onBodyFeature", *((float *)this + 29));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "operatingMode");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 8) == 0) {
      goto LABEL_30;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "quiescentThreshold");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 8) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "sensorTime");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "sentFallAlert");
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "sharpPeaksDelaySpread", *((float *)this + 32));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "sumHighQPeaksInDecLowFreqFFT", *((float *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "sumHighQPeaksInHighFreqFFT", *((float *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "sumHighQPeaksInLowFreqFFT", *((float *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "toState");
  if ((*(void *)((unsigned char *)this + 156) & 0x80000000) != 0) {
LABEL_37:
  }
    PB::TextFormatter::format(a2, "totalNumStaticBins");
LABEL_38:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FallDetectionStateMachine::readFrom(CMMsl::FallDetectionStateMachine *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(void *)((char *)this + 156) |= 4uLL;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_212;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v21);
        goto LABEL_362;
      case 2u:
        *(void *)((char *)this + 156) |= 8uLL;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = *(void *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          do
          {
            unint64_t v28 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              goto LABEL_366;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v14 = v26++ > 8;
          }
          while (!v14);
LABEL_219:
          uint64_t v27 = 0;
          goto LABEL_366;
        }
        char v210 = 0;
        unsigned int v211 = 0;
        uint64_t v27 = 0;
        if (v23 <= v22) {
          unint64_t v23 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v23 == v22)
          {
            uint64_t v27 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v212 = v22 + 1;
            char v213 = *(unsigned char *)(v24 + v22);
            *((void *)a2 + 1) = v212;
            v27 |= (unint64_t)(v213 & 0x7F) << v210;
            if (v213 < 0)
            {
              v210 += 7;
              unint64_t v22 = v212;
              BOOL v14 = v211++ > 8;
              if (v14) {
                goto LABEL_219;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v27 = 0;
            }
          }
          break;
        }
LABEL_366:
        *((void *)this + 4) = v27;
        goto LABEL_20;
      case 3u:
        *(void *)((char *)this + 156) |= 2uLL;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        uint64_t v32 = *(void *)a2;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          do
          {
            unint64_t v36 = v30 + 1;
            *((void *)a2 + 1) = v30 + 1;
            char v37 = *(unsigned char *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0) {
              goto LABEL_370;
            }
            v33 += 7;
            unint64_t v30 = v36;
            BOOL v14 = v34++ > 8;
          }
          while (!v14);
LABEL_226:
          uint64_t v35 = 0;
          goto LABEL_370;
        }
        char v214 = 0;
        unsigned int v215 = 0;
        uint64_t v35 = 0;
        if (v31 <= v30) {
          unint64_t v31 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v31 == v30)
          {
            uint64_t v35 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v216 = v30 + 1;
            char v217 = *(unsigned char *)(v32 + v30);
            *((void *)a2 + 1) = v216;
            v35 |= (unint64_t)(v217 & 0x7F) << v214;
            if (v217 < 0)
            {
              v214 += 7;
              unint64_t v30 = v216;
              BOOL v14 = v215++ > 8;
              if (v14) {
                goto LABEL_226;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v35 = 0;
            }
          }
          break;
        }
LABEL_370:
        *((void *)this + 2) = v35;
        goto LABEL_20;
      case 4u:
        *(void *)((char *)this + 156) |= 0x400uLL;
        unint64_t v38 = *((void *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
          goto LABEL_212;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v38);
        goto LABEL_194;
      case 5u:
        *(void *)((char *)this + 156) |= 0x200uLL;
        unint64_t v39 = *((void *)a2 + 1);
        if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
          goto LABEL_212;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v39);
        goto LABEL_194;
      case 6u:
        *(void *)((char *)this + 156) |= 0x100uLL;
        unint64_t v40 = *((void *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2)) {
          goto LABEL_212;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v40);
        goto LABEL_194;
      case 7u:
        *(void *)((char *)this + 156) |= 0x800uLL;
        unint64_t v41 = *((void *)a2 + 1);
        unint64_t v42 = *((void *)a2 + 2);
        uint64_t v43 = *(void *)a2;
        if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v46 = 0;
          do
          {
            unint64_t v47 = v41 + 1;
            *((void *)a2 + 1) = v41 + 1;
            char v48 = *(unsigned char *)(v43 + v41);
            v46 |= (unint64_t)(v48 & 0x7F) << v44;
            if ((v48 & 0x80) == 0) {
              goto LABEL_374;
            }
            v44 += 7;
            unint64_t v41 = v47;
            BOOL v14 = v45++ > 8;
          }
          while (!v14);
LABEL_233:
          LODWORD(v46) = 0;
          goto LABEL_374;
        }
        char v218 = 0;
        unsigned int v219 = 0;
        uint64_t v46 = 0;
        if (v42 <= v41) {
          unint64_t v42 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v42 == v41)
          {
            LODWORD(v46) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v220 = v41 + 1;
            char v221 = *(unsigned char *)(v43 + v41);
            *((void *)a2 + 1) = v220;
            v46 |= (unint64_t)(v221 & 0x7F) << v218;
            if (v221 < 0)
            {
              v218 += 7;
              unint64_t v41 = v220;
              BOOL v14 = v219++ > 8;
              if (v14) {
                goto LABEL_233;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v46) = 0;
            }
          }
          break;
        }
LABEL_374:
        *((_DWORD *)this + 17) = v46;
        goto LABEL_20;
      case 8u:
        *(void *)((char *)this + 156) |= 0x80000000uLL;
        unint64_t v49 = *((void *)a2 + 1);
        unint64_t v50 = *((void *)a2 + 2);
        uint64_t v51 = *(void *)a2;
        if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v54 = 0;
          do
          {
            unint64_t v55 = v49 + 1;
            *((void *)a2 + 1) = v49 + 1;
            char v56 = *(unsigned char *)(v51 + v49);
            v54 |= (unint64_t)(v56 & 0x7F) << v52;
            if ((v56 & 0x80) == 0) {
              goto LABEL_378;
            }
            v52 += 7;
            unint64_t v49 = v55;
            BOOL v14 = v53++ > 8;
          }
          while (!v14);
LABEL_240:
          LODWORD(v54) = 0;
          goto LABEL_378;
        }
        char v222 = 0;
        unsigned int v223 = 0;
        uint64_t v54 = 0;
        if (v50 <= v49) {
          unint64_t v50 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v50 == v49)
          {
            LODWORD(v54) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v224 = v49 + 1;
            char v225 = *(unsigned char *)(v51 + v49);
            *((void *)a2 + 1) = v224;
            v54 |= (unint64_t)(v225 & 0x7F) << v222;
            if (v225 < 0)
            {
              v222 += 7;
              unint64_t v49 = v224;
              BOOL v14 = v223++ > 8;
              if (v14) {
                goto LABEL_240;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v54) = 0;
            }
          }
          break;
        }
LABEL_378:
        *((_DWORD *)this + 37) = v54;
        goto LABEL_20;
      case 9u:
        *(void *)((char *)this + 156) |= 0x1000uLL;
        unint64_t v57 = *((void *)a2 + 1);
        unint64_t v58 = *((void *)a2 + 2);
        uint64_t v59 = *(void *)a2;
        if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v62 = 0;
          do
          {
            unint64_t v63 = v57 + 1;
            *((void *)a2 + 1) = v57 + 1;
            char v64 = *(unsigned char *)(v59 + v57);
            v62 |= (unint64_t)(v64 & 0x7F) << v60;
            if ((v64 & 0x80) == 0) {
              goto LABEL_382;
            }
            v60 += 7;
            unint64_t v57 = v63;
            BOOL v14 = v61++ > 8;
          }
          while (!v14);
LABEL_247:
          LODWORD(v62) = 0;
          goto LABEL_382;
        }
        char v226 = 0;
        unsigned int v227 = 0;
        uint64_t v62 = 0;
        if (v58 <= v57) {
          unint64_t v58 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v58 == v57)
          {
            LODWORD(v62) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v228 = v57 + 1;
            char v229 = *(unsigned char *)(v59 + v57);
            *((void *)a2 + 1) = v228;
            v62 |= (unint64_t)(v229 & 0x7F) << v226;
            if (v229 < 0)
            {
              v226 += 7;
              unint64_t v57 = v228;
              BOOL v14 = v227++ > 8;
              if (v14) {
                goto LABEL_247;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v62) = 0;
            }
          }
          break;
        }
LABEL_382:
        *((_DWORD *)this + 18) = v62;
        goto LABEL_20;
      case 0xAu:
        *(void *)((char *)this + 156) |= 0x10000000uLL;
        unint64_t v65 = *((void *)a2 + 1);
        if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)a2 + 2)) {
          goto LABEL_212;
        }
        *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v65);
        goto LABEL_194;
      case 0xBu:
        *(void *)((char *)this + 156) |= 0x20000000uLL;
        unint64_t v66 = *((void *)a2 + 1);
        if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)a2 + 2)) {
          goto LABEL_212;
        }
        *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v66);
        goto LABEL_194;
      case 0xCu:
        *(void *)((char *)this + 156) |= 0x8000000uLL;
        unint64_t v67 = *((void *)a2 + 1);
        if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)a2 + 2)) {
          goto LABEL_212;
        }
        *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v67);
        goto LABEL_194;
      case 0xDu:
        *(void *)((char *)this + 156) |= 0x40000uLL;
        unint64_t v68 = *((void *)a2 + 1);
        unint64_t v69 = *((void *)a2 + 2);
        uint64_t v70 = *(void *)a2;
        if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
        {
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v73 = 0;
          do
          {
            unint64_t v74 = v68 + 1;
            *((void *)a2 + 1) = v68 + 1;
            char v75 = *(unsigned char *)(v70 + v68);
            v73 |= (unint64_t)(v75 & 0x7F) << v71;
            if ((v75 & 0x80) == 0) {
              goto LABEL_386;
            }
            v71 += 7;
            unint64_t v68 = v74;
            BOOL v14 = v72++ > 8;
          }
          while (!v14);
LABEL_254:
          LODWORD(v73) = 0;
          goto LABEL_386;
        }
        char v230 = 0;
        unsigned int v231 = 0;
        uint64_t v73 = 0;
        if (v69 <= v68) {
          unint64_t v69 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v69 == v68)
          {
            LODWORD(v73) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v232 = v68 + 1;
            char v233 = *(unsigned char *)(v70 + v68);
            *((void *)a2 + 1) = v232;
            v73 |= (unint64_t)(v233 & 0x7F) << v230;
            if (v233 < 0)
            {
              v230 += 7;
              unint64_t v68 = v232;
              BOOL v14 = v231++ > 8;
              if (v14) {
                goto LABEL_254;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v73) = 0;
            }
          }
          break;
        }
LABEL_386:
        *((_DWORD *)this + 24) = v73;
        goto LABEL_20;
      case 0xEu:
        *(void *)((char *)this + 156) |= 0x4000uLL;
        unint64_t v76 = *((void *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)a2 + 2)) {
          goto LABEL_212;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v76);
        goto LABEL_194;
      case 0xFu:
        *(void *)((char *)this + 156) |= 0x20uLL;
        unint64_t v77 = *((void *)a2 + 1);
        unint64_t v78 = *((void *)a2 + 2);
        uint64_t v79 = *(void *)a2;
        if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
        {
          char v80 = 0;
          unsigned int v81 = 0;
          uint64_t v82 = 0;
          do
          {
            unint64_t v83 = v77 + 1;
            *((void *)a2 + 1) = v77 + 1;
            char v84 = *(unsigned char *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0) {
              goto LABEL_390;
            }
            v80 += 7;
            unint64_t v77 = v83;
            BOOL v14 = v81++ > 8;
          }
          while (!v14);
LABEL_261:
          LODWORD(v82) = 0;
          goto LABEL_390;
        }
        char v234 = 0;
        unsigned int v235 = 0;
        uint64_t v82 = 0;
        if (v78 <= v77) {
          unint64_t v78 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v78 == v77)
          {
            LODWORD(v82) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v236 = v77 + 1;
            char v237 = *(unsigned char *)(v79 + v77);
            *((void *)a2 + 1) = v236;
            v82 |= (unint64_t)(v237 & 0x7F) << v234;
            if (v237 < 0)
            {
              v234 += 7;
              unint64_t v77 = v236;
              BOOL v14 = v235++ > 8;
              if (v14) {
                goto LABEL_261;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v82) = 0;
            }
          }
          break;
        }
LABEL_390:
        *((_DWORD *)this + 11) = v82;
        goto LABEL_20;
      case 0x10u:
        *(void *)((char *)this + 156) |= 0x400000000uLL;
        unint64_t v85 = *((void *)a2 + 1);
        if (v85 >= *((void *)a2 + 2))
        {
          BOOL v88 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v86 = v85 + 1;
          int v87 = *(unsigned __int8 *)(*(void *)a2 + v85);
          *((void *)a2 + 1) = v86;
          BOOL v88 = v87 != 0;
        }
        *((unsigned char *)this + 154) = v88;
        goto LABEL_20;
      case 0x11u:
        *(void *)((char *)this + 156) |= 0x200000000uLL;
        unint64_t v89 = *((void *)a2 + 1);
        if (v89 >= *((void *)a2 + 2))
        {
          BOOL v92 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v90 = v89 + 1;
          int v91 = *(unsigned __int8 *)(*(void *)a2 + v89);
          *((void *)a2 + 1) = v90;
          BOOL v92 = v91 != 0;
        }
        *((unsigned char *)this + 153) = v92;
        goto LABEL_20;
      case 0x12u:
        *(void *)((char *)this + 156) |= 0x80uLL;
        unint64_t v93 = *((void *)a2 + 1);
        unint64_t v94 = *((void *)a2 + 2);
        uint64_t v95 = *(void *)a2;
        if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
        {
          char v96 = 0;
          unsigned int v97 = 0;
          uint64_t v98 = 0;
          do
          {
            unint64_t v99 = v93 + 1;
            *((void *)a2 + 1) = v93 + 1;
            char v100 = *(unsigned char *)(v95 + v93);
            v98 |= (unint64_t)(v100 & 0x7F) << v96;
            if ((v100 & 0x80) == 0) {
              goto LABEL_394;
            }
            v96 += 7;
            unint64_t v93 = v99;
            BOOL v14 = v97++ > 8;
          }
          while (!v14);
LABEL_272:
          LODWORD(v98) = 0;
          goto LABEL_394;
        }
        char v238 = 0;
        unsigned int v239 = 0;
        uint64_t v98 = 0;
        if (v94 <= v93) {
          unint64_t v94 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v94 == v93)
          {
            LODWORD(v98) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v240 = v93 + 1;
            char v241 = *(unsigned char *)(v95 + v93);
            *((void *)a2 + 1) = v240;
            v98 |= (unint64_t)(v241 & 0x7F) << v238;
            if (v241 < 0)
            {
              v238 += 7;
              unint64_t v93 = v240;
              BOOL v14 = v239++ > 8;
              if (v14) {
                goto LABEL_272;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v98) = 0;
            }
          }
          break;
        }
LABEL_394:
        *((_DWORD *)this + 13) = v98;
        goto LABEL_20;
      case 0x13u:
        *(void *)((char *)this + 156) |= 0x40000000uLL;
        unint64_t v101 = *((void *)a2 + 1);
        unint64_t v102 = *((void *)a2 + 2);
        uint64_t v103 = *(void *)a2;
        if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
        {
          char v104 = 0;
          unsigned int v105 = 0;
          uint64_t v106 = 0;
          do
          {
            unint64_t v107 = v101 + 1;
            *((void *)a2 + 1) = v101 + 1;
            char v108 = *(unsigned char *)(v103 + v101);
            v106 |= (unint64_t)(v108 & 0x7F) << v104;
            if ((v108 & 0x80) == 0) {
              goto LABEL_398;
            }
            v104 += 7;
            unint64_t v101 = v107;
            BOOL v14 = v105++ > 8;
          }
          while (!v14);
LABEL_279:
          LODWORD(v106) = 0;
          goto LABEL_398;
        }
        char v242 = 0;
        unsigned int v243 = 0;
        uint64_t v106 = 0;
        if (v102 <= v101) {
          unint64_t v102 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v102 == v101)
          {
            LODWORD(v106) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v244 = v101 + 1;
            char v245 = *(unsigned char *)(v103 + v101);
            *((void *)a2 + 1) = v244;
            v106 |= (unint64_t)(v245 & 0x7F) << v242;
            if (v245 < 0)
            {
              v242 += 7;
              unint64_t v101 = v244;
              BOOL v14 = v243++ > 8;
              if (v14) {
                goto LABEL_279;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v106) = 0;
            }
          }
          break;
        }
LABEL_398:
        *((_DWORD *)this + 36) = v106;
        goto LABEL_20;
      case 0x14u:
        *(void *)((char *)this + 156) |= 0x2000000uLL;
        unint64_t v109 = *((void *)a2 + 1);
        unint64_t v110 = *((void *)a2 + 2);
        uint64_t v111 = *(void *)a2;
        if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
        {
          char v112 = 0;
          unsigned int v113 = 0;
          uint64_t v114 = 0;
          do
          {
            unint64_t v115 = v109 + 1;
            *((void *)a2 + 1) = v109 + 1;
            char v116 = *(unsigned char *)(v111 + v109);
            v114 |= (unint64_t)(v116 & 0x7F) << v112;
            if ((v116 & 0x80) == 0) {
              goto LABEL_402;
            }
            v112 += 7;
            unint64_t v109 = v115;
            BOOL v14 = v113++ > 8;
          }
          while (!v14);
LABEL_286:
          LODWORD(v114) = 0;
          goto LABEL_402;
        }
        char v246 = 0;
        unsigned int v247 = 0;
        uint64_t v114 = 0;
        if (v110 <= v109) {
          unint64_t v110 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v110 == v109)
          {
            LODWORD(v114) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v248 = v109 + 1;
            char v249 = *(unsigned char *)(v111 + v109);
            *((void *)a2 + 1) = v248;
            v114 |= (unint64_t)(v249 & 0x7F) << v246;
            if (v249 < 0)
            {
              v246 += 7;
              unint64_t v109 = v248;
              BOOL v14 = v247++ > 8;
              if (v14) {
                goto LABEL_286;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v114) = 0;
            }
          }
          break;
        }
LABEL_402:
        *((_DWORD *)this + 31) = v114;
        goto LABEL_20;
      case 0x15u:
        *(void *)((char *)this + 156) |= 0x800000000uLL;
        unint64_t v117 = *((void *)a2 + 1);
        if (v117 >= *((void *)a2 + 2))
        {
          BOOL v120 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v118 = v117 + 1;
          int v119 = *(unsigned __int8 *)(*(void *)a2 + v117);
          *((void *)a2 + 1) = v118;
          BOOL v120 = v119 != 0;
        }
        *((unsigned char *)this + 155) = v120;
        goto LABEL_20;
      case 0x16u:
        *(void *)((char *)this + 156) |= 0x100000000uLL;
        unint64_t v121 = *((void *)a2 + 1);
        if (v121 >= *((void *)a2 + 2))
        {
          BOOL v124 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v122 = v121 + 1;
          int v123 = *(unsigned __int8 *)(*(void *)a2 + v121);
          *((void *)a2 + 1) = v122;
          BOOL v124 = v123 != 0;
        }
        *((unsigned char *)this + 152) = v124;
        goto LABEL_20;
      case 0x17u:
        *(void *)((char *)this + 156) |= 0x20000uLL;
        unint64_t v125 = *((void *)a2 + 1);
        unint64_t v126 = *((void *)a2 + 2);
        uint64_t v127 = *(void *)a2;
        if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
        {
          char v128 = 0;
          unsigned int v129 = 0;
          uint64_t v130 = 0;
          do
          {
            unint64_t v131 = v125 + 1;
            *((void *)a2 + 1) = v125 + 1;
            char v132 = *(unsigned char *)(v127 + v125);
            v130 |= (unint64_t)(v132 & 0x7F) << v128;
            if ((v132 & 0x80) == 0) {
              goto LABEL_406;
            }
            v128 += 7;
            unint64_t v125 = v131;
            BOOL v14 = v129++ > 8;
          }
          while (!v14);
LABEL_297:
          LODWORD(v130) = 0;
          goto LABEL_406;
        }
        char v250 = 0;
        unsigned int v251 = 0;
        uint64_t v130 = 0;
        if (v126 <= v125) {
          unint64_t v126 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v126 == v125)
          {
            LODWORD(v130) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v252 = v125 + 1;
            char v253 = *(unsigned char *)(v127 + v125);
            *((void *)a2 + 1) = v252;
            v130 |= (unint64_t)(v253 & 0x7F) << v250;
            if (v253 < 0)
            {
              v250 += 7;
              unint64_t v125 = v252;
              BOOL v14 = v251++ > 8;
              if (v14) {
                goto LABEL_297;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v130) = 0;
            }
          }
          break;
        }
LABEL_406:
        *((_DWORD *)this + 23) = v130;
        goto LABEL_20;
      case 0x18u:
        *(void *)((char *)this + 156) |= 0x200000uLL;
        unint64_t v133 = *((void *)a2 + 1);
        unint64_t v134 = *((void *)a2 + 2);
        uint64_t v135 = *(void *)a2;
        if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
        {
          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v138 = 0;
          do
          {
            unint64_t v139 = v133 + 1;
            *((void *)a2 + 1) = v133 + 1;
            char v140 = *(unsigned char *)(v135 + v133);
            v138 |= (unint64_t)(v140 & 0x7F) << v136;
            if ((v140 & 0x80) == 0) {
              goto LABEL_410;
            }
            v136 += 7;
            unint64_t v133 = v139;
            BOOL v14 = v137++ > 8;
          }
          while (!v14);
LABEL_304:
          LODWORD(v138) = 0;
          goto LABEL_410;
        }
        char v254 = 0;
        unsigned int v255 = 0;
        uint64_t v138 = 0;
        if (v134 <= v133) {
          unint64_t v134 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v134 == v133)
          {
            LODWORD(v138) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v256 = v133 + 1;
            char v257 = *(unsigned char *)(v135 + v133);
            *((void *)a2 + 1) = v256;
            v138 |= (unint64_t)(v257 & 0x7F) << v254;
            if (v257 < 0)
            {
              v254 += 7;
              unint64_t v133 = v256;
              BOOL v14 = v255++ > 8;
              if (v14) {
                goto LABEL_304;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v138) = 0;
            }
          }
          break;
        }
LABEL_410:
        *((_DWORD *)this + 27) = v138;
        goto LABEL_20;
      case 0x19u:
        *(void *)((char *)this + 156) |= 0x400000uLL;
        unint64_t v141 = *((void *)a2 + 1);
        unint64_t v142 = *((void *)a2 + 2);
        uint64_t v143 = *(void *)a2;
        if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
        {
          char v144 = 0;
          unsigned int v145 = 0;
          uint64_t v146 = 0;
          do
          {
            unint64_t v147 = v141 + 1;
            *((void *)a2 + 1) = v141 + 1;
            char v148 = *(unsigned char *)(v143 + v141);
            v146 |= (unint64_t)(v148 & 0x7F) << v144;
            if ((v148 & 0x80) == 0) {
              goto LABEL_414;
            }
            v144 += 7;
            unint64_t v141 = v147;
            BOOL v14 = v145++ > 8;
          }
          while (!v14);
LABEL_311:
          LODWORD(v146) = 0;
          goto LABEL_414;
        }
        char v258 = 0;
        unsigned int v259 = 0;
        uint64_t v146 = 0;
        if (v142 <= v141) {
          unint64_t v142 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v142 == v141)
          {
            LODWORD(v146) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v260 = v141 + 1;
            char v261 = *(unsigned char *)(v143 + v141);
            *((void *)a2 + 1) = v260;
            v146 |= (unint64_t)(v261 & 0x7F) << v258;
            if (v261 < 0)
            {
              v258 += 7;
              unint64_t v141 = v260;
              BOOL v14 = v259++ > 8;
              if (v14) {
                goto LABEL_311;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v146) = 0;
            }
          }
          break;
        }
LABEL_414:
        *((_DWORD *)this + 28) = v146;
        goto LABEL_20;
      case 0x1Au:
        *(void *)((char *)this + 156) |= 0x80000uLL;
        unint64_t v149 = *((void *)a2 + 1);
        unint64_t v150 = *((void *)a2 + 2);
        uint64_t v151 = *(void *)a2;
        if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
        {
          char v152 = 0;
          unsigned int v153 = 0;
          uint64_t v154 = 0;
          do
          {
            unint64_t v155 = v149 + 1;
            *((void *)a2 + 1) = v149 + 1;
            char v156 = *(unsigned char *)(v151 + v149);
            v154 |= (unint64_t)(v156 & 0x7F) << v152;
            if ((v156 & 0x80) == 0) {
              goto LABEL_418;
            }
            v152 += 7;
            unint64_t v149 = v155;
            BOOL v14 = v153++ > 8;
          }
          while (!v14);
LABEL_318:
          LODWORD(v154) = 0;
          goto LABEL_418;
        }
        char v262 = 0;
        unsigned int v263 = 0;
        uint64_t v154 = 0;
        if (v150 <= v149) {
          unint64_t v150 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v150 == v149)
          {
            LODWORD(v154) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v264 = v149 + 1;
            char v265 = *(unsigned char *)(v151 + v149);
            *((void *)a2 + 1) = v264;
            v154 |= (unint64_t)(v265 & 0x7F) << v262;
            if (v265 < 0)
            {
              v262 += 7;
              unint64_t v149 = v264;
              BOOL v14 = v263++ > 8;
              if (v14) {
                goto LABEL_318;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v154) = 0;
            }
          }
          break;
        }
LABEL_418:
        *((_DWORD *)this + 25) = v154;
        goto LABEL_20;
      case 0x1Bu:
        *(void *)((char *)this + 156) |= 0x8000uLL;
        unint64_t v157 = *((void *)a2 + 1);
        unint64_t v158 = *((void *)a2 + 2);
        uint64_t v159 = *(void *)a2;
        if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
        {
          char v160 = 0;
          unsigned int v161 = 0;
          uint64_t v162 = 0;
          do
          {
            unint64_t v163 = v157 + 1;
            *((void *)a2 + 1) = v157 + 1;
            char v164 = *(unsigned char *)(v159 + v157);
            v162 |= (unint64_t)(v164 & 0x7F) << v160;
            if ((v164 & 0x80) == 0) {
              goto LABEL_422;
            }
            v160 += 7;
            unint64_t v157 = v163;
            BOOL v14 = v161++ > 8;
          }
          while (!v14);
LABEL_325:
          LODWORD(v162) = 0;
          goto LABEL_422;
        }
        char v266 = 0;
        unsigned int v267 = 0;
        uint64_t v162 = 0;
        if (v158 <= v157) {
          unint64_t v158 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v158 == v157)
          {
            LODWORD(v162) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v268 = v157 + 1;
            char v269 = *(unsigned char *)(v159 + v157);
            *((void *)a2 + 1) = v268;
            v162 |= (unint64_t)(v269 & 0x7F) << v266;
            if (v269 < 0)
            {
              v266 += 7;
              unint64_t v157 = v268;
              BOOL v14 = v267++ > 8;
              if (v14) {
                goto LABEL_325;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v162) = 0;
            }
          }
          break;
        }
LABEL_422:
        *((_DWORD *)this + 21) = v162;
        goto LABEL_20;
      case 0x1Cu:
        *(void *)((char *)this + 156) |= 0x800000uLL;
        unint64_t v165 = *((void *)a2 + 1);
        if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((void *)a2 + 2)) {
          goto LABEL_212;
        }
        *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v165);
        goto LABEL_194;
      case 0x1Du:
        *(void *)((char *)this + 156) |= 0x100000uLL;
        unint64_t v166 = *((void *)a2 + 1);
        unint64_t v167 = *((void *)a2 + 2);
        uint64_t v168 = *(void *)a2;
        if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
        {
          char v169 = 0;
          unsigned int v170 = 0;
          uint64_t v171 = 0;
          do
          {
            unint64_t v172 = v166 + 1;
            *((void *)a2 + 1) = v166 + 1;
            char v173 = *(unsigned char *)(v168 + v166);
            v171 |= (unint64_t)(v173 & 0x7F) << v169;
            if ((v173 & 0x80) == 0) {
              goto LABEL_426;
            }
            v169 += 7;
            unint64_t v166 = v172;
            BOOL v14 = v170++ > 8;
          }
          while (!v14);
LABEL_332:
          LODWORD(v171) = 0;
          goto LABEL_426;
        }
        char v270 = 0;
        unsigned int v271 = 0;
        uint64_t v171 = 0;
        if (v167 <= v166) {
          unint64_t v167 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v167 == v166)
          {
            LODWORD(v171) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v272 = v166 + 1;
            char v273 = *(unsigned char *)(v168 + v166);
            *((void *)a2 + 1) = v272;
            v171 |= (unint64_t)(v273 & 0x7F) << v270;
            if (v273 < 0)
            {
              v270 += 7;
              unint64_t v166 = v272;
              BOOL v14 = v271++ > 8;
              if (v14) {
                goto LABEL_332;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v171) = 0;
            }
          }
          break;
        }
LABEL_426:
        *((_DWORD *)this + 26) = v171;
        goto LABEL_20;
      case 0x1Eu:
        *(void *)((char *)this + 156) |= 0x4000000uLL;
        unint64_t v174 = *((void *)a2 + 1);
        if (v174 > 0xFFFFFFFFFFFFFFFBLL || v174 + 4 > *((void *)a2 + 2)) {
          goto LABEL_212;
        }
        *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v174);
        goto LABEL_194;
      case 0x1Fu:
        *(void *)((char *)this + 156) |= 0x1000000uLL;
        unint64_t v175 = *((void *)a2 + 1);
        unint64_t v176 = *((void *)a2 + 2);
        uint64_t v177 = *(void *)a2;
        if (v175 <= 0xFFFFFFFFFFFFFFF5 && v175 + 10 <= v176)
        {
          char v178 = 0;
          unsigned int v179 = 0;
          uint64_t v180 = 0;
          do
          {
            unint64_t v181 = v175 + 1;
            *((void *)a2 + 1) = v175 + 1;
            char v182 = *(unsigned char *)(v177 + v175);
            v180 |= (unint64_t)(v182 & 0x7F) << v178;
            if ((v182 & 0x80) == 0) {
              goto LABEL_430;
            }
            v178 += 7;
            unint64_t v175 = v181;
            BOOL v14 = v179++ > 8;
          }
          while (!v14);
LABEL_339:
          LODWORD(v180) = 0;
          goto LABEL_430;
        }
        char v274 = 0;
        unsigned int v275 = 0;
        uint64_t v180 = 0;
        if (v176 <= v175) {
          unint64_t v176 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v176 == v175)
          {
            LODWORD(v180) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v276 = v175 + 1;
            char v277 = *(unsigned char *)(v177 + v175);
            *((void *)a2 + 1) = v276;
            v180 |= (unint64_t)(v277 & 0x7F) << v274;
            if (v277 < 0)
            {
              v274 += 7;
              unint64_t v175 = v276;
              BOOL v14 = v275++ > 8;
              if (v14) {
                goto LABEL_339;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v180) = 0;
            }
          }
          break;
        }
LABEL_430:
        *((_DWORD *)this + 30) = v180;
        goto LABEL_20;
      case 0x20u:
        *(void *)((char *)this + 156) |= 0x10uLL;
        unint64_t v183 = *((void *)a2 + 1);
        unint64_t v184 = *((void *)a2 + 2);
        uint64_t v185 = *(void *)a2;
        if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
        {
          char v186 = 0;
          unsigned int v187 = 0;
          uint64_t v188 = 0;
          do
          {
            unint64_t v189 = v183 + 1;
            *((void *)a2 + 1) = v183 + 1;
            char v190 = *(unsigned char *)(v185 + v183);
            v188 |= (unint64_t)(v190 & 0x7F) << v186;
            if ((v190 & 0x80) == 0) {
              goto LABEL_434;
            }
            v186 += 7;
            unint64_t v183 = v189;
            BOOL v14 = v187++ > 8;
          }
          while (!v14);
LABEL_346:
          LODWORD(v188) = 0;
          goto LABEL_434;
        }
        char v278 = 0;
        unsigned int v279 = 0;
        uint64_t v188 = 0;
        if (v184 <= v183) {
          unint64_t v184 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v184 == v183)
          {
            LODWORD(v188) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v280 = v183 + 1;
            char v281 = *(unsigned char *)(v185 + v183);
            *((void *)a2 + 1) = v280;
            v188 |= (unint64_t)(v281 & 0x7F) << v278;
            if (v281 < 0)
            {
              v278 += 7;
              unint64_t v183 = v280;
              BOOL v14 = v279++ > 8;
              if (v14) {
                goto LABEL_346;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v188) = 0;
            }
          }
          break;
        }
LABEL_434:
        *((_DWORD *)this + 10) = v188;
        goto LABEL_20;
      case 0x21u:
        *(void *)((char *)this + 156) |= 0x40uLL;
        unint64_t v191 = *((void *)a2 + 1);
        if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((void *)a2 + 2)) {
          goto LABEL_212;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v191);
LABEL_194:
        uint64_t v192 = *((void *)a2 + 1) + 4;
        goto LABEL_195;
      case 0x22u:
        *(void *)((char *)this + 156) |= 0x10000uLL;
        unint64_t v193 = *((void *)a2 + 1);
        unint64_t v194 = *((void *)a2 + 2);
        uint64_t v195 = *(void *)a2;
        if (v193 <= 0xFFFFFFFFFFFFFFF5 && v193 + 10 <= v194)
        {
          char v196 = 0;
          unsigned int v197 = 0;
          uint64_t v198 = 0;
          do
          {
            unint64_t v199 = v193 + 1;
            *((void *)a2 + 1) = v193 + 1;
            char v200 = *(unsigned char *)(v195 + v193);
            v198 |= (unint64_t)(v200 & 0x7F) << v196;
            if ((v200 & 0x80) == 0) {
              goto LABEL_438;
            }
            v196 += 7;
            unint64_t v193 = v199;
            BOOL v14 = v197++ > 8;
          }
          while (!v14);
LABEL_353:
          LODWORD(v198) = 0;
          goto LABEL_438;
        }
        char v282 = 0;
        unsigned int v283 = 0;
        uint64_t v198 = 0;
        if (v194 <= v193) {
          unint64_t v194 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v194 == v193)
          {
            LODWORD(v198) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v284 = v193 + 1;
            char v285 = *(unsigned char *)(v195 + v193);
            *((void *)a2 + 1) = v284;
            v198 |= (unint64_t)(v285 & 0x7F) << v282;
            if (v285 < 0)
            {
              v282 += 7;
              unint64_t v193 = v284;
              BOOL v14 = v283++ > 8;
              if (v14) {
                goto LABEL_353;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v198) = 0;
            }
          }
          break;
        }
LABEL_438:
        *((_DWORD *)this + 22) = v198;
        goto LABEL_20;
      case 0x23u:
        *(void *)((char *)this + 156) |= 0x2000uLL;
        unint64_t v201 = *((void *)a2 + 1);
        unint64_t v202 = *((void *)a2 + 2);
        uint64_t v203 = *(void *)a2;
        if (v201 <= 0xFFFFFFFFFFFFFFF5 && v201 + 10 <= v202)
        {
          char v204 = 0;
          unsigned int v205 = 0;
          uint64_t v206 = 0;
          do
          {
            unint64_t v207 = v201 + 1;
            *((void *)a2 + 1) = v201 + 1;
            char v208 = *(unsigned char *)(v203 + v201);
            v206 |= (unint64_t)(v208 & 0x7F) << v204;
            if ((v208 & 0x80) == 0) {
              goto LABEL_442;
            }
            v204 += 7;
            unint64_t v201 = v207;
            BOOL v14 = v205++ > 8;
          }
          while (!v14);
LABEL_360:
          LODWORD(v206) = 0;
          goto LABEL_442;
        }
        char v286 = 0;
        unsigned int v287 = 0;
        uint64_t v206 = 0;
        if (v202 <= v201) {
          unint64_t v202 = *((void *)a2 + 1);
        }
        break;
      case 0x24u:
        *(void *)((char *)this + 156) |= 1uLL;
        unint64_t v209 = *((void *)a2 + 1);
        if (v209 <= 0xFFFFFFFFFFFFFFF7 && v209 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v209);
LABEL_362:
          uint64_t v192 = *((void *)a2 + 1) + 8;
LABEL_195:
          *((void *)a2 + 1) = v192;
        }
        else
        {
LABEL_212:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v202 == v201)
      {
        LODWORD(v206) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_442;
      }
      unint64_t v288 = v201 + 1;
      char v289 = *(unsigned char *)(v203 + v201);
      *((void *)a2 + 1) = v288;
      v206 |= (unint64_t)(v289 & 0x7F) << v286;
      if ((v289 & 0x80) == 0) {
        break;
      }
      v286 += 7;
      unint64_t v201 = v288;
      BOOL v14 = v287++ > 8;
      if (v14) {
        goto LABEL_360;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v206) = 0;
    }
LABEL_442:
    *((_DWORD *)this + 19) = v206;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionStateMachine::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 156);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    uint64_t v4 = *(void *)(v3 + 156);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_26:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_33:
    if ((v4 & 0x40) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_34:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_35:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_36;
    }
LABEL_72:
    this = PB::Writer::writeVarInt(a2);
    if ((*(void *)(v3 + 156) & 1) == 0) {
      return this;
    }
    goto LABEL_73;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000) != 0) {
    goto LABEL_72;
  }
LABEL_36:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_73:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::FallDetectionStateMachine::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 156);
  uint64_t v3 = *(void *)(a2 + 156);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 154) != *(unsigned __int8 *)(a2 + 154)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 155) != *(unsigned __int8 *)(a2 + 155)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 152) != *(unsigned __int8 *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(void *)(a2 + 156) & 1) == 0;
  if (v2) {
    return (v3 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v4;
}

uint64_t CMMsl::FallDetectionStateMachine::hash_value(CMMsl::FallDetectionStateMachine *this)
{
  uint64_t v1 = *(void *)((char *)this + 156);
  if ((v1 & 4) != 0)
  {
    if (*((double *)this + 3) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 3);
    }
    if ((v1 & 8) != 0)
    {
LABEL_3:
      uint64_t v52 = *((void *)this + 4);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_68;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v52 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    uint64_t v51 = *((void *)this + 2);
    if ((v1 & 0x400) != 0) {
      goto LABEL_5;
    }
LABEL_69:
    uint64_t v50 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_8;
    }
LABEL_70:
    uint64_t v49 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_11;
    }
LABEL_71:
    uint64_t v48 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_14;
    }
    goto LABEL_72;
  }
LABEL_68:
  uint64_t v51 = 0;
  if ((v1 & 0x400) == 0) {
    goto LABEL_69;
  }
LABEL_5:
  float v3 = *((float *)this + 16);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v50 = v4;
  if ((v1 & 0x200) == 0) {
    goto LABEL_70;
  }
LABEL_8:
  float v5 = *((float *)this + 15);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v49 = v6;
  if ((v1 & 0x100) == 0) {
    goto LABEL_71;
  }
LABEL_11:
  float v7 = *((float *)this + 14);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v48 = v8;
  if ((v1 & 0x800) != 0)
  {
LABEL_14:
    uint64_t v47 = *((int *)this + 17);
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_15;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v47 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_15:
    uint64_t v46 = *((int *)this + 37);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v46 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_16:
    uint64_t v45 = *((int *)this + 18);
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_17;
    }
LABEL_75:
    uint64_t v44 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_20;
    }
LABEL_76:
    uint64_t v12 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_24;
    }
LABEL_77:
    uint64_t v14 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_78;
  }
LABEL_74:
  uint64_t v45 = 0;
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_75;
  }
LABEL_17:
  float v9 = *((float *)this + 34);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v44 = v10;
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_76;
  }
LABEL_20:
  float v11 = *((float *)this + 35);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = LODWORD(v11);
  }
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_77;
  }
LABEL_24:
  float v13 = *((float *)this + 33);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = LODWORD(v13);
  }
  if ((v1 & 0x40000) != 0)
  {
LABEL_28:
    uint64_t v15 = *((int *)this + 24);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_29;
    }
LABEL_79:
    uint64_t v17 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_33;
    }
    goto LABEL_80;
  }
LABEL_78:
  uint64_t v15 = 0;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_79;
  }
LABEL_29:
  float v16 = *((float *)this + 20);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = LODWORD(v16);
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_33:
    uint64_t v18 = *((int *)this + 11);
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_34;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v18 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_34:
    uint64_t v19 = *((unsigned __int8 *)this + 154);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v19 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_35:
    uint64_t v20 = *((unsigned __int8 *)this + 153);
    if ((v1 & 0x80) != 0) {
      goto LABEL_36;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v20 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_36:
    uint64_t v21 = *((int *)this + 13);
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_37;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v21 = 0;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_37:
    uint64_t v22 = *((int *)this + 36);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t v22 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_38:
    uint64_t v23 = *((int *)this + 31);
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t v23 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_39:
    uint64_t v24 = *((unsigned __int8 *)this + 155);
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v24 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_40:
    uint64_t v25 = *((unsigned __int8 *)this + 152);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t v25 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_41:
    uint64_t v26 = *((int *)this + 23);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t v26 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_42:
    uint64_t v27 = *((int *)this + 27);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v27 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_43:
    uint64_t v28 = *((int *)this + 28);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v28 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_44:
    uint64_t v29 = *((int *)this + 25);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_45;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t v29 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_45:
    uint64_t v30 = *((int *)this + 21);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_46;
    }
LABEL_93:
    uint64_t v32 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_49;
    }
    goto LABEL_94;
  }
LABEL_92:
  uint64_t v30 = 0;
  if ((v1 & 0x800000) == 0) {
    goto LABEL_93;
  }
LABEL_46:
  float v31 = *((float *)this + 29);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  if ((v1 & 0x100000) != 0)
  {
LABEL_49:
    uint64_t v33 = *((int *)this + 26);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_50;
    }
LABEL_95:
    uint64_t v35 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_53;
    }
    goto LABEL_96;
  }
LABEL_94:
  uint64_t v33 = 0;
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_95;
  }
LABEL_50:
  float v34 = *((float *)this + 32);
  uint64_t v35 = LODWORD(v34);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  if ((v1 & 0x1000000) != 0)
  {
LABEL_53:
    uint64_t v36 = *((unsigned int *)this + 30);
    if ((v1 & 0x10) != 0) {
      goto LABEL_54;
    }
    goto LABEL_97;
  }
LABEL_96:
  uint64_t v36 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_54:
    uint64_t v37 = *((unsigned int *)this + 10);
    if ((v1 & 0x40) != 0) {
      goto LABEL_55;
    }
LABEL_98:
    uint64_t v39 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_58;
    }
    goto LABEL_99;
  }
LABEL_97:
  uint64_t v37 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_98;
  }
LABEL_55:
  float v38 = *((float *)this + 12);
  uint64_t v39 = LODWORD(v38);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_58:
    uint64_t v40 = *((int *)this + 22);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_59;
    }
    goto LABEL_100;
  }
LABEL_99:
  uint64_t v40 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_59:
    uint64_t v41 = *((int *)this + 19);
    if (v1) {
      goto LABEL_60;
    }
LABEL_101:
    double v42 = 0.0;
    return v52 ^ v2 ^ v51 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v12 ^ v14 ^ v15 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v33 ^ v35 ^ v36 ^ v37 ^ v39 ^ v40 ^ v41 ^ *(void *)&v42;
  }
LABEL_100:
  uint64_t v41 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_101;
  }
LABEL_60:
  double v42 = *((double *)this + 1);
  if (v42 == 0.0) {
    double v42 = 0.0;
  }
  return v52 ^ v2 ^ v51 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v12 ^ v14 ^ v15 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v33 ^ v35 ^ v36 ^ v37 ^ v39 ^ v40 ^ v41 ^ *(void *)&v42;
}

double CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(CMMsl::FallDetectionWristStateReplay *this)
{
  *(void *)this = &unk_270641790;
  *((_DWORD *)this + 99) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 27) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_270641790;
  *((_DWORD *)this + 99) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 27) = 0;
  return result;
}

void CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay(CMMsl::FallDetectionWristStateReplay *this)
{
  *(void *)this = &unk_270641790;
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 16);
  if (v5)
  {
    *((void *)this + 17) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 13);
  if (v6)
  {
    *((void *)this + 14) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 10);
  if (v7)
  {
    *((void *)this + 11) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 7);
  if (v8)
  {
    *((void *)this + 8) = v8;
    operator delete(v8);
  }
  float v9 = (void *)*((void *)this + 4);
  if (v9)
  {
    *((void *)this + 5) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 1);
  if (v10)
  {
    *((void *)this + 2) = v10;
    operator delete(v10);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::FallDetectionWristStateReplay *CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(CMMsl::FallDetectionWristStateReplay *this, const CMMsl::FallDetectionWristStateReplay *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  float v5 = (void *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v6 = (void *)((char *)this + 104);
  *(_OWORD *)((char *)this + 152) = 0u;
  float v7 = (void *)((char *)this + 152);
  *(_OWORD *)((char *)this + 200) = 0u;
  uint64_t v8 = (void *)((char *)this + 200);
  *(void *)this = &unk_270641790;
  *((_DWORD *)this + 99) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 27) = 0;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x80000) != 0)
  {
    uint64_t v11 = *((void *)a2 + 47);
    int v10 = 0x80000;
    *((_DWORD *)this + 99) = 0x80000;
    *((void *)this + 47) = v11;
    int v9 = *((_DWORD *)a2 + 99);
    if ((v9 & 0x1000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v10 = 0;
  if ((v9 & 0x1000000) != 0)
  {
LABEL_5:
    char v12 = *((unsigned char *)a2 + 388);
    v10 |= 0x1000000u;
    *((_DWORD *)this + 99) = v10;
    *((unsigned char *)this + 388) = v12;
    int v9 = *((_DWORD *)a2 + 99);
  }
LABEL_6:
  if (v9)
  {
    uint64_t v15 = *((void *)a2 + 28);
    v10 |= 1u;
    *((_DWORD *)this + 99) = v10;
    *((void *)this + 28) = v15;
    int v9 = *((_DWORD *)a2 + 99);
    if ((v9 & 0x40000) == 0)
    {
LABEL_8:
      if ((v9 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_42;
    }
  }
  else if ((v9 & 0x40000) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v16 = *((void *)a2 + 46);
  v10 |= 0x40000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 46) = v16;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 2) == 0)
  {
LABEL_9:
    if ((v9 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v17 = *((void *)a2 + 29);
  v10 |= 2u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 29) = v17;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v18 = *((void *)a2 + 32);
  v10 |= 0x10u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 32) = v18;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x20) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v19 = *((void *)a2 + 33);
  v10 |= 0x20u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 33) = v19;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x100) == 0)
  {
LABEL_12:
    if ((v9 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v20 = *((void *)a2 + 36);
  v10 |= 0x100u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 36) = v20;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x400) == 0)
  {
LABEL_13:
    if ((v9 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v21 = *((void *)a2 + 38);
  v10 |= 0x400u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 38) = v21;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v22 = *((void *)a2 + 37);
  v10 |= 0x200u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 37) = v22;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x80) == 0)
  {
LABEL_15:
    if ((v9 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v23 = *((void *)a2 + 35);
  v10 |= 0x80u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 35) = v23;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x40) == 0)
  {
LABEL_16:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v24 = *((void *)a2 + 34);
  v10 |= 0x40u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 34) = v24;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x1000) == 0)
  {
LABEL_17:
    if ((v9 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v25 = *((void *)a2 + 40);
  v10 |= 0x1000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 40) = v25;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x800) == 0)
  {
LABEL_18:
    if ((v9 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v26 = *((void *)a2 + 39);
  v10 |= 0x800u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 39) = v26;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x20000) == 0)
  {
LABEL_19:
    if ((v9 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v27 = *((void *)a2 + 45);
  v10 |= 0x20000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 45) = v27;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x10000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v28 = *((void *)a2 + 44);
  v10 |= 0x10000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 44) = v28;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v29 = *((void *)a2 + 43);
  v10 |= 0x8000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 43) = v29;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x4000) == 0)
  {
LABEL_22:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v30 = *((void *)a2 + 42);
  v10 |= 0x4000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 42) = v30;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x2000) == 0)
  {
LABEL_23:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v31 = *((void *)a2 + 41);
  v10 |= 0x2000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 41) = v31;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_57:
  char v32 = *((unsigned char *)a2 + 395);
  v10 |= 0x80000000;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 395) = v32;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 4) == 0)
  {
LABEL_25:
    if ((v9 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v33 = *((void *)a2 + 30);
  v10 |= 4u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 30) = v33;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 8) == 0)
  {
LABEL_26:
    if ((v9 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v34 = *((void *)a2 + 31);
  v10 |= 8u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 31) = v34;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x100000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v35 = *((unsigned char *)a2 + 384);
  v10 |= 0x100000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 384) = v35;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x400000) == 0)
  {
LABEL_28:
    if ((v9 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
LABEL_61:
  char v36 = *((unsigned char *)a2 + 386);
  v10 |= 0x400000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 386) = v36;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v9 & 0x200000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }
LABEL_62:
  char v37 = *((unsigned char *)a2 + 394);
  v10 |= 0x40000000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 394) = v37;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x200000) == 0)
  {
LABEL_30:
    if ((v9 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_64;
  }
LABEL_63:
  char v38 = *((unsigned char *)a2 + 385);
  v10 |= 0x200000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 385) = v38;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x800000) == 0)
  {
LABEL_31:
    if ((v9 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_65;
  }
LABEL_64:
  char v39 = *((unsigned char *)a2 + 387);
  v10 |= 0x800000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 387) = v39;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v9 & 0x8000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_66;
  }
LABEL_65:
  char v40 = *((unsigned char *)a2 + 392);
  v10 |= 0x10000000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 392) = v40;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v9 & 0x20000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_67;
  }
LABEL_66:
  char v41 = *((unsigned char *)a2 + 391);
  v10 |= 0x8000000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 391) = v41;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v9 & 0x2000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_68;
  }
LABEL_67:
  char v42 = *((unsigned char *)a2 + 393);
  v10 |= 0x20000000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 393) = v42;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x2000000) == 0)
  {
LABEL_35:
    if ((v9 & 0x4000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_68:
  char v43 = *((unsigned char *)a2 + 389);
  v10 |= 0x2000000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 389) = v43;
  if ((*((_DWORD *)a2 + 99) & 0x4000000) != 0)
  {
LABEL_36:
    char v13 = *((unsigned char *)a2 + 390);
    *((_DWORD *)this + 99) = v10 | 0x4000000;
    *((unsigned char *)this + 390) = v13;
  }
LABEL_37:
  if (this != a2)
  {
    sub_2572C73EC((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_2572C73EC(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_2572C73EC(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
    sub_2572C73EC(v6, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
    sub_2572C73EC((void *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
    sub_2572C73EC((void *)this + 16, *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 3);
    sub_2572C73EC((void *)this + 22, *((char **)a2 + 22), *((char **)a2 + 23), (uint64_t)(*((void *)a2 + 23) - *((void *)a2 + 22)) >> 3);
    sub_2572C73EC(v7, *((char **)a2 + 19), *((char **)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 3);
    sub_2572C73EC(v8, *((char **)a2 + 25), *((char **)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 3);
  }
  return this;
}

CMMsl *CMMsl::FallDetectionWristStateReplay::operator=(CMMsl *a1, const CMMsl::FallDetectionWristStateReplay *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay((CMMsl::FallDetectionWristStateReplay *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionWristStateReplay *)v5, v3);
    CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay((CMMsl::FallDetectionWristStateReplay *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionWristStateReplay *a2, CMMsl::FallDetectionWristStateReplay *a3)
{
  int v3 = *((_DWORD *)this + 99);
  *((_DWORD *)this + 99) = *((_DWORD *)a2 + 99);
  *((_DWORD *)a2 + 99) = v3;
  uint64_t v4 = *((void *)this + 47);
  *((void *)this + 47) = *((void *)a2 + 47);
  *((void *)a2 + 47) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 388);
  *((unsigned char *)this + 388) = *((unsigned char *)a2 + 388);
  *((unsigned char *)a2 + 388) = v4;
  uint64_t v5 = *((void *)this + 28);
  *((void *)this + 28) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v5;
  uint64_t v6 = *((void *)this + 46);
  *((void *)this + 46) = *((void *)a2 + 46);
  *((void *)a2 + 46) = v6;
  uint64_t v7 = *((void *)this + 29);
  *((void *)this + 29) = *((void *)a2 + 29);
  *((void *)a2 + 29) = v7;
  uint64_t v8 = *((void *)this + 32);
  *((void *)this + 32) = *((void *)a2 + 32);
  *((void *)a2 + 32) = v8;
  uint64_t v9 = *((void *)this + 33);
  *((void *)this + 33) = *((void *)a2 + 33);
  *((void *)a2 + 33) = v9;
  uint64_t v10 = *((void *)this + 36);
  *((void *)this + 36) = *((void *)a2 + 36);
  *((void *)a2 + 36) = v10;
  uint64_t v11 = *((void *)this + 38);
  *((void *)this + 38) = *((void *)a2 + 38);
  *((void *)a2 + 38) = v11;
  uint64_t v12 = *((void *)this + 37);
  *((void *)this + 37) = *((void *)a2 + 37);
  *((void *)a2 + 37) = v12;
  uint64_t v13 = *((void *)this + 35);
  *((void *)this + 35) = *((void *)a2 + 35);
  *((void *)a2 + 35) = v13;
  uint64_t v14 = *((void *)this + 34);
  *((void *)this + 34) = *((void *)a2 + 34);
  *((void *)a2 + 34) = v14;
  uint64_t v15 = *((void *)this + 40);
  *((void *)this + 40) = *((void *)a2 + 40);
  *((void *)a2 + 40) = v15;
  uint64_t v16 = *((void *)this + 39);
  *((void *)this + 39) = *((void *)a2 + 39);
  *((void *)a2 + 39) = v16;
  uint64_t v17 = *((void *)this + 45);
  *((void *)this + 45) = *((void *)a2 + 45);
  *((void *)a2 + 45) = v17;
  uint64_t v18 = *((void *)this + 44);
  *((void *)this + 44) = *((void *)a2 + 44);
  *((void *)a2 + 44) = v18;
  uint64_t v19 = *((void *)this + 43);
  *((void *)this + 43) = *((void *)a2 + 43);
  *((void *)a2 + 43) = v19;
  uint64_t v20 = *((void *)this + 42);
  *((void *)this + 42) = *((void *)a2 + 42);
  *((void *)a2 + 42) = v20;
  uint64_t v21 = *((void *)this + 41);
  *((void *)this + 41) = *((void *)a2 + 41);
  *((void *)a2 + 41) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 395);
  *((unsigned char *)this + 395) = *((unsigned char *)a2 + 395);
  *((unsigned char *)a2 + 395) = v21;
  uint64_t v22 = *((void *)this + 30);
  *((void *)this + 30) = *((void *)a2 + 30);
  *((void *)a2 + 30) = v22;
  double result = *((double *)this + 31);
  *((void *)this + 31) = *((void *)a2 + 31);
  *((double *)a2 + 31) = result;
  LOBYTE(v21) = *((unsigned char *)this + 384);
  *((unsigned char *)this + 384) = *((unsigned char *)a2 + 384);
  *((unsigned char *)a2 + 384) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 386);
  *((unsigned char *)this + 386) = *((unsigned char *)a2 + 386);
  *((unsigned char *)a2 + 386) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 394);
  *((unsigned char *)this + 394) = *((unsigned char *)a2 + 394);
  *((unsigned char *)a2 + 394) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 385);
  *((unsigned char *)this + 385) = *((unsigned char *)a2 + 385);
  *((unsigned char *)a2 + 385) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 387);
  *((unsigned char *)this + 387) = *((unsigned char *)a2 + 387);
  *((unsigned char *)a2 + 387) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 392);
  *((unsigned char *)this + 392) = *((unsigned char *)a2 + 392);
  *((unsigned char *)a2 + 392) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 391);
  *((unsigned char *)this + 391) = *((unsigned char *)a2 + 391);
  *((unsigned char *)a2 + 391) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 393);
  *((unsigned char *)this + 393) = *((unsigned char *)a2 + 393);
  *((unsigned char *)a2 + 393) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 389);
  *((unsigned char *)this + 389) = *((unsigned char *)a2 + 389);
  *((unsigned char *)a2 + 389) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 390);
  *((unsigned char *)this + 390) = *((unsigned char *)a2 + 390);
  *((unsigned char *)a2 + 390) = v21;
  uint64_t v24 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v24;
  uint64_t v25 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v25;
  uint64_t v26 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v26;
  uint64_t v27 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v27;
  uint64_t v28 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v28;
  uint64_t v29 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v29;
  uint64_t v30 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v30;
  uint64_t v31 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v31;
  uint64_t v32 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v32;
  uint64_t v33 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v33;
  uint64_t v34 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v34;
  uint64_t v35 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v35;
  uint64_t v36 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v36;
  uint64_t v37 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v37;
  uint64_t v38 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v38;
  uint64_t v39 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v39;
  uint64_t v40 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v40;
  uint64_t v41 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v41;
  uint64_t v42 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v42;
  uint64_t v43 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v43;
  uint64_t v44 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v44;
  uint64_t v45 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v45;
  uint64_t v46 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v46;
  uint64_t v47 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v47;
  uint64_t v48 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v48;
  uint64_t v49 = *((void *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((void *)a2 + 26) = v49;
  uint64_t v50 = *((void *)this + 27);
  *((void *)this + 27) = *((void *)a2 + 27);
  *((void *)a2 + 27) = v50;
  return result;
}

uint64_t CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641790;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a2 + 396) = 0;
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(unsigned char *)(a1 + 388) = *(unsigned char *)(a2 + 388);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 395) = *(unsigned char *)(a2 + 395);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(unsigned char *)(a1 + 386) = *(unsigned char *)(a2 + 386);
  *(unsigned char *)(a1 + 394) = *(unsigned char *)(a2 + 394);
  *(unsigned char *)(a1 + 385) = *(unsigned char *)(a2 + 385);
  *(unsigned char *)(a1 + 387) = *(unsigned char *)(a2 + 387);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  *(unsigned char *)(a1 + 391) = *(unsigned char *)(a2 + 391);
  *(unsigned char *)(a1 + 393) = *(unsigned char *)(a2 + 393);
  *(unsigned char *)(a1 + 389) = *(unsigned char *)(a2 + 389);
  *(unsigned char *)(a1 + 390) = *(unsigned char *)(a2 + 390);
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(a1 + 56, (__n128 *)(a2 + 56));
  sub_2572C7560(a1 + 104, (__n128 *)(a2 + 104));
  sub_2572C7560(a1 + 80, (__n128 *)(a2 + 80));
  sub_2572C7560(a1 + 128, (__n128 *)(a2 + 128));
  sub_2572C7560(a1 + 176, (__n128 *)(a2 + 176));
  sub_2572C7560(a1 + 152, (__n128 *)(a2 + 152));
  sub_2572C7560(a1 + 200, (__n128 *)(a2 + 200));
  return a1;
}

CMMsl *CMMsl::FallDetectionWristStateReplay::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionWristStateReplay *)v5, v3);
    CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay((CMMsl::FallDetectionWristStateReplay *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionWristStateReplay::formatText(CMMsl::FallDetectionWristStateReplay *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 99);
  if (v5)
  {
    PB::TextFormatter::format(a2, "absoluteTimestampOfImpact", *((double *)this + 28));
    int v5 = *((_DWORD *)this + 99);
    if ((v5 & 0x100000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_62;
    }
  }
  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "anyOffWristAfterImpact");
  int v5 = *((_DWORD *)this + 99);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "aopTimestampOfImpact");
  int v5 = *((_DWORD *)this + 99);
  if ((v5 & 0x200000) == 0)
  {
LABEL_5:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "continuousLockedBeforeImpact");
  int v5 = *((_DWORD *)this + 99);
  if ((v5 & 0x400000) == 0)
  {
LABEL_6:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "continuousOffWristBeforeImpact");
  if ((*((_DWORD *)this + 99) & 0x800000) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "continuousStaticAndVerticalBeforeImpact");
LABEL_8:
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "coreMotionWristStateHistoryEndimestamp", v8);
  }
  uint64_t v9 = (double *)*((void *)this + 4);
  uint64_t v10 = (double *)*((void *)this + 5);
  while (v9 != v10)
  {
    double v11 = *v9++;
    PB::TextFormatter::format(a2, "coreMotionWristStateHistoryStartTimestamp", v11);
  }
  uint64_t v12 = (double *)*((void *)this + 7);
  uint64_t v13 = (double *)*((void *)this + 8);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(a2, "coreMotionWristStateHistoryState", v14);
  }
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x1000000) != 0)
  {
    PB::TextFormatter::format(a2, "gatingEnabled");
    int v15 = *((_DWORD *)this + 99);
    if ((v15 & 0x2000000) == 0)
    {
LABEL_16:
      if ((v15 & 0x4000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_68;
    }
  }
  else if ((v15 & 0x2000000) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(a2, "gatingLockedNoMotionPreImpact");
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v15 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "gatingMotionPreImpact");
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v15 & 0x10000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "gatingOffWristPostImpact");
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_19:
    if ((v15 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "gatingOffWristPreImpact");
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v15 & 0x40000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "gatingOnCharger");
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "hasMotionBeforeImpact");
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v15 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "lastChargerState");
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 4) == 0)
  {
LABEL_23:
    if ((v15 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "lastChargerStateDuration", *((double *)this + 30));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 8) == 0)
  {
LABEL_24:
    if ((v15 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "lastChargerStateDurationThreshold", *((double *)this + 31));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x10) == 0)
  {
LABEL_25:
    if ((v15 & 0x20) == 0) {
      goto LABEL_26;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "lastCoreMotionWristState");
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x20) == 0)
  {
LABEL_26:
    if ((v15 & 0x40) == 0) {
      goto LABEL_27;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDuration", *((double *)this + 33));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x40) == 0)
  {
LABEL_27:
    if ((v15 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPostEnd", *((double *)this + 34));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x80) == 0)
  {
LABEL_28:
    if ((v15 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPostStart", *((double *)this + 35));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x100) == 0)
  {
LABEL_29:
    if ((v15 & 0x200) == 0) {
      goto LABEL_30;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPostThreshold", *((double *)this + 36));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x200) == 0)
  {
LABEL_30:
    if ((v15 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPreEnd", *((double *)this + 37));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x400) == 0)
  {
LABEL_31:
    if ((v15 & 0x800) == 0) {
      goto LABEL_32;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPreStart", *((double *)this + 38));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x800) == 0)
  {
LABEL_32:
    if ((v15 & 0x1000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "lastLockedStateDurationPreEnd", *((double *)this + 39));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x1000) == 0)
  {
LABEL_33:
    if ((v15 & 0x2000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "lastLockedStateDurationPreStart", *((double *)this + 40));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x2000) == 0)
  {
LABEL_34:
    if ((v15 & 0x4000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "lastMotionState");
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x4000) == 0)
  {
LABEL_35:
    if ((v15 & 0x8000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "lastMotionStateEndTime");
  if ((*((_DWORD *)this + 99) & 0x8000) != 0) {
LABEL_36:
  }
    PB::TextFormatter::format(a2, "lastMotionStateStartTime");
LABEL_37:
  uint64_t v16 = (double *)*((void *)this + 10);
  uint64_t v17 = (double *)*((void *)this + 11);
  while (v16 != v17)
  {
    double v18 = *v16++;
    PB::TextFormatter::format(a2, "lockStateHistoryEndTimestamp", v18);
  }
  uint64_t v19 = (double *)*((void *)this + 13);
  uint64_t v20 = (double *)*((void *)this + 14);
  while (v19 != v20)
  {
    double v21 = *v19++;
    PB::TextFormatter::format(a2, "lockStateHistoryStartTimestamp", v21);
  }
  uint64_t v22 = (double *)*((void *)this + 16);
  uint64_t v23 = (double *)*((void *)this + 17);
  while (v22 != v23)
  {
    double v24 = *v22++;
    PB::TextFormatter::format(a2, "lockStateHistoryState", v24);
  }
  int v25 = *((_DWORD *)this + 99);
  if ((v25 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "motionLookbackBeforeImpactEndOfInterval");
    int v25 = *((_DWORD *)this + 99);
  }
  if ((v25 & 0x20000) != 0) {
    PB::TextFormatter::format(a2, "motionLookbackBeforeImpactStartOfInterval");
  }
  uint64_t v26 = (double *)*((void *)this + 19);
  uint64_t v27 = (double *)*((void *)this + 20);
  while (v26 != v27)
  {
    double v28 = *v26++;
    PB::TextFormatter::format(a2, "motionStateHistoryEndTimestamp", v28);
  }
  uint64_t v29 = (double *)*((void *)this + 22);
  uint64_t v30 = (double *)*((void *)this + 23);
  while (v29 != v30)
  {
    double v31 = *v29++;
    PB::TextFormatter::format(a2, "motionStateHistoryStartTimestamp", v31);
  }
  uint64_t v32 = (double *)*((void *)this + 25);
  uint64_t v33 = (double *)*((void *)this + 26);
  while (v32 != v33)
  {
    double v34 = *v32++;
    PB::TextFormatter::format(a2, "motionStateHistoryState", v34);
  }
  int v35 = *((_DWORD *)this + 99);
  if ((v35 & 0x40000) != 0)
  {
    PB::TextFormatter::format(a2, "relativeTimestampToImpact", *((double *)this + 46));
    int v35 = *((_DWORD *)this + 99);
  }
  if ((v35 & 0x80000) != 0) {
    PB::TextFormatter::format(a2, "timestamp");
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::FallDetectionWristStateReplay::readFrom(CMMsl::FallDetectionWristStateReplay *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      int v20 = v11 & 7;
      if (v20 != 4)
      {
        unint64_t v21 = v11 >> 3;
        switch((v11 >> 3))
        {
          case 1u:
            *((_DWORD *)this + 99) |= 0x80000u;
            unint64_t v22 = *((void *)a2 + 1);
            unint64_t v23 = *((void *)a2 + 2);
            uint64_t v24 = *(void *)a2;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v28 = v22 + 1;
                *((void *)a2 + 1) = v22 + 1;
                char v29 = *(unsigned char *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0) {
                  goto LABEL_544;
                }
                v25 += 7;
                unint64_t v22 = v28;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
LABEL_387:
              uint64_t v27 = 0;
              goto LABEL_544;
            }
            char v291 = 0;
            unsigned int v292 = 0;
            uint64_t v27 = 0;
            if (v23 <= v22) {
              unint64_t v23 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v23 == v22)
              {
                uint64_t v27 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v293 = v22 + 1;
                char v294 = *(unsigned char *)(v24 + v22);
                *((void *)a2 + 1) = v293;
                v27 |= (unint64_t)(v294 & 0x7F) << v291;
                if (v294 < 0)
                {
                  v291 += 7;
                  unint64_t v22 = v293;
                  BOOL v14 = v292++ > 8;
                  if (v14) {
                    goto LABEL_387;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v27 = 0;
                }
              }
              break;
            }
LABEL_544:
            *((void *)this + 47) = v27;
            goto LABEL_20;
          case 2u:
            *((_DWORD *)this + 99) |= 0x1000000u;
            unint64_t v160 = *((void *)a2 + 1);
            if (v160 >= *((void *)a2 + 2))
            {
              BOOL v163 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v161 = v160 + 1;
              int v162 = *(unsigned __int8 *)(*(void *)a2 + v160);
              *((void *)a2 + 1) = v161;
              BOOL v163 = v162 != 0;
            }
            *((unsigned char *)this + 388) = v163;
            goto LABEL_20;
          case 3u:
            *((_DWORD *)this + 99) |= 1u;
            unint64_t v164 = *((void *)a2 + 1);
            if (v164 > 0xFFFFFFFFFFFFFFF7 || v164 + 8 > *((void *)a2 + 2)) {
              goto LABEL_344;
            }
            *((void *)this + 28) = *(void *)(*(void *)a2 + v164);
            goto LABEL_633;
          case 4u:
            *((_DWORD *)this + 99) |= 0x40000u;
            unint64_t v165 = *((void *)a2 + 1);
            if (v165 > 0xFFFFFFFFFFFFFFF7 || v165 + 8 > *((void *)a2 + 2)) {
              goto LABEL_344;
            }
            *((void *)this + 46) = *(void *)(*(void *)a2 + v165);
            goto LABEL_633;
          case 5u:
            *((_DWORD *)this + 99) |= 2u;
            unint64_t v166 = *((void *)a2 + 1);
            unint64_t v167 = *((void *)a2 + 2);
            uint64_t v168 = *(void *)a2;
            if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
            {
              char v169 = 0;
              unsigned int v170 = 0;
              uint64_t v171 = 0;
              do
              {
                unint64_t v172 = v166 + 1;
                *((void *)a2 + 1) = v166 + 1;
                char v173 = *(unsigned char *)(v168 + v166);
                v171 |= (unint64_t)(v173 & 0x7F) << v169;
                if ((v173 & 0x80) == 0) {
                  goto LABEL_547;
                }
                v169 += 7;
                unint64_t v166 = v172;
                BOOL v14 = v170++ > 8;
              }
              while (!v14);
LABEL_396:
              uint64_t v171 = 0;
              goto LABEL_547;
            }
            char v295 = 0;
            unsigned int v296 = 0;
            uint64_t v171 = 0;
            if (v167 <= v166) {
              unint64_t v167 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v167 == v166)
              {
                uint64_t v171 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v297 = v166 + 1;
                char v298 = *(unsigned char *)(v168 + v166);
                *((void *)a2 + 1) = v297;
                v171 |= (unint64_t)(v298 & 0x7F) << v295;
                if (v298 < 0)
                {
                  v295 += 7;
                  unint64_t v166 = v297;
                  BOOL v14 = v296++ > 8;
                  if (v14) {
                    goto LABEL_396;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v171 = 0;
                }
              }
              break;
            }
LABEL_547:
            *((void *)this + 29) = v171;
            goto LABEL_20;
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x2Cu:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
            goto LABEL_19;
          case 0x15u:
            *((_DWORD *)this + 99) |= 0x10u;
            unint64_t v174 = *((void *)a2 + 1);
            unint64_t v175 = *((void *)a2 + 2);
            uint64_t v176 = *(void *)a2;
            if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
            {
              char v177 = 0;
              unsigned int v178 = 0;
              uint64_t v179 = 0;
              do
              {
                unint64_t v180 = v174 + 1;
                *((void *)a2 + 1) = v174 + 1;
                char v181 = *(unsigned char *)(v176 + v174);
                v179 |= (unint64_t)(v181 & 0x7F) << v177;
                if ((v181 & 0x80) == 0) {
                  goto LABEL_550;
                }
                v177 += 7;
                unint64_t v174 = v180;
                BOOL v14 = v178++ > 8;
              }
              while (!v14);
LABEL_403:
              uint64_t v179 = 0;
              goto LABEL_550;
            }
            char v299 = 0;
            unsigned int v300 = 0;
            uint64_t v179 = 0;
            if (v175 <= v174) {
              unint64_t v175 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v175 == v174)
              {
                uint64_t v179 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v301 = v174 + 1;
                char v302 = *(unsigned char *)(v176 + v174);
                *((void *)a2 + 1) = v301;
                v179 |= (unint64_t)(v302 & 0x7F) << v299;
                if (v302 < 0)
                {
                  v299 += 7;
                  unint64_t v174 = v301;
                  BOOL v14 = v300++ > 8;
                  if (v14) {
                    goto LABEL_403;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v179 = 0;
                }
              }
              break;
            }
LABEL_550:
            *((void *)this + 32) = v179;
            goto LABEL_20;
          case 0x16u:
            *((_DWORD *)this + 99) |= 0x20u;
            unint64_t v182 = *((void *)a2 + 1);
            if (v182 > 0xFFFFFFFFFFFFFFF7 || v182 + 8 > *((void *)a2 + 2)) {
              goto LABEL_344;
            }
            *((void *)this + 33) = *(void *)(*(void *)a2 + v182);
            goto LABEL_633;
          case 0x17u:
            *((_DWORD *)this + 99) |= 0x100u;
            unint64_t v183 = *((void *)a2 + 1);
            if (v183 > 0xFFFFFFFFFFFFFFF7 || v183 + 8 > *((void *)a2 + 2)) {
              goto LABEL_344;
            }
            *((void *)this + 36) = *(void *)(*(void *)a2 + v183);
            goto LABEL_633;
          case 0x18u:
            *((_DWORD *)this + 99) |= 0x400u;
            unint64_t v184 = *((void *)a2 + 1);
            if (v184 > 0xFFFFFFFFFFFFFFF7 || v184 + 8 > *((void *)a2 + 2)) {
              goto LABEL_344;
            }
            *((void *)this + 38) = *(void *)(*(void *)a2 + v184);
            goto LABEL_633;
          case 0x19u:
            *((_DWORD *)this + 99) |= 0x200u;
            unint64_t v185 = *((void *)a2 + 1);
            if (v185 > 0xFFFFFFFFFFFFFFF7 || v185 + 8 > *((void *)a2 + 2)) {
              goto LABEL_344;
            }
            *((void *)this + 37) = *(void *)(*(void *)a2 + v185);
            goto LABEL_633;
          case 0x1Au:
            *((_DWORD *)this + 99) |= 0x80u;
            unint64_t v186 = *((void *)a2 + 1);
            if (v186 > 0xFFFFFFFFFFFFFFF7 || v186 + 8 > *((void *)a2 + 2)) {
              goto LABEL_344;
            }
            *((void *)this + 35) = *(void *)(*(void *)a2 + v186);
            goto LABEL_633;
          case 0x1Bu:
            *((_DWORD *)this + 99) |= 0x40u;
            unint64_t v187 = *((void *)a2 + 1);
            if (v187 > 0xFFFFFFFFFFFFFFF7 || v187 + 8 > *((void *)a2 + 2)) {
              goto LABEL_344;
            }
            *((void *)this + 34) = *(void *)(*(void *)a2 + v187);
            goto LABEL_633;
          case 0x1Cu:
            *((_DWORD *)this + 99) |= 0x1000u;
            unint64_t v188 = *((void *)a2 + 1);
            if (v188 > 0xFFFFFFFFFFFFFFF7 || v188 + 8 > *((void *)a2 + 2)) {
              goto LABEL_344;
            }
            *((void *)this + 40) = *(void *)(*(void *)a2 + v188);
            goto LABEL_633;
          case 0x1Du:
            *((_DWORD *)this + 99) |= 0x800u;
            unint64_t v189 = *((void *)a2 + 1);
            if (v189 > 0xFFFFFFFFFFFFFFF7 || v189 + 8 > *((void *)a2 + 2)) {
              goto LABEL_344;
            }
            *((void *)this + 39) = *(void *)(*(void *)a2 + v189);
            goto LABEL_633;
          case 0x1Eu:
            *((_DWORD *)this + 99) |= 0x20000u;
            unint64_t v190 = *((void *)a2 + 1);
            unint64_t v191 = *((void *)a2 + 2);
            uint64_t v192 = *(void *)a2;
            if (v190 <= 0xFFFFFFFFFFFFFFF5 && v190 + 10 <= v191)
            {
              char v193 = 0;
              unsigned int v194 = 0;
              uint64_t v195 = 0;
              do
              {
                unint64_t v196 = v190 + 1;
                *((void *)a2 + 1) = v190 + 1;
                char v197 = *(unsigned char *)(v192 + v190);
                v195 |= (unint64_t)(v197 & 0x7F) << v193;
                if ((v197 & 0x80) == 0) {
                  goto LABEL_553;
                }
                v193 += 7;
                unint64_t v190 = v196;
                BOOL v14 = v194++ > 8;
              }
              while (!v14);
LABEL_410:
              uint64_t v195 = 0;
              goto LABEL_553;
            }
            char v303 = 0;
            unsigned int v304 = 0;
            uint64_t v195 = 0;
            if (v191 <= v190) {
              unint64_t v191 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v191 == v190)
              {
                uint64_t v195 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v305 = v190 + 1;
                char v306 = *(unsigned char *)(v192 + v190);
                *((void *)a2 + 1) = v305;
                v195 |= (unint64_t)(v306 & 0x7F) << v303;
                if (v306 < 0)
                {
                  v303 += 7;
                  unint64_t v190 = v305;
                  BOOL v14 = v304++ > 8;
                  if (v14) {
                    goto LABEL_410;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v195 = 0;
                }
              }
              break;
            }
LABEL_553:
            *((void *)this + 45) = v195;
            goto LABEL_20;
          case 0x1Fu:
            *((_DWORD *)this + 99) |= 0x10000u;
            unint64_t v198 = *((void *)a2 + 1);
            unint64_t v199 = *((void *)a2 + 2);
            uint64_t v200 = *(void *)a2;
            if (v198 <= 0xFFFFFFFFFFFFFFF5 && v198 + 10 <= v199)
            {
              char v201 = 0;
              unsigned int v202 = 0;
              uint64_t v203 = 0;
              do
              {
                unint64_t v204 = v198 + 1;
                *((void *)a2 + 1) = v198 + 1;
                char v205 = *(unsigned char *)(v200 + v198);
                v203 |= (unint64_t)(v205 & 0x7F) << v201;
                if ((v205 & 0x80) == 0) {
                  goto LABEL_556;
                }
                v201 += 7;
                unint64_t v198 = v204;
                BOOL v14 = v202++ > 8;
              }
              while (!v14);
LABEL_417:
              uint64_t v203 = 0;
              goto LABEL_556;
            }
            char v307 = 0;
            unsigned int v308 = 0;
            uint64_t v203 = 0;
            if (v199 <= v198) {
              unint64_t v199 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v199 == v198)
              {
                uint64_t v203 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v309 = v198 + 1;
                char v310 = *(unsigned char *)(v200 + v198);
                *((void *)a2 + 1) = v309;
                v203 |= (unint64_t)(v310 & 0x7F) << v307;
                if (v310 < 0)
                {
                  v307 += 7;
                  unint64_t v198 = v309;
                  BOOL v14 = v308++ > 8;
                  if (v14) {
                    goto LABEL_417;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v203 = 0;
                }
              }
              break;
            }
LABEL_556:
            *((void *)this + 44) = v203;
            goto LABEL_20;
          case 0x20u:
            *((_DWORD *)this + 99) |= 0x8000u;
            unint64_t v206 = *((void *)a2 + 1);
            unint64_t v207 = *((void *)a2 + 2);
            uint64_t v208 = *(void *)a2;
            if (v206 <= 0xFFFFFFFFFFFFFFF5 && v206 + 10 <= v207)
            {
              char v209 = 0;
              unsigned int v210 = 0;
              uint64_t v211 = 0;
              do
              {
                unint64_t v212 = v206 + 1;
                *((void *)a2 + 1) = v206 + 1;
                char v213 = *(unsigned char *)(v208 + v206);
                v211 |= (unint64_t)(v213 & 0x7F) << v209;
                if ((v213 & 0x80) == 0) {
                  goto LABEL_559;
                }
                v209 += 7;
                unint64_t v206 = v212;
                BOOL v14 = v210++ > 8;
              }
              while (!v14);
LABEL_424:
              uint64_t v211 = 0;
              goto LABEL_559;
            }
            char v311 = 0;
            unsigned int v312 = 0;
            uint64_t v211 = 0;
            if (v207 <= v206) {
              unint64_t v207 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v207 == v206)
              {
                uint64_t v211 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v313 = v206 + 1;
                char v314 = *(unsigned char *)(v208 + v206);
                *((void *)a2 + 1) = v313;
                v211 |= (unint64_t)(v314 & 0x7F) << v311;
                if (v314 < 0)
                {
                  v311 += 7;
                  unint64_t v206 = v313;
                  BOOL v14 = v312++ > 8;
                  if (v14) {
                    goto LABEL_424;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v211 = 0;
                }
              }
              break;
            }
LABEL_559:
            *((void *)this + 43) = v211;
            goto LABEL_20;
          case 0x21u:
            *((_DWORD *)this + 99) |= 0x4000u;
            unint64_t v214 = *((void *)a2 + 1);
            unint64_t v215 = *((void *)a2 + 2);
            uint64_t v216 = *(void *)a2;
            if (v214 <= 0xFFFFFFFFFFFFFFF5 && v214 + 10 <= v215)
            {
              char v217 = 0;
              unsigned int v218 = 0;
              uint64_t v219 = 0;
              do
              {
                unint64_t v220 = v214 + 1;
                *((void *)a2 + 1) = v214 + 1;
                char v221 = *(unsigned char *)(v216 + v214);
                v219 |= (unint64_t)(v221 & 0x7F) << v217;
                if ((v221 & 0x80) == 0) {
                  goto LABEL_562;
                }
                v217 += 7;
                unint64_t v214 = v220;
                BOOL v14 = v218++ > 8;
              }
              while (!v14);
LABEL_431:
              uint64_t v219 = 0;
              goto LABEL_562;
            }
            char v315 = 0;
            unsigned int v316 = 0;
            uint64_t v219 = 0;
            if (v215 <= v214) {
              unint64_t v215 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v215 == v214)
              {
                uint64_t v219 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v317 = v214 + 1;
                char v318 = *(unsigned char *)(v216 + v214);
                *((void *)a2 + 1) = v317;
                v219 |= (unint64_t)(v318 & 0x7F) << v315;
                if (v318 < 0)
                {
                  v315 += 7;
                  unint64_t v214 = v317;
                  BOOL v14 = v316++ > 8;
                  if (v14) {
                    goto LABEL_431;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v219 = 0;
                }
              }
              break;
            }
LABEL_562:
            *((void *)this + 42) = v219;
            goto LABEL_20;
          case 0x22u:
            *((_DWORD *)this + 99) |= 0x2000u;
            unint64_t v222 = *((void *)a2 + 1);
            unint64_t v223 = *((void *)a2 + 2);
            uint64_t v224 = *(void *)a2;
            if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
            {
              char v225 = 0;
              unsigned int v226 = 0;
              uint64_t v227 = 0;
              do
              {
                unint64_t v228 = v222 + 1;
                *((void *)a2 + 1) = v222 + 1;
                char v229 = *(unsigned char *)(v224 + v222);
                v227 |= (unint64_t)(v229 & 0x7F) << v225;
                if ((v229 & 0x80) == 0) {
                  goto LABEL_565;
                }
                v225 += 7;
                unint64_t v222 = v228;
                BOOL v14 = v226++ > 8;
              }
              while (!v14);
LABEL_438:
              uint64_t v227 = 0;
              goto LABEL_565;
            }
            char v319 = 0;
            unsigned int v320 = 0;
            uint64_t v227 = 0;
            if (v223 <= v222) {
              unint64_t v223 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v223 == v222)
              {
                uint64_t v227 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v321 = v222 + 1;
                char v322 = *(unsigned char *)(v224 + v222);
                *((void *)a2 + 1) = v321;
                v227 |= (unint64_t)(v322 & 0x7F) << v319;
                if (v322 < 0)
                {
                  v319 += 7;
                  unint64_t v222 = v321;
                  BOOL v14 = v320++ > 8;
                  if (v14) {
                    goto LABEL_438;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v227 = 0;
                }
              }
              break;
            }
LABEL_565:
            *((void *)this + 41) = v227;
            goto LABEL_20;
          case 0x29u:
            *((_DWORD *)this + 99) |= 0x80000000;
            unint64_t v230 = *((void *)a2 + 1);
            if (v230 >= *((void *)a2 + 2))
            {
              BOOL v233 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v231 = v230 + 1;
              int v232 = *(unsigned __int8 *)(*(void *)a2 + v230);
              *((void *)a2 + 1) = v231;
              BOOL v233 = v232 != 0;
            }
            *((unsigned char *)this + 395) = v233;
            goto LABEL_20;
          case 0x2Au:
            *((_DWORD *)this + 99) |= 4u;
            unint64_t v234 = *((void *)a2 + 1);
            if (v234 > 0xFFFFFFFFFFFFFFF7 || v234 + 8 > *((void *)a2 + 2)) {
              goto LABEL_344;
            }
            *((void *)this + 30) = *(void *)(*(void *)a2 + v234);
            goto LABEL_633;
          case 0x2Bu:
            *((_DWORD *)this + 99) |= 8u;
            unint64_t v235 = *((void *)a2 + 1);
            if (v235 > 0xFFFFFFFFFFFFFFF7 || v235 + 8 > *((void *)a2 + 2))
            {
LABEL_344:
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_20;
            }
            *((void *)this + 31) = *(void *)(*(void *)a2 + v235);
            goto LABEL_633;
          case 0x33u:
            *((_DWORD *)this + 99) |= 0x100000u;
            unint64_t v236 = *((void *)a2 + 1);
            if (v236 >= *((void *)a2 + 2))
            {
              BOOL v239 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v237 = v236 + 1;
              int v238 = *(unsigned __int8 *)(*(void *)a2 + v236);
              *((void *)a2 + 1) = v237;
              BOOL v239 = v238 != 0;
            }
            *((unsigned char *)this + 384) = v239;
            goto LABEL_20;
          case 0x34u:
            *((_DWORD *)this + 99) |= 0x400000u;
            unint64_t v240 = *((void *)a2 + 1);
            if (v240 >= *((void *)a2 + 2))
            {
              BOOL v243 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v241 = v240 + 1;
              int v242 = *(unsigned __int8 *)(*(void *)a2 + v240);
              *((void *)a2 + 1) = v241;
              BOOL v243 = v242 != 0;
            }
            *((unsigned char *)this + 386) = v243;
            goto LABEL_20;
          case 0x35u:
            *((_DWORD *)this + 99) |= 0x40000000u;
            unint64_t v244 = *((void *)a2 + 1);
            if (v244 >= *((void *)a2 + 2))
            {
              BOOL v247 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v245 = v244 + 1;
              int v246 = *(unsigned __int8 *)(*(void *)a2 + v244);
              *((void *)a2 + 1) = v245;
              BOOL v247 = v246 != 0;
            }
            *((unsigned char *)this + 394) = v247;
            goto LABEL_20;
          case 0x36u:
            *((_DWORD *)this + 99) |= 0x200000u;
            unint64_t v248 = *((void *)a2 + 1);
            if (v248 >= *((void *)a2 + 2))
            {
              BOOL v251 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v249 = v248 + 1;
              int v250 = *(unsigned __int8 *)(*(void *)a2 + v248);
              *((void *)a2 + 1) = v249;
              BOOL v251 = v250 != 0;
            }
            *((unsigned char *)this + 385) = v251;
            goto LABEL_20;
          case 0x37u:
            *((_DWORD *)this + 99) |= 0x800000u;
            unint64_t v252 = *((void *)a2 + 1);
            if (v252 >= *((void *)a2 + 2))
            {
              BOOL v255 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v253 = v252 + 1;
              int v254 = *(unsigned __int8 *)(*(void *)a2 + v252);
              *((void *)a2 + 1) = v253;
              BOOL v255 = v254 != 0;
            }
            *((unsigned char *)this + 387) = v255;
            goto LABEL_20;
          default:
            switch((int)v21)
            {
              case 151:
                if (v20 == 2)
                {
                  if (PB::Reader::placeMark()) {
                    return 0;
                  }
                  unint64_t v30 = *((void *)a2 + 1);
                  unint64_t v31 = *((void *)a2 + 2);
                  while (v30 < v31 && !*((unsigned char *)a2 + 24))
                  {
                    uint64_t v33 = (char *)*((void *)this + 5);
                    unint64_t v32 = *((void *)this + 6);
                    if ((unint64_t)v33 >= v32)
                    {
                      int v35 = (char *)*((void *)this + 4);
                      uint64_t v36 = (v33 - v35) >> 3;
                      unint64_t v37 = v36 + 1;
                      if ((unint64_t)(v36 + 1) >> 61) {
                        goto LABEL_638;
                      }
                      uint64_t v38 = v32 - (void)v35;
                      if (v38 >> 2 > v37) {
                        unint64_t v37 = v38 >> 2;
                      }
                      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v39 = v37;
                      }
                      if (v39)
                      {
                        unint64_t v39 = (unint64_t)sub_2572C7528(v39);
                        int v35 = (char *)*((void *)this + 4);
                        uint64_t v33 = (char *)*((void *)this + 5);
                      }
                      else
                      {
                        uint64_t v40 = 0;
                      }
                      uint64_t v41 = (void *)(v39 + 8 * v36);
                      *uint64_t v41 = 0;
                      double v34 = v41 + 1;
                      while (v33 != v35)
                      {
                        uint64_t v42 = *((void *)v33 - 1);
                        v33 -= 8;
                        *--uint64_t v41 = v42;
                      }
                      *((void *)this + 4) = v41;
                      *((void *)this + 5) = v34;
                      *((void *)this + 6) = v39 + 8 * v40;
                      if (v35) {
                        operator delete(v35);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v33 = 0;
                      double v34 = v33 + 8;
                    }
                    *((void *)this + 5) = v34;
                    unint64_t v43 = *((void *)a2 + 1);
                    if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((void *)a2 + 2)) {
                      goto LABEL_254;
                    }
                    *(v34 - 1) = *(void *)(*(void *)a2 + v43);
                    unint64_t v31 = *((void *)a2 + 2);
                    unint64_t v30 = *((void *)a2 + 1) + 8;
                    *((void *)a2 + 1) = v30;
                  }
                  goto LABEL_255;
                }
                char v273 = (char *)*((void *)this + 5);
                unint64_t v272 = *((void *)this + 6);
                if ((unint64_t)v273 >= v272)
                {
                  uint64_t v323 = (char *)*((void *)this + 4);
                  uint64_t v324 = (v273 - v323) >> 3;
                  unint64_t v325 = v324 + 1;
                  if ((unint64_t)(v324 + 1) >> 61) {
                    goto LABEL_638;
                  }
                  uint64_t v326 = v272 - (void)v323;
                  if (v326 >> 2 > v325) {
                    unint64_t v325 = v326 >> 2;
                  }
                  if ((unint64_t)v326 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v327 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v327 = v325;
                  }
                  if (v327)
                  {
                    unint64_t v327 = (unint64_t)sub_2572C7528(v327);
                    uint64_t v323 = (char *)*((void *)this + 4);
                    char v273 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    uint64_t v328 = 0;
                  }
                  unint64_t v377 = (void *)(v327 + 8 * v324);
                  *unint64_t v377 = 0;
                  char v274 = v377 + 1;
                  while (v273 != v323)
                  {
                    uint64_t v378 = *((void *)v273 - 1);
                    v273 -= 8;
                    *--unint64_t v377 = v378;
                  }
                  *((void *)this + 4) = v377;
                  *((void *)this + 5) = v274;
                  *((void *)this + 6) = v327 + 8 * v328;
                  if (v323) {
                    operator delete(v323);
                  }
                }
                else
                {
                  *(void *)char v273 = 0;
                  char v274 = v273 + 8;
                }
                *((void *)this + 5) = v274;
                goto LABEL_629;
              case 152:
                if (v20 == 2)
                {
                  if (PB::Reader::placeMark()) {
                    return 0;
                  }
                  unint64_t v48 = *((void *)a2 + 1);
                  unint64_t v49 = *((void *)a2 + 2);
                  while (v48 < v49 && !*((unsigned char *)a2 + 24))
                  {
                    uint64_t v51 = (char *)*((void *)this + 2);
                    unint64_t v50 = *((void *)this + 3);
                    if ((unint64_t)v51 >= v50)
                    {
                      unsigned int v53 = (char *)*((void *)this + 1);
                      uint64_t v54 = (v51 - v53) >> 3;
                      unint64_t v55 = v54 + 1;
                      if ((unint64_t)(v54 + 1) >> 61) {
                        goto LABEL_638;
                      }
                      uint64_t v56 = v50 - (void)v53;
                      if (v56 >> 2 > v55) {
                        unint64_t v55 = v56 >> 2;
                      }
                      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v57 = v55;
                      }
                      if (v57)
                      {
                        unint64_t v57 = (unint64_t)sub_2572C7528(v57);
                        unsigned int v53 = (char *)*((void *)this + 1);
                        uint64_t v51 = (char *)*((void *)this + 2);
                      }
                      else
                      {
                        uint64_t v58 = 0;
                      }
                      uint64_t v59 = (void *)(v57 + 8 * v54);
                      *uint64_t v59 = 0;
                      uint64_t v52 = v59 + 1;
                      while (v51 != v53)
                      {
                        uint64_t v60 = *((void *)v51 - 1);
                        v51 -= 8;
                        *--uint64_t v59 = v60;
                      }
                      *((void *)this + 1) = v59;
                      *((void *)this + 2) = v52;
                      *((void *)this + 3) = v57 + 8 * v58;
                      if (v53) {
                        operator delete(v53);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v51 = 0;
                      uint64_t v52 = v51 + 8;
                    }
                    *((void *)this + 2) = v52;
                    unint64_t v61 = *((void *)a2 + 1);
                    if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((void *)a2 + 2)) {
                      goto LABEL_254;
                    }
                    *(v52 - 1) = *(void *)(*(void *)a2 + v61);
                    unint64_t v49 = *((void *)a2 + 2);
                    unint64_t v48 = *((void *)a2 + 1) + 8;
                    *((void *)a2 + 1) = v48;
                  }
                  goto LABEL_255;
                }
                unint64_t v276 = (char *)*((void *)this + 2);
                unint64_t v275 = *((void *)this + 3);
                if ((unint64_t)v276 >= v275)
                {
                  char v329 = (char *)*((void *)this + 1);
                  uint64_t v330 = (v276 - v329) >> 3;
                  unint64_t v331 = v330 + 1;
                  if ((unint64_t)(v330 + 1) >> 61) {
                    goto LABEL_638;
                  }
                  uint64_t v332 = v275 - (void)v329;
                  if (v332 >> 2 > v331) {
                    unint64_t v331 = v332 >> 2;
                  }
                  if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v333 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v333 = v331;
                  }
                  if (v333)
                  {
                    unint64_t v333 = (unint64_t)sub_2572C7528(v333);
                    char v329 = (char *)*((void *)this + 1);
                    unint64_t v276 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    uint64_t v334 = 0;
                  }
                  char v379 = (void *)(v333 + 8 * v330);
                  *char v379 = 0;
                  char v274 = v379 + 1;
                  while (v276 != v329)
                  {
                    uint64_t v380 = *((void *)v276 - 1);
                    v276 -= 8;
                    *--char v379 = v380;
                  }
                  *((void *)this + 1) = v379;
                  *((void *)this + 2) = v274;
                  *((void *)this + 3) = v333 + 8 * v334;
                  if (v329) {
                    operator delete(v329);
                  }
                }
                else
                {
                  *(void *)unint64_t v276 = 0;
                  char v274 = v276 + 8;
                }
                *((void *)this + 2) = v274;
                goto LABEL_629;
              case 153:
                if (v20 == 2)
                {
                  if (PB::Reader::placeMark()) {
                    return 0;
                  }
                  unint64_t v62 = *((void *)a2 + 1);
                  unint64_t v63 = *((void *)a2 + 2);
                  while (v62 < v63 && !*((unsigned char *)a2 + 24))
                  {
                    unint64_t v65 = (char *)*((void *)this + 8);
                    unint64_t v64 = *((void *)this + 9);
                    if ((unint64_t)v65 >= v64)
                    {
                      unint64_t v67 = (char *)*((void *)this + 7);
                      uint64_t v68 = (v65 - v67) >> 3;
                      unint64_t v69 = v68 + 1;
                      if ((unint64_t)(v68 + 1) >> 61) {
                        goto LABEL_638;
                      }
                      uint64_t v70 = v64 - (void)v67;
                      if (v70 >> 2 > v69) {
                        unint64_t v69 = v70 >> 2;
                      }
                      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v71 = v69;
                      }
                      if (v71)
                      {
                        unint64_t v71 = (unint64_t)sub_2572C7528(v71);
                        unint64_t v67 = (char *)*((void *)this + 7);
                        unint64_t v65 = (char *)*((void *)this + 8);
                      }
                      else
                      {
                        uint64_t v72 = 0;
                      }
                      uint64_t v73 = (void *)(v71 + 8 * v68);
                      *uint64_t v73 = 0;
                      unint64_t v66 = v73 + 1;
                      while (v65 != v67)
                      {
                        uint64_t v74 = *((void *)v65 - 1);
                        v65 -= 8;
                        *--uint64_t v73 = v74;
                      }
                      *((void *)this + 7) = v73;
                      *((void *)this + 8) = v66;
                      *((void *)this + 9) = v71 + 8 * v72;
                      if (v67) {
                        operator delete(v67);
                      }
                    }
                    else
                    {
                      *(void *)unint64_t v65 = 0;
                      unint64_t v66 = v65 + 8;
                    }
                    *((void *)this + 8) = v66;
                    unint64_t v75 = *((void *)a2 + 1);
                    if (v75 > 0xFFFFFFFFFFFFFFF7 || v75 + 8 > *((void *)a2 + 2)) {
                      goto LABEL_254;
                    }
                    *(v66 - 1) = *(void *)(*(void *)a2 + v75);
                    unint64_t v63 = *((void *)a2 + 2);
                    unint64_t v62 = *((void *)a2 + 1) + 8;
                    *((void *)a2 + 1) = v62;
                  }
                  goto LABEL_255;
                }
                char v278 = (char *)*((void *)this + 8);
                unint64_t v277 = *((void *)this + 9);
                if ((unint64_t)v278 >= v277)
                {
                  unint64_t v335 = (char *)*((void *)this + 7);
                  uint64_t v336 = (v278 - v335) >> 3;
                  unint64_t v337 = v336 + 1;
                  if ((unint64_t)(v336 + 1) >> 61) {
                    goto LABEL_638;
                  }
                  uint64_t v338 = v277 - (void)v335;
                  if (v338 >> 2 > v337) {
                    unint64_t v337 = v338 >> 2;
                  }
                  if ((unint64_t)v338 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v339 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v339 = v337;
                  }
                  if (v339)
                  {
                    unint64_t v339 = (unint64_t)sub_2572C7528(v339);
                    unint64_t v335 = (char *)*((void *)this + 7);
                    char v278 = (char *)*((void *)this + 8);
                  }
                  else
                  {
                    uint64_t v340 = 0;
                  }
                  unint64_t v381 = (void *)(v339 + 8 * v336);
                  *unint64_t v381 = 0;
                  char v274 = v381 + 1;
                  while (v278 != v335)
                  {
                    uint64_t v382 = *((void *)v278 - 1);
                    v278 -= 8;
                    *--unint64_t v381 = v382;
                  }
                  *((void *)this + 7) = v381;
                  *((void *)this + 8) = v274;
                  *((void *)this + 9) = v339 + 8 * v340;
                  if (v335) {
                    operator delete(v335);
                  }
                }
                else
                {
                  *(void *)char v278 = 0;
                  char v274 = v278 + 8;
                }
                *((void *)this + 8) = v274;
                goto LABEL_629;
              case 154:
              case 155:
              case 156:
              case 157:
              case 158:
              case 159:
              case 160:
                goto LABEL_19;
              case 161:
                if (v20 == 2)
                {
                  if (PB::Reader::placeMark()) {
                    return 0;
                  }
                  unint64_t v76 = *((void *)a2 + 1);
                  unint64_t v77 = *((void *)a2 + 2);
                  while (v76 < v77 && !*((unsigned char *)a2 + 24))
                  {
                    uint64_t v79 = (char *)*((void *)this + 14);
                    unint64_t v78 = *((void *)this + 15);
                    if ((unint64_t)v79 >= v78)
                    {
                      unsigned int v81 = (char *)*((void *)this + 13);
                      uint64_t v82 = (v79 - v81) >> 3;
                      unint64_t v83 = v82 + 1;
                      if ((unint64_t)(v82 + 1) >> 61) {
                        goto LABEL_638;
                      }
                      uint64_t v84 = v78 - (void)v81;
                      if (v84 >> 2 > v83) {
                        unint64_t v83 = v84 >> 2;
                      }
                      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v85 = v83;
                      }
                      if (v85)
                      {
                        unint64_t v85 = (unint64_t)sub_2572C7528(v85);
                        unsigned int v81 = (char *)*((void *)this + 13);
                        uint64_t v79 = (char *)*((void *)this + 14);
                      }
                      else
                      {
                        uint64_t v86 = 0;
                      }
                      int v87 = (void *)(v85 + 8 * v82);
                      *int v87 = 0;
                      char v80 = v87 + 1;
                      while (v79 != v81)
                      {
                        uint64_t v88 = *((void *)v79 - 1);
                        v79 -= 8;
                        *--int v87 = v88;
                      }
                      *((void *)this + 13) = v87;
                      *((void *)this + 14) = v80;
                      *((void *)this + 15) = v85 + 8 * v86;
                      if (v81) {
                        operator delete(v81);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v79 = 0;
                      char v80 = v79 + 8;
                    }
                    *((void *)this + 14) = v80;
                    unint64_t v89 = *((void *)a2 + 1);
                    if (v89 > 0xFFFFFFFFFFFFFFF7 || v89 + 8 > *((void *)a2 + 2)) {
                      goto LABEL_254;
                    }
                    *(v80 - 1) = *(void *)(*(void *)a2 + v89);
                    unint64_t v77 = *((void *)a2 + 2);
                    unint64_t v76 = *((void *)a2 + 1) + 8;
                    *((void *)a2 + 1) = v76;
                  }
                  goto LABEL_255;
                }
                unint64_t v280 = (char *)*((void *)this + 14);
                unint64_t v279 = *((void *)this + 15);
                if ((unint64_t)v280 >= v279)
                {
                  char v341 = (char *)*((void *)this + 13);
                  uint64_t v342 = (v280 - v341) >> 3;
                  unint64_t v343 = v342 + 1;
                  if ((unint64_t)(v342 + 1) >> 61) {
                    goto LABEL_638;
                  }
                  uint64_t v344 = v279 - (void)v341;
                  if (v344 >> 2 > v343) {
                    unint64_t v343 = v344 >> 2;
                  }
                  if ((unint64_t)v344 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v345 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v345 = v343;
                  }
                  if (v345)
                  {
                    unint64_t v345 = (unint64_t)sub_2572C7528(v345);
                    char v341 = (char *)*((void *)this + 13);
                    unint64_t v280 = (char *)*((void *)this + 14);
                  }
                  else
                  {
                    uint64_t v346 = 0;
                  }
                  char v383 = (void *)(v345 + 8 * v342);
                  *char v383 = 0;
                  char v274 = v383 + 1;
                  while (v280 != v341)
                  {
                    uint64_t v384 = *((void *)v280 - 1);
                    v280 -= 8;
                    *--char v383 = v384;
                  }
                  *((void *)this + 13) = v383;
                  *((void *)this + 14) = v274;
                  *((void *)this + 15) = v345 + 8 * v346;
                  if (v341) {
                    operator delete(v341);
                  }
                }
                else
                {
                  *(void *)unint64_t v280 = 0;
                  char v274 = v280 + 8;
                }
                *((void *)this + 14) = v274;
                goto LABEL_629;
              case 162:
                if (v20 == 2)
                {
                  if (PB::Reader::placeMark()) {
                    return 0;
                  }
                  unint64_t v90 = *((void *)a2 + 1);
                  unint64_t v91 = *((void *)a2 + 2);
                  while (v90 < v91 && !*((unsigned char *)a2 + 24))
                  {
                    unint64_t v93 = (char *)*((void *)this + 11);
                    unint64_t v92 = *((void *)this + 12);
                    if ((unint64_t)v93 >= v92)
                    {
                      uint64_t v95 = (char *)*((void *)this + 10);
                      uint64_t v96 = (v93 - v95) >> 3;
                      unint64_t v97 = v96 + 1;
                      if ((unint64_t)(v96 + 1) >> 61) {
                        goto LABEL_638;
                      }
                      uint64_t v98 = v92 - (void)v95;
                      if (v98 >> 2 > v97) {
                        unint64_t v97 = v98 >> 2;
                      }
                      if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v99 = v97;
                      }
                      if (v99)
                      {
                        unint64_t v99 = (unint64_t)sub_2572C7528(v99);
                        uint64_t v95 = (char *)*((void *)this + 10);
                        unint64_t v93 = (char *)*((void *)this + 11);
                      }
                      else
                      {
                        uint64_t v100 = 0;
                      }
                      unint64_t v101 = (void *)(v99 + 8 * v96);
                      *unint64_t v101 = 0;
                      unint64_t v94 = v101 + 1;
                      while (v93 != v95)
                      {
                        uint64_t v102 = *((void *)v93 - 1);
                        v93 -= 8;
                        *--unint64_t v101 = v102;
                      }
                      *((void *)this + 10) = v101;
                      *((void *)this + 11) = v94;
                      *((void *)this + 12) = v99 + 8 * v100;
                      if (v95) {
                        operator delete(v95);
                      }
                    }
                    else
                    {
                      *(void *)unint64_t v93 = 0;
                      unint64_t v94 = v93 + 8;
                    }
                    *((void *)this + 11) = v94;
                    unint64_t v103 = *((void *)a2 + 1);
                    if (v103 > 0xFFFFFFFFFFFFFFF7 || v103 + 8 > *((void *)a2 + 2)) {
                      goto LABEL_254;
                    }
                    *(v94 - 1) = *(void *)(*(void *)a2 + v103);
                    unint64_t v91 = *((void *)a2 + 2);
                    unint64_t v90 = *((void *)a2 + 1) + 8;
                    *((void *)a2 + 1) = v90;
                  }
                  goto LABEL_255;
                }
                char v282 = (char *)*((void *)this + 11);
                unint64_t v281 = *((void *)this + 12);
                if ((unint64_t)v282 >= v281)
                {
                  uint64_t v347 = (char *)*((void *)this + 10);
                  uint64_t v348 = (v282 - v347) >> 3;
                  unint64_t v349 = v348 + 1;
                  if ((unint64_t)(v348 + 1) >> 61) {
                    goto LABEL_638;
                  }
                  uint64_t v350 = v281 - (void)v347;
                  if (v350 >> 2 > v349) {
                    unint64_t v349 = v350 >> 2;
                  }
                  if ((unint64_t)v350 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v351 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v351 = v349;
                  }
                  if (v351)
                  {
                    unint64_t v351 = (unint64_t)sub_2572C7528(v351);
                    uint64_t v347 = (char *)*((void *)this + 10);
                    char v282 = (char *)*((void *)this + 11);
                  }
                  else
                  {
                    uint64_t v352 = 0;
                  }
                  unint64_t v385 = (void *)(v351 + 8 * v348);
                  *unint64_t v385 = 0;
                  char v274 = v385 + 1;
                  while (v282 != v347)
                  {
                    uint64_t v386 = *((void *)v282 - 1);
                    v282 -= 8;
                    *--unint64_t v385 = v386;
                  }
                  *((void *)this + 10) = v385;
                  *((void *)this + 11) = v274;
                  *((void *)this + 12) = v351 + 8 * v352;
                  if (v347) {
                    operator delete(v347);
                  }
                }
                else
                {
                  *(void *)char v282 = 0;
                  char v274 = v282 + 8;
                }
                *((void *)this + 11) = v274;
                goto LABEL_629;
              case 163:
                if (v20 == 2)
                {
                  if (PB::Reader::placeMark()) {
                    return 0;
                  }
                  unint64_t v104 = *((void *)a2 + 1);
                  unint64_t v105 = *((void *)a2 + 2);
                  while (v104 < v105 && !*((unsigned char *)a2 + 24))
                  {
                    unint64_t v107 = (char *)*((void *)this + 17);
                    unint64_t v106 = *((void *)this + 18);
                    if ((unint64_t)v107 >= v106)
                    {
                      unint64_t v109 = (char *)*((void *)this + 16);
                      uint64_t v110 = (v107 - v109) >> 3;
                      unint64_t v111 = v110 + 1;
                      if ((unint64_t)(v110 + 1) >> 61) {
                        goto LABEL_638;
                      }
                      uint64_t v112 = v106 - (void)v109;
                      if (v112 >> 2 > v111) {
                        unint64_t v111 = v112 >> 2;
                      }
                      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v113 = v111;
                      }
                      if (v113)
                      {
                        unint64_t v113 = (unint64_t)sub_2572C7528(v113);
                        unint64_t v109 = (char *)*((void *)this + 16);
                        unint64_t v107 = (char *)*((void *)this + 17);
                      }
                      else
                      {
                        uint64_t v114 = 0;
                      }
                      unint64_t v115 = (void *)(v113 + 8 * v110);
                      *unint64_t v115 = 0;
                      char v108 = v115 + 1;
                      while (v107 != v109)
                      {
                        uint64_t v116 = *((void *)v107 - 1);
                        v107 -= 8;
                        *--unint64_t v115 = v116;
                      }
                      *((void *)this + 16) = v115;
                      *((void *)this + 17) = v108;
                      *((void *)this + 18) = v113 + 8 * v114;
                      if (v109) {
                        operator delete(v109);
                      }
                    }
                    else
                    {
                      *(void *)unint64_t v107 = 0;
                      char v108 = v107 + 8;
                    }
                    *((void *)this + 17) = v108;
                    unint64_t v117 = *((void *)a2 + 1);
                    if (v117 > 0xFFFFFFFFFFFFFFF7 || v117 + 8 > *((void *)a2 + 2)) {
                      goto LABEL_254;
                    }
                    *(v108 - 1) = *(void *)(*(void *)a2 + v117);
                    unint64_t v105 = *((void *)a2 + 2);
                    unint64_t v104 = *((void *)a2 + 1) + 8;
                    *((void *)a2 + 1) = v104;
                  }
                  goto LABEL_255;
                }
                unint64_t v284 = (char *)*((void *)this + 17);
                unint64_t v283 = *((void *)this + 18);
                if ((unint64_t)v284 >= v283)
                {
                  char v353 = (char *)*((void *)this + 16);
                  uint64_t v354 = (v284 - v353) >> 3;
                  unint64_t v355 = v354 + 1;
                  if ((unint64_t)(v354 + 1) >> 61) {
                    goto LABEL_638;
                  }
                  uint64_t v356 = v283 - (void)v353;
                  if (v356 >> 2 > v355) {
                    unint64_t v355 = v356 >> 2;
                  }
                  if ((unint64_t)v356 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v357 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v357 = v355;
                  }
                  if (v357)
                  {
                    unint64_t v357 = (unint64_t)sub_2572C7528(v357);
                    char v353 = (char *)*((void *)this + 16);
                    unint64_t v284 = (char *)*((void *)this + 17);
                  }
                  else
                  {
                    uint64_t v358 = 0;
                  }
                  char v387 = (void *)(v357 + 8 * v354);
                  *char v387 = 0;
                  char v274 = v387 + 1;
                  while (v284 != v353)
                  {
                    uint64_t v388 = *((void *)v284 - 1);
                    v284 -= 8;
                    *--char v387 = v388;
                  }
                  *((void *)this + 16) = v387;
                  *((void *)this + 17) = v274;
                  *((void *)this + 18) = v357 + 8 * v358;
                  if (v353) {
                    operator delete(v353);
                  }
                }
                else
                {
                  *(void *)unint64_t v284 = 0;
                  char v274 = v284 + 8;
                }
                *((void *)this + 17) = v274;
                goto LABEL_629;
              case 164:
                if (v20 == 2)
                {
                  if (PB::Reader::placeMark()) {
                    return 0;
                  }
                  unint64_t v118 = *((void *)a2 + 1);
                  unint64_t v119 = *((void *)a2 + 2);
                  while (v118 < v119 && !*((unsigned char *)a2 + 24))
                  {
                    unint64_t v121 = (char *)*((void *)this + 23);
                    unint64_t v120 = *((void *)this + 24);
                    if ((unint64_t)v121 >= v120)
                    {
                      int v123 = (char *)*((void *)this + 22);
                      uint64_t v124 = (v121 - v123) >> 3;
                      unint64_t v125 = v124 + 1;
                      if ((unint64_t)(v124 + 1) >> 61) {
                        goto LABEL_638;
                      }
                      uint64_t v126 = v120 - (void)v123;
                      if (v126 >> 2 > v125) {
                        unint64_t v125 = v126 >> 2;
                      }
                      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v127 = v125;
                      }
                      if (v127)
                      {
                        unint64_t v127 = (unint64_t)sub_2572C7528(v127);
                        int v123 = (char *)*((void *)this + 22);
                        unint64_t v121 = (char *)*((void *)this + 23);
                      }
                      else
                      {
                        uint64_t v128 = 0;
                      }
                      unsigned int v129 = (void *)(v127 + 8 * v124);
                      *unsigned int v129 = 0;
                      unint64_t v122 = v129 + 1;
                      while (v121 != v123)
                      {
                        uint64_t v130 = *((void *)v121 - 1);
                        v121 -= 8;
                        *--unsigned int v129 = v130;
                      }
                      *((void *)this + 22) = v129;
                      *((void *)this + 23) = v122;
                      *((void *)this + 24) = v127 + 8 * v128;
                      if (v123) {
                        operator delete(v123);
                      }
                    }
                    else
                    {
                      *(void *)unint64_t v121 = 0;
                      unint64_t v122 = v121 + 8;
                    }
                    *((void *)this + 23) = v122;
                    unint64_t v131 = *((void *)a2 + 1);
                    if (v131 > 0xFFFFFFFFFFFFFFF7 || v131 + 8 > *((void *)a2 + 2)) {
                      goto LABEL_254;
                    }
                    *(v122 - 1) = *(void *)(*(void *)a2 + v131);
                    unint64_t v119 = *((void *)a2 + 2);
                    unint64_t v118 = *((void *)a2 + 1) + 8;
                    *((void *)a2 + 1) = v118;
                  }
                  goto LABEL_255;
                }
                char v286 = (char *)*((void *)this + 23);
                unint64_t v285 = *((void *)this + 24);
                if ((unint64_t)v286 >= v285)
                {
                  unint64_t v359 = (char *)*((void *)this + 22);
                  uint64_t v360 = (v286 - v359) >> 3;
                  unint64_t v361 = v360 + 1;
                  if ((unint64_t)(v360 + 1) >> 61) {
                    goto LABEL_638;
                  }
                  uint64_t v362 = v285 - (void)v359;
                  if (v362 >> 2 > v361) {
                    unint64_t v361 = v362 >> 2;
                  }
                  if ((unint64_t)v362 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v363 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v363 = v361;
                  }
                  if (v363)
                  {
                    unint64_t v363 = (unint64_t)sub_2572C7528(v363);
                    unint64_t v359 = (char *)*((void *)this + 22);
                    char v286 = (char *)*((void *)this + 23);
                  }
                  else
                  {
                    uint64_t v364 = 0;
                  }
                  unint64_t v389 = (void *)(v363 + 8 * v360);
                  *unint64_t v389 = 0;
                  char v274 = v389 + 1;
                  while (v286 != v359)
                  {
                    uint64_t v390 = *((void *)v286 - 1);
                    v286 -= 8;
                    *--unint64_t v389 = v390;
                  }
                  *((void *)this + 22) = v389;
                  *((void *)this + 23) = v274;
                  *((void *)this + 24) = v363 + 8 * v364;
                  if (v359) {
                    operator delete(v359);
                  }
                }
                else
                {
                  *(void *)char v286 = 0;
                  char v274 = v286 + 8;
                }
                *((void *)this + 23) = v274;
                goto LABEL_629;
              case 165:
                if (v20 == 2)
                {
                  if (PB::Reader::placeMark()) {
                    return 0;
                  }
                  unint64_t v132 = *((void *)a2 + 1);
                  unint64_t v133 = *((void *)a2 + 2);
                  while (v132 < v133 && !*((unsigned char *)a2 + 24))
                  {
                    uint64_t v135 = (char *)*((void *)this + 20);
                    unint64_t v134 = *((void *)this + 21);
                    if ((unint64_t)v135 >= v134)
                    {
                      unsigned int v137 = (char *)*((void *)this + 19);
                      uint64_t v138 = (v135 - v137) >> 3;
                      unint64_t v139 = v138 + 1;
                      if ((unint64_t)(v138 + 1) >> 61) {
                        goto LABEL_638;
                      }
                      uint64_t v140 = v134 - (void)v137;
                      if (v140 >> 2 > v139) {
                        unint64_t v139 = v140 >> 2;
                      }
                      if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v141 = v139;
                      }
                      if (v141)
                      {
                        unint64_t v141 = (unint64_t)sub_2572C7528(v141);
                        unsigned int v137 = (char *)*((void *)this + 19);
                        uint64_t v135 = (char *)*((void *)this + 20);
                      }
                      else
                      {
                        uint64_t v142 = 0;
                      }
                      uint64_t v143 = (void *)(v141 + 8 * v138);
                      *uint64_t v143 = 0;
                      char v136 = v143 + 1;
                      while (v135 != v137)
                      {
                        uint64_t v144 = *((void *)v135 - 1);
                        v135 -= 8;
                        *--uint64_t v143 = v144;
                      }
                      *((void *)this + 19) = v143;
                      *((void *)this + 20) = v136;
                      *((void *)this + 21) = v141 + 8 * v142;
                      if (v137) {
                        operator delete(v137);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v135 = 0;
                      char v136 = v135 + 8;
                    }
                    *((void *)this + 20) = v136;
                    unint64_t v145 = *((void *)a2 + 1);
                    if (v145 > 0xFFFFFFFFFFFFFFF7 || v145 + 8 > *((void *)a2 + 2)) {
                      goto LABEL_254;
                    }
                    *(v136 - 1) = *(void *)(*(void *)a2 + v145);
                    unint64_t v133 = *((void *)a2 + 2);
                    unint64_t v132 = *((void *)a2 + 1) + 8;
                    *((void *)a2 + 1) = v132;
                  }
                  goto LABEL_255;
                }
                unint64_t v288 = (char *)*((void *)this + 20);
                unint64_t v287 = *((void *)this + 21);
                if ((unint64_t)v288 >= v287)
                {
                  char v365 = (char *)*((void *)this + 19);
                  uint64_t v366 = (v288 - v365) >> 3;
                  unint64_t v367 = v366 + 1;
                  if ((unint64_t)(v366 + 1) >> 61) {
                    goto LABEL_638;
                  }
                  uint64_t v368 = v287 - (void)v365;
                  if (v368 >> 2 > v367) {
                    unint64_t v367 = v368 >> 2;
                  }
                  if ((unint64_t)v368 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v369 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v369 = v367;
                  }
                  if (v369)
                  {
                    unint64_t v369 = (unint64_t)sub_2572C7528(v369);
                    char v365 = (char *)*((void *)this + 19);
                    unint64_t v288 = (char *)*((void *)this + 20);
                  }
                  else
                  {
                    uint64_t v370 = 0;
                  }
                  char v391 = (void *)(v369 + 8 * v366);
                  *char v391 = 0;
                  char v274 = v391 + 1;
                  while (v288 != v365)
                  {
                    uint64_t v392 = *((void *)v288 - 1);
                    v288 -= 8;
                    *--char v391 = v392;
                  }
                  *((void *)this + 19) = v391;
                  *((void *)this + 20) = v274;
                  *((void *)this + 21) = v369 + 8 * v370;
                  if (v365) {
                    operator delete(v365);
                  }
                }
                else
                {
                  *(void *)unint64_t v288 = 0;
                  char v274 = v288 + 8;
                }
                *((void *)this + 20) = v274;
                goto LABEL_629;
              case 166:
                if (v20 == 2)
                {
                  if (PB::Reader::placeMark()) {
                    return 0;
                  }
                  unint64_t v146 = *((void *)a2 + 1);
                  unint64_t v147 = *((void *)a2 + 2);
                  while (v146 < v147 && !*((unsigned char *)a2 + 24))
                  {
                    unint64_t v149 = (char *)*((void *)this + 26);
                    unint64_t v148 = *((void *)this + 27);
                    if ((unint64_t)v149 >= v148)
                    {
                      uint64_t v151 = (char *)*((void *)this + 25);
                      uint64_t v152 = (v149 - v151) >> 3;
                      unint64_t v153 = v152 + 1;
                      if ((unint64_t)(v152 + 1) >> 61) {
                        goto LABEL_638;
                      }
                      uint64_t v154 = v148 - (void)v151;
                      if (v154 >> 2 > v153) {
                        unint64_t v153 = v154 >> 2;
                      }
                      if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v155 = v153;
                      }
                      if (v155)
                      {
                        unint64_t v155 = (unint64_t)sub_2572C7528(v155);
                        uint64_t v151 = (char *)*((void *)this + 25);
                        unint64_t v149 = (char *)*((void *)this + 26);
                      }
                      else
                      {
                        uint64_t v156 = 0;
                      }
                      unint64_t v157 = (void *)(v155 + 8 * v152);
                      *unint64_t v157 = 0;
                      unint64_t v150 = v157 + 1;
                      while (v149 != v151)
                      {
                        uint64_t v158 = *((void *)v149 - 1);
                        v149 -= 8;
                        *--unint64_t v157 = v158;
                      }
                      *((void *)this + 25) = v157;
                      *((void *)this + 26) = v150;
                      *((void *)this + 27) = v155 + 8 * v156;
                      if (v151) {
                        operator delete(v151);
                      }
                    }
                    else
                    {
                      *(void *)unint64_t v149 = 0;
                      unint64_t v150 = v149 + 8;
                    }
                    *((void *)this + 26) = v150;
                    unint64_t v159 = *((void *)a2 + 1);
                    if (v159 > 0xFFFFFFFFFFFFFFF7 || v159 + 8 > *((void *)a2 + 2))
                    {
LABEL_254:
                      *((unsigned char *)a2 + 24) = 1;
                      break;
                    }
                    *(v150 - 1) = *(void *)(*(void *)a2 + v159);
                    unint64_t v147 = *((void *)a2 + 2);
                    unint64_t v146 = *((void *)a2 + 1) + 8;
                    *((void *)a2 + 1) = v146;
                  }
LABEL_255:
                  PB::Reader::recallMark();
                }
                else
                {
                  unsigned int v290 = (char *)*((void *)this + 26);
                  unint64_t v289 = *((void *)this + 27);
                  if ((unint64_t)v290 >= v289)
                  {
                    uint64_t v371 = (char *)*((void *)this + 25);
                    uint64_t v372 = (v290 - v371) >> 3;
                    unint64_t v373 = v372 + 1;
                    if ((unint64_t)(v372 + 1) >> 61) {
LABEL_638:
                    }
                      sub_2570AFD0C();
                    uint64_t v374 = v289 - (void)v371;
                    if (v374 >> 2 > v373) {
                      unint64_t v373 = v374 >> 2;
                    }
                    if ((unint64_t)v374 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v375 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v375 = v373;
                    }
                    if (v375)
                    {
                      unint64_t v375 = (unint64_t)sub_2572C7528(v375);
                      uint64_t v371 = (char *)*((void *)this + 25);
                      unsigned int v290 = (char *)*((void *)this + 26);
                    }
                    else
                    {
                      uint64_t v376 = 0;
                    }
                    unint64_t v393 = (void *)(v375 + 8 * v372);
                    *unint64_t v393 = 0;
                    char v274 = v393 + 1;
                    while (v290 != v371)
                    {
                      uint64_t v394 = *((void *)v290 - 1);
                      v290 -= 8;
                      *--unint64_t v393 = v394;
                    }
                    *((void *)this + 25) = v393;
                    *((void *)this + 26) = v274;
                    *((void *)this + 27) = v375 + 8 * v376;
                    if (v371) {
                      operator delete(v371);
                    }
                  }
                  else
                  {
                    *(void *)unsigned int v290 = 0;
                    char v274 = v290 + 8;
                  }
                  *((void *)this + 26) = v274;
LABEL_629:
                  unint64_t v395 = *((void *)a2 + 1);
                  if (v395 <= 0xFFFFFFFFFFFFFFF7 && v395 + 8 <= *((void *)a2 + 2))
                  {
                    *(v274 - 1) = *(void *)(*(void *)a2 + v395);
LABEL_633:
                    *((void *)a2 + 1) += 8;
                  }
                  else
                  {
                    *((unsigned char *)a2 + 24) = 1;
                  }
                }
LABEL_20:
                unint64_t v2 = *((void *)a2 + 1);
                unint64_t v3 = *((void *)a2 + 2);
                int v4 = *((unsigned __int8 *)a2 + 24);
                if (v2 >= v3 || v4 != 0) {
                  return v4 == 0;
                }
                continue;
              default:
                switch((int)v21)
                {
                  case 'e':
                    *((_DWORD *)this + 99) |= 0x10000000u;
                    unint64_t v44 = *((void *)a2 + 1);
                    if (v44 >= *((void *)a2 + 2))
                    {
                      BOOL v47 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                    }
                    else
                    {
                      unint64_t v45 = v44 + 1;
                      int v46 = *(unsigned __int8 *)(*(void *)a2 + v44);
                      *((void *)a2 + 1) = v45;
                      BOOL v47 = v46 != 0;
                    }
                    *((unsigned char *)this + 392) = v47;
                    goto LABEL_20;
                  case 'f':
                    *((_DWORD *)this + 99) |= 0x8000000u;
                    unint64_t v256 = *((void *)a2 + 1);
                    if (v256 >= *((void *)a2 + 2))
                    {
                      BOOL v259 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                    }
                    else
                    {
                      unint64_t v257 = v256 + 1;
                      int v258 = *(unsigned __int8 *)(*(void *)a2 + v256);
                      *((void *)a2 + 1) = v257;
                      BOOL v259 = v258 != 0;
                    }
                    *((unsigned char *)this + 391) = v259;
                    goto LABEL_20;
                  case 'g':
                    *((_DWORD *)this + 99) |= 0x20000000u;
                    unint64_t v260 = *((void *)a2 + 1);
                    if (v260 >= *((void *)a2 + 2))
                    {
                      BOOL v263 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                    }
                    else
                    {
                      unint64_t v261 = v260 + 1;
                      int v262 = *(unsigned __int8 *)(*(void *)a2 + v260);
                      *((void *)a2 + 1) = v261;
                      BOOL v263 = v262 != 0;
                    }
                    *((unsigned char *)this + 393) = v263;
                    goto LABEL_20;
                  case 'h':
                    *((_DWORD *)this + 99) |= 0x2000000u;
                    unint64_t v264 = *((void *)a2 + 1);
                    if (v264 >= *((void *)a2 + 2))
                    {
                      BOOL v267 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                    }
                    else
                    {
                      unint64_t v265 = v264 + 1;
                      int v266 = *(unsigned __int8 *)(*(void *)a2 + v264);
                      *((void *)a2 + 1) = v265;
                      BOOL v267 = v266 != 0;
                    }
                    *((unsigned char *)this + 389) = v267;
                    goto LABEL_20;
                  case 'i':
                    *((_DWORD *)this + 99) |= 0x4000000u;
                    unint64_t v268 = *((void *)a2 + 1);
                    if (v268 >= *((void *)a2 + 2))
                    {
                      BOOL v271 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                    }
                    else
                    {
                      unint64_t v269 = v268 + 1;
                      int v270 = *(unsigned __int8 *)(*(void *)a2 + v268);
                      *((void *)a2 + 1) = v269;
                      BOOL v271 = v270 != 0;
                    }
                    *((unsigned char *)this + 390) = v271;
                    goto LABEL_20;
                  default:
                    goto LABEL_19;
                }
            }
        }
      }
      int v4 = 0;
      return v4 == 0;
    }
    break;
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_25;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_20;
  }
  return 0;
}

uint64_t CMMsl::FallDetectionWristStateReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 396);
  if ((v4 & 0x80000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    int v4 = *(_DWORD *)(v3 + 396);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_64;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(double *)(v3 + 224));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(double *)(v3 + 368));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(double *)(v3 + 264));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(double *)(v3 + 288));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(double *)(v3 + 304));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(double *)(v3 + 296));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(double *)(v3 + 280));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(double *)(v3 + 272));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(double *)(v3 + 320));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(double *)(v3 + 312));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(double *)(v3 + 240));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(double *)(v3 + 248));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_32;
    }
LABEL_92:
    this = PB::Writer::write(a2);
    if ((*(_DWORD *)(v3 + 396) & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_91:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000000) != 0) {
    goto LABEL_92;
  }
LABEL_32:
  if ((v4 & 0x4000000) != 0) {
LABEL_33:
  }
    this = PB::Writer::write(a2);
LABEL_34:
  int v5 = *(double **)(v3 + 32);
  uint64_t v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  uint64_t v8 = *(double **)(v3 + 8);
  char v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    double v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  unint64_t v11 = *(double **)(v3 + 56);
  unint64_t v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    double v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  BOOL v14 = *(double **)(v3 + 104);
  char v15 = *(double **)(v3 + 112);
  while (v14 != v15)
  {
    double v16 = *v14++;
    this = PB::Writer::write(a2, v16);
  }
  unint64_t v17 = *(double **)(v3 + 80);
  char v18 = *(double **)(v3 + 88);
  while (v17 != v18)
  {
    double v19 = *v17++;
    this = PB::Writer::write(a2, v19);
  }
  int v20 = *(double **)(v3 + 128);
  unint64_t v21 = *(double **)(v3 + 136);
  while (v20 != v21)
  {
    double v22 = *v20++;
    this = PB::Writer::write(a2, v22);
  }
  unint64_t v23 = *(double **)(v3 + 176);
  uint64_t v24 = *(double **)(v3 + 184);
  while (v23 != v24)
  {
    double v25 = *v23++;
    this = PB::Writer::write(a2, v25);
  }
  unsigned int v26 = *(double **)(v3 + 152);
  uint64_t v27 = *(double **)(v3 + 160);
  while (v26 != v27)
  {
    double v28 = *v26++;
    this = PB::Writer::write(a2, v28);
  }
  unint64_t v30 = *(double **)(v3 + 200);
  char v29 = *(double **)(v3 + 208);
  while (v30 != v29)
  {
    double v31 = *v30++;
    this = PB::Writer::write(a2, v31);
  }
  return this;
}

BOOL CMMsl::FallDetectionWristStateReplay::operator==(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 396);
  int v4 = *(_DWORD *)(a2 + 396);
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0) {
      return 0;
    }
    uint64_t v5 = *(void *)(a1 + 376);
    uint64_t v6 = *(void *)(a2 + 376);
    BOOL v2 = __OFSUB__(v5, v6);
    if (v5 != v6) {
      return 0;
    }
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0) {
      return 0;
    }
    int v7 = *(unsigned __int8 *)(a1 + 388);
    int v8 = *(unsigned __int8 *)(a2 + 388);
    BOOL v2 = __OFSUB__(v7, v8);
    if (v7 != v8) {
      return 0;
    }
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if (v3)
  {
    if ((v4 & 1) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 224) != *(double *)(a2 + 224)) {
      return 0;
    }
  }
  else if (v4)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 368) != *(double *)(a2 + 368)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0) {
      return 0;
    }
    uint64_t v9 = *(void *)(a1 + 232);
    uint64_t v10 = *(void *)(a2 + 232);
    BOOL v2 = __OFSUB__(v9, v10);
    if (v9 != v10) {
      return 0;
    }
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0) {
      return 0;
    }
    uint64_t v11 = *(void *)(a1 + 256);
    uint64_t v12 = *(void *)(a2 + 256);
    BOOL v2 = __OFSUB__(v11, v12);
    if (v11 != v12) {
      return 0;
    }
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 264) != *(double *)(a2 + 264)) {
      return 0;
    }
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 288) != *(double *)(a2 + 288)) {
      return 0;
    }
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 304) != *(double *)(a2 + 304)) {
      return 0;
    }
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 296) != *(double *)(a2 + 296)) {
      return 0;
    }
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 280) != *(double *)(a2 + 280)) {
      return 0;
    }
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 272) != *(double *)(a2 + 272)) {
      return 0;
    }
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 320) != *(double *)(a2 + 320)) {
      return 0;
    }
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 312) != *(double *)(a2 + 312)) {
      return 0;
    }
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0) {
      return 0;
    }
    uint64_t v13 = *(void *)(a1 + 360);
    uint64_t v14 = *(void *)(a2 + 360);
    BOOL v2 = __OFSUB__(v13, v14);
    if (v13 != v14) {
      return 0;
    }
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0) {
      return 0;
    }
    uint64_t v15 = *(void *)(a1 + 352);
    uint64_t v16 = *(void *)(a2 + 352);
    BOOL v2 = __OFSUB__(v15, v16);
    if (v15 != v16) {
      return 0;
    }
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0) {
      return 0;
    }
    uint64_t v17 = *(void *)(a1 + 344);
    uint64_t v18 = *(void *)(a2 + 344);
    BOOL v2 = __OFSUB__(v17, v18);
    if (v17 != v18) {
      return 0;
    }
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(a1 + 336);
    uint64_t v20 = *(void *)(a2 + 336);
    BOOL v2 = __OFSUB__(v19, v20);
    if (v19 != v20) {
      return 0;
    }
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0) {
      return 0;
    }
    uint64_t v21 = *(void *)(a1 + 328);
    uint64_t v22 = *(void *)(a2 + 328);
    BOOL v2 = __OFSUB__(v21, v22);
    if (v21 != v22) {
      return 0;
    }
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v4 & v3) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 395) != *(unsigned __int8 *)(a2 + 395)) {
      return 0;
    }
  }
  else if ((v4 | v3) < 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0 || *(double *)(a1 + 240) != *(double *)(a2 + 240)) {
      return 0;
    }
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(double *)(a1 + 248) != *(double *)(a2 + 248)) {
      return 0;
    }
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 384) != *(unsigned __int8 *)(a2 + 384)) {
      return 0;
    }
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 386) != *(unsigned __int8 *)(a2 + 386)) {
      return 0;
    }
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 394) != *(unsigned __int8 *)(a2 + 394)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 385) != *(unsigned __int8 *)(a2 + 385)) {
      return 0;
    }
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 387) != *(unsigned __int8 *)(a2 + 387)) {
      return 0;
    }
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 392) != *(unsigned __int8 *)(a2 + 392)) {
      return 0;
    }
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 391) != *(unsigned __int8 *)(a2 + 391)) {
      return 0;
    }
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 393) != *(unsigned __int8 *)(a2 + 393)) {
      return 0;
    }
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 389) != *(unsigned __int8 *)(a2 + 389)) {
      return 0;
    }
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v4 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 390) != *(unsigned __int8 *)(a2 + 390)) {
      return 0;
    }
  }
  else if ((v4 & 0x4000000) != 0)
  {
    return 0;
  }
  uint64_t v24 = *(double **)(a1 + 32);
  unint64_t v23 = *(double **)(a1 + 40);
  double v25 = *(double **)(a2 + 32);
  if ((char *)v23 - (char *)v24 != *(void *)(a2 + 40) - (void)v25) {
    return 0;
  }
  while (v24 != v23)
  {
    if (*v24 != *v25) {
      return 0;
    }
    ++v24;
    ++v25;
  }
  uint64_t v27 = *(double **)(a1 + 8);
  unsigned int v26 = *(double **)(a1 + 16);
  double v28 = *(double **)(a2 + 8);
  if ((char *)v26 - (char *)v27 != *(void *)(a2 + 16) - (void)v28) {
    return 0;
  }
  while (v27 != v26)
  {
    if (*v27 != *v28) {
      return 0;
    }
    ++v27;
    ++v28;
  }
  unint64_t v30 = *(double **)(a1 + 56);
  char v29 = *(double **)(a1 + 64);
  double v31 = *(double **)(a2 + 56);
  if ((char *)v29 - (char *)v30 != *(void *)(a2 + 64) - (void)v31) {
    return 0;
  }
  while (v30 != v29)
  {
    if (*v30 != *v31) {
      return 0;
    }
    ++v30;
    ++v31;
  }
  uint64_t v33 = *(double **)(a1 + 104);
  unint64_t v32 = *(double **)(a1 + 112);
  double v34 = *(double **)(a2 + 104);
  if ((char *)v32 - (char *)v33 != *(void *)(a2 + 112) - (void)v34) {
    return 0;
  }
  while (v33 != v32)
  {
    if (*v33 != *v34) {
      return 0;
    }
    ++v33;
    ++v34;
  }
  uint64_t v36 = *(double **)(a1 + 80);
  int v35 = *(double **)(a1 + 88);
  unint64_t v37 = *(double **)(a2 + 80);
  if ((char *)v35 - (char *)v36 != *(void *)(a2 + 88) - (void)v37) {
    return 0;
  }
  while (v36 != v35)
  {
    if (*v36 != *v37) {
      return 0;
    }
    ++v36;
    ++v37;
  }
  unint64_t v39 = *(double **)(a1 + 128);
  uint64_t v38 = *(double **)(a1 + 136);
  uint64_t v40 = *(double **)(a2 + 128);
  if ((char *)v38 - (char *)v39 != *(void *)(a2 + 136) - (void)v40) {
    return 0;
  }
  while (v39 != v38)
  {
    if (*v39 != *v40) {
      return 0;
    }
    ++v39;
    ++v40;
  }
  uint64_t v42 = *(double **)(a1 + 176);
  uint64_t v41 = *(double **)(a1 + 184);
  unint64_t v43 = *(double **)(a2 + 176);
  if ((char *)v41 - (char *)v42 != *(void *)(a2 + 184) - (void)v43) {
    return 0;
  }
  while (v42 != v41)
  {
    if (*v42 != *v43) {
      return 0;
    }
    ++v42;
    ++v43;
  }
  unint64_t v45 = *(double **)(a1 + 152);
  unint64_t v44 = *(double **)(a1 + 160);
  int v46 = *(double **)(a2 + 152);
  if ((char *)v44 - (char *)v45 != *(void *)(a2 + 160) - (void)v46) {
    return 0;
  }
  while (v45 != v44)
  {
    if (*v45 != *v46) {
      return 0;
    }
    ++v45;
    ++v46;
  }
  uint64_t v48 = *(void *)(a1 + 200);
  uint64_t v47 = *(void *)(a1 + 208);
  unint64_t v49 = *(double **)(a2 + 200);
  if (v47 - v48 != *(void *)(a2 + 208) - (void)v49) {
    return 0;
  }
  if (v48 == v47) {
    return 1;
  }
  uint64_t v50 = v48 + 8;
  do
  {
    double v51 = *v49++;
    BOOL result = *(double *)(v50 - 8) == v51;
    BOOL v53 = *(double *)(v50 - 8) != v51 || v50 == v47;
    v50 += 8;
  }
  while (!v53);
  return result;
}

uint64_t CMMsl::FallDetectionWristStateReplay::hash_value(CMMsl::FallDetectionWristStateReplay *this)
{
  int v2 = *((_DWORD *)this + 99);
  if ((v2 & 0x80000) != 0)
  {
    uint64_t v3 = *((void *)this + 47);
    if ((v2 & 0x1000000) != 0)
    {
LABEL_3:
      uint64_t v4 = *((unsigned __int8 *)this + 388);
      if (v2) {
        goto LABEL_4;
      }
LABEL_69:
      double v46 = 0.0;
      if ((v2 & 0x40000) != 0) {
        goto LABEL_7;
      }
LABEL_70:
      double v45 = 0.0;
      if ((v2 & 2) != 0) {
        goto LABEL_10;
      }
      goto LABEL_71;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((v2 & 0x1000000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
  if ((v2 & 1) == 0) {
    goto LABEL_69;
  }
LABEL_4:
  double v5 = *((double *)this + 28);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  double v46 = v5;
  if ((v2 & 0x40000) == 0) {
    goto LABEL_70;
  }
LABEL_7:
  double v6 = *((double *)this + 46);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  double v45 = v6;
  if ((v2 & 2) != 0)
  {
LABEL_10:
    uint64_t v44 = *((void *)this + 29);
    if ((v2 & 0x10) != 0) {
      goto LABEL_11;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v44 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_11:
    uint64_t v43 = *((void *)this + 32);
    if ((v2 & 0x20) != 0) {
      goto LABEL_12;
    }
LABEL_73:
    double v42 = 0.0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_15;
    }
LABEL_74:
    uint64_t v8 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_19;
    }
LABEL_75:
    uint64_t v9 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_23;
    }
LABEL_76:
    uint64_t v10 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_27;
    }
LABEL_77:
    uint64_t v11 = 0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_31;
    }
LABEL_78:
    uint64_t v12 = 0;
    if ((v2 & 0x1000) != 0) {
      goto LABEL_35;
    }
LABEL_79:
    uint64_t v13 = 0;
    if ((v2 & 0x800) != 0) {
      goto LABEL_39;
    }
LABEL_80:
    uint64_t v14 = 0;
    if ((v2 & 0x20000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_81;
  }
LABEL_72:
  uint64_t v43 = 0;
  if ((v2 & 0x20) == 0) {
    goto LABEL_73;
  }
LABEL_12:
  double v7 = *((double *)this + 33);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  double v42 = v7;
  if ((v2 & 0x100) == 0) {
    goto LABEL_74;
  }
LABEL_15:
  if (*((double *)this + 36) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 36);
  }
  if ((v2 & 0x400) == 0) {
    goto LABEL_75;
  }
LABEL_19:
  if (*((double *)this + 38) == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)this + 38);
  }
  if ((v2 & 0x200) == 0) {
    goto LABEL_76;
  }
LABEL_23:
  if (*((double *)this + 37) == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *((void *)this + 37);
  }
  if ((v2 & 0x80) == 0) {
    goto LABEL_77;
  }
LABEL_27:
  if (*((double *)this + 35) == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *((void *)this + 35);
  }
  if ((v2 & 0x40) == 0) {
    goto LABEL_78;
  }
LABEL_31:
  if (*((double *)this + 34) == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *((void *)this + 34);
  }
  if ((v2 & 0x1000) == 0) {
    goto LABEL_79;
  }
LABEL_35:
  if (*((double *)this + 40) == 0.0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *((void *)this + 40);
  }
  if ((v2 & 0x800) == 0) {
    goto LABEL_80;
  }
LABEL_39:
  if (*((double *)this + 39) == 0.0) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *((void *)this + 39);
  }
  if ((v2 & 0x20000) != 0)
  {
LABEL_43:
    uint64_t v15 = *((void *)this + 45);
    if ((v2 & 0x10000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v15 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_44:
    uint64_t v16 = *((void *)this + 44);
    if ((v2 & 0x8000) != 0) {
      goto LABEL_45;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v16 = 0;
  if ((v2 & 0x8000) != 0)
  {
LABEL_45:
    uint64_t v17 = *((void *)this + 43);
    if ((v2 & 0x4000) != 0) {
      goto LABEL_46;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v17 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_46:
    uint64_t v18 = *((void *)this + 42);
    if ((v2 & 0x2000) != 0) {
      goto LABEL_47;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t v18 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_47:
    uint64_t v19 = *((void *)this + 41);
    if (v2 < 0) {
      goto LABEL_48;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t v19 = 0;
  if (v2 < 0)
  {
LABEL_48:
    uint64_t v20 = *((unsigned __int8 *)this + 395);
    if ((v2 & 4) != 0) {
      goto LABEL_49;
    }
LABEL_87:
    uint64_t v21 = 0;
    if ((v2 & 8) != 0) {
      goto LABEL_53;
    }
LABEL_88:
    uint64_t v22 = 0;
    if ((v2 & 0x100000) != 0) {
      goto LABEL_57;
    }
    goto LABEL_89;
  }
LABEL_86:
  uint64_t v20 = 0;
  if ((v2 & 4) == 0) {
    goto LABEL_87;
  }
LABEL_49:
  if (*((double *)this + 30) == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *((void *)this + 30);
  }
  if ((v2 & 8) == 0) {
    goto LABEL_88;
  }
LABEL_53:
  if (*((double *)this + 31) == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *((void *)this + 31);
  }
  if ((v2 & 0x100000) != 0)
  {
LABEL_57:
    uint64_t v23 = *((unsigned __int8 *)this + 384);
    if ((v2 & 0x400000) != 0) {
      goto LABEL_58;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v23 = 0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_58:
    uint64_t v24 = *((unsigned __int8 *)this + 386);
    if ((v2 & 0x40000000) != 0) {
      goto LABEL_59;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v24 = 0;
  if ((v2 & 0x40000000) != 0)
  {
LABEL_59:
    uint64_t v25 = *((unsigned __int8 *)this + 394);
    if ((v2 & 0x200000) != 0) {
      goto LABEL_60;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t v25 = 0;
  if ((v2 & 0x200000) != 0)
  {
LABEL_60:
    uint64_t v26 = *((unsigned __int8 *)this + 385);
    if ((v2 & 0x800000) != 0) {
      goto LABEL_61;
    }
    goto LABEL_93;
  }
LABEL_92:
  uint64_t v26 = 0;
  if ((v2 & 0x800000) != 0)
  {
LABEL_61:
    uint64_t v27 = *((unsigned __int8 *)this + 387);
    if ((v2 & 0x10000000) != 0) {
      goto LABEL_62;
    }
    goto LABEL_94;
  }
LABEL_93:
  uint64_t v27 = 0;
  if ((v2 & 0x10000000) != 0)
  {
LABEL_62:
    uint64_t v28 = *((unsigned __int8 *)this + 392);
    if ((v2 & 0x8000000) != 0) {
      goto LABEL_63;
    }
    goto LABEL_95;
  }
LABEL_94:
  uint64_t v28 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_63:
    uint64_t v29 = *((unsigned __int8 *)this + 391);
    if ((v2 & 0x20000000) != 0) {
      goto LABEL_64;
    }
    goto LABEL_96;
  }
LABEL_95:
  uint64_t v29 = 0;
  if ((v2 & 0x20000000) != 0)
  {
LABEL_64:
    uint64_t v30 = *((unsigned __int8 *)this + 393);
    if ((v2 & 0x2000000) != 0) {
      goto LABEL_65;
    }
LABEL_97:
    uint64_t v31 = 0;
    if ((v2 & 0x4000000) != 0) {
      goto LABEL_66;
    }
LABEL_98:
    uint64_t v32 = 0;
    goto LABEL_99;
  }
LABEL_96:
  uint64_t v30 = 0;
  if ((v2 & 0x2000000) == 0) {
    goto LABEL_97;
  }
LABEL_65:
  uint64_t v31 = *((unsigned __int8 *)this + 389);
  if ((v2 & 0x4000000) == 0) {
    goto LABEL_98;
  }
LABEL_66:
  uint64_t v32 = *((unsigned __int8 *)this + 390);
LABEL_99:
  uint64_t v33 = v4 ^ v3 ^ *(void *)&v46 ^ *(void *)&v45 ^ v44 ^ v43 ^ *(void *)&v42 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ PBHashBytes();
  uint64_t v34 = PBHashBytes();
  uint64_t v35 = v34 ^ PBHashBytes();
  uint64_t v36 = v33 ^ v35 ^ PBHashBytes();
  uint64_t v37 = PBHashBytes();
  uint64_t v38 = v37 ^ PBHashBytes();
  uint64_t v39 = v38 ^ PBHashBytes();
  uint64_t v40 = v36 ^ v39 ^ PBHashBytes();
  return v40 ^ PBHashBytes();
}

uint64_t CMMsl::FallDistanceReplay::FallDistanceReplay(uint64_t this)
{
  *(void *)this = &unk_2706417C8;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(void *)this = &unk_2706417C8;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void CMMsl::FallDistanceReplay::~FallDistanceReplay(CMMsl::FallDistanceReplay *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::FallDistanceReplay::FallDistanceReplay(CMMsl::FallDistanceReplay *this, const CMMsl::FallDistanceReplay *a2)
{
  *(void *)this = &unk_2706417C8;
  *((_DWORD *)this + 18) = 0;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    __int16 v3 = 4;
    *((_WORD *)this + 36) = 4;
    *((void *)this + 3) = v4;
    __int16 v2 = *((_WORD *)a2 + 36);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 4);
    v3 |= 8u;
    *((_WORD *)this + 36) = v3;
    *((void *)this + 4) = v5;
    __int16 v2 = *((_WORD *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 36) = v3;
    *((void *)this + 2) = v6;
    __int16 v2 = *((_WORD *)a2 + 36);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 17);
  v3 |= 0x200u;
  *((_WORD *)this + 36) = v3;
  *((_DWORD *)this + 17) = v7;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x100u;
  *((_WORD *)this + 36) = v3;
  *((_DWORD *)this + 16) = v4;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 36) = v3;
  *((void *)this + 5) = v8;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v9 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 36) = v3;
  *((void *)this + 6) = v9;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v10 = *((void *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 36) = v3;
  *((void *)this + 1) = v10;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_22;
  }
LABEL_21:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x80u;
  *((_WORD *)this + 36) = v3;
  *((_DWORD *)this + 15) = v4;
  if ((*((_WORD *)a2 + 36) & 0x40) == 0) {
    return *(float *)&v4;
  }
LABEL_22:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  *((_WORD *)this + 36) = v3 | 0x40;
  *((_DWORD *)this + 14) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::FallDistanceReplay::operator=(uint64_t a1, const CMMsl::FallDistanceReplay *a2)
{
  if ((const CMMsl::FallDistanceReplay *)a1 != a2)
  {
    CMMsl::FallDistanceReplay::FallDistanceReplay((CMMsl::FallDistanceReplay *)&v9, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v3;
    uint64_t v4 = *(void *)(a1 + 68);
    *(void *)(a1 + 68) = v16;
    uint64_t v16 = v4;
    LODWORD(v3) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    int v15 = v3;
    long long v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    long long v12 = v5;
    uint64_t v6 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v13;
    uint64_t v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    *(void *)&long long v7 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v14;
    uint64_t v14 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallDistanceReplay *a2, CMMsl::FallDistanceReplay *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  float result = *((float *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((float *)a2 + 14) = result;
  return result;
}

float CMMsl::FallDistanceReplay::FallDistanceReplay(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706417C8;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  float result = *(float *)(a2 + 56);
  *(float *)(a1 + 56) = result;
  return result;
}

uint64_t CMMsl::FallDistanceReplay::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::FallDistanceReplay::FallDistanceReplay((uint64_t)&v9, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v3;
    uint64_t v4 = *(void *)(a1 + 68);
    *(void *)(a1 + 68) = v16;
    uint64_t v16 = v4;
    LODWORD(v3) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    int v15 = v3;
    long long v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    long long v12 = v5;
    uint64_t v6 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v13;
    uint64_t v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    *(void *)&long long v7 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v14;
    uint64_t v14 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::FallDistanceReplay::formatText(CMMsl::FallDistanceReplay *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "afterElevationMedian", *((float *)this + 14));
    __int16 v5 = *((_WORD *)this + 36);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "beforeElevationMedian", *((float *)this + 15));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "endTimestampOfWindow");
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "impactTimestamp");
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "pressureTimestamp");
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "rangeOfElevationInWindow", *((float *)this + 16));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "startTimestampOfLastInspectedWindow");
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "startTimestampOfWindow");
  if ((*((_WORD *)this + 36) & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "state");
LABEL_12:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FallDistanceReplay::readFrom(CMMsl::FallDistanceReplay *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_152;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 36) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_121;
      case 2u:
        *((_WORD *)this + 36) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_126;
            }
            unint64_t v58 = v20++;
            char v59 = *(unsigned char *)(v21 + v58);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            BOOL v14 = v57++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_125:
              unint64_t v2 = v58 + 1;
              goto LABEL_126;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_125;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_126;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_126:
        *((void *)this + 4) = v24;
        break;
      case 3u:
        *((_WORD *)this + 36) |= 2u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_131;
            }
            unint64_t v62 = v26++;
            char v63 = *(unsigned char *)(v27 + v62);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0) {
              break;
            }
            v60 += 7;
            BOOL v14 = v61++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
LABEL_130:
              unint64_t v2 = v62 + 1;
              goto LABEL_131;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v30 = 0;
          }
          goto LABEL_130;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_131;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        uint64_t v30 = 0;
LABEL_131:
        *((void *)this + 2) = v30;
        break;
      case 4u:
        *((_WORD *)this + 36) |= 0x200u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_136;
            }
            unint64_t v66 = v32++;
            char v67 = *(unsigned char *)(v33 + v66);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0) {
              break;
            }
            v64 += 7;
            BOOL v14 = v65++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_135:
              unint64_t v2 = v66 + 1;
              goto LABEL_136;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_135;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_136;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_136:
        *((_DWORD *)this + 17) = v36;
        break;
      case 0xAu:
        *((_WORD *)this + 36) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_120;
      case 0xBu:
        *((_WORD *)this + 36) |= 0x10u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              uint64_t v42 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_141;
            }
            unint64_t v70 = v38++;
            char v71 = *(unsigned char *)(v39 + v70);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0) {
              break;
            }
            v68 += 7;
            BOOL v14 = v69++ > 8;
            if (v14)
            {
              uint64_t v42 = 0;
LABEL_140:
              unint64_t v2 = v70 + 1;
              goto LABEL_141;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v42 = 0;
          }
          goto LABEL_140;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_141;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        uint64_t v42 = 0;
LABEL_141:
        *((void *)this + 5) = v42;
        break;
      case 0xCu:
        *((_WORD *)this + 36) |= 0x20u;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v45 = *(void *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v48 = 0;
          if (v2 <= v44) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v44)
            {
              uint64_t v48 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_146;
            }
            unint64_t v74 = v44++;
            char v75 = *(unsigned char *)(v45 + v74);
            *((void *)a2 + 1) = v44;
            v48 |= (unint64_t)(v75 & 0x7F) << v72;
            if ((v75 & 0x80) == 0) {
              break;
            }
            v72 += 7;
            BOOL v14 = v73++ > 8;
            if (v14)
            {
              uint64_t v48 = 0;
LABEL_145:
              unint64_t v2 = v74 + 1;
              goto LABEL_146;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v48 = 0;
          }
          goto LABEL_145;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        do
        {
          unint64_t v2 = v44 + 1;
          *((void *)a2 + 1) = v44 + 1;
          char v49 = *(unsigned char *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0) {
            goto LABEL_146;
          }
          v46 += 7;
          unint64_t v44 = v2;
          BOOL v14 = v47++ > 8;
        }
        while (!v14);
        uint64_t v48 = 0;
LABEL_146:
        *((void *)this + 6) = v48;
        break;
      case 0xDu:
        *((_WORD *)this + 36) |= 1u;
        unint64_t v50 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v51 = *(void *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v54 = 0;
          if (v2 <= v50) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v50)
            {
              uint64_t v54 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_151;
            }
            unint64_t v78 = v50++;
            char v79 = *(unsigned char *)(v51 + v78);
            *((void *)a2 + 1) = v50;
            v54 |= (unint64_t)(v79 & 0x7F) << v76;
            if ((v79 & 0x80) == 0) {
              break;
            }
            v76 += 7;
            BOOL v14 = v77++ > 8;
            if (v14)
            {
              uint64_t v54 = 0;
LABEL_150:
              unint64_t v2 = v78 + 1;
              goto LABEL_151;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v54 = 0;
          }
          goto LABEL_150;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        do
        {
          unint64_t v2 = v50 + 1;
          *((void *)a2 + 1) = v50 + 1;
          char v55 = *(unsigned char *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0) {
            goto LABEL_151;
          }
          v52 += 7;
          unint64_t v50 = v2;
          BOOL v14 = v53++ > 8;
        }
        while (!v14);
        uint64_t v54 = 0;
LABEL_151:
        *((void *)this + 1) = v54;
        break;
      case 0x14u:
        *((_WORD *)this + 36) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_120;
      case 0x15u:
        *((_WORD *)this + 36) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_120:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_121:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_76:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_152:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallDistanceReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 72);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::write(a2, *(float *)(v3 + 60));
    if ((*(_WORD *)(v3 + 72) & 0x40) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x80) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_21:
  float v5 = *(float *)(v3 + 56);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::FallDistanceReplay::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 72);
  __int16 v3 = *(_WORD *)(a2 + 72);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x200) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 72) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x100) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 72) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0) {
    return (v3 & 0x40) != 0 && *(float *)(a1 + 56) == *(float *)(a2 + 56);
  }
  return v4;
}

uint64_t CMMsl::FallDistanceReplay::hash_value(CMMsl::FallDistanceReplay *this)
{
  __int16 v1 = *((_WORD *)this + 36);
  if ((v1 & 4) != 0)
  {
    double v2 = *((double *)this + 3);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 8) != 0)
    {
LABEL_3:
      uint64_t v3 = *((void *)this + 4);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    uint64_t v4 = *((void *)this + 2);
    if ((*((_WORD *)this + 36) & 0x200) != 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v4 = 0;
  if ((*((_WORD *)this + 36) & 0x200) != 0)
  {
LABEL_5:
    uint64_t v5 = *((int *)this + 17);
    if ((*((_WORD *)this + 36) & 0x100) != 0) {
      goto LABEL_6;
    }
LABEL_24:
    uint64_t v7 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v5 = 0;
  if ((*((_WORD *)this + 36) & 0x100) == 0) {
    goto LABEL_24;
  }
LABEL_6:
  float v6 = *((float *)this + 16);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_9:
    uint64_t v8 = *((void *)this + 5);
    if ((v1 & 0x20) != 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v8 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_10:
    uint64_t v9 = *((void *)this + 6);
    if (v1) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v9 = 0;
  if (v1)
  {
LABEL_11:
    uint64_t v10 = *((void *)this + 1);
    if ((v1 & 0x80) != 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v10 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_12:
    float v11 = *((float *)this + 15);
    uint64_t v12 = LODWORD(v11);
    if (v11 == 0.0) {
      uint64_t v12 = 0;
    }
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_29:
    uint64_t v14 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v14;
  }
LABEL_28:
  uint64_t v12 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_29;
  }
LABEL_15:
  float v13 = *((float *)this + 14);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v14;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(uint64_t this)
{
  *(void *)this = &unk_270641800;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(void *)this = &unk_270641800;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

void CMMsl::FallFalsePositiveSuppressionFeatures::~FallFalsePositiveSuppressionFeatures(CMMsl::FallFalsePositiveSuppressionFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(uint64_t this, const CMMsl::FallFalsePositiveSuppressionFeatures *a2)
{
  *(void *)this = &unk_270641800;
  *(_DWORD *)(this + 80) = 0;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    __int16 v3 = 4;
    *(_WORD *)(this + 80) = 4;
    *(void *)(this + 24) = v4;
    __int16 v2 = *((_WORD *)a2 + 40);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 80) = v3;
    *(void *)(this + 16) = v5;
    __int16 v2 = *((_WORD *)a2 + 40);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *((void *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 80) = v3;
    *(void *)(this + 8) = v6;
    __int16 v2 = *((_WORD *)a2 + 40);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 64) = v7;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v8 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 72) = v8;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 76) = v9;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v10 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 68) = v10;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 48) = v11;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v12 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 52) = v12;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v13 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 60) = v13;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v14 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 80) = v3;
  *(void *)(this + 40) = v14;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_28:
    int v16 = *((_DWORD *)a2 + 14);
    *(_WORD *)(this + 80) = v3 | 0x80;
    *(_DWORD *)(this + 56) = v16;
    return this;
  }
LABEL_27:
  uint64_t v15 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 80) = v3;
  *(void *)(this + 32) = v15;
  if ((*((_WORD *)a2 + 40) & 0x80) != 0) {
    goto LABEL_28;
  }
  return this;
}

CMMsl *CMMsl::FallFalsePositiveSuppressionFeatures::operator=(CMMsl *a1, const CMMsl::FallFalsePositiveSuppressionFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallFalsePositiveSuppressionFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallFalsePositiveSuppressionFeatures *a2, CMMsl::FallFalsePositiveSuppressionFeatures *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  int v7 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v7;
  int v8 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v8;
  int v9 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v9;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  float result = *((float *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((float *)a2 + 13) = result;
  LODWORD(v6) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  uint64_t v11 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  LODWORD(v12) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  return result;
}

float CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641800;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  float result = *(float *)(a2 + 52);
  *(float *)(a1 + 52) = result;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

CMMsl *CMMsl::FallFalsePositiveSuppressionFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallFalsePositiveSuppressionFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::formatText(CMMsl::FallFalsePositiveSuppressionFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "aopTsImpact");
    __int16 v5 = *((_WORD *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "aopTsNow");
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "aopTsSensor");
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "nPeaks");
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "normalizedIQR", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "operatingMode");
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "repetitiveMotion");
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "repetitiveMotionEndTs");
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "repetitiveMotionStartTs");
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "seq");
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "sumHighQPeaksInDecLowFreqFFT", *((float *)this + 17));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "sumHighQPeaksInHighFreqFFT", *((float *)this + 18));
  if ((*((_WORD *)this + 40) & 0x1000) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "sumHighQPeaksInLowFreqFFT", *((float *)this + 19));
LABEL_15:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::readFrom(CMMsl::FallFalsePositiveSuppressionFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 40) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v75 = 0;
          unsigned int v76 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_172;
            }
            unint64_t v77 = v21++;
            char v78 = *(unsigned char *)(v22 + v77);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v78 & 0x7F) << v75;
            if ((v78 & 0x80) == 0) {
              break;
            }
            v75 += 7;
            BOOL v14 = v76++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
LABEL_171:
              unint64_t v2 = v77 + 1;
              goto LABEL_172;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
          goto LABEL_171;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_172;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        uint64_t v25 = 0;
LABEL_172:
        *((void *)this + 3) = v25;
        break;
      case 2u:
        *((_WORD *)this + 40) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              uint64_t v31 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_177;
            }
            unint64_t v81 = v27++;
            char v82 = *(unsigned char *)(v28 + v81);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v82 & 0x7F) << v79;
            if ((v82 & 0x80) == 0) {
              break;
            }
            v79 += 7;
            BOOL v14 = v80++ > 8;
            if (v14)
            {
              uint64_t v31 = 0;
LABEL_176:
              unint64_t v2 = v81 + 1;
              goto LABEL_177;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v31 = 0;
          }
          goto LABEL_176;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_177;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        uint64_t v31 = 0;
LABEL_177:
        *((void *)this + 2) = v31;
        break;
      case 3u:
        *((_WORD *)this + 40) |= 1u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v83 = 0;
          unsigned int v84 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v33)
            {
              uint64_t v37 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_182;
            }
            unint64_t v85 = v33++;
            char v86 = *(unsigned char *)(v34 + v85);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v86 & 0x7F) << v83;
            if ((v86 & 0x80) == 0) {
              break;
            }
            v83 += 7;
            BOOL v14 = v84++ > 8;
            if (v14)
            {
              uint64_t v37 = 0;
LABEL_181:
              unint64_t v2 = v85 + 1;
              goto LABEL_182;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v37 = 0;
          }
          goto LABEL_181;
        }
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        do
        {
          unint64_t v2 = v33 + 1;
          *((void *)a2 + 1) = v33 + 1;
          char v38 = *(unsigned char *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0) {
            goto LABEL_182;
          }
          v35 += 7;
          unint64_t v33 = v2;
          BOOL v14 = v36++ > 8;
        }
        while (!v14);
        uint64_t v37 = 0;
LABEL_182:
        *((void *)this + 1) = v37;
        break;
      case 4u:
        *((_WORD *)this + 40) |= 0x200u;
        unint64_t v39 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v40 = *(void *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          char v87 = 0;
          unsigned int v88 = 0;
          uint64_t v43 = 0;
          if (v2 <= v39) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_187;
            }
            unint64_t v89 = v39++;
            char v90 = *(unsigned char *)(v40 + v89);
            *((void *)a2 + 1) = v39;
            v43 |= (unint64_t)(v90 & 0x7F) << v87;
            if ((v90 & 0x80) == 0) {
              break;
            }
            v87 += 7;
            BOOL v14 = v88++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_186:
              unint64_t v2 = v89 + 1;
              goto LABEL_187;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v43) = 0;
          }
          goto LABEL_186;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        do
        {
          unint64_t v2 = v39 + 1;
          *((void *)a2 + 1) = v39 + 1;
          char v44 = *(unsigned char *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0) {
            goto LABEL_187;
          }
          v41 += 7;
          unint64_t v39 = v2;
          BOOL v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_187:
        *((_DWORD *)this + 16) = v43;
        break;
      case 5u:
        *((_WORD *)this + 40) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_74;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_167;
      case 6u:
        *((_WORD *)this + 40) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_74;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_167;
      case 7u:
        *((_WORD *)this + 40) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_74;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_167;
      case 8u:
        *((_WORD *)this + 40) |= 0x20u;
        unint64_t v45 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v46 = *(void *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          char v91 = 0;
          unsigned int v92 = 0;
          uint64_t v49 = 0;
          if (v2 <= v45) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_192;
            }
            unint64_t v93 = v45++;
            char v94 = *(unsigned char *)(v46 + v93);
            *((void *)a2 + 1) = v45;
            v49 |= (unint64_t)(v94 & 0x7F) << v91;
            if ((v94 & 0x80) == 0) {
              break;
            }
            v91 += 7;
            BOOL v14 = v92++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_191:
              unint64_t v2 = v93 + 1;
              goto LABEL_192;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v49) = 0;
          }
          goto LABEL_191;
        }
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        do
        {
          unint64_t v2 = v45 + 1;
          *((void *)a2 + 1) = v45 + 1;
          char v50 = *(unsigned char *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0) {
            goto LABEL_192;
          }
          v47 += 7;
          unint64_t v45 = v2;
          BOOL v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_192:
        *((_DWORD *)this + 12) = v49;
        break;
      case 9u:
        *((_WORD *)this + 40) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_167:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_74:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xAu:
        *((_WORD *)this + 40) |= 0x100u;
        unint64_t v51 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v52 = *(void *)a2;
        if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
        {
          char v95 = 0;
          unsigned int v96 = 0;
          uint64_t v55 = 0;
          if (v2 <= v51) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v51)
            {
              LODWORD(v55) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_197;
            }
            unint64_t v97 = v51++;
            char v98 = *(unsigned char *)(v52 + v97);
            *((void *)a2 + 1) = v51;
            v55 |= (unint64_t)(v98 & 0x7F) << v95;
            if ((v98 & 0x80) == 0) {
              break;
            }
            v95 += 7;
            BOOL v14 = v96++ > 8;
            if (v14)
            {
              LODWORD(v55) = 0;
LABEL_196:
              unint64_t v2 = v97 + 1;
              goto LABEL_197;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v55) = 0;
          }
          goto LABEL_196;
        }
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v55 = 0;
        do
        {
          unint64_t v2 = v51 + 1;
          *((void *)a2 + 1) = v51 + 1;
          char v56 = *(unsigned char *)(v52 + v51);
          v55 |= (unint64_t)(v56 & 0x7F) << v53;
          if ((v56 & 0x80) == 0) {
            goto LABEL_197;
          }
          v53 += 7;
          unint64_t v51 = v2;
          BOOL v14 = v54++ > 8;
        }
        while (!v14);
        LODWORD(v55) = 0;
LABEL_197:
        *((_DWORD *)this + 15) = v55;
        break;
      case 0xBu:
        *((_WORD *)this + 40) |= 0x10u;
        unint64_t v57 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v58 = *(void *)a2;
        if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
        {
          char v99 = 0;
          unsigned int v100 = 0;
          uint64_t v61 = 0;
          if (v2 <= v57) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v57)
            {
              uint64_t v61 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_202;
            }
            unint64_t v101 = v57++;
            char v102 = *(unsigned char *)(v58 + v101);
            *((void *)a2 + 1) = v57;
            v61 |= (unint64_t)(v102 & 0x7F) << v99;
            if ((v102 & 0x80) == 0) {
              break;
            }
            v99 += 7;
            BOOL v14 = v100++ > 8;
            if (v14)
            {
              uint64_t v61 = 0;
LABEL_201:
              unint64_t v2 = v101 + 1;
              goto LABEL_202;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v61 = 0;
          }
          goto LABEL_201;
        }
        char v59 = 0;
        unsigned int v60 = 0;
        uint64_t v61 = 0;
        do
        {
          unint64_t v2 = v57 + 1;
          *((void *)a2 + 1) = v57 + 1;
          char v62 = *(unsigned char *)(v58 + v57);
          v61 |= (unint64_t)(v62 & 0x7F) << v59;
          if ((v62 & 0x80) == 0) {
            goto LABEL_202;
          }
          v59 += 7;
          unint64_t v57 = v2;
          BOOL v14 = v60++ > 8;
        }
        while (!v14);
        uint64_t v61 = 0;
LABEL_202:
        *((void *)this + 5) = v61;
        break;
      case 0xCu:
        *((_WORD *)this + 40) |= 8u;
        unint64_t v63 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v64 = *(void *)a2;
        if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
        {
          char v103 = 0;
          unsigned int v104 = 0;
          uint64_t v67 = 0;
          if (v2 <= v63) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v63)
            {
              uint64_t v67 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_207;
            }
            unint64_t v105 = v63++;
            char v106 = *(unsigned char *)(v64 + v105);
            *((void *)a2 + 1) = v63;
            v67 |= (unint64_t)(v106 & 0x7F) << v103;
            if ((v106 & 0x80) == 0) {
              break;
            }
            v103 += 7;
            BOOL v14 = v104++ > 8;
            if (v14)
            {
              uint64_t v67 = 0;
LABEL_206:
              unint64_t v2 = v105 + 1;
              goto LABEL_207;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v67 = 0;
          }
          goto LABEL_206;
        }
        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v67 = 0;
        do
        {
          unint64_t v2 = v63 + 1;
          *((void *)a2 + 1) = v63 + 1;
          char v68 = *(unsigned char *)(v64 + v63);
          v67 |= (unint64_t)(v68 & 0x7F) << v65;
          if ((v68 & 0x80) == 0) {
            goto LABEL_207;
          }
          v65 += 7;
          unint64_t v63 = v2;
          BOOL v14 = v66++ > 8;
        }
        while (!v14);
        uint64_t v67 = 0;
LABEL_207:
        *((void *)this + 4) = v67;
        break;
      case 0xDu:
        *((_WORD *)this + 40) |= 0x80u;
        unint64_t v69 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v70 = *(void *)a2;
        if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
        {
          char v107 = 0;
          unsigned int v108 = 0;
          uint64_t v73 = 0;
          if (v2 <= v69) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v69)
            {
              LODWORD(v73) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_212;
            }
            unint64_t v109 = v69++;
            char v110 = *(unsigned char *)(v70 + v109);
            *((void *)a2 + 1) = v69;
            v73 |= (unint64_t)(v110 & 0x7F) << v107;
            if ((v110 & 0x80) == 0) {
              break;
            }
            v107 += 7;
            BOOL v14 = v108++ > 8;
            if (v14)
            {
              LODWORD(v73) = 0;
LABEL_211:
              unint64_t v2 = v109 + 1;
              goto LABEL_212;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v73) = 0;
          }
          goto LABEL_211;
        }
        char v71 = 0;
        unsigned int v72 = 0;
        uint64_t v73 = 0;
        do
        {
          unint64_t v2 = v69 + 1;
          *((void *)a2 + 1) = v69 + 1;
          char v74 = *(unsigned char *)(v70 + v69);
          v73 |= (unint64_t)(v74 & 0x7F) << v71;
          if ((v74 & 0x80) == 0) {
            goto LABEL_212;
          }
          v71 += 7;
          unint64_t v69 = v2;
          BOOL v14 = v72++ > 8;
        }
        while (!v14);
        LODWORD(v73) = 0;
LABEL_212:
        *((_DWORD *)this + 14) = v73;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 80);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    __int16 v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 80) & 0x80) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_27:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::FallFalsePositiveSuppressionFeatures::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 80);
  __int16 v3 = *(_WORD *)(a2 + 80);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x200) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x1000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0) {
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
  }
  return v4;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::hash_value(CMMsl::FallFalsePositiveSuppressionFeatures *this)
{
  __int16 v1 = *((_WORD *)this + 40);
  if ((v1 & 4) != 0)
  {
    uint64_t v2 = *((void *)this + 3);
    if ((v1 & 2) != 0)
    {
LABEL_3:
      uint64_t v3 = *((void *)this + 2);
      if (v1) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if (v1)
  {
LABEL_4:
    uint64_t v4 = *((void *)this + 1);
    if ((*((_WORD *)this + 40) & 0x200) != 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v4 = 0;
  if ((*((_WORD *)this + 40) & 0x200) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned int *)this + 16);
    if ((*((_WORD *)this + 40) & 0x800) != 0) {
      goto LABEL_6;
    }
LABEL_27:
    uint64_t v7 = 0;
    if ((*((_WORD *)this + 40) & 0x1000) != 0) {
      goto LABEL_9;
    }
LABEL_28:
    uint64_t v9 = 0;
    if ((*((_WORD *)this + 40) & 0x400) != 0) {
      goto LABEL_12;
    }
LABEL_29:
    uint64_t v11 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_26:
  uint64_t v5 = 0;
  if ((*((_WORD *)this + 40) & 0x800) == 0) {
    goto LABEL_27;
  }
LABEL_6:
  float v6 = *((float *)this + 18);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x1000) == 0) {
    goto LABEL_28;
  }
LABEL_9:
  float v8 = *((float *)this + 19);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x400) == 0) {
    goto LABEL_29;
  }
LABEL_12:
  float v10 = *((float *)this + 17);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_15:
    uint64_t v12 = *((int *)this + 12);
    if ((v1 & 0x40) != 0) {
      goto LABEL_16;
    }
LABEL_31:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 40) & 0x100) != 0) {
      goto LABEL_19;
    }
    goto LABEL_32;
  }
LABEL_30:
  uint64_t v12 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_16:
  float v13 = *((float *)this + 13);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x100) != 0)
  {
LABEL_19:
    uint64_t v15 = *((int *)this + 15);
    if ((v1 & 0x10) != 0) {
      goto LABEL_20;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v15 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_20:
    uint64_t v16 = *((void *)this + 5);
    if ((v1 & 8) != 0) {
      goto LABEL_21;
    }
LABEL_34:
    uint64_t v17 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_22;
    }
LABEL_35:
    uint64_t v18 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
  }
LABEL_33:
  uint64_t v16 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_34;
  }
LABEL_21:
  uint64_t v17 = *((void *)this + 4);
  if ((v1 & 0x80) == 0) {
    goto LABEL_35;
  }
LABEL_22:
  uint64_t v18 = *((unsigned int *)this + 14);
  return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
}

uint64_t CMMsl::FallMetaData::FallMetaData(uint64_t this)
{
  *(void *)this = &unk_270641838;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(void *)this = &unk_270641838;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void CMMsl::FallMetaData::~FallMetaData(CMMsl::FallMetaData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::FallMetaData::FallMetaData(uint64_t this, const CMMsl::FallMetaData *a2)
{
  *(void *)this = &unk_270641838;
  *(_DWORD *)(this + 72) = 0;
  int v2 = *((_DWORD *)a2 + 18);
  if (v2)
  {
    int v4 = *((_DWORD *)a2 + 2);
    int v3 = 1;
    *(_DWORD *)(this + 72) = 1;
    *(_DWORD *)(this + 8) = v4;
    int v2 = *((_DWORD *)a2 + 18);
    if ((v2 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 70);
    v3 |= 0x20000u;
    *(_DWORD *)(this + 72) = v3;
    *(unsigned char *)(this + 70) = v5;
    int v2 = *((_DWORD *)a2 + 18);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 3);
    v3 |= 2u;
    *(_DWORD *)(this + 72) = v3;
    *(_DWORD *)(this + 12) = v6;
    int v2 = *((_DWORD *)a2 + 18);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 15);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 60) = v7;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x4000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v8 = *((_DWORD *)a2 + 16);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 64) = v8;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v9 = *((_DWORD *)a2 + 4);
  v3 |= 4u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 16) = v9;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v10 = *((_DWORD *)a2 + 7);
  v3 |= 0x20u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 28) = v10;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v11 = *((_DWORD *)a2 + 5);
  v3 |= 8u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 20) = v11;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v12 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 24) = v12;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v13 = *((_DWORD *)a2 + 14);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 56) = v13;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v14 = *((_DWORD *)a2 + 13);
  v3 |= 0x800u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 52) = v14;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v15 = *((_DWORD *)a2 + 12);
  v3 |= 0x400u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 48) = v15;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v16 = *((_DWORD *)a2 + 11);
  v3 |= 0x200u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 44) = v16;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v17 = *((_DWORD *)a2 + 8);
  v3 |= 0x40u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 32) = v17;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v18 = *((_DWORD *)a2 + 9);
  v3 |= 0x80u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 36) = v18;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v19 = *((_DWORD *)a2 + 10);
  v3 |= 0x100u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 40) = v19;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      return this;
    }
LABEL_38:
    char v21 = *((unsigned char *)a2 + 68);
    *(_DWORD *)(this + 72) = v3 | 0x8000;
    *(unsigned char *)(this + 68) = v21;
    return this;
  }
LABEL_37:
  char v20 = *((unsigned char *)a2 + 69);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 72) = v3;
  *(unsigned char *)(this + 69) = v20;
  if ((*((_DWORD *)a2 + 18) & 0x8000) != 0) {
    goto LABEL_38;
  }
  return this;
}

CMMsl *CMMsl::FallMetaData::operator=(CMMsl *a1, const CMMsl::FallMetaData *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallMetaData::FallMetaData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallMetaData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallMetaData *a2, CMMsl::FallMetaData *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 70);
  *((unsigned char *)this + 70) = *((unsigned char *)a2 + 70);
  *((unsigned char *)a2 + 70) = v4;
  int v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  int v6 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  int v7 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  int v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  int v9 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  int v10 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v10;
  int v11 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v11;
  int v12 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  int v13 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v13;
  int v14 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v14;
  int v15 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v15;
  int v16 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v16;
  int v17 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v17;
  float result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  LOBYTE(v7) = *((unsigned char *)this + 69);
  *((unsigned char *)this + 69) = *((unsigned char *)a2 + 69);
  *((unsigned char *)a2 + 69) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 68);
  *((unsigned char *)this + 68) = *((unsigned char *)a2 + 68);
  *((unsigned char *)a2 + 68) = v7;
  return result;
}

float CMMsl::FallMetaData::FallMetaData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641838;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 70) = *(unsigned char *)(a2 + 70);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  float result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 69) = *(unsigned char *)(a2 + 69);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  return result;
}

CMMsl *CMMsl::FallMetaData::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallMetaData::FallMetaData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallMetaData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallMetaData::formatText(CMMsl::FallMetaData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 18);
  if (v5)
  {
    PB::TextFormatter::format(a2, "crownUpDown");
    int v5 = *((_DWORD *)this + 18);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "fallType");
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "impactMaxAccelNormAlertThreshold", *((float *)this + 4));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "impactMaxAccelNormLoggingHeartRateThreshold", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "impactMaxAccelNormLoggingHighResolutionSensorDataThreshold", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "impactMaxAccelNormLoggingStatsThreshold", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isADLImpact");
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "isFallDetectionFeatureEnabled");
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "isNearFall");
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "metMinutePercentile90", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "metMinutePercentile95", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "metMinutePercentile98", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "metMinutePercentileActual", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "otherFallPosteriorRatioDetectionThreshold", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "slipFallPosteriorRatioDetectionThreshold", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "tripFallPosteriorRatioDetectionThreshold", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "userAgeBucket");
  if ((*((_DWORD *)this + 18) & 0x4000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(a2, "workoutType");
LABEL_20:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FallMetaData::readFrom(CMMsl::FallMetaData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_146;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 18) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_130;
            }
            unint64_t v52 = v20++;
            char v53 = *(unsigned char *)(v21 + v52);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0) {
              break;
            }
            v50 += 7;
            BOOL v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_129:
              unint64_t v2 = v52 + 1;
              goto LABEL_130;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_129;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_130;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_130:
        *((_DWORD *)this + 2) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 18) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 70) = v27;
        break;
      case 3u:
        *((_DWORD *)this + 18) |= 2u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v29 = *(void *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v32 = 0;
          if (v2 <= v28) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_135;
            }
            unint64_t v56 = v28++;
            char v57 = *(unsigned char *)(v29 + v56);
            *((void *)a2 + 1) = v28;
            v32 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0) {
              break;
            }
            v54 += 7;
            BOOL v14 = v55++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
LABEL_134:
              unint64_t v2 = v56 + 1;
              goto LABEL_135;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v32) = 0;
          }
          goto LABEL_134;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        do
        {
          unint64_t v2 = v28 + 1;
          *((void *)a2 + 1) = v28 + 1;
          char v33 = *(unsigned char *)(v29 + v28);
          v32 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0) {
            goto LABEL_135;
          }
          v30 += 7;
          unint64_t v28 = v2;
          BOOL v14 = v31++ > 8;
        }
        while (!v14);
        LODWORD(v32) = 0;
LABEL_135:
        *((_DWORD *)this + 3) = v32;
        break;
      case 4u:
        *((_DWORD *)this + 18) |= 0x2000u;
        unint64_t v34 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v38 = 0;
          if (v2 <= v34) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_140;
            }
            unint64_t v60 = v34++;
            char v61 = *(unsigned char *)(v35 + v60);
            *((void *)a2 + 1) = v34;
            v38 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0) {
              break;
            }
            v58 += 7;
            BOOL v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_139:
              unint64_t v2 = v60 + 1;
              goto LABEL_140;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v38) = 0;
          }
          goto LABEL_139;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        do
        {
          unint64_t v2 = v34 + 1;
          *((void *)a2 + 1) = v34 + 1;
          char v39 = *(unsigned char *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0) {
            goto LABEL_140;
          }
          v36 += 7;
          unint64_t v34 = v2;
          BOOL v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_140:
        *((_DWORD *)this + 15) = v38;
        break;
      case 5u:
        *((_DWORD *)this + 18) |= 0x4000u;
        unint64_t v40 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v41 = *(void *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v44 = 0;
          if (v2 <= v40) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_145;
            }
            unint64_t v64 = v40++;
            char v65 = *(unsigned char *)(v41 + v64);
            *((void *)a2 + 1) = v40;
            v44 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0) {
              break;
            }
            v62 += 7;
            BOOL v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_144:
              unint64_t v2 = v64 + 1;
              goto LABEL_145;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v44) = 0;
          }
          goto LABEL_144;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        do
        {
          unint64_t v2 = v40 + 1;
          *((void *)a2 + 1) = v40 + 1;
          char v45 = *(unsigned char *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0) {
            goto LABEL_145;
          }
          v42 += 7;
          unint64_t v40 = v2;
          BOOL v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_145:
        *((_DWORD *)this + 16) = v44;
        break;
      case 6u:
        *((_DWORD *)this + 18) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_125;
      case 7u:
        *((_DWORD *)this + 18) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_125;
      case 8u:
        *((_DWORD *)this + 18) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_125;
      case 9u:
        *((_DWORD *)this + 18) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_125;
      case 0xAu:
        *((_DWORD *)this + 18) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_125;
      case 0xBu:
        *((_DWORD *)this + 18) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_125;
      case 0xCu:
        *((_DWORD *)this + 18) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_125;
      case 0xDu:
        *((_DWORD *)this + 18) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_125;
      case 0xEu:
        *((_DWORD *)this + 18) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_125;
      case 0xFu:
        *((_DWORD *)this + 18) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_125;
      case 0x10u:
        *((_DWORD *)this + 18) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_125:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_85:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0x11u:
        *((_DWORD *)this + 18) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v47 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v46 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v47 = v46 != 0;
        }
        *((unsigned char *)this + 69) = v47;
        break;
      case 0x12u:
        *((_DWORD *)this + 18) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v49 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v48 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v49 = v48 != 0;
        }
        *((unsigned char *)this + 68) = v49;
        break;
      default:
        goto LABEL_19;
    }
LABEL_146:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallMetaData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 72);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    int v4 = *(_DWORD *)(v3 + 72);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    this = PB::Writer::write(a2);
    if ((*(_DWORD *)(v3 + 72) & 0x8000) == 0) {
      return this;
    }
    goto LABEL_37;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((v4 & 0x8000) == 0) {
    return this;
  }
LABEL_37:
  return PB::Writer::write(a2);
}

BOOL CMMsl::FallMetaData::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 72);
  int v3 = *(_DWORD *)(a2 + 72);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 70) != *(unsigned __int8 *)(a2 + 70)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 69) != *(unsigned __int8 *)(a2 + 69)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 72) & 0x8000) == 0;
  if ((v2 & 0x8000) != 0) {
    return (v3 & 0x8000) != 0 && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68);
  }
  return v4;
}

uint64_t CMMsl::FallMetaData::hash_value(CMMsl::FallMetaData *this)
{
  int v1 = *((_DWORD *)this + 18);
  if (v1)
  {
    uint64_t v2 = *((int *)this + 2);
    if ((v1 & 0x20000) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned __int8 *)this + 70);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    uint64_t v4 = *((int *)this + 3);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v4 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_5:
    uint64_t v5 = *((int *)this + 15);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v5 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_6:
    uint64_t v6 = *((int *)this + 16);
    if ((v1 & 4) != 0) {
      goto LABEL_7;
    }
LABEL_47:
    uint64_t v8 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_10;
    }
LABEL_48:
    uint64_t v10 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_13;
    }
LABEL_49:
    uint64_t v12 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_16;
    }
LABEL_50:
    uint64_t v14 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_19;
    }
LABEL_51:
    uint64_t v16 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_22;
    }
LABEL_52:
    uint64_t v18 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_25;
    }
LABEL_53:
    uint64_t v20 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_28;
    }
LABEL_54:
    uint64_t v22 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_31;
    }
LABEL_55:
    uint64_t v24 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_34;
    }
LABEL_56:
    uint64_t v26 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_37;
    }
LABEL_57:
    uint64_t v28 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_40;
    }
LABEL_58:
    uint64_t v29 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_41;
    }
LABEL_59:
    uint64_t v30 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30;
  }
LABEL_46:
  uint64_t v6 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_47;
  }
LABEL_7:
  float v7 = *((float *)this + 4);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_48;
  }
LABEL_10:
  float v9 = *((float *)this + 7);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_49;
  }
LABEL_13:
  float v11 = *((float *)this + 5);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_50;
  }
LABEL_16:
  float v13 = *((float *)this + 6);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_51;
  }
LABEL_19:
  float v15 = *((float *)this + 14);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_52;
  }
LABEL_22:
  float v17 = *((float *)this + 13);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_53;
  }
LABEL_25:
  float v19 = *((float *)this + 12);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_54;
  }
LABEL_28:
  float v21 = *((float *)this + 11);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_55;
  }
LABEL_31:
  float v23 = *((float *)this + 8);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_56;
  }
LABEL_34:
  float v25 = *((float *)this + 9);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_57;
  }
LABEL_37:
  float v27 = *((float *)this + 10);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_58;
  }
LABEL_40:
  uint64_t v29 = *((unsigned __int8 *)this + 69);
  if ((v1 & 0x8000) == 0) {
    goto LABEL_59;
  }
LABEL_41:
  uint64_t v30 = *((unsigned __int8 *)this + 68);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30;
}

double CMMsl::FallSnippet::FallSnippet(CMMsl::FallSnippet *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_270641870;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  return result;
}

{
  double result;

  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_270641870;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  return result;
}

void CMMsl::FallSnippet::~FallSnippet(CMMsl::FallSnippet *this)
{
  *(void *)this = &unk_270641870;
  uint64_t v2 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FallSnippet::~FallSnippet(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::FallSnippet::FallSnippet(uint64_t this, const CMMsl::FallSnippet *a2)
{
  *(void *)this = &unk_270641870;
  *(void *)(this + 8) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(void *)(this + 16) = 0;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(_OWORD *)(this + 80) = 0u;
  *(_OWORD *)(this + 96) = 0u;
  *(_OWORD *)(this + 112) = 0u;
  *(_DWORD *)(this + 128) = 0;
  if (*((unsigned char *)a2 + 128))
  {
    uint64_t v2 = *((void *)a2 + 3);
    *(unsigned char *)(this + 128) = 1;
    *(void *)(this + 24) = v2;
  }
  if (*((void *)a2 + 11)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (*((void *)a2 + 9)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 13)) {
    operator new();
  }
  if (*((void *)a2 + 10)) {
    operator new();
  }
  if (*((void *)a2 + 15)) {
    operator new();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 14)) {
    operator new();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 12)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::operator=(uint64_t a1, const CMMsl::FallSnippet *a2)
{
  if ((const CMMsl::FallSnippet *)a1 != a2)
  {
    CMMsl::FallSnippet::FallSnippet((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallSnippet *)v5, v3);
    CMMsl::FallSnippet::~FallSnippet((CMMsl::FallSnippet *)v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FallSnippet *a2, CMMsl::FallSnippet *a3)
{
  int v3 = *(_DWORD *)(this + 128);
  *(_DWORD *)(this + 128) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  uint64_t v4 = *(void *)(this + 88);
  *(void *)(this + 88) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v7 = *(void *)(this + 16);
  uint64_t v6 = *(void *)(this + 24);
  uint64_t v8 = *((void *)a2 + 3);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *(void *)(this + 24) = v8;
  *((void *)a2 + 2) = v7;
  *((void *)a2 + 3) = v6;
  uint64_t v9 = *(void *)(this + 64);
  *(void *)(this + 64) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *(void *)(this + 72);
  *(void *)(this + 72) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  uint64_t v11 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  uint64_t v12 = *(void *)(this + 104);
  *(void *)(this + 104) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v12;
  uint64_t v13 = *(void *)(this + 80);
  *(void *)(this + 80) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v13;
  uint64_t v14 = *(void *)(this + 120);
  *(void *)(this + 120) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v14;
  uint64_t v15 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v15;
  uint64_t v16 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v16;
  uint64_t v17 = *(void *)(this + 112);
  *(void *)(this + 112) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v17;
  uint64_t v18 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v18;
  uint64_t v19 = *(void *)(this + 96);
  *(void *)(this + 96) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v19;
  return this;
}

uint64_t CMMsl::FallSnippet::FallSnippet(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641870;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v5 = (uint64_t *)(a1 + 32);
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v9 = *v4;
  *uint64_t v4 = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v15 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v14;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v17 = *v5;
  *uint64_t v5 = v16;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v19 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v18;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v21 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v20;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  uint64_t v23 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v22;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v25 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v24;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v27 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v26;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v29 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v28;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v31 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v30;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  uint64_t v33 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v32;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  return a1;
}

uint64_t CMMsl::FallSnippet::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::FallSnippet::FallSnippet((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallSnippet *)v5, v3);
    CMMsl::FallSnippet::~FallSnippet((CMMsl::FallSnippet *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallSnippet::formatText(CMMsl::FallSnippet *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "accel100");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "accel800");
  }
  if (*((unsigned char *)this + 128)) {
    PB::TextFormatter::format(a2, "aopTimestamp");
  }
  uint64_t v7 = *((void *)this + 4);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "dm");
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "dmAlwaysOn");
  }
  uint64_t v9 = *((void *)this + 6);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "fallState");
  }
  uint64_t v10 = *((void *)this + 7);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "fallStats");
  }
  uint64_t v11 = *((void *)this + 8);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "gyro100");
  }
  uint64_t v12 = *((void *)this + 9);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "gyro200");
  }
  uint64_t v13 = *((void *)this + 10);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "heartRate");
  }
  uint64_t v14 = *((void *)this + 11);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, a2, "meta");
  }
  uint64_t v15 = *((void *)this + 12);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, a2, "odometerEntry");
  }
  uint64_t v16 = *((void *)this + 13);
  if (v16) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32))(v16, a2, "pressure");
  }
  uint64_t v17 = *((void *)this + 14);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, a2, "suppressionFeatures");
  }
  uint64_t v18 = *((void *)this + 15);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32))(v18, a2, "wristState");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FallSnippet::readFrom(CMMsl::FallSnippet *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 2u:
        *((unsigned char *)this + 128) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_59;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_55:
          uint64_t v25 = 0;
          goto LABEL_59;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        break;
      case 3u:
        operator new();
      case 4u:
        operator new();
      case 5u:
        operator new();
      case 6u:
        operator new();
      case 7u:
        operator new();
      case 8u:
        operator new();
      case 9u:
        operator new();
      case 0xAu:
        operator new();
      case 0xBu:
        operator new();
      case 0xCu:
        operator new();
      case 0xDu:
        operator new();
      case 0xEu:
        operator new();
      case 0xFu:
        operator new();
      case 0x10u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v21 == v20)
      {
        uint64_t v25 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_59;
      }
      unint64_t v31 = v20 + 1;
      char v32 = *(unsigned char *)(v22 + v20);
      *((void *)a2 + 1) = v31;
      v25 |= (unint64_t)(v32 & 0x7F) << v29;
      if ((v32 & 0x80) == 0) {
        break;
      }
      v29 += 7;
      unint64_t v20 = v31;
      BOOL v14 = v30++ > 8;
      if (v14) {
        goto LABEL_55;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v25 = 0;
    }
LABEL_59:
    *((void *)this + 3) = v25;
LABEL_44:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_44;
  }
  return result;
}

uint64_t CMMsl::Pressure::Pressure(uint64_t this)
{
  *(void *)this = &unk_270644388;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_270644388;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void *CMMsl::StreamingHeartRateData::StreamingHeartRateData(void *this)
{
  *this = &unk_2706453B8;
  this[1] = 0;
  return this;
}

{
  *this = &unk_2706453B8;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::WatchOnWristState::WatchOnWristState(uint64_t this)
{
  *(void *)this = &unk_270645CE8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = &unk_270645CE8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::FallState::FallState(uint64_t this)
{
  *(void *)this = &unk_2706418A8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = &unk_2706418A8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void *CMMsl::FallStats::FallStats(void *this)
{
  *this = &unk_2706418E0;
  this[27] = 0;
  return this;
}

{
  *this = &unk_2706418E0;
  this[27] = 0;
  return this;
}

uint64_t CMMsl::OdometerWithAltitude::OdometerWithAltitude(uint64_t this)
{
  *(void *)this = &unk_2706437B8;
  *(void *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(void *)this = &unk_2706437B8;
  *(void *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

uint64_t CMMsl::FallSnippet::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 128)) {
    this = PB::Writer::writeVarInt(a2);
  }
  int v4 = (const PB::Base *)v3[11];
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[1];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[2];
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = (const PB::Base *)v3[8];
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = (const PB::Base *)v3[9];
  if (v8) {
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  char v9 = (const PB::Base *)v3[4];
  if (v9) {
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  unsigned int v10 = (const PB::Base *)v3[13];
  if (v10) {
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  unint64_t v11 = (const PB::Base *)v3[10];
  if (v11) {
    this = PB::Writer::writeSubmessage(a2, v11);
  }
  unint64_t v12 = (const PB::Base *)v3[15];
  if (v12) {
    this = PB::Writer::writeSubmessage(a2, v12);
  }
  char v13 = (const PB::Base *)v3[6];
  if (v13) {
    this = PB::Writer::writeSubmessage(a2, v13);
  }
  BOOL v14 = (const PB::Base *)v3[7];
  if (v14) {
    this = PB::Writer::writeSubmessage(a2, v14);
  }
  char v15 = (const PB::Base *)v3[14];
  if (v15) {
    this = PB::Writer::writeSubmessage(a2, v15);
  }
  unsigned int v16 = (const PB::Base *)v3[5];
  if (v16) {
    this = PB::Writer::writeSubmessage(a2, v16);
  }
  unint64_t v17 = (const PB::Base *)v3[12];
  if (v17)
  {
    return PB::Writer::writeSubmessage(a2, v17);
  }
  return this;
}

BOOL CMMsl::FallSnippet::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if ((*(unsigned char *)(a2 + 128) & 1) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 128))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a2 + 88);
  if (v4)
  {
    if (!v5 || !CMMsl::FallMetaData::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::Accel::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a2 + 16);
  if (v8)
  {
    if (!v9 || !CMMsl::Accel::operator==(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a2 + 64);
  if (v10)
  {
    if (!v11 || !CMMsl::Gyro::operator==(v10, v11)) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a2 + 72);
  if (v12)
  {
    if (!v13 || !CMMsl::Gyro::operator==(v12, v13)) {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a2 + 32);
  if (v14)
  {
    if (!v15 || !CMMsl::DeviceMotion::operator==(v14, v15)) {
      return 0;
    }
  }
  else if (v15)
  {
    return 0;
  }
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v17 = *(void *)(a2 + 104);
  if (v16)
  {
    if (!v17 || !CMMsl::Pressure::operator==(v16, v17)) {
      return 0;
    }
  }
  else if (v17)
  {
    return 0;
  }
  uint64_t v18 = *(void *)(a1 + 80);
  uint64_t v19 = *(void *)(a2 + 80);
  if (v18)
  {
    if (!v19) {
      return 0;
    }
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(void *)(v19 + 8);
    if (v20)
    {
      if (!v21 || !CMMsl::OnsetHeartRateData::operator==(v20, v21)) {
        return 0;
      }
    }
    else if (v21)
    {
      return 0;
    }
  }
  else if (v19)
  {
    return 0;
  }
  uint64_t v22 = *(void *)(a1 + 120);
  uint64_t v23 = *(void *)(a2 + 120);
  if (v22)
  {
    if (!v23 || !CMMsl::WatchOnWristState::operator==(v22, v23)) {
      return 0;
    }
  }
  else if (v23)
  {
    return 0;
  }
  uint64_t v24 = *(void *)(a1 + 48);
  uint64_t v25 = *(void *)(a2 + 48);
  if (v24)
  {
    if (!v25 || !CMMsl::FallState::operator==(v24, v25)) {
      return 0;
    }
  }
  else if (v25)
  {
    return 0;
  }
  uint64_t v26 = *(void *)(a1 + 56);
  uint64_t v27 = *(void *)(a2 + 56);
  if (v26)
  {
    if (!v27 || !CMMsl::FallStats::operator==(v26, v27)) {
      return 0;
    }
  }
  else if (v27)
  {
    return 0;
  }
  uint64_t v28 = *(void *)(a1 + 112);
  uint64_t v29 = *(void *)(a2 + 112);
  if (v28)
  {
    if (!v29 || !CMMsl::FallFalsePositiveSuppressionFeatures::operator==(v28, v29)) {
      return 0;
    }
  }
  else if (v29)
  {
    return 0;
  }
  uint64_t v30 = *(void *)(a1 + 40);
  uint64_t v31 = *(void *)(a2 + 40);
  if (v30)
  {
    if (!v31 || !CMMsl::DeviceMotion::operator==(v30, v31)) {
      return 0;
    }
  }
  else if (v31)
  {
    return 0;
  }
  uint64_t v32 = *(void *)(a2 + 96);
  BOOL result = v32 == 0;
  if (!*(void *)(a1 + 96)) {
    return result;
  }
  return v32 && CMMsl::OdometerWithAltitude::operator==(*(void *)(a1 + 96), v32);
}

BOOL CMMsl::Pressure::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 4) == 0;
  if ((*(unsigned char *)(a1 + 24) & 4) != 0) {
    return (*(unsigned char *)(a2 + 24) & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  }
  return v2;
}

BOOL CMMsl::StreamingHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::WatchOnWristState::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 37) != *(unsigned __int8 *)(a2 + 37)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 38) != *(unsigned __int8 *)(a2 + 38)) {
      return 0;
    }
  }
  else if (((v3 | v2) & 0x80) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  return v4;
}

BOOL CMMsl::FallState::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  int v3 = *(unsigned __int8 *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0) {
    return *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
  }
  else {
    return ((v3 | v2) & 0x80u) == 0;
  }
}

BOOL CMMsl::FallStats::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 216);
  uint64_t v3 = *(void *)(a2 + 216);
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v3 & 0x400000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(void *)(a2 + 216) & 8) == 0;
  if ((v2 & 8) != 0) {
    return (v3 & 8) != 0 && *(float *)(a1 + 32) == *(float *)(a2 + 32);
  }
  return v4;
}

BOOL CMMsl::OdometerWithAltitude::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a2 + 72);
  if (v4)
  {
    if (!v5 || !CMMsl::Odometer::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  int v6 = *(unsigned __int8 *)(a1 + 80);
  int v7 = *(unsigned __int8 *)(a2 + 80);
  if ((v6 & 4) != 0)
  {
    if ((v7 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v7 & 4) != 0)
  {
    return 0;
  }
  if ((v6 & 8) != 0)
  {
    if ((v7 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v7 & 8) != 0)
  {
    return 0;
  }
  if ((v6 & 0x40) != 0)
  {
    if ((v7 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v7 & 0x40) != 0)
  {
    return 0;
  }
  if ((v7 & v6 & 0x80) != 0)
  {
    if (*(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if (((v7 | v6) & 0x80) != 0)
  {
    return 0;
  }
  if ((v6 & 2) != 0)
  {
    if ((v7 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v7 & 2) != 0)
  {
    return 0;
  }
  if (v6)
  {
    if ((v7 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  if ((v6 & 0x20) != 0)
  {
    if ((v7 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v7 & 0x20) != 0)
  {
    return 0;
  }
  BOOL result = (v7 & 0x10) == 0;
  if ((v6 & 0x10) == 0) {
    return result;
  }
  return (v7 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
}

unint64_t CMMsl::FallSnippet::hash_value(CMMsl::FallSnippet *this)
{
  if (*((unsigned char *)this + 128)) {
    uint64_t v2 = *((void *)this + 3);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (CMMsl::FallMetaData *)*((void *)this + 11);
  uint64_t v36 = v2;
  if (v3) {
    uint64_t v4 = CMMsl::FallMetaData::hash_value(v3);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = (CMMsl::Accel *)*((void *)this + 1);
  uint64_t v35 = v4;
  if (v5) {
    uint64_t v6 = CMMsl::Accel::hash_value(v5);
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = (CMMsl::Accel *)*((void *)this + 2);
  uint64_t v34 = v6;
  if (v7) {
    uint64_t v8 = CMMsl::Accel::hash_value(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (CMMsl::Gyro *)*((void *)this + 8);
  uint64_t v33 = v8;
  if (v9) {
    uint64_t v10 = CMMsl::Gyro::hash_value(v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (CMMsl::Gyro *)*((void *)this + 9);
  uint64_t v32 = v10;
  if (v11) {
    uint64_t v12 = CMMsl::Gyro::hash_value(v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (CMMsl::DeviceMotion *)*((void *)this + 4);
  if (v13) {
    uint64_t v14 = CMMsl::DeviceMotion::hash_value(v13);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = (CMMsl::Pressure *)*((void *)this + 13);
  if (v15) {
    uint64_t v16 = CMMsl::Pressure::hash_value(v15);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *((void *)this + 10);
  if (v17 && (uint64_t v18 = *(CMMsl::OnsetHeartRateData **)(v17 + 8)) != 0) {
    uint64_t v19 = CMMsl::OnsetHeartRateData::hash_value(v18);
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = (CMMsl::WatchOnWristState *)*((void *)this + 15);
  if (v20) {
    uint64_t v21 = CMMsl::WatchOnWristState::hash_value(v20);
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = (CMMsl::FallState *)*((void *)this + 6);
  if (v22) {
    uint64_t v23 = CMMsl::FallState::hash_value(v22);
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = (CMMsl::FallStats *)*((void *)this + 7);
  if (v24) {
    uint64_t v25 = CMMsl::FallStats::hash_value(v24);
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = (CMMsl::FallFalsePositiveSuppressionFeatures *)*((void *)this + 14);
  if (v26) {
    uint64_t v27 = CMMsl::FallFalsePositiveSuppressionFeatures::hash_value(v26);
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = (CMMsl::DeviceMotion *)*((void *)this + 5);
  if (v28) {
    uint64_t v29 = CMMsl::DeviceMotion::hash_value(v28);
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = *((void *)this + 12);
  if (v30) {
    unint64_t v30 = CMMsl::OdometerWithAltitude::hash_value((CMMsl::OdometerWithAltitude *)v30);
  }
  return v35 ^ v36 ^ v34 ^ v33 ^ v32 ^ v12 ^ v14 ^ v16 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30;
}

uint64_t CMMsl::FallSnippet::makeMeta(uint64_t this)
{
  if (!*(void *)(this + 88)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeAccel100(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeAccel800(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeGyro100(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeGyro200(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeDm(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makePressure(uint64_t this)
{
  if (!*(void *)(this + 104)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeHeartRate(uint64_t this)
{
  if (!*(void *)(this + 80)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeWristState(uint64_t this)
{
  if (!*(void *)(this + 120)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeFallState(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeFallStats(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeSuppressionFeatures(uint64_t this)
{
  if (!*(void *)(this + 112)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeDmAlwaysOn(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeOdometerEntry(uint64_t this)
{
  if (!*(void *)(this + 96)) {
    operator new();
  }
  return this;
}

void CMMsl::FallState::~FallState(CMMsl::FallState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::FallState::FallState(uint64_t this, const CMMsl::FallState *a2)
{
  *(void *)this = &unk_2706418A8;
  *(_DWORD *)(this + 48) = 0;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 48) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 48))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 48) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(unsigned char *)(this + 48) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(unsigned char *)(this + 48) = v3;
  *(_DWORD *)(this + 40) = v7;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  int v8 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(unsigned char *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v8;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(unsigned char *)(this + 48) = v3;
  *(_DWORD *)(this + 32) = v9;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_18:
    char v11 = *((unsigned char *)a2 + 44);
    *(unsigned char *)(this + 48) = v3 | 0x80;
    *(unsigned char *)(this + 44) = v11;
    return this;
  }
LABEL_17:
  int v10 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(unsigned char *)(this + 48) = v3;
  *(_DWORD *)(this + 28) = v10;
  if ((*((unsigned char *)a2 + 48) & 0x80) != 0) {
    goto LABEL_18;
  }
  return this;
}

uint64_t CMMsl::FallState::operator=(uint64_t a1, const CMMsl::FallState *a2)
{
  if ((const CMMsl::FallState *)a1 != a2)
  {
    CMMsl::FallState::FallState((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    int v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    int v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v9 = v4;
    long long v10 = v6;
    LOBYTE(v5) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v12;
    char v12 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FallState *a2, CMMsl::FallState *a3)
{
  int v3 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LOBYTE(v5) = *(unsigned char *)(this + 44);
  *(unsigned char *)(this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v5;
  return this;
}

uint64_t CMMsl::FallState::FallState(uint64_t result, uint64_t a2)
{
  *(void *)BOOL result = &unk_2706418A8;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(result + 44) = *(unsigned char *)(a2 + 44);
  return result;
}

{
  *(void *)BOOL result = &unk_2706418A8;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(result + 44) = *(unsigned char *)(a2 + 44);
  return result;
}

uint64_t CMMsl::FallState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v10 = &unk_2706418A8;
    int v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    int v4 = *(_DWORD *)(a2 + 40);
    char v5 = *(unsigned char *)(a2 + 44);
    int v15 = *(_DWORD *)(a1 + 48);
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    int v13 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 24);
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 24) = v8;
    long long v11 = v6;
    long long v12 = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v5;
    char v14 = v3;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::FallState::formatText(CMMsl::FallState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "aopTsNow");
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "aopTsSensor");
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "fallAlertSentFromReferee");
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isFall");
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "operatingMode");
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "resolution");
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "response");
  if ((*((unsigned char *)this + 48) & 0x40) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "state");
LABEL_10:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FallState::readFrom(CMMsl::FallState *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v3 > v2) {
        unint64_t v2 = v3;
      }
      do
      {
        if (v2 == v3)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v3 + 1;
        char v18 = *(unsigned char *)(v8 + v3);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_24;
        }
        v15 += 7;
        unint64_t v3 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v3 = *((void *)a2 + 1);
      unint64_t v2 = *((void *)a2 + 2);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v3 + 1;
      *((void *)a2 + 1) = v3 + 1;
      char v13 = *(unsigned char *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v3 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_24:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_139;
            }
            unint64_t v66 = v20++;
            char v67 = *(unsigned char *)(v21 + v66);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0) {
              break;
            }
            v64 += 7;
            BOOL v14 = v65++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_138:
              unint64_t v3 = v66 + 1;
              goto LABEL_139;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_138;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v3 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_139;
          }
          v22 += 7;
          unint64_t v20 = v3;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_139:
        *((void *)this + 2) = v24;
        break;
      case 2u:
        *((unsigned char *)this + 48) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_144;
            }
            unint64_t v70 = v26++;
            char v71 = *(unsigned char *)(v27 + v70);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0) {
              break;
            }
            v68 += 7;
            BOOL v14 = v69++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
LABEL_143:
              unint64_t v3 = v70 + 1;
              goto LABEL_144;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v30 = 0;
          }
          goto LABEL_143;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v3 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_144;
          }
          v28 += 7;
          unint64_t v26 = v3;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        uint64_t v30 = 0;
LABEL_144:
        *((void *)this + 1) = v30;
        break;
      case 3u:
        *((unsigned char *)this + 48) |= 4u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_149;
            }
            unint64_t v74 = v32++;
            char v75 = *(unsigned char *)(v33 + v74);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v75 & 0x7F) << v72;
            if ((v75 & 0x80) == 0) {
              break;
            }
            v72 += 7;
            BOOL v14 = v73++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_148:
              unint64_t v3 = v74 + 1;
              goto LABEL_149;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_148;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v3 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_149;
          }
          v34 += 7;
          unint64_t v32 = v3;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_149:
        *((_DWORD *)this + 6) = v36;
        break;
      case 4u:
        *((unsigned char *)this + 48) |= 0x40u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_154;
            }
            unint64_t v78 = v38++;
            char v79 = *(unsigned char *)(v39 + v78);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v79 & 0x7F) << v76;
            if ((v79 & 0x80) == 0) {
              break;
            }
            v76 += 7;
            BOOL v14 = v77++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_153:
              unint64_t v3 = v78 + 1;
              goto LABEL_154;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_153;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v3 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_154;
          }
          v40 += 7;
          unint64_t v38 = v3;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_154:
        *((_DWORD *)this + 10) = v42;
        break;
      case 5u:
        *((unsigned char *)this + 48) |= 0x20u;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v45 = *(void *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          char v80 = 0;
          unsigned int v81 = 0;
          uint64_t v48 = 0;
          if (v2 <= v44) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v44)
            {
              LODWORD(v48) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_159;
            }
            unint64_t v82 = v44++;
            char v83 = *(unsigned char *)(v45 + v82);
            *((void *)a2 + 1) = v44;
            v48 |= (unint64_t)(v83 & 0x7F) << v80;
            if ((v83 & 0x80) == 0) {
              break;
            }
            v80 += 7;
            BOOL v14 = v81++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_158:
              unint64_t v3 = v82 + 1;
              goto LABEL_159;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v48) = 0;
          }
          goto LABEL_158;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        do
        {
          unint64_t v3 = v44 + 1;
          *((void *)a2 + 1) = v44 + 1;
          char v49 = *(unsigned char *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0) {
            goto LABEL_159;
          }
          v46 += 7;
          unint64_t v44 = v3;
          BOOL v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_159:
        *((_DWORD *)this + 9) = v48;
        break;
      case 6u:
        *((unsigned char *)this + 48) |= 0x10u;
        unint64_t v50 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v51 = *(void *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          char v84 = 0;
          unsigned int v85 = 0;
          uint64_t v54 = 0;
          if (v2 <= v50) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v50)
            {
              LODWORD(v54) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_164;
            }
            unint64_t v86 = v50++;
            char v87 = *(unsigned char *)(v51 + v86);
            *((void *)a2 + 1) = v50;
            v54 |= (unint64_t)(v87 & 0x7F) << v84;
            if ((v87 & 0x80) == 0) {
              break;
            }
            v84 += 7;
            BOOL v14 = v85++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_163:
              unint64_t v3 = v86 + 1;
              goto LABEL_164;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v54) = 0;
          }
          goto LABEL_163;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        do
        {
          unint64_t v3 = v50 + 1;
          *((void *)a2 + 1) = v50 + 1;
          char v55 = *(unsigned char *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0) {
            goto LABEL_164;
          }
          v52 += 7;
          unint64_t v50 = v3;
          BOOL v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_164:
        *((_DWORD *)this + 8) = v54;
        break;
      case 7u:
        *((unsigned char *)this + 48) |= 8u;
        unint64_t v56 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v57 = *(void *)a2;
        if (v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v2)
        {
          char v88 = 0;
          unsigned int v89 = 0;
          uint64_t v60 = 0;
          if (v2 <= v56) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v56)
            {
              LODWORD(v60) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_169;
            }
            unint64_t v90 = v56++;
            char v91 = *(unsigned char *)(v57 + v90);
            *((void *)a2 + 1) = v56;
            v60 |= (unint64_t)(v91 & 0x7F) << v88;
            if ((v91 & 0x80) == 0) {
              break;
            }
            v88 += 7;
            BOOL v14 = v89++ > 8;
            if (v14)
            {
              LODWORD(v60) = 0;
LABEL_168:
              unint64_t v3 = v90 + 1;
              goto LABEL_169;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v60) = 0;
          }
          goto LABEL_168;
        }
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v60 = 0;
        do
        {
          unint64_t v3 = v56 + 1;
          *((void *)a2 + 1) = v56 + 1;
          char v61 = *(unsigned char *)(v57 + v56);
          v60 |= (unint64_t)(v61 & 0x7F) << v58;
          if ((v61 & 0x80) == 0) {
            goto LABEL_169;
          }
          v58 += 7;
          unint64_t v56 = v3;
          BOOL v14 = v59++ > 8;
        }
        while (!v14);
        LODWORD(v60) = 0;
LABEL_169:
        *((_DWORD *)this + 7) = v60;
        break;
      case 8u:
        *((unsigned char *)this + 48) |= 0x80u;
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        if (v3 >= v2)
        {
          BOOL v63 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v62 = *(unsigned __int8 *)(*(void *)a2 + v3++);
          *((void *)a2 + 1) = v3;
          BOOL v63 = v62 != 0;
        }
        *((unsigned char *)this + 44) = v63;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 48);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 48) & 0x80) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_17:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::FallState::hash_value(CMMsl::FallState *this)
{
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
    uint64_t v1 = *((void *)this + 2);
    if (*((unsigned char *)this + 48))
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 1);
      if ((*((unsigned char *)this + 48) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 48)) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 48) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 48) & 0x40) != 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 48) & 0x40) != 0)
  {
LABEL_5:
    uint64_t v4 = *((unsigned int *)this + 10);
    if ((*((unsigned char *)this + 48) & 0x20) != 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 48) & 0x20) != 0)
  {
LABEL_6:
    uint64_t v5 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 48) & 0x10) != 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 48) & 0x10) != 0)
  {
LABEL_7:
    uint64_t v6 = *((unsigned int *)this + 8);
    if ((*((unsigned char *)this + 48) & 8) != 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 48) & 0x80) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v8 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_15:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 48) & 8) == 0) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t v7 = *((unsigned int *)this + 7);
  if ((*((unsigned char *)this + 48) & 0x80) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  uint64_t v8 = *((unsigned __int8 *)this + 44);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::FallStats::~FallStats(CMMsl::FallStats *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::FallStats::FallStats(CMMsl::FallStats *this, const CMMsl::FallStats *a2)
{
  *(void *)this = &unk_2706418E0;
  *((void *)this + 27) = 0;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x80000000) != 0)
  {
    int v4 = *((_DWORD *)a2 + 36);
    uint64_t v3 = 0x80000000;
    *((void *)this + 27) = 0x80000000;
    *((_DWORD *)this + 36) = v4;
    uint64_t v2 = *((void *)a2 + 27);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if (v2)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1uLL;
    *((void *)this + 27) = v3;
    *((void *)this + 1) = v5;
    uint64_t v2 = *((void *)a2 + 27);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2uLL;
    *((void *)this + 27) = v3;
    *((void *)this + 2) = v6;
    uint64_t v2 = *((void *)a2 + 27);
    if ((v2 & 0x20000) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_56;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 22);
  v3 |= 0x20000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 22) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_57;
  }
LABEL_56:
  float result = *((float *)a2 + 44);
  v3 |= 0x8000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 44) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_58;
  }
LABEL_57:
  float result = *((float *)a2 + 43);
  v3 |= 0x4000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 43) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_59;
  }
LABEL_58:
  float result = *((float *)a2 + 48);
  v3 |= 0x80000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 48) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_60;
  }
LABEL_59:
  float result = *((float *)a2 + 47);
  v3 |= 0x40000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 47) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_61;
  }
LABEL_60:
  float result = *((float *)a2 + 52);
  v3 |= 0x800000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 52) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_62;
  }
LABEL_61:
  float result = *((float *)a2 + 51);
  v3 |= 0x400000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 51) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_63;
  }
LABEL_62:
  float result = *((float *)a2 + 45);
  v3 |= 0x10000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 45) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_64;
  }
LABEL_63:
  float result = *((float *)a2 + 49);
  v3 |= 0x100000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 49) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_65;
  }
LABEL_64:
  float result = *((float *)a2 + 53);
  v3 |= 0x1000000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 53) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x10000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_66;
  }
LABEL_65:
  float result = *((float *)a2 + 21);
  v3 |= 0x10000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 21) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_67;
  }
LABEL_66:
  float result = *((float *)a2 + 42);
  v3 |= 0x2000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 42) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_68;
  }
LABEL_67:
  float result = *((float *)a2 + 46);
  v3 |= 0x20000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 46) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_21:
    if ((v2 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_69;
  }
LABEL_68:
  float result = *((float *)a2 + 50);
  v3 |= 0x200000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 50) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 4) == 0)
  {
LABEL_22:
    if ((v2 & 0x10) == 0) {
      goto LABEL_23;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v8 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *((void *)this + 27) = v3;
  *((void *)this + 3) = v8;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x10) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_71;
  }
LABEL_70:
  float result = *((float *)a2 + 9);
  v3 |= 0x10uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 9) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_72;
  }
LABEL_71:
  float result = *((float *)a2 + 28);
  v3 |= 0x800000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 28) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_73;
  }
LABEL_72:
  float result = *((float *)a2 + 12);
  v3 |= 0x80uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 12) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x40) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_74;
  }
LABEL_73:
  float result = *((float *)a2 + 11);
  v3 |= 0x40uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 11) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_75;
  }
LABEL_74:
  float result = *((float *)a2 + 25);
  v3 |= 0x100000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 25) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x80000) == 0)
  {
LABEL_28:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_76;
  }
LABEL_75:
  float result = *((float *)a2 + 24);
  v3 |= 0x80000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 24) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_77;
  }
LABEL_76:
  float result = *((float *)a2 + 35);
  v3 |= 0x40000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 35) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x1000) == 0)
  {
LABEL_30:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_78;
  }
LABEL_77:
  int v9 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 17) = v9;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x4000) == 0)
  {
LABEL_31:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_79;
  }
LABEL_78:
  int v10 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 19) = v10;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_80;
  }
LABEL_79:
  int v11 = *((_DWORD *)a2 + 37);
  v3 |= 0x100000000uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 37) = v11;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x100) == 0) {
      goto LABEL_34;
    }
    goto LABEL_81;
  }
LABEL_80:
  int v12 = *((_DWORD *)a2 + 41);
  v3 |= 0x1000000000uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 41) = v12;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x100) == 0)
  {
LABEL_34:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_82;
  }
LABEL_81:
  int v13 = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 13) = v13;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800) == 0) {
      goto LABEL_36;
    }
    goto LABEL_83;
  }
LABEL_82:
  float result = *((float *)a2 + 38);
  v3 |= 0x200000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 38) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x800) == 0)
  {
LABEL_36:
    if ((v2 & 0x400) == 0) {
      goto LABEL_37;
    }
    goto LABEL_84;
  }
LABEL_83:
  float result = *((float *)a2 + 16);
  v3 |= 0x800uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 16) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x400) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_85;
  }
LABEL_84:
  float result = *((float *)a2 + 15);
  v3 |= 0x400uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 15) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_86;
  }
LABEL_85:
  float result = *((float *)a2 + 26);
  v3 |= 0x200000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 26) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_87;
  }
LABEL_86:
  float result = *((float *)a2 + 23);
  v3 |= 0x40000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 23) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_88;
  }
LABEL_87:
  float result = *((float *)a2 + 34);
  v3 |= 0x20000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 34) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_89;
  }
LABEL_88:
  float result = *((float *)a2 + 40);
  v3 |= 0x800000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 40) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_90;
  }
LABEL_89:
  float result = *((float *)a2 + 39);
  v3 |= 0x400000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 39) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x8000) == 0)
  {
LABEL_43:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_91;
  }
LABEL_90:
  int v14 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 20) = v14;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_92;
  }
LABEL_91:
  float result = *((float *)a2 + 33);
  v3 |= 0x10000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 33) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_93;
  }
LABEL_92:
  float result = *((float *)a2 + 31);
  v3 |= 0x4000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 31) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x20) == 0) {
      goto LABEL_47;
    }
    goto LABEL_94;
  }
LABEL_93:
  float result = *((float *)a2 + 32);
  v3 |= 0x8000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 32) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x20) == 0)
  {
LABEL_47:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_95;
  }
LABEL_94:
  float result = *((float *)a2 + 10);
  v3 |= 0x20uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 10) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_96;
  }
LABEL_95:
  float result = *((float *)a2 + 29);
  v3 |= 0x1000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 29) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_97;
  }
LABEL_96:
  int v15 = *((_DWORD *)a2 + 30);
  v3 |= 0x2000000uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 30) = v15;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x2000) == 0)
  {
LABEL_50:
    if ((v2 & 0x200) == 0) {
      goto LABEL_51;
    }
    goto LABEL_98;
  }
LABEL_97:
  float result = *((float *)a2 + 18);
  v3 |= 0x2000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 18) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x200) == 0)
  {
LABEL_51:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_99;
  }
LABEL_98:
  float result = *((float *)a2 + 14);
  v3 |= 0x200uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 14) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x400000) == 0)
  {
LABEL_52:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_100:
    float result = *((float *)a2 + 8);
    *((void *)this + 27) = v3 | 8;
    *((float *)this + 8) = result;
    return result;
  }
LABEL_99:
  float result = *((float *)a2 + 27);
  v3 |= 0x400000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 27) = result;
  if ((*((void *)a2 + 27) & 8) != 0) {
    goto LABEL_100;
  }
  return result;
}

CMMsl *CMMsl::FallStats::operator=(CMMsl *a1, const CMMsl::FallStats *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallStats::FallStats((CMMsl::FallStats *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallStats *a2, CMMsl::FallStats *a3)
{
  uint64_t v3 = *((void *)this + 27);
  *((void *)this + 27) = *((void *)a2 + 27);
  *((void *)a2 + 27) = v3;
  LODWORD(v3) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  int v6 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  int v7 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v7;
  int v8 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v8;
  int v9 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v9;
  int v10 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v10;
  int v11 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v11;
  int v12 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v12;
  int v13 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v13;
  int v14 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v14;
  int v15 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v15;
  int v16 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v16;
  int v17 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v17;
  int v18 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v18;
  int v19 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v19;
  uint64_t v20 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v20;
  int v21 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v21;
  int v22 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v22;
  int v23 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v23;
  int v24 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v24;
  int v25 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v25;
  int v26 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v26;
  int v27 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v27;
  LODWORD(v20) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v20;
  LODWORD(v20) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v20;
  LODWORD(v20) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v20;
  LODWORD(v20) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v20;
  LODWORD(v20) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v20;
  int v28 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v28;
  int v29 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v29;
  int v30 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v30;
  int v31 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v31;
  int v32 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v32;
  int v33 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v33;
  int v34 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v34;
  int v35 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v35;
  LODWORD(v20) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v20;
  int v36 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v36;
  int v37 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v37;
  int v38 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v38;
  int v39 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v39;
  int v40 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v40;
  LODWORD(v20) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v20;
  int v41 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v41;
  int v42 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v42;
  int v43 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v43;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  return result;
}

float CMMsl::FallStats::FallStats(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706418E0;
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a2 + 216) = 0;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

CMMsl *CMMsl::FallStats::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallStats::FallStats((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallStats::formatText(CMMsl::FallStats *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "abruptGravityChangeAngle", *((float *)this + 8));
    uint64_t v5 = *((void *)this + 27);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_56;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelPathLength", *((float *)this + 9));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "accelPathLengthWithPeak", *((float *)this + 10));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "angleChangePostImpact", *((float *)this + 11));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "angleChangePreImpact", *((float *)this + 12));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "aopTsNow");
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "aopTsSensor");
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "crown");
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "crownVariance", *((float *)this + 14));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "extrapolatedMaxAccelNorm", *((float *)this + 15));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "extrapolatedMaxMinusMin", *((float *)this + 16));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "fallType");
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "gravityVariance", *((float *)this + 18));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "isFall");
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "isNearFall");
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "jerkVectorMagMax", *((float *)this + 21));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "magMax", *((float *)this + 22));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 23));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "maxAngleChangePostImpact", *((float *)this + 24));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "maxAngleChangePreImpact", *((float *)this + 25));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "maxMinusMin", *((float *)this + 26));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "medianAbsGravityY", *((float *)this + 27));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "minInertialZ", *((float *)this + 28));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "minInertialZHighFreq", *((float *)this + 29));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "operatingMode");
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "pathLengthDecorrelation", *((float *)this + 31));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "pathLengthDelaySpread", *((float *)this + 32));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "pathLengthHarmonicMean", *((float *)this + 33));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 4) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "peakTimestamp");
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "poseAtImpact", *((float *)this + 34));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "posteriorRatio", *((float *)this + 35));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "seq");
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "simulated");
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "sumDeltaAngles", *((float *)this + 38));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "swingAngle", *((float *)this + 39));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "tiltAngle", *((float *)this + 40));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "trialCount");
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "xJerkScalarMagMax", *((float *)this + 42));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "xMax", *((float *)this + 43));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "xMin", *((float *)this + 44));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "xZCTime", *((float *)this + 45));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "yJerkScalarMagMax", *((float *)this + 46));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "yMax", *((float *)this + 47));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "yMin", *((float *)this + 48));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "yZCTime", *((float *)this + 49));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "zJerkScalarMagMax", *((float *)this + 50));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "zMax", *((float *)this + 51));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "zMin", *((float *)this + 52));
  if ((*((void *)this + 27) & 0x1000000000000) != 0) {
LABEL_50:
  }
    PB::TextFormatter::format(a2, "zZCTime", *((float *)this + 53));
LABEL_51:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FallStats::readFrom(CMMsl::FallStats *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((void *)this + 27) |= 0x80000000uLL;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_301;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_220:
          LODWORD(v25) = 0;
          goto LABEL_301;
        }
        char v146 = 0;
        unsigned int v147 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v21 == v20)
          {
            LODWORD(v25) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v148 = v20 + 1;
            char v149 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v148;
            v25 |= (unint64_t)(v149 & 0x7F) << v146;
            if (v149 < 0)
            {
              v146 += 7;
              unint64_t v20 = v148;
              BOOL v14 = v147++ > 8;
              if (v14) {
                goto LABEL_220;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v25) = 0;
            }
          }
          break;
        }
LABEL_301:
        *((_DWORD *)this + 36) = v25;
        goto LABEL_293;
      case 2u:
        *((void *)this + 27) |= 1uLL;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        uint64_t v30 = *(void *)a2;
        if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          do
          {
            unint64_t v34 = v28 + 1;
            *((void *)a2 + 1) = v28 + 1;
            char v35 = *(unsigned char *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0) {
              goto LABEL_305;
            }
            v31 += 7;
            unint64_t v28 = v34;
            BOOL v14 = v32++ > 8;
          }
          while (!v14);
LABEL_227:
          uint64_t v33 = 0;
          goto LABEL_305;
        }
        char v150 = 0;
        unsigned int v151 = 0;
        uint64_t v33 = 0;
        if (v29 <= v28) {
          unint64_t v29 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v29 == v28)
          {
            uint64_t v33 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v152 = v28 + 1;
            char v153 = *(unsigned char *)(v30 + v28);
            *((void *)a2 + 1) = v152;
            v33 |= (unint64_t)(v153 & 0x7F) << v150;
            if (v153 < 0)
            {
              v150 += 7;
              unint64_t v28 = v152;
              BOOL v14 = v151++ > 8;
              if (v14) {
                goto LABEL_227;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v33 = 0;
            }
          }
          break;
        }
LABEL_305:
        *((void *)this + 1) = v33;
        goto LABEL_293;
      case 3u:
        *((void *)this + 27) |= 2uLL;
        unint64_t v36 = *((void *)a2 + 1);
        unint64_t v37 = *((void *)a2 + 2);
        uint64_t v38 = *(void *)a2;
        if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
        {
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          do
          {
            unint64_t v42 = v36 + 1;
            *((void *)a2 + 1) = v36 + 1;
            char v43 = *(unsigned char *)(v38 + v36);
            v41 |= (unint64_t)(v43 & 0x7F) << v39;
            if ((v43 & 0x80) == 0) {
              goto LABEL_309;
            }
            v39 += 7;
            unint64_t v36 = v42;
            BOOL v14 = v40++ > 8;
          }
          while (!v14);
LABEL_234:
          uint64_t v41 = 0;
          goto LABEL_309;
        }
        char v154 = 0;
        unsigned int v155 = 0;
        uint64_t v41 = 0;
        if (v37 <= v36) {
          unint64_t v37 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v37 == v36)
          {
            uint64_t v41 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v156 = v36 + 1;
            char v157 = *(unsigned char *)(v38 + v36);
            *((void *)a2 + 1) = v156;
            v41 |= (unint64_t)(v157 & 0x7F) << v154;
            if (v157 < 0)
            {
              v154 += 7;
              unint64_t v36 = v156;
              BOOL v14 = v155++ > 8;
              if (v14) {
                goto LABEL_234;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v41 = 0;
            }
          }
          break;
        }
LABEL_309:
        *((void *)this + 2) = v41;
        goto LABEL_293;
      case 4u:
        *((void *)this + 27) |= 0x20000uLL;
        unint64_t v44 = *((void *)a2 + 1);
        if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v44);
        goto LABEL_292;
      case 5u:
        *((void *)this + 27) |= 0x8000000000uLL;
        unint64_t v45 = *((void *)a2 + 1);
        if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v45);
        goto LABEL_292;
      case 6u:
        *((void *)this + 27) |= 0x4000000000uLL;
        unint64_t v46 = *((void *)a2 + 1);
        if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v46);
        goto LABEL_292;
      case 7u:
        *((void *)this + 27) |= 0x80000000000uLL;
        unint64_t v47 = *((void *)a2 + 1);
        if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 48) = *(_DWORD *)(*(void *)a2 + v47);
        goto LABEL_292;
      case 8u:
        *((void *)this + 27) |= 0x40000000000uLL;
        unint64_t v48 = *((void *)a2 + 1);
        if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 47) = *(_DWORD *)(*(void *)a2 + v48);
        goto LABEL_292;
      case 9u:
        *((void *)this + 27) |= 0x800000000000uLL;
        unint64_t v49 = *((void *)a2 + 1);
        if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 52) = *(_DWORD *)(*(void *)a2 + v49);
        goto LABEL_292;
      case 0xAu:
        *((void *)this + 27) |= 0x400000000000uLL;
        unint64_t v50 = *((void *)a2 + 1);
        if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 51) = *(_DWORD *)(*(void *)a2 + v50);
        goto LABEL_292;
      case 0xBu:
        *((void *)this + 27) |= 0x10000000000uLL;
        unint64_t v51 = *((void *)a2 + 1);
        if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 45) = *(_DWORD *)(*(void *)a2 + v51);
        goto LABEL_292;
      case 0xCu:
        *((void *)this + 27) |= 0x100000000000uLL;
        unint64_t v52 = *((void *)a2 + 1);
        if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 49) = *(_DWORD *)(*(void *)a2 + v52);
        goto LABEL_292;
      case 0xDu:
        *((void *)this + 27) |= 0x1000000000000uLL;
        unint64_t v53 = *((void *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 53) = *(_DWORD *)(*(void *)a2 + v53);
        goto LABEL_292;
      case 0xEu:
        *((void *)this + 27) |= 0x10000uLL;
        unint64_t v54 = *((void *)a2 + 1);
        if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v54);
        goto LABEL_292;
      case 0xFu:
        *((void *)this + 27) |= 0x2000000000uLL;
        unint64_t v55 = *((void *)a2 + 1);
        if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v55);
        goto LABEL_292;
      case 0x10u:
        *((void *)this + 27) |= 0x20000000000uLL;
        unint64_t v56 = *((void *)a2 + 1);
        if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 46) = *(_DWORD *)(*(void *)a2 + v56);
        goto LABEL_292;
      case 0x11u:
        *((void *)this + 27) |= 0x200000000000uLL;
        unint64_t v57 = *((void *)a2 + 1);
        if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 50) = *(_DWORD *)(*(void *)a2 + v57);
        goto LABEL_292;
      case 0x12u:
        *((void *)this + 27) |= 4uLL;
        unint64_t v58 = *((void *)a2 + 1);
        unint64_t v59 = *((void *)a2 + 2);
        uint64_t v60 = *(void *)a2;
        if (v58 <= 0xFFFFFFFFFFFFFFF5 && v58 + 10 <= v59)
        {
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v63 = 0;
          do
          {
            unint64_t v64 = v58 + 1;
            *((void *)a2 + 1) = v58 + 1;
            char v65 = *(unsigned char *)(v60 + v58);
            v63 |= (unint64_t)(v65 & 0x7F) << v61;
            if ((v65 & 0x80) == 0) {
              goto LABEL_313;
            }
            v61 += 7;
            unint64_t v58 = v64;
            BOOL v14 = v62++ > 8;
          }
          while (!v14);
LABEL_241:
          uint64_t v63 = 0;
          goto LABEL_313;
        }
        char v158 = 0;
        unsigned int v159 = 0;
        uint64_t v63 = 0;
        if (v59 <= v58) {
          unint64_t v59 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v59 == v58)
          {
            uint64_t v63 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v160 = v58 + 1;
            char v161 = *(unsigned char *)(v60 + v58);
            *((void *)a2 + 1) = v160;
            v63 |= (unint64_t)(v161 & 0x7F) << v158;
            if (v161 < 0)
            {
              v158 += 7;
              unint64_t v58 = v160;
              BOOL v14 = v159++ > 8;
              if (v14) {
                goto LABEL_241;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v63 = 0;
            }
          }
          break;
        }
LABEL_313:
        *((void *)this + 3) = v63;
        goto LABEL_293;
      case 0x13u:
        *((void *)this + 27) |= 0x10uLL;
        unint64_t v66 = *((void *)a2 + 1);
        if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v66);
        goto LABEL_292;
      case 0x14u:
        *((void *)this + 27) |= 0x800000uLL;
        unint64_t v67 = *((void *)a2 + 1);
        if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v67);
        goto LABEL_292;
      case 0x15u:
        *((void *)this + 27) |= 0x80uLL;
        unint64_t v68 = *((void *)a2 + 1);
        if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v68);
        goto LABEL_292;
      case 0x16u:
        *((void *)this + 27) |= 0x40uLL;
        unint64_t v69 = *((void *)a2 + 1);
        if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v69);
        goto LABEL_292;
      case 0x17u:
        *((void *)this + 27) |= 0x100000uLL;
        unint64_t v70 = *((void *)a2 + 1);
        if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v70);
        goto LABEL_292;
      case 0x18u:
        *((void *)this + 27) |= 0x80000uLL;
        unint64_t v71 = *((void *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v71);
        goto LABEL_292;
      case 0x19u:
        *((void *)this + 27) |= 0x40000000uLL;
        unint64_t v72 = *((void *)a2 + 1);
        if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v72);
        goto LABEL_292;
      case 0x1Au:
        *((void *)this + 27) |= 0x1000uLL;
        unint64_t v73 = *((void *)a2 + 1);
        unint64_t v74 = *((void *)a2 + 2);
        uint64_t v75 = *(void *)a2;
        if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
        {
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v78 = 0;
          do
          {
            unint64_t v79 = v73 + 1;
            *((void *)a2 + 1) = v73 + 1;
            char v80 = *(unsigned char *)(v75 + v73);
            v78 |= (unint64_t)(v80 & 0x7F) << v76;
            if ((v80 & 0x80) == 0) {
              goto LABEL_317;
            }
            v76 += 7;
            unint64_t v73 = v79;
            BOOL v14 = v77++ > 8;
          }
          while (!v14);
LABEL_248:
          LODWORD(v78) = 0;
          goto LABEL_317;
        }
        char v162 = 0;
        unsigned int v163 = 0;
        uint64_t v78 = 0;
        if (v74 <= v73) {
          unint64_t v74 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v74 == v73)
          {
            LODWORD(v78) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v164 = v73 + 1;
            char v165 = *(unsigned char *)(v75 + v73);
            *((void *)a2 + 1) = v164;
            v78 |= (unint64_t)(v165 & 0x7F) << v162;
            if (v165 < 0)
            {
              v162 += 7;
              unint64_t v73 = v164;
              BOOL v14 = v163++ > 8;
              if (v14) {
                goto LABEL_248;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v78) = 0;
            }
          }
          break;
        }
LABEL_317:
        *((_DWORD *)this + 17) = v78;
        goto LABEL_293;
      case 0x1Bu:
        *((void *)this + 27) |= 0x4000uLL;
        unint64_t v81 = *((void *)a2 + 1);
        unint64_t v82 = *((void *)a2 + 2);
        uint64_t v83 = *(void *)a2;
        if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
        {
          char v84 = 0;
          unsigned int v85 = 0;
          uint64_t v86 = 0;
          do
          {
            unint64_t v87 = v81 + 1;
            *((void *)a2 + 1) = v81 + 1;
            char v88 = *(unsigned char *)(v83 + v81);
            v86 |= (unint64_t)(v88 & 0x7F) << v84;
            if ((v88 & 0x80) == 0) {
              goto LABEL_321;
            }
            v84 += 7;
            unint64_t v81 = v87;
            BOOL v14 = v85++ > 8;
          }
          while (!v14);
LABEL_255:
          LODWORD(v86) = 0;
          goto LABEL_321;
        }
        char v166 = 0;
        unsigned int v167 = 0;
        uint64_t v86 = 0;
        if (v82 <= v81) {
          unint64_t v82 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v82 == v81)
          {
            LODWORD(v86) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v168 = v81 + 1;
            char v169 = *(unsigned char *)(v83 + v81);
            *((void *)a2 + 1) = v168;
            v86 |= (unint64_t)(v169 & 0x7F) << v166;
            if (v169 < 0)
            {
              v166 += 7;
              unint64_t v81 = v168;
              BOOL v14 = v167++ > 8;
              if (v14) {
                goto LABEL_255;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v86) = 0;
            }
          }
          break;
        }
LABEL_321:
        *((_DWORD *)this + 19) = v86;
        goto LABEL_293;
      case 0x1Cu:
        *((void *)this + 27) |= 0x100000000uLL;
        unint64_t v89 = *((void *)a2 + 1);
        unint64_t v90 = *((void *)a2 + 2);
        uint64_t v91 = *(void *)a2;
        if (v89 <= 0xFFFFFFFFFFFFFFF5 && v89 + 10 <= v90)
        {
          char v92 = 0;
          unsigned int v93 = 0;
          uint64_t v94 = 0;
          do
          {
            unint64_t v95 = v89 + 1;
            *((void *)a2 + 1) = v89 + 1;
            char v96 = *(unsigned char *)(v91 + v89);
            v94 |= (unint64_t)(v96 & 0x7F) << v92;
            if ((v96 & 0x80) == 0) {
              goto LABEL_325;
            }
            v92 += 7;
            unint64_t v89 = v95;
            BOOL v14 = v93++ > 8;
          }
          while (!v14);
LABEL_262:
          LODWORD(v94) = 0;
          goto LABEL_325;
        }
        char v170 = 0;
        unsigned int v171 = 0;
        uint64_t v94 = 0;
        if (v90 <= v89) {
          unint64_t v90 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v90 == v89)
          {
            LODWORD(v94) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v172 = v89 + 1;
            char v173 = *(unsigned char *)(v91 + v89);
            *((void *)a2 + 1) = v172;
            v94 |= (unint64_t)(v173 & 0x7F) << v170;
            if (v173 < 0)
            {
              v170 += 7;
              unint64_t v89 = v172;
              BOOL v14 = v171++ > 8;
              if (v14) {
                goto LABEL_262;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v94) = 0;
            }
          }
          break;
        }
LABEL_325:
        *((_DWORD *)this + 37) = v94;
        goto LABEL_293;
      case 0x1Du:
        *((void *)this + 27) |= 0x1000000000uLL;
        unint64_t v97 = *((void *)a2 + 1);
        unint64_t v98 = *((void *)a2 + 2);
        uint64_t v99 = *(void *)a2;
        if (v97 <= 0xFFFFFFFFFFFFFFF5 && v97 + 10 <= v98)
        {
          char v100 = 0;
          unsigned int v101 = 0;
          uint64_t v102 = 0;
          do
          {
            unint64_t v103 = v97 + 1;
            *((void *)a2 + 1) = v97 + 1;
            char v104 = *(unsigned char *)(v99 + v97);
            v102 |= (unint64_t)(v104 & 0x7F) << v100;
            if ((v104 & 0x80) == 0) {
              goto LABEL_329;
            }
            v100 += 7;
            unint64_t v97 = v103;
            BOOL v14 = v101++ > 8;
          }
          while (!v14);
LABEL_269:
          LODWORD(v102) = 0;
          goto LABEL_329;
        }
        char v174 = 0;
        unsigned int v175 = 0;
        uint64_t v102 = 0;
        if (v98 <= v97) {
          unint64_t v98 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v98 == v97)
          {
            LODWORD(v102) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v176 = v97 + 1;
            char v177 = *(unsigned char *)(v99 + v97);
            *((void *)a2 + 1) = v176;
            v102 |= (unint64_t)(v177 & 0x7F) << v174;
            if (v177 < 0)
            {
              v174 += 7;
              unint64_t v97 = v176;
              BOOL v14 = v175++ > 8;
              if (v14) {
                goto LABEL_269;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v102) = 0;
            }
          }
          break;
        }
LABEL_329:
        *((_DWORD *)this + 41) = v102;
        goto LABEL_293;
      case 0x1Eu:
        *((void *)this + 27) |= 0x100uLL;
        unint64_t v105 = *((void *)a2 + 1);
        unint64_t v106 = *((void *)a2 + 2);
        uint64_t v107 = *(void *)a2;
        if (v105 <= 0xFFFFFFFFFFFFFFF5 && v105 + 10 <= v106)
        {
          char v108 = 0;
          unsigned int v109 = 0;
          uint64_t v110 = 0;
          do
          {
            unint64_t v111 = v105 + 1;
            *((void *)a2 + 1) = v105 + 1;
            char v112 = *(unsigned char *)(v107 + v105);
            v110 |= (unint64_t)(v112 & 0x7F) << v108;
            if ((v112 & 0x80) == 0) {
              goto LABEL_333;
            }
            v108 += 7;
            unint64_t v105 = v111;
            BOOL v14 = v109++ > 8;
          }
          while (!v14);
LABEL_276:
          LODWORD(v110) = 0;
          goto LABEL_333;
        }
        char v178 = 0;
        unsigned int v179 = 0;
        uint64_t v110 = 0;
        if (v106 <= v105) {
          unint64_t v106 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v106 == v105)
          {
            LODWORD(v110) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v180 = v105 + 1;
            char v181 = *(unsigned char *)(v107 + v105);
            *((void *)a2 + 1) = v180;
            v110 |= (unint64_t)(v181 & 0x7F) << v178;
            if (v181 < 0)
            {
              v178 += 7;
              unint64_t v105 = v180;
              BOOL v14 = v179++ > 8;
              if (v14) {
                goto LABEL_276;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v110) = 0;
            }
          }
          break;
        }
LABEL_333:
        *((_DWORD *)this + 13) = v110;
        goto LABEL_293;
      case 0x1Fu:
        *((void *)this + 27) |= 0x200000000uLL;
        unint64_t v113 = *((void *)a2 + 1);
        if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v113);
        goto LABEL_292;
      case 0x20u:
        *((void *)this + 27) |= 0x800uLL;
        unint64_t v114 = *((void *)a2 + 1);
        if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v114);
        goto LABEL_292;
      case 0x21u:
        *((void *)this + 27) |= 0x400uLL;
        unint64_t v115 = *((void *)a2 + 1);
        if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v115);
        goto LABEL_292;
      case 0x22u:
        *((void *)this + 27) |= 0x200000uLL;
        unint64_t v116 = *((void *)a2 + 1);
        if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v116);
        goto LABEL_292;
      case 0x23u:
        *((void *)this + 27) |= 0x40000uLL;
        unint64_t v117 = *((void *)a2 + 1);
        if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v117);
        goto LABEL_292;
      case 0x24u:
        *((void *)this + 27) |= 0x20000000uLL;
        unint64_t v118 = *((void *)a2 + 1);
        if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v118);
        goto LABEL_292;
      case 0x25u:
        *((void *)this + 27) |= 0x800000000uLL;
        unint64_t v119 = *((void *)a2 + 1);
        if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 40) = *(_DWORD *)(*(void *)a2 + v119);
        goto LABEL_292;
      case 0x26u:
        *((void *)this + 27) |= 0x400000000uLL;
        unint64_t v120 = *((void *)a2 + 1);
        if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v120);
        goto LABEL_292;
      case 0x27u:
        *((void *)this + 27) |= 0x8000uLL;
        unint64_t v121 = *((void *)a2 + 1);
        unint64_t v122 = *((void *)a2 + 2);
        uint64_t v123 = *(void *)a2;
        if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
        {
          char v124 = 0;
          unsigned int v125 = 0;
          uint64_t v126 = 0;
          do
          {
            unint64_t v127 = v121 + 1;
            *((void *)a2 + 1) = v121 + 1;
            char v128 = *(unsigned char *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0) {
              goto LABEL_337;
            }
            v124 += 7;
            unint64_t v121 = v127;
            BOOL v14 = v125++ > 8;
          }
          while (!v14);
LABEL_283:
          LODWORD(v126) = 0;
          goto LABEL_337;
        }
        char v182 = 0;
        unsigned int v183 = 0;
        uint64_t v126 = 0;
        if (v122 <= v121) {
          unint64_t v122 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v122 == v121)
          {
            LODWORD(v126) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v184 = v121 + 1;
            char v185 = *(unsigned char *)(v123 + v121);
            *((void *)a2 + 1) = v184;
            v126 |= (unint64_t)(v185 & 0x7F) << v182;
            if (v185 < 0)
            {
              v182 += 7;
              unint64_t v121 = v184;
              BOOL v14 = v183++ > 8;
              if (v14) {
                goto LABEL_283;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v126) = 0;
            }
          }
          break;
        }
LABEL_337:
        *((_DWORD *)this + 20) = v126;
        goto LABEL_293;
      case 0x28u:
        *((void *)this + 27) |= 0x10000000uLL;
        unint64_t v129 = *((void *)a2 + 1);
        if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v129);
        goto LABEL_292;
      case 0x29u:
        *((void *)this + 27) |= 0x4000000uLL;
        unint64_t v130 = *((void *)a2 + 1);
        if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v130);
        goto LABEL_292;
      case 0x2Au:
        *((void *)this + 27) |= 0x8000000uLL;
        unint64_t v131 = *((void *)a2 + 1);
        if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v131);
        goto LABEL_292;
      case 0x2Bu:
        *((void *)this + 27) |= 0x20uLL;
        unint64_t v132 = *((void *)a2 + 1);
        if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v132);
        goto LABEL_292;
      case 0x2Cu:
        *((void *)this + 27) |= 0x1000000uLL;
        unint64_t v133 = *((void *)a2 + 1);
        if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v133);
        goto LABEL_292;
      case 0x2Du:
        *((void *)this + 27) |= 0x2000000uLL;
        unint64_t v134 = *((void *)a2 + 1);
        unint64_t v135 = *((void *)a2 + 2);
        uint64_t v136 = *(void *)a2;
        if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
        {
          char v137 = 0;
          unsigned int v138 = 0;
          uint64_t v139 = 0;
          do
          {
            unint64_t v140 = v134 + 1;
            *((void *)a2 + 1) = v134 + 1;
            char v141 = *(unsigned char *)(v136 + v134);
            v139 |= (unint64_t)(v141 & 0x7F) << v137;
            if ((v141 & 0x80) == 0) {
              goto LABEL_341;
            }
            v137 += 7;
            unint64_t v134 = v140;
            BOOL v14 = v138++ > 8;
          }
          while (!v14);
LABEL_290:
          LODWORD(v139) = 0;
          goto LABEL_341;
        }
        char v186 = 0;
        unsigned int v187 = 0;
        uint64_t v139 = 0;
        if (v135 <= v134) {
          unint64_t v135 = *((void *)a2 + 1);
        }
        break;
      case 0x2Eu:
        *((void *)this + 27) |= 0x2000uLL;
        unint64_t v142 = *((void *)a2 + 1);
        if (v142 > 0xFFFFFFFFFFFFFFFBLL || v142 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v142);
        goto LABEL_292;
      case 0x2Fu:
        *((void *)this + 27) |= 0x200uLL;
        unint64_t v143 = *((void *)a2 + 1);
        if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v143);
        goto LABEL_292;
      case 0x30u:
        *((void *)this + 27) |= 0x400000uLL;
        unint64_t v144 = *((void *)a2 + 1);
        if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((void *)a2 + 2)) {
          goto LABEL_213;
        }
        *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v144);
        goto LABEL_292;
      case 0x31u:
        *((void *)this + 27) |= 8uLL;
        unint64_t v145 = *((void *)a2 + 1);
        if (v145 <= 0xFFFFFFFFFFFFFFFBLL && v145 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v145);
LABEL_292:
          *((void *)a2 + 1) += 4;
        }
        else
        {
LABEL_213:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_293;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v135 == v134)
      {
        LODWORD(v139) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_341;
      }
      unint64_t v188 = v134 + 1;
      char v189 = *(unsigned char *)(v136 + v134);
      *((void *)a2 + 1) = v188;
      v139 |= (unint64_t)(v189 & 0x7F) << v186;
      if ((v189 & 0x80) == 0) {
        break;
      }
      v186 += 7;
      unint64_t v134 = v188;
      BOOL v14 = v187++ > 8;
      if (v14) {
        goto LABEL_290;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v139) = 0;
    }
LABEL_341:
    *((_DWORD *)this + 30) = v139;
LABEL_293:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_293;
  }
  return result;
}

uint64_t CMMsl::FallStats::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 216);
  if ((v4 & 0x80000000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    uint64_t v4 = *(void *)(v3 + 216);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_53;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 176));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 172));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 192));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 188));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 208));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 204));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 180));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 196));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 212));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 168));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 184));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_18:
    if ((v4 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 200));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x100) == 0) {
      goto LABEL_31;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_31:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800) == 0) {
      goto LABEL_33;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 152));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_33:
    if ((v4 & 0x400) == 0) {
      goto LABEL_34;
    }
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 160));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0) {
      goto LABEL_44;
    }
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v4 & 0x200) == 0) {
      goto LABEL_48;
    }
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_48:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_49;
    }
LABEL_98:
    this = PB::Writer::write(a2, *(float *)(v3 + 108));
    if ((*(void *)(v3 + 216) & 8) == 0) {
      return this;
    }
    goto LABEL_99;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000) != 0) {
    goto LABEL_98;
  }
LABEL_49:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_99:
  float v5 = *(float *)(v3 + 32);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::FallStats::hash_value(CMMsl::FallStats *this)
{
  uint64_t v1 = *((void *)this + 27);
  if ((v1 & 0x80000000) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 36);
    if (v1)
    {
LABEL_3:
      uint64_t v108 = *((void *)this + 1);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_131;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if (v1) {
      goto LABEL_3;
    }
  }
  uint64_t v108 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    uint64_t v107 = *((void *)this + 2);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_5;
    }
LABEL_132:
    uint64_t v106 = 0;
    if ((v1 & 0x8000000000) != 0) {
      goto LABEL_8;
    }
LABEL_133:
    uint64_t v105 = 0;
    if ((v1 & 0x4000000000) != 0) {
      goto LABEL_11;
    }
LABEL_134:
    uint64_t v104 = 0;
    if ((v1 & 0x80000000000) != 0) {
      goto LABEL_14;
    }
LABEL_135:
    uint64_t v103 = 0;
    if ((v1 & 0x40000000000) != 0) {
      goto LABEL_17;
    }
LABEL_136:
    uint64_t v102 = 0;
    if ((v1 & 0x800000000000) != 0) {
      goto LABEL_20;
    }
LABEL_137:
    uint64_t v101 = 0;
    if ((v1 & 0x400000000000) != 0) {
      goto LABEL_23;
    }
LABEL_138:
    uint64_t v100 = 0;
    if ((v1 & 0x10000000000) != 0) {
      goto LABEL_26;
    }
LABEL_139:
    uint64_t v99 = 0;
    if ((v1 & 0x100000000000) != 0) {
      goto LABEL_29;
    }
LABEL_140:
    uint64_t v98 = 0;
    if ((v1 & 0x1000000000000) != 0) {
      goto LABEL_32;
    }
LABEL_141:
    uint64_t v97 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_35;
    }
LABEL_142:
    uint64_t v96 = 0;
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_38;
    }
LABEL_143:
    uint64_t v95 = 0;
    if ((v1 & 0x20000000000) != 0) {
      goto LABEL_41;
    }
LABEL_144:
    uint64_t v94 = 0;
    if ((v1 & 0x200000000000) != 0) {
      goto LABEL_44;
    }
LABEL_145:
    uint64_t v93 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_47;
    }
    goto LABEL_146;
  }
LABEL_131:
  uint64_t v107 = 0;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_132;
  }
LABEL_5:
  float v3 = *((float *)this + 22);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v106 = v4;
  if ((v1 & 0x8000000000) == 0) {
    goto LABEL_133;
  }
LABEL_8:
  float v5 = *((float *)this + 44);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v105 = v6;
  if ((v1 & 0x4000000000) == 0) {
    goto LABEL_134;
  }
LABEL_11:
  float v7 = *((float *)this + 43);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v104 = v8;
  if ((v1 & 0x80000000000) == 0) {
    goto LABEL_135;
  }
LABEL_14:
  float v9 = *((float *)this + 48);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v103 = v10;
  if ((v1 & 0x40000000000) == 0) {
    goto LABEL_136;
  }
LABEL_17:
  float v11 = *((float *)this + 47);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v102 = v12;
  if ((v1 & 0x800000000000) == 0) {
    goto LABEL_137;
  }
LABEL_20:
  float v13 = *((float *)this + 52);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v101 = v14;
  if ((v1 & 0x400000000000) == 0) {
    goto LABEL_138;
  }
LABEL_23:
  float v15 = *((float *)this + 51);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v100 = v16;
  if ((v1 & 0x10000000000) == 0) {
    goto LABEL_139;
  }
LABEL_26:
  float v17 = *((float *)this + 45);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  uint64_t v99 = v18;
  if ((v1 & 0x100000000000) == 0) {
    goto LABEL_140;
  }
LABEL_29:
  float v19 = *((float *)this + 49);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  uint64_t v98 = v20;
  if ((v1 & 0x1000000000000) == 0) {
    goto LABEL_141;
  }
LABEL_32:
  float v21 = *((float *)this + 53);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  uint64_t v97 = v22;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_142;
  }
LABEL_35:
  float v23 = *((float *)this + 21);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  uint64_t v96 = v24;
  if ((v1 & 0x2000000000) == 0) {
    goto LABEL_143;
  }
LABEL_38:
  float v25 = *((float *)this + 42);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  uint64_t v95 = v26;
  if ((v1 & 0x20000000000) == 0) {
    goto LABEL_144;
  }
LABEL_41:
  float v27 = *((float *)this + 46);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  uint64_t v94 = v28;
  if ((v1 & 0x200000000000) == 0) {
    goto LABEL_145;
  }
LABEL_44:
  float v29 = *((float *)this + 50);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  uint64_t v93 = v30;
  if ((v1 & 4) != 0)
  {
LABEL_47:
    uint64_t v92 = *((void *)this + 3);
    if ((v1 & 0x10) != 0) {
      goto LABEL_48;
    }
LABEL_147:
    uint64_t v91 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_51;
    }
LABEL_148:
    uint64_t v90 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_54;
    }
LABEL_149:
    uint64_t v89 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_57;
    }
LABEL_150:
    uint64_t v88 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_60;
    }
LABEL_151:
    uint64_t v87 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_63;
    }
LABEL_152:
    uint64_t v42 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_67;
    }
LABEL_153:
    uint64_t v44 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_71;
    }
    goto LABEL_154;
  }
LABEL_146:
  uint64_t v92 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_147;
  }
LABEL_48:
  float v31 = *((float *)this + 9);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  uint64_t v91 = v32;
  if ((v1 & 0x800000) == 0) {
    goto LABEL_148;
  }
LABEL_51:
  float v33 = *((float *)this + 28);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  uint64_t v90 = v34;
  if ((v1 & 0x80) == 0) {
    goto LABEL_149;
  }
LABEL_54:
  float v35 = *((float *)this + 12);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  uint64_t v89 = v36;
  if ((v1 & 0x40) == 0) {
    goto LABEL_150;
  }
LABEL_57:
  float v37 = *((float *)this + 11);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  uint64_t v88 = v38;
  if ((v1 & 0x100000) == 0) {
    goto LABEL_151;
  }
LABEL_60:
  float v39 = *((float *)this + 25);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  uint64_t v87 = v40;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_152;
  }
LABEL_63:
  float v41 = *((float *)this + 24);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = LODWORD(v41);
  }
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_153;
  }
LABEL_67:
  float v43 = *((float *)this + 35);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = LODWORD(v43);
  }
  if ((v1 & 0x1000) != 0)
  {
LABEL_71:
    uint64_t v45 = *((int *)this + 17);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_72;
    }
    goto LABEL_155;
  }
LABEL_154:
  uint64_t v45 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_72:
    uint64_t v46 = *((unsigned int *)this + 19);
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_73;
    }
    goto LABEL_156;
  }
LABEL_155:
  uint64_t v46 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_73:
    uint64_t v47 = *((unsigned int *)this + 37);
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_74;
    }
    goto LABEL_157;
  }
LABEL_156:
  uint64_t v47 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_74:
    uint64_t v48 = *((unsigned int *)this + 41);
    if ((v1 & 0x100) != 0) {
      goto LABEL_75;
    }
    goto LABEL_158;
  }
LABEL_157:
  uint64_t v48 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_75:
    uint64_t v49 = *((int *)this + 13);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_76;
    }
LABEL_159:
    uint64_t v51 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_79;
    }
LABEL_160:
    uint64_t v53 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_82;
    }
LABEL_161:
    uint64_t v55 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_85;
    }
LABEL_162:
    uint64_t v57 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_88;
    }
LABEL_163:
    uint64_t v59 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_91;
    }
LABEL_164:
    uint64_t v61 = 0;
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_94;
    }
LABEL_165:
    uint64_t v63 = 0;
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_97;
    }
LABEL_166:
    uint64_t v65 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_100;
    }
    goto LABEL_167;
  }
LABEL_158:
  uint64_t v49 = 0;
  if ((v1 & 0x200000000) == 0) {
    goto LABEL_159;
  }
LABEL_76:
  float v50 = *((float *)this + 38);
  uint64_t v51 = LODWORD(v50);
  if (v50 == 0.0) {
    uint64_t v51 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_160;
  }
LABEL_79:
  float v52 = *((float *)this + 16);
  uint64_t v53 = LODWORD(v52);
  if (v52 == 0.0) {
    uint64_t v53 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_161;
  }
LABEL_82:
  float v54 = *((float *)this + 15);
  uint64_t v55 = LODWORD(v54);
  if (v54 == 0.0) {
    uint64_t v55 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_162;
  }
LABEL_85:
  float v56 = *((float *)this + 26);
  uint64_t v57 = LODWORD(v56);
  if (v56 == 0.0) {
    uint64_t v57 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_163;
  }
LABEL_88:
  float v58 = *((float *)this + 23);
  uint64_t v59 = LODWORD(v58);
  if (v58 == 0.0) {
    uint64_t v59 = 0;
  }
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_164;
  }
LABEL_91:
  float v60 = *((float *)this + 34);
  uint64_t v61 = LODWORD(v60);
  if (v60 == 0.0) {
    uint64_t v61 = 0;
  }
  if ((v1 & 0x800000000) == 0) {
    goto LABEL_165;
  }
LABEL_94:
  float v62 = *((float *)this + 40);
  uint64_t v63 = LODWORD(v62);
  if (v62 == 0.0) {
    uint64_t v63 = 0;
  }
  if ((v1 & 0x400000000) == 0) {
    goto LABEL_166;
  }
LABEL_97:
  float v64 = *((float *)this + 39);
  uint64_t v65 = LODWORD(v64);
  if (v64 == 0.0) {
    uint64_t v65 = 0;
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_100:
    uint64_t v66 = *((unsigned int *)this + 20);
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_101;
    }
LABEL_168:
    uint64_t v68 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_104;
    }
LABEL_169:
    uint64_t v70 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_107;
    }
LABEL_170:
    uint64_t v72 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_110;
    }
LABEL_171:
    uint64_t v74 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_113;
    }
LABEL_172:
    uint64_t v76 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_116;
    }
    goto LABEL_173;
  }
LABEL_167:
  uint64_t v66 = 0;
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_168;
  }
LABEL_101:
  float v67 = *((float *)this + 33);
  uint64_t v68 = LODWORD(v67);
  if (v67 == 0.0) {
    uint64_t v68 = 0;
  }
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_169;
  }
LABEL_104:
  float v69 = *((float *)this + 31);
  uint64_t v70 = LODWORD(v69);
  if (v69 == 0.0) {
    uint64_t v70 = 0;
  }
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_170;
  }
LABEL_107:
  float v71 = *((float *)this + 32);
  uint64_t v72 = LODWORD(v71);
  if (v71 == 0.0) {
    uint64_t v72 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_171;
  }
LABEL_110:
  float v73 = *((float *)this + 10);
  uint64_t v74 = LODWORD(v73);
  if (v73 == 0.0) {
    uint64_t v74 = 0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_172;
  }
LABEL_113:
  float v75 = *((float *)this + 29);
  uint64_t v76 = LODWORD(v75);
  if (v75 == 0.0) {
    uint64_t v76 = 0;
  }
  if ((v1 & 0x2000000) != 0)
  {
LABEL_116:
    uint64_t v77 = *((int *)this + 30);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_117;
    }
LABEL_174:
    uint64_t v79 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_120;
    }
LABEL_175:
    uint64_t v81 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_123;
    }
    goto LABEL_176;
  }
LABEL_173:
  uint64_t v77 = 0;
  if ((v1 & 0x2000) == 0) {
    goto LABEL_174;
  }
LABEL_117:
  float v78 = *((float *)this + 18);
  uint64_t v79 = LODWORD(v78);
  if (v78 == 0.0) {
    uint64_t v79 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_175;
  }
LABEL_120:
  float v80 = *((float *)this + 14);
  uint64_t v81 = LODWORD(v80);
  if (v80 == 0.0) {
    uint64_t v81 = 0;
  }
  if ((v1 & 0x400000) != 0)
  {
LABEL_123:
    float v82 = *((float *)this + 27);
    uint64_t v83 = LODWORD(v82);
    if (v82 == 0.0) {
      uint64_t v83 = 0;
    }
    if ((v1 & 8) != 0) {
      goto LABEL_126;
    }
LABEL_177:
    uint64_t v85 = 0;
    return v108 ^ v2 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v42 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v51 ^ v53 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63 ^ v65 ^ v66 ^ v68 ^ v70 ^ v72 ^ v74 ^ v76 ^ v77 ^ v79 ^ v81 ^ v83 ^ v85;
  }
LABEL_176:
  uint64_t v83 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_177;
  }
LABEL_126:
  float v84 = *((float *)this + 8);
  uint64_t v85 = LODWORD(v84);
  if (v84 == 0.0) {
    uint64_t v85 = 0;
  }
  return v108 ^ v2 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v42 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v51 ^ v53 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63 ^ v65 ^ v66 ^ v68 ^ v70 ^ v72 ^ v74 ^ v76 ^ v77 ^ v79 ^ v81 ^ v83 ^ v85;
}

void CMMsl::FirstStepFeatures::~FirstStepFeatures(CMMsl::FirstStepFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::FirstStepFeatures::FirstStepFeatures(uint64_t this, const CMMsl::FirstStepFeatures *a2)
{
  *(void *)this = &unk_270641918;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 44) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *((void *)a2 + 4);
    v3 |= 8u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 32) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 10);
      *(unsigned char *)(this + 44) = v3 | 0x10;
      *(_DWORD *)(this + 40) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 44) = v3;
  *(void *)(this + 8) = v7;
  if ((*((unsigned char *)a2 + 44) & 0x10) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::FirstStepFeatures::operator=(uint64_t a1, const CMMsl::FirstStepFeatures *a2)
{
  if ((const CMMsl::FirstStepFeatures *)a1 != a2)
  {
    CMMsl::FirstStepFeatures::FirstStepFeatures((uint64_t)&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v9;
    uint64_t v9 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FirstStepFeatures *a2, CMMsl::FirstStepFeatures *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  return result;
}

double CMMsl::FirstStepFeatures::FirstStepFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641918;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270641918;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::FirstStepFeatures::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_270641918;
    uint64_t v3 = *(void *)(a2 + 40);
    *(_DWORD *)(a2 + 44) = 0;
    long long v9 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v3;
    uint64_t v10 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::FirstStepFeatures::formatText(CMMsl::FirstStepFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "aggAccelZDelta", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "arcLength", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "curveDistance", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "firstLoftAngleDeg", *((double *)this + 4));
  if ((*((unsigned char *)this + 44) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "stepResult");
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FirstStepFeatures::readFrom(CMMsl::FirstStepFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_56;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_50;
      case 2u:
        *((unsigned char *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_50;
      case 3u:
        *((unsigned char *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_50;
      case 4u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_50:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((unsigned char *)this + 44) |= 0x10u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_55;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_54:
              unint64_t v2 = v28 + 1;
              goto LABEL_55;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_54;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_55;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_55:
        *((_DWORD *)this + 10) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_56:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FirstStepFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 44) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 44);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::FirstStepFeatures::hash_value(CMMsl::FirstStepFeatures *this)
{
  if ((*((unsigned char *)this + 44) & 2) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    double v3 = 0.0;
    if (*((unsigned char *)this + 44)) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 2);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  double v3 = *((double *)this + 4);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if (*((unsigned char *)this + 44))
  {
LABEL_9:
    double v4 = *((double *)this + 1);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v5 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ v5;
  }
LABEL_18:
  double v4 = 0.0;
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v5 = *((int *)this + 10);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ v5;
}

uint64_t CMMsl::FitnessMachineData::FitnessMachineData(uint64_t this)
{
  *(void *)this = &unk_270641950;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

{
  *(void *)this = &unk_270641950;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

void CMMsl::FitnessMachineData::~FitnessMachineData(CMMsl::FitnessMachineData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::FitnessMachineData::FitnessMachineData(CMMsl::FitnessMachineData *this, const CMMsl::FitnessMachineData *a2)
{
  *(void *)this = &unk_270641950;
  *((_DWORD *)this + 44) = 0;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    int v3 = 8;
    *((_DWORD *)this + 44) = 8;
    *((double *)this + 4) = result;
    int v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 5) = result;
    int v2 = *((_DWORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    double result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 6) = result;
    int v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  double result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  double result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  double result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x10000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v5 = *((void *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 44) = v3;
  *((void *)this + 17) = v5;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v6 = *((void *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 44) = v3;
  *((void *)this + 18) = v6;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v7 = *((void *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 44) = v3;
  *((void *)this + 19) = v7;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v8 = *((_DWORD *)a2 + 42);
  v3 |= 0x100000u;
  *((_DWORD *)this + 44) = v3;
  *((_DWORD *)this + 42) = v8;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  double result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 11) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }
LABEL_40:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 2) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }
LABEL_41:
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 3) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x200000) == 0)
  {
LABEL_22:
    if ((v2 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }
LABEL_42:
  v3 |= 0x200000u;
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)this + 44) = v3;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_23:
    if ((v2 & 0x200) == 0) {
      goto LABEL_24;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_24:
    if ((v2 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_45;
  }
LABEL_44:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_25:
    if ((v2 & 0x800) == 0) {
      return result;
    }
LABEL_46:
    double result = *((double *)a2 + 12);
    *((_DWORD *)this + 44) = v3 | 0x800;
    *((double *)this + 12) = result;
    return result;
  }
LABEL_45:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 1) = result;
  if ((*((_DWORD *)a2 + 44) & 0x800) != 0) {
    goto LABEL_46;
  }
  return result;
}

CMMsl *CMMsl::FitnessMachineData::operator=(CMMsl *a1, const CMMsl::FitnessMachineData *a2)
{
  if (a1 != a2)
  {
    CMMsl::FitnessMachineData::FitnessMachineData((CMMsl::FitnessMachineData *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FitnessMachineData *a2, CMMsl::FitnessMachineData *a3)
{
  int v3 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v8;
  uint64_t v9 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v9;
  uint64_t v10 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v10;
  uint64_t v11 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v11;
  uint64_t v12 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v12;
  uint64_t v13 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v13;
  uint64_t v14 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v14;
  uint64_t v15 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v15;
  uint64_t v16 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v16;
  LODWORD(v15) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v15;
  uint64_t v17 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v17;
  uint64_t v18 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v18;
  uint64_t v19 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v19;
  LODWORD(v15) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v15;
  uint64_t v20 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v20;
  uint64_t v21 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v21;
  uint64_t v22 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v22;
  double result = *((double *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((double *)a2 + 12) = result;
  return result;
}

double CMMsl::FitnessMachineData::FitnessMachineData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641950;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 96);
  *(double *)(a1 + 96) = result;
  return result;
}

CMMsl *CMMsl::FitnessMachineData::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FitnessMachineData::FitnessMachineData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FitnessMachineData::formatText(CMMsl::FitnessMachineData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "cadenceDeviceIdentification", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cadenceUpdateTime", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "elapsedTime", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "externalMachineType");
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "inclination", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "instantaneousCadence", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "instantaneousPower", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "instantaneousSpeed", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "powerMeterIdentification");
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "powerUpdateTime", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "resistanceLevel", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "speedDeviceIdentification", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "speedUpdateTime", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "totalDistance", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "totalElevationAscended", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "totalEnergy", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "totalFloorsClimbed");
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "totalStrideCount");
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "totalStrokeCount");
  if ((*((_DWORD *)this + 44) & 0x80000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(a2, "verticalSpeed", *((double *)this + 20));
LABEL_24:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FitnessMachineData::readFrom(CMMsl::FitnessMachineData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_146;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 2u:
        *((_DWORD *)this + 44) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 3u:
        *((_DWORD *)this + 44) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 4u:
        *((_DWORD *)this + 44) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 5u:
        *((_DWORD *)this + 44) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 6u:
        *((_DWORD *)this + 44) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 7u:
        *((_DWORD *)this + 44) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 8u:
        *((_DWORD *)this + 44) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 9u:
        *((_DWORD *)this + 44) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 0xAu:
        *((_DWORD *)this + 44) |= 0x10000u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_155;
            }
            unint64_t v52 = v20++;
            char v53 = *(unsigned char *)(v21 + v52);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0) {
              break;
            }
            v50 += 7;
            BOOL v14 = v51++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_154:
              unint64_t v2 = v52 + 1;
              goto LABEL_155;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_154;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_155;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_155:
        *((void *)this + 17) = v24;
        break;
      case 0xBu:
        *((_DWORD *)this + 44) |= 0x20000u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_160;
            }
            unint64_t v56 = v26++;
            char v57 = *(unsigned char *)(v27 + v56);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0) {
              break;
            }
            v54 += 7;
            BOOL v14 = v55++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
LABEL_159:
              unint64_t v2 = v56 + 1;
              goto LABEL_160;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v30 = 0;
          }
          goto LABEL_159;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_160;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        uint64_t v30 = 0;
LABEL_160:
        *((void *)this + 18) = v30;
        break;
      case 0xCu:
        *((_DWORD *)this + 44) |= 0x40000u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              uint64_t v36 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_165;
            }
            unint64_t v60 = v32++;
            char v61 = *(unsigned char *)(v33 + v60);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0) {
              break;
            }
            v58 += 7;
            BOOL v14 = v59++ > 8;
            if (v14)
            {
              uint64_t v36 = 0;
LABEL_164:
              unint64_t v2 = v60 + 1;
              goto LABEL_165;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v36 = 0;
          }
          goto LABEL_164;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_165;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        uint64_t v36 = 0;
LABEL_165:
        *((void *)this + 19) = v36;
        break;
      case 0xDu:
        *((_DWORD *)this + 44) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 0xEu:
        *((_DWORD *)this + 44) |= 0x100000u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_170;
            }
            unint64_t v64 = v38++;
            char v65 = *(unsigned char *)(v39 + v64);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0) {
              break;
            }
            v62 += 7;
            BOOL v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_169:
              unint64_t v2 = v64 + 1;
              goto LABEL_170;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_169;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_170;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_170:
        *((_DWORD *)this + 42) = v42;
        break;
      case 0xFu:
        *((_DWORD *)this + 44) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 0x10u:
        *((_DWORD *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 0x11u:
        *((_DWORD *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 0x12u:
        *((_DWORD *)this + 44) |= 0x200000u;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v45 = *(void *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v48 = 0;
          if (v2 <= v44) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_175;
            }
            unint64_t v68 = v44++;
            char v69 = *(unsigned char *)(v45 + v68);
            *((void *)a2 + 1) = v44;
            v48 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0) {
              break;
            }
            v66 += 7;
            BOOL v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_174:
              unint64_t v2 = v68 + 1;
              goto LABEL_175;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v48) = 0;
          }
          goto LABEL_174;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        do
        {
          unint64_t v2 = v44 + 1;
          *((void *)a2 + 1) = v44 + 1;
          char v49 = *(unsigned char *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0) {
            goto LABEL_175;
          }
          v46 += 7;
          unint64_t v44 = v2;
          BOOL v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_175:
        *((_DWORD *)this + 43) = v48;
        break;
      case 0x13u:
        *((_DWORD *)this + 44) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 0x14u:
        *((_DWORD *)this + 44) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 0x15u:
        *((_DWORD *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_108;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 0x16u:
        *((_DWORD *)this + 44) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
LABEL_145:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_108:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_146:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FitnessMachineData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 176);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    int v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200000) == 0)
  {
LABEL_19:
    if ((v4 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_20:
    if ((v4 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_21:
    if ((v4 & 1) == 0) {
      goto LABEL_22;
    }
LABEL_44:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(_DWORD *)(v3 + 176) & 0x800) == 0) {
      return this;
    }
    goto LABEL_45;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 176);
  if (v4) {
    goto LABEL_44;
  }
LABEL_22:
  if ((v4 & 0x800) == 0) {
    return this;
  }
LABEL_45:
  double v5 = *(double *)(v3 + 96);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::FitnessMachineData::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 176);
  int v3 = *(_DWORD *)(a2 + 176);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(void *)(a1 + 136) != *(void *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(void *)(a1 + 144) != *(void *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(void *)(a1 + 152) != *(void *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 176) & 0x800) == 0;
  if ((v2 & 0x800) != 0) {
    return (v3 & 0x800) != 0 && *(double *)(a1 + 96) == *(double *)(a2 + 96);
  }
  return v4;
}

uint64_t CMMsl::FitnessMachineData::hash_value(CMMsl::FitnessMachineData *this)
{
  int v1 = *((_DWORD *)this + 44);
  if ((v1 & 8) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_59:
    double v3 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_60:
    double v4 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_9;
    }
LABEL_61:
    double v5 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_12;
    }
LABEL_62:
    double v6 = 0.0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_15;
    }
LABEL_63:
    double v7 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_18;
    }
LABEL_64:
    double v8 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_21;
    }
LABEL_65:
    double v9 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_24;
    }
LABEL_66:
    double v10 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_59;
  }
LABEL_3:
  double v3 = *((double *)this + 5);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_60;
  }
LABEL_6:
  double v4 = *((double *)this + 6);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_61;
  }
LABEL_9:
  double v5 = *((double *)this + 7);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_62;
  }
LABEL_12:
  double v6 = *((double *)this + 9);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_63;
  }
LABEL_15:
  double v7 = *((double *)this + 13);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_64;
  }
LABEL_18:
  double v8 = *((double *)this + 15);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_65;
  }
LABEL_21:
  double v9 = *((double *)this + 16);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_66;
  }
LABEL_24:
  double v10 = *((double *)this + 14);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_27:
    uint64_t v11 = *((void *)this + 17);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v11 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_28:
    uint64_t v12 = *((void *)this + 18);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_29;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v12 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_29:
    uint64_t v13 = *((void *)this + 19);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_30;
    }
LABEL_70:
    double v14 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }
LABEL_69:
  uint64_t v13 = 0;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_70;
  }
LABEL_30:
  double v14 = *((double *)this + 20);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x100000) != 0)
  {
LABEL_33:
    uint64_t v15 = *((unsigned int *)this + 42);
    if ((v1 & 0x400) != 0) {
      goto LABEL_34;
    }
LABEL_72:
    double v16 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_37;
    }
LABEL_73:
    double v17 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_40;
    }
LABEL_74:
    double v18 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_75;
  }
LABEL_71:
  uint64_t v15 = 0;
  if ((v1 & 0x400) == 0) {
    goto LABEL_72;
  }
LABEL_34:
  double v16 = *((double *)this + 11);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_73;
  }
LABEL_37:
  double v17 = *((double *)this + 2);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_74;
  }
LABEL_40:
  double v18 = *((double *)this + 3);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v1 & 0x200000) != 0)
  {
LABEL_43:
    uint64_t v19 = *((int *)this + 43);
    if ((v1 & 0x80) != 0) {
      goto LABEL_44;
    }
LABEL_76:
    double v20 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_47;
    }
LABEL_77:
    double v21 = 0.0;
    if (v1) {
      goto LABEL_50;
    }
    goto LABEL_78;
  }
LABEL_75:
  uint64_t v19 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_76;
  }
LABEL_44:
  double v20 = *((double *)this + 8);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_77;
  }
LABEL_47:
  double v21 = *((double *)this + 10);
  if (v21 == 0.0) {
    double v21 = 0.0;
  }
  if (v1)
  {
LABEL_50:
    double v22 = *((double *)this + 1);
    if (v22 == 0.0) {
      double v22 = 0.0;
    }
    if ((v1 & 0x800) != 0) {
      goto LABEL_53;
    }
LABEL_79:
    double v23 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13 ^ *(void *)&v14 ^ v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23;
  }
LABEL_78:
  double v22 = 0.0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_79;
  }
LABEL_53:
  double v23 = *((double *)this + 12);
  if (v23 == 0.0) {
    double v23 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13 ^ *(void *)&v14 ^ v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23;
}

uint64_t CMMsl::FitnessMachineSample::FitnessMachineSample(uint64_t this)
{
  *(void *)this = &unk_270641988;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

{
  *(void *)this = &unk_270641988;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

void CMMsl::FitnessMachineSample::~FitnessMachineSample(CMMsl::FitnessMachineSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::FitnessMachineSample::FitnessMachineSample(CMMsl::FitnessMachineSample *this, const CMMsl::FitnessMachineSample *a2)
{
  *(void *)this = &unk_270641988;
  *((_DWORD *)this + 28) = 0;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    int v3 = 4;
    *((_DWORD *)this + 28) = 4;
    *((void *)this + 3) = v4;
    int v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 28) = v3;
    *((void *)this + 2) = v4;
    int v2 = *((_DWORD *)a2 + 28);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    v3 |= 1u;
    *((_DWORD *)this + 28) = v3;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x400000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x400u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 15) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x400000) == 0)
  {
LABEL_9:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 27) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x2000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 13) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v5 = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 16) = v5;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v6 = *((_DWORD *)a2 + 25);
  v3 |= 0x100000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 25) = v6;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x200000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 26) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x40000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 23) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x80) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 12) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x10000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 21) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 10) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 14) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x1000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x80000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 24) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x20000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 22) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 11) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x4000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 19) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 8) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x8000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 20) = v4;
  if ((*((_DWORD *)a2 + 28) & 0x10) == 0) {
    return *(float *)&v4;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_DWORD *)this + 28) = v3 | 0x10;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::FitnessMachineSample::operator=(CMMsl *a1, const CMMsl::FitnessMachineSample *a2)
{
  if (a1 != a2)
  {
    CMMsl::FitnessMachineSample::FitnessMachineSample((CMMsl::FitnessMachineSample *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FitnessMachineSample *a2, CMMsl::FitnessMachineSample *a3)
{
  int v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  LODWORD(v6) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  LODWORD(v6) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  int v7 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  int v8 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v8;
  LODWORD(v6) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v6;
  LODWORD(v6) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v6;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v6) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  LODWORD(v6) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  LODWORD(v6) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  LODWORD(v6) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v6;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::FitnessMachineSample::FitnessMachineSample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641988;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

CMMsl *CMMsl::FitnessMachineSample::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FitnessMachineSample::FitnessMachineSample((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FitnessMachineSample::formatText(CMMsl::FitnessMachineSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "averageCadence", *((float *)this + 8));
    int v5 = *((_DWORD *)this + 28);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "averageHeartRate", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "averagePace", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "averagePower", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "averageSpeed", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "crossTrainerDistance", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "elapsedTime", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "elevationGain", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "energy", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "floors");
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "inclination", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "indoorBikeDistance", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "instantaneousCadence", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "instantaneousHeartRate", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "instantaneousPace", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "instantaneousPower", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "instantaneousSpeed", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "resistanceLevel", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "stepCount");
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "strideCount", *((float *)this + 26));
  if ((*((_DWORD *)this + 28) & 0x400000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(a2, "treadmillDistance", *((float *)this + 27));
LABEL_25:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FitnessMachineSample::readFrom(CMMsl::FitnessMachineSample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_118;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_32;
      case 2u:
        *((_DWORD *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((_DWORD *)this + 28) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_32:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_117;
      case 4u:
        *((_DWORD *)this + 28) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 5u:
        *((_DWORD *)this + 28) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 6u:
        *((_DWORD *)this + 28) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 7u:
        *((_DWORD *)this + 28) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 8u:
        *((_DWORD *)this + 28) |= 0x800u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_127;
            }
            unint64_t v34 = v20++;
            char v35 = *(unsigned char *)(v21 + v34);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_126:
              unint64_t v2 = v34 + 1;
              goto LABEL_127;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_126;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_127;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_127:
        *((_DWORD *)this + 16) = v24;
        break;
      case 9u:
        *((_DWORD *)this + 28) |= 0x100000u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_132;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_131:
              unint64_t v2 = v38 + 1;
              goto LABEL_132;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_131;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_132;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_132:
        *((_DWORD *)this + 25) = v30;
        break;
      case 0xAu:
        *((_DWORD *)this + 28) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0xBu:
        *((_DWORD *)this + 28) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0xCu:
        *((_DWORD *)this + 28) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0xDu:
        *((_DWORD *)this + 28) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0xEu:
        *((_DWORD *)this + 28) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0xFu:
        *((_DWORD *)this + 28) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0x10u:
        *((_DWORD *)this + 28) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0x11u:
        *((_DWORD *)this + 28) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0x12u:
        *((_DWORD *)this + 28) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0x13u:
        *((_DWORD *)this + 28) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0x14u:
        *((_DWORD *)this + 28) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0x15u:
        *((_DWORD *)this + 28) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0x16u:
        *((_DWORD *)this + 28) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_116;
      case 0x17u:
        *((_DWORD *)this + 28) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_116:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_117:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_100:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_118:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FitnessMachineSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 112);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    int v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
LABEL_46:
    this = PB::Writer::write(a2, *(float *)(v3 + 80));
    if ((*(_DWORD *)(v3 + 112) & 0x10) == 0) {
      return this;
    }
    goto LABEL_47;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) != 0) {
    goto LABEL_46;
  }
LABEL_23:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_47:
  float v5 = *(float *)(v3 + 36);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::FitnessMachineSample::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 112);
  int v3 = *(_DWORD *)(a2 + 112);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 112) & 0x10) == 0;
  if ((v2 & 0x10) != 0) {
    return (v3 & 0x10) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  }
  return v4;
}

uint64_t CMMsl::FitnessMachineSample::hash_value(CMMsl::FitnessMachineSample *this)
{
  int v1 = *((_DWORD *)this + 28);
  if ((v1 & 4) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_68:
    double v3 = 0.0;
    if (v1) {
      goto LABEL_6;
    }
LABEL_69:
    double v4 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_9;
    }
LABEL_70:
    uint64_t v6 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_12;
    }
LABEL_71:
    uint64_t v8 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_15;
    }
LABEL_72:
    uint64_t v10 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_18;
    }
LABEL_73:
    uint64_t v12 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_21;
    }
    goto LABEL_74;
  }
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_68;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_69;
  }
LABEL_6:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_70;
  }
LABEL_9:
  float v5 = *((float *)this + 15);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_71;
  }
LABEL_12:
  float v7 = *((float *)this + 27);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_72;
  }
LABEL_15:
  float v9 = *((float *)this + 18);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_73;
  }
LABEL_18:
  float v11 = *((float *)this + 13);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x800) != 0)
  {
LABEL_21:
    uint64_t v13 = *((int *)this + 16);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_22;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t v13 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_22:
    uint64_t v14 = *((int *)this + 25);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_23;
    }
LABEL_76:
    uint64_t v16 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_26;
    }
LABEL_77:
    uint64_t v18 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_29;
    }
LABEL_78:
    uint64_t v20 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_32;
    }
LABEL_79:
    uint64_t v22 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_35;
    }
LABEL_80:
    uint64_t v24 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_38;
    }
LABEL_81:
    uint64_t v26 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_41;
    }
LABEL_82:
    uint64_t v28 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_44;
    }
LABEL_83:
    uint64_t v30 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_47;
    }
LABEL_84:
    uint64_t v32 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_50;
    }
LABEL_85:
    uint64_t v34 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_53;
    }
LABEL_86:
    uint64_t v36 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_56;
    }
LABEL_87:
    uint64_t v38 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_59;
    }
    goto LABEL_88;
  }
LABEL_75:
  uint64_t v14 = 0;
  if ((v1 & 0x200000) == 0) {
    goto LABEL_76;
  }
LABEL_23:
  float v15 = *((float *)this + 26);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_77;
  }
LABEL_26:
  float v17 = *((float *)this + 23);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_78;
  }
LABEL_29:
  float v19 = *((float *)this + 12);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_79;
  }
LABEL_32:
  float v21 = *((float *)this + 21);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_80;
  }
LABEL_35:
  float v23 = *((float *)this + 10);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_81;
  }
LABEL_38:
  float v25 = *((float *)this + 14);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_82;
  }
LABEL_41:
  float v27 = *((float *)this + 17);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_83;
  }
LABEL_44:
  float v29 = *((float *)this + 24);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_84;
  }
LABEL_47:
  float v31 = *((float *)this + 22);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_85;
  }
LABEL_50:
  float v33 = *((float *)this + 11);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_86;
  }
LABEL_53:
  float v35 = *((float *)this + 19);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_87;
  }
LABEL_56:
  float v37 = *((float *)this + 8);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_59:
    float v39 = *((float *)this + 20);
    uint64_t v40 = LODWORD(v39);
    if (v39 == 0.0) {
      uint64_t v40 = 0;
    }
    if ((v1 & 0x10) != 0) {
      goto LABEL_62;
    }
LABEL_89:
    uint64_t v42 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42;
  }
LABEL_88:
  uint64_t v40 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_89;
  }
LABEL_62:
  float v41 = *((float *)this + 9);
  uint64_t v42 = LODWORD(v41);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42;
}

uint64_t CMMsl::FocusModes::FocusModes(uint64_t this)
{
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_2706419C0;
  return this;
}

{
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_2706419C0;
  return this;
}

void CMMsl::FocusModes::~FocusModes(CMMsl::FocusModes *this)
{
  *(void *)this = &unk_2706419C0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    sub_2572C6E48(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    sub_2572C6E48(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FocusModes::~FocusModes(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::FocusModes::FocusModes(uint64_t this, const CMMsl::FocusModes *a2)
{
  *(void *)this = &unk_2706419C0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 16) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 4) != 0)
  {
    int v4 = *((_DWORD *)a2 + 9);
    *(unsigned char *)(this + 48) |= 4u;
    *(_DWORD *)(this + 36) = v4;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_7:
      if ((v2 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)a2 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *(unsigned char *)(this + 48) |= 2u;
  *(_DWORD *)(this + 32) = v5;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_8:
    if ((v2 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v6 = *((_DWORD *)a2 + 10);
  *(unsigned char *)(this + 48) |= 8u;
  *(_DWORD *)(this + 40) = v6;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return this;
    }
    goto LABEL_10;
  }
LABEL_15:
  char v7 = *((unsigned char *)a2 + 44);
  *(unsigned char *)(this + 48) |= 0x10u;
  *(unsigned char *)(this + 44) = v7;
  if ((*((unsigned char *)a2 + 48) & 1) == 0) {
    return this;
  }
LABEL_10:
  uint64_t v3 = *((void *)a2 + 3);
  *(unsigned char *)(this + 48) |= 1u;
  *(void *)(this + 24) = v3;
  return this;
}

uint64_t CMMsl::FocusModes::operator=(uint64_t a1, const CMMsl::FocusModes *a2)
{
  if ((const CMMsl::FocusModes *)a1 != a2)
  {
    CMMsl::FocusModes::FocusModes((uint64_t)v9, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v3;
    *(void *)&long long v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v12;
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v5;
    int v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v15;
    int v15 = v6;
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v7;
    LOBYTE(v7) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v14;
    char v14 = v7;
    uint64_t v11 = v3;
    uint64_t v12 = v4;
    CMMsl::FocusModes::~FocusModes((CMMsl::FocusModes *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FocusModes *a2, CMMsl::FocusModes *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  LODWORD(v5) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v5;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

uint64_t CMMsl::FocusModes::FocusModes(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_2706419C0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    sub_2572C6E48(v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  if (v7) {
    sub_2572C6E48(v7);
  }
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t CMMsl::FocusModes::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::FocusModes::FocusModes((uint64_t)v9, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v3;
    *(void *)&long long v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v12;
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v5;
    int v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v15;
    int v15 = v6;
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v7;
    LOBYTE(v7) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v14;
    char v14 = v7;
    uint64_t v11 = v3;
    uint64_t v12 = v4;
    CMMsl::FocusModes::~FocusModes((CMMsl::FocusModes *)v9);
  }
  return a1;
}

uint64_t CMMsl::FocusModes::formatText(CMMsl::FocusModes *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "modeSemanticType");
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)this + 48) & 4) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "modeUpdateReason");
  if ((*((unsigned char *)this + 48) & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "modeUpdateSource");
LABEL_7:
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  char v6 = *((unsigned char *)this + 48);
  if ((v6 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "starting");
    char v6 = *((unsigned char *)this + 48);
  }
  if (v6) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FocusModes::readFrom(CMMsl::FocusModes *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        *((unsigned char *)this + 48) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          do
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              goto LABEL_82;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
          }
          while (!v14);
LABEL_61:
          LODWORD(v26) = 0;
          goto LABEL_82;
        }
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v26 = 0;
        if (v22 <= v21) {
          unint64_t v22 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v52 = v21 + 1;
            char v53 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v52;
            v26 |= (unint64_t)(v53 & 0x7F) << v50;
            if (v53 < 0)
            {
              v50 += 7;
              unint64_t v21 = v52;
              BOOL v14 = v51++ > 8;
              if (v14) {
                goto LABEL_61;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v26) = 0;
            }
          }
          break;
        }
LABEL_82:
        *((_DWORD *)this + 9) = v26;
        goto LABEL_20;
      case 4u:
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          do
          {
            unint64_t v35 = v29 + 1;
            *((void *)a2 + 1) = v29 + 1;
            char v36 = *(unsigned char *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              goto LABEL_86;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
          }
          while (!v14);
LABEL_68:
          LODWORD(v34) = 0;
          goto LABEL_86;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v34 = 0;
        if (v30 <= v29) {
          unint64_t v30 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v56 = v29 + 1;
            char v57 = *(unsigned char *)(v31 + v29);
            *((void *)a2 + 1) = v56;
            v34 |= (unint64_t)(v57 & 0x7F) << v54;
            if (v57 < 0)
            {
              v54 += 7;
              unint64_t v29 = v56;
              BOOL v14 = v55++ > 8;
              if (v14) {
                goto LABEL_68;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v34) = 0;
            }
          }
          break;
        }
LABEL_86:
        *((_DWORD *)this + 8) = v34;
        goto LABEL_20;
      case 5u:
        *((unsigned char *)this + 48) |= 8u;
        unint64_t v37 = *((void *)a2 + 1);
        unint64_t v38 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v42 = 0;
          do
          {
            unint64_t v43 = v37 + 1;
            *((void *)a2 + 1) = v37 + 1;
            char v44 = *(unsigned char *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0) {
              goto LABEL_90;
            }
            v40 += 7;
            unint64_t v37 = v43;
            BOOL v14 = v41++ > 8;
          }
          while (!v14);
LABEL_75:
          LODWORD(v42) = 0;
          goto LABEL_90;
        }
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v42 = 0;
        if (v38 <= v37) {
          unint64_t v38 = *((void *)a2 + 1);
        }
        break;
      case 6u:
        *((unsigned char *)this + 48) |= 0x10u;
        unint64_t v45 = *((void *)a2 + 1);
        if (v45 >= *((void *)a2 + 2))
        {
          BOOL v48 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v46 = v45 + 1;
          int v47 = *(unsigned __int8 *)(*(void *)a2 + v45);
          *((void *)a2 + 1) = v46;
          BOOL v48 = v47 != 0;
        }
        *((unsigned char *)this + 44) = v48;
        goto LABEL_20;
      case 7u:
        *((unsigned char *)this + 48) |= 1u;
        unint64_t v49 = *((void *)a2 + 1);
        if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 3) = *(void *)(*(void *)a2 + v49);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v38 == v37)
      {
        LODWORD(v42) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_90;
      }
      unint64_t v60 = v37 + 1;
      char v61 = *(unsigned char *)(v39 + v37);
      *((void *)a2 + 1) = v60;
      v42 |= (unint64_t)(v61 & 0x7F) << v58;
      if ((v61 & 0x80) == 0) {
        break;
      }
      v58 += 7;
      unint64_t v37 = v60;
      BOOL v14 = v59++ > 8;
      if (v14) {
        goto LABEL_75;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v42) = 0;
    }
LABEL_90:
    *((_DWORD *)this + 10) = v42;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FocusModes::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 8)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v3 + 16)) {
    this = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(v3 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_14:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 48) & 1) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_9:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_15:
  double v5 = *(double *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::FocusModes::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned __int8 **)(a1 + 8);
  double v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      int v7 = (unsigned __int8 *)v4[23];
    }
    else {
      int v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      unsigned int v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      unsigned int v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  unint64_t v11 = *(unsigned __int8 **)(a1 + 16);
  unint64_t v12 = *(unsigned __int8 ***)(a2 + 16);
  if (v11)
  {
    if (!v12) {
      return 0;
    }
    uint64_t v13 = v11[23];
    if ((v13 & 0x80u) == 0) {
      BOOL v14 = (unsigned __int8 *)v11[23];
    }
    else {
      BOOL v14 = (unsigned __int8 *)*((void *)v11 + 1);
    }
    char v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    int v16 = (char)v15;
    if ((char)v15 < 0) {
      char v15 = v12[1];
    }
    if (v14 != v15) {
      return 0;
    }
    if (v16 >= 0) {
      unint64_t v17 = *(unsigned __int8 **)(a2 + 16);
    }
    else {
      unint64_t v17 = *v12;
    }
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((void *)v11 + 1))) {
        return 0;
      }
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13) {
          goto LABEL_35;
        }
      }
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
LABEL_35:
  if ((*(unsigned char *)(a1 + 48) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 4) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 8) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 48) & 1) == 0;
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
}

unint64_t CMMsl::FocusModes::hash_value(CMMsl::FocusModes *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v3 = sub_2572C6F9C(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 2);
  if (v4) {
    unint64_t v4 = sub_2572C6F9C(v4);
  }
  if ((*((unsigned char *)this + 48) & 4) != 0)
  {
    uint64_t v5 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 48) & 2) != 0)
    {
LABEL_8:
      uint64_t v6 = *((int *)this + 8);
      if ((*((unsigned char *)this + 48) & 8) != 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 48) & 2) != 0) {
      goto LABEL_8;
    }
  }
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 48) & 8) != 0)
  {
LABEL_9:
    uint64_t v7 = *((int *)this + 10);
    if ((*((unsigned char *)this + 48) & 0x10) != 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v7 = 0;
  if ((*((unsigned char *)this + 48) & 0x10) != 0)
  {
LABEL_10:
    uint64_t v8 = *((unsigned __int8 *)this + 44);
    if (*((unsigned char *)this + 48)) {
      goto LABEL_11;
    }
LABEL_18:
    double v9 = 0.0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(void *)&v9;
  }
LABEL_17:
  uint64_t v8 = 0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_18;
  }
LABEL_11:
  double v9 = *((double *)this + 3);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(void *)&v9;
}

double CMMsl::FrequencyResponse::FrequencyResponse(CMMsl::FrequencyResponse *this)
{
  *(void *)this = &unk_2706419F8;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_2706419F8;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::FrequencyResponse::~FrequencyResponse(CMMsl::FrequencyResponse *this)
{
  *(void *)this = &unk_2706419F8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FrequencyResponse::~FrequencyResponse(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::FrequencyResponse *CMMsl::FrequencyResponse::FrequencyResponse(CMMsl::FrequencyResponse *this, const CMMsl::FrequencyResponse *a2)
{
  *(void *)this = &unk_2706419F8;
  *(_OWORD *)((char *)this + 8) = 0u;
  unint64_t v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((unsigned char *)a2 + 64))
  {
    uint64_t v5 = *((void *)a2 + 7);
    *((unsigned char *)this + 64) = 1;
    *((void *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  return this;
}

uint64_t CMMsl::FrequencyResponse::operator=(uint64_t a1, const CMMsl::FrequencyResponse *a2)
{
  if ((const CMMsl::FrequencyResponse *)a1 != a2)
  {
    CMMsl::FrequencyResponse::FrequencyResponse((CMMsl::FrequencyResponse *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    CMMsl::FrequencyResponse::~FrequencyResponse((CMMsl::FrequencyResponse *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FrequencyResponse *a2, CMMsl::FrequencyResponse *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::FrequencyResponse::FrequencyResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706419F8;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::FrequencyResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::FrequencyResponse::FrequencyResponse((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    CMMsl::FrequencyResponse::~FrequencyResponse((CMMsl::FrequencyResponse *)v9);
  }
  return a1;
}

uint64_t CMMsl::FrequencyResponse::formatText(CMMsl::FrequencyResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "freq", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "mag", v10);
  }
  if (*((unsigned char *)this + 64)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::FrequencyResponse::readFrom(CMMsl::FrequencyResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_27;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        if (v19 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          while (v37 < v38 && !*((unsigned char *)a2 + 24))
          {
            char v40 = (char *)*((void *)this + 2);
            unint64_t v39 = *((void *)this + 3);
            if ((unint64_t)v40 >= v39)
            {
              uint64_t v42 = (char *)*((void *)this + 1);
              uint64_t v43 = (v40 - v42) >> 2;
              unint64_t v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62) {
                goto LABEL_125;
              }
              uint64_t v45 = v39 - (void)v42;
              if (v45 >> 1 > v44) {
                unint64_t v44 = v45 >> 1;
              }
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v44;
              }
              if (v46)
              {
                unint64_t v46 = (unint64_t)sub_2572C76F0(v46);
                uint64_t v42 = (char *)*((void *)this + 1);
                char v40 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v47 = 0;
              }
              BOOL v48 = (_DWORD *)(v46 + 4 * v43);
              *BOOL v48 = 0;
              unsigned int v41 = v48 + 1;
              while (v40 != v42)
              {
                int v49 = *((_DWORD *)v40 - 1);
                v40 -= 4;
                *--BOOL v48 = v49;
              }
              *((void *)this + 1) = v48;
              *((void *)this + 2) = v41;
              *((void *)this + 3) = v46 + 4 * v47;
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *(_DWORD *)char v40 = 0;
              unsigned int v41 = v40 + 4;
            }
            *((void *)this + 2) = v41;
            unint64_t v50 = *((void *)a2 + 1);
            if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
              goto LABEL_81;
            }
            *(v41 - 1) = *(_DWORD *)(*(void *)a2 + v50);
            unint64_t v38 = *((void *)a2 + 2);
            unint64_t v37 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v37;
          }
          goto LABEL_82;
        }
        unsigned int v55 = (char *)*((void *)this + 2);
        unint64_t v54 = *((void *)this + 3);
        if ((unint64_t)v55 >= v54)
        {
          char v62 = (char *)*((void *)this + 1);
          uint64_t v63 = (v55 - v62) >> 2;
          unint64_t v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62) {
LABEL_125:
          }
            sub_2570AFD0C();
          uint64_t v65 = v54 - (void)v62;
          if (v65 >> 1 > v64) {
            unint64_t v64 = v65 >> 1;
          }
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v64;
          }
          if (v66)
          {
            unint64_t v66 = (unint64_t)sub_2572C76F0(v66);
            char v62 = (char *)*((void *)this + 1);
            unsigned int v55 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v67 = 0;
          }
          uint64_t v70 = (_DWORD *)(v66 + 4 * v63);
          *uint64_t v70 = 0;
          char v53 = v70 + 1;
          while (v55 != v62)
          {
            int v71 = *((_DWORD *)v55 - 1);
            v55 -= 4;
            *--uint64_t v70 = v71;
          }
          *((void *)this + 1) = v70;
          *((void *)this + 2) = v53;
          *((void *)this + 3) = v66 + 4 * v67;
          if (v62) {
            operator delete(v62);
          }
        }
        else
        {
          *(_DWORD *)unsigned int v55 = 0;
          char v53 = v55 + 4;
        }
        *((void *)this + 2) = v53;
LABEL_113:
        unint64_t v72 = *((void *)a2 + 1);
        if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)a2 + 2)) {
          goto LABEL_115;
        }
        *(v53 - 1) = *(_DWORD *)(*(void *)a2 + v72);
        uint64_t v22 = *((void *)a2 + 1) + 4;
        goto LABEL_117;
      }
      if (v20 != 1)
      {
LABEL_27:
        if ((PB::Reader::skip(a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_118;
      }
      *((unsigned char *)this + 64) |= 1u;
      unint64_t v21 = *((void *)a2 + 1);
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
      {
LABEL_115:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_118;
      }
      *((void *)this + 7) = *(void *)(*(void *)a2 + v21);
      uint64_t v22 = *((void *)a2 + 1) + 8;
LABEL_117:
      *((void *)a2 + 1) = v22;
LABEL_118:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    if (v19 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v23 = *((void *)a2 + 1);
      unint64_t v24 = *((void *)a2 + 2);
      while (v23 < v24 && !*((unsigned char *)a2 + 24))
      {
        uint64_t v26 = (char *)*((void *)this + 5);
        unint64_t v25 = *((void *)this + 6);
        if ((unint64_t)v26 >= v25)
        {
          char v28 = (char *)*((void *)this + 4);
          uint64_t v29 = (v26 - v28) >> 2;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62) {
            goto LABEL_125;
          }
          uint64_t v31 = v25 - (void)v28;
          if (v31 >> 1 > v30) {
            unint64_t v30 = v31 >> 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            unint64_t v32 = (unint64_t)sub_2572C76F0(v32);
            char v28 = (char *)*((void *)this + 4);
            uint64_t v26 = (char *)*((void *)this + 5);
          }
          else
          {
            uint64_t v33 = 0;
          }
          uint64_t v34 = (_DWORD *)(v32 + 4 * v29);
          *uint64_t v34 = 0;
          unint64_t v27 = v34 + 1;
          while (v26 != v28)
          {
            int v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *--uint64_t v34 = v35;
          }
          *((void *)this + 4) = v34;
          *((void *)this + 5) = v27;
          *((void *)this + 6) = v32 + 4 * v33;
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v26 = 0;
          unint64_t v27 = v26 + 4;
        }
        *((void *)this + 5) = v27;
        unint64_t v36 = *((void *)a2 + 1);
        if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)a2 + 2))
        {
LABEL_81:
          *((unsigned char *)a2 + 24) = 1;
          break;
        }
        *(v27 - 1) = *(_DWORD *)(*(void *)a2 + v36);
        unint64_t v24 = *((void *)a2 + 2);
        unint64_t v23 = *((void *)a2 + 1) + 4;
        *((void *)a2 + 1) = v23;
      }
LABEL_82:
      PB::Reader::recallMark();
      goto LABEL_118;
    }
    unint64_t v52 = (char *)*((void *)this + 5);
    unint64_t v51 = *((void *)this + 6);
    if ((unint64_t)v52 >= v51)
    {
      unint64_t v56 = (char *)*((void *)this + 4);
      uint64_t v57 = (v52 - v56) >> 2;
      unint64_t v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 62) {
        goto LABEL_125;
      }
      uint64_t v59 = v51 - (void)v56;
      if (v59 >> 1 > v58) {
        unint64_t v58 = v59 >> 1;
      }
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v60 = v58;
      }
      if (v60)
      {
        unint64_t v60 = (unint64_t)sub_2572C76F0(v60);
        unint64_t v56 = (char *)*((void *)this + 4);
        unint64_t v52 = (char *)*((void *)this + 5);
      }
      else
      {
        uint64_t v61 = 0;
      }
      unint64_t v68 = (_DWORD *)(v60 + 4 * v57);
      *unint64_t v68 = 0;
      char v53 = v68 + 1;
      while (v52 != v56)
      {
        int v69 = *((_DWORD *)v52 - 1);
        v52 -= 4;
        *--unint64_t v68 = v69;
      }
      *((void *)this + 4) = v68;
      *((void *)this + 5) = v53;
      *((void *)this + 6) = v60 + 4 * v61;
      if (v56) {
        operator delete(v56);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v52 = 0;
      char v53 = v52 + 4;
    }
    *((void *)this + 5) = v53;
    goto LABEL_113;
  }
  return v4 == 0;
}

uint64_t CMMsl::FrequencyResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 64)) {
    this = PB::Writer::write(a2, *(double *)(this + 56));
  }
  int v4 = (float *)v3[1];
  long long v5 = (float *)v3[2];
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  uint64_t v8 = (float *)v3[4];
  float v7 = (float *)v3[5];
  while (v8 != v7)
  {
    float v9 = *v8++;
    this = PB::Writer::write(a2, v9);
  }
  return this;
}

BOOL CMMsl::FrequencyResponse::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if ((*(unsigned char *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 64))
  {
    return 0;
  }
  unint64_t v3 = *(float **)(a1 + 8);
  unint64_t v2 = *(float **)(a1 + 16);
  int v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  float v7 = *(float **)(a2 + 32);
  if (v5 - v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 4;
  do
  {
    float v9 = *v7++;
    BOOL result = *(float *)(v8 - 4) == v9;
    BOOL v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::FrequencyResponse::hash_value(CMMsl::FrequencyResponse *this)
{
  if (*((unsigned char *)this + 64))
  {
    if (*((double *)this + 7) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 7);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

void *CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(void *this)
{
  *this = &unk_270641A30;
  this[1] = 0;
  return this;
}

{
  *this = &unk_270641A30;
  this[1] = 0;
  return this;
}

void CMMsl::FusedBioMotionClassification::~FusedBioMotionClassification(CMMsl::FusedBioMotionClassification *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270641A30;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FusedBioMotionClassification::~FusedBioMotionClassification(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(void *this, const CMMsl::FusedBioMotionClassification *a2)
{
  *this = &unk_270641A30;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::FusedBioMotionClassification *CMMsl::FusedBioMotionClassification::operator=(const CMMsl::FusedBioMotionClassification *a1, const CMMsl::FusedBioMotionClassification *a2)
{
  if (a1 != a2)
  {
    CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::FusedBioMotionClassification::~FusedBioMotionClassification((CMMsl::FusedBioMotionClassification *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FusedBioMotionClassification *a2, CMMsl::FusedBioMotionClassification *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(void *a1, uint64_t a2)
{
  *a1 = &unk_270641A30;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270641A30;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::FusedBioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270641A30;
    v6[1] = v4;
    CMMsl::FusedBioMotionClassification::~FusedBioMotionClassification((CMMsl::FusedBioMotionClassification *)v6);
  }
  return a1;
}

uint64_t CMMsl::FusedBioMotionClassification::formatText(CMMsl::FusedBioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::FusedBioMotionClassification::readFrom(CMMsl::FusedBioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FusedBioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::FusedBioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BioMotionClassification::operator==(v2, v3);
  }
  return result;
}

CMMsl::BioMotionClassification *CMMsl::FusedBioMotionClassification::hash_value(CMMsl::FusedBioMotionClassification *this)
{
  BOOL result = (CMMsl::BioMotionClassification *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionClassification *)CMMsl::BioMotionClassification::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::FusedBioMotionClassification::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::GaitCycleSegment::GaitCycleSegment(uint64_t this)
{
  *(void *)this = &unk_270641A68;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(void *)this = &unk_270641A68;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

void CMMsl::GaitCycleSegment::~GaitCycleSegment(CMMsl::GaitCycleSegment *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::GaitCycleSegment::GaitCycleSegment(CMMsl::GaitCycleSegment *this, const CMMsl::GaitCycleSegment *a2)
{
  *(void *)this = &unk_270641A68;
  *((_DWORD *)this + 25) = 0;
  int v2 = *((_DWORD *)a2 + 25);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 25) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 25) = v3;
    *((void *)this + 3) = v5;
    int v2 = *((_DWORD *)a2 + 25);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 25) = v3;
    *((void *)this + 2) = v6;
    int v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x10000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 15);
  v3 |= 0x200u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  float result = *((float *)a2 + 22);
  v3 |= 0x10000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 22) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  float result = *((float *)a2 + 12);
  v3 |= 0x40u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 12) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  float result = *((float *)a2 + 20);
  v3 |= 0x4000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  float result = *((float *)a2 + 14);
  v3 |= 0x100u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  float result = *((float *)a2 + 13);
  v3 |= 0x80u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  float result = *((float *)a2 + 19);
  v3 |= 0x2000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  float result = *((float *)a2 + 11);
  v3 |= 0x20u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 11) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x8000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  float result = *((float *)a2 + 21);
  v3 |= 0x8000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  float result = *((float *)a2 + 16);
  v3 |= 0x400u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x800000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  char v8 = *((unsigned char *)a2 + 98);
  v3 |= 0x800000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 98) = v8;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x800) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  float result = *((float *)a2 + 17);
  v3 |= 0x800u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 17) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  char v9 = *((unsigned char *)a2 + 97);
  v3 |= 0x400000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 97) = v9;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }
LABEL_43:
  char v10 = *((unsigned char *)a2 + 94);
  v3 |= 0x80000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 94) = v10;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v11 = *((unsigned char *)a2 + 93);
  v3 |= 0x40000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 93) = v11;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x100000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }
LABEL_45:
  char v12 = *((unsigned char *)a2 + 95);
  v3 |= 0x100000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 95) = v12;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_47;
  }
LABEL_46:
  float result = *((float *)a2 + 10);
  v3 |= 0x10u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }
LABEL_47:
  char v13 = *((unsigned char *)a2 + 96);
  v3 |= 0x200000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 96) = v13;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_49;
  }
LABEL_48:
  char v14 = *((unsigned char *)a2 + 92);
  v3 |= 0x20000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 92) = v14;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      return result;
    }
LABEL_50:
    float result = *((float *)a2 + 18);
    *((_DWORD *)this + 25) = v3 | 0x1000;
    *((float *)this + 18) = result;
    return result;
  }
LABEL_49:
  uint64_t v15 = *((void *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 25) = v3;
  *((void *)this + 4) = v15;
  if ((*((_DWORD *)a2 + 25) & 0x1000) != 0) {
    goto LABEL_50;
  }
  return result;
}

CMMsl *CMMsl::GaitCycleSegment::operator=(CMMsl *a1, const CMMsl::GaitCycleSegment *a2)
{
  if (a1 != a2)
  {
    CMMsl::GaitCycleSegment::GaitCycleSegment((CMMsl::GaitCycleSegment *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegment *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GaitCycleSegment *a2, CMMsl::GaitCycleSegment *a3)
{
  int v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  int v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  int v8 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  int v9 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  int v10 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  int v11 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v11;
  int v12 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  int v13 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  int v14 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v14;
  int v15 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v15;
  int v16 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v16;
  LOBYTE(v6) = *((unsigned char *)this + 98);
  *((unsigned char *)this + 98) = *((unsigned char *)a2 + 98);
  *((unsigned char *)a2 + 98) = v6;
  int v17 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v17;
  LOBYTE(v6) = *((unsigned char *)this + 97);
  *((unsigned char *)this + 97) = *((unsigned char *)a2 + 97);
  *((unsigned char *)a2 + 97) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 94);
  *((unsigned char *)this + 94) = *((unsigned char *)a2 + 94);
  *((unsigned char *)a2 + 94) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 93);
  *((unsigned char *)this + 93) = *((unsigned char *)a2 + 93);
  *((unsigned char *)a2 + 93) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 95);
  *((unsigned char *)this + 95) = *((unsigned char *)a2 + 95);
  *((unsigned char *)a2 + 95) = v6;
  int v18 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v18;
  LOBYTE(v6) = *((unsigned char *)this + 96);
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  *((unsigned char *)a2 + 96) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 92);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
  *((unsigned char *)a2 + 92) = v6;
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  float result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  return result;
}

float CMMsl::GaitCycleSegment::GaitCycleSegment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641A68;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 94) = *(unsigned char *)(a2 + 94);
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(unsigned char *)(a1 + 95) = *(unsigned char *)(a2 + 95);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  float result = *(float *)(a2 + 72);
  *(float *)(a1 + 72) = result;
  return result;
}

CMMsl *CMMsl::GaitCycleSegment::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GaitCycleSegment::GaitCycleSegment((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegment *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GaitCycleSegment::formatText(CMMsl::GaitCycleSegment *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryProbabilityEstimate", *((float *)this + 10));
    int v5 = *((_DWORD *)this + 25);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cadence", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "doubleSupportEstimate", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "horizontalRotationRateMax", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "impulseMagnitude", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "impulseStartTime");
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x20000) == 0)
  {
LABEL_8:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "isCadenceConcordant");
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x40000) == 0)
  {
LABEL_9:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isFeasibleWalkingSpeed");
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "isNotRunning");
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x100000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "isPendular");
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x200000) == 0)
  {
LABEL_12:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "isSufficientVerticalTwist");
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x400000) == 0)
  {
LABEL_13:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "isSwingStanceCycle");
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x800000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "isValid");
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "loftEndTime");
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "loftMagnitude", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "loftStartTime");
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "pendulumResidual", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "previousImpulseStartTime");
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "rawLoftSpeed", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "sqrtMaxAbsLoftAccel", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "stanceProbability", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "stepLengthEstimate", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "verticalRotationRateMean", *((float *)this + 21));
  if ((*((_DWORD *)this + 25) & 0x10000) != 0) {
LABEL_25:
  }
    PB::TextFormatter::format(a2, "walkSpeedEstimate", *((float *)this + 22));
LABEL_26:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GaitCycleSegment::readFrom(CMMsl::GaitCycleSegment *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_168;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 25) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_152;
            }
            unint64_t v60 = v20++;
            char v61 = *(unsigned char *)(v21 + v60);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0) {
              break;
            }
            v58 += 7;
            BOOL v14 = v59++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_151:
              unint64_t v2 = v60 + 1;
              goto LABEL_152;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_151;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_152;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_152:
        *((void *)this + 1) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 25) |= 4u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_157;
            }
            unint64_t v64 = v26++;
            char v65 = *(unsigned char *)(v27 + v64);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0) {
              break;
            }
            v62 += 7;
            BOOL v14 = v63++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
LABEL_156:
              unint64_t v2 = v64 + 1;
              goto LABEL_157;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v30 = 0;
          }
          goto LABEL_156;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_157;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        uint64_t v30 = 0;
LABEL_157:
        *((void *)this + 3) = v30;
        break;
      case 3u:
        *((_DWORD *)this + 25) |= 2u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              uint64_t v36 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_162;
            }
            unint64_t v68 = v32++;
            char v69 = *(unsigned char *)(v33 + v68);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0) {
              break;
            }
            v66 += 7;
            BOOL v14 = v67++ > 8;
            if (v14)
            {
              uint64_t v36 = 0;
LABEL_161:
              unint64_t v2 = v68 + 1;
              goto LABEL_162;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v36 = 0;
          }
          goto LABEL_161;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_162;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        uint64_t v36 = 0;
LABEL_162:
        *((void *)this + 2) = v36;
        break;
      case 4u:
        *((_DWORD *)this + 25) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_103;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_147;
      case 5u:
        *((_DWORD *)this + 25) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_103;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_147;
      case 6u:
        *((_DWORD *)this + 25) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_103;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_147;
      case 7u:
        *((_DWORD *)this + 25) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_103;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_147;
      case 8u:
        *((_DWORD *)this + 25) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_103;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_147;
      case 9u:
        *((_DWORD *)this + 25) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_103;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_147;
      case 0xAu:
        *((_DWORD *)this + 25) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_103;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_147;
      case 0xBu:
        *((_DWORD *)this + 25) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_103;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_147;
      case 0xCu:
        *((_DWORD *)this + 25) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_103;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_147;
      case 0xDu:
        *((_DWORD *)this + 25) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_103;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_147;
      case 0xEu:
        *((_DWORD *)this + 25) |= 0x800000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v39 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v38 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v39 = v38 != 0;
        }
        *((unsigned char *)this + 98) = v39;
        break;
      case 0xFu:
        *((_DWORD *)this + 25) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_103;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_147;
      case 0x10u:
        *((_DWORD *)this + 25) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v41 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v40 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v41 = v40 != 0;
        }
        *((unsigned char *)this + 97) = v41;
        break;
      case 0x11u:
        *((_DWORD *)this + 25) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v43 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v42 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v43 = v42 != 0;
        }
        *((unsigned char *)this + 94) = v43;
        break;
      case 0x12u:
        *((_DWORD *)this + 25) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v45 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v44 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v45 = v44 != 0;
        }
        *((unsigned char *)this + 93) = v45;
        break;
      case 0x13u:
        *((_DWORD *)this + 25) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v47 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v46 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v47 = v46 != 0;
        }
        *((unsigned char *)this + 95) = v47;
        break;
      case 0x14u:
        *((_DWORD *)this + 25) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_103;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_147;
      case 0x15u:
        *((_DWORD *)this + 25) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v49 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v48 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v49 = v48 != 0;
        }
        *((unsigned char *)this + 96) = v49;
        break;
      case 0x16u:
        *((_DWORD *)this + 25) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v51 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v50 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v51 = v50 != 0;
        }
        *((unsigned char *)this + 92) = v51;
        break;
      case 0x17u:
        *((_DWORD *)this + 25) |= 8u;
        unint64_t v52 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v53 = *(void *)a2;
        if (v52 > 0xFFFFFFFFFFFFFFF5 || v52 + 10 > v2)
        {
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v56 = 0;
          if (v2 <= v52) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v52)
            {
              uint64_t v56 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_167;
            }
            unint64_t v72 = v52++;
            char v73 = *(unsigned char *)(v53 + v72);
            *((void *)a2 + 1) = v52;
            v56 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0) {
              break;
            }
            v70 += 7;
            BOOL v14 = v71++ > 8;
            if (v14)
            {
              uint64_t v56 = 0;
LABEL_166:
              unint64_t v2 = v72 + 1;
              goto LABEL_167;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v56 = 0;
          }
          goto LABEL_166;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
        do
        {
          unint64_t v2 = v52 + 1;
          *((void *)a2 + 1) = v52 + 1;
          char v57 = *(unsigned char *)(v53 + v52);
          v56 |= (unint64_t)(v57 & 0x7F) << v54;
          if ((v57 & 0x80) == 0) {
            goto LABEL_167;
          }
          v54 += 7;
          unint64_t v52 = v2;
          BOOL v14 = v55++ > 8;
        }
        while (!v14);
        uint64_t v56 = 0;
LABEL_167:
        *((void *)this + 4) = v56;
        break;
      case 0x18u:
        *((_DWORD *)this + 25) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_147:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_103:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_168:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GaitCycleSegment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 100);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    int v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
LABEL_48:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_DWORD *)(v3 + 100) & 0x1000) == 0) {
      return this;
    }
    goto LABEL_49;
  }
LABEL_47:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 8) != 0) {
    goto LABEL_48;
  }
LABEL_24:
  if ((v4 & 0x1000) == 0) {
    return this;
  }
LABEL_49:
  float v5 = *(float *)(v3 + 72);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::GaitCycleSegment::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 100);
  int v3 = *(_DWORD *)(a2 + 100);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 98) != *(unsigned __int8 *)(a2 + 98)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 97) != *(unsigned __int8 *)(a2 + 97)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 94) != *(unsigned __int8 *)(a2 + 94)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 95) != *(unsigned __int8 *)(a2 + 95)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 96) != *(unsigned __int8 *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 100) & 0x1000) == 0;
  if ((v2 & 0x1000) != 0) {
    return (v3 & 0x1000) != 0 && *(float *)(a1 + 72) == *(float *)(a2 + 72);
  }
  return v4;
}

uint64_t CMMsl::GaitCycleSegment::hash_value(CMMsl::GaitCycleSegment *this)
{
  int v1 = *((_DWORD *)this + 25);
  if (v1)
  {
    uint64_t v2 = *((void *)this + 1);
    if ((v1 & 4) != 0)
    {
LABEL_3:
      uint64_t v3 = *((void *)this + 3);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    uint64_t v4 = *((void *)this + 2);
    if ((v1 & 0x200) != 0) {
      goto LABEL_5;
    }
LABEL_55:
    uint64_t v6 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_8;
    }
LABEL_56:
    uint64_t v8 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_11;
    }
LABEL_57:
    uint64_t v10 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_14;
    }
LABEL_58:
    uint64_t v12 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_17;
    }
LABEL_59:
    uint64_t v14 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_20;
    }
LABEL_60:
    uint64_t v16 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_23;
    }
LABEL_61:
    uint64_t v18 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_26;
    }
LABEL_62:
    uint64_t v20 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_29;
    }
LABEL_63:
    uint64_t v22 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_32;
    }
LABEL_64:
    uint64_t v24 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_65;
  }
LABEL_54:
  uint64_t v4 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_55;
  }
LABEL_5:
  float v5 = *((float *)this + 15);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_56;
  }
LABEL_8:
  float v7 = *((float *)this + 22);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_57;
  }
LABEL_11:
  float v9 = *((float *)this + 12);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_58;
  }
LABEL_14:
  float v11 = *((float *)this + 20);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_59;
  }
LABEL_17:
  float v13 = *((float *)this + 14);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_60;
  }
LABEL_20:
  float v15 = *((float *)this + 13);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_61;
  }
LABEL_23:
  float v17 = *((float *)this + 19);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_62;
  }
LABEL_26:
  float v19 = *((float *)this + 11);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_63;
  }
LABEL_29:
  float v21 = *((float *)this + 21);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_64;
  }
LABEL_32:
  float v23 = *((float *)this + 16);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x800000) != 0)
  {
LABEL_35:
    uint64_t v25 = *((unsigned __int8 *)this + 98);
    if ((v1 & 0x800) != 0) {
      goto LABEL_36;
    }
LABEL_66:
    uint64_t v27 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_67;
  }
LABEL_65:
  uint64_t v25 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_66;
  }
LABEL_36:
  float v26 = *((float *)this + 17);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x400000) != 0)
  {
LABEL_39:
    uint64_t v28 = *((unsigned __int8 *)this + 97);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v28 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_40:
    uint64_t v29 = *((unsigned __int8 *)this + 94);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v29 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_41:
    uint64_t v30 = *((unsigned __int8 *)this + 93);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v30 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_42:
    uint64_t v31 = *((unsigned __int8 *)this + 95);
    if ((v1 & 0x10) != 0) {
      goto LABEL_43;
    }
LABEL_71:
    uint64_t v33 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_46;
    }
    goto LABEL_72;
  }
LABEL_70:
  uint64_t v31 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_71;
  }
LABEL_43:
  float v32 = *((float *)this + 10);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  if ((v1 & 0x200000) != 0)
  {
LABEL_46:
    uint64_t v34 = *((unsigned __int8 *)this + 96);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_47;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v34 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_47:
    uint64_t v35 = *((unsigned __int8 *)this + 92);
    if ((v1 & 8) != 0) {
      goto LABEL_48;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v35 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_48:
    uint64_t v36 = *((void *)this + 4);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_49;
    }
LABEL_75:
    uint64_t v38 = 0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
  }
LABEL_74:
  uint64_t v36 = 0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_75;
  }
LABEL_49:
  float v37 = *((float *)this + 18);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
}

uint64_t CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(uint64_t this)
{
  *(void *)this = &unk_270641AA0;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(void *)this = &unk_270641AA0;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

void CMMsl::GaitCycleSegmentationState::~GaitCycleSegmentationState(CMMsl::GaitCycleSegmentationState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(uint64_t this, const CMMsl::GaitCycleSegmentationState *a2)
{
  *(void *)this = &unk_270641AA0;
  *(_DWORD *)(this + 116) = 0;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 8);
    int v3 = 128;
    *(_DWORD *)(this + 116) = 128;
    *(void *)(this + 64) = v4;
    int v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 114);
    v3 |= 0x100000u;
    *(_DWORD *)(this + 116) = v3;
    *(unsigned char *)(this + 114) = v5;
    int v2 = *((_DWORD *)a2 + 29);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    char v6 = *((unsigned char *)a2 + 113);
    v3 |= 0x80000u;
    *(_DWORD *)(this + 116) = v3;
    *(unsigned char *)(this + 113) = v6;
    int v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x200000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 115);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 115) = v7;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  char v8 = *((unsigned char *)a2 + 112);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 112) = v8;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v9 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 24) = v9;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v10 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 16) = v10;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v11 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 8) = v11;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v12 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 48) = v12;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v13 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 56) = v13;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v14 = *((_DWORD *)a2 + 23);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 92) = v14;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v15 = *((_DWORD *)a2 + 26);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 104) = v15;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v16 = *((_DWORD *)a2 + 22);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 88) = v16;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v17 = *((_DWORD *)a2 + 21);
  v3 |= 0x800u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 84) = v17;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  int v18 = *((_DWORD *)a2 + 25);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 100) = v18;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }
LABEL_40:
  int v19 = *((_DWORD *)a2 + 19);
  v3 |= 0x200u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 76) = v19;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v20 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 80) = v20;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x4000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v21 = *((_DWORD *)a2 + 24);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 96) = v21;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v22 = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 72) = v22;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v23 = *((_DWORD *)a2 + 27);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 108) = v23;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x10) == 0) {
      return this;
    }
LABEL_46:
    uint64_t v25 = *((void *)a2 + 5);
    *(_DWORD *)(this + 116) = v3 | 0x10;
    *(void *)(this + 40) = v25;
    return this;
  }
LABEL_45:
  uint64_t v24 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 32) = v24;
  if ((*((_DWORD *)a2 + 29) & 0x10) != 0) {
    goto LABEL_46;
  }
  return this;
}

CMMsl *CMMsl::GaitCycleSegmentationState::operator=(CMMsl *a1, const CMMsl::GaitCycleSegmentationState *a2)
{
  if (a1 != a2)
  {
    CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegmentationState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GaitCycleSegmentationState *a2, CMMsl::GaitCycleSegmentationState *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 114);
  *((unsigned char *)this + 114) = *((unsigned char *)a2 + 114);
  *((unsigned char *)a2 + 114) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 113);
  *((unsigned char *)this + 113) = *((unsigned char *)a2 + 113);
  *((unsigned char *)a2 + 113) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 115);
  *((unsigned char *)this + 115) = *((unsigned char *)a2 + 115);
  *((unsigned char *)a2 + 115) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 112);
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((unsigned char *)a2 + 112) = v3;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  float result = *((float *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((float *)a2 + 27) = result;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  return result;
}

float CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641AA0;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 114) = *(unsigned char *)(a2 + 114);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(unsigned char *)(a1 + 115) = *(unsigned char *)(a2 + 115);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  float result = *(float *)(a2 + 108);
  *(float *)(a1 + 108) = result;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return result;
}

CMMsl *CMMsl::GaitCycleSegmentationState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegmentationState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GaitCycleSegmentationState::formatText(CMMsl::GaitCycleSegmentationState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 29);
  if (v5)
  {
    PB::TextFormatter::format(a2, "curImpulseStartTime");
    int v5 = *((_DWORD *)this + 29);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "curLoftEndTime");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "curLoftStartTime");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "currentHorzRotRateMax", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "currentImpulseMagnitude", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "currentLoftMagnitude", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "currentMax", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "currentMin", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "currentWalkSpeedEstimate", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "firstLoft");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "impulseStartTimeWalkingSpeed");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "impulseStopTimeWalkingSpeed");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "lastZeroTime");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "loftEndDetected");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "loftStartDetected");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "prevLoftStartTime");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "previousHorzRotRateMax", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "previousMax", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "vertRotationRateMean", *((float *)this + 27));
  if ((*((_DWORD *)this + 29) & 0x200000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(a2, "waitingToConfirmLoft");
LABEL_24:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GaitCycleSegmentationState::readFrom(CMMsl::GaitCycleSegmentationState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_208;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 29) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_172;
      case 2u:
        *((_DWORD *)this + 29) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 114) = v21;
        break;
      case 3u:
        *((_DWORD *)this + 29) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 113) = v23;
        break;
      case 4u:
        *((_DWORD *)this + 29) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v25 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v24 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v25 = v24 != 0;
        }
        *((unsigned char *)this + 115) = v25;
        break;
      case 5u:
        *((_DWORD *)this + 29) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 112) = v27;
        break;
      case 6u:
        *((_DWORD *)this + 29) |= 4u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v29 = *(void *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v32 = 0;
          if (v2 <= v28) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v28)
            {
              uint64_t v32 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_177;
            }
            unint64_t v72 = v28++;
            char v73 = *(unsigned char *)(v29 + v72);
            *((void *)a2 + 1) = v28;
            v32 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0) {
              break;
            }
            v70 += 7;
            BOOL v14 = v71++ > 8;
            if (v14)
            {
              uint64_t v32 = 0;
LABEL_176:
              unint64_t v2 = v72 + 1;
              goto LABEL_177;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v32 = 0;
          }
          goto LABEL_176;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        do
        {
          unint64_t v2 = v28 + 1;
          *((void *)a2 + 1) = v28 + 1;
          char v33 = *(unsigned char *)(v29 + v28);
          v32 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0) {
            goto LABEL_177;
          }
          v30 += 7;
          unint64_t v28 = v2;
          BOOL v14 = v31++ > 8;
        }
        while (!v14);
        uint64_t v32 = 0;
LABEL_177:
        *((void *)this + 3) = v32;
        break;
      case 7u:
        *((_DWORD *)this + 29) |= 2u;
        unint64_t v34 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v38 = 0;
          if (v2 <= v34) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v34)
            {
              uint64_t v38 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_182;
            }
            unint64_t v76 = v34++;
            char v77 = *(unsigned char *)(v35 + v76);
            *((void *)a2 + 1) = v34;
            v38 |= (unint64_t)(v77 & 0x7F) << v74;
            if ((v77 & 0x80) == 0) {
              break;
            }
            v74 += 7;
            BOOL v14 = v75++ > 8;
            if (v14)
            {
              uint64_t v38 = 0;
LABEL_181:
              unint64_t v2 = v76 + 1;
              goto LABEL_182;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v38 = 0;
          }
          goto LABEL_181;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        do
        {
          unint64_t v2 = v34 + 1;
          *((void *)a2 + 1) = v34 + 1;
          char v39 = *(unsigned char *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0) {
            goto LABEL_182;
          }
          v36 += 7;
          unint64_t v34 = v2;
          BOOL v14 = v37++ > 8;
        }
        while (!v14);
        uint64_t v38 = 0;
LABEL_182:
        *((void *)this + 2) = v38;
        break;
      case 8u:
        *((_DWORD *)this + 29) |= 1u;
        unint64_t v40 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v41 = *(void *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          char v78 = 0;
          unsigned int v79 = 0;
          uint64_t v44 = 0;
          if (v2 <= v40) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v40)
            {
              uint64_t v44 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_187;
            }
            unint64_t v80 = v40++;
            char v81 = *(unsigned char *)(v41 + v80);
            *((void *)a2 + 1) = v40;
            v44 |= (unint64_t)(v81 & 0x7F) << v78;
            if ((v81 & 0x80) == 0) {
              break;
            }
            v78 += 7;
            BOOL v14 = v79++ > 8;
            if (v14)
            {
              uint64_t v44 = 0;
LABEL_186:
              unint64_t v2 = v80 + 1;
              goto LABEL_187;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v44 = 0;
          }
          goto LABEL_186;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        do
        {
          unint64_t v2 = v40 + 1;
          *((void *)a2 + 1) = v40 + 1;
          char v45 = *(unsigned char *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0) {
            goto LABEL_187;
          }
          v42 += 7;
          unint64_t v40 = v2;
          BOOL v14 = v43++ > 8;
        }
        while (!v14);
        uint64_t v44 = 0;
LABEL_187:
        *((void *)this + 1) = v44;
        break;
      case 9u:
        *((_DWORD *)this + 29) |= 0x20u;
        unint64_t v46 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v47 = *(void *)a2;
        if (v46 > 0xFFFFFFFFFFFFFFF5 || v46 + 10 > v2)
        {
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v50 = 0;
          if (v2 <= v46) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v46)
            {
              uint64_t v50 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_192;
            }
            unint64_t v84 = v46++;
            char v85 = *(unsigned char *)(v47 + v84);
            *((void *)a2 + 1) = v46;
            v50 |= (unint64_t)(v85 & 0x7F) << v82;
            if ((v85 & 0x80) == 0) {
              break;
            }
            v82 += 7;
            BOOL v14 = v83++ > 8;
            if (v14)
            {
              uint64_t v50 = 0;
LABEL_191:
              unint64_t v2 = v84 + 1;
              goto LABEL_192;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v50 = 0;
          }
          goto LABEL_191;
        }
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v50 = 0;
        do
        {
          unint64_t v2 = v46 + 1;
          *((void *)a2 + 1) = v46 + 1;
          char v51 = *(unsigned char *)(v47 + v46);
          v50 |= (unint64_t)(v51 & 0x7F) << v48;
          if ((v51 & 0x80) == 0) {
            goto LABEL_192;
          }
          v48 += 7;
          unint64_t v46 = v2;
          BOOL v14 = v49++ > 8;
        }
        while (!v14);
        uint64_t v50 = 0;
LABEL_192:
        *((void *)this + 6) = v50;
        break;
      case 0xAu:
        *((_DWORD *)this + 29) |= 0x40u;
        unint64_t v52 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v53 = *(void *)a2;
        if (v52 > 0xFFFFFFFFFFFFFFF5 || v52 + 10 > v2)
        {
          char v86 = 0;
          unsigned int v87 = 0;
          uint64_t v56 = 0;
          if (v2 <= v52) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v52)
            {
              uint64_t v56 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_197;
            }
            unint64_t v88 = v52++;
            char v89 = *(unsigned char *)(v53 + v88);
            *((void *)a2 + 1) = v52;
            v56 |= (unint64_t)(v89 & 0x7F) << v86;
            if ((v89 & 0x80) == 0) {
              break;
            }
            v86 += 7;
            BOOL v14 = v87++ > 8;
            if (v14)
            {
              uint64_t v56 = 0;
LABEL_196:
              unint64_t v2 = v88 + 1;
              goto LABEL_197;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v56 = 0;
          }
          goto LABEL_196;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
        do
        {
          unint64_t v2 = v52 + 1;
          *((void *)a2 + 1) = v52 + 1;
          char v57 = *(unsigned char *)(v53 + v52);
          v56 |= (unint64_t)(v57 & 0x7F) << v54;
          if ((v57 & 0x80) == 0) {
            goto LABEL_197;
          }
          v54 += 7;
          unint64_t v52 = v2;
          BOOL v14 = v55++ > 8;
        }
        while (!v14);
        uint64_t v56 = 0;
LABEL_197:
        *((void *)this + 7) = v56;
        break;
      case 0xBu:
        *((_DWORD *)this + 29) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_171;
      case 0xCu:
        *((_DWORD *)this + 29) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_171;
      case 0xDu:
        *((_DWORD *)this + 29) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_171;
      case 0xEu:
        *((_DWORD *)this + 29) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_171;
      case 0xFu:
        *((_DWORD *)this + 29) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_171;
      case 0x10u:
        *((_DWORD *)this + 29) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_171;
      case 0x11u:
        *((_DWORD *)this + 29) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_171;
      case 0x12u:
        *((_DWORD *)this + 29) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_171;
      case 0x13u:
        *((_DWORD *)this + 29) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_171;
      case 0x14u:
        *((_DWORD *)this + 29) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_171:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_172:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_98:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0x15u:
        *((_DWORD *)this + 29) |= 8u;
        unint64_t v58 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v59 = *(void *)a2;
        if (v58 > 0xFFFFFFFFFFFFFFF5 || v58 + 10 > v2)
        {
          char v90 = 0;
          unsigned int v91 = 0;
          uint64_t v62 = 0;
          if (v2 <= v58) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v58)
            {
              uint64_t v62 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_202;
            }
            unint64_t v92 = v58++;
            char v93 = *(unsigned char *)(v59 + v92);
            *((void *)a2 + 1) = v58;
            v62 |= (unint64_t)(v93 & 0x7F) << v90;
            if ((v93 & 0x80) == 0) {
              break;
            }
            v90 += 7;
            BOOL v14 = v91++ > 8;
            if (v14)
            {
              uint64_t v62 = 0;
LABEL_201:
              unint64_t v2 = v92 + 1;
              goto LABEL_202;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v62 = 0;
          }
          goto LABEL_201;
        }
        char v60 = 0;
        unsigned int v61 = 0;
        uint64_t v62 = 0;
        do
        {
          unint64_t v2 = v58 + 1;
          *((void *)a2 + 1) = v58 + 1;
          char v63 = *(unsigned char *)(v59 + v58);
          v62 |= (unint64_t)(v63 & 0x7F) << v60;
          if ((v63 & 0x80) == 0) {
            goto LABEL_202;
          }
          v60 += 7;
          unint64_t v58 = v2;
          BOOL v14 = v61++ > 8;
        }
        while (!v14);
        uint64_t v62 = 0;
LABEL_202:
        *((void *)this + 4) = v62;
        break;
      case 0x16u:
        *((_DWORD *)this + 29) |= 0x10u;
        unint64_t v64 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v65 = *(void *)a2;
        if (v64 > 0xFFFFFFFFFFFFFFF5 || v64 + 10 > v2)
        {
          char v94 = 0;
          unsigned int v95 = 0;
          uint64_t v68 = 0;
          if (v2 <= v64) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v64)
            {
              uint64_t v68 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_207;
            }
            unint64_t v96 = v64++;
            char v97 = *(unsigned char *)(v65 + v96);
            *((void *)a2 + 1) = v64;
            v68 |= (unint64_t)(v97 & 0x7F) << v94;
            if ((v97 & 0x80) == 0) {
              break;
            }
            v94 += 7;
            BOOL v14 = v95++ > 8;
            if (v14)
            {
              uint64_t v68 = 0;
LABEL_206:
              unint64_t v2 = v96 + 1;
              goto LABEL_207;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v68 = 0;
          }
          goto LABEL_206;
        }
        char v66 = 0;
        unsigned int v67 = 0;
        uint64_t v68 = 0;
        do
        {
          unint64_t v2 = v64 + 1;
          *((void *)a2 + 1) = v64 + 1;
          char v69 = *(unsigned char *)(v65 + v64);
          v68 |= (unint64_t)(v69 & 0x7F) << v66;
          if ((v69 & 0x80) == 0) {
            goto LABEL_207;
          }
          v66 += 7;
          unint64_t v64 = v2;
          BOOL v14 = v67++ > 8;
        }
        while (!v14);
        uint64_t v68 = 0;
LABEL_207:
        *((void *)this + 5) = v68;
        break;
      default:
        goto LABEL_19;
    }
LABEL_208:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GaitCycleSegmentationState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 116);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64));
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
LABEL_44:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_DWORD *)(v3 + 116) & 0x10) == 0) {
      return this;
    }
    goto LABEL_45;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) != 0) {
    goto LABEL_44;
  }
LABEL_22:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_45:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::GaitCycleSegmentationState::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 116);
  int v3 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 114) != *(unsigned __int8 *)(a2 + 114)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 115) != *(unsigned __int8 *)(a2 + 115)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 116) & 0x10) == 0;
  if ((v2 & 0x10) != 0) {
    return (v3 & 0x10) != 0 && *(void *)(a1 + 40) == *(void *)(a2 + 40);
  }
  return v4;
}

uint64_t CMMsl::GaitCycleSegmentationState::hash_value(CMMsl::GaitCycleSegmentationState *this)
{
  int v1 = *((_DWORD *)this + 29);
  if ((v1 & 0x80) != 0)
  {
    double v2 = *((double *)this + 8);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x100000) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned __int8 *)this + 114);
      if ((v1 & 0x80000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_48;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned __int8 *)this + 113);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v4 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned __int8 *)this + 115);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v5 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_6:
    uint64_t v6 = *((unsigned __int8 *)this + 112);
    if ((v1 & 4) != 0) {
      goto LABEL_7;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v6 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_7:
    uint64_t v7 = *((void *)this + 3);
    if ((v1 & 2) != 0) {
      goto LABEL_8;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v7 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_8:
    uint64_t v8 = *((void *)this + 2);
    if (v1) {
      goto LABEL_9;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v8 = 0;
  if (v1)
  {
LABEL_9:
    uint64_t v9 = *((void *)this + 1);
    if ((v1 & 0x20) != 0) {
      goto LABEL_10;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v9 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_10:
    uint64_t v10 = *((void *)this + 6);
    if ((v1 & 0x40) != 0) {
      goto LABEL_11;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v10 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_11:
    uint64_t v11 = *((void *)this + 7);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_12;
    }
LABEL_56:
    uint64_t v13 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_15;
    }
LABEL_57:
    uint64_t v15 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_18;
    }
LABEL_58:
    uint64_t v17 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_21;
    }
LABEL_59:
    uint64_t v19 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_24;
    }
LABEL_60:
    uint64_t v21 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_27;
    }
LABEL_61:
    uint64_t v23 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_30;
    }
LABEL_62:
    uint64_t v25 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_33;
    }
LABEL_63:
    uint64_t v27 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_36;
    }
LABEL_64:
    uint64_t v29 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_39;
    }
LABEL_65:
    uint64_t v31 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_42;
    }
LABEL_66:
    uint64_t v32 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_43;
    }
LABEL_67:
    uint64_t v33 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33;
  }
LABEL_55:
  uint64_t v11 = 0;
  if ((v1 & 0x2000) == 0) {
    goto LABEL_56;
  }
LABEL_12:
  float v12 = *((float *)this + 23);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_57;
  }
LABEL_15:
  float v14 = *((float *)this + 26);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_58;
  }
LABEL_18:
  float v16 = *((float *)this + 22);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_59;
  }
LABEL_21:
  float v18 = *((float *)this + 21);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_60;
  }
LABEL_24:
  float v20 = *((float *)this + 25);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_61;
  }
LABEL_27:
  float v22 = *((float *)this + 19);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_62;
  }
LABEL_30:
  float v24 = *((float *)this + 20);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_63;
  }
LABEL_33:
  float v26 = *((float *)this + 24);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_64;
  }
LABEL_36:
  float v28 = *((float *)this + 18);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_65;
  }
LABEL_39:
  float v30 = *((float *)this + 27);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_66;
  }
LABEL_42:
  uint64_t v32 = *((void *)this + 4);
  if ((v1 & 0x10) == 0) {
    goto LABEL_67;
  }
LABEL_43:
  uint64_t v33 = *((void *)this + 5);
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33;
}

uint64_t CMMsl::GaitEventsHKResult::GaitEventsHKResult(uint64_t this)
{
  *(void *)this = &unk_270641AD8;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

{
  *(void *)this = &unk_270641AD8;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

void CMMsl::GaitEventsHKResult::~GaitEventsHKResult(CMMsl::GaitEventsHKResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::GaitEventsHKResult::GaitEventsHKResult(CMMsl::GaitEventsHKResult *this, const CMMsl::GaitEventsHKResult *a2)
{
  *(void *)this = &unk_270641AD8;
  *((_DWORD *)this + 19) = 0;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    __int16 v3 = 4;
    *((_WORD *)this + 38) = 4;
    *((double *)this + 3) = result;
    __int16 v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_WORD *)this + 38) = v3;
    *((double *)this + 5) = result;
    __int16 v2 = *((_WORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    v3 |= 8u;
    *((_WORD *)this + 38) = v3;
    *((double *)this + 4) = result;
    __int16 v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 6) = result;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  char v5 = *((unsigned char *)a2 + 73);
  v3 |= 0x200u;
  *((_WORD *)this + 38) = v3;
  *((unsigned char *)this + 73) = v5;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_22:
    double result = *((double *)a2 + 2);
    *((_WORD *)this + 38) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_21:
  char v6 = *((unsigned char *)a2 + 72);
  v3 |= 0x100u;
  *((_WORD *)this + 38) = v3;
  *((unsigned char *)this + 72) = v6;
  if ((*((_WORD *)a2 + 38) & 2) != 0) {
    goto LABEL_22;
  }
  return result;
}

uint64_t CMMsl::GaitEventsHKResult::operator=(uint64_t a1, const CMMsl::GaitEventsHKResult *a2)
{
  if ((const CMMsl::GaitEventsHKResult *)a1 != a2)
  {
    CMMsl::GaitEventsHKResult::GaitEventsHKResult((CMMsl::GaitEventsHKResult *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v16;
    int v16 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 73);
    *(unsigned char *)(a1 + 73) = v15;
    char v15 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 72);
    *(unsigned char *)(a1 + 72) = v14;
    char v14 = v3;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GaitEventsHKResult *a2, CMMsl::GaitEventsHKResult *a3)
{
  int v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  LOBYTE(v3) = *((unsigned char *)this + 73);
  *((unsigned char *)this + 73) = *((unsigned char *)a2 + 73);
  *((unsigned char *)a2 + 73) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 72);
  *((unsigned char *)this + 72) = *((unsigned char *)a2 + 72);
  *((unsigned char *)a2 + 72) = v3;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::GaitEventsHKResult::GaitEventsHKResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641AD8;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::GaitEventsHKResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::GaitEventsHKResult::GaitEventsHKResult((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v16;
    int v16 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 73);
    *(unsigned char *)(a1 + 73) = v15;
    char v15 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 72);
    *(unsigned char *)(a1 + 72) = v14;
    char v14 = v3;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GaitEventsHKResult::formatText(CMMsl::GaitEventsHKResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 38);
  if (v5)
  {
    PB::TextFormatter::format(a2, "emptyField2", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 38);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*((_WORD *)this + 38) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "emptyField3");
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "hasValidGroundContactTime");
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "leftGroundContactTime", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "leftGroundContactTimePercentage", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "rightGroundContactTime", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "rightGroundContactTimePercentage", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "windowEndTime", *((double *)this + 7));
  if ((*((_WORD *)this + 38) & 0x80) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "windowStartTime", *((double *)this + 8));
LABEL_12:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GaitEventsHKResult::readFrom(CMMsl::GaitEventsHKResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_57;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 38) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_56;
      case 2u:
        *((_WORD *)this + 38) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_56;
      case 3u:
        *((_WORD *)this + 38) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_56;
      case 4u:
        *((_WORD *)this + 38) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_56;
      case 5u:
        *((_WORD *)this + 38) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_56;
      case 6u:
        *((_WORD *)this + 38) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_56;
      case 7u:
        *((_WORD *)this + 38) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_56;
      case 8u:
        *((_WORD *)this + 38) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 73) = v21;
        break;
      case 9u:
        *((_WORD *)this + 38) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 72) = v23;
        break;
      case 0xAu:
        *((_WORD *)this + 38) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_48:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_56:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_57:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GaitEventsHKResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 76);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::write(a2);
    if ((*(_WORD *)(v3 + 76) & 2) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x100) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_21:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::GaitEventsHKResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 76);
  __int16 v3 = *(_WORD *)(a2 + 76);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 76) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 76) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 76) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 76) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 76) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 76) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v4;
}

uint64_t CMMsl::GaitEventsHKResult::hash_value(CMMsl::GaitEventsHKResult *this)
{
  __int16 v1 = *((_WORD *)this + 38);
  if ((v1 & 4) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_29:
    double v3 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_6;
    }
LABEL_30:
    double v4 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_31:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_32:
    double v6 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_15;
    }
LABEL_33:
    double v7 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_18;
    }
LABEL_34:
    double v8 = 0.0;
    if ((*((_WORD *)this + 38) & 0x200) != 0) {
      goto LABEL_21;
    }
    goto LABEL_35;
  }
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_29;
  }
LABEL_3:
  double v3 = *((double *)this + 5);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_30;
  }
LABEL_6:
  double v4 = *((double *)this + 4);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_31;
  }
LABEL_9:
  double v5 = *((double *)this + 6);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_33;
  }
LABEL_15:
  double v7 = *((double *)this + 8);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_34;
  }
LABEL_18:
  double v8 = *((double *)this + 7);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 38) & 0x200) != 0)
  {
LABEL_21:
    uint64_t v9 = *((unsigned __int8 *)this + 73);
    if ((*((_WORD *)this + 38) & 0x100) != 0) {
      goto LABEL_22;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v9 = 0;
  if ((*((_WORD *)this + 38) & 0x100) != 0)
  {
LABEL_22:
    uint64_t v10 = *((unsigned __int8 *)this + 72);
    if ((v1 & 2) != 0) {
      goto LABEL_23;
    }
LABEL_37:
    double v11 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ v9 ^ v10 ^ *(void *)&v11;
  }
LABEL_36:
  uint64_t v10 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_37;
  }
LABEL_23:
  double v11 = *((double *)this + 2);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ v9 ^ v10 ^ *(void *)&v11;
}

uint64_t CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(uint64_t this)
{
  *(void *)this = &unk_270641B10;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(void *)this = &unk_270641B10;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

void CMMsl::GaitEventsModelOutput::~GaitEventsModelOutput(CMMsl::GaitEventsModelOutput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(CMMsl::GaitEventsModelOutput *this, const CMMsl::GaitEventsModelOutput *a2)
{
  *(void *)this = &unk_270641B10;
  *((_DWORD *)this + 22) = 0;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x800) != 0)
  {
    char v4 = *((unsigned char *)a2 + 84);
    __int16 v3 = 2048;
    *((_WORD *)this + 44) = 2048;
    *((unsigned char *)this + 84) = v4;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if (v2)
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 1) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 2) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 6) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 5) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v6 = *((_DWORD *)a2 + 19);
  v3 |= 0x200u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 19) = v6;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v7 = *((unsigned char *)a2 + 85);
  v3 |= 0x1000u;
  *((_WORD *)this + 44) = v3;
  *((unsigned char *)this + 85) = v7;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  char v8 = *((unsigned char *)a2 + 86);
  v3 |= 0x2000u;
  *((_WORD *)this + 44) = v3;
  *((unsigned char *)this + 86) = v8;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v9 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 20) = v9;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_30:
    double result = *((double *)a2 + 3);
    *((_WORD *)this + 44) = v3 | 4;
    *((double *)this + 3) = result;
    return result;
  }
LABEL_29:
  int v10 = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 18) = v10;
  if ((*((_WORD *)a2 + 44) & 4) != 0) {
    goto LABEL_30;
  }
  return result;
}

CMMsl *CMMsl::GaitEventsModelOutput::operator=(CMMsl *a1, const CMMsl::GaitEventsModelOutput *a2)
{
  if (a1 != a2)
  {
    CMMsl::GaitEventsModelOutput::GaitEventsModelOutput((CMMsl::GaitEventsModelOutput *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitEventsModelOutput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GaitEventsModelOutput *a2, CMMsl::GaitEventsModelOutput *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 84);
  *((unsigned char *)this + 84) = *((unsigned char *)a2 + 84);
  *((unsigned char *)a2 + 84) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  int v11 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v11;
  LOBYTE(v11) = *((unsigned char *)this + 85);
  *((unsigned char *)this + 85) = *((unsigned char *)a2 + 85);
  *((unsigned char *)a2 + 85) = v11;
  LOBYTE(v11) = *((unsigned char *)this + 86);
  *((unsigned char *)this + 86) = *((unsigned char *)a2 + 86);
  *((unsigned char *)a2 + 86) = v11;
  int v12 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v12;
  int v13 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v13;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641B10;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  *(unsigned char *)(a1 + 86) = *(unsigned char *)(a2 + 86);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::GaitEventsModelOutput::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GaitEventsModelOutput::GaitEventsModelOutput((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitEventsModelOutput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GaitEventsModelOutput::formatText(CMMsl::GaitEventsModelOutput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(a2, "crownOrientation");
    __int16 v5 = *((_WORD *)this + 44);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "initialContactTime", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isSuccessful");
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "isValidSide");
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "isValidToeOff");
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "meanRotationZ", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "relativeInitialContactTime", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "relativeToeOffTime", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "stepSide");
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "toeOffTime", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "windowEndTime", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "windowStartTime", *((double *)this + 8));
  if ((*((_WORD *)this + 44) & 0x400) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "wristOrientation");
LABEL_16:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GaitEventsModelOutput::readFrom(CMMsl::GaitEventsModelOutput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_118;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 44) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 84) = v21;
        break;
      case 2u:
        *((_WORD *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 3u:
        *((_WORD *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 4u:
        *((_WORD *)this + 44) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 5u:
        *((_WORD *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 6u:
        *((_WORD *)this + 44) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 7u:
        *((_WORD *)this + 44) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 8u:
        *((_WORD *)this + 44) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 9u:
        *((_WORD *)this + 44) |= 0x200u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v26 = 0;
          if (v2 <= v22) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_107;
            }
            unint64_t v46 = v22++;
            char v47 = *(unsigned char *)(v23 + v46);
            *((void *)a2 + 1) = v22;
            v26 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            BOOL v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_106:
              unint64_t v2 = v46 + 1;
              goto LABEL_107;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
          goto LABEL_106;
        }
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        do
        {
          unint64_t v2 = v22 + 1;
          *((void *)a2 + 1) = v22 + 1;
          char v27 = *(unsigned char *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0) {
            goto LABEL_107;
          }
          v24 += 7;
          unint64_t v22 = v2;
          BOOL v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_107:
        *((_DWORD *)this + 19) = v26;
        break;
      case 0xAu:
        *((_WORD *)this + 44) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 85) = v29;
        break;
      case 0xBu:
        *((_WORD *)this + 44) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v31 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v30 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v31 = v30 != 0;
        }
        *((unsigned char *)this + 86) = v31;
        break;
      case 0xCu:
        *((_WORD *)this + 44) |= 0x400u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_112;
            }
            unint64_t v50 = v32++;
            char v51 = *(unsigned char *)(v33 + v50);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            BOOL v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_111:
              unint64_t v2 = v50 + 1;
              goto LABEL_112;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_111;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_112;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_112:
        *((_DWORD *)this + 20) = v36;
        break;
      case 0xDu:
        *((_WORD *)this + 44) |= 0x100u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_117;
            }
            unint64_t v54 = v38++;
            char v55 = *(unsigned char *)(v39 + v54);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0) {
              break;
            }
            v52 += 7;
            BOOL v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_116:
              unint64_t v2 = v54 + 1;
              goto LABEL_117;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_116;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_117;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_117:
        *((_DWORD *)this + 18) = v42;
        break;
      case 0xEu:
        *((_WORD *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_102:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_73:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_118:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GaitEventsModelOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 88);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::write(a2);
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 88) & 4) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_29:
  double v5 = *(double *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::GaitEventsModelOutput::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 88);
  __int16 v3 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x800) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 85) != *(unsigned __int8 *)(a2 + 85)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 86) != *(unsigned __int8 *)(a2 + 86)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x400) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return v4;
}

uint64_t CMMsl::GaitEventsModelOutput::hash_value(CMMsl::GaitEventsModelOutput *this)
{
  __int16 v1 = *((_WORD *)this + 44);
  if ((v1 & 0x800) == 0)
  {
    uint64_t v2 = 0;
    if (v1) {
      goto LABEL_3;
    }
LABEL_33:
    double v3 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
LABEL_34:
    double v4 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_35:
    double v5 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_12;
    }
LABEL_36:
    double v6 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_15;
    }
LABEL_37:
    double v7 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_18;
    }
LABEL_38:
    double v8 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_21;
    }
LABEL_39:
    double v9 = 0.0;
    if ((*((_WORD *)this + 44) & 0x200) != 0) {
      goto LABEL_24;
    }
    goto LABEL_40;
  }
  uint64_t v2 = *((unsigned __int8 *)this + 84);
  if ((v1 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_34;
  }
LABEL_6:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_35;
  }
LABEL_9:
  double v5 = *((double *)this + 6);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_36;
  }
LABEL_12:
  double v6 = *((double *)this + 4);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_37;
  }
LABEL_15:
  double v7 = *((double *)this + 5);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_38;
  }
LABEL_18:
  double v8 = *((double *)this + 8);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_39;
  }
LABEL_21:
  double v9 = *((double *)this + 7);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x200) != 0)
  {
LABEL_24:
    uint64_t v10 = *((unsigned int *)this + 19);
    if ((*((_WORD *)this + 44) & 0x1000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v10 = 0;
  if ((*((_WORD *)this + 44) & 0x1000) != 0)
  {
LABEL_25:
    uint64_t v11 = *((unsigned __int8 *)this + 85);
    if ((*((_WORD *)this + 44) & 0x2000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v11 = 0;
  if ((*((_WORD *)this + 44) & 0x2000) != 0)
  {
LABEL_26:
    uint64_t v12 = *((unsigned __int8 *)this + 86);
    if ((*((_WORD *)this + 44) & 0x400) != 0) {
      goto LABEL_27;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v12 = 0;
  if ((*((_WORD *)this + 44) & 0x400) != 0)
  {
LABEL_27:
    uint64_t v13 = *((int *)this + 20);
    if ((*((_WORD *)this + 44) & 0x100) != 0) {
      goto LABEL_28;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v13 = 0;
  if ((*((_WORD *)this + 44) & 0x100) != 0)
  {
LABEL_28:
    uint64_t v14 = *((int *)this + 18);
    if ((v1 & 4) != 0) {
      goto LABEL_29;
    }
LABEL_45:
    double v15 = 0.0;
    return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(void *)&v15;
  }
LABEL_44:
  uint64_t v14 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_45;
  }
LABEL_29:
  double v15 = *((double *)this + 3);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(void *)&v15;
}

uint64_t CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(uint64_t this)
{
  *(void *)this = &unk_270641B48;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = &unk_270641B48;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::GaitEventsStrideAggregation::~GaitEventsStrideAggregation(CMMsl::GaitEventsStrideAggregation *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(CMMsl::GaitEventsStrideAggregation *this, const CMMsl::GaitEventsStrideAggregation *a2)
{
  *(void *)this = &unk_270641B48;
  *((_DWORD *)this + 12) = 0;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x20) != 0)
  {
    char v4 = *((unsigned char *)a2 + 44);
    char v3 = 32;
    *((unsigned char *)this + 48) = 32;
    *((unsigned char *)this + 44) = v4;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 48))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 48) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 48) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((unsigned char *)this + 48) = v3;
  *((double *)this + 3) = result;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_14:
    double result = *((double *)a2 + 4);
    *((unsigned char *)this + 48) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
LABEL_13:
  int v6 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *((unsigned char *)this + 48) = v3;
  *((_DWORD *)this + 10) = v6;
  if ((*((unsigned char *)a2 + 48) & 8) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t CMMsl::GaitEventsStrideAggregation::operator=(uint64_t a1, const CMMsl::GaitEventsStrideAggregation *a2)
{
  if ((const CMMsl::GaitEventsStrideAggregation *)a1 != a2)
  {
    CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation((CMMsl::GaitEventsStrideAggregation *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    int v13 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v12;
    char v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    int v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v9 = v4;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GaitEventsStrideAggregation *a2, CMMsl::GaitEventsStrideAggregation *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  int v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641B48;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270641B48;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::GaitEventsStrideAggregation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v13 = &unk_270641B48;
    int v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    char v4 = *(unsigned char *)(a2 + 44);
    int v5 = *(_DWORD *)(a2 + 40);
    int v18 = *(_DWORD *)(a1 + 48);
    char v6 = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v4;
    char v17 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    long long v8 = *(_OWORD *)(a2 + 8);
    int v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v5;
    int v16 = v9;
    long long v10 = *(_OWORD *)(a1 + 24);
    long long v11 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_OWORD *)(a1 + 8) = v8;
    *(_OWORD *)(a1 + 24) = v11;
    long long v14 = v7;
    long long v15 = v10;
    PB::Base::~Base((PB::Base *)&v13);
  }
  return a1;
}

uint64_t CMMsl::GaitEventsStrideAggregation::formatText(CMMsl::GaitEventsStrideAggregation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "initialContactTime", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "isSuccessful");
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "stepSide");
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "toeOffTime", *((double *)this + 3));
  if ((*((unsigned char *)this + 48) & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "windowStartTime", *((double *)this + 4));
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GaitEventsStrideAggregation::readFrom(CMMsl::GaitEventsStrideAggregation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_60;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 48) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 44) = v21;
        break;
      case 2u:
        *((unsigned char *)this + 48) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 3u:
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 4u:
        *((unsigned char *)this + 48) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 5u:
        *((unsigned char *)this + 48) |= 0x10u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v26 = 0;
          if (v2 <= v22) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_59;
            }
            unint64_t v30 = v22++;
            char v31 = *(unsigned char *)(v23 + v30);
            *((void *)a2 + 1) = v22;
            v26 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_58:
              unint64_t v2 = v30 + 1;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
          goto LABEL_58;
        }
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        do
        {
          unint64_t v2 = v22 + 1;
          *((void *)a2 + 1) = v22 + 1;
          char v27 = *(unsigned char *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0) {
            goto LABEL_59;
          }
          v24 += 7;
          unint64_t v22 = v2;
          BOOL v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_59:
        *((_DWORD *)this + 10) = v26;
        break;
      case 6u:
        *((unsigned char *)this + 48) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_54:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_43:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_60:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GaitEventsStrideAggregation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 48);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 48) & 8) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 32);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::GaitEventsStrideAggregation::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 48) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 0x20) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    if ((*(unsigned char *)(a2 + 48) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 48))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 48) & 8) == 0;
  if ((*(unsigned char *)(a1 + 48) & 8) != 0) {
    return (*(unsigned char *)(a2 + 48) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  }
  return v2;
}

uint64_t CMMsl::GaitEventsStrideAggregation::hash_value(CMMsl::GaitEventsStrideAggregation *this)
{
  if ((*((unsigned char *)this + 48) & 0x20) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 48)) {
      goto LABEL_3;
    }
LABEL_17:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 48) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_18:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 48) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_19:
    double v4 = 0.0;
    if ((*((unsigned char *)this + 48) & 0x10) != 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
  uint64_t v1 = *((unsigned __int8 *)this + 44);
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 2) == 0) {
    goto LABEL_18;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 4) == 0) {
    goto LABEL_19;
  }
LABEL_9:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 0x10) != 0)
  {
LABEL_12:
    uint64_t v5 = *((unsigned int *)this + 10);
    if ((*((unsigned char *)this + 48) & 8) != 0) {
      goto LABEL_13;
    }
LABEL_21:
    double v6 = 0.0;
    return *(void *)&v2 ^ v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ v5 ^ *(void *)&v6;
  }
LABEL_20:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 48) & 8) == 0) {
    goto LABEL_21;
  }
LABEL_13:
  double v6 = *((double *)this + 4);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ v5 ^ *(void *)&v6;
}

uint64_t CMMsl::GeomagneticData::GeomagneticData(uint64_t this)
{
  *(void *)this = &unk_270641B80;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = &unk_270641B80;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::GeomagneticData::~GeomagneticData(CMMsl::GeomagneticData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::GeomagneticData::GeomagneticData(CMMsl::GeomagneticData *this, const CMMsl::GeomagneticData *a2)
{
  *(void *)this = &unk_270641B80;
  *((_DWORD *)this + 13) = 0;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x20) != 0)
  {
    float result = *((float *)a2 + 7);
    __int16 v3 = 32;
    *((_WORD *)this + 26) = 32;
    *((float *)this + 7) = result;
    __int16 v2 = *((_WORD *)a2 + 26);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 8);
    v3 |= 0x40u;
    *((_WORD *)this + 26) = v3;
    *((float *)this + 8) = result;
    __int16 v2 = *((_WORD *)a2 + 26);
  }
LABEL_6:
  if (v2)
  {
    float result = *((float *)a2 + 2);
    v3 |= 1u;
    *((_WORD *)this + 26) = v3;
    *((float *)this + 2) = result;
    __int16 v2 = *((_WORD *)a2 + 26);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  float result = *((float *)a2 + 10);
  v3 |= 0x100u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 10) = result;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  float result = *((float *)a2 + 11);
  v3 |= 0x200u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 11) = result;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  float result = *((float *)a2 + 12);
  v3 |= 0x400u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 12) = result;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  float result = *((float *)a2 + 9);
  v3 |= 0x80u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  float result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 5) = result;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_24:
    float result = *((float *)a2 + 6);
    *((_WORD *)this + 26) = v3 | 0x10;
    *((float *)this + 6) = result;
    return result;
  }
LABEL_23:
  float result = *((float *)a2 + 4);
  v3 |= 4u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 4) = result;
  if ((*((_WORD *)a2 + 26) & 0x10) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::GeomagneticData::operator=(CMMsl *a1, const CMMsl::GeomagneticData *a2)
{
  if (a1 != a2)
  {
    CMMsl::GeomagneticData::GeomagneticData((CMMsl::GeomagneticData *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GeomagneticData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GeomagneticData *a2, CMMsl::GeomagneticData *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  int v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  int v6 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6;
  int v7 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v7;
  int v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  int v9 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v9;
  int v10 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  int v11 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v11;
  int v12 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v12;
  int v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::GeomagneticData::GeomagneticData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641B80;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::GeomagneticData::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GeomagneticData::GeomagneticData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GeomagneticData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GeomagneticData::formatText(CMMsl::GeomagneticData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 26);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitude", *((float *)this + 2));
    __int16 v5 = *((_WORD *)this + 26);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "decimalYear", *((float *)this + 3));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "declination", *((float *)this + 4));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "horizontal", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "inclination", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "latitude", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "longitude", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "magnitude", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "x", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "y", *((float *)this + 11));
  if ((*((_WORD *)this + 26) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 12));
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GeomagneticData::readFrom(CMMsl::GeomagneticData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_58;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 26) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 2u:
        *((_WORD *)this + 26) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 3u:
        *((_WORD *)this + 26) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 4u:
        *((_WORD *)this + 26) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 5u:
        *((_WORD *)this + 26) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 6u:
        *((_WORD *)this + 26) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 7u:
        *((_WORD *)this + 26) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 8u:
        *((_WORD *)this + 26) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 9u:
        *((_WORD *)this + 26) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 0xAu:
        *((_WORD *)this + 26) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 0xBu:
        *((_WORD *)this + 26) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_57:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_55:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_58:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GeomagneticData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 52);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28));
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(float *)(v3 + 16));
    if ((*(_WORD *)(v3 + 52) & 0x10) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_23:
  float v5 = *(float *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::GeomagneticData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 52);
  __int16 v3 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x100) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x200) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0) {
    return (v3 & 0x10) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v4;
}

uint64_t CMMsl::GeomagneticData::hash_value(CMMsl::GeomagneticData *this)
{
  __int16 v1 = *((_WORD *)this + 26);
  if ((v1 & 0x20) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v4 = 0;
    if (v1) {
      goto LABEL_6;
    }
LABEL_37:
    uint64_t v6 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_9;
    }
LABEL_38:
    uint64_t v8 = 0;
    if ((*((_WORD *)this + 26) & 0x100) != 0) {
      goto LABEL_12;
    }
LABEL_39:
    uint64_t v10 = 0;
    if ((*((_WORD *)this + 26) & 0x200) != 0) {
      goto LABEL_15;
    }
LABEL_40:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 26) & 0x400) != 0) {
      goto LABEL_18;
    }
LABEL_41:
    uint64_t v14 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_21;
    }
LABEL_42:
    uint64_t v16 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_24;
    }
LABEL_43:
    uint64_t v18 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_27;
    }
    goto LABEL_44;
  }
  float v23 = *((float *)this + 7);
  uint64_t v2 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_36;
  }
LABEL_3:
  float v3 = *((float *)this + 8);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_6:
  float v5 = *((float *)this + 2);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_38;
  }
LABEL_9:
  float v7 = *((float *)this + 3);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((*((_WORD *)this + 26) & 0x100) == 0) {
    goto LABEL_39;
  }
LABEL_12:
  float v9 = *((float *)this + 10);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((*((_WORD *)this + 26) & 0x200) == 0) {
    goto LABEL_40;
  }
LABEL_15:
  float v11 = *((float *)this + 11);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 26) & 0x400) == 0) {
    goto LABEL_41;
  }
LABEL_18:
  float v13 = *((float *)this + 12);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_42;
  }
LABEL_21:
  float v15 = *((float *)this + 9);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_43;
  }
LABEL_24:
  float v17 = *((float *)this + 5);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_27:
    float v19 = *((float *)this + 4);
    uint64_t v20 = LODWORD(v19);
    if (v19 == 0.0) {
      uint64_t v20 = 0;
    }
    if ((v1 & 0x10) != 0) {
      goto LABEL_30;
    }
LABEL_45:
    uint64_t v22 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22;
  }
LABEL_44:
  uint64_t v20 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_45;
  }
LABEL_30:
  float v21 = *((float *)this + 6);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(uint64_t this)
{
  *(void *)this = &unk_270641BB8;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_270641BB8;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::GnssAvailabilityPredictorData::~GnssAvailabilityPredictorData(CMMsl::GnssAvailabilityPredictorData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(CMMsl::GnssAvailabilityPredictorData *this, const CMMsl::GnssAvailabilityPredictorData *a2)
{
  *(void *)this = &unk_270641BB8;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    char v3 = 2;
    *((unsigned char *)this + 32) = 2;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 8u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 7) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 32) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  int v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 6) = v6;
  if (*((unsigned char *)a2 + 32)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::operator=(uint64_t a1, const CMMsl::GnssAvailabilityPredictorData *a2)
{
  if ((const CMMsl::GnssAvailabilityPredictorData *)a1 != a2)
  {
    CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData((CMMsl::GnssAvailabilityPredictorData *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GnssAvailabilityPredictorData *a2, CMMsl::GnssAvailabilityPredictorData *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641BB8;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270641BB8;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_270641BB8;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::formatText(CMMsl::GnssAvailabilityPredictorData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "measSource");
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "state");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "stateProbability", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GnssAvailabilityPredictorData::readFrom(CMMsl::GnssAvailabilityPredictorData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_69;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_42;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_58;
      case 2u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_63;
            }
            unint64_t v34 = v20++;
            char v35 = *(unsigned char *)(v21 + v34);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_62:
              unint64_t v2 = v34 + 1;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_62;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_63;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_63:
        *((_DWORD *)this + 7) = v24;
        break;
      case 3u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_68;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_67:
              unint64_t v2 = v38 + 1;
              goto LABEL_68;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_67;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_68;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_68:
        *((_DWORD *)this + 6) = v30;
        break;
      case 4u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_58:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_42:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_69:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::writeVarInt(a2);
      if ((*(unsigned char *)(v3 + 32) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::GnssAvailabilityPredictorData::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 1) == 0;
  if (*(unsigned char *)(a1 + 32)) {
    return (*(unsigned char *)(a2 + 32) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::hash_value(CMMsl::GnssAvailabilityPredictorData *this)
{
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((int *)this + 7);
      if ((*((unsigned char *)this + 32) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 6);
    if (*((unsigned char *)this + 32)) {
      goto LABEL_5;
    }
LABEL_13:
    double v4 = 0.0;
    return v2 ^ *(void *)&v1 ^ v3 ^ *(void *)&v4;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_5:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return v2 ^ *(void *)&v1 ^ v3 ^ *(void *)&v4;
}

double CMMsl::GnssLeechLocationData::GnssLeechLocationData(CMMsl::GnssLeechLocationData *this)
{
  *(void *)this = &unk_270641BF0;
  *((_DWORD *)this + 38) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_270641BF0;
  *((_DWORD *)this + 38) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = 0;
  return result;
}

void CMMsl::GnssLeechLocationData::~GnssLeechLocationData(CMMsl::GnssLeechLocationData *this)
{
  *(void *)this = &unk_270641BF0;
  uint64_t v2 = (void **)((char *)this + 24);
  uint64_t v3 = (void **)((char *)this + 120);
  sub_2572C6D4C(&v3);
  uint64_t v3 = (void **)((char *)this + 96);
  sub_2572C6D4C(&v3);
  uint64_t v3 = (void **)((char *)this + 72);
  sub_2572C6D4C(&v3);
  uint64_t v3 = (void **)((char *)this + 48);
  sub_2572C6D4C(&v3);
  uint64_t v3 = v2;
  sub_2572C6D4C(&v3);
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GnssLeechLocationData::~GnssLeechLocationData(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::GnssLeechLocationData::GnssLeechLocationData(uint64_t this, const CMMsl::GnssLeechLocationData *a2)
{
  *(void *)this = &unk_270641BF0;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 120) = 0u;
  *(_DWORD *)(this + 152) = 0;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(void *)(this + 136) = 0;
  if ((*((unsigned char *)a2 + 152) & 4) != 0)
  {
    uint64_t v2 = *((void *)a2 + 18);
    *(unsigned char *)(this + 152) = 4;
    *(void *)(this + 144) = v2;
  }
  if (*((void *)a2 + 12) != *((void *)a2 + 13)) {
    sub_257141A3C();
  }
  if (*((void *)a2 + 9) != *((void *)a2 + 10)) {
    sub_257141A3C();
  }
  if (*((void *)a2 + 15) != *((void *)a2 + 16)) {
    sub_257141A3C();
  }
  if (*((void *)a2 + 6) != *((void *)a2 + 7)) {
    sub_257141A3C();
  }
  if (*((void *)a2 + 3) != *((void *)a2 + 4)) {
    sub_257141A3C();
  }
  char v3 = *((unsigned char *)a2 + 152);
  if ((v3 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    *(unsigned char *)(this + 152) |= 2u;
    *(void *)(this + 16) = v4;
    char v3 = *((unsigned char *)a2 + 152);
  }
  if (v3)
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(unsigned char *)(this + 152) |= 1u;
    *(void *)(this + 8) = v5;
  }
  return this;
}

void sub_257141A3C()
{
}

void sub_257141B74(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

CMMsl *CMMsl::GnssLeechLocationData::operator=(CMMsl *a1, const CMMsl::GnssLeechLocationData *a2)
{
  if (a1 != a2)
  {
    CMMsl::GnssLeechLocationData::GnssLeechLocationData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GnssLeechLocationData *)v5, v3);
    CMMsl::GnssLeechLocationData::~GnssLeechLocationData((CMMsl::GnssLeechLocationData *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GnssLeechLocationData *a2, CMMsl::GnssLeechLocationData *a3)
{
  int v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  uint64_t v4 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v4;
  uint64_t v5 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v5;
  uint64_t v6 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v6;
  uint64_t v7 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v7;
  uint64_t v8 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v8;
  uint64_t v9 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v9;
  uint64_t v10 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v10;
  uint64_t v11 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v11;
  uint64_t v12 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v12;
  uint64_t v13 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v13;
  uint64_t v14 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v14;
  uint64_t v15 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v15;
  uint64_t v16 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v16;
  uint64_t v17 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v17;
  uint64_t v18 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v18;
  uint64_t v19 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v19;
  uint64_t v20 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v20;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::GnssLeechLocationData::GnssLeechLocationData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641BF0;
  uint64_t v4 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = (_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v6 = (_OWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v7 = (_OWORD *)(a1 + 72);
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  sub_2572C6E0C((void **)(a1 + 96));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  sub_2572C6E0C((void **)(a1 + 72));
  *uint64_t v7 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  sub_2572C6E0C((void **)(a1 + 120));
  *uint64_t v6 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  sub_2572C6E0C(v4);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  sub_2572C6E0C((void **)(a1 + 24));
  *uint64_t v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

CMMsl *CMMsl::GnssLeechLocationData::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GnssLeechLocationData::GnssLeechLocationData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GnssLeechLocationData *)v5, v3);
    CMMsl::GnssLeechLocationData::~GnssLeechLocationData((CMMsl::GnssLeechLocationData *)v5);
  }
  return a1;
}

uint64_t CMMsl::GnssLeechLocationData::formatText(CMMsl::GnssLeechLocationData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 152);
  if (v5)
  {
    PB::TextFormatter::format(a2, "lifespan", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 152);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "machTime", *((double *)this + 2));
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  uint64_t v7 = (uint64_t *)*((void *)this + 4);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "satInfoBeidou");
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 6);
  uint64_t v10 = (uint64_t *)*((void *)this + 7);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "satInfoGalileo");
  }
  uint64_t v12 = (uint64_t *)*((void *)this + 9);
  uint64_t v13 = (uint64_t *)*((void *)this + 10);
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, a2, "satInfoGlonass");
  }
  uint64_t v15 = (uint64_t *)*((void *)this + 12);
  uint64_t v16 = (uint64_t *)*((void *)this + 13);
  while (v15 != v16)
  {
    uint64_t v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, a2, "satInfoGps");
  }
  uint64_t v18 = (uint64_t *)*((void *)this + 15);
  uint64_t v19 = (uint64_t *)*((void *)this + 16);
  while (v18 != v19)
  {
    uint64_t v20 = *v18++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v20 + 32))(v20, a2, "satInfoQzss");
  }
  if ((*((unsigned char *)this + 152) & 4) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 18));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GnssLeechLocationData::readFrom(CMMsl::GnssLeechLocationData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 152) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
          goto LABEL_36;
        }
        *((void *)this + 18) = *(void *)(*(void *)a2 + v20);
        goto LABEL_38;
      case 2u:
        sub_257142420();
      case 3u:
        sub_257142420();
      case 4u:
        sub_257142420();
      case 5u:
        sub_257142420();
      case 6u:
        sub_257142420();
      case 7u:
        *((unsigned char *)this + 152) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_36;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v22);
        goto LABEL_38;
      case 8u:
        *((unsigned char *)this + 152) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
        {
LABEL_36:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v21);
LABEL_38:
          *((void *)a2 + 1) += 8;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_39;
  }
  return result;
}

void sub_257142420()
{
}

void sub_25714256C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GnssLeechLocationData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 152) & 4) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 144));
  }
  int v4 = *(const PB::Base ***)(v3 + 96);
  char v5 = *(const PB::Base ***)(v3 + 104);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = *(const PB::Base ***)(v3 + 72);
  uint64_t v8 = *(const PB::Base ***)(v3 + 80);
  while (v7 != v8)
  {
    char v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  unsigned int v10 = *(const PB::Base ***)(v3 + 120);
  unint64_t v11 = *(const PB::Base ***)(v3 + 128);
  while (v10 != v11)
  {
    unint64_t v12 = *v10++;
    this = PB::Writer::writeSubmessage(a2, v12);
  }
  char v13 = *(const PB::Base ***)(v3 + 48);
  BOOL v14 = *(const PB::Base ***)(v3 + 56);
  while (v13 != v14)
  {
    char v15 = *v13++;
    this = PB::Writer::writeSubmessage(a2, v15);
  }
  unsigned int v16 = *(const PB::Base ***)(v3 + 24);
  unint64_t v17 = *(const PB::Base ***)(v3 + 32);
  while (v16 != v17)
  {
    char v18 = *v16++;
    this = PB::Writer::writeSubmessage(a2, v18);
  }
  char v19 = *(unsigned char *)(v3 + 152);
  if ((v19 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    char v19 = *(unsigned char *)(v3 + 152);
  }
  if (v19)
  {
    double v20 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v20);
  }
  return this;
}

BOOL CMMsl::GnssLeechLocationData::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 152);
  char v5 = *(unsigned char *)(a2 + 152);
  if ((v4 & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 152) & 4) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 152) & 4) != 0)
  {
    return 0;
  }
  uint64_t v6 = *(uint64_t **)(a1 + 96);
  uint64_t v7 = *(uint64_t **)(a1 + 104);
  uint64_t v8 = *(uint64_t **)(a2 + 96);
  if ((char *)v7 - (char *)v6 != *(void *)(a2 + 104) - (void)v8) {
    return 0;
  }
  while (v6 != v7)
  {
    BOOL result = CMMsl::SatelliteInfo::operator==(*v6, *v8);
    if (!result) {
      return result;
    }
    ++v6;
    ++v8;
  }
  unsigned int v10 = *(uint64_t **)(a1 + 72);
  unint64_t v11 = *(uint64_t **)(a1 + 80);
  unint64_t v12 = *(uint64_t **)(a2 + 72);
  if ((char *)v11 - (char *)v10 != *(void *)(a2 + 80) - (void)v12) {
    return 0;
  }
  while (v10 != v11)
  {
    BOOL result = CMMsl::SatelliteInfo::operator==(*v10, *v12);
    if (!result) {
      return result;
    }
    ++v10;
    ++v12;
  }
  char v13 = *(uint64_t **)(a1 + 120);
  BOOL v14 = *(uint64_t **)(a1 + 128);
  char v15 = *(uint64_t **)(a2 + 120);
  if ((char *)v14 - (char *)v13 != *(void *)(a2 + 128) - (void)v15) {
    return 0;
  }
  while (v13 != v14)
  {
    BOOL result = CMMsl::SatelliteInfo::operator==(*v13, *v15);
    if (!result) {
      return result;
    }
    ++v13;
    ++v15;
  }
  unsigned int v16 = *(uint64_t **)(a1 + 48);
  unint64_t v17 = *(uint64_t **)(a1 + 56);
  char v18 = *(uint64_t **)(a2 + 48);
  if ((char *)v17 - (char *)v16 != *(void *)(a2 + 56) - (void)v18) {
    return 0;
  }
  while (v16 != v17)
  {
    BOOL result = CMMsl::SatelliteInfo::operator==(*v16, *v18);
    if (!result) {
      return result;
    }
    ++v16;
    ++v18;
  }
  char v19 = *(uint64_t **)(a1 + 24);
  double v20 = *(uint64_t **)(a1 + 32);
  unint64_t v21 = *(uint64_t **)(a2 + 24);
  if ((char *)v20 - (char *)v19 != *(void *)(a2 + 32) - (void)v21) {
    return 0;
  }
  while (v19 != v20)
  {
    BOOL result = CMMsl::SatelliteInfo::operator==(*v19, *v21);
    if (!result) {
      return result;
    }
    ++v19;
    ++v21;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  BOOL result = (v5 & 1) == 0;
  if ((v4 & 1) == 0) {
    return result;
  }
  return (v5 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

uint64_t CMMsl::GnssLeechLocationData::hash_value(CMMsl::GnssLeechLocationData *this)
{
  char v2 = *((unsigned char *)this + 152);
  if ((v2 & 4) != 0)
  {
    if (*((double *)this + 18) == 0.0) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = *((void *)this + 18);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  char v4 = (CMMsl::SatelliteInfo **)*((void *)this + 12);
  char v5 = (CMMsl::SatelliteInfo **)*((void *)this + 13);
  if (v4 == v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v4++;
      v6 ^= CMMsl::SatelliteInfo::hash_value(v7);
    }
    while (v4 != v5);
  }
  uint64_t v8 = (CMMsl::SatelliteInfo **)*((void *)this + 9);
  char v9 = (CMMsl::SatelliteInfo **)*((void *)this + 10);
  if (v8 == v9)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      unint64_t v11 = *v8++;
      v10 ^= CMMsl::SatelliteInfo::hash_value(v11);
    }
    while (v8 != v9);
  }
  unint64_t v12 = (CMMsl::SatelliteInfo **)*((void *)this + 15);
  char v13 = (CMMsl::SatelliteInfo **)*((void *)this + 16);
  if (v12 == v13)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      char v15 = *v12++;
      v14 ^= CMMsl::SatelliteInfo::hash_value(v15);
    }
    while (v12 != v13);
  }
  unsigned int v16 = (CMMsl::SatelliteInfo **)*((void *)this + 6);
  unint64_t v17 = (CMMsl::SatelliteInfo **)*((void *)this + 7);
  if (v16 == v17)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      char v19 = *v16++;
      v18 ^= CMMsl::SatelliteInfo::hash_value(v19);
    }
    while (v16 != v17);
  }
  double v20 = (CMMsl::SatelliteInfo **)*((void *)this + 3);
  unint64_t v21 = (CMMsl::SatelliteInfo **)*((void *)this + 4);
  if (v20 == v21)
  {
    uint64_t v22 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_30;
    }
LABEL_35:
    double v24 = *((double *)this + 2);
    if (v24 == 0.0) {
      double v24 = 0.0;
    }
    if (v2) {
      goto LABEL_31;
    }
LABEL_38:
    double v25 = 0.0;
    return v6 ^ v3 ^ v10 ^ v14 ^ *(void *)&v24 ^ *(void *)&v25 ^ v18 ^ v22;
  }
  uint64_t v22 = 0;
  do
  {
    unsigned int v23 = *v20++;
    v22 ^= CMMsl::SatelliteInfo::hash_value(v23);
  }
  while (v20 != v21);
  if ((v2 & 2) != 0) {
    goto LABEL_35;
  }
LABEL_30:
  double v24 = 0.0;
  if ((v2 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_31:
  double v25 = *((double *)this + 1);
  if (v25 == 0.0) {
    double v25 = 0.0;
  }
  return v6 ^ v3 ^ v10 ^ v14 ^ *(void *)&v24 ^ *(void *)&v25 ^ v18 ^ v22;
}

uint64_t CMMsl::GravityConstraints::GravityConstraints(uint64_t this)
{
  *(void *)this = &unk_270641C28;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_270641C28;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::GravityConstraints::~GravityConstraints(CMMsl::GravityConstraints *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::GravityConstraints::GravityConstraints(CMMsl::GravityConstraints *this, const CMMsl::GravityConstraints *a2)
{
  *(void *)this = &unk_270641C28;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 7) = v4;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 5) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        return *(float *)&v4;
      }
      goto LABEL_12;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 4) = v4;
  if ((*((unsigned char *)a2 + 32) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_12:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 32) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::GravityConstraints::operator=(uint64_t a1, const CMMsl::GravityConstraints *a2)
{
  if ((const CMMsl::GravityConstraints *)a1 != a2)
  {
    CMMsl::GravityConstraints::GravityConstraints((CMMsl::GravityConstraints *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GravityConstraints *a2, CMMsl::GravityConstraints *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::GravityConstraints::GravityConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641C28;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270641C28;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::GravityConstraints::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = &unk_270641C28;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::GravityConstraints::formatText(CMMsl::GravityConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "gyroMaxMean", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "magnitudeDiffUnity", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "magnitudeVar", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "maxAccelStdAxis", *((float *)this + 7));
  if (*((unsigned char *)this + 32)) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GravityConstraints::readFrom(CMMsl::GravityConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_41;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_40;
      case 2u:
        *((unsigned char *)this + 32) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_39;
      case 3u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_39;
      case 4u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_39;
      case 5u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_39:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_40:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_37:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_41:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GravityConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::GravityConstraints::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 8) == 0;
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
    return (*(unsigned char *)(a2 + 32) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::GravityConstraints::hash_value(CMMsl::GravityConstraints *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_19:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 0x10) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  float v2 = *((float *)this + 7);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_19;
  }
LABEL_6:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_9:
    float v6 = *((float *)this + 4);
    uint64_t v7 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v7 = 0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v9 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9;
  }
LABEL_20:
  uint64_t v7 = 0;
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_21;
  }
LABEL_12:
  float v8 = *((float *)this + 6);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9;
}

uint64_t CMMsl::GravityCorrection::GravityCorrection(uint64_t this)
{
  *(void *)this = &unk_270641C60;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270641C60;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::GravityCorrection::~GravityCorrection(CMMsl::GravityCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270641C60;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GravityCorrection::~GravityCorrection(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::GravityCorrection::GravityCorrection(uint64_t this, const CMMsl::GravityCorrection *a2)
{
  *(void *)this = &unk_270641C60;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 20))
  {
    char v2 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) |= 1u;
    *(unsigned char *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::GravityCorrection::operator=(uint64_t a1, const CMMsl::GravityCorrection *a2)
{
  if ((const CMMsl::GravityCorrection *)a1 != a2)
  {
    CMMsl::GravityCorrection::GravityCorrection((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    CMMsl::GravityCorrection::~GravityCorrection((CMMsl::GravityCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::GravityCorrection *a2, CMMsl::GravityCorrection *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::GravityCorrection::GravityCorrection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641C60;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::GravityCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::GravityCorrection::GravityCorrection((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    CMMsl::GravityCorrection::~GravityCorrection((CMMsl::GravityCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::GravityCorrection::formatText(CMMsl::GravityCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "isAvgGrav");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GravityCorrection::readFrom(CMMsl::GravityCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v21 = v20 + 1;
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v20);
          *((void *)a2 + 1) = v21;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 16) = v23;
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GravityCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::GravityCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if ((*(unsigned char *)(a1 + 20) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

unint64_t CMMsl::GravityCorrection::hash_value(CMMsl::GravityCorrection *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  }
  if (*((unsigned char *)this + 20)) {
    uint64_t v3 = *((unsigned __int8 *)this + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::GravityCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::Gyro::~Gyro(CMMsl::Gyro *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::Gyro::Gyro(uint64_t this, const CMMsl::Gyro *a2)
{
  *(void *)this = &unk_270641C98;
  *(_DWORD *)(this + 44) = 0;
  __int16 v2 = *((_WORD *)a2 + 22);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 44) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 22);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 44) = v3;
    *(_DWORD *)(this + 28) = v5;
    __int16 v2 = *((_WORD *)a2 + 22);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *(_WORD *)(this + 44) = v3;
    *(_DWORD *)(this + 32) = v6;
    __int16 v2 = *((_WORD *)a2 + 22);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 44) = v3;
  *(_DWORD *)(this + 36) = v7;
  __int16 v2 = *((_WORD *)a2 + 22);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_WORD *)(this + 44) = v3;
  *(_DWORD *)(this + 24) = v8;
  __int16 v2 = *((_WORD *)a2 + 22);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  int v9 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 44) = v3;
  *(_DWORD *)(this + 20) = v9;
  __int16 v2 = *((_WORD *)a2 + 22);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v10 = *((unsigned char *)a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(this + 44) = v3;
  *(unsigned char *)(this + 40) = v10;
  __int16 v2 = *((_WORD *)a2 + 22);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_20:
    int v12 = *((_DWORD *)a2 + 4);
    *(_WORD *)(this + 44) = v3 | 2;
    *(_DWORD *)(this + 16) = v12;
    return this;
  }
LABEL_19:
  char v11 = *((unsigned char *)a2 + 41);
  v3 |= 0x100u;
  *(_WORD *)(this + 44) = v3;
  *(unsigned char *)(this + 41) = v11;
  if ((*((_WORD *)a2 + 22) & 2) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::Gyro::operator=(uint64_t a1, const CMMsl::Gyro *a2)
{
  if ((const CMMsl::Gyro *)a1 != a2)
  {
    CMMsl::Gyro::Gyro((uint64_t)&v11, a2);
    uint64_t v3 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v15;
    uint64_t v15 = v3;
    int v4 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v16;
    int v16 = v4;
    uint64_t v5 = v13;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v5;
    int v8 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v19;
    int v19 = v8;
    int v9 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v14;
    int v14 = v9;
    LOBYTE(v9) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v17;
    char v17 = v9;
    LOBYTE(v9) = *(unsigned char *)(a1 + 41);
    *(unsigned char *)(a1 + 41) = v18;
    char v18 = v9;
    uint64_t v12 = v6;
    uint64_t v13 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Gyro *a2, CMMsl::Gyro *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  int v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 41);
  *((unsigned char *)this + 41) = *((unsigned char *)a2 + 41);
  *((unsigned char *)a2 + 41) = v7;
  int v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::Gyro::Gyro(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641C98;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Gyro::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::Gyro::Gyro((uint64_t)&v11, a2);
    uint64_t v3 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v15;
    uint64_t v15 = v3;
    int v4 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v16;
    int v16 = v4;
    uint64_t v5 = v13;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v5;
    int v8 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v19;
    int v19 = v8;
    int v9 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v14;
    int v14 = v9;
    LOBYTE(v9) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v17;
    char v17 = v9;
    LOBYTE(v9) = *(unsigned char *)(a1 + 41);
    *(unsigned char *)(a1 + 41) = v18;
    char v18 = v9;
    uint64_t v12 = v6;
    uint64_t v13 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::Gyro::formatText(CMMsl::Gyro *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    __int16 v5 = *((_WORD *)this + 22);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sampleNumMod3");
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "subType");
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "triggerEnabled");
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "triggerOn");
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "x", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "y", *((float *)this + 8));
  if ((*((_WORD *)this + 22) & 0x40) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 9));
LABEL_11:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Gyro::readFrom(CMMsl::Gyro *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_103;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 22) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_87;
      case 2u:
        *((_WORD *)this + 22) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_86;
      case 3u:
        *((_WORD *)this + 22) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_86;
      case 4u:
        *((_WORD *)this + 22) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_86:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_87:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((_WORD *)this + 22) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_92;
            }
            unint64_t v44 = v20++;
            char v45 = *(unsigned char *)(v21 + v44);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            BOOL v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_91:
              unint64_t v2 = v44 + 1;
              goto LABEL_92;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_91;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_92;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_92:
        *((_DWORD *)this + 6) = v24;
        break;
      case 6u:
        *((_WORD *)this + 22) |= 4u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_97;
            }
            unint64_t v48 = v26++;
            char v49 = *(unsigned char *)(v27 + v48);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v46 += 7;
            BOOL v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_96:
              unint64_t v2 = v48 + 1;
              goto LABEL_97;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_96;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_97;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_97:
        *((_DWORD *)this + 5) = v30;
        break;
      case 7u:
        *((_WORD *)this + 22) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v33 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v33 = v32 != 0;
        }
        *((unsigned char *)this + 40) = v33;
        break;
      case 8u:
        *((_WORD *)this + 22) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v35 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v34 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v35 = v34 != 0;
        }
        *((unsigned char *)this + 41) = v35;
        break;
      case 9u:
        *((_WORD *)this + 22) |= 2u;
        unint64_t v36 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v37 = *(void *)a2;
        if (v36 > 0xFFFFFFFFFFFFFFF5 || v36 + 10 > v2)
        {
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v40 = 0;
          if (v2 <= v36) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v36)
            {
              LODWORD(v40) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_102;
            }
            unint64_t v52 = v36++;
            char v53 = *(unsigned char *)(v37 + v52);
            *((void *)a2 + 1) = v36;
            v40 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0) {
              break;
            }
            v50 += 7;
            BOOL v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v40) = 0;
LABEL_101:
              unint64_t v2 = v52 + 1;
              goto LABEL_102;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v40) = 0;
          }
          goto LABEL_101;
        }
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v40 = 0;
        do
        {
          unint64_t v2 = v36 + 1;
          *((void *)a2 + 1) = v36 + 1;
          char v41 = *(unsigned char *)(v37 + v36);
          v40 |= (unint64_t)(v41 & 0x7F) << v38;
          if ((v41 & 0x80) == 0) {
            goto LABEL_102;
          }
          v38 += 7;
          unint64_t v36 = v2;
          BOOL v14 = v39++ > 8;
        }
        while (!v14);
        LODWORD(v40) = 0;
LABEL_102:
        *((_DWORD *)this + 4) = v40;
        break;
      default:
        goto LABEL_19;
    }
LABEL_103:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Gyro::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 44);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    __int16 v4 = *(_WORD *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::write(a2);
    if ((*(_WORD *)(v3 + 44) & 2) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x100) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_19:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::Gyro::hash_value(CMMsl::Gyro *this)
{
  __int16 v1 = *((_WORD *)this + 22);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t v4 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_21:
    uint64_t v6 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_9;
    }
LABEL_22:
    uint64_t v8 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_20;
  }
LABEL_3:
  float v3 = *((float *)this + 7);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_21;
  }
LABEL_6:
  float v5 = *((float *)this + 8);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_22;
  }
LABEL_9:
  float v7 = *((float *)this + 9);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 8) != 0)
  {
LABEL_12:
    uint64_t v9 = *((unsigned int *)this + 6);
    if ((v1 & 4) != 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v9 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_13:
    uint64_t v10 = *((unsigned int *)this + 5);
    if ((v1 & 0x80) != 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v10 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    uint64_t v11 = *((unsigned __int8 *)this + 40);
    if ((*((_WORD *)this + 22) & 0x100) != 0) {
      goto LABEL_15;
    }
LABEL_26:
    uint64_t v12 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_16;
    }
LABEL_27:
    uint64_t v13 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_25:
  uint64_t v11 = 0;
  if ((*((_WORD *)this + 22) & 0x100) == 0) {
    goto LABEL_26;
  }
LABEL_15:
  uint64_t v12 = *((unsigned __int8 *)this + 41);
  if ((v1 & 2) == 0) {
    goto LABEL_27;
  }
LABEL_16:
  uint64_t v13 = *((int *)this + 4);
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
}

uint64_t CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(uint64_t this)
{
  *(void *)this = &unk_270641CD0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = &unk_270641CD0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::GyroBiasAndVariance::~GyroBiasAndVariance(CMMsl::GyroBiasAndVariance *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(uint64_t this, const CMMsl::GyroBiasAndVariance *a2)
{
  *(void *)this = &unk_270641CD0;
  *(_DWORD *)(this + 36) = 0;
  char v2 = *((unsigned char *)a2 + 36);
  if (v2)
  {
    int v4 = *((_DWORD *)a2 + 2);
    char v3 = 1;
    *(unsigned char *)(this + 36) = 1;
    *(_DWORD *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 36) & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 3);
    v3 |= 2u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 12) = v5;
    char v2 = *((unsigned char *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *(unsigned char *)(this + 36) = v3;
  *(_DWORD *)(this + 24) = v7;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v8 = *((_DWORD *)a2 + 7);
  v3 |= 0x20u;
  *(unsigned char *)(this + 36) = v3;
  *(_DWORD *)(this + 28) = v8;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_16:
    int v10 = *((_DWORD *)a2 + 5);
    *(unsigned char *)(this + 36) = v3 | 8;
    *(_DWORD *)(this + 20) = v10;
    return this;
  }
LABEL_15:
  int v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x40u;
  *(unsigned char *)(this + 36) = v3;
  *(_DWORD *)(this + 32) = v9;
  if ((*((unsigned char *)a2 + 36) & 8) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::GyroBiasAndVariance::operator=(uint64_t a1, const CMMsl::GyroBiasAndVariance *a2)
{
  if ((const CMMsl::GyroBiasAndVariance *)a1 != a2)
  {
    CMMsl::GyroBiasAndVariance::GyroBiasAndVariance((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v11;
    uint64_t v11 = v4;
    int v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v12;
    int v12 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v14;
    uint64_t v14 = v6;
    int v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v15;
    int v15 = v7;
    int v8 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    int v13 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroBiasAndVariance *a2, CMMsl::GyroBiasAndVariance *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  int v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  int v8 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v8;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  int v10 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v10;
  return result;
}

float CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641CD0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270641CD0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CMMsl::GyroBiasAndVariance::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v13[0] = &unk_270641CD0;
    int v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    int v4 = *(_DWORD *)(a2 + 16);
    int v5 = *(_DWORD *)(a2 + 32);
    int v6 = *(_DWORD *)(a2 + 20);
    int v18 = *(_DWORD *)(a1 + 36);
    uint64_t v7 = *(void *)(a2 + 8);
    v13[1] = *(void *)(a1 + 8);
    int v14 = *(_DWORD *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v9 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 36) = v3;
    *(void *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v9;
    uint64_t v16 = v8;
    int v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v5;
    int v17 = v10;
    int v11 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v6;
    int v15 = v11;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasAndVariance::formatText(CMMsl::GyroBiasAndVariance *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 36);
  if (v5)
  {
    PB::TextFormatter::format(a2, "biasX", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "doingBiasEstimation");
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "varianceX", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "varianceY", *((float *)this + 7));
  if ((*((unsigned char *)this + 36) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "varianceZ", *((float *)this + 8));
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GyroBiasAndVariance::readFrom(CMMsl::GyroBiasAndVariance *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_62;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_56;
      case 2u:
        *((unsigned char *)this + 36) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_56;
      case 3u:
        *((unsigned char *)this + 36) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_56;
      case 4u:
        *((unsigned char *)this + 36) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_56;
      case 5u:
        *((unsigned char *)this + 36) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_56;
      case 6u:
        *((unsigned char *)this + 36) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_56:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_40:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 7u:
        *((unsigned char *)this + 36) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_61;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_60:
              unint64_t v2 = v28 + 1;
              goto LABEL_61;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_60;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_61;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_61:
        *((_DWORD *)this + 5) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_62:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasAndVariance::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 36);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(float *)(v3 + 32));
    if ((*(unsigned char *)(v3 + 36) & 8) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x40) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_15:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::GyroBiasAndVariance::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x40) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x40) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 8) == 0;
  if ((*(unsigned char *)(a1 + 36) & 8) != 0) {
    return (*(unsigned char *)(a2 + 36) & 8) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  }
  return v2;
}

uint64_t CMMsl::GyroBiasAndVariance::hash_value(CMMsl::GyroBiasAndVariance *this)
{
  if ((*((unsigned char *)this + 36) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 36) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_22:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 36) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_23:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 36) & 0x10) != 0) {
      goto LABEL_9;
    }
LABEL_24:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 36) & 0x20) != 0) {
      goto LABEL_12;
    }
LABEL_25:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 36) & 0x40) != 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  float v13 = *((float *)this + 2);
  uint64_t v1 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 36) & 2) == 0) {
    goto LABEL_22;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 36) & 4) == 0) {
    goto LABEL_23;
  }
LABEL_6:
  float v4 = *((float *)this + 4);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 36) & 0x10) == 0) {
    goto LABEL_24;
  }
LABEL_9:
  float v6 = *((float *)this + 6);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 36) & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_12:
  float v8 = *((float *)this + 7);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 36) & 0x40) != 0)
  {
LABEL_15:
    float v10 = *((float *)this + 8);
    uint64_t v11 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v11 = 0;
    }
    if ((*((unsigned char *)this + 36) & 8) != 0) {
      goto LABEL_18;
    }
LABEL_27:
    uint64_t v12 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12;
  }
LABEL_26:
  uint64_t v11 = 0;
  if ((*((unsigned char *)this + 36) & 8) == 0) {
    goto LABEL_27;
  }
LABEL_18:
  uint64_t v12 = *((int *)this + 5);
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12;
}

double CMMsl::GyroBiasConstraints::GyroBiasConstraints(CMMsl::GyroBiasConstraints *this)
{
  *(void *)this = &unk_270641D08;
  *((_DWORD *)this + 29) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270641D08;
  *((_DWORD *)this + 29) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

void CMMsl::GyroBiasConstraints::~GyroBiasConstraints(CMMsl::GyroBiasConstraints *this)
{
  *(void *)this = &unk_270641D08;
  float v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GyroBiasConstraints::~GyroBiasConstraints(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::GyroBiasConstraints *CMMsl::GyroBiasConstraints::GyroBiasConstraints(CMMsl::GyroBiasConstraints *this, const CMMsl::GyroBiasConstraints *a2)
{
  *(void *)this = &unk_270641D08;
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v5 = (void *)((char *)this + 56);
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  char v6 = *((unsigned char *)a2 + 116);
  if (v6)
  {
    uint64_t v8 = *((void *)a2 + 13);
    char v7 = 1;
    *((unsigned char *)this + 116) = 1;
    *((void *)this + 13) = v8;
    char v6 = *((unsigned char *)a2 + 116);
    if ((v6 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v7 = 0;
  if ((*((unsigned char *)a2 + 116) & 4) != 0)
  {
LABEL_5:
    char v9 = *((unsigned char *)a2 + 113);
    v7 |= 4u;
    *((unsigned char *)this + 116) = v7;
    *((unsigned char *)this + 113) = v9;
    char v6 = *((unsigned char *)a2 + 116);
  }
LABEL_6:
  if ((v6 & 2) != 0)
  {
    char v10 = *((unsigned char *)a2 + 112);
    *((unsigned char *)this + 116) = v7 | 2;
    *((unsigned char *)this + 112) = v10;
  }
  if (this != a2)
  {
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_2572C75B4(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    sub_2572C75B4((void *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::GyroBiasConstraints::operator=(CMMsl *a1, const CMMsl::GyroBiasConstraints *a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroBiasConstraints::GyroBiasConstraints((CMMsl::GyroBiasConstraints *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasConstraints *)v5, v3);
    CMMsl::GyroBiasConstraints::~GyroBiasConstraints((CMMsl::GyroBiasConstraints *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GyroBiasConstraints *a2, CMMsl::GyroBiasConstraints *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  double result = *((double *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((double *)a2 + 13) = result;
  LOBYTE(v3) = *((unsigned char *)this + 113);
  *((unsigned char *)this + 113) = *((unsigned char *)a2 + 113);
  *((unsigned char *)a2 + 113) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 112);
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((unsigned char *)a2 + 112) = v3;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  uint64_t v11 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v11;
  uint64_t v12 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v12;
  uint64_t v13 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v13;
  uint64_t v14 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v14;
  uint64_t v15 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v15;
  uint64_t v16 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v16;
  return result;
}

uint64_t CMMsl::GyroBiasConstraints::GyroBiasConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641D08;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 56, (__n128 *)(a2 + 56));
  sub_2572C7560(a1 + 80, (__n128 *)(a2 + 80));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

CMMsl *CMMsl::GyroBiasConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GyroBiasConstraints::GyroBiasConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasConstraints *)v5, v3);
    CMMsl::GyroBiasConstraints::~GyroBiasConstraints((CMMsl::GyroBiasConstraints *)v5);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasConstraints::formatText(CMMsl::GyroBiasConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "accelVariance", v7);
  }
  if ((*((unsigned char *)this + 116) & 2) != 0) {
    PB::TextFormatter::format(a2, "allowRelaxedGyroMean");
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "gyroMean", v10);
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "gyroVariance", v13);
  }
  if ((*((unsigned char *)this + 116) & 4) != 0) {
    PB::TextFormatter::format(a2, "stillOnAll");
  }
  uint64_t v14 = (float *)*((void *)this + 10);
  uint64_t v15 = (float *)*((void *)this + 11);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(a2, "temperatureBias", v16);
  }
  if (*((unsigned char *)this + 116)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 13));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::GyroBiasConstraints::readFrom(CMMsl::GyroBiasConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 116) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_202;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v20);
          uint64_t v21 = *((void *)a2 + 1) + 8;
          goto LABEL_204;
        case 2u:
          *((unsigned char *)this + 116) |= 4u;
          unint64_t v22 = *((void *)a2 + 1);
          if (v22 >= *((void *)a2 + 2))
          {
            BOOL v25 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v23 = v22 + 1;
            int v24 = *(unsigned __int8 *)(*(void *)a2 + v22);
            *((void *)a2 + 1) = v23;
            BOOL v25 = v24 != 0;
          }
          *((unsigned char *)this + 113) = v25;
          goto LABEL_205;
        case 3u:
          *((unsigned char *)this + 116) |= 2u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 >= *((void *)a2 + 2))
          {
            BOOL v29 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v27 = v26 + 1;
            int v28 = *(unsigned __int8 *)(*(void *)a2 + v26);
            *((void *)a2 + 1) = v27;
            BOOL v29 = v28 != 0;
          }
          *((unsigned char *)this + 112) = v29;
          goto LABEL_205;
        case 4u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v30 = *((void *)a2 + 1);
            unint64_t v31 = *((void *)a2 + 2);
            while (v30 < v31 && !*((unsigned char *)a2 + 24))
            {
              BOOL v33 = (char *)*((void *)this + 5);
              unint64_t v32 = *((void *)this + 6);
              if ((unint64_t)v33 >= v32)
              {
                BOOL v35 = (char *)*((void *)this + 4);
                uint64_t v36 = (v33 - v35) >> 2;
                unint64_t v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 62) {
                  goto LABEL_212;
                }
                uint64_t v38 = v32 - (void)v35;
                if (v38 >> 1 > v37) {
                  unint64_t v37 = v38 >> 1;
                }
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v39 = v37;
                }
                if (v39)
                {
                  unint64_t v39 = (unint64_t)sub_2572C76F0(v39);
                  BOOL v35 = (char *)*((void *)this + 4);
                  BOOL v33 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v40 = 0;
                }
                char v41 = (_DWORD *)(v39 + 4 * v36);
                *char v41 = 0;
                int v34 = v41 + 1;
                while (v33 != v35)
                {
                  int v42 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *--char v41 = v42;
                }
                *((void *)this + 4) = v41;
                *((void *)this + 5) = v34;
                *((void *)this + 6) = v39 + 4 * v40;
                if (v35) {
                  operator delete(v35);
                }
              }
              else
              {
                *(_DWORD *)BOOL v33 = 0;
                int v34 = v33 + 4;
              }
              *((void *)this + 5) = v34;
              unint64_t v43 = *((void *)a2 + 1);
              if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)a2 + 2)) {
                goto LABEL_126;
              }
              *(v34 - 1) = *(_DWORD *)(*(void *)a2 + v43);
              unint64_t v31 = *((void *)a2 + 2);
              unint64_t v30 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v30;
            }
            goto LABEL_127;
          }
          unsigned int v87 = (char *)*((void *)this + 5);
          unint64_t v86 = *((void *)this + 6);
          if ((unint64_t)v87 >= v86)
          {
            unsigned int v95 = (char *)*((void *)this + 4);
            uint64_t v96 = (v87 - v95) >> 2;
            unint64_t v97 = v96 + 1;
            if ((unint64_t)(v96 + 1) >> 62) {
              goto LABEL_212;
            }
            uint64_t v98 = v86 - (void)v95;
            if (v98 >> 1 > v97) {
              unint64_t v97 = v98 >> 1;
            }
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v99 = v97;
            }
            if (v99)
            {
              unint64_t v99 = (unint64_t)sub_2572C76F0(v99);
              unsigned int v95 = (char *)*((void *)this + 4);
              unsigned int v87 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v100 = 0;
            }
            unint64_t v119 = (_DWORD *)(v99 + 4 * v96);
            *unint64_t v119 = 0;
            unint64_t v88 = v119 + 1;
            while (v87 != v95)
            {
              int v120 = *((_DWORD *)v87 - 1);
              v87 -= 4;
              *--unint64_t v119 = v120;
            }
            *((void *)this + 4) = v119;
            *((void *)this + 5) = v88;
            *((void *)this + 6) = v99 + 4 * v100;
            if (v95) {
              operator delete(v95);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v87 = 0;
            unint64_t v88 = v87 + 4;
          }
          *((void *)this + 5) = v88;
          goto LABEL_200;
        case 5u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v44 = *((void *)a2 + 1);
            unint64_t v45 = *((void *)a2 + 2);
            while (v44 < v45 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v47 = (char *)*((void *)this + 8);
              unint64_t v46 = *((void *)this + 9);
              if ((unint64_t)v47 >= v46)
              {
                char v49 = (char *)*((void *)this + 7);
                uint64_t v50 = (v47 - v49) >> 2;
                unint64_t v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 62) {
                  goto LABEL_212;
                }
                uint64_t v52 = v46 - (void)v49;
                if (v52 >> 1 > v51) {
                  unint64_t v51 = v52 >> 1;
                }
                if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v53 = v51;
                }
                if (v53)
                {
                  unint64_t v53 = (unint64_t)sub_2572C76F0(v53);
                  char v49 = (char *)*((void *)this + 7);
                  unsigned int v47 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v54 = 0;
                }
                char v55 = (_DWORD *)(v53 + 4 * v50);
                *char v55 = 0;
                unint64_t v48 = v55 + 1;
                while (v47 != v49)
                {
                  int v56 = *((_DWORD *)v47 - 1);
                  v47 -= 4;
                  *--char v55 = v56;
                }
                *((void *)this + 7) = v55;
                *((void *)this + 8) = v48;
                *((void *)this + 9) = v53 + 4 * v54;
                if (v49) {
                  operator delete(v49);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v47 = 0;
                unint64_t v48 = v47 + 4;
              }
              *((void *)this + 8) = v48;
              unint64_t v57 = *((void *)a2 + 1);
              if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)a2 + 2)) {
                goto LABEL_126;
              }
              *(v48 - 1) = *(_DWORD *)(*(void *)a2 + v57);
              unint64_t v45 = *((void *)a2 + 2);
              unint64_t v44 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v44;
            }
            goto LABEL_127;
          }
          char v90 = (char *)*((void *)this + 8);
          unint64_t v89 = *((void *)this + 9);
          if ((unint64_t)v90 >= v89)
          {
            uint64_t v101 = (char *)*((void *)this + 7);
            uint64_t v102 = (v90 - v101) >> 2;
            unint64_t v103 = v102 + 1;
            if ((unint64_t)(v102 + 1) >> 62) {
              goto LABEL_212;
            }
            uint64_t v104 = v89 - (void)v101;
            if (v104 >> 1 > v103) {
              unint64_t v103 = v104 >> 1;
            }
            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v105 = v103;
            }
            if (v105)
            {
              unint64_t v105 = (unint64_t)sub_2572C76F0(v105);
              uint64_t v101 = (char *)*((void *)this + 7);
              char v90 = (char *)*((void *)this + 8);
            }
            else
            {
              uint64_t v106 = 0;
            }
            unint64_t v121 = (_DWORD *)(v105 + 4 * v102);
            *unint64_t v121 = 0;
            unint64_t v88 = v121 + 1;
            while (v90 != v101)
            {
              int v122 = *((_DWORD *)v90 - 1);
              v90 -= 4;
              *--unint64_t v121 = v122;
            }
            *((void *)this + 7) = v121;
            *((void *)this + 8) = v88;
            *((void *)this + 9) = v105 + 4 * v106;
            if (v101) {
              operator delete(v101);
            }
          }
          else
          {
            *(_DWORD *)char v90 = 0;
            unint64_t v88 = v90 + 4;
          }
          *((void *)this + 8) = v88;
          goto LABEL_200;
        case 6u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v58 = *((void *)a2 + 1);
            unint64_t v59 = *((void *)a2 + 2);
            while (v58 < v59 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v61 = (char *)*((void *)this + 11);
              unint64_t v60 = *((void *)this + 12);
              if ((unint64_t)v61 >= v60)
              {
                char v63 = (char *)*((void *)this + 10);
                uint64_t v64 = (v61 - v63) >> 2;
                unint64_t v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 62) {
                  goto LABEL_212;
                }
                uint64_t v66 = v60 - (void)v63;
                if (v66 >> 1 > v65) {
                  unint64_t v65 = v66 >> 1;
                }
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v67 = v65;
                }
                if (v67)
                {
                  unint64_t v67 = (unint64_t)sub_2572C76F0(v67);
                  char v63 = (char *)*((void *)this + 10);
                  unsigned int v61 = (char *)*((void *)this + 11);
                }
                else
                {
                  uint64_t v68 = 0;
                }
                char v69 = (_DWORD *)(v67 + 4 * v64);
                *char v69 = 0;
                uint64_t v62 = v69 + 1;
                while (v61 != v63)
                {
                  int v70 = *((_DWORD *)v61 - 1);
                  v61 -= 4;
                  *--char v69 = v70;
                }
                *((void *)this + 10) = v69;
                *((void *)this + 11) = v62;
                *((void *)this + 12) = v67 + 4 * v68;
                if (v63) {
                  operator delete(v63);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v61 = 0;
                uint64_t v62 = v61 + 4;
              }
              *((void *)this + 11) = v62;
              unint64_t v71 = *((void *)a2 + 1);
              if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)a2 + 2)) {
                goto LABEL_126;
              }
              *(v62 - 1) = *(_DWORD *)(*(void *)a2 + v71);
              unint64_t v59 = *((void *)a2 + 2);
              unint64_t v58 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v58;
            }
            goto LABEL_127;
          }
          unint64_t v92 = (char *)*((void *)this + 11);
          unint64_t v91 = *((void *)this + 12);
          if ((unint64_t)v92 >= v91)
          {
            uint64_t v107 = (char *)*((void *)this + 10);
            uint64_t v108 = (v92 - v107) >> 2;
            unint64_t v109 = v108 + 1;
            if ((unint64_t)(v108 + 1) >> 62) {
              goto LABEL_212;
            }
            uint64_t v110 = v91 - (void)v107;
            if (v110 >> 1 > v109) {
              unint64_t v109 = v110 >> 1;
            }
            if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v111 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v111 = v109;
            }
            if (v111)
            {
              unint64_t v111 = (unint64_t)sub_2572C76F0(v111);
              uint64_t v107 = (char *)*((void *)this + 10);
              unint64_t v92 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v112 = 0;
            }
            uint64_t v123 = (_DWORD *)(v111 + 4 * v108);
            *uint64_t v123 = 0;
            unint64_t v88 = v123 + 1;
            while (v92 != v107)
            {
              int v124 = *((_DWORD *)v92 - 1);
              v92 -= 4;
              *--uint64_t v123 = v124;
            }
            *((void *)this + 10) = v123;
            *((void *)this + 11) = v88;
            *((void *)this + 12) = v111 + 4 * v112;
            if (v107) {
              operator delete(v107);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v92 = 0;
            unint64_t v88 = v92 + 4;
          }
          *((void *)this + 11) = v88;
          goto LABEL_200;
        case 7u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v72 = *((void *)a2 + 1);
            unint64_t v73 = *((void *)a2 + 2);
            while (v72 < v73 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v75 = (char *)*((void *)this + 2);
              unint64_t v74 = *((void *)this + 3);
              if ((unint64_t)v75 >= v74)
              {
                char v77 = (char *)*((void *)this + 1);
                uint64_t v78 = (v75 - v77) >> 2;
                unint64_t v79 = v78 + 1;
                if ((unint64_t)(v78 + 1) >> 62) {
                  goto LABEL_212;
                }
                uint64_t v80 = v74 - (void)v77;
                if (v80 >> 1 > v79) {
                  unint64_t v79 = v80 >> 1;
                }
                if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v81 = v79;
                }
                if (v81)
                {
                  unint64_t v81 = (unint64_t)sub_2572C76F0(v81);
                  char v77 = (char *)*((void *)this + 1);
                  unsigned int v75 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v82 = 0;
                }
                unsigned int v83 = (_DWORD *)(v81 + 4 * v78);
                *unsigned int v83 = 0;
                unint64_t v76 = v83 + 1;
                while (v75 != v77)
                {
                  int v84 = *((_DWORD *)v75 - 1);
                  v75 -= 4;
                  *--unsigned int v83 = v84;
                }
                *((void *)this + 1) = v83;
                *((void *)this + 2) = v76;
                *((void *)this + 3) = v81 + 4 * v82;
                if (v77) {
                  operator delete(v77);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v75 = 0;
                unint64_t v76 = v75 + 4;
              }
              *((void *)this + 2) = v76;
              unint64_t v85 = *((void *)a2 + 1);
              if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)a2 + 2))
              {
LABEL_126:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v76 - 1) = *(_DWORD *)(*(void *)a2 + v85);
              unint64_t v73 = *((void *)a2 + 2);
              unint64_t v72 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v72;
            }
LABEL_127:
            PB::Reader::recallMark();
          }
          else
          {
            char v94 = (char *)*((void *)this + 2);
            unint64_t v93 = *((void *)this + 3);
            if ((unint64_t)v94 >= v93)
            {
              unint64_t v113 = (char *)*((void *)this + 1);
              uint64_t v114 = (v94 - v113) >> 2;
              unint64_t v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 62) {
LABEL_212:
              }
                sub_2570AFD0C();
              uint64_t v116 = v93 - (void)v113;
              if (v116 >> 1 > v115) {
                unint64_t v115 = v116 >> 1;
              }
              if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v117 = v115;
              }
              if (v117)
              {
                unint64_t v117 = (unint64_t)sub_2572C76F0(v117);
                unint64_t v113 = (char *)*((void *)this + 1);
                char v94 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v118 = 0;
              }
              unsigned int v125 = (_DWORD *)(v117 + 4 * v114);
              *unsigned int v125 = 0;
              unint64_t v88 = v125 + 1;
              while (v94 != v113)
              {
                int v126 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *--unsigned int v125 = v126;
              }
              *((void *)this + 1) = v125;
              *((void *)this + 2) = v88;
              *((void *)this + 3) = v117 + 4 * v118;
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *(_DWORD *)char v94 = 0;
              unint64_t v88 = v94 + 4;
            }
            *((void *)this + 2) = v88;
LABEL_200:
            unint64_t v127 = *((void *)a2 + 1);
            if (v127 <= 0xFFFFFFFFFFFFFFFBLL && v127 + 4 <= *((void *)a2 + 2))
            {
              *(v88 - 1) = *(_DWORD *)(*(void *)a2 + v127);
              uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_204:
              *((void *)a2 + 1) = v21;
            }
            else
            {
LABEL_202:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_205;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_205:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::GyroBiasConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 116);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 116) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_19:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 116) & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  this = PB::Writer::write(a2, *(double *)(this + 104));
  char v4 = *(unsigned char *)(v3 + 116);
  if ((v4 & 4) != 0) {
    goto LABEL_19;
  }
LABEL_3:
  if ((v4 & 2) != 0) {
LABEL_4:
  }
    this = PB::Writer::write(a2);
LABEL_5:
  uint64_t v5 = *(float **)(v3 + 32);
  uint64_t v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  uint64_t v8 = *(float **)(v3 + 56);
  char v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  unint64_t v11 = *(float **)(v3 + 80);
  unint64_t v12 = *(float **)(v3 + 88);
  while (v11 != v12)
  {
    float v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  char v15 = *(float **)(v3 + 8);
  BOOL v14 = *(float **)(v3 + 16);
  while (v15 != v14)
  {
    float v16 = *v15++;
    this = PB::Writer::write(a2, v16);
  }
  return this;
}

BOOL CMMsl::GyroBiasConstraints::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 116))
  {
    if ((*(unsigned char *)(a2 + 116) & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 116))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 116) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 116) & 4) == 0 || *(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 116) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 116) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 116) & 2) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 116) & 2) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 32);
  unint64_t v2 = *(float **)(a1 + 40);
  char v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(float **)(a1 + 56);
  uint64_t v5 = *(float **)(a1 + 64);
  float v7 = *(float **)(a2 + 56);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 64) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  char v9 = *(float **)(a1 + 80);
  uint64_t v8 = *(float **)(a1 + 88);
  float v10 = *(float **)(a2 + 80);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 88) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  float v13 = *(float **)(a2 + 8);
  if (v11 - v12 != *(void *)(a2 + 16) - (void)v13) {
    return 0;
  }
  if (v12 == v11) {
    return 1;
  }
  uint64_t v14 = v12 + 4;
  do
  {
    float v15 = *v13++;
    BOOL result = *(float *)(v14 - 4) == v15;
    BOOL v17 = *(float *)(v14 - 4) != v15 || v14 == v11;
    v14 += 4;
  }
  while (!v17);
  return result;
}

uint64_t CMMsl::GyroBiasConstraints::hash_value(CMMsl::GyroBiasConstraints *this)
{
  if ((*((unsigned char *)this + 116) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 116) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 116) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = 0;
    goto LABEL_10;
  }
  double v1 = *((double *)this + 13);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 116) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 113);
  if ((*((unsigned char *)this + 116) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v3 = *((unsigned __int8 *)this + 112);
LABEL_10:
  uint64_t v4 = v2 ^ *(void *)&v1 ^ v3 ^ PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = v4 ^ v5 ^ PBHashBytes();
  return v6 ^ PBHashBytes();
}

uint64_t CMMsl::GyroBiasCorrection::GyroBiasCorrection(uint64_t this)
{
  *(void *)this = &unk_270641D40;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270641D40;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::GyroBiasCorrection::~GyroBiasCorrection(CMMsl::GyroBiasCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270641D40;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GyroBiasCorrection::~GyroBiasCorrection(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::GyroBiasCorrection::GyroBiasCorrection(uint64_t this, const CMMsl::GyroBiasCorrection *a2)
{
  *(void *)this = &unk_270641D40;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 20))
  {
    int v2 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) |= 1u;
    *(_DWORD *)(this + 16) = v2;
  }
  return this;
}

const CMMsl::GyroBiasCorrection *CMMsl::GyroBiasCorrection::operator=(const CMMsl::GyroBiasCorrection *a1, const CMMsl::GyroBiasCorrection *a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroBiasCorrection::GyroBiasCorrection((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    CMMsl::GyroBiasCorrection::~GyroBiasCorrection((CMMsl::GyroBiasCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::GyroBiasCorrection *a2, CMMsl::GyroBiasCorrection *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::GyroBiasCorrection::GyroBiasCorrection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641D40;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::GyroBiasCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroBiasCorrection::GyroBiasCorrection((uint64_t)v6, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v8;
    uint64_t v8 = v4;
    CMMsl::GyroBiasCorrection::~GyroBiasCorrection((CMMsl::GyroBiasCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasCorrection::formatText(CMMsl::GyroBiasCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "axis");
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GyroBiasCorrection::readFrom(CMMsl::GyroBiasCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v30 = v20 + 1;
            char v31 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v30;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v20 = v30;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v25) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 4) = v25;
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::GyroBiasCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if ((*(unsigned char *)(a1 + 20) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

unint64_t CMMsl::GyroBiasCorrection::hash_value(CMMsl::GyroBiasCorrection *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  }
  if (*((unsigned char *)this + 20)) {
    uint64_t v3 = *((int *)this + 4);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::GyroBiasCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

double CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(CMMsl::GyroBiasEstimateError *this)
{
  *(void *)this = &unk_270641D78;
  *((_DWORD *)this + 23) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_270641D78;
  *((_DWORD *)this + 23) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

void CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError(CMMsl::GyroBiasEstimateError *this)
{
  *(void *)this = &unk_270641D78;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::GyroBiasEstimateError *CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(CMMsl::GyroBiasEstimateError *this, const CMMsl::GyroBiasEstimateError *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = &unk_270641D78;
  *((_DWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  if (*((unsigned char *)a2 + 92))
  {
    uint64_t v5 = *((void *)a2 + 10);
    *((unsigned char *)this + 92) = 1;
    *((void *)this + 10) = v5;
  }
  if (this != a2)
  {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_2572C75B4((void *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  if ((*((unsigned char *)a2 + 92) & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 22);
    *((unsigned char *)this + 92) |= 2u;
    *((_DWORD *)this + 22) = v6;
  }
  return this;
}

CMMsl *CMMsl::GyroBiasEstimateError::operator=(CMMsl *a1, const CMMsl::GyroBiasEstimateError *a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroBiasEstimateError::GyroBiasEstimateError((CMMsl::GyroBiasEstimateError *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasEstimateError *)v5, v3);
    CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError((CMMsl::GyroBiasEstimateError *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroBiasEstimateError *a2, CMMsl::GyroBiasEstimateError *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
  float result = *((float *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((float *)a2 + 22) = result;
  return result;
}

uint64_t CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641D78;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  sub_2572C7560(v5, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return a1;
}

CMMsl *CMMsl::GyroBiasEstimateError::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GyroBiasEstimateError::GyroBiasEstimateError((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasEstimateError *)v5, v3);
    CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError((CMMsl::GyroBiasEstimateError *)v5);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasEstimateError::formatText(CMMsl::GyroBiasEstimateError *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "dynamicBiasEstimate", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "estimateErrorMetric", v10);
  }
  if ((*((unsigned char *)this + 92) & 2) != 0) {
    PB::TextFormatter::format(a2, "rawGyroTemperature", *((float *)this + 22));
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "subFitError", v13);
  }
  if (*((unsigned char *)this + 92)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::GyroBiasEstimateError::readFrom(CMMsl::GyroBiasEstimateError *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 92) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v20);
          uint64_t v21 = *((void *)a2 + 1) + 8;
          goto LABEL_159;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v22 = *((void *)a2 + 1);
            unint64_t v23 = *((void *)a2 + 2);
            while (v22 < v23 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v25 = (char *)*((void *)this + 2);
              unint64_t v24 = *((void *)this + 3);
              if ((unint64_t)v25 >= v24)
              {
                char v27 = (char *)*((void *)this + 1);
                uint64_t v28 = (v25 - v27) >> 2;
                unint64_t v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62) {
                  goto LABEL_167;
                }
                uint64_t v30 = v24 - (void)v27;
                if (v30 >> 1 > v29) {
                  unint64_t v29 = v30 >> 1;
                }
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v29;
                }
                if (v31)
                {
                  unint64_t v31 = (unint64_t)sub_2572C76F0(v31);
                  char v27 = (char *)*((void *)this + 1);
                  uint64_t v25 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v32 = 0;
                }
                BOOL v33 = (_DWORD *)(v31 + 4 * v28);
                *BOOL v33 = 0;
                unint64_t v26 = v33 + 1;
                while (v25 != v27)
                {
                  int v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *--BOOL v33 = v34;
                }
                *((void *)this + 1) = v33;
                *((void *)this + 2) = v26;
                *((void *)this + 3) = v31 + 4 * v32;
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v25 = 0;
                unint64_t v26 = v25 + 4;
              }
              *((void *)this + 2) = v26;
              unint64_t v35 = *((void *)a2 + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
                goto LABEL_107;
              }
              *(v26 - 1) = *(_DWORD *)(*(void *)a2 + v35);
              unint64_t v23 = *((void *)a2 + 2);
              unint64_t v22 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v22;
            }
            goto LABEL_108;
          }
          uint64_t v66 = (char *)*((void *)this + 2);
          unint64_t v65 = *((void *)this + 3);
          if ((unint64_t)v66 >= v65)
          {
            unint64_t v72 = (char *)*((void *)this + 1);
            uint64_t v73 = (v66 - v72) >> 2;
            unint64_t v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 62) {
              goto LABEL_167;
            }
            uint64_t v75 = v65 - (void)v72;
            if (v75 >> 1 > v74) {
              unint64_t v74 = v75 >> 1;
            }
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v76 = v74;
            }
            if (v76)
            {
              unint64_t v76 = (unint64_t)sub_2572C76F0(v76);
              unint64_t v72 = (char *)*((void *)this + 1);
              uint64_t v66 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v77 = 0;
            }
            char v90 = (_DWORD *)(v76 + 4 * v73);
            *char v90 = 0;
            unint64_t v67 = v90 + 1;
            while (v66 != v72)
            {
              int v91 = *((_DWORD *)v66 - 1);
              v66 -= 4;
              *--char v90 = v91;
            }
            *((void *)this + 1) = v90;
            *((void *)this + 2) = v67;
            *((void *)this + 3) = v76 + 4 * v77;
            if (v72) {
              operator delete(v72);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v66 = 0;
            unint64_t v67 = v66 + 4;
          }
          *((void *)this + 2) = v67;
          goto LABEL_154;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v36 = *((void *)a2 + 1);
            unint64_t v37 = *((void *)a2 + 2);
            while (v36 < v37 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v39 = (char *)*((void *)this + 5);
              unint64_t v38 = *((void *)this + 6);
              if ((unint64_t)v39 >= v38)
              {
                char v41 = (char *)*((void *)this + 4);
                uint64_t v42 = (v39 - v41) >> 2;
                unint64_t v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62) {
                  goto LABEL_167;
                }
                uint64_t v44 = v38 - (void)v41;
                if (v44 >> 1 > v43) {
                  unint64_t v43 = v44 >> 1;
                }
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v45 = v43;
                }
                if (v45)
                {
                  unint64_t v45 = (unint64_t)sub_2572C76F0(v45);
                  char v41 = (char *)*((void *)this + 4);
                  unint64_t v39 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v46 = 0;
                }
                unsigned int v47 = (_DWORD *)(v45 + 4 * v42);
                *unsigned int v47 = 0;
                uint64_t v40 = v47 + 1;
                while (v39 != v41)
                {
                  int v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--unsigned int v47 = v48;
                }
                *((void *)this + 4) = v47;
                *((void *)this + 5) = v40;
                *((void *)this + 6) = v45 + 4 * v46;
                if (v41) {
                  operator delete(v41);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v39 = 0;
                uint64_t v40 = v39 + 4;
              }
              *((void *)this + 5) = v40;
              unint64_t v49 = *((void *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
                goto LABEL_107;
              }
              *(v40 - 1) = *(_DWORD *)(*(void *)a2 + v49);
              unint64_t v37 = *((void *)a2 + 2);
              unint64_t v36 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v36;
            }
            goto LABEL_108;
          }
          char v69 = (char *)*((void *)this + 5);
          unint64_t v68 = *((void *)this + 6);
          if ((unint64_t)v69 >= v68)
          {
            uint64_t v78 = (char *)*((void *)this + 4);
            uint64_t v79 = (v69 - v78) >> 2;
            unint64_t v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 62) {
              goto LABEL_167;
            }
            uint64_t v81 = v68 - (void)v78;
            if (v81 >> 1 > v80) {
              unint64_t v80 = v81 >> 1;
            }
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v82 = v80;
            }
            if (v82)
            {
              unint64_t v82 = (unint64_t)sub_2572C76F0(v82);
              uint64_t v78 = (char *)*((void *)this + 4);
              char v69 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v83 = 0;
            }
            unint64_t v92 = (_DWORD *)(v82 + 4 * v79);
            *unint64_t v92 = 0;
            unint64_t v67 = v92 + 1;
            while (v69 != v78)
            {
              int v93 = *((_DWORD *)v69 - 1);
              v69 -= 4;
              *--unint64_t v92 = v93;
            }
            *((void *)this + 4) = v92;
            *((void *)this + 5) = v67;
            *((void *)this + 6) = v82 + 4 * v83;
            if (v78) {
              operator delete(v78);
            }
          }
          else
          {
            *(_DWORD *)char v69 = 0;
            unint64_t v67 = v69 + 4;
          }
          *((void *)this + 5) = v67;
          goto LABEL_154;
        case 4u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v50 = *((void *)a2 + 1);
            unint64_t v51 = *((void *)a2 + 2);
            while (v50 < v51 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v53 = (char *)*((void *)this + 8);
              unint64_t v52 = *((void *)this + 9);
              if ((unint64_t)v53 >= v52)
              {
                char v55 = (char *)*((void *)this + 7);
                uint64_t v56 = (v53 - v55) >> 2;
                unint64_t v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62) {
                  goto LABEL_167;
                }
                uint64_t v58 = v52 - (void)v55;
                if (v58 >> 1 > v57) {
                  unint64_t v57 = v58 >> 1;
                }
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v59 = v57;
                }
                if (v59)
                {
                  unint64_t v59 = (unint64_t)sub_2572C76F0(v59);
                  char v55 = (char *)*((void *)this + 7);
                  unint64_t v53 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v60 = 0;
                }
                unsigned int v61 = (_DWORD *)(v59 + 4 * v56);
                *unsigned int v61 = 0;
                uint64_t v54 = v61 + 1;
                while (v53 != v55)
                {
                  int v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *--unsigned int v61 = v62;
                }
                *((void *)this + 7) = v61;
                *((void *)this + 8) = v54;
                *((void *)this + 9) = v59 + 4 * v60;
                if (v55) {
                  operator delete(v55);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v53 = 0;
                uint64_t v54 = v53 + 4;
              }
              *((void *)this + 8) = v54;
              unint64_t v63 = *((void *)a2 + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)a2 + 2))
              {
LABEL_107:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v54 - 1) = *(_DWORD *)(*(void *)a2 + v63);
              unint64_t v51 = *((void *)a2 + 2);
              unint64_t v50 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v50;
            }
LABEL_108:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v71 = (char *)*((void *)this + 8);
            unint64_t v70 = *((void *)this + 9);
            if ((unint64_t)v71 >= v70)
            {
              int v84 = (char *)*((void *)this + 7);
              uint64_t v85 = (v71 - v84) >> 2;
              unint64_t v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62) {
LABEL_167:
              }
                sub_2570AFD0C();
              uint64_t v87 = v70 - (void)v84;
              if (v87 >> 1 > v86) {
                unint64_t v86 = v87 >> 1;
              }
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v86;
              }
              if (v88)
              {
                unint64_t v88 = (unint64_t)sub_2572C76F0(v88);
                int v84 = (char *)*((void *)this + 7);
                unint64_t v71 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v89 = 0;
              }
              char v94 = (_DWORD *)(v88 + 4 * v85);
              *char v94 = 0;
              unint64_t v67 = v94 + 1;
              while (v71 != v84)
              {
                int v95 = *((_DWORD *)v71 - 1);
                v71 -= 4;
                *--char v94 = v95;
              }
              *((void *)this + 7) = v94;
              *((void *)this + 8) = v67;
              *((void *)this + 9) = v88 + 4 * v89;
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v71 = 0;
              unint64_t v67 = v71 + 4;
            }
            *((void *)this + 8) = v67;
LABEL_154:
            unint64_t v96 = *((void *)a2 + 1);
            if (v96 <= 0xFFFFFFFFFFFFFFFBLL && v96 + 4 <= *((void *)a2 + 2))
            {
              *(v67 - 1) = *(_DWORD *)(*(void *)a2 + v96);
LABEL_158:
              uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_159:
              *((void *)a2 + 1) = v21;
            }
            else
            {
LABEL_156:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        case 5u:
          *((unsigned char *)this + 92) |= 2u;
          unint64_t v64 = *((void *)a2 + 1);
          if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v64);
          goto LABEL_158;
        default:
          goto LABEL_19;
      }
      goto LABEL_160;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_160:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::GyroBiasEstimateError::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 92)) {
    this = PB::Writer::write(a2, *(double *)(this + 80));
  }
  int v4 = *(float **)(v3 + 8);
  uint64_t v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  unsigned int v10 = *(float **)(v3 + 56);
  unint64_t v11 = *(float **)(v3 + 64);
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  if ((*(unsigned char *)(v3 + 92) & 2) != 0)
  {
    float v13 = *(float *)(v3 + 88);
    return PB::Writer::write(a2, v13);
  }
  return this;
}

BOOL CMMsl::GyroBiasEstimateError::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 92))
  {
    if ((*(unsigned char *)(a2 + 92) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 92))
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 8);
  unint64_t v2 = *(float **)(a1 + 16);
  int v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  float v6 = *(float **)(a1 + 32);
  uint64_t v5 = *(float **)(a1 + 40);
  float v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  float v9 = *(float **)(a1 + 56);
  uint64_t v8 = *(float **)(a1 + 64);
  unsigned int v10 = *(float **)(a2 + 56);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 64) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  BOOL v11 = (*(unsigned char *)(a2 + 92) & 2) == 0;
  if ((*(unsigned char *)(a1 + 92) & 2) != 0) {
    return (*(unsigned char *)(a2 + 92) & 2) != 0 && *(float *)(a1 + 88) == *(float *)(a2 + 88);
  }
  return v11;
}

uint64_t CMMsl::GyroBiasEstimateError::hash_value(CMMsl::GyroBiasEstimateError *this)
{
  if (*((unsigned char *)this + 92))
  {
    if (*((double *)this + 10) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 10);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  if ((*((unsigned char *)this + 92) & 2) != 0)
  {
    float v7 = *((float *)this + 22);
    uint64_t v6 = LODWORD(v7);
    if (v7 == 0.0) {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6;
}

double CMMsl::GyroBiasFit::GyroBiasFit(CMMsl::GyroBiasFit *this)
{
  *(void *)this = &unk_270641DB0;
  *((_DWORD *)this + 15) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270641DB0;
  *((_DWORD *)this + 15) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::GyroBiasFit::~GyroBiasFit(CMMsl::GyroBiasFit *this)
{
  *(void *)this = &unk_270641DB0;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GyroBiasFit::~GyroBiasFit(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::GyroBiasFit *CMMsl::GyroBiasFit::GyroBiasFit(char **this, char **a2)
{
  *this = (char *)&unk_270641DB0;
  *(_OWORD *)(this + 1) = 0u;
  uint64_t v4 = this + 1;
  *((_DWORD *)this + 15) = 0;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  if (this != a2)
  {
    sub_2572C75B4(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 2);
    sub_2572C75B4(v4, a2[1], a2[2], (a2[2] - a2[1]) >> 2);
  }
  if (*((unsigned char *)a2 + 60))
  {
    int v5 = *((_DWORD *)a2 + 14);
    *((unsigned char *)this + 60) |= 1u;
    *((_DWORD *)this + 14) = v5;
  }
  return (CMMsl::GyroBiasFit *)this;
}

uint64_t CMMsl::GyroBiasFit::operator=(uint64_t a1, char **a2)
{
  if ((char **)a1 != a2)
  {
    CMMsl::GyroBiasFit::GyroBiasFit(&v9, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v6;
    int v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v13;
    int v13 = v7;
    CMMsl::GyroBiasFit::~GyroBiasFit((CMMsl::GyroBiasFit *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroBiasFit *a2, CMMsl::GyroBiasFit *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  float result = *((float *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((float *)a2 + 14) = result;
  return result;
}

uint64_t CMMsl::GyroBiasFit::GyroBiasFit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641DB0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::GyroBiasFit::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroBiasFit::GyroBiasFit((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v6;
    int v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v13;
    int v13 = v7;
    CMMsl::GyroBiasFit::~GyroBiasFit((CMMsl::GyroBiasFit *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasFit::formatText(CMMsl::GyroBiasFit *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "intercept", v7);
  }
  if (*((unsigned char *)this + 60)) {
    PB::TextFormatter::format(a2, "lastMiniCal", *((float *)this + 14));
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "slope", v10);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::GyroBiasFit::readFrom(CMMsl::GyroBiasFit *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_48;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_48;
        }
      }
LABEL_20:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 60) |= 1u;
        unint64_t v35 = *((void *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
          goto LABEL_115;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v35);
      }
      else
      {
        if (v20 == 2)
        {
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v36 = *((void *)a2 + 1);
            unint64_t v37 = *((void *)a2 + 2);
            while (v36 < v37 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v39 = (char *)*((void *)this + 2);
              unint64_t v38 = *((void *)this + 3);
              if ((unint64_t)v39 >= v38)
              {
                char v41 = (char *)*((void *)this + 1);
                uint64_t v42 = (v39 - v41) >> 2;
                unint64_t v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62) {
                  goto LABEL_125;
                }
                uint64_t v44 = v38 - (void)v41;
                if (v44 >> 1 > v43) {
                  unint64_t v43 = v44 >> 1;
                }
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v45 = v43;
                }
                if (v45)
                {
                  unint64_t v45 = (unint64_t)sub_2572C76F0(v45);
                  char v41 = (char *)*((void *)this + 1);
                  unint64_t v39 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v46 = 0;
                }
                unsigned int v47 = (_DWORD *)(v45 + 4 * v42);
                *unsigned int v47 = 0;
                uint64_t v40 = v47 + 1;
                while (v39 != v41)
                {
                  int v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--unsigned int v47 = v48;
                }
                *((void *)this + 1) = v47;
                *((void *)this + 2) = v40;
                *((void *)this + 3) = v45 + 4 * v46;
                if (v41) {
                  operator delete(v41);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v39 = 0;
                uint64_t v40 = v39 + 4;
              }
              *((void *)this + 2) = v40;
              unint64_t v49 = *((void *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2))
              {
LABEL_81:
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_82;
              }
              *(v40 - 1) = *(_DWORD *)(*(void *)a2 + v49);
              unint64_t v37 = *((void *)a2 + 2);
              unint64_t v36 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v36;
            }
            goto LABEL_82;
          }
          uint64_t v54 = (char *)*((void *)this + 2);
          unint64_t v53 = *((void *)this + 3);
          if ((unint64_t)v54 >= v53)
          {
            unsigned int v61 = (char *)*((void *)this + 1);
            uint64_t v62 = (v54 - v61) >> 2;
            unint64_t v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 62) {
LABEL_125:
            }
              sub_2570AFD0C();
            uint64_t v64 = v53 - (void)v61;
            if (v64 >> 1 > v63) {
              unint64_t v63 = v64 >> 1;
            }
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v63;
            }
            if (v65)
            {
              unint64_t v65 = (unint64_t)sub_2572C76F0(v65);
              unsigned int v61 = (char *)*((void *)this + 1);
              uint64_t v54 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v66 = 0;
            }
            char v69 = (_DWORD *)(v65 + 4 * v62);
            *char v69 = 0;
            unint64_t v52 = v69 + 1;
            while (v54 != v61)
            {
              int v70 = *((_DWORD *)v54 - 1);
              v54 -= 4;
              *--char v69 = v70;
            }
            *((void *)this + 1) = v69;
            *((void *)this + 2) = v52;
            *((void *)this + 3) = v65 + 4 * v66;
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v54 = 0;
            unint64_t v52 = v54 + 4;
          }
          *((void *)this + 2) = v52;
        }
        else
        {
          if (v20 != 1)
          {
LABEL_48:
            if ((PB::Reader::skip(a2) & 1) == 0) {
              return 0;
            }
            goto LABEL_118;
          }
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v21 = *((void *)a2 + 1);
            unint64_t v22 = *((void *)a2 + 2);
            while (v21 < v22 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v24 = (char *)*((void *)this + 5);
              unint64_t v23 = *((void *)this + 6);
              if ((unint64_t)v24 >= v23)
              {
                unint64_t v26 = (char *)*((void *)this + 4);
                uint64_t v27 = (v24 - v26) >> 2;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 62) {
                  goto LABEL_125;
                }
                uint64_t v29 = v23 - (void)v26;
                if (v29 >> 1 > v28) {
                  unint64_t v28 = v29 >> 1;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30)
                {
                  unint64_t v30 = (unint64_t)sub_2572C76F0(v30);
                  unint64_t v26 = (char *)*((void *)this + 4);
                  unint64_t v24 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v31 = 0;
                }
                uint64_t v32 = (_DWORD *)(v30 + 4 * v27);
                *uint64_t v32 = 0;
                uint64_t v25 = v32 + 1;
                while (v24 != v26)
                {
                  int v33 = *((_DWORD *)v24 - 1);
                  v24 -= 4;
                  *--uint64_t v32 = v33;
                }
                *((void *)this + 4) = v32;
                *((void *)this + 5) = v25;
                *((void *)this + 6) = v30 + 4 * v31;
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v24 = 0;
                uint64_t v25 = v24 + 4;
              }
              *((void *)this + 5) = v25;
              unint64_t v34 = *((void *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)a2 + 2)) {
                goto LABEL_81;
              }
              *(v25 - 1) = *(_DWORD *)(*(void *)a2 + v34);
              unint64_t v22 = *((void *)a2 + 2);
              unint64_t v21 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v21;
            }
LABEL_82:
            PB::Reader::recallMark();
            goto LABEL_118;
          }
          unint64_t v51 = (char *)*((void *)this + 5);
          unint64_t v50 = *((void *)this + 6);
          if ((unint64_t)v51 >= v50)
          {
            char v55 = (char *)*((void *)this + 4);
            uint64_t v56 = (v51 - v55) >> 2;
            unint64_t v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 62) {
              goto LABEL_125;
            }
            uint64_t v58 = v50 - (void)v55;
            if (v58 >> 1 > v57) {
              unint64_t v57 = v58 >> 1;
            }
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v57;
            }
            if (v59)
            {
              unint64_t v59 = (unint64_t)sub_2572C76F0(v59);
              char v55 = (char *)*((void *)this + 4);
              unint64_t v51 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v60 = 0;
            }
            unint64_t v67 = (_DWORD *)(v59 + 4 * v56);
            *unint64_t v67 = 0;
            unint64_t v52 = v67 + 1;
            while (v51 != v55)
            {
              int v68 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *--unint64_t v67 = v68;
            }
            *((void *)this + 4) = v67;
            *((void *)this + 5) = v52;
            *((void *)this + 6) = v59 + 4 * v60;
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v51 = 0;
            unint64_t v52 = v51 + 4;
          }
          *((void *)this + 5) = v52;
        }
        unint64_t v71 = *((void *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)a2 + 2))
        {
LABEL_115:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_118;
        }
        *(v52 - 1) = *(_DWORD *)(*(void *)a2 + v71);
      }
      *((void *)a2 + 1) += 4;
LABEL_118:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasFit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(float **)(this + 32);
  long long v5 = *(float **)(this + 40);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  float v7 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  if (*(unsigned char *)(v3 + 60))
  {
    float v10 = *(float *)(v3 + 56);
    return PB::Writer::write(a2, v10);
  }
  return this;
}

BOOL CMMsl::GyroBiasFit::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(float **)(a1 + 32);
  unint64_t v2 = *(float **)(a1 + 40);
  int v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  float v6 = *(float **)(a1 + 8);
  long long v5 = *(float **)(a1 + 16);
  float v7 = *(float **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 16) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  BOOL v8 = (*(unsigned char *)(a2 + 60) & 1) == 0;
  if (*(unsigned char *)(a1 + 60)) {
    return (*(unsigned char *)(a2 + 60) & 1) != 0 && *(float *)(a1 + 56) == *(float *)(a2 + 56);
  }
  return v8;
}

uint64_t CMMsl::GyroBiasFit::hash_value(CMMsl::GyroBiasFit *this)
{
  uint64_t v2 = PBHashBytes();
  uint64_t v3 = PBHashBytes();
  if (*((unsigned char *)this + 60))
  {
    float v5 = *((float *)this + 14);
    uint64_t v4 = LODWORD(v5);
    if (v5 == 0.0) {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v3 ^ v2 ^ v4;
}

void *CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(void *this)
{
  *this = &unk_270641DE8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_270641DE8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::GyroCalibrationDataFactory::~GyroCalibrationDataFactory(CMMsl::GyroCalibrationDataFactory *this)
{
  *(void *)this = &unk_270641DE8;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270641DE8;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270641DE8;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(void *this, const CMMsl::GyroCalibrationDataFactory *a2)
{
  this[1] = 0;
  *this = &unk_270641DE8;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_257148F48(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_2570AFA4C(a1);
}

uint64_t CMMsl::GyroCalibrationDataFactory::operator=(uint64_t a1, const CMMsl::GyroCalibrationDataFactory *a2)
{
  if ((const CMMsl::GyroCalibrationDataFactory *)a1 != a2)
  {
    CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    float v6 = &unk_270641DE8;
    float v9 = (void **)&v7;
    sub_2572C6D4C(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::GyroCalibrationDataFactory *a2, CMMsl::GyroCalibrationDataFactory *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641DE8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_270641DE8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataFactory::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    float v9 = &unk_270641DE8;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_2572C6E0C((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    unint64_t v12 = (void **)&v10;
    float v9 = &unk_270641DE8;
    sub_2572C6D4C(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataFactory::formatText(CMMsl::GyroCalibrationDataFactory *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "sample");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GyroCalibrationDataFactory::readFrom(CMMsl::GyroCalibrationDataFactory *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_257149568(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GyroCalibrationDataFactory::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    long long v5 = *v2++;
  return this;
}

BOOL CMMsl::GyroCalibrationDataFactory::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::GyroCalibrationSample::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_257149660(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = CMMsl::GyroCalibrationSample::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::GyroCalibrationDataFactory::hash_value(CMMsl::GyroCalibrationDataFactory *this)
{
  uint64_t v1 = (CMMsl::GyroCalibrationSample **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::GyroCalibrationSample **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::GyroCalibrationSample::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void *CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(void *this)
{
  *this = &unk_270641E20;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_270641E20;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::GyroCalibrationDataNonlinearNonFactory::~GyroCalibrationDataNonlinearNonFactory(CMMsl::GyroCalibrationDataNonlinearNonFactory *this)
{
  *(void *)this = &unk_270641E20;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270641E20;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270641E20;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(void *this, const CMMsl::GyroCalibrationDataNonlinearNonFactory *a2)
{
  this[1] = 0;
  *this = &unk_270641E20;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_257149A4C(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_2570AFA4C(a1);
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::operator=(uint64_t a1, const CMMsl::GyroCalibrationDataNonlinearNonFactory *a2)
{
  if ((const CMMsl::GyroCalibrationDataNonlinearNonFactory *)a1 != a2)
  {
    CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = &unk_270641E20;
    BOOL v9 = (void **)&v7;
    sub_2572C6D4C(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::GyroCalibrationDataNonlinearNonFactory *a2, CMMsl::GyroCalibrationDataNonlinearNonFactory *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641E20;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_270641E20;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    BOOL v9 = &unk_270641E20;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_2572C6E0C((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    char v12 = (void **)&v10;
    BOOL v9 = &unk_270641E20;
    sub_2572C6D4C(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::formatText(CMMsl::GyroCalibrationDataNonlinearNonFactory *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "sample");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::readFrom(CMMsl::GyroCalibrationDataNonlinearNonFactory *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_25714A06C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    long long v5 = *v2++;
  return this;
}

BOOL CMMsl::GyroCalibrationDataNonlinearNonFactory::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::GyroCalibrationSampleNonlinear::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_25714A164(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = CMMsl::GyroCalibrationSampleNonlinear::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::hash_value(CMMsl::GyroCalibrationDataNonlinearNonFactory *this)
{
  uint64_t v1 = (CMMsl::GyroCalibrationSampleNonlinear **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::GyroCalibrationSampleNonlinear **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::GyroCalibrationSampleNonlinear::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t CMMsl::GyroCalibrationSample::GyroCalibrationSample(uint64_t this)
{
  *(void *)this = &unk_270641E58;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_270641E58;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::GyroCalibrationSample::~GyroCalibrationSample(CMMsl::GyroCalibrationSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::GyroCalibrationSample::GyroCalibrationSample(CMMsl::GyroCalibrationSample *this, const CMMsl::GyroCalibrationSample *a2)
{
  *(void *)this = &unk_270641E58;
  *((_DWORD *)this + 6) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    float result = *((float *)a2 + 2);
    char v3 = 1;
    *((unsigned char *)this + 24) = 1;
    *((float *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    v3 |= 2u;
    *((unsigned char *)this + 24) = v3;
    *((float *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    float result = *((float *)a2 + 5);
    *((unsigned char *)this + 24) = v3 | 8;
    *((float *)this + 5) = result;
    return result;
  }
  float result = *((float *)a2 + 4);
  v3 |= 4u;
  *((unsigned char *)this + 24) = v3;
  *((float *)this + 4) = result;
  if ((*((unsigned char *)a2 + 24) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::GyroCalibrationSample::operator=(uint64_t a1, const CMMsl::GyroCalibrationSample *a2)
{
  if ((const CMMsl::GyroCalibrationSample *)a1 != a2)
  {
    CMMsl::GyroCalibrationSample::GyroCalibrationSample((CMMsl::GyroCalibrationSample *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroCalibrationSample *a2, CMMsl::GyroCalibrationSample *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::GyroCalibrationSample::GyroCalibrationSample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641E58;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270641E58;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::GyroCalibrationSample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_270641E58;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationSample::formatText(CMMsl::GyroCalibrationSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "y", *((float *)this + 4));
  if ((*((unsigned char *)this + 24) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 5));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GyroCalibrationSample::readFrom(CMMsl::GyroCalibrationSample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_37;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 24) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GyroCalibrationSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 24) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 20);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::GyroCalibrationSample::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 8) == 0;
  if ((*(unsigned char *)(a1 + 24) & 8) != 0) {
    return (*(unsigned char *)(a2 + 24) & 8) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  }
  return v2;
}

uint64_t CMMsl::GyroCalibrationSample::hash_value(CMMsl::GyroCalibrationSample *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  float v8 = *((float *)this + 2);
  uint64_t v1 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 24) & 4) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 4);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 24) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 24) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 5);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(uint64_t this)
{
  *(void *)this = &unk_270641E90;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_270641E90;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::GyroCalibrationSampleNonlinear::~GyroCalibrationSampleNonlinear(CMMsl::GyroCalibrationSampleNonlinear *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270641E90;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GyroCalibrationSampleNonlinear::~GyroCalibrationSampleNonlinear(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(uint64_t this, const CMMsl::GyroCalibrationSampleNonlinear *a2)
{
  *(void *)this = &unk_270641E90;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) |= 1u;
    *(void *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::operator=(uint64_t a1, const CMMsl::GyroCalibrationSampleNonlinear *a2)
{
  if ((const CMMsl::GyroCalibrationSampleNonlinear *)a1 != a2)
  {
    CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::GyroCalibrationSampleNonlinear::~GyroCalibrationSampleNonlinear((CMMsl::GyroCalibrationSampleNonlinear *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GyroCalibrationSampleNonlinear *a2, CMMsl::GyroCalibrationSampleNonlinear *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641E90;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::GyroCalibrationSampleNonlinear::~GyroCalibrationSampleNonlinear((CMMsl::GyroCalibrationSampleNonlinear *)&v7);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::formatText(CMMsl::GyroCalibrationSampleNonlinear *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::readFrom(CMMsl::GyroCalibrationSampleNonlinear *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v20);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(unsigned char *)(v3 + 24))
  {
    double v5 = *(double *)(v3 + 16);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

BOOL CMMsl::GyroCalibrationSampleNonlinear::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::GyroCalibrationSample::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

unint64_t CMMsl::GyroCalibrationSampleNonlinear::hash_value(CMMsl::GyroCalibrationSampleNonlinear *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::GyroCalibrationSample::hash_value((CMMsl::GyroCalibrationSample *)v2);
  }
  if (*((unsigned char *)this + 24))
  {
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
  }
  else
  {
    double v3 = 0.0;
  }
  return *(void *)&v3 ^ v2;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::GyroCompass::GyroCompass(uint64_t this)
{
  *(void *)this = &unk_270641EC8;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = &unk_270641EC8;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void CMMsl::GyroCompass::~GyroCompass(CMMsl::GyroCompass *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::GyroCompass::GyroCompass(uint64_t this, const CMMsl::GyroCompass *a2)
{
  *(void *)this = &unk_270641EC8;
  *(_DWORD *)(this + 60) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 60) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 30) & 0x100) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 11);
    v3 |= 0x100u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 44) = v5;
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    int v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x200u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 48) = v6;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 52) = v7;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 36) = v9;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v10 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 56) = v10;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v11 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 16) = v11;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v12 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 24) = v12;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v13 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 28) = v13;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0) {
      return this;
    }
LABEL_26:
    int v15 = *((_DWORD *)a2 + 5);
    *(_WORD *)(this + 60) = v3 | 4;
    *(_DWORD *)(this + 20) = v15;
    return this;
  }
LABEL_25:
  int v14 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 32) = v14;
  if ((*((_WORD *)a2 + 30) & 4) != 0) {
    goto LABEL_26;
  }
  return this;
}

CMMsl *CMMsl::GyroCompass::operator=(CMMsl *a1, const CMMsl::GyroCompass *a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroCompass::GyroCompass((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroCompass *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroCompass *a2, CMMsl::GyroCompass *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  int v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  return result;
}

float CMMsl::GyroCompass::GyroCompass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641EC8;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

CMMsl *CMMsl::GyroCompass::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GyroCompass::GyroCompass((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroCompass *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GyroCompass::formatText(CMMsl::GyroCompass *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "calibrationLevel");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "magneticHeading", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "quaternionW", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "quaternionX", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "quaternionY", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "quaternionZ", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((_WORD *)this + 30) & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "trueHeading", *((float *)this + 14));
LABEL_14:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GyroCompass::readFrom(CMMsl::GyroCompass *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_78;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 30) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_72;
      case 2u:
        *((_WORD *)this + 30) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 3u:
        *((_WORD *)this + 30) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 4u:
        *((_WORD *)this + 30) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 5u:
        *((_WORD *)this + 30) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 6u:
        *((_WORD *)this + 30) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 7u:
        *((_WORD *)this + 30) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 8u:
        *((_WORD *)this + 30) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 9u:
        *((_WORD *)this + 30) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 0xAu:
        *((_WORD *)this + 30) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 0xBu:
        *((_WORD *)this + 30) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_71:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_72:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_55:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xCu:
        *((_WORD *)this + 30) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_77;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_76:
              unint64_t v2 = v28 + 1;
              goto LABEL_77;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_76;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_77;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_77:
        *((_DWORD *)this + 5) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_78:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GyroCompass::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(this + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(float *)(v3 + 32));
    if ((*(_WORD *)(v3 + 60) & 4) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_25:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::GyroCompass::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 60);
  __int16 v3 = *(_WORD *)(a2 + 60);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  }
  return v4;
}

uint64_t CMMsl::GyroCompass::hash_value(CMMsl::GyroCompass *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_3;
    }
LABEL_37:
    uint64_t v4 = 0;
    if ((*((_WORD *)this + 30) & 0x200) != 0) {
      goto LABEL_6;
    }
LABEL_38:
    uint64_t v6 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0) {
      goto LABEL_9;
    }
LABEL_39:
    uint64_t v8 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_12;
    }
LABEL_40:
    uint64_t v10 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_41:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 30) & 0x800) != 0) {
      goto LABEL_18;
    }
LABEL_42:
    uint64_t v14 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_21;
    }
LABEL_43:
    uint64_t v16 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_24;
    }
LABEL_44:
    uint64_t v18 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_27;
    }
LABEL_45:
    uint64_t v20 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_30;
    }
    goto LABEL_46;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((_WORD *)this + 30) & 0x100) == 0) {
    goto LABEL_37;
  }
LABEL_3:
  float v3 = *((float *)this + 11);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x200) == 0) {
    goto LABEL_38;
  }
LABEL_6:
  float v5 = *((float *)this + 12);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x400) == 0) {
    goto LABEL_39;
  }
LABEL_9:
  float v7 = *((float *)this + 13);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_40;
  }
LABEL_12:
  float v9 = *((float *)this + 10);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_41;
  }
LABEL_15:
  float v11 = *((float *)this + 9);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x800) == 0) {
    goto LABEL_42;
  }
LABEL_18:
  float v13 = *((float *)this + 14);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_43;
  }
LABEL_21:
  float v15 = *((float *)this + 4);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_44;
  }
LABEL_24:
  float v17 = *((float *)this + 6);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_45;
  }
LABEL_27:
  float v19 = *((float *)this + 7);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_30:
    float v21 = *((float *)this + 8);
    uint64_t v22 = LODWORD(v21);
    if (v21 == 0.0) {
      uint64_t v22 = 0;
    }
    if ((v1 & 4) != 0) {
      goto LABEL_33;
    }
LABEL_47:
    uint64_t v23 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23;
  }
LABEL_46:
  uint64_t v22 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_47;
  }
LABEL_33:
  uint64_t v23 = *((int *)this + 5);
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23;
}

uint64_t CMMsl::GyroDt::GyroDt(uint64_t this)
{
  *(void *)this = &unk_270641F00;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_270641F00;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::GyroDt::~GyroDt(CMMsl::GyroDt *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::GyroDt::GyroDt(CMMsl::GyroDt *this, const CMMsl::GyroDt *a2)
{
  *(void *)this = &unk_270641F00;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

{
  float result;

  *(void *)this = &unk_270641F00;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::GyroDt::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    float v7 = &unk_270641F00;
    int v3 = *(_DWORD *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    int v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    int v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void *v8;
  int v9;
  int v10;

  if (a1 != a2)
  {
    int v8 = &unk_270641F00;
    int v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(_DWORD *)(a2 + 8);
    int v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    uint64_t v10 = v5;
    uint64_t v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    int v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroDt *a2, CMMsl::GyroDt *a3)
{
  int v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float CMMsl::GyroDt::GyroDt(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641F00;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270641F00;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::GyroDt::formatText(CMMsl::GyroDt *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "dt", *((float *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GyroDt::readFrom(CMMsl::GyroDt *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_25:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroDt::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(float *)(this + 8));
  }
  return this;
}

BOOL CMMsl::GyroDt::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return result;
}

float CMMsl::GyroDt::hash_value(CMMsl::GyroDt *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((float *)this + 2);
  }
  return result;
}

uint64_t CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(uint64_t this)
{
  *(void *)this = &unk_270641F38;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_270641F38;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::GyroFactoryCalibrationData::~GyroFactoryCalibrationData(CMMsl::GyroFactoryCalibrationData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(CMMsl::GyroFactoryCalibrationData *this, const CMMsl::GyroFactoryCalibrationData *a2)
{
  *(void *)this = &unk_270641F38;
  *((_DWORD *)this + 6) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    float result = *((float *)a2 + 2);
    char v3 = 1;
    *((unsigned char *)this + 24) = 1;
    *((float *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    v3 |= 2u;
    *((unsigned char *)this + 24) = v3;
    *((float *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    float result = *((float *)a2 + 5);
    *((unsigned char *)this + 24) = v3 | 8;
    *((float *)this + 5) = result;
    return result;
  }
  float result = *((float *)a2 + 4);
  v3 |= 4u;
  *((unsigned char *)this + 24) = v3;
  *((float *)this + 4) = result;
  if ((*((unsigned char *)a2 + 24) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::GyroFactoryCalibrationData::operator=(uint64_t a1, const CMMsl::GyroFactoryCalibrationData *a2)
{
  if ((const CMMsl::GyroFactoryCalibrationData *)a1 != a2)
  {
    CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData((CMMsl::GyroFactoryCalibrationData *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroFactoryCalibrationData *a2, CMMsl::GyroFactoryCalibrationData *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641F38;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270641F38;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::GyroFactoryCalibrationData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_270641F38;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::GyroFactoryCalibrationData::formatText(CMMsl::GyroFactoryCalibrationData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "y", *((float *)this + 4));
  if ((*((unsigned char *)this + 24) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 5));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GyroFactoryCalibrationData::readFrom(CMMsl::GyroFactoryCalibrationData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_37;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 24) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GyroFactoryCalibrationData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 24) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 20);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::GyroFactoryCalibrationData::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 8) == 0;
  if ((*(unsigned char *)(a1 + 24) & 8) != 0) {
    return (*(unsigned char *)(a2 + 24) & 8) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  }
  return v2;
}

uint64_t CMMsl::GyroFactoryCalibrationData::hash_value(CMMsl::GyroFactoryCalibrationData *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  float v8 = *((float *)this + 2);
  uint64_t v1 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 24) & 4) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 4);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 24) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 24) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 5);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7;
}

uint64_t CMMsl::GyroGps::GyroGps(uint64_t this)
{
  *(void *)this = &unk_270641F70;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_270641F70;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::GyroGps::~GyroGps(CMMsl::GyroGps *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::GyroGps::GyroGps(CMMsl::GyroGps *this, const CMMsl::GyroGps *a2)
{
  *(void *)this = &unk_270641F70;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((unsigned char *)a2 + 28) & 8) == 0) {
      return *(float *)&v4;
    }
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::GyroGps::operator=(uint64_t a1, const CMMsl::GyroGps *a2)
{
  if ((const CMMsl::GyroGps *)a1 != a2)
  {
    CMMsl::GyroGps::GyroGps((CMMsl::GyroGps *)&v9, a2);
    uint64_t v3 = v11;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v3;
    int v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v6;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroGps *a2, CMMsl::GyroGps *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::GyroGps::GyroGps(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641F70;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270641F70;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::GyroGps::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v9[0] = &unk_270641F70;
    int v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    void v9[2] = v6;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::GyroGps::formatText(CMMsl::GyroGps *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "y", *((float *)this + 5));
  if ((*((unsigned char *)this + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 6));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GyroGps::readFrom(CMMsl::GyroGps *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_38;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_37;
      case 2u:
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 28) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_37:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_38:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GyroGps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 20));
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::GyroGps::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 8) == 0;
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
    return (*(unsigned char *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::GyroGps::hash_value(CMMsl::GyroGps *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 5);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 6);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7;
}

uint64_t CMMsl::GyroOscarEmu::GyroOscarEmu(uint64_t this)
{
  *(void *)this = &unk_270641FA8;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = &unk_270641FA8;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::GyroOscarEmu::~GyroOscarEmu(CMMsl::GyroOscarEmu *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::GyroOscarEmu::GyroOscarEmu(uint64_t this, const CMMsl::GyroOscarEmu *a2)
{
  *(void *)this = &unk_270641FA8;
  *(_DWORD *)(this + 36) = 0;
  char v2 = *((unsigned char *)a2 + 36);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 36) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 36) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(unsigned char *)(this + 36) = v3;
  *(_DWORD *)(this + 28) = v7;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_14:
    char v9 = *((unsigned char *)a2 + 32);
    *(unsigned char *)(this + 36) = v3 | 0x20;
    *(unsigned char *)(this + 32) = v9;
    return this;
  }
LABEL_13:
  int v8 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(unsigned char *)(this + 36) = v3;
  *(_DWORD *)(this + 16) = v8;
  if ((*((unsigned char *)a2 + 36) & 0x20) != 0) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::GyroOscarEmu::operator=(uint64_t a1, const CMMsl::GyroOscarEmu *a2)
{
  if ((const CMMsl::GyroOscarEmu *)a1 != a2)
  {
    CMMsl::GyroOscarEmu::GyroOscarEmu((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 20);
    *(void *)(a1 + 20) = v11;
    uint64_t v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    int v12 = v4;
    int v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    int v10 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 32);
    *(unsigned char *)(a1 + 32) = v13;
    char v13 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroOscarEmu *a2, CMMsl::GyroOscarEmu *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  float result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 32);
  *((unsigned char *)this + 32) = *((unsigned char *)a2 + 32);
  *((unsigned char *)a2 + 32) = v6;
  return result;
}

float CMMsl::GyroOscarEmu::GyroOscarEmu(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641FA8;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270641FA8;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return result;
}

uint64_t CMMsl::GyroOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v13[0] = &unk_270641FA8;
    int v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 28);
    int v6 = *(_DWORD *)(a2 + 16);
    char v7 = *(unsigned char *)(a2 + 32);
    int v18 = *(_DWORD *)(a1 + 36);
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v13[1] = v8;
    uint64_t v9 = *(void *)(a1 + 20);
    uint64_t v10 = *(void *)(a2 + 20);
    *(_DWORD *)(a1 + 36) = v3;
    *(void *)(a1 + 20) = v10;
    uint64_t v15 = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v5;
    int v16 = v9;
    int v11 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    int v14 = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 32);
    *(unsigned char *)(a1 + 32) = v7;
    char v17 = v11;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::GyroOscarEmu::formatText(CMMsl::GyroOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "fsync");
    char v5 = *((unsigned char *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sampleNum");
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "x", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "y", *((float *)this + 6));
  if ((*((unsigned char *)this + 36) & 0x10) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 7));
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GyroOscarEmu::readFrom(CMMsl::GyroOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_61;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_55;
      case 2u:
        *((unsigned char *)this + 36) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 3u:
        *((unsigned char *)this + 36) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 4u:
        *((unsigned char *)this + 36) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_54:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_55:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((unsigned char *)this + 36) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v30 = v20++;
            char v31 = *(unsigned char *)(v21 + v30);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_59:
              unint64_t v2 = v30 + 1;
              goto LABEL_60;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_59;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_60;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_60:
        *((_DWORD *)this + 4) = v24;
        break;
      case 6u:
        *((unsigned char *)this + 36) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 32) = v27;
        break;
      default:
        goto LABEL_19;
    }
LABEL_61:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GyroOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 36);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 36) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  return PB::Writer::write(a2);
}

BOOL CMMsl::GyroOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 36) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 36) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
  }
  return v2;
}

uint64_t CMMsl::GyroOscarEmu::hash_value(CMMsl::GyroOscarEmu *this)
{
  if ((*((unsigned char *)this + 36) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 36) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 36) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_18:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 36) & 0x10) != 0) {
      goto LABEL_9;
    }
LABEL_19:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 36) & 2) != 0) {
      goto LABEL_12;
    }
LABEL_20:
    uint64_t v8 = 0;
    if ((*((unsigned char *)this + 36) & 0x20) != 0) {
      goto LABEL_13;
    }
LABEL_21:
    uint64_t v9 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v8 ^ v9;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 36) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_3:
  float v2 = *((float *)this + 5);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 36) & 8) == 0) {
    goto LABEL_18;
  }
LABEL_6:
  float v4 = *((float *)this + 6);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 36) & 0x10) == 0) {
    goto LABEL_19;
  }
LABEL_9:
  float v6 = *((float *)this + 7);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 36) & 2) == 0) {
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v8 = *((unsigned int *)this + 4);
  if ((*((unsigned char *)this + 36) & 0x20) == 0) {
    goto LABEL_21;
  }
LABEL_13:
  uint64_t v9 = *((unsigned __int8 *)this + 32);
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v8 ^ v9;
}

uint64_t CMMsl::GyroTemperature::GyroTemperature(uint64_t this)
{
  *(void *)this = &unk_270641FE0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_270641FE0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::GyroTemperature::~GyroTemperature(CMMsl::GyroTemperature *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::GyroTemperature::GyroTemperature(uint64_t this, const CMMsl::GyroTemperature *a2)
{
  *(void *)this = &unk_270641FE0;
  *(_DWORD *)(this + 16) = 0;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 16) = 2;
    *(_DWORD *)(this + 12) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 1) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 16))
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 16) = v2;
    *(_DWORD *)(this + 8) = v4;
  }
  return this;
}

const CMMsl::GyroTemperature *CMMsl::GyroTemperature::operator=(const CMMsl::GyroTemperature *a1, const CMMsl::GyroTemperature *a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroTemperature::GyroTemperature((uint64_t)v7, a2);
    int v3 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v10;
    int v10 = v3;
    int v4 = *((_DWORD *)a1 + 3);
    *((_DWORD *)a1 + 3) = v9;
    int v9 = v4;
    int v5 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v8;
    int v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroTemperature *a2, CMMsl::GyroTemperature *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  int v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  return result;
}

float CMMsl::GyroTemperature::GyroTemperature(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641FE0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270641FE0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

_DWORD *CMMsl::GyroTemperature::operator=(_DWORD *a1, _DWORD *a2)
{
  if (a1 != a2)
  {
    int v10 = &unk_270641FE0;
    int v3 = a2[4];
    a2[4] = 0;
    int v4 = a2[3];
    int v5 = a2[2];
    int v6 = a1[4];
    a1[4] = v3;
    int v13 = v6;
    int v7 = a1[3];
    a1[3] = v4;
    int v12 = v7;
    int v8 = a1[2];
    a1[2] = v5;
    int v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::GyroTemperature::formatText(CMMsl::GyroTemperature *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "location");
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 3));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::GyroTemperature::readFrom(CMMsl::GyroTemperature *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroTemperature::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 12));
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::GyroTemperature::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 16) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 16) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 16) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 1) == 0;
  if (*(unsigned char *)(a1 + 16)) {
    return (*(unsigned char *)(a2 + 16) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::GyroTemperature::hash_value(CMMsl::GyroTemperature *this)
{
  if ((*((unsigned char *)this + 16) & 2) != 0)
  {
    float v3 = *((float *)this + 3);
    uint64_t v1 = LODWORD(v3);
    if (v3 == 0.0) {
      uint64_t v1 = 0;
    }
    if (*((unsigned char *)this + 16)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 2);
  return v2 ^ v1;
}

uint64_t CMMsl::HIDShower::HIDShower(uint64_t this)
{
  *(void *)this = &unk_270642018;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270642018;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::HIDShower::~HIDShower(CMMsl::HIDShower *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::HIDShower::HIDShower(uint64_t this, const CMMsl::HIDShower *a2)
{
  *(void *)this = &unk_270642018;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::HIDShower::operator=(uint64_t a1, const CMMsl::HIDShower *a2)
{
  if ((const CMMsl::HIDShower *)a1 != a2)
  {
    CMMsl::HIDShower::HIDShower((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HIDShower *a2, CMMsl::HIDShower *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::HIDShower::HIDShower(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270642018;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270642018;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::HIDShower::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = &unk_270642018;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::HIDShower::formatText(CMMsl::HIDShower *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "inShower");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::HIDShower::readFrom(CMMsl::HIDShower *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HIDShower::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::HIDShower::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::HIDShower::hash_value(CMMsl::HIDShower *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::HapticModuleState::HapticModuleState(uint64_t this)
{
  *(void *)this = &unk_270642050;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270642050;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::HapticModuleState::~HapticModuleState(CMMsl::HapticModuleState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::HapticModuleState::HapticModuleState(uint64_t this, const CMMsl::HapticModuleState *a2)
{
  *(void *)this = &unk_270642050;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::HapticModuleState::operator=(uint64_t a1, const CMMsl::HapticModuleState *a2)
{
  if ((const CMMsl::HapticModuleState *)a1 != a2)
  {
    CMMsl::HapticModuleState::HapticModuleState((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HapticModuleState *a2, CMMsl::HapticModuleState *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::HapticModuleState::HapticModuleState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270642050;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270642050;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::HapticModuleState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = &unk_270642050;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::HapticModuleState::formatText(CMMsl::HapticModuleState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "hapticOn");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::HapticModuleState::readFrom(CMMsl::HapticModuleState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HapticModuleState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::HapticModuleState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::HapticModuleState::hash_value(CMMsl::HapticModuleState *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::HarmonicMetrics::HarmonicMetrics(uint64_t this)
{
  *(void *)this = &unk_270642088;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = &unk_270642088;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::HarmonicMetrics::~HarmonicMetrics(CMMsl::HarmonicMetrics *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::HarmonicMetrics::HarmonicMetrics(CMMsl::HarmonicMetrics *this, const CMMsl::HarmonicMetrics *a2)
{
  *(void *)this = &unk_270642088;
  *((_DWORD *)this + 11) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 44) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    char v3 = 0;
    if ((*((unsigned char *)a2 + 44) & 0x80) == 0) {
      goto LABEL_6;
    }
  }
  float result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((unsigned char *)this + 44) = v3;
  *((float *)this + 10) = result;
  char v2 = *((unsigned char *)a2 + 44);
LABEL_6:
  if ((v2 & 2) != 0)
  {
    float result = *((float *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 44) = v3;
    *((float *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 44) = v3;
  *((float *)this + 5) = result;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  float result = *((float *)a2 + 6);
  v3 |= 8u;
  *((unsigned char *)this + 44) = v3;
  *((float *)this + 6) = result;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  float result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((unsigned char *)this + 44) = v3;
  *((float *)this + 7) = result;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_18:
    float result = *((float *)a2 + 9);
    *((unsigned char *)this + 44) = v3 | 0x40;
    *((float *)this + 9) = result;
    return result;
  }
LABEL_17:
  float result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((unsigned char *)this + 44) = v3;
  *((float *)this + 8) = result;
  if ((*((unsigned char *)a2 + 44) & 0x40) != 0) {
    goto LABEL_18;
  }
  return result;
}

uint64_t CMMsl::HarmonicMetrics::operator=(uint64_t a1, const CMMsl::HarmonicMetrics *a2)
{
  if ((const CMMsl::HarmonicMetrics *)a1 != a2)
  {
    CMMsl::HarmonicMetrics::HarmonicMetrics((CMMsl::HarmonicMetrics *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    int v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    *(void *)&long long v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::HarmonicMetrics *a2, CMMsl::HarmonicMetrics *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  int v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  int v8 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v8;
  int v9 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  int v10 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v10;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::HarmonicMetrics::HarmonicMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270642088;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270642088;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::HarmonicMetrics::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 40);
    int v15 = *(_DWORD *)(a1 + 44);
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v11[0] = &unk_270642088;
    v11[1] = v6;
    int v14 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v12 = *(_OWORD *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v9;
    uint64_t v13 = v8;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::HarmonicMetrics::formatText(CMMsl::HarmonicMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "stepIndexOfHarmonicityAP", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityML", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityVT", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityAP", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityML", *((float *)this + 8));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityVT", *((float *)this + 9));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "thetaAPDirRad", *((float *)this + 10));
  if (*((unsigned char *)this + 44)) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "timestamp");
LABEL_10:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::HarmonicMetrics::readFrom(CMMsl::HarmonicMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_65;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_63:
              unint64_t v2 = v28 + 1;
              goto LABEL_64;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_63;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_64;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_64:
        *((void *)this + 1) = v24;
        break;
      case 2u:
        *((unsigned char *)this + 44) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_59;
      case 3u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_59;
      case 4u:
        *((unsigned char *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_59;
      case 5u:
        *((unsigned char *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_59;
      case 6u:
        *((unsigned char *)this + 44) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_59;
      case 7u:
        *((unsigned char *)this + 44) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_59;
      case 8u:
        *((unsigned char *)this + 44) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_59:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_50:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_65:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::HarmonicMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 32));
    if ((*(unsigned char *)(v3 + 44) & 0x40) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_17:
  float v5 = *(float *)(v3 + 36);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::HarmonicMetrics::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 44);
  int v3 = *(unsigned __int8 *)(a2 + 44);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
  {
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if (((v3 | v2) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0) {
    return (v3 & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  }
  return v4;
}

uint64_t CMMsl::HarmonicMetrics::hash_value(CMMsl::HarmonicMetrics *this)
{
  if ((*((unsigned char *)this + 44) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 44) & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_26:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_27:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_12;
    }
LABEL_28:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_15;
    }
LABEL_29:
    uint64_t v11 = 0;
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_18;
    }
    goto LABEL_30;
  }
  uint64_t v1 = *((void *)this + 1);
  if ((*((unsigned char *)this + 44) & 0x80) == 0) {
    goto LABEL_25;
  }
LABEL_3:
  float v2 = *((float *)this + 10);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_26;
  }
LABEL_6:
  float v4 = *((float *)this + 4);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_27;
  }
LABEL_9:
  float v6 = *((float *)this + 5);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 44) & 8) == 0) {
    goto LABEL_28;
  }
LABEL_12:
  float v8 = *((float *)this + 6);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_29;
  }
LABEL_15:
  float v10 = *((float *)this + 7);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x20) != 0)
  {
LABEL_18:
    float v12 = *((float *)this + 8);
    uint64_t v13 = LODWORD(v12);
    if (v12 == 0.0) {
      uint64_t v13 = 0;
    }
    if ((*((unsigned char *)this + 44) & 0x40) != 0) {
      goto LABEL_21;
    }
LABEL_31:
    uint64_t v15 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_30:
  uint64_t v13 = 0;
  if ((*((unsigned char *)this + 44) & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_21:
  float v14 = *((float *)this + 9);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
}

double CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this)
{
  *(void *)this = &unk_2706420C0;
  *((void *)this + 21) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_2706420C0;
  *((void *)this + 21) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

void CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this)
{
  *(void *)this = &unk_2706420C0;
  float v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this, const CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a2)
{
  *(void *)this = &unk_2706420C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v5 = (void *)((char *)this + 56);
  *((void *)this + 21) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if ((*((_WORD *)a2 + 86) & 0x10) != 0)
  {
    uint64_t v7 = *((void *)a2 + 17);
    *((_WORD *)this + 86) = 16;
    *((void *)this + 17) = v7;
    __int16 v6 = 272;
    if ((*((_WORD *)a2 + 86) & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = 256;
  if ((*((_WORD *)a2 + 86) & 0x100) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 42);
    *((_WORD *)this + 86) = v6;
    *((_DWORD *)this + 42) = v8;
  }
LABEL_6:
  if (this != a2)
  {
    sub_2572C73EC((void *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
    sub_2572C73EC(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  __int16 v9 = *((_WORD *)a2 + 86);
  if ((v9 & 2) != 0)
  {
    uint64_t v10 = *((void *)a2 + 14);
    *((_WORD *)this + 86) |= 2u;
    *((void *)this + 14) = v10;
    __int16 v9 = *((_WORD *)a2 + 86);
  }
  if (v9)
  {
    uint64_t v11 = *((void *)a2 + 13);
    *((_WORD *)this + 86) |= 1u;
    *((void *)this + 13) = v11;
  }
  if (this != a2)
  {
    sub_2572C73EC((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_2572C73EC(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  __int16 v12 = *((_WORD *)a2 + 86);
  if ((v12 & 0x80) != 0)
  {
    uint64_t v15 = *((void *)a2 + 20);
    *((_WORD *)this + 86) |= 0x80u;
    *((void *)this + 20) = v15;
    __int16 v12 = *((_WORD *)a2 + 86);
    if ((v12 & 0x20) == 0)
    {
LABEL_16:
      if ((v12 & 0x40) == 0) {
        goto LABEL_17;
      }
      goto LABEL_23;
    }
  }
  else if ((v12 & 0x20) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v16 = *((void *)a2 + 18);
  *((_WORD *)this + 86) |= 0x20u;
  *((void *)this + 18) = v16;
  __int16 v12 = *((_WORD *)a2 + 86);
  if ((v12 & 0x40) == 0)
  {
LABEL_17:
    if ((v12 & 8) == 0) {
      goto LABEL_18;
    }
LABEL_24:
    uint64_t v18 = *((void *)a2 + 16);
    *((_WORD *)this + 86) |= 8u;
    *((void *)this + 16) = v18;
    if ((*((_WORD *)a2 + 86) & 4) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_23:
  uint64_t v17 = *((void *)a2 + 19);
  *((_WORD *)this + 86) |= 0x40u;
  *((void *)this + 19) = v17;
  __int16 v12 = *((_WORD *)a2 + 86);
  if ((v12 & 8) != 0) {
    goto LABEL_24;
  }
LABEL_18:
  if ((v12 & 4) != 0)
  {
LABEL_19:
    uint64_t v13 = *((void *)a2 + 15);
    *((_WORD *)this + 86) |= 4u;
    *((void *)this + 15) = v13;
  }
  return this;
}

CMMsl *CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator=(CMMsl *a1, const CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a2)
{
  if (a1 != a2)
  {
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate((CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5, a2);
    CMMsl::swap(a1, (CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5, v3);
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate((CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a2, CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a3)
{
  int v3 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v3;
  uint64_t v4 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v4;
  int v5 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v5;
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v6;
  uint64_t v7 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v7;
  uint64_t v8 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v8;
  uint64_t v9 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v12;
  uint64_t v13 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  uint64_t v16 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v16;
  uint64_t v17 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v17;
  uint64_t v18 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v18;
  uint64_t v19 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v19;
  uint64_t v20 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v20;
  uint64_t v21 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v21;
  uint64_t v22 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v22;
  uint64_t v23 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v23;
  double result = *((double *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((double *)a2 + 15) = result;
  return result;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706420C0;
  uint64_t v4 = a1 + 32;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a2 + 172) = 0;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  sub_2572C7560(a1 + 80, (__n128 *)(a2 + 80));
  sub_2572C7560(a1 + 56, (__n128 *)(a2 + 56));
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

CMMsl *CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5, v3);
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate((CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5);
  }
  return a1;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::formatText(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 86);
  if (v5)
  {
    PB::TextFormatter::format(a2, "covTraceAfterCorrection", *((double *)this + 13));
    __int16 v5 = *((_WORD *)this + 86);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "covTraceBeforeCorrection", *((double *)this + 14));
  }
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "dX", v8);
  }
  __int16 v9 = *((_WORD *)this + 86);
  if ((v9 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "lastStateTimestamp", *((double *)this + 15));
    __int16 v9 = *((_WORD *)this + 86);
    if ((v9 & 8) == 0)
    {
LABEL_9:
      if ((v9 & 0x100) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((v9 & 8) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "lidAngleDeg", *((double *)this + 16));
  if ((*((_WORD *)this + 86) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "measurementUpdateType");
LABEL_11:
  uint64_t v10 = (double *)*((void *)this + 4);
  uint64_t v11 = (double *)*((void *)this + 5);
  while (v10 != v11)
  {
    double v12 = *v10++;
    PB::TextFormatter::format(a2, "residual", v12);
  }
  uint64_t v13 = (double *)*((void *)this + 7);
  uint64_t v14 = (double *)*((void *)this + 8);
  while (v13 != v14)
  {
    double v15 = *v13++;
    PB::TextFormatter::format(a2, "stateQfbAfterCorrection", v15);
  }
  uint64_t v16 = (double *)*((void *)this + 10);
  uint64_t v17 = (double *)*((void *)this + 11);
  while (v16 != v17)
  {
    double v18 = *v16++;
    PB::TextFormatter::format(a2, "stateQfbBeforeCorrection", v18);
  }
  __int16 v19 = *((_WORD *)this + 86);
  if ((v19 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 17));
    __int16 v19 = *((_WORD *)this + 86);
    if ((v19 & 0x20) == 0)
    {
LABEL_19:
      if ((v19 & 0x40) == 0) {
        goto LABEL_20;
      }
      goto LABEL_30;
    }
  }
  else if ((v19 & 0x20) == 0)
  {
    goto LABEL_19;
  }
  PB::TextFormatter::format(a2, "wAuxBudNormMeanDps", *((double *)this + 18));
  __int16 v19 = *((_WORD *)this + 86);
  if ((v19 & 0x40) == 0)
  {
LABEL_20:
    if ((v19 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "wAuxFaceNormMeanDps", *((double *)this + 19));
  if ((*((_WORD *)this + 86) & 0x80) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(a2, "wSrcNormMeanDps", *((double *)this + 20));
LABEL_22:
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::readFrom(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 86) |= 0x10u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_233;
          }
          *((void *)this + 17) = *(void *)(*(void *)a2 + v20);
          goto LABEL_235;
        case 2u:
          *((_WORD *)this + 86) |= 0x100u;
          unint64_t v21 = *((void *)a2 + 1);
          unint64_t v22 = *((void *)a2 + 2);
          uint64_t v23 = *(void *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            do
            {
              unint64_t v27 = v21 + 1;
              *((void *)a2 + 1) = v21 + 1;
              char v28 = *(unsigned char *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0) {
                goto LABEL_202;
              }
              v24 += 7;
              unint64_t v21 = v27;
              BOOL v14 = v25++ > 8;
            }
            while (!v14);
LABEL_158:
            LODWORD(v26) = 0;
            goto LABEL_202;
          }
          char v92 = 0;
          unsigned int v93 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v94 = v21 + 1;
              char v95 = *(unsigned char *)(v23 + v21);
              *((void *)a2 + 1) = v94;
              v26 |= (unint64_t)(v95 & 0x7F) << v92;
              if (v95 < 0)
              {
                v92 += 7;
                unint64_t v21 = v94;
                BOOL v14 = v93++ > 8;
                if (v14) {
                  goto LABEL_158;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v26) = 0;
              }
            }
            break;
          }
LABEL_202:
          *((_DWORD *)this + 42) = v26;
          goto LABEL_236;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v29 = *((void *)a2 + 1);
            unint64_t v30 = *((void *)a2 + 2);
            while (v29 < v30 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v32 = (char *)*((void *)this + 11);
              unint64_t v31 = *((void *)this + 12);
              if ((unint64_t)v32 >= v31)
              {
                unint64_t v34 = (char *)*((void *)this + 10);
                uint64_t v35 = (v32 - v34) >> 3;
                unint64_t v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 61) {
                  goto LABEL_245;
                }
                uint64_t v37 = v31 - (void)v34;
                if (v37 >> 2 > v36) {
                  unint64_t v36 = v37 >> 2;
                }
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v38 = v36;
                }
                if (v38)
                {
                  unint64_t v38 = (unint64_t)sub_2572C7528(v38);
                  unint64_t v34 = (char *)*((void *)this + 10);
                  uint64_t v32 = (char *)*((void *)this + 11);
                }
                else
                {
                  uint64_t v39 = 0;
                }
                uint64_t v40 = (void *)(v38 + 8 * v35);
                *uint64_t v40 = 0;
                int v33 = v40 + 1;
                while (v32 != v34)
                {
                  uint64_t v41 = *((void *)v32 - 1);
                  v32 -= 8;
                  *--uint64_t v40 = v41;
                }
                *((void *)this + 10) = v40;
                *((void *)this + 11) = v33;
                *((void *)this + 12) = v38 + 8 * v39;
                if (v34) {
                  operator delete(v34);
                }
              }
              else
              {
                *(void *)uint64_t v32 = 0;
                int v33 = v32 + 8;
              }
              *((void *)this + 11) = v33;
              unint64_t v42 = *((void *)a2 + 1);
              if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *(v33 - 1) = *(void *)(*(void *)a2 + v42);
              unint64_t v30 = *((void *)a2 + 2);
              unint64_t v29 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v29;
            }
            goto LABEL_151;
          }
          unint64_t v97 = (char *)*((void *)this + 11);
          unint64_t v96 = *((void *)this + 12);
          if ((unint64_t)v97 >= v96)
          {
            unint64_t v105 = (char *)*((void *)this + 10);
            uint64_t v106 = (v97 - v105) >> 3;
            unint64_t v107 = v106 + 1;
            if ((unint64_t)(v106 + 1) >> 61) {
              goto LABEL_245;
            }
            uint64_t v108 = v96 - (void)v105;
            if (v108 >> 2 > v107) {
              unint64_t v107 = v108 >> 2;
            }
            if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v109 = v107;
            }
            if (v109)
            {
              unint64_t v109 = (unint64_t)sub_2572C7528(v109);
              unint64_t v105 = (char *)*((void *)this + 10);
              unint64_t v97 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v110 = 0;
            }
            unint64_t v129 = (void *)(v109 + 8 * v106);
            *unint64_t v129 = 0;
            uint64_t v98 = v129 + 1;
            while (v97 != v105)
            {
              uint64_t v130 = *((void *)v97 - 1);
              v97 -= 8;
              *--unint64_t v129 = v130;
            }
            *((void *)this + 10) = v129;
            *((void *)this + 11) = v98;
            *((void *)this + 12) = v109 + 8 * v110;
            if (v105) {
              operator delete(v105);
            }
          }
          else
          {
            *(void *)unint64_t v97 = 0;
            uint64_t v98 = v97 + 8;
          }
          *((void *)this + 11) = v98;
          goto LABEL_231;
        case 4u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v43 = *((void *)a2 + 1);
            unint64_t v44 = *((void *)a2 + 2);
            while (v43 < v44 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v46 = (char *)*((void *)this + 8);
              unint64_t v45 = *((void *)this + 9);
              if ((unint64_t)v46 >= v45)
              {
                int v48 = (char *)*((void *)this + 7);
                uint64_t v49 = (v46 - v48) >> 3;
                unint64_t v50 = v49 + 1;
                if ((unint64_t)(v49 + 1) >> 61) {
                  goto LABEL_245;
                }
                uint64_t v51 = v45 - (void)v48;
                if (v51 >> 2 > v50) {
                  unint64_t v50 = v51 >> 2;
                }
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v52 = v50;
                }
                if (v52)
                {
                  unint64_t v52 = (unint64_t)sub_2572C7528(v52);
                  int v48 = (char *)*((void *)this + 7);
                  uint64_t v46 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v53 = 0;
                }
                uint64_t v54 = (void *)(v52 + 8 * v49);
                *uint64_t v54 = 0;
                unsigned int v47 = v54 + 1;
                while (v46 != v48)
                {
                  uint64_t v55 = *((void *)v46 - 1);
                  v46 -= 8;
                  *--uint64_t v54 = v55;
                }
                *((void *)this + 7) = v54;
                *((void *)this + 8) = v47;
                *((void *)this + 9) = v52 + 8 * v53;
                if (v48) {
                  operator delete(v48);
                }
              }
              else
              {
                *(void *)uint64_t v46 = 0;
                unsigned int v47 = v46 + 8;
              }
              *((void *)this + 8) = v47;
              unint64_t v56 = *((void *)a2 + 1);
              if (v56 > 0xFFFFFFFFFFFFFFF7 || v56 + 8 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *(v47 - 1) = *(void *)(*(void *)a2 + v56);
              unint64_t v44 = *((void *)a2 + 2);
              unint64_t v43 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v43;
            }
            goto LABEL_151;
          }
          uint64_t v100 = (char *)*((void *)this + 8);
          unint64_t v99 = *((void *)this + 9);
          if ((unint64_t)v100 >= v99)
          {
            unint64_t v111 = (char *)*((void *)this + 7);
            uint64_t v112 = (v100 - v111) >> 3;
            unint64_t v113 = v112 + 1;
            if ((unint64_t)(v112 + 1) >> 61) {
              goto LABEL_245;
            }
            uint64_t v114 = v99 - (void)v111;
            if (v114 >> 2 > v113) {
              unint64_t v113 = v114 >> 2;
            }
            if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v115 = v113;
            }
            if (v115)
            {
              unint64_t v115 = (unint64_t)sub_2572C7528(v115);
              unint64_t v111 = (char *)*((void *)this + 7);
              uint64_t v100 = (char *)*((void *)this + 8);
            }
            else
            {
              uint64_t v116 = 0;
            }
            unint64_t v131 = (void *)(v115 + 8 * v112);
            *unint64_t v131 = 0;
            uint64_t v98 = v131 + 1;
            while (v100 != v111)
            {
              uint64_t v132 = *((void *)v100 - 1);
              v100 -= 8;
              *--unint64_t v131 = v132;
            }
            *((void *)this + 7) = v131;
            *((void *)this + 8) = v98;
            *((void *)this + 9) = v115 + 8 * v116;
            if (v111) {
              operator delete(v111);
            }
          }
          else
          {
            *(void *)uint64_t v100 = 0;
            uint64_t v98 = v100 + 8;
          }
          *((void *)this + 8) = v98;
          goto LABEL_231;
        case 5u:
          *((_WORD *)this + 86) |= 2u;
          unint64_t v57 = *((void *)a2 + 1);
          if (v57 > 0xFFFFFFFFFFFFFFF7 || v57 + 8 > *((void *)a2 + 2)) {
            goto LABEL_233;
          }
          *((void *)this + 14) = *(void *)(*(void *)a2 + v57);
          goto LABEL_235;
        case 6u:
          *((_WORD *)this + 86) |= 1u;
          unint64_t v58 = *((void *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((void *)a2 + 2)) {
            goto LABEL_233;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v58);
          goto LABEL_235;
        case 7u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v59 = *((void *)a2 + 1);
            unint64_t v60 = *((void *)a2 + 2);
            while (v59 < v60 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v62 = (char *)*((void *)this + 5);
              unint64_t v61 = *((void *)this + 6);
              if ((unint64_t)v62 >= v61)
              {
                uint64_t v64 = (char *)*((void *)this + 4);
                uint64_t v65 = (v62 - v64) >> 3;
                unint64_t v66 = v65 + 1;
                if ((unint64_t)(v65 + 1) >> 61) {
                  goto LABEL_245;
                }
                uint64_t v67 = v61 - (void)v64;
                if (v67 >> 2 > v66) {
                  unint64_t v66 = v67 >> 2;
                }
                if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v68 = v66;
                }
                if (v68)
                {
                  unint64_t v68 = (unint64_t)sub_2572C7528(v68);
                  uint64_t v64 = (char *)*((void *)this + 4);
                  uint64_t v62 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v69 = 0;
                }
                int v70 = (void *)(v68 + 8 * v65);
                *int v70 = 0;
                unint64_t v63 = v70 + 1;
                while (v62 != v64)
                {
                  uint64_t v71 = *((void *)v62 - 1);
                  v62 -= 8;
                  *--int v70 = v71;
                }
                *((void *)this + 4) = v70;
                *((void *)this + 5) = v63;
                *((void *)this + 6) = v68 + 8 * v69;
                if (v64) {
                  operator delete(v64);
                }
              }
              else
              {
                *(void *)uint64_t v62 = 0;
                unint64_t v63 = v62 + 8;
              }
              *((void *)this + 5) = v63;
              unint64_t v72 = *((void *)a2 + 1);
              if (v72 > 0xFFFFFFFFFFFFFFF7 || v72 + 8 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *(v63 - 1) = *(void *)(*(void *)a2 + v72);
              unint64_t v60 = *((void *)a2 + 2);
              unint64_t v59 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v59;
            }
            goto LABEL_151;
          }
          uint64_t v102 = (char *)*((void *)this + 5);
          unint64_t v101 = *((void *)this + 6);
          if ((unint64_t)v102 >= v101)
          {
            unint64_t v117 = (char *)*((void *)this + 4);
            uint64_t v118 = (v102 - v117) >> 3;
            unint64_t v119 = v118 + 1;
            if ((unint64_t)(v118 + 1) >> 61) {
              goto LABEL_245;
            }
            uint64_t v120 = v101 - (void)v117;
            if (v120 >> 2 > v119) {
              unint64_t v119 = v120 >> 2;
            }
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v121 = v119;
            }
            if (v121)
            {
              unint64_t v121 = (unint64_t)sub_2572C7528(v121);
              unint64_t v117 = (char *)*((void *)this + 4);
              uint64_t v102 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v122 = 0;
            }
            unint64_t v133 = (void *)(v121 + 8 * v118);
            *unint64_t v133 = 0;
            uint64_t v98 = v133 + 1;
            while (v102 != v117)
            {
              uint64_t v134 = *((void *)v102 - 1);
              v102 -= 8;
              *--unint64_t v133 = v134;
            }
            *((void *)this + 4) = v133;
            *((void *)this + 5) = v98;
            *((void *)this + 6) = v121 + 8 * v122;
            if (v117) {
              operator delete(v117);
            }
          }
          else
          {
            *(void *)uint64_t v102 = 0;
            uint64_t v98 = v102 + 8;
          }
          *((void *)this + 5) = v98;
          goto LABEL_231;
        case 8u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v73 = *((void *)a2 + 1);
            unint64_t v74 = *((void *)a2 + 2);
            while (v73 < v74 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v76 = (char *)*((void *)this + 2);
              unint64_t v75 = *((void *)this + 3);
              if ((unint64_t)v76 >= v75)
              {
                uint64_t v78 = (char *)*((void *)this + 1);
                uint64_t v79 = (v76 - v78) >> 3;
                unint64_t v80 = v79 + 1;
                if ((unint64_t)(v79 + 1) >> 61) {
                  goto LABEL_245;
                }
                uint64_t v81 = v75 - (void)v78;
                if (v81 >> 2 > v80) {
                  unint64_t v80 = v81 >> 2;
                }
                if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v82 = v80;
                }
                if (v82)
                {
                  unint64_t v82 = (unint64_t)sub_2572C7528(v82);
                  uint64_t v78 = (char *)*((void *)this + 1);
                  unint64_t v76 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v83 = 0;
                }
                int v84 = (void *)(v82 + 8 * v79);
                *int v84 = 0;
                uint64_t v77 = v84 + 1;
                while (v76 != v78)
                {
                  uint64_t v85 = *((void *)v76 - 1);
                  v76 -= 8;
                  *--int v84 = v85;
                }
                *((void *)this + 1) = v84;
                *((void *)this + 2) = v77;
                *((void *)this + 3) = v82 + 8 * v83;
                if (v78) {
                  operator delete(v78);
                }
              }
              else
              {
                *(void *)unint64_t v76 = 0;
                uint64_t v77 = v76 + 8;
              }
              *((void *)this + 2) = v77;
              unint64_t v86 = *((void *)a2 + 1);
              if (v86 > 0xFFFFFFFFFFFFFFF7 || v86 + 8 > *((void *)a2 + 2))
              {
LABEL_150:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v77 - 1) = *(void *)(*(void *)a2 + v86);
              unint64_t v74 = *((void *)a2 + 2);
              unint64_t v73 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v73;
            }
LABEL_151:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v104 = (char *)*((void *)this + 2);
            unint64_t v103 = *((void *)this + 3);
            if ((unint64_t)v104 >= v103)
            {
              uint64_t v123 = (char *)*((void *)this + 1);
              uint64_t v124 = (v104 - v123) >> 3;
              unint64_t v125 = v124 + 1;
              if ((unint64_t)(v124 + 1) >> 61) {
LABEL_245:
              }
                sub_2570AFD0C();
              uint64_t v126 = v103 - (void)v123;
              if (v126 >> 2 > v125) {
                unint64_t v125 = v126 >> 2;
              }
              if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v127 = v125;
              }
              if (v127)
              {
                unint64_t v127 = (unint64_t)sub_2572C7528(v127);
                uint64_t v123 = (char *)*((void *)this + 1);
                uint64_t v104 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v128 = 0;
              }
              unint64_t v135 = (void *)(v127 + 8 * v124);
              *unint64_t v135 = 0;
              uint64_t v98 = v135 + 1;
              while (v104 != v123)
              {
                uint64_t v136 = *((void *)v104 - 1);
                v104 -= 8;
                *--unint64_t v135 = v136;
              }
              *((void *)this + 1) = v135;
              *((void *)this + 2) = v98;
              *((void *)this + 3) = v127 + 8 * v128;
              if (v123) {
                operator delete(v123);
              }
            }
            else
            {
              *(void *)uint64_t v104 = 0;
              uint64_t v98 = v104 + 8;
            }
            *((void *)this + 2) = v98;
LABEL_231:
            unint64_t v137 = *((void *)a2 + 1);
            if (v137 <= 0xFFFFFFFFFFFFFFF7 && v137 + 8 <= *((void *)a2 + 2))
            {
              *(v98 - 1) = *(void *)(*(void *)a2 + v137);
LABEL_235:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_233:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        case 9u:
          *((_WORD *)this + 86) |= 0x80u;
          unint64_t v87 = *((void *)a2 + 1);
          if (v87 > 0xFFFFFFFFFFFFFFF7 || v87 + 8 > *((void *)a2 + 2)) {
            goto LABEL_233;
          }
          *((void *)this + 20) = *(void *)(*(void *)a2 + v87);
          goto LABEL_235;
        case 0xAu:
          *((_WORD *)this + 86) |= 0x20u;
          unint64_t v88 = *((void *)a2 + 1);
          if (v88 > 0xFFFFFFFFFFFFFFF7 || v88 + 8 > *((void *)a2 + 2)) {
            goto LABEL_233;
          }
          *((void *)this + 18) = *(void *)(*(void *)a2 + v88);
          goto LABEL_235;
        case 0xBu:
          *((_WORD *)this + 86) |= 0x40u;
          unint64_t v89 = *((void *)a2 + 1);
          if (v89 > 0xFFFFFFFFFFFFFFF7 || v89 + 8 > *((void *)a2 + 2)) {
            goto LABEL_233;
          }
          *((void *)this + 19) = *(void *)(*(void *)a2 + v89);
          goto LABEL_235;
        case 0xCu:
          *((_WORD *)this + 86) |= 8u;
          unint64_t v90 = *((void *)a2 + 1);
          if (v90 > 0xFFFFFFFFFFFFFFF7 || v90 + 8 > *((void *)a2 + 2)) {
            goto LABEL_233;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v90);
          goto LABEL_235;
        case 0xDu:
          *((_WORD *)this + 86) |= 4u;
          unint64_t v91 = *((void *)a2 + 1);
          if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((void *)a2 + 2)) {
            goto LABEL_233;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v91);
          goto LABEL_235;
        default:
          goto LABEL_19;
      }
      goto LABEL_236;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_236:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 172);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 136));
    __int16 v4 = *(_WORD *)(v3 + 172);
  }
  if ((v4 & 0x100) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  __int16 v5 = *(double **)(v3 + 80);
  uint64_t v6 = *(double **)(v3 + 88);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  uint64_t v8 = *(double **)(v3 + 56);
  char v9 = *(double **)(v3 + 64);
  while (v8 != v9)
  {
    double v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  __int16 v11 = *(_WORD *)(v3 + 172);
  if ((v11 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 112));
    __int16 v11 = *(_WORD *)(v3 + 172);
  }
  if (v11) {
    this = PB::Writer::write(a2, *(double *)(v3 + 104));
  }
  unint64_t v12 = *(double **)(v3 + 32);
  char v13 = *(double **)(v3 + 40);
  while (v12 != v13)
  {
    double v14 = *v12++;
    this = PB::Writer::write(a2, v14);
  }
  char v15 = *(double **)(v3 + 8);
  unsigned int v16 = *(double **)(v3 + 16);
  while (v15 != v16)
  {
    double v17 = *v15++;
    this = PB::Writer::write(a2, v17);
  }
  __int16 v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 160));
    __int16 v18 = *(_WORD *)(v3 + 172);
    if ((v18 & 0x20) == 0)
    {
LABEL_23:
      if ((v18 & 0x40) == 0) {
        goto LABEL_24;
      }
      goto LABEL_29;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_23;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  __int16 v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x40) == 0)
  {
LABEL_24:
    if ((v18 & 8) == 0) {
      goto LABEL_25;
    }
LABEL_30:
    this = PB::Writer::write(a2, *(double *)(v3 + 128));
    if ((*(_WORD *)(v3 + 172) & 4) == 0) {
      return this;
    }
    goto LABEL_31;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  __int16 v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 8) != 0) {
    goto LABEL_30;
  }
LABEL_25:
  if ((v18 & 4) == 0) {
    return this;
  }
LABEL_31:
  double v19 = *(double *)(v3 + 120);
  return PB::Writer::write(a2, v19);
}

BOOL CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 172);
  __int16 v3 = *(_WORD *)(a2 + 172);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 172) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 172) & 0x100) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 172) & 0x100) != 0)
  {
    return 0;
  }
  __int16 v5 = *(double **)(a1 + 80);
  __int16 v4 = *(double **)(a1 + 88);
  uint64_t v6 = *(double **)(a2 + 80);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 88) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  uint64_t v8 = *(double **)(a1 + 56);
  double v7 = *(double **)(a1 + 64);
  char v9 = *(double **)(a2 + 56);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 64) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  __int16 v11 = *(double **)(a1 + 32);
  double v10 = *(double **)(a1 + 40);
  unint64_t v12 = *(double **)(a2 + 32);
  if ((char *)v10 - (char *)v11 != *(void *)(a2 + 40) - (void)v12) {
    return 0;
  }
  while (v11 != v10)
  {
    if (*v11 != *v12) {
      return 0;
    }
    ++v11;
    ++v12;
  }
  double v14 = *(double **)(a1 + 8);
  char v13 = *(double **)(a1 + 16);
  char v15 = *(double **)(a2 + 8);
  if ((char *)v13 - (char *)v14 != *(void *)(a2 + 16) - (void)v15) {
    return 0;
  }
  while (v14 != v13)
  {
    if (*v14 != *v15) {
      return 0;
    }
    ++v14;
    ++v15;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v16 = (v3 & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(double *)(a1 + 120) == *(double *)(a2 + 120);
  }
  return v16;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::hash_value(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this)
{
  if ((*((_WORD *)this + 86) & 0x10) != 0)
  {
    if (*((double *)this + 17) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 17);
    }
    if ((*((_WORD *)this + 86) & 0x100) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((_WORD *)this + 86) & 0x100) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 42);
      goto LABEL_9;
    }
  }
  uint64_t v3 = 0;
LABEL_9:
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  __int16 v6 = *((_WORD *)this + 86);
  if ((v6 & 2) != 0)
  {
    if (*((double *)this + 14) == 0.0) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *((void *)this + 14);
    }
    if (v6) {
      goto LABEL_11;
    }
LABEL_18:
    uint64_t v8 = 0;
    goto LABEL_19;
  }
  uint64_t v7 = 0;
  if ((v6 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_11:
  if (*((double *)this + 13) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 13);
  }
LABEL_19:
  uint64_t v9 = PBHashBytes();
  uint64_t v10 = PBHashBytes();
  __int16 v11 = *((_WORD *)this + 86);
  if ((v11 & 0x80) == 0)
  {
    double v12 = 0.0;
    if ((v11 & 0x20) != 0) {
      goto LABEL_21;
    }
LABEL_36:
    double v13 = 0.0;
    if ((v11 & 0x40) != 0) {
      goto LABEL_24;
    }
LABEL_37:
    double v14 = 0.0;
    if ((v11 & 8) != 0) {
      goto LABEL_27;
    }
    goto LABEL_38;
  }
  double v12 = *((double *)this + 20);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v11 & 0x20) == 0) {
    goto LABEL_36;
  }
LABEL_21:
  double v13 = *((double *)this + 18);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v11 & 0x40) == 0) {
    goto LABEL_37;
  }
LABEL_24:
  double v14 = *((double *)this + 19);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v11 & 8) != 0)
  {
LABEL_27:
    double v15 = *((double *)this + 16);
    if (v15 == 0.0) {
      double v15 = 0.0;
    }
    if ((v11 & 4) != 0) {
      goto LABEL_30;
    }
LABEL_39:
    double v16 = 0.0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16;
  }
LABEL_38:
  double v15 = 0.0;
  if ((v11 & 4) == 0) {
    goto LABEL_39;
  }
LABEL_30:
  double v16 = *((double *)this + 15);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16;
}

double CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(CMMsl::HeadToHeadsetTransformationEstimate *this)
{
  *(void *)this = &unk_2706420F8;
  *((_DWORD *)this + 20) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_2706420F8;
  *((_DWORD *)this + 20) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate(CMMsl::HeadToHeadsetTransformationEstimate *this)
{
  *(void *)this = &unk_2706420F8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::HeadToHeadsetTransformationEstimate *CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(CMMsl::HeadToHeadsetTransformationEstimate *this, const CMMsl::HeadToHeadsetTransformationEstimate *a2)
{
  *(void *)this = &unk_2706420F8;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((unsigned char *)a2 + 80) & 4) != 0)
  {
    uint64_t v5 = *((void *)a2 + 9);
    *((unsigned char *)this + 80) = 4;
    *((void *)this + 9) = v5;
  }
  if (this != a2)
  {
    sub_2572C73EC((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_2572C73EC(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  char v6 = *((unsigned char *)a2 + 80);
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 8);
    *((unsigned char *)this + 80) |= 2u;
    *((void *)this + 8) = v7;
    char v6 = *((unsigned char *)a2 + 80);
  }
  if (v6)
  {
    uint64_t v8 = *((void *)a2 + 7);
    *((unsigned char *)this + 80) |= 1u;
    *((void *)this + 7) = v8;
  }
  return this;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::operator=(uint64_t a1, const CMMsl::HeadToHeadsetTransformationEstimate *a2)
{
  if ((const CMMsl::HeadToHeadsetTransformationEstimate *)a1 != a2)
  {
    CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate((CMMsl::HeadToHeadsetTransformationEstimate *)v10, a2);
    int v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v15;
    uint64_t v15 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v7;
    long long v13 = v5;
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v14 = v8;
    CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate((CMMsl::HeadToHeadsetTransformationEstimate *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HeadToHeadsetTransformationEstimate *a2, CMMsl::HeadToHeadsetTransformationEstimate *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706420F8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v15;
    uint64_t v15 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v7;
    long long v13 = v5;
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v14 = v8;
    CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate((CMMsl::HeadToHeadsetTransformationEstimate *)v10);
  }
  return a1;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::formatText(CMMsl::HeadToHeadsetTransformationEstimate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 80)) {
    PB::TextFormatter::format(a2, "lastUpdateTimestamp", *((double *)this + 7));
  }
  long long v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "stateCov", v7);
  }
  if ((*((unsigned char *)this + 80) & 2) != 0) {
    PB::TextFormatter::format(a2, "stateCovTrace", *((double *)this + 8));
  }
  long long v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "stateQfb", v10);
  }
  if ((*((unsigned char *)this + 80) & 4) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 9));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::HeadToHeadsetTransformationEstimate::readFrom(CMMsl::HeadToHeadsetTransformationEstimate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 80) |= 4u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_118;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v20);
          goto LABEL_120;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v21 = *((void *)a2 + 1);
            unint64_t v22 = *((void *)a2 + 2);
            while (v21 < v22 && !*((unsigned char *)a2 + 24))
            {
              char v24 = (char *)*((void *)this + 5);
              unint64_t v23 = *((void *)this + 6);
              if ((unint64_t)v24 >= v23)
              {
                uint64_t v26 = (char *)*((void *)this + 4);
                uint64_t v27 = (v24 - v26) >> 3;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 61) {
                  goto LABEL_128;
                }
                uint64_t v29 = v23 - (void)v26;
                if (v29 >> 2 > v28) {
                  unint64_t v28 = v29 >> 2;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30)
                {
                  unint64_t v30 = (unint64_t)sub_2572C7528(v30);
                  uint64_t v26 = (char *)*((void *)this + 4);
                  char v24 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v31 = 0;
                }
                uint64_t v32 = (void *)(v30 + 8 * v27);
                *uint64_t v32 = 0;
                unsigned int v25 = v32 + 1;
                while (v24 != v26)
                {
                  uint64_t v33 = *((void *)v24 - 1);
                  v24 -= 8;
                  *--uint64_t v32 = v33;
                }
                *((void *)this + 4) = v32;
                *((void *)this + 5) = v25;
                *((void *)this + 6) = v30 + 8 * v31;
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                *(void *)char v24 = 0;
                unsigned int v25 = v24 + 8;
              }
              *((void *)this + 5) = v25;
              unint64_t v34 = *((void *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((void *)a2 + 2)) {
                goto LABEL_84;
              }
              *(v25 - 1) = *(void *)(*(void *)a2 + v34);
              unint64_t v22 = *((void *)a2 + 2);
              unint64_t v21 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v21;
            }
            goto LABEL_85;
          }
          unint64_t v52 = (char *)*((void *)this + 5);
          unint64_t v51 = *((void *)this + 6);
          if ((unint64_t)v52 >= v51)
          {
            unint64_t v56 = (char *)*((void *)this + 4);
            uint64_t v57 = (v52 - v56) >> 3;
            unint64_t v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 61) {
              goto LABEL_128;
            }
            uint64_t v59 = v51 - (void)v56;
            if (v59 >> 2 > v58) {
              unint64_t v58 = v59 >> 2;
            }
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v60 = v58;
            }
            if (v60)
            {
              unint64_t v60 = (unint64_t)sub_2572C7528(v60);
              unint64_t v56 = (char *)*((void *)this + 4);
              unint64_t v52 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v61 = 0;
            }
            unint64_t v68 = (void *)(v60 + 8 * v57);
            *unint64_t v68 = 0;
            uint64_t v53 = v68 + 1;
            while (v52 != v56)
            {
              uint64_t v69 = *((void *)v52 - 1);
              v52 -= 8;
              *--unint64_t v68 = v69;
            }
            *((void *)this + 4) = v68;
            *((void *)this + 5) = v53;
            *((void *)this + 6) = v60 + 8 * v61;
            if (v56) {
              operator delete(v56);
            }
          }
          else
          {
            *(void *)unint64_t v52 = 0;
            uint64_t v53 = v52 + 8;
          }
          *((void *)this + 5) = v53;
          goto LABEL_116;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v35 = *((void *)a2 + 1);
            unint64_t v36 = *((void *)a2 + 2);
            while (v35 < v36 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v38 = (char *)*((void *)this + 2);
              unint64_t v37 = *((void *)this + 3);
              if ((unint64_t)v38 >= v37)
              {
                uint64_t v40 = (char *)*((void *)this + 1);
                uint64_t v41 = (v38 - v40) >> 3;
                unint64_t v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 61) {
                  goto LABEL_128;
                }
                uint64_t v43 = v37 - (void)v40;
                if (v43 >> 2 > v42) {
                  unint64_t v42 = v43 >> 2;
                }
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v44 = v42;
                }
                if (v44)
                {
                  unint64_t v44 = (unint64_t)sub_2572C7528(v44);
                  uint64_t v40 = (char *)*((void *)this + 1);
                  unint64_t v38 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v45 = 0;
                }
                uint64_t v46 = (void *)(v44 + 8 * v41);
                *uint64_t v46 = 0;
                uint64_t v39 = v46 + 1;
                while (v38 != v40)
                {
                  uint64_t v47 = *((void *)v38 - 1);
                  v38 -= 8;
                  *--uint64_t v46 = v47;
                }
                *((void *)this + 1) = v46;
                *((void *)this + 2) = v39;
                *((void *)this + 3) = v44 + 8 * v45;
                if (v40) {
                  operator delete(v40);
                }
              }
              else
              {
                *(void *)unint64_t v38 = 0;
                uint64_t v39 = v38 + 8;
              }
              *((void *)this + 2) = v39;
              unint64_t v48 = *((void *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((void *)a2 + 2))
              {
LABEL_84:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v39 - 1) = *(void *)(*(void *)a2 + v48);
              unint64_t v36 = *((void *)a2 + 2);
              unint64_t v35 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v35;
            }
LABEL_85:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v55 = (char *)*((void *)this + 2);
            unint64_t v54 = *((void *)this + 3);
            if ((unint64_t)v55 >= v54)
            {
              uint64_t v62 = (char *)*((void *)this + 1);
              uint64_t v63 = (v55 - v62) >> 3;
              unint64_t v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 61) {
LABEL_128:
              }
                sub_2570AFD0C();
              uint64_t v65 = v54 - (void)v62;
              if (v65 >> 2 > v64) {
                unint64_t v64 = v65 >> 2;
              }
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v66 = v64;
              }
              if (v66)
              {
                unint64_t v66 = (unint64_t)sub_2572C7528(v66);
                uint64_t v62 = (char *)*((void *)this + 1);
                uint64_t v55 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v67 = 0;
              }
              int v70 = (void *)(v66 + 8 * v63);
              *int v70 = 0;
              uint64_t v53 = v70 + 1;
              while (v55 != v62)
              {
                uint64_t v71 = *((void *)v55 - 1);
                v55 -= 8;
                *--int v70 = v71;
              }
              *((void *)this + 1) = v70;
              *((void *)this + 2) = v53;
              *((void *)this + 3) = v66 + 8 * v67;
              if (v62) {
                operator delete(v62);
              }
            }
            else
            {
              *(void *)uint64_t v55 = 0;
              uint64_t v53 = v55 + 8;
            }
            *((void *)this + 2) = v53;
LABEL_116:
            unint64_t v72 = *((void *)a2 + 1);
            if (v72 <= 0xFFFFFFFFFFFFFFF7 && v72 + 8 <= *((void *)a2 + 2))
            {
              *(v53 - 1) = *(void *)(*(void *)a2 + v72);
LABEL_120:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_118:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        case 4u:
          *((unsigned char *)this + 80) |= 2u;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((void *)a2 + 2)) {
            goto LABEL_118;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v49);
          goto LABEL_120;
        case 5u:
          *((unsigned char *)this + 80) |= 1u;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)a2 + 2)) {
            goto LABEL_118;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v50);
          goto LABEL_120;
        default:
          goto LABEL_19;
      }
      goto LABEL_121;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_121:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 80) & 4) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 72));
  }
  int v4 = *(double **)(v3 + 32);
  long long v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  double v7 = *(double **)(v3 + 8);
  uint64_t v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  char v10 = *(unsigned char *)(v3 + 80);
  if ((v10 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 64));
    char v10 = *(unsigned char *)(v3 + 80);
  }
  if (v10)
  {
    double v11 = *(double *)(v3 + 56);
    return PB::Writer::write(a2, v11);
  }
  return this;
}

BOOL CMMsl::HeadToHeadsetTransformationEstimate::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 80) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 80) & 4) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 80) & 4) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 32);
  unint64_t v2 = *(double **)(a1 + 40);
  int v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  double v6 = *(double **)(a1 + 8);
  long long v5 = *(double **)(a1 + 16);
  double v7 = *(double **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 16) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  if ((*(unsigned char *)(a1 + 80) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 80) & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 80) & 2) != 0)
  {
    return 0;
  }
  BOOL v8 = (*(unsigned char *)(a2 + 80) & 1) == 0;
  if (*(unsigned char *)(a1 + 80)) {
    return (*(unsigned char *)(a2 + 80) & 1) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  }
  return v8;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::hash_value(CMMsl::HeadToHeadsetTransformationEstimate *this)
{
  if ((*((unsigned char *)this + 80) & 4) != 0)
  {
    if (*((double *)this + 9) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 9);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 80) & 2) != 0)
  {
    double v5 = *((double *)this + 8);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if (*((unsigned char *)this + 80)) {
      goto LABEL_8;
    }
LABEL_14:
    double v6 = 0.0;
    return v3 ^ v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6;
  }
  double v5 = 0.0;
  if ((*((unsigned char *)this + 80) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  double v6 = *((double *)this + 7);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6;
}

void *CMMsl::HeadTrackingBehaviorUpdate::HeadTrackingBehaviorUpdate(void *this)
{
  *this = &unk_270642130;
  this[1] = 0;
  return this;
}

{
  *this = &unk_270642130;
  this[1] = 0;
  return this;
}

void CMMsl::HeadTrackingBehaviorUpdate::~HeadTrackingBehaviorUpdate(CMMsl::HeadTrackingBehaviorUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::HeadTrackingBehaviorUpdate(uint64_t this, const CMMsl::HeadTrackingBehaviorUpdate *a2)
{
  *(void *)this = &unk_270642130;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(void *)this = &unk_270642130;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &unk_270642130;
    int v3 = *(unsigned __int8 *)(a2 + 12);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = &unk_270642130;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::HeadTrackingBehaviorUpdate *a2, CMMsl::HeadTrackingBehaviorUpdate *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::HeadTrackingBehaviorUpdate(uint64_t result, uint64_t a2)
{
  *(void *)double result = &unk_270642130;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)double result = &unk_270642130;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::formatText(CMMsl::HeadTrackingBehaviorUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "trackingBehavior");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::readFrom(CMMsl::HeadTrackingBehaviorUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_42:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::HeadTrackingBehaviorUpdate::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::hash_value(CMMsl::HeadTrackingBehaviorUpdate *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

void *CMMsl::HeadTrackingClientModeUpdate::HeadTrackingClientModeUpdate(void *this)
{
  *this = &unk_270642168;
  this[1] = 0;
  return this;
}

{
  *this = &unk_270642168;
  this[1] = 0;
  return this;
}

void CMMsl::HeadTrackingClientModeUpdate::~HeadTrackingClientModeUpdate(CMMsl::HeadTrackingClientModeUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::HeadTrackingClientModeUpdate(uint64_t this, const CMMsl::HeadTrackingClientModeUpdate *a2)
{
  *(void *)this = &unk_270642168;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(void *)this = &unk_270642168;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &unk_270642168;
    int v3 = *(unsigned __int8 *)(a2 + 12);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = &unk_270642168;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::HeadTrackingClientModeUpdate *a2, CMMsl::HeadTrackingClientModeUpdate *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::HeadTrackingClientModeUpdate(uint64_t result, uint64_t a2)
{
  *(void *)BOOL result = &unk_270642168;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)BOOL result = &unk_270642168;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::formatText(CMMsl::HeadTrackingClientModeUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "clientMode");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::readFrom(CMMsl::HeadTrackingClientModeUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_42:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::HeadTrackingClientModeUpdate::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::hash_value(CMMsl::HeadTrackingClientModeUpdate *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t CMMsl::HeartRateReference::HeartRateReference(uint64_t this)
{
  *(void *)this = &unk_2706421A0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_2706421A0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::HeartRateReference::~HeartRateReference(CMMsl::HeartRateReference *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::HeartRateReference::HeartRateReference(CMMsl::HeartRateReference *this, const CMMsl::HeartRateReference *a2)
{
  *(void *)this = &unk_2706421A0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::HeartRateReference::operator=(uint64_t a1, const CMMsl::HeartRateReference *a2)
{
  if ((const CMMsl::HeartRateReference *)a1 != a2)
  {
    CMMsl::HeartRateReference::HeartRateReference((CMMsl::HeartRateReference *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HeartRateReference *a2, CMMsl::HeartRateReference *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::HeartRateReference::HeartRateReference(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706421A0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706421A0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::HeartRateReference::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[0] = &unk_2706421A0;
    v9[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::HeartRateReference::formatText(CMMsl::HeartRateReference *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "bpm");
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 2));
  if ((*((unsigned char *)this + 32) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 3));
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::HeartRateReference::readFrom(CMMsl::HeartRateReference *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
        if (v14) {
          goto LABEL_31;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_31;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v19 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((unsigned char *)this + 32) |= 2u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_47:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if (v19 != 2)
      {
        if (v19 == 1)
        {
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v2 = *((void *)a2 + 2);
          uint64_t v21 = *(void *)a2;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v24 = 0;
            if (v2 <= v20) {
              unint64_t v2 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v2 == v20)
              {
                uint64_t v24 = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_52;
              }
              unint64_t v29 = v20++;
              char v30 = *(unsigned char *)(v21 + v29);
              *((void *)a2 + 1) = v20;
              v24 |= (unint64_t)(v30 & 0x7F) << v27;
              if ((v30 & 0x80) == 0) {
                break;
              }
              v27 += 7;
              BOOL v14 = v28++ > 8;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_51;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v24 = 0;
            }
LABEL_51:
            unint64_t v2 = v29 + 1;
          }
          else
          {
            char v22 = 0;
            unsigned int v23 = 0;
            uint64_t v24 = 0;
            while (1)
            {
              unint64_t v2 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v25 = *(unsigned char *)(v21 + v20);
              v24 |= (unint64_t)(v25 & 0x7F) << v22;
              if ((v25 & 0x80) == 0) {
                break;
              }
              v22 += 7;
              unint64_t v20 = v2;
              BOOL v14 = v23++ > 8;
              if (v14)
              {
                uint64_t v24 = 0;
                break;
              }
            }
          }
LABEL_52:
          *((void *)this + 1) = v24;
        }
        else
        {
LABEL_31:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
        }
        goto LABEL_53;
      }
      *((unsigned char *)this + 32) |= 4u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      }
    }
    *((unsigned char *)a2 + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::HeartRateReference::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 32) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 24));
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::HeartRateReference::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::HeartRateReference::hash_value(CMMsl::HeartRateReference *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 4) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 3);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 32) & 2) != 0) {
        goto LABEL_6;
      }
LABEL_11:
      double v3 = 0.0;
      return *(void *)&v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3;
}

void *CMMsl::HgAccel::HgAccel(void *this)
{
  *this = &unk_2706421D8;
  this[1] = 0;
  return this;
}

{
  *this = &unk_2706421D8;
  this[1] = 0;
  return this;
}

void CMMsl::HgAccel::~HgAccel(CMMsl::HgAccel *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706421D8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::HgAccel::~HgAccel(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::HgAccel::HgAccel(void *this, const CMMsl::HgAccel *a2)
{
  *this = &unk_2706421D8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::HgAccel *CMMsl::HgAccel::operator=(const CMMsl::HgAccel *a1, const CMMsl::HgAccel *a2)
{
  if (a1 != a2)
  {
    CMMsl::HgAccel::HgAccel(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::HgAccel::~HgAccel((CMMsl::HgAccel *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::HgAccel *a2, CMMsl::HgAccel *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::HgAccel::HgAccel(void *a1, uint64_t a2)
{
  *a1 = &unk_2706421D8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706421D8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::HgAccel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706421D8;
    v6[1] = v4;
    CMMsl::HgAccel::~HgAccel((CMMsl::HgAccel *)v6);
  }
  return a1;
}

uint64_t CMMsl::HgAccel::formatText(CMMsl::HgAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::HgAccel::readFrom(CMMsl::HgAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HgAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::HgAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Accel::operator==(v2, v3);
  }
  return result;
}

CMMsl::Accel *CMMsl::HgAccel::hash_value(CMMsl::HgAccel *this)
{
  BOOL result = (CMMsl::Accel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::HgAccel::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::ISPPacket::ISPPacket(uint64_t this)
{
  *(void *)this = &unk_270642210;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

{
  *(void *)this = &unk_270642210;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

void CMMsl::ISPPacket::~ISPPacket(CMMsl::ISPPacket *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::ISPPacket::ISPPacket(CMMsl::ISPPacket *this, const CMMsl::ISPPacket *a2)
{
  *(void *)this = &unk_270642210;
  *((_DWORD *)this + 32) = 0;
  int v2 = *((_DWORD *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 32) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 26);
    v3 |= 0x100000u;
    *((_DWORD *)this + 32) = v3;
    *((_DWORD *)this + 26) = v4;
    int v2 = *((_DWORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 27);
    v3 |= 0x200000u;
    *((_DWORD *)this + 32) = v3;
    *((_DWORD *)this + 27) = v4;
    int v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x80000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x400000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 28) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x80000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 25) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x10000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 22) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x20000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 23) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x40000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 24) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x8000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 21) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x800u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x1000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x2000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 19) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v4 = *((void *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 32) = v3;
  *((void *)this + 4) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v5 = *((_DWORD *)a2 + 16);
  v3 |= 0x400u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 16) = v5;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v4 = *((void *)a2 + 2);
  v3 |= 2u;
  *((_DWORD *)this + 32) = v3;
  *((void *)this + 2) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x80u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 13) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 14) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x200u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 15) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x4000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 20) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x800000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 29) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 30) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v2 & 4) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 31) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_27:
    if ((v2 & 0x10) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v4 = *((void *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 32) = v3;
  *((void *)this + 3) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_28:
    if ((v2 & 0x20) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 10) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_29:
    if ((v2 & 0x40) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 11) = v4;
  if ((*((_DWORD *)a2 + 32) & 0x40) == 0) {
    return *(float *)&v4;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 32) = v3 | 0x40;
  *((_DWORD *)this + 12) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::ISPPacket::operator=(CMMsl *a1, const CMMsl::ISPPacket *a2)
{
  if (a1 != a2)
  {
    CMMsl::ISPPacket::ISPPacket((CMMsl::ISPPacket *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ISPPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ISPPacket *a2, CMMsl::ISPPacket *a3)
{
  int v3 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  int v6 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v7;
  LODWORD(v7) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  LODWORD(v7) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v7;
  LODWORD(v7) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v7;
  LODWORD(v7) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v7;
  LODWORD(v7) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  LODWORD(v8) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  float result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

float CMMsl::ISPPacket::ISPPacket(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270642210;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  float result = *(float *)(a2 + 48);
  *(float *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::ISPPacket::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ISPPacket::ISPPacket((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ISPPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ISPPacket::formatText(CMMsl::ISPPacket *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "accelUnfilteredX", *((float *)this + 10));
    int v5 = *((_DWORD *)this + 32);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelUnfilteredY", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "accelUnfilteredZ", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "accelX", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "accelY", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "accelZ", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "flags");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "gravityX", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "gravityY", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "gravityZ", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "gyroBiasErrorEstimate", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "quaternionPredictedW", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "quaternionPredictedX", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "quaternionPredictedY", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "quaternionPredictedZ", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "quaternionW", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "quaternionX", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "quaternionY", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "quaternionZ", *((float *)this + 28));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "rotationRateX", *((float *)this + 29));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "rotationRateY", *((float *)this + 30));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "rotationRateZ", *((float *)this + 31));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_24:
    if ((v5 & 2) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "timestampAccel", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_26:
    if ((v5 & 8) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "timestampAccelUnfiltered", *((double *)this + 3));
  if ((*((_DWORD *)this + 32) & 8) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(a2, "timestampPrediction", *((double *)this + 4));
LABEL_28:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ISPPacket::readFrom(CMMsl::ISPPacket *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_116;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 2u:
        *((_DWORD *)this + 32) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 3u:
        *((_DWORD *)this + 32) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 4u:
        *((_DWORD *)this + 32) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 5u:
        *((_DWORD *)this + 32) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 6u:
        *((_DWORD *)this + 32) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 7u:
        *((_DWORD *)this + 32) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 8u:
        *((_DWORD *)this + 32) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 9u:
        *((_DWORD *)this + 32) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0xAu:
        *((_DWORD *)this + 32) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0xBu:
        *((_DWORD *)this + 32) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0xCu:
        *((_DWORD *)this + 32) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0xDu:
        *((_DWORD *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 0xEu:
        *((_DWORD *)this + 32) |= 0x400u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_125;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_124:
              unint64_t v2 = v28 + 1;
              goto LABEL_125;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_124;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_125;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_125:
        *((_DWORD *)this + 16) = v24;
        break;
      case 0xFu:
        *((_DWORD *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 0x10u:
        *((_DWORD *)this + 32) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x11u:
        *((_DWORD *)this + 32) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x12u:
        *((_DWORD *)this + 32) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x13u:
        *((_DWORD *)this + 32) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x14u:
        *((_DWORD *)this + 32) |= 0x800000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x15u:
        *((_DWORD *)this + 32) |= 0x1000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x16u:
        *((_DWORD *)this + 32) |= 0x2000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x17u:
        *((_DWORD *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_96:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_115;
      case 0x18u:
        *((_DWORD *)this + 32) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x19u:
        *((_DWORD *)this + 32) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_105;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x1Au:
        *((_DWORD *)this + 32) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_114:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_115:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_105:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_116:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ISPPacket::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 128);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v4 & 4) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_24:
    if ((v4 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_25:
    if ((v4 & 0x20) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    this = PB::Writer::write(a2, *(float *)(v3 + 44));
    if ((*(_DWORD *)(v3 + 128) & 0x40) == 0) {
      return this;
    }
    goto LABEL_53;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_53:
  float v5 = *(float *)(v3 + 48);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::ISPPacket::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 128);
  int v3 = *(_DWORD *)(a2 + 128);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 128) & 0x40) == 0;
  if ((v2 & 0x40) != 0) {
    return (v3 & 0x40) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  }
  return v4;
}

uint64_t CMMsl::ISPPacket::hash_value(CMMsl::ISPPacket *this)
{
  int v1 = *((_DWORD *)this + 32);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_3;
    }
LABEL_79:
    uint64_t v4 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_6;
    }
LABEL_80:
    uint64_t v6 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_9;
    }
LABEL_81:
    uint64_t v8 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_12;
    }
LABEL_82:
    uint64_t v10 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_15;
    }
LABEL_83:
    uint64_t v12 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_18;
    }
LABEL_84:
    uint64_t v14 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_21;
    }
LABEL_85:
    uint64_t v16 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_24;
    }
LABEL_86:
    uint64_t v18 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_27;
    }
LABEL_87:
    uint64_t v20 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_30;
    }
LABEL_88:
    uint64_t v22 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_33;
    }
LABEL_89:
    uint64_t v24 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_36;
    }
LABEL_90:
    double v25 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_39;
    }
    goto LABEL_91;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_79;
  }
LABEL_3:
  float v3 = *((float *)this + 26);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_80;
  }
LABEL_6:
  float v5 = *((float *)this + 27);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_81;
  }
LABEL_9:
  float v7 = *((float *)this + 28);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_82;
  }
LABEL_12:
  float v9 = *((float *)this + 25);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_83;
  }
LABEL_15:
  float v11 = *((float *)this + 22);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_84;
  }
LABEL_18:
  float v13 = *((float *)this + 23);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_85;
  }
LABEL_21:
  float v15 = *((float *)this + 24);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_86;
  }
LABEL_24:
  float v17 = *((float *)this + 21);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_87;
  }
LABEL_27:
  float v19 = *((float *)this + 17);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_88;
  }
LABEL_30:
  float v21 = *((float *)this + 18);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_89;
  }
LABEL_33:
  float v23 = *((float *)this + 19);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_90;
  }
LABEL_36:
  double v25 = *((double *)this + 4);
  if (v25 == 0.0) {
    double v25 = 0.0;
  }
  if ((v1 & 0x400) != 0)
  {
LABEL_39:
    uint64_t v26 = *((unsigned int *)this + 16);
    if ((v1 & 2) != 0) {
      goto LABEL_40;
    }
LABEL_92:
    double v27 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_43;
    }
LABEL_93:
    uint64_t v29 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_46;
    }
LABEL_94:
    uint64_t v31 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_49;
    }
LABEL_95:
    uint64_t v33 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_52;
    }
LABEL_96:
    uint64_t v35 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_55;
    }
LABEL_97:
    uint64_t v37 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_58;
    }
LABEL_98:
    uint64_t v39 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_61;
    }
LABEL_99:
    uint64_t v41 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_64;
    }
LABEL_100:
    double v42 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_67;
    }
LABEL_101:
    uint64_t v44 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_70;
    }
    goto LABEL_102;
  }
LABEL_91:
  uint64_t v26 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_92;
  }
LABEL_40:
  double v27 = *((double *)this + 2);
  if (v27 == 0.0) {
    double v27 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_93;
  }
LABEL_43:
  float v28 = *((float *)this + 13);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_94;
  }
LABEL_46:
  float v30 = *((float *)this + 14);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_95;
  }
LABEL_49:
  float v32 = *((float *)this + 15);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_96;
  }
LABEL_52:
  float v34 = *((float *)this + 20);
  uint64_t v35 = LODWORD(v34);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_97;
  }
LABEL_55:
  float v36 = *((float *)this + 29);
  uint64_t v37 = LODWORD(v36);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_98;
  }
LABEL_58:
  float v38 = *((float *)this + 30);
  uint64_t v39 = LODWORD(v38);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_99;
  }
LABEL_61:
  float v40 = *((float *)this + 31);
  uint64_t v41 = LODWORD(v40);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_100;
  }
LABEL_64:
  double v42 = *((double *)this + 3);
  if (v42 == 0.0) {
    double v42 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_101;
  }
LABEL_67:
  float v43 = *((float *)this + 10);
  uint64_t v44 = LODWORD(v43);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_70:
    float v45 = *((float *)this + 11);
    uint64_t v46 = LODWORD(v45);
    if (v45 == 0.0) {
      uint64_t v46 = 0;
    }
    if ((v1 & 0x40) != 0) {
      goto LABEL_73;
    }
LABEL_103:
    uint64_t v48 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ *(void *)&v25 ^ v26 ^ *(void *)&v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ *(void *)&v42 ^ v44 ^ v46 ^ v48;
  }
LABEL_102:
  uint64_t v46 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_103;
  }
LABEL_73:
  float v47 = *((float *)this + 12);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ *(void *)&v25 ^ v26 ^ *(void *)&v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ *(void *)&v42 ^ v44 ^ v46 ^ v48;
}

uint64_t CMMsl::InEarAdditionalState::InEarAdditionalState(uint64_t this)
{
  *(void *)this = &unk_270642248;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = &unk_270642248;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::InEarAdditionalState::~InEarAdditionalState(CMMsl::InEarAdditionalState *this)
{
  *(void *)this = &unk_270642248;
  double v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270642248;
  double v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270642248;
  double v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}