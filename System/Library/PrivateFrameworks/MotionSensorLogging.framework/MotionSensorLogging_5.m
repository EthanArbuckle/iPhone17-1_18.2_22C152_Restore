void CMMsl::RunningVerticalOscillationGradientBoostedSignals::~RunningVerticalOscillationGradientBoostedSignals(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this)
{
  uint64_t vars8;

  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals(uint64_t this, const CMMsl::RunningVerticalOscillationGradientBoostedSignals *a2)
{
  *(void *)this = &unk_270644A18;
  *(_DWORD *)(this + 212) = 0;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v4 = *((void *)a2 + 19);
    int v3 = 0x40000;
    *(_DWORD *)(this + 212) = 0x40000;
    *(void *)(this + 152) = v4;
    int v2 = *((_DWORD *)a2 + 53);
    if ((v2 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 15);
    v3 |= 0x4000u;
    *(_DWORD *)(this + 212) = v3;
    *(void *)(this + 120) = v5;
    int v2 = *((_DWORD *)a2 + 53);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    uint64_t v6 = *((void *)a2 + 11);
    v3 |= 0x400u;
    *(_DWORD *)(this + 212) = v3;
    *(void *)(this + 88) = v6;
    int v2 = *((_DWORD *)a2 + 53);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 96) = v7;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v8 = *((void *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 104) = v8;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v9 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 16) = v9;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v10 = *((void *)a2 + 25);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 200) = v10;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v11 = *((void *)a2 + 22);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 176) = v11;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v12 = *((void *)a2 + 21);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 168) = v12;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v13 = *((void *)a2 + 18);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 144) = v13;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v14 = *((void *)a2 + 16);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 128) = v14;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v15 = *((void *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 80) = v15;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v16 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 56) = v16;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v17 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 48) = v17;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v18 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 32) = v18;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v19 = *((void *)a2 + 24);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 192) = v19;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v20 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 40) = v20;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x2000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v21 = *((void *)a2 + 14);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 112) = v21;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v22 = *((void *)a2 + 9);
  v3 |= 0x100u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 72) = v22;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v23 = *((void *)a2 + 17);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 136) = v23;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v24 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 64) = v24;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 1) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v25 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 24) = v25;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 1) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v26 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 8) = v26;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x400000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v27 = *((void *)a2 + 23);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 184) = v27;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000000) == 0) {
      return this;
    }
LABEL_54:
    char v29 = *((unsigned char *)a2 + 208);
    *(_DWORD *)(this + 212) = v3 | 0x2000000;
    *(unsigned char *)(this + 208) = v29;
    return this;
  }
LABEL_53:
  uint64_t v28 = *((void *)a2 + 20);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 160) = v28;
  if ((*((_DWORD *)a2 + 53) & 0x2000000) != 0) {
    goto LABEL_54;
  }
  return this;
}

CMMsl *CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator=(CMMsl *a1, const CMMsl::RunningVerticalOscillationGradientBoostedSignals *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationGradientBoostedSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningVerticalOscillationGradientBoostedSignals *a2, CMMsl::RunningVerticalOscillationGradientBoostedSignals *a3)
{
  int v3 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v3;
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v4;
  uint64_t v5 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v5;
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v6;
  uint64_t v7 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v7;
  uint64_t v8 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v10;
  uint64_t v11 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v11;
  uint64_t v12 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v12;
  uint64_t v13 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v13;
  uint64_t v14 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v14;
  uint64_t v15 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v15;
  uint64_t v16 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v16;
  uint64_t v17 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v17;
  uint64_t v18 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v18;
  uint64_t v19 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v21;
  uint64_t v22 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v22;
  uint64_t v23 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v23;
  uint64_t v24 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v24;
  uint64_t v25 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v25;
  uint64_t v26 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v26;
  uint64_t v27 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v27;
  double result = *((double *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((double *)a2 + 20) = result;
  LOBYTE(v3) = *((unsigned char *)this + 208);
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 208);
  *((unsigned char *)a2 + 208) = v3;
  return result;
}

double CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644A18;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a2 + 212) = 0;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  double result = *(double *)(a2 + 160);
  *(double *)(a1 + 160) = result;
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  return result;
}

CMMsl *CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationGradientBoostedSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::formatText(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 53);
  if (v5)
  {
    PB::TextFormatter::format(a2, "centerOfMassAccelZAmplitudeBackwards", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 53);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "height", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "integratedAngleYg", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "integratedAngleYgBackwards", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "integratedCenterOfAccelZMaxBackwards", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "integratedRotationAxisWZ", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "integratedRotationAxisWZForwards", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "integratedRotationRateYBackwards", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "integratedUserAccelTForwards", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "integratedUserAccelY", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "integratedVelocityZ", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "integratedVelocityZBackwards", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "integratedVelocityZForwards", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "isValidPeak");
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "medianCadence", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "peakTime", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "rotationAxisWTAmplitudeXForwards", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "rotationRateMaxZForwards", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "rotationTMaxZForwards", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 19));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "strideLengthCadence", *((double *)this + 20));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "swingAccelAmplitudeYBackwards", *((double *)this + 21));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "swingAccelMeanXBackwards", *((double *)this + 22));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "swingAccelTZMean", *((double *)this + 23));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x800000) == 0)
  {
LABEL_26:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "userAccelTMeanXBackards", *((double *)this + 24));
  if ((*((_DWORD *)this + 53) & 0x1000000) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(a2, "weight", *((double *)this + 25));
LABEL_28:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::readFrom(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_104;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 53) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 2u:
        *((_DWORD *)this + 53) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 3u:
        *((_DWORD *)this + 53) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 4u:
        *((_DWORD *)this + 53) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 5u:
        *((_DWORD *)this + 53) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 6u:
        *((_DWORD *)this + 53) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 7u:
        *((_DWORD *)this + 53) |= 0x1000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 25) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 8u:
        *((_DWORD *)this + 53) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 22) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 9u:
        *((_DWORD *)this + 53) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0xAu:
        *((_DWORD *)this + 53) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0xBu:
        *((_DWORD *)this + 53) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0xCu:
        *((_DWORD *)this + 53) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0xDu:
        *((_DWORD *)this + 53) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0xEu:
        *((_DWORD *)this + 53) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0xFu:
        *((_DWORD *)this + 53) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0x10u:
        *((_DWORD *)this + 53) |= 0x800000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 24) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0x11u:
        *((_DWORD *)this + 53) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0x12u:
        *((_DWORD *)this + 53) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0x13u:
        *((_DWORD *)this + 53) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0x14u:
        *((_DWORD *)this + 53) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0x15u:
        *((_DWORD *)this + 53) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0x16u:
        *((_DWORD *)this + 53) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0x17u:
        *((_DWORD *)this + 53) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0x18u:
        *((_DWORD *)this + 53) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_99;
        }
        *((void *)this + 23) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0x19u:
        *((_DWORD *)this + 53) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_99:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
LABEL_103:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        break;
      case 0x1Au:
        *((_DWORD *)this + 53) |= 0x2000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 208) = v21;
        break;
      default:
        goto LABEL_19;
    }
LABEL_104:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 212);
  if ((v4 & 0x40000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 152));
    int v4 = *(_DWORD *)(v3 + 212);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 200));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 176));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 192));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    this = PB::Writer::write(a2, *(double *)(v3 + 160));
    if ((*(_DWORD *)(v3 + 212) & 0x2000000) == 0) {
      return this;
    }
    goto LABEL_53;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 184));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80000) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 0x2000000) == 0) {
    return this;
  }
LABEL_53:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::hash_value(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this)
{
  int v1 = *((_DWORD *)this + 53);
  if ((v1 & 0x40000) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_3;
    }
LABEL_79:
    double v3 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_6;
    }
LABEL_80:
    double v4 = 0.0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_9;
    }
LABEL_81:
    double v5 = 0.0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_12;
    }
LABEL_82:
    double v6 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_15;
    }
LABEL_83:
    double v7 = 0.0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_18;
    }
LABEL_84:
    double v8 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_21;
    }
LABEL_85:
    double v9 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_24;
    }
LABEL_86:
    double v10 = 0.0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_27;
    }
LABEL_87:
    double v11 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_30;
    }
LABEL_88:
    double v12 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_33;
    }
LABEL_89:
    double v13 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_36;
    }
LABEL_90:
    double v14 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_39;
    }
LABEL_91:
    double v15 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_42;
    }
LABEL_92:
    double v16 = 0.0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_45;
    }
LABEL_93:
    double v17 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_48;
    }
LABEL_94:
    double v18 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_51;
    }
LABEL_95:
    double v19 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_54;
    }
LABEL_96:
    double v20 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_57;
    }
LABEL_97:
    double v21 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_60;
    }
LABEL_98:
    double v22 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_63;
    }
LABEL_99:
    double v23 = 0.0;
    if (v1) {
      goto LABEL_66;
    }
LABEL_100:
    double v24 = 0.0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_69;
    }
LABEL_101:
    double v25 = 0.0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_72;
    }
    goto LABEL_102;
  }
  double v2 = *((double *)this + 19);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_79;
  }
LABEL_3:
  double v3 = *((double *)this + 15);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_80;
  }
LABEL_6:
  double v4 = *((double *)this + 11);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_81;
  }
LABEL_9:
  double v5 = *((double *)this + 12);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_82;
  }
LABEL_12:
  double v6 = *((double *)this + 13);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_83;
  }
LABEL_15:
  double v7 = *((double *)this + 2);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_84;
  }
LABEL_18:
  double v8 = *((double *)this + 25);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_85;
  }
LABEL_21:
  double v9 = *((double *)this + 22);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_86;
  }
LABEL_24:
  double v10 = *((double *)this + 21);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_87;
  }
LABEL_27:
  double v11 = *((double *)this + 18);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_88;
  }
LABEL_30:
  double v12 = *((double *)this + 16);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_89;
  }
LABEL_33:
  double v13 = *((double *)this + 10);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_90;
  }
LABEL_36:
  double v14 = *((double *)this + 7);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_91;
  }
LABEL_39:
  double v15 = *((double *)this + 6);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_92;
  }
LABEL_42:
  double v16 = *((double *)this + 4);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_93;
  }
LABEL_45:
  double v17 = *((double *)this + 24);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_94;
  }
LABEL_48:
  double v18 = *((double *)this + 5);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_95;
  }
LABEL_51:
  double v19 = *((double *)this + 14);
  if (v19 == 0.0) {
    double v19 = 0.0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_96;
  }
LABEL_54:
  double v20 = *((double *)this + 9);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_97;
  }
LABEL_57:
  double v21 = *((double *)this + 17);
  if (v21 == 0.0) {
    double v21 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_98;
  }
LABEL_60:
  double v22 = *((double *)this + 8);
  if (v22 == 0.0) {
    double v22 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_99;
  }
LABEL_63:
  double v23 = *((double *)this + 3);
  if (v23 == 0.0) {
    double v23 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_100;
  }
LABEL_66:
  double v24 = *((double *)this + 1);
  if (v24 == 0.0) {
    double v24 = 0.0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_101;
  }
LABEL_69:
  double v25 = *((double *)this + 23);
  if (v25 == 0.0) {
    double v25 = 0.0;
  }
  if ((v1 & 0x80000) != 0)
  {
LABEL_72:
    double v26 = *((double *)this + 20);
    if (v26 == 0.0) {
      double v26 = 0.0;
    }
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_75;
    }
LABEL_103:
    uint64_t v27 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23 ^ *(void *)&v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ v27;
  }
LABEL_102:
  double v26 = 0.0;
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_103;
  }
LABEL_75:
  uint64_t v27 = *((unsigned __int8 *)this + 208);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23 ^ *(void *)&v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ v27;
}

void CMMsl::RunningVerticalOscillationSignals::~RunningVerticalOscillationSignals(CMMsl::RunningVerticalOscillationSignals *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals(CMMsl::RunningVerticalOscillationSignals *this, const CMMsl::RunningVerticalOscillationSignals *a2)
{
  *(void *)this = &unk_270644A50;
  *((_DWORD *)this + 52) = 0;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x400) != 0)
  {
    double result = *((double *)a2 + 11);
    int v3 = 1024;
    *((_DWORD *)this + 52) = 1024;
    *((double *)this + 11) = result;
    int v2 = *((_DWORD *)a2 + 52);
    if ((v2 & 0x10000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 17);
    v3 |= 0x10000u;
    *((_DWORD *)this + 52) = v3;
    *((double *)this + 17) = result;
    int v2 = *((_DWORD *)a2 + 52);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_DWORD *)this + 52) = v3;
    *((double *)this + 1) = result;
    int v2 = *((_DWORD *)a2 + 52);
    if ((v2 & 0x800000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_32;
    }
  }
  else if ((v2 & 0x800000) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 24);
  v3 |= 0x800000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 24) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  double result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 12) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  double result = *((double *)a2 + 25);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 25) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x200000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  double result = *((double *)a2 + 22);
  v3 |= 0x200000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 22) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  double result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 3) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }
LABEL_44:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_46;
  }
LABEL_45:
  double result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_47;
  }
LABEL_46:
  double result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_48;
  }
LABEL_47:
  double result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x400000) == 0)
  {
LABEL_25:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_49;
  }
LABEL_48:
  double result = *((double *)a2 + 23);
  v3 |= 0x400000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 23) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x40000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_50;
  }
LABEL_49:
  double result = *((double *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0) {
      goto LABEL_28;
    }
    goto LABEL_51;
  }
LABEL_50:
  double result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 18) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_52:
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 52) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_51:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 9) = result;
  if ((*((_DWORD *)a2 + 52) & 2) != 0) {
    goto LABEL_52;
  }
  return result;
}

CMMsl *CMMsl::RunningVerticalOscillationSignals::operator=(CMMsl *a1, const CMMsl::RunningVerticalOscillationSignals *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals((CMMsl::RunningVerticalOscillationSignals *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningVerticalOscillationSignals *a2, CMMsl::RunningVerticalOscillationSignals *a3)
{
  int v3 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v3;
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v4;
  uint64_t v5 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v7;
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v9;
  uint64_t v10 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v15;
  uint64_t v16 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v16;
  uint64_t v17 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v17;
  uint64_t v18 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v18;
  uint64_t v19 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v19;
  uint64_t v20 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v20;
  uint64_t v21 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v21;
  uint64_t v22 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v22;
  uint64_t v23 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v23;
  uint64_t v24 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v24;
  uint64_t v25 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v25;
  uint64_t v26 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v26;
  uint64_t v27 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v27;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644A50;
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a2 + 208) = 0;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::RunningVerticalOscillationSignals::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::formatText(CMMsl::RunningVerticalOscillationSignals *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 52);
  if (v5)
  {
    PB::TextFormatter::format(a2, "acceleration", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "centerOfMassAccelAmplitude", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "centerOfMassAccelMax", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "centripetalAccelMeanY", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "centripetalAccelMeanZ", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "height", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "position", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "rotationProjectedGravityAmplitude", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "rotationRateMean", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "rotationRateMeanX", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "strideLengthCadence", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "swingAccelAmplitudeY", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "swingAccelAmplitudeZ", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "swingAccelMaxY", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "swingAccelMaxZ", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "userAccelAmplitudeZ", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "userAccelMaxX", *((double *)this + 19));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "userAccelMaxY", *((double *)this + 20));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "userAccelMean", *((double *)this + 21));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "userAccelMeanY", *((double *)this + 22));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "userAccelProjectedGravityAmplitudeCadence", *((double *)this + 23));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "velocity", *((double *)this + 24));
  if ((*((_DWORD *)this + 52) & 0x1000000) != 0) {
LABEL_26:
  }
    PB::TextFormatter::format(a2, "weight", *((double *)this + 25));
LABEL_27:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RunningVerticalOscillationSignals::readFrom(CMMsl::RunningVerticalOscillationSignals *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_100;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 52) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 2u:
        *((_DWORD *)this + 52) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 3u:
        *((_DWORD *)this + 52) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 4u:
        *((_DWORD *)this + 52) |= 0x800000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 24) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 5u:
        *((_DWORD *)this + 52) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 6u:
        *((_DWORD *)this + 52) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 7u:
        *((_DWORD *)this + 52) |= 0x1000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 25) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 8u:
        *((_DWORD *)this + 52) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 9u:
        *((_DWORD *)this + 52) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0xAu:
        *((_DWORD *)this + 52) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0xBu:
        *((_DWORD *)this + 52) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0xCu:
        *((_DWORD *)this + 52) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 22) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0xDu:
        *((_DWORD *)this + 52) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0xEu:
        *((_DWORD *)this + 52) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0xFu:
        *((_DWORD *)this + 52) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0x10u:
        *((_DWORD *)this + 52) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0x11u:
        *((_DWORD *)this + 52) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0x12u:
        *((_DWORD *)this + 52) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0x13u:
        *((_DWORD *)this + 52) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0x14u:
        *((_DWORD *)this + 52) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0x15u:
        *((_DWORD *)this + 52) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 23) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0x16u:
        *((_DWORD *)this + 52) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0x17u:
        *((_DWORD *)this + 52) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0x18u:
        *((_DWORD *)this + 52) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 0x19u:
        *((_DWORD *)this + 52) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_97:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_99:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_100:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 208);
  if ((v4 & 0x400) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 88));
    int v4 = *(_DWORD *)(v3 + 208);
    if ((v4 & 0x10000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x10000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 192));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 200));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 176));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x8000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x400000) == 0)
  {
LABEL_22:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 184));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
LABEL_50:
    this = PB::Writer::write(a2, *(double *)(v3 + 72));
    if ((*(_DWORD *)(v3 + 208) & 2) == 0) {
      return this;
    }
    goto LABEL_51;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100) != 0) {
    goto LABEL_50;
  }
LABEL_25:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_51:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::RunningVerticalOscillationSignals::hash_value(CMMsl::RunningVerticalOscillationSignals *this)
{
  int v1 = *((_DWORD *)this + 52);
  if ((v1 & 0x400) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_3;
    }
LABEL_78:
    double v3 = 0.0;
    if (v1) {
      goto LABEL_6;
    }
LABEL_79:
    double v4 = 0.0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_9;
    }
LABEL_80:
    double v5 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_81:
    double v6 = 0.0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_15;
    }
LABEL_82:
    double v7 = 0.0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_18;
    }
LABEL_83:
    double v8 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_21;
    }
LABEL_84:
    double v9 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_24;
    }
LABEL_85:
    double v10 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_27;
    }
LABEL_86:
    double v11 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_30;
    }
LABEL_87:
    double v12 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_33;
    }
LABEL_88:
    double v13 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_36;
    }
LABEL_89:
    double v14 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_39;
    }
LABEL_90:
    double v15 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_42;
    }
LABEL_91:
    double v16 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_45;
    }
LABEL_92:
    double v17 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_48;
    }
LABEL_93:
    double v18 = 0.0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_51;
    }
LABEL_94:
    double v19 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_54;
    }
LABEL_95:
    double v20 = 0.0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_57;
    }
LABEL_96:
    double v21 = 0.0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_60;
    }
LABEL_97:
    double v22 = 0.0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_63;
    }
LABEL_98:
    double v23 = 0.0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_66;
    }
LABEL_99:
    double v24 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_69;
    }
    goto LABEL_100;
  }
  double v2 = *((double *)this + 11);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_78;
  }
LABEL_3:
  double v3 = *((double *)this + 17);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_79;
  }
LABEL_6:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_80;
  }
LABEL_9:
  double v5 = *((double *)this + 24);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_81;
  }
LABEL_12:
  double v6 = *((double *)this + 7);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_82;
  }
LABEL_15:
  double v7 = *((double *)this + 12);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_83;
  }
LABEL_18:
  double v8 = *((double *)this + 25);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_84;
  }
LABEL_21:
  double v9 = *((double *)this + 6);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_85;
  }
LABEL_24:
  double v10 = *((double *)this + 8);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_86;
  }
LABEL_27:
  double v11 = *((double *)this + 21);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_87;
  }
LABEL_30:
  double v12 = *((double *)this + 4);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_88;
  }
LABEL_33:
  double v13 = *((double *)this + 22);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_89;
  }
LABEL_36:
  double v14 = *((double *)this + 16);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_90;
  }
LABEL_39:
  double v15 = *((double *)this + 3);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_91;
  }
LABEL_42:
  double v16 = *((double *)this + 5);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_92;
  }
LABEL_45:
  double v17 = *((double *)this + 10);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_93;
  }
LABEL_48:
  double v18 = *((double *)this + 14);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_94;
  }
LABEL_51:
  double v19 = *((double *)this + 13);
  if (v19 == 0.0) {
    double v19 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_95;
  }
LABEL_54:
  double v20 = *((double *)this + 15);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_96;
  }
LABEL_57:
  double v21 = *((double *)this + 20);
  if (v21 == 0.0) {
    double v21 = 0.0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_97;
  }
LABEL_60:
  double v22 = *((double *)this + 23);
  if (v22 == 0.0) {
    double v22 = 0.0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_98;
  }
LABEL_63:
  double v23 = *((double *)this + 19);
  if (v23 == 0.0) {
    double v23 = 0.0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_99;
  }
LABEL_66:
  double v24 = *((double *)this + 18);
  if (v24 == 0.0) {
    double v24 = 0.0;
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_69:
    double v25 = *((double *)this + 9);
    if (v25 == 0.0) {
      double v25 = 0.0;
    }
    if ((v1 & 2) != 0) {
      goto LABEL_72;
    }
LABEL_101:
    double v26 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23 ^ *(void *)&v24 ^ *(void *)&v25 ^ *(void *)&v26;
  }
LABEL_100:
  double v25 = 0.0;
  if ((v1 & 2) == 0) {
    goto LABEL_101;
  }
LABEL_72:
  double v26 = *((double *)this + 2);
  if (v26 == 0.0) {
    double v26 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23 ^ *(void *)&v24 ^ *(void *)&v25 ^ *(void *)&v26;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival(uint64_t this)
{
  *(void *)this = &unk_270644A88;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = &unk_270644A88;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::SMEstimatedTimeOfArrival::~SMEstimatedTimeOfArrival(CMMsl::SMEstimatedTimeOfArrival *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival(uint64_t this, const CMMsl::SMEstimatedTimeOfArrival *a2)
{
  *(void *)this = &unk_270644A88;
  *(_DWORD *)(this + 36) = 0;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    char v3 = 4;
    *(unsigned char *)(this + 36) = 4;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 36))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 36) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(this + 36) = v3 | 8;
    *(_DWORD *)(this + 32) = v7;
    return this;
  }
  uint64_t v6 = *((void *)a2 + 2);
  v3 |= 2u;
  *(unsigned char *)(this + 36) = v3;
  *(void *)(this + 16) = v6;
  if ((*((unsigned char *)a2 + 36) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::operator=(uint64_t a1, const CMMsl::SMEstimatedTimeOfArrival *a2)
{
  if ((const CMMsl::SMEstimatedTimeOfArrival *)a1 != a2)
  {
    CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival((uint64_t)v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    *(void *)&long long v3 = v10;
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v3;
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMEstimatedTimeOfArrival *a2, CMMsl::SMEstimatedTimeOfArrival *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  return result;
}

double CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644A88;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644A88;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_270644A88;
    uint64_t v3 = *(void *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::formatText(CMMsl::SMEstimatedTimeOfArrival *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 36);
  if (v5)
  {
    PB::TextFormatter::format(a2, "calculatedArrival", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "motionState");
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "originalArrival", *((double *)this + 2));
  if ((*((unsigned char *)this + 36) & 4) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::readFrom(CMMsl::SMEstimatedTimeOfArrival *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_53;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 36) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      case 2u:
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      case 3u:
        *((unsigned char *)this + 36) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_47:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_31:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((unsigned char *)this + 36) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_52;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_51:
              unint64_t v2 = v28 + 1;
              goto LABEL_52;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_51;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_52;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_52:
        *((_DWORD *)this + 8) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_53:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 36);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 36) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 36) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::SMEstimatedTimeOfArrival::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 8) == 0;
  if ((*(unsigned char *)(a1 + 36) & 8) != 0) {
    return (*(unsigned char *)(a2 + 36) & 8) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return v2;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::hash_value(CMMsl::SMEstimatedTimeOfArrival *this)
{
  if ((*((unsigned char *)this + 36) & 4) == 0)
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 36)) {
      goto LABEL_3;
    }
LABEL_13:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 36) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 36) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 36) & 2) != 0)
  {
LABEL_6:
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 36) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v4 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4;
  }
LABEL_14:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 36) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v4 = *((int *)this + 8);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4;
}

uint64_t CMMsl::SMLastScreenLock::SMLastScreenLock(uint64_t this)
{
  *(void *)this = &unk_270644AC0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_270644AC0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::SMLastScreenLock::~SMLastScreenLock(CMMsl::SMLastScreenLock *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::SMLastScreenLock::SMLastScreenLock(CMMsl::SMLastScreenLock *this, const CMMsl::SMLastScreenLock *a2)
{
  *(void *)this = &unk_270644AC0;
  *((_DWORD *)this + 6) = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 24) = 2;
    *((double *)this + 2) = result;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 24))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::SMLastScreenLock::operator=(uint64_t a1, const CMMsl::SMLastScreenLock *a2)
{
  if ((const CMMsl::SMLastScreenLock *)a1 != a2)
  {
    CMMsl::SMLastScreenLock::SMLastScreenLock((CMMsl::SMLastScreenLock *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMLastScreenLock *a2, CMMsl::SMLastScreenLock *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SMLastScreenLock::SMLastScreenLock(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644AC0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644AC0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SMLastScreenLock::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_270644AC0;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::SMLastScreenLock::formatText(CMMsl::SMLastScreenLock *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "lastUnlockDate", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SMLastScreenLock::readFrom(CMMsl::SMLastScreenLock *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_26;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_30:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::SMLastScreenLock::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

BOOL CMMsl::SMLastScreenLock::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if (*(unsigned char *)(a1 + 24)) {
    return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::SMLastScreenLock::hash_value(CMMsl::SMLastScreenLock *this)
{
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 24)) {
      goto LABEL_3;
    }
LABEL_9:
    double v2 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1;
}

uint64_t CMMsl::SMLockStateChange::SMLockStateChange(uint64_t this)
{
  *(void *)this = &unk_270644AF8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_270644AF8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::SMLockStateChange::~SMLockStateChange(CMMsl::SMLockStateChange *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::SMLockStateChange::SMLockStateChange(CMMsl::SMLockStateChange *this, const CMMsl::SMLockStateChange *a2)
{
  *(void *)this = &unk_270644AF8;
  *((_DWORD *)this + 6) = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 24) = 2;
    *((double *)this + 2) = result;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 24))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::SMLockStateChange::operator=(uint64_t a1, const CMMsl::SMLockStateChange *a2)
{
  if ((const CMMsl::SMLockStateChange *)a1 != a2)
  {
    CMMsl::SMLockStateChange::SMLockStateChange((CMMsl::SMLockStateChange *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMLockStateChange *a2, CMMsl::SMLockStateChange *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SMLockStateChange::SMLockStateChange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644AF8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644AF8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SMLockStateChange::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_270644AF8;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::SMLockStateChange::formatText(CMMsl::SMLockStateChange *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "stateChangeType", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SMLockStateChange::readFrom(CMMsl::SMLockStateChange *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_26;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_30:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::SMLockStateChange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

BOOL CMMsl::SMLockStateChange::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if (*(unsigned char *)(a1 + 24)) {
    return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::SMLockStateChange::hash_value(CMMsl::SMLockStateChange *this)
{
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 24)) {
      goto LABEL_3;
    }
LABEL_9:
    double v2 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1;
}

uint64_t CMMsl::SMSessionConfiguration::SMSessionConfiguration(uint64_t this)
{
  *(void *)this = &unk_270644B30;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(void *)this = &unk_270644B30;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void CMMsl::SMSessionConfiguration::~SMSessionConfiguration(CMMsl::SMSessionConfiguration *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::SMSessionConfiguration::SMSessionConfiguration(CMMsl::SMSessionConfiguration *this, const CMMsl::SMSessionConfiguration *a2)
{
  *(void *)this = &unk_270644B30;
  *((_DWORD *)this + 14) = 0;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 0x10) != 0)
  {
    double result = *((double *)a2 + 5);
    char v3 = 16;
    *((unsigned char *)this + 56) = 16;
    *((double *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 56) & 8) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 4);
    v3 |= 8u;
    *((unsigned char *)this + 56) = v3;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 56) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((unsigned char *)this + 56) = v3;
  *((double *)this + 3) = result;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_14:
    double result = *((double *)a2 + 6);
    *((unsigned char *)this + 56) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_13:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((unsigned char *)this + 56) = v3;
  *((double *)this + 1) = result;
  if ((*((unsigned char *)a2 + 56) & 0x20) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t CMMsl::SMSessionConfiguration::operator=(uint64_t a1, const CMMsl::SMSessionConfiguration *a2)
{
  if ((const CMMsl::SMSessionConfiguration *)a1 != a2)
  {
    CMMsl::SMSessionConfiguration::SMSessionConfiguration((CMMsl::SMSessionConfiguration *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMSessionConfiguration *a2, CMMsl::SMSessionConfiguration *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  double result = *((double *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::SMSessionConfiguration::SMSessionConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644B30;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644B30;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t CMMsl::SMSessionConfiguration::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = &unk_270644B30;
    int v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    int v13 = *(_DWORD *)(a1 + 56);
    long long v11 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a2 + 8);
    long long v5 = *(_OWORD *)(a2 + 24);
    long long v10 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 40) = v7;
    long long v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::SMSessionConfiguration::formatText(CMMsl::SMSessionConfiguration *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 56);
  if (v5)
  {
    PB::TextFormatter::format(a2, "destinationHunc", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "destinationLat", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "destinationLon", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "sessionEndTimestamp", *((double *)this + 4));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "sessionStartTimestamp", *((double *)this + 5));
  if ((*((unsigned char *)this + 56) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "transportationType", *((double *)this + 6));
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SMSessionConfiguration::readFrom(CMMsl::SMSessionConfiguration *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_43;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 56) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 2u:
        *((unsigned char *)this + 56) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 3u:
        *((unsigned char *)this + 56) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 4u:
        *((unsigned char *)this + 56) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 5u:
        *((unsigned char *)this + 56) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 6u:
        *((unsigned char *)this + 56) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
LABEL_42:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_40:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_43:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SMSessionConfiguration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 56);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 56) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 56);
  if (v4) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 48);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::SMSessionConfiguration::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    if ((*(unsigned char *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 56))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 56) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 56) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 56) & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  }
  return v2;
}

uint64_t CMMsl::SMSessionConfiguration::hash_value(CMMsl::SMSessionConfiguration *this)
{
  if ((*((unsigned char *)this + 56) & 0x10) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 56) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_21:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 56) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_22:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 56) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_23:
    double v4 = 0.0;
    if (*((unsigned char *)this + 56)) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
  double v1 = *((double *)this + 5);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 8) == 0) {
    goto LABEL_21;
  }
LABEL_3:
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 2) == 0) {
    goto LABEL_22;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 4) == 0) {
    goto LABEL_23;
  }
LABEL_9:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if (*((unsigned char *)this + 56))
  {
LABEL_12:
    double v5 = *((double *)this + 1);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if ((*((unsigned char *)this + 56) & 0x20) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    double v6 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6;
  }
LABEL_24:
  double v5 = 0.0;
  if ((*((unsigned char *)this + 56) & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  double v6 = *((double *)this + 6);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6;
}

void CMMsl::SPUPlaybackExampleDeviceMotion::~SPUPlaybackExampleDeviceMotion(CMMsl::SPUPlaybackExampleDeviceMotion *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270644B68;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::SPUPlaybackExampleDeviceMotion::~SPUPlaybackExampleDeviceMotion(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(void *this, const CMMsl::SPUPlaybackExampleDeviceMotion *a2)
{
  *this = &unk_270644B68;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::SPUPlaybackExampleDeviceMotion *CMMsl::SPUPlaybackExampleDeviceMotion::operator=(const CMMsl::SPUPlaybackExampleDeviceMotion *a1, const CMMsl::SPUPlaybackExampleDeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::SPUPlaybackExampleDeviceMotion::~SPUPlaybackExampleDeviceMotion((CMMsl::SPUPlaybackExampleDeviceMotion *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SPUPlaybackExampleDeviceMotion *a2, CMMsl::SPUPlaybackExampleDeviceMotion *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(void *a1, uint64_t a2)
{
  *a1 = &unk_270644B68;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270644B68;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270644B68;
    v6[1] = v4;
    CMMsl::SPUPlaybackExampleDeviceMotion::~SPUPlaybackExampleDeviceMotion((CMMsl::SPUPlaybackExampleDeviceMotion *)v6);
  }
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::formatText(CMMsl::SPUPlaybackExampleDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::readFrom(CMMsl::SPUPlaybackExampleDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::DeviceMotion *CMMsl::SPUPlaybackExampleDeviceMotion::hash_value(CMMsl::SPUPlaybackExampleDeviceMotion *this)
{
  uint64_t result = (CMMsl::DeviceMotion *)*((void *)this + 1);
  if (result) {
    return (CMMsl::DeviceMotion *)CMMsl::DeviceMotion::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::SPUPlaybackExampleMotionStateUpdate::~SPUPlaybackExampleMotionStateUpdate(CMMsl::SPUPlaybackExampleMotionStateUpdate *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270644BA0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::SPUPlaybackExampleMotionStateUpdate::~SPUPlaybackExampleMotionStateUpdate(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(void *this, const CMMsl::SPUPlaybackExampleMotionStateUpdate *a2)
{
  *this = &unk_270644BA0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::SPUPlaybackExampleMotionStateUpdate *CMMsl::SPUPlaybackExampleMotionStateUpdate::operator=(const CMMsl::SPUPlaybackExampleMotionStateUpdate *a1, const CMMsl::SPUPlaybackExampleMotionStateUpdate *a2)
{
  if (a1 != a2)
  {
    CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::SPUPlaybackExampleMotionStateUpdate::~SPUPlaybackExampleMotionStateUpdate((CMMsl::SPUPlaybackExampleMotionStateUpdate *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SPUPlaybackExampleMotionStateUpdate *a2, CMMsl::SPUPlaybackExampleMotionStateUpdate *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(void *a1, uint64_t a2)
{
  *a1 = &unk_270644BA0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270644BA0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270644BA0;
    v6[1] = v4;
    CMMsl::SPUPlaybackExampleMotionStateUpdate::~SPUPlaybackExampleMotionStateUpdate((CMMsl::SPUPlaybackExampleMotionStateUpdate *)v6);
  }
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::formatText(CMMsl::SPUPlaybackExampleMotionStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::readFrom(CMMsl::SPUPlaybackExampleMotionStateUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::MotionStateUpdate *CMMsl::SPUPlaybackExampleMotionStateUpdate::hash_value(CMMsl::SPUPlaybackExampleMotionStateUpdate *this)
{
  uint64_t result = (CMMsl::MotionStateUpdate *)*((void *)this + 1);
  if (result) {
    return (CMMsl::MotionStateUpdate *)CMMsl::MotionStateUpdate::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::SafetyCompanionStatus::~SafetyCompanionStatus(CMMsl::SafetyCompanionStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SafetyCompanionStatus::SafetyCompanionStatus(uint64_t this, const CMMsl::SafetyCompanionStatus *a2)
{
  *(void *)this = &unk_270644BD8;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::SafetyCompanionStatus *CMMsl::SafetyCompanionStatus::operator=(const CMMsl::SafetyCompanionStatus *a1, const CMMsl::SafetyCompanionStatus *a2)
{
  if (a1 != a2)
  {
    CMMsl::SafetyCompanionStatus::SafetyCompanionStatus((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SafetyCompanionStatus *a2, CMMsl::SafetyCompanionStatus *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::SafetyCompanionStatus(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270644BD8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = &unk_270644BD8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SafetyCompanionStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = &unk_270644BD8;
    v8[1] = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SafetyCompanionStatus::formatText(CMMsl::SafetyCompanionStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "code");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SafetyCompanionStatus::readFrom(CMMsl::SafetyCompanionStatus *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v38 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)a2 + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v19)
            {
              uint64_t v23 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v34 = v19++;
            char v35 = *(unsigned char *)(v20 + v34);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v23 = 0;
          }
LABEL_59:
          unint64_t v3 = v34 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v3 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v3;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((void *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyCompanionStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::hash_value(CMMsl::SafetyCompanionStatus *this)
{
  if (*((unsigned char *)this + 20))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::SafetyHertzSample::~SafetyHertzSample(CMMsl::SafetyHertzSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SafetyHertzSample::SafetyHertzSample(uint64_t this, const CMMsl::SafetyHertzSample *a2)
{
  *(void *)this = &unk_270644C10;
  *(_DWORD *)(this + 24) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 24) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 24) = v3 | 2;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t CMMsl::SafetyHertzSample::operator=(uint64_t a1, const CMMsl::SafetyHertzSample *a2)
{
  if ((const CMMsl::SafetyHertzSample *)a1 != a2)
  {
    CMMsl::SafetyHertzSample::SafetyHertzSample((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SafetyHertzSample *a2, CMMsl::SafetyHertzSample *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::SafetyHertzSample::SafetyHertzSample(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270644C10;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = &unk_270644C10;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SafetyHertzSample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v10 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[0] = &unk_270644C10;
    v9[1] = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    *(void *)(a1 + 16) = v7;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::SafetyHertzSample::formatText(CMMsl::SafetyHertzSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dramDurationMs");
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp");
  if ((*((unsigned char *)this + 24) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "vehicularFlags");
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SafetyHertzSample::readFrom(CMMsl::SafetyHertzSample *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_31;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_83;
            }
            unint64_t v45 = v27++;
            char v46 = *(unsigned char *)(v28 + v45);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0) {
              break;
            }
            v43 += 7;
            BOOL v14 = v44++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_82;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_82:
          unint64_t v3 = v45 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_83:
        *((_DWORD *)this + 4) = v31;
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_88;
            }
            unint64_t v49 = v33++;
            char v50 = *(unsigned char *)(v34 + v49);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0) {
              break;
            }
            v47 += 7;
            BOOL v14 = v48++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_87;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
LABEL_87:
          unint64_t v3 = v49 + 1;
        }
        else
        {
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          while (1)
          {
            unint64_t v3 = v33 + 1;
            *((void *)a2 + 1) = v33 + 1;
            char v38 = *(unsigned char *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            unint64_t v33 = v3;
            BOOL v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_88:
        *((_DWORD *)this + 5) = v37;
      }
      else if (v19 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_78;
            }
            unint64_t v41 = v20++;
            char v42 = *(unsigned char *)(v21 + v41);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0) {
              break;
            }
            v39 += 7;
            BOOL v14 = v40++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_77;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
LABEL_77:
          unint64_t v3 = v41 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v3 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v3;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_78:
        *((void *)this + 1) = v24;
      }
      else
      {
LABEL_31:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_31;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyHertzSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 24) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 24) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::SafetyHertzSample::hash_value(CMMsl::SafetyHertzSample *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  uint64_t v1 = *((void *)this + 1);
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 4);
  return v2 ^ v1 ^ v3;
}

void CMMsl::SafetyRemoteSample::~SafetyRemoteSample(CMMsl::SafetyRemoteSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SafetyRemoteSample::SafetyRemoteSample(uint64_t this, const CMMsl::SafetyRemoteSample *a2)
{
  *(void *)this = &unk_270644C48;
  *(_DWORD *)(this + 52) = 0;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    int v4 = *((_DWORD *)a2 + 11);
    char v3 = 32;
    *(unsigned char *)(this + 52) = 32;
    *(_DWORD *)(this + 44) = v4;
    char v2 = *((unsigned char *)a2 + 52);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 52) & 0x40) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 12);
    v3 |= 0x40u;
    *(unsigned char *)(this + 52) = v3;
    *(_DWORD *)(this + 48) = v5;
    char v2 = *((unsigned char *)a2 + 52);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 10);
    v3 |= 0x10u;
    *(unsigned char *)(this + 52) = v3;
    *(_DWORD *)(this + 40) = v6;
    char v2 = *((unsigned char *)a2 + 52);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 4);
  v3 |= 8u;
  *(unsigned char *)(this + 52) = v3;
  *(void *)(this + 32) = v7;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v8 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 52) = v3;
  *(void *)(this + 8) = v8;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_16:
    uint64_t v10 = *((void *)a2 + 2);
    *(unsigned char *)(this + 52) = v3 | 2;
    *(void *)(this + 16) = v10;
    return this;
  }
LABEL_15:
  uint64_t v9 = *((void *)a2 + 3);
  v3 |= 4u;
  *(unsigned char *)(this + 52) = v3;
  *(void *)(this + 24) = v9;
  if ((*((unsigned char *)a2 + 52) & 2) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::operator=(uint64_t a1, const CMMsl::SafetyRemoteSample *a2)
{
  if ((const CMMsl::SafetyRemoteSample *)a1 != a2)
  {
    CMMsl::SafetyRemoteSample::SafetyRemoteSample((uint64_t)v7, a2);
    long long v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v10 = v3;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SafetyRemoteSample *a2, CMMsl::SafetyRemoteSample *a3)
{
  int v3 = *(_DWORD *)(this + 52);
  *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  int v4 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  int v5 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  int v6 = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  uint64_t v7 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  uint64_t v10 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::SafetyRemoteSample(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270644C48;
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = &unk_270644C48;
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SafetyRemoteSample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v9 = &unk_270644C48;
    long long v3 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 52) = 0;
    long long v4 = *(_OWORD *)(a1 + 40);
    long long v11 = *(_OWORD *)(a1 + 24);
    long long v12 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 8) = v6;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::SafetyRemoteSample::formatText(CMMsl::SafetyRemoteSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 52);
  if (v5)
  {
    PB::TextFormatter::format(a2, "createdAtTimestamp");
    char v5 = *((unsigned char *)this + 52);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 52) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochNumber");
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "epochTimestamp");
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "lastRealTriggerTimestamp");
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "mode");
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "receivedAtTimestamp");
  if ((*((unsigned char *)this + 52) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "sessionNumber");
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SafetyRemoteSample::readFrom(CMMsl::SafetyRemoteSample *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_24;
          }
          v15 += 7;
          unint64_t v3 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)a2 + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_24:
        if ((v11 & 7) != 4)
        {
          unint64_t v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 2u:
              *((unsigned char *)this + 52) |= 0x20u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_137;
                  }
                  unint64_t v65 = v21++;
                  char v66 = *(unsigned char *)(v22 + v65);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_136;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
LABEL_136:
                unint64_t v3 = v65 + 1;
              }
              else
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                do
                {
                  unint64_t v3 = v21 + 1;
                  *((void *)a2 + 1) = v21 + 1;
                  char v26 = *(unsigned char *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0) {
                    goto LABEL_137;
                  }
                  v23 += 7;
                  unint64_t v21 = v3;
                  BOOL v14 = v24++ > 8;
                }
                while (!v14);
                LODWORD(v25) = 0;
              }
LABEL_137:
              *((_DWORD *)this + 11) = v25;
              goto LABEL_21;
            case 3u:
              *((unsigned char *)this + 52) |= 0x40u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_147;
                  }
                  unint64_t v73 = v33++;
                  char v74 = *(unsigned char *)(v34 + v73);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_146:
                    unint64_t v3 = v73 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_146;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v3 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v35 += 7;
                unint64_t v33 = v3;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_147:
              *((_DWORD *)this + 12) = v37;
              goto LABEL_21;
            case 4u:
              *((unsigned char *)this + 52) |= 0x10u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_152;
                  }
                  unint64_t v77 = v39++;
                  char v78 = *(unsigned char *)(v40 + v77);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_151:
                    unint64_t v3 = v77 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_151;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v3 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v41 += 7;
                unint64_t v39 = v3;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_152:
              *((_DWORD *)this + 10) = v43;
              goto LABEL_21;
            case 5u:
              *((unsigned char *)this + 52) |= 8u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v45)
                  {
                    uint64_t v49 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_157;
                  }
                  unint64_t v81 = v45++;
                  char v82 = *(unsigned char *)(v46 + v81);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v49 = 0;
LABEL_156:
                    unint64_t v3 = v81 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v49 = 0;
                }
                goto LABEL_156;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v3 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_157;
                }
                v47 += 7;
                unint64_t v45 = v3;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              uint64_t v49 = 0;
LABEL_157:
              *((void *)this + 4) = v49;
              goto LABEL_21;
            case 6u:
              *((unsigned char *)this + 52) |= 1u;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v51)
                  {
                    uint64_t v55 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_162;
                  }
                  unint64_t v85 = v51++;
                  char v86 = *(unsigned char *)(v52 + v85);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    uint64_t v55 = 0;
LABEL_161:
                    unint64_t v3 = v85 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v55 = 0;
                }
                goto LABEL_161;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v3 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_162;
                }
                v53 += 7;
                unint64_t v51 = v3;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              uint64_t v55 = 0;
LABEL_162:
              *((void *)this + 1) = v55;
              goto LABEL_21;
            default:
              if (v20 == 100)
              {
                *((unsigned char *)this + 52) |= 4u;
                unint64_t v57 = *((void *)a2 + 1);
                unint64_t v2 = *((void *)a2 + 2);
                uint64_t v58 = *(void *)a2;
                if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
                {
                  char v87 = 0;
                  unsigned int v88 = 0;
                  uint64_t v61 = 0;
                  if (v2 <= v57) {
                    unint64_t v3 = *((void *)a2 + 1);
                  }
                  else {
                    unint64_t v3 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v3 == v57)
                    {
                      uint64_t v61 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                      goto LABEL_167;
                    }
                    unint64_t v89 = v57++;
                    char v90 = *(unsigned char *)(v58 + v89);
                    *((void *)a2 + 1) = v57;
                    v61 |= (unint64_t)(v90 & 0x7F) << v87;
                    if ((v90 & 0x80) == 0) {
                      break;
                    }
                    v87 += 7;
                    BOOL v14 = v88++ > 8;
                    if (v14)
                    {
                      uint64_t v61 = 0;
                      goto LABEL_166;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v61 = 0;
                  }
LABEL_166:
                  unint64_t v3 = v89 + 1;
                }
                else
                {
                  char v59 = 0;
                  unsigned int v60 = 0;
                  uint64_t v61 = 0;
                  while (1)
                  {
                    unint64_t v3 = v57 + 1;
                    *((void *)a2 + 1) = v57 + 1;
                    char v62 = *(unsigned char *)(v58 + v57);
                    v61 |= (unint64_t)(v62 & 0x7F) << v59;
                    if ((v62 & 0x80) == 0) {
                      break;
                    }
                    v59 += 7;
                    unint64_t v57 = v3;
                    BOOL v14 = v60++ > 8;
                    if (v14)
                    {
                      uint64_t v61 = 0;
                      break;
                    }
                  }
                }
LABEL_167:
                *((void *)this + 3) = v61;
              }
              else if (v20 == 101)
              {
                *((unsigned char *)this + 52) |= 2u;
                unint64_t v27 = *((void *)a2 + 1);
                unint64_t v2 = *((void *)a2 + 2);
                uint64_t v28 = *(void *)a2;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  char v67 = 0;
                  unsigned int v68 = 0;
                  uint64_t v31 = 0;
                  if (v2 <= v27) {
                    unint64_t v3 = *((void *)a2 + 1);
                  }
                  else {
                    unint64_t v3 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v3 == v27)
                    {
                      uint64_t v31 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                      goto LABEL_142;
                    }
                    unint64_t v69 = v27++;
                    char v70 = *(unsigned char *)(v28 + v69);
                    *((void *)a2 + 1) = v27;
                    v31 |= (unint64_t)(v70 & 0x7F) << v67;
                    if ((v70 & 0x80) == 0) {
                      break;
                    }
                    v67 += 7;
                    BOOL v14 = v68++ > 8;
                    if (v14)
                    {
                      uint64_t v31 = 0;
                      goto LABEL_141;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v31 = 0;
                  }
LABEL_141:
                  unint64_t v3 = v69 + 1;
                }
                else
                {
                  char v29 = 0;
                  unsigned int v30 = 0;
                  uint64_t v31 = 0;
                  while (1)
                  {
                    unint64_t v3 = v27 + 1;
                    *((void *)a2 + 1) = v27 + 1;
                    char v32 = *(unsigned char *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0) {
                      break;
                    }
                    v29 += 7;
                    unint64_t v27 = v3;
                    BOOL v14 = v30++ > 8;
                    if (v14)
                    {
                      uint64_t v31 = 0;
                      break;
                    }
                  }
                }
LABEL_142:
                *((void *)this + 2) = v31;
              }
              else
              {
LABEL_19:
                uint64_t result = PB::Reader::skip(a2);
                if (!result) {
                  return result;
                }
                unint64_t v3 = *((void *)a2 + 1);
                unint64_t v2 = *((void *)a2 + 2);
              }
LABEL_21:
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyRemoteSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 52);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 52) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 52) & 2) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_15:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::SafetyRemoteSample::hash_value(CMMsl::SafetyRemoteSample *this)
{
  if ((*((unsigned char *)this + 52) & 0x20) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 11);
    if ((*((unsigned char *)this + 52) & 0x40) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 12);
      if ((*((unsigned char *)this + 52) & 0x10) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 52) & 0x40) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 52) & 0x10) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 10);
    if ((*((unsigned char *)this + 52) & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 52) & 8) != 0)
  {
LABEL_5:
    uint64_t v4 = *((void *)this + 4);
    if (*((unsigned char *)this + 52)) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v4 = 0;
  if (*((unsigned char *)this + 52))
  {
LABEL_6:
    uint64_t v5 = *((void *)this + 1);
    if ((*((unsigned char *)this + 52) & 4) != 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 52) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_15:
    uint64_t v7 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
  }
LABEL_13:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 52) & 4) == 0) {
    goto LABEL_14;
  }
LABEL_7:
  uint64_t v6 = *((void *)this + 3);
  if ((*((unsigned char *)this + 52) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v7 = *((void *)this + 2);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::SafetyTrustedAudioResult::~SafetyTrustedAudioResult(CMMsl::SafetyTrustedAudioResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult(uint64_t this, const CMMsl::SafetyTrustedAudioResult *a2)
{
  *(void *)this = &unk_270644C80;
  *(void *)(this + 212) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x800) != 0)
  {
    uint64_t v4 = *((void *)a2 + 12);
    uint64_t v3 = 2048;
    *(void *)(this + 212) = 2048;
    *(void *)(this + 96) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 212);
    if ((v2 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x200000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 35);
    v3 |= 0x200000uLL;
    *(void *)(this + 212) = v3;
    *(_DWORD *)(this + 140) = v5;
    uint64_t v2 = *(void *)((char *)a2 + 212);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    uint64_t v6 = *((void *)a2 + 7);
    v3 |= 0x40uLL;
    *(void *)(this + 212) = v3;
    *(void *)(this + 56) = v6;
    uint64_t v2 = *(void *)((char *)a2 + 212);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_47;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 30);
  v3 |= 0x10000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 120) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v8 = *((_DWORD *)a2 + 38);
  v3 |= 0x1000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 152) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v9 = *((_DWORD *)a2 + 34);
  v3 |= 0x100000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 136) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v10 = *((void *)a2 + 6);
  v3 |= 0x20uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 48) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v11 = *((_DWORD *)a2 + 32);
  v3 |= 0x40000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 128) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x800000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v12 = *((_DWORD *)a2 + 37);
  v3 |= 0x800000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 148) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x400000) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v13 = *((_DWORD *)a2 + 36);
  v3 |= 0x400000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 144) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v14 = *((void *)a2 + 8);
  v3 |= 0x80uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 64) = v14;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x20000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v15 = *((_DWORD *)a2 + 31);
  v3 |= 0x20000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 124) = v15;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v16 = *((_DWORD *)a2 + 33);
  v3 |= 0x80000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 132) = v16;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v17 = *((_DWORD *)a2 + 44);
  v3 |= 0x40000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 176) = v17;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v18 = *((void *)a2 + 10);
  v3 |= 0x200uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 80) = v18;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v19 = *((_DWORD *)a2 + 39);
  v3 |= 0x2000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 156) = v19;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v20 = *((_DWORD *)a2 + 47);
  v3 |= 0x200000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 188) = v20;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v21 = *((_DWORD *)a2 + 43);
  v3 |= 0x20000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 172) = v21;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v22 = *((void *)a2 + 9);
  v3 |= 0x100uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 72) = v22;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v23 = *((_DWORD *)a2 + 41);
  v3 |= 0x8000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 164) = v23;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v24 = *((_DWORD *)a2 + 46);
  v3 |= 0x100000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 184) = v24;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v25 = *((_DWORD *)a2 + 45);
  v3 |= 0x80000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 180) = v25;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x400) == 0)
  {
LABEL_27:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v26 = *((void *)a2 + 11);
  v3 |= 0x400uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 88) = v26;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_67;
  }
LABEL_66:
  int v27 = *((_DWORD *)a2 + 40);
  v3 |= 0x4000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 160) = v27;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v28 = *((_DWORD *)a2 + 42);
  v3 |= 0x10000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 168) = v28;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x2000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_69;
  }
LABEL_68:
  int v29 = *((_DWORD *)a2 + 27);
  v3 |= 0x2000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 108) = v29;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }
LABEL_69:
  int v30 = *((_DWORD *)a2 + 29);
  v3 |= 0x8000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 116) = v30;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x4000) == 0)
  {
LABEL_32:
    if ((v2 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }
LABEL_70:
  int v31 = *((_DWORD *)a2 + 28);
  v3 |= 0x4000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 112) = v31;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x10) == 0)
  {
LABEL_33:
    if ((v2 & 8) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v32 = *((void *)a2 + 5);
  v3 |= 0x10uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 40) = v32;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 8) == 0)
  {
LABEL_34:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v33 = *((void *)a2 + 4);
  v3 |= 8uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 32) = v33;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }
LABEL_73:
  int v34 = *((_DWORD *)a2 + 49);
  v3 |= 0x800000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 196) = v34;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_75;
  }
LABEL_74:
  int v35 = *((_DWORD *)a2 + 51);
  v3 |= 0x2000000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 204) = v35;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_76;
  }
LABEL_75:
  int v36 = *((_DWORD *)a2 + 50);
  v3 |= 0x1000000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 200) = v36;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x4000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_77;
  }
LABEL_76:
  int v37 = *((_DWORD *)a2 + 48);
  v3 |= 0x400000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 192) = v37;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x8000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_78;
  }
LABEL_77:
  char v38 = *((unsigned char *)a2 + 208);
  v3 |= 0x4000000000uLL;
  *(void *)(this + 212) = v3;
  *(unsigned char *)(this + 208) = v38;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_79;
  }
LABEL_78:
  char v39 = *((unsigned char *)a2 + 209);
  v3 |= 0x8000000000uLL;
  *(void *)(this + 212) = v3;
  *(unsigned char *)(this + 209) = v39;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x1000) == 0)
  {
LABEL_41:
    if ((v2 & 4) == 0) {
      goto LABEL_42;
    }
    goto LABEL_80;
  }
LABEL_79:
  int v40 = *((_DWORD *)a2 + 26);
  v3 |= 0x1000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 104) = v40;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 4) == 0)
  {
LABEL_42:
    if ((v2 & 2) == 0) {
      goto LABEL_43;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v41 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 24) = v41;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 2) == 0)
  {
LABEL_43:
    if ((v2 & 1) == 0) {
      return this;
    }
LABEL_82:
    uint64_t v43 = *((void *)a2 + 1);
    *(void *)(this + 212) = v3 | 1;
    *(void *)(this + 8) = v43;
    return this;
  }
LABEL_81:
  uint64_t v42 = *((void *)a2 + 2);
  v3 |= 2uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 16) = v42;
  if (*(void *)((unsigned char *)a2 + 212)) {
    goto LABEL_82;
  }
  return this;
}

CMMsl *CMMsl::SafetyTrustedAudioResult::operator=(CMMsl *a1, const CMMsl::SafetyTrustedAudioResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SafetyTrustedAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SafetyTrustedAudioResult *a2, CMMsl::SafetyTrustedAudioResult *a3)
{
  uint64_t v3 = *(void *)((char *)this + 212);
  *(void *)((char *)this + 212) = *(void *)((char *)a2 + 212);
  *(void *)((char *)a2 + 212) = v3;
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v4;
  int v5 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v5;
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v7;
  int v8 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v8;
  int v9 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  int v11 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v11;
  int v12 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v12;
  int v13 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v13;
  uint64_t v14 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v14;
  int v15 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v15;
  int v16 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v16;
  int v17 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v17;
  uint64_t v18 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v18;
  int v19 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v19;
  int v20 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v20;
  int v21 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v21;
  uint64_t v22 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v22;
  int v23 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v23;
  int v24 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v24;
  int v25 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v25;
  uint64_t v26 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v26;
  int v27 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v27;
  int v28 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v28;
  int v29 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v29;
  LODWORD(v26) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v26;
  LODWORD(v26) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v26;
  uint64_t v30 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v30;
  uint64_t v31 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v31;
  int v32 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v32;
  int v33 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v33;
  int v34 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v34;
  float result = *((float *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((float *)a2 + 48) = result;
  LOBYTE(v31) = *((unsigned char *)this + 208);
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 208);
  *((unsigned char *)a2 + 208) = v31;
  LOBYTE(v31) = *((unsigned char *)this + 209);
  *((unsigned char *)this + 209) = *((unsigned char *)a2 + 209);
  *((unsigned char *)a2 + 209) = v31;
  LODWORD(v31) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v31;
  uint64_t v36 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v36;
  uint64_t v37 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v37;
  uint64_t v38 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v38;
  return result;
}

float CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644C80;
  *(void *)(a1 + 212) = *(void *)(a2 + 212);
  *(void *)(a2 + 212) = 0;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  float result = *(float *)(a2 + 192);
  *(float *)(a1 + 192) = result;
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return result;
}

CMMsl *CMMsl::SafetyTrustedAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SafetyTrustedAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SafetyTrustedAudioResult::formatText(CMMsl::SafetyTrustedAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 212);
  if (v5)
  {
    PB::TextFormatter::format(a2, "calculationTimestamp");
    uint64_t v5 = *(void *)((char *)this + 212);
    if ((v5 & 0x1000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_47;
    }
  }
  else if ((v5 & 0x1000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dramDuration");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "dramMaxTimestamp");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "dramMinTimestamp");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "epochMaxTimestamp");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "epochMinTimestamp");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "maxRMS", *((float *)this + 27));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "numPointsInEpoch");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "numShortAudio");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "planarChaosAtMaxEnergy", *((float *)this + 30));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "planarChaosAtMaxSaturation", *((float *)this + 31));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "planarEnergyAtMaxChaos", *((float *)this + 32));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "planarEnergyAtMaxSaturation", *((float *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "planarMaxChaos", *((float *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x200000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "planarMaxEnergy", *((float *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "planarMaxSaturation", *((float *)this + 36));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "planarPassThru");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x800000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "planarSaturationAtMaxChaos", *((float *)this + 37));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "planarSaturationAtMaxEnergy", *((float *)this + 38));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x20) == 0)
  {
LABEL_21:
    if ((v5 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "planarTimestampAtMaxChaos");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x40) == 0)
  {
LABEL_22:
    if ((v5 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "planarTimestampAtMaxEnergy");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x80) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "planarTimestampAtMaxSaturation");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "rolloverChaosAtMaxEnergy", *((float *)this + 39));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "rolloverChaosAtMaxSaturation", *((float *)this + 40));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "rolloverEnergyAtMaxChaos", *((float *)this + 41));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "rolloverEnergyAtMaxSaturation", *((float *)this + 42));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "rolloverMaxChaos", *((float *)this + 43));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "rolloverMaxEnergy", *((float *)this + 44));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "rolloverMaxSaturation", *((float *)this + 45));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "rolloverPassThru");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "rolloverSaturationAtMaxChaos", *((float *)this + 46));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100) == 0) {
      goto LABEL_34;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "rolloverSaturationAtMaxEnergy", *((float *)this + 47));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x100) == 0)
  {
LABEL_34:
    if ((v5 & 0x200) == 0) {
      goto LABEL_35;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "rolloverTimestampAtMaxChaos");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x200) == 0)
  {
LABEL_35:
    if ((v5 & 0x400) == 0) {
      goto LABEL_36;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "rolloverTimestampAtMaxEnergy");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x400) == 0)
  {
LABEL_36:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "rolloverTimestampAtMaxSaturation");
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "soundEnvelopeCount", *((float *)this + 48));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "soundMaxMeanOverArmSession", *((float *)this + 49));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "soundMeanCurrentWindow", *((float *)this + 50));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x800) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "soundMeanLast15s", *((float *)this + 51));
  if ((*(void *)((unsigned char *)this + 212) & 0x800) != 0) {
LABEL_41:
  }
    PB::TextFormatter::format(a2, "timestamp");
LABEL_42:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SafetyTrustedAudioResult::readFrom(CMMsl::SafetyTrustedAudioResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(void *)((char *)this + 212) |= 0x800uLL;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_320;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_207:
          uint64_t v25 = 0;
          goto LABEL_320;
        }
        char v171 = 0;
        unsigned int v172 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v21 == v20)
          {
            uint64_t v25 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v173 = v20 + 1;
            char v174 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v173;
            v25 |= (unint64_t)(v174 & 0x7F) << v171;
            if (v174 < 0)
            {
              v171 += 7;
              unint64_t v20 = v173;
              BOOL v14 = v172++ > 8;
              if (v14) {
                goto LABEL_207;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v25 = 0;
            }
          }
          break;
        }
LABEL_320:
        *((void *)this + 12) = v25;
        goto LABEL_312;
      case 2u:
        *(void *)((char *)this + 212) |= 0x200000uLL;
        unint64_t v28 = *((void *)a2 + 1);
        if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v28);
        goto LABEL_311;
      case 3u:
        *(void *)((char *)this + 212) |= 0x40uLL;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          do
          {
            unint64_t v35 = v29 + 1;
            *((void *)a2 + 1) = v29 + 1;
            char v36 = *(unsigned char *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              goto LABEL_324;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
          }
          while (!v14);
LABEL_214:
          uint64_t v34 = 0;
          goto LABEL_324;
        }
        char v175 = 0;
        unsigned int v176 = 0;
        uint64_t v34 = 0;
        if (v30 <= v29) {
          unint64_t v30 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v30 == v29)
          {
            uint64_t v34 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v177 = v29 + 1;
            char v178 = *(unsigned char *)(v31 + v29);
            *((void *)a2 + 1) = v177;
            v34 |= (unint64_t)(v178 & 0x7F) << v175;
            if (v178 < 0)
            {
              v175 += 7;
              unint64_t v29 = v177;
              BOOL v14 = v176++ > 8;
              if (v14) {
                goto LABEL_214;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v34 = 0;
            }
          }
          break;
        }
LABEL_324:
        *((void *)this + 7) = v34;
        goto LABEL_312;
      case 4u:
        *(void *)((char *)this + 212) |= 0x10000uLL;
        unint64_t v37 = *((void *)a2 + 1);
        if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v37);
        goto LABEL_311;
      case 5u:
        *(void *)((char *)this + 212) |= 0x1000000uLL;
        unint64_t v38 = *((void *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v38);
        goto LABEL_311;
      case 6u:
        *(void *)((char *)this + 212) |= 0x100000uLL;
        unint64_t v39 = *((void *)a2 + 1);
        if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v39);
        goto LABEL_311;
      case 7u:
        *(void *)((char *)this + 212) |= 0x20uLL;
        unint64_t v40 = *((void *)a2 + 1);
        unint64_t v41 = *((void *)a2 + 2);
        uint64_t v42 = *(void *)a2;
        if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v45 = 0;
          do
          {
            unint64_t v46 = v40 + 1;
            *((void *)a2 + 1) = v40 + 1;
            char v47 = *(unsigned char *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0) {
              goto LABEL_328;
            }
            v43 += 7;
            unint64_t v40 = v46;
            BOOL v14 = v44++ > 8;
          }
          while (!v14);
LABEL_221:
          uint64_t v45 = 0;
          goto LABEL_328;
        }
        char v179 = 0;
        unsigned int v180 = 0;
        uint64_t v45 = 0;
        if (v41 <= v40) {
          unint64_t v41 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v41 == v40)
          {
            uint64_t v45 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v181 = v40 + 1;
            char v182 = *(unsigned char *)(v42 + v40);
            *((void *)a2 + 1) = v181;
            v45 |= (unint64_t)(v182 & 0x7F) << v179;
            if (v182 < 0)
            {
              v179 += 7;
              unint64_t v40 = v181;
              BOOL v14 = v180++ > 8;
              if (v14) {
                goto LABEL_221;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v45 = 0;
            }
          }
          break;
        }
LABEL_328:
        *((void *)this + 6) = v45;
        goto LABEL_312;
      case 8u:
        *(void *)((char *)this + 212) |= 0x40000uLL;
        unint64_t v48 = *((void *)a2 + 1);
        if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v48);
        goto LABEL_311;
      case 9u:
        *(void *)((char *)this + 212) |= 0x800000uLL;
        unint64_t v49 = *((void *)a2 + 1);
        if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v49);
        goto LABEL_311;
      case 0xAu:
        *(void *)((char *)this + 212) |= 0x400000uLL;
        unint64_t v50 = *((void *)a2 + 1);
        if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v50);
        goto LABEL_311;
      case 0xBu:
        *(void *)((char *)this + 212) |= 0x80uLL;
        unint64_t v51 = *((void *)a2 + 1);
        unint64_t v52 = *((void *)a2 + 2);
        uint64_t v53 = *(void *)a2;
        if (v51 <= 0xFFFFFFFFFFFFFFF5 && v51 + 10 <= v52)
        {
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v56 = 0;
          do
          {
            unint64_t v57 = v51 + 1;
            *((void *)a2 + 1) = v51 + 1;
            char v58 = *(unsigned char *)(v53 + v51);
            v56 |= (unint64_t)(v58 & 0x7F) << v54;
            if ((v58 & 0x80) == 0) {
              goto LABEL_332;
            }
            v54 += 7;
            unint64_t v51 = v57;
            BOOL v14 = v55++ > 8;
          }
          while (!v14);
LABEL_228:
          uint64_t v56 = 0;
          goto LABEL_332;
        }
        char v183 = 0;
        unsigned int v184 = 0;
        uint64_t v56 = 0;
        if (v52 <= v51) {
          unint64_t v52 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v52 == v51)
          {
            uint64_t v56 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v185 = v51 + 1;
            char v186 = *(unsigned char *)(v53 + v51);
            *((void *)a2 + 1) = v185;
            v56 |= (unint64_t)(v186 & 0x7F) << v183;
            if (v186 < 0)
            {
              v183 += 7;
              unint64_t v51 = v185;
              BOOL v14 = v184++ > 8;
              if (v14) {
                goto LABEL_228;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v56 = 0;
            }
          }
          break;
        }
LABEL_332:
        *((void *)this + 8) = v56;
        goto LABEL_312;
      case 0xCu:
        *(void *)((char *)this + 212) |= 0x20000uLL;
        unint64_t v59 = *((void *)a2 + 1);
        if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v59);
        goto LABEL_311;
      case 0xDu:
        *(void *)((char *)this + 212) |= 0x80000uLL;
        unint64_t v60 = *((void *)a2 + 1);
        if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v60);
        goto LABEL_311;
      case 0xEu:
        *(void *)((char *)this + 212) |= 0x40000000uLL;
        unint64_t v61 = *((void *)a2 + 1);
        if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v61);
        goto LABEL_311;
      case 0xFu:
        *(void *)((char *)this + 212) |= 0x200uLL;
        unint64_t v62 = *((void *)a2 + 1);
        unint64_t v63 = *((void *)a2 + 2);
        uint64_t v64 = *(void *)a2;
        if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
        {
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v67 = 0;
          do
          {
            unint64_t v68 = v62 + 1;
            *((void *)a2 + 1) = v62 + 1;
            char v69 = *(unsigned char *)(v64 + v62);
            v67 |= (unint64_t)(v69 & 0x7F) << v65;
            if ((v69 & 0x80) == 0) {
              goto LABEL_336;
            }
            v65 += 7;
            unint64_t v62 = v68;
            BOOL v14 = v66++ > 8;
          }
          while (!v14);
LABEL_235:
          uint64_t v67 = 0;
          goto LABEL_336;
        }
        char v187 = 0;
        unsigned int v188 = 0;
        uint64_t v67 = 0;
        if (v63 <= v62) {
          unint64_t v63 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v63 == v62)
          {
            uint64_t v67 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v189 = v62 + 1;
            char v190 = *(unsigned char *)(v64 + v62);
            *((void *)a2 + 1) = v189;
            v67 |= (unint64_t)(v190 & 0x7F) << v187;
            if (v190 < 0)
            {
              v187 += 7;
              unint64_t v62 = v189;
              BOOL v14 = v188++ > 8;
              if (v14) {
                goto LABEL_235;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v67 = 0;
            }
          }
          break;
        }
LABEL_336:
        *((void *)this + 10) = v67;
        goto LABEL_312;
      case 0x10u:
        *(void *)((char *)this + 212) |= 0x2000000uLL;
        unint64_t v70 = *((void *)a2 + 1);
        if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v70);
        goto LABEL_311;
      case 0x11u:
        *(void *)((char *)this + 212) |= 0x200000000uLL;
        unint64_t v71 = *((void *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 47) = *(_DWORD *)(*(void *)a2 + v71);
        goto LABEL_311;
      case 0x12u:
        *(void *)((char *)this + 212) |= 0x20000000uLL;
        unint64_t v72 = *((void *)a2 + 1);
        if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v72);
        goto LABEL_311;
      case 0x13u:
        *(void *)((char *)this + 212) |= 0x100uLL;
        unint64_t v73 = *((void *)a2 + 1);
        unint64_t v74 = *((void *)a2 + 2);
        uint64_t v75 = *(void *)a2;
        if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
        {
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v78 = 0;
          do
          {
            unint64_t v79 = v73 + 1;
            *((void *)a2 + 1) = v73 + 1;
            char v80 = *(unsigned char *)(v75 + v73);
            v78 |= (unint64_t)(v80 & 0x7F) << v76;
            if ((v80 & 0x80) == 0) {
              goto LABEL_340;
            }
            v76 += 7;
            unint64_t v73 = v79;
            BOOL v14 = v77++ > 8;
          }
          while (!v14);
LABEL_242:
          uint64_t v78 = 0;
          goto LABEL_340;
        }
        char v191 = 0;
        unsigned int v192 = 0;
        uint64_t v78 = 0;
        if (v74 <= v73) {
          unint64_t v74 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v74 == v73)
          {
            uint64_t v78 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v193 = v73 + 1;
            char v194 = *(unsigned char *)(v75 + v73);
            *((void *)a2 + 1) = v193;
            v78 |= (unint64_t)(v194 & 0x7F) << v191;
            if (v194 < 0)
            {
              v191 += 7;
              unint64_t v73 = v193;
              BOOL v14 = v192++ > 8;
              if (v14) {
                goto LABEL_242;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v78 = 0;
            }
          }
          break;
        }
LABEL_340:
        *((void *)this + 9) = v78;
        goto LABEL_312;
      case 0x14u:
        *(void *)((char *)this + 212) |= 0x8000000uLL;
        unint64_t v81 = *((void *)a2 + 1);
        if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 41) = *(_DWORD *)(*(void *)a2 + v81);
        goto LABEL_311;
      case 0x15u:
        *(void *)((char *)this + 212) |= 0x100000000uLL;
        unint64_t v82 = *((void *)a2 + 1);
        if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 46) = *(_DWORD *)(*(void *)a2 + v82);
        goto LABEL_311;
      case 0x16u:
        *(void *)((char *)this + 212) |= 0x80000000uLL;
        unint64_t v83 = *((void *)a2 + 1);
        if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 45) = *(_DWORD *)(*(void *)a2 + v83);
        goto LABEL_311;
      case 0x17u:
        *(void *)((char *)this + 212) |= 0x400uLL;
        unint64_t v84 = *((void *)a2 + 1);
        unint64_t v85 = *((void *)a2 + 2);
        uint64_t v86 = *(void *)a2;
        if (v84 <= 0xFFFFFFFFFFFFFFF5 && v84 + 10 <= v85)
        {
          char v87 = 0;
          unsigned int v88 = 0;
          uint64_t v89 = 0;
          do
          {
            unint64_t v90 = v84 + 1;
            *((void *)a2 + 1) = v84 + 1;
            char v91 = *(unsigned char *)(v86 + v84);
            v89 |= (unint64_t)(v91 & 0x7F) << v87;
            if ((v91 & 0x80) == 0) {
              goto LABEL_344;
            }
            v87 += 7;
            unint64_t v84 = v90;
            BOOL v14 = v88++ > 8;
          }
          while (!v14);
LABEL_249:
          uint64_t v89 = 0;
          goto LABEL_344;
        }
        char v195 = 0;
        unsigned int v196 = 0;
        uint64_t v89 = 0;
        if (v85 <= v84) {
          unint64_t v85 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v85 == v84)
          {
            uint64_t v89 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v197 = v84 + 1;
            char v198 = *(unsigned char *)(v86 + v84);
            *((void *)a2 + 1) = v197;
            v89 |= (unint64_t)(v198 & 0x7F) << v195;
            if (v198 < 0)
            {
              v195 += 7;
              unint64_t v84 = v197;
              BOOL v14 = v196++ > 8;
              if (v14) {
                goto LABEL_249;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v89 = 0;
            }
          }
          break;
        }
LABEL_344:
        *((void *)this + 11) = v89;
        goto LABEL_312;
      case 0x18u:
        *(void *)((char *)this + 212) |= 0x4000000uLL;
        unint64_t v92 = *((void *)a2 + 1);
        if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 40) = *(_DWORD *)(*(void *)a2 + v92);
        goto LABEL_311;
      case 0x19u:
        *(void *)((char *)this + 212) |= 0x10000000uLL;
        unint64_t v93 = *((void *)a2 + 1);
        if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v93);
        goto LABEL_311;
      case 0x1Au:
        *(void *)((char *)this + 212) |= 0x2000uLL;
        unint64_t v94 = *((void *)a2 + 1);
        if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v94);
        goto LABEL_311;
      case 0x1Bu:
        *(void *)((char *)this + 212) |= 0x8000uLL;
        unint64_t v95 = *((void *)a2 + 1);
        unint64_t v96 = *((void *)a2 + 2);
        uint64_t v97 = *(void *)a2;
        if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
        {
          char v98 = 0;
          unsigned int v99 = 0;
          uint64_t v100 = 0;
          do
          {
            unint64_t v101 = v95 + 1;
            *((void *)a2 + 1) = v95 + 1;
            char v102 = *(unsigned char *)(v97 + v95);
            v100 |= (unint64_t)(v102 & 0x7F) << v98;
            if ((v102 & 0x80) == 0) {
              goto LABEL_348;
            }
            v98 += 7;
            unint64_t v95 = v101;
            BOOL v14 = v99++ > 8;
          }
          while (!v14);
LABEL_256:
          LODWORD(v100) = 0;
          goto LABEL_348;
        }
        char v199 = 0;
        unsigned int v200 = 0;
        uint64_t v100 = 0;
        if (v96 <= v95) {
          unint64_t v96 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v96 == v95)
          {
            LODWORD(v100) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v201 = v95 + 1;
            char v202 = *(unsigned char *)(v97 + v95);
            *((void *)a2 + 1) = v201;
            v100 |= (unint64_t)(v202 & 0x7F) << v199;
            if (v202 < 0)
            {
              v199 += 7;
              unint64_t v95 = v201;
              BOOL v14 = v200++ > 8;
              if (v14) {
                goto LABEL_256;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v100) = 0;
            }
          }
          break;
        }
LABEL_348:
        *((_DWORD *)this + 29) = v100;
        goto LABEL_312;
      case 0x1Cu:
        *(void *)((char *)this + 212) |= 0x4000uLL;
        unint64_t v103 = *((void *)a2 + 1);
        unint64_t v104 = *((void *)a2 + 2);
        uint64_t v105 = *(void *)a2;
        if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
        {
          char v106 = 0;
          unsigned int v107 = 0;
          uint64_t v108 = 0;
          do
          {
            unint64_t v109 = v103 + 1;
            *((void *)a2 + 1) = v103 + 1;
            char v110 = *(unsigned char *)(v105 + v103);
            v108 |= (unint64_t)(v110 & 0x7F) << v106;
            if ((v110 & 0x80) == 0) {
              goto LABEL_352;
            }
            v106 += 7;
            unint64_t v103 = v109;
            BOOL v14 = v107++ > 8;
          }
          while (!v14);
LABEL_263:
          LODWORD(v108) = 0;
          goto LABEL_352;
        }
        char v203 = 0;
        unsigned int v204 = 0;
        uint64_t v108 = 0;
        if (v104 <= v103) {
          unint64_t v104 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v104 == v103)
          {
            LODWORD(v108) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v205 = v103 + 1;
            char v206 = *(unsigned char *)(v105 + v103);
            *((void *)a2 + 1) = v205;
            v108 |= (unint64_t)(v206 & 0x7F) << v203;
            if (v206 < 0)
            {
              v203 += 7;
              unint64_t v103 = v205;
              BOOL v14 = v204++ > 8;
              if (v14) {
                goto LABEL_263;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v108) = 0;
            }
          }
          break;
        }
LABEL_352:
        *((_DWORD *)this + 28) = v108;
        goto LABEL_312;
      case 0x1Du:
        *(void *)((char *)this + 212) |= 0x10uLL;
        unint64_t v111 = *((void *)a2 + 1);
        unint64_t v112 = *((void *)a2 + 2);
        uint64_t v113 = *(void *)a2;
        if (v111 <= 0xFFFFFFFFFFFFFFF5 && v111 + 10 <= v112)
        {
          char v114 = 0;
          unsigned int v115 = 0;
          uint64_t v116 = 0;
          do
          {
            unint64_t v117 = v111 + 1;
            *((void *)a2 + 1) = v111 + 1;
            char v118 = *(unsigned char *)(v113 + v111);
            v116 |= (unint64_t)(v118 & 0x7F) << v114;
            if ((v118 & 0x80) == 0) {
              goto LABEL_356;
            }
            v114 += 7;
            unint64_t v111 = v117;
            BOOL v14 = v115++ > 8;
          }
          while (!v14);
LABEL_270:
          uint64_t v116 = 0;
          goto LABEL_356;
        }
        char v207 = 0;
        unsigned int v208 = 0;
        uint64_t v116 = 0;
        if (v112 <= v111) {
          unint64_t v112 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v112 == v111)
          {
            uint64_t v116 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v209 = v111 + 1;
            char v210 = *(unsigned char *)(v113 + v111);
            *((void *)a2 + 1) = v209;
            v116 |= (unint64_t)(v210 & 0x7F) << v207;
            if (v210 < 0)
            {
              v207 += 7;
              unint64_t v111 = v209;
              BOOL v14 = v208++ > 8;
              if (v14) {
                goto LABEL_270;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v116 = 0;
            }
          }
          break;
        }
LABEL_356:
        *((void *)this + 5) = v116;
        goto LABEL_312;
      case 0x1Eu:
        *(void *)((char *)this + 212) |= 8uLL;
        unint64_t v119 = *((void *)a2 + 1);
        unint64_t v120 = *((void *)a2 + 2);
        uint64_t v121 = *(void *)a2;
        if (v119 <= 0xFFFFFFFFFFFFFFF5 && v119 + 10 <= v120)
        {
          char v122 = 0;
          unsigned int v123 = 0;
          uint64_t v124 = 0;
          do
          {
            unint64_t v125 = v119 + 1;
            *((void *)a2 + 1) = v119 + 1;
            char v126 = *(unsigned char *)(v121 + v119);
            v124 |= (unint64_t)(v126 & 0x7F) << v122;
            if ((v126 & 0x80) == 0) {
              goto LABEL_360;
            }
            v122 += 7;
            unint64_t v119 = v125;
            BOOL v14 = v123++ > 8;
          }
          while (!v14);
LABEL_277:
          uint64_t v124 = 0;
          goto LABEL_360;
        }
        char v211 = 0;
        unsigned int v212 = 0;
        uint64_t v124 = 0;
        if (v120 <= v119) {
          unint64_t v120 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v120 == v119)
          {
            uint64_t v124 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v213 = v119 + 1;
            char v214 = *(unsigned char *)(v121 + v119);
            *((void *)a2 + 1) = v213;
            v124 |= (unint64_t)(v214 & 0x7F) << v211;
            if (v214 < 0)
            {
              v211 += 7;
              unint64_t v119 = v213;
              BOOL v14 = v212++ > 8;
              if (v14) {
                goto LABEL_277;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v124 = 0;
            }
          }
          break;
        }
LABEL_360:
        *((void *)this + 4) = v124;
        goto LABEL_312;
      case 0x1Fu:
        *(void *)((char *)this + 212) |= 0x800000000uLL;
        unint64_t v127 = *((void *)a2 + 1);
        if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 49) = *(_DWORD *)(*(void *)a2 + v127);
        goto LABEL_311;
      case 0x20u:
        *(void *)((char *)this + 212) |= 0x2000000000uLL;
        unint64_t v128 = *((void *)a2 + 1);
        if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 51) = *(_DWORD *)(*(void *)a2 + v128);
        goto LABEL_311;
      case 0x21u:
        *(void *)((char *)this + 212) |= 0x1000000000uLL;
        unint64_t v129 = *((void *)a2 + 1);
        if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)a2 + 2)) {
          goto LABEL_168;
        }
        *((_DWORD *)this + 50) = *(_DWORD *)(*(void *)a2 + v129);
        goto LABEL_311;
      case 0x22u:
        *(void *)((char *)this + 212) |= 0x400000000uLL;
        unint64_t v130 = *((void *)a2 + 1);
        if (v130 <= 0xFFFFFFFFFFFFFFFBLL && v130 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 48) = *(_DWORD *)(*(void *)a2 + v130);
LABEL_311:
          *((void *)a2 + 1) += 4;
        }
        else
        {
LABEL_168:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_312;
      case 0x23u:
        *(void *)((char *)this + 212) |= 0x4000000000uLL;
        unint64_t v131 = *((void *)a2 + 1);
        if (v131 >= *((void *)a2 + 2))
        {
          BOOL v134 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v132 = v131 + 1;
          int v133 = *(unsigned __int8 *)(*(void *)a2 + v131);
          *((void *)a2 + 1) = v132;
          BOOL v134 = v133 != 0;
        }
        *((unsigned char *)this + 208) = v134;
        goto LABEL_312;
      case 0x24u:
        *(void *)((char *)this + 212) |= 0x8000000000uLL;
        unint64_t v135 = *((void *)a2 + 1);
        if (v135 >= *((void *)a2 + 2))
        {
          BOOL v138 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v136 = v135 + 1;
          int v137 = *(unsigned __int8 *)(*(void *)a2 + v135);
          *((void *)a2 + 1) = v136;
          BOOL v138 = v137 != 0;
        }
        *((unsigned char *)this + 209) = v138;
        goto LABEL_312;
      case 0x25u:
        *(void *)((char *)this + 212) |= 0x1000uLL;
        unint64_t v139 = *((void *)a2 + 1);
        unint64_t v140 = *((void *)a2 + 2);
        uint64_t v141 = *(void *)a2;
        if (v139 <= 0xFFFFFFFFFFFFFFF5 && v139 + 10 <= v140)
        {
          char v142 = 0;
          unsigned int v143 = 0;
          uint64_t v144 = 0;
          do
          {
            unint64_t v145 = v139 + 1;
            *((void *)a2 + 1) = v139 + 1;
            char v146 = *(unsigned char *)(v141 + v139);
            v144 |= (unint64_t)(v146 & 0x7F) << v142;
            if ((v146 & 0x80) == 0) {
              goto LABEL_364;
            }
            v142 += 7;
            unint64_t v139 = v145;
            BOOL v14 = v143++ > 8;
          }
          while (!v14);
LABEL_288:
          LODWORD(v144) = 0;
          goto LABEL_364;
        }
        char v215 = 0;
        unsigned int v216 = 0;
        uint64_t v144 = 0;
        if (v140 <= v139) {
          unint64_t v140 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v140 == v139)
          {
            LODWORD(v144) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v217 = v139 + 1;
            char v218 = *(unsigned char *)(v141 + v139);
            *((void *)a2 + 1) = v217;
            v144 |= (unint64_t)(v218 & 0x7F) << v215;
            if (v218 < 0)
            {
              v215 += 7;
              unint64_t v139 = v217;
              BOOL v14 = v216++ > 8;
              if (v14) {
                goto LABEL_288;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v144) = 0;
            }
          }
          break;
        }
LABEL_364:
        *((_DWORD *)this + 26) = v144;
        goto LABEL_312;
      case 0x26u:
        *(void *)((char *)this + 212) |= 4uLL;
        unint64_t v147 = *((void *)a2 + 1);
        unint64_t v148 = *((void *)a2 + 2);
        uint64_t v149 = *(void *)a2;
        if (v147 <= 0xFFFFFFFFFFFFFFF5 && v147 + 10 <= v148)
        {
          char v150 = 0;
          unsigned int v151 = 0;
          uint64_t v152 = 0;
          do
          {
            unint64_t v153 = v147 + 1;
            *((void *)a2 + 1) = v147 + 1;
            char v154 = *(unsigned char *)(v149 + v147);
            v152 |= (unint64_t)(v154 & 0x7F) << v150;
            if ((v154 & 0x80) == 0) {
              goto LABEL_368;
            }
            v150 += 7;
            unint64_t v147 = v153;
            BOOL v14 = v151++ > 8;
          }
          while (!v14);
LABEL_295:
          uint64_t v152 = 0;
          goto LABEL_368;
        }
        char v219 = 0;
        unsigned int v220 = 0;
        uint64_t v152 = 0;
        if (v148 <= v147) {
          unint64_t v148 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v148 == v147)
          {
            uint64_t v152 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v221 = v147 + 1;
            char v222 = *(unsigned char *)(v149 + v147);
            *((void *)a2 + 1) = v221;
            v152 |= (unint64_t)(v222 & 0x7F) << v219;
            if (v222 < 0)
            {
              v219 += 7;
              unint64_t v147 = v221;
              BOOL v14 = v220++ > 8;
              if (v14) {
                goto LABEL_295;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v152 = 0;
            }
          }
          break;
        }
LABEL_368:
        *((void *)this + 3) = v152;
        goto LABEL_312;
      case 0x27u:
        *(void *)((char *)this + 212) |= 2uLL;
        unint64_t v155 = *((void *)a2 + 1);
        unint64_t v156 = *((void *)a2 + 2);
        uint64_t v157 = *(void *)a2;
        if (v155 <= 0xFFFFFFFFFFFFFFF5 && v155 + 10 <= v156)
        {
          char v158 = 0;
          unsigned int v159 = 0;
          uint64_t v160 = 0;
          do
          {
            unint64_t v161 = v155 + 1;
            *((void *)a2 + 1) = v155 + 1;
            char v162 = *(unsigned char *)(v157 + v155);
            v160 |= (unint64_t)(v162 & 0x7F) << v158;
            if ((v162 & 0x80) == 0) {
              goto LABEL_372;
            }
            v158 += 7;
            unint64_t v155 = v161;
            BOOL v14 = v159++ > 8;
          }
          while (!v14);
LABEL_302:
          uint64_t v160 = 0;
          goto LABEL_372;
        }
        char v223 = 0;
        unsigned int v224 = 0;
        uint64_t v160 = 0;
        if (v156 <= v155) {
          unint64_t v156 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v156 == v155)
          {
            uint64_t v160 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v225 = v155 + 1;
            char v226 = *(unsigned char *)(v157 + v155);
            *((void *)a2 + 1) = v225;
            v160 |= (unint64_t)(v226 & 0x7F) << v223;
            if (v226 < 0)
            {
              v223 += 7;
              unint64_t v155 = v225;
              BOOL v14 = v224++ > 8;
              if (v14) {
                goto LABEL_302;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v160 = 0;
            }
          }
          break;
        }
LABEL_372:
        *((void *)this + 2) = v160;
        goto LABEL_312;
      case 0x28u:
        *(void *)((char *)this + 212) |= 1uLL;
        unint64_t v163 = *((void *)a2 + 1);
        unint64_t v164 = *((void *)a2 + 2);
        uint64_t v165 = *(void *)a2;
        if (v163 <= 0xFFFFFFFFFFFFFFF5 && v163 + 10 <= v164)
        {
          char v166 = 0;
          unsigned int v167 = 0;
          uint64_t v168 = 0;
          do
          {
            unint64_t v169 = v163 + 1;
            *((void *)a2 + 1) = v163 + 1;
            char v170 = *(unsigned char *)(v165 + v163);
            v168 |= (unint64_t)(v170 & 0x7F) << v166;
            if ((v170 & 0x80) == 0) {
              goto LABEL_376;
            }
            v166 += 7;
            unint64_t v163 = v169;
            BOOL v14 = v167++ > 8;
          }
          while (!v14);
LABEL_309:
          uint64_t v168 = 0;
          goto LABEL_376;
        }
        char v227 = 0;
        unsigned int v228 = 0;
        uint64_t v168 = 0;
        if (v164 <= v163) {
          unint64_t v164 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v164 == v163)
      {
        uint64_t v168 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_376;
      }
      unint64_t v229 = v163 + 1;
      char v230 = *(unsigned char *)(v165 + v163);
      *((void *)a2 + 1) = v229;
      v168 |= (unint64_t)(v230 & 0x7F) << v227;
      if ((v230 & 0x80) == 0) {
        break;
      }
      v227 += 7;
      unint64_t v163 = v229;
      BOOL v14 = v228++ > 8;
      if (v14) {
        goto LABEL_309;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v168 = 0;
    }
LABEL_376:
    *((void *)this + 1) = v168;
LABEL_312:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_312;
  }
  return result;
}

uint64_t CMMsl::SafetyTrustedAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 212);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    uint64_t v4 = *(void *)(v3 + 212);
    if ((v4 & 0x200000) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_44;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 152));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 176));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 188));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 172));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 164));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 184));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 180));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_24:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 160));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 168));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x4000) == 0)
  {
LABEL_29:
    if ((v4 & 0x10) == 0) {
      goto LABEL_30;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_30:
    if ((v4 & 8) == 0) {
      goto LABEL_31;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_31:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 196));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 204));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 200));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(float *)(v3 + 192));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x1000) == 0)
  {
LABEL_38:
    if ((v4 & 4) == 0) {
      goto LABEL_39;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_39:
    if ((v4 & 2) == 0) {
      goto LABEL_40;
    }
LABEL_80:
    this = PB::Writer::writeVarInt(a2);
    if ((*(void *)(v3 + 212) & 1) == 0) {
      return this;
    }
    goto LABEL_81;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 2) != 0) {
    goto LABEL_80;
  }
LABEL_40:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_81:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::SafetyTrustedAudioResult::hash_value(CMMsl::SafetyTrustedAudioResult *this)
{
  uint64_t v1 = *(void *)((char *)this + 212);
  if ((v1 & 0x800) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_3;
    }
LABEL_98:
    uint64_t v75 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_6;
    }
    goto LABEL_99;
  }
  uint64_t v2 = *((void *)this + 12);
  if ((v1 & 0x200000) == 0) {
    goto LABEL_98;
  }
LABEL_3:
  float v3 = *((float *)this + 35);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v75 = v4;
  if ((v1 & 0x40) != 0)
  {
LABEL_6:
    uint64_t v74 = *((void *)this + 7);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_7;
    }
LABEL_100:
    uint64_t v73 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_10;
    }
LABEL_101:
    uint64_t v72 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_13;
    }
LABEL_102:
    uint64_t v71 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_16;
    }
    goto LABEL_103;
  }
LABEL_99:
  uint64_t v74 = 0;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_100;
  }
LABEL_7:
  float v5 = *((float *)this + 30);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v73 = v6;
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_101;
  }
LABEL_10:
  float v7 = *((float *)this + 38);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v72 = v8;
  if ((v1 & 0x100000) == 0) {
    goto LABEL_102;
  }
LABEL_13:
  float v9 = *((float *)this + 34);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v71 = v10;
  if ((v1 & 0x20) != 0)
  {
LABEL_16:
    uint64_t v70 = *((void *)this + 6);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_17;
    }
LABEL_104:
    uint64_t v69 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_20;
    }
LABEL_105:
    uint64_t v68 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_23;
    }
LABEL_106:
    uint64_t v67 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_26;
    }
    goto LABEL_107;
  }
LABEL_103:
  uint64_t v70 = 0;
  if ((v1 & 0x40000) == 0) {
    goto LABEL_104;
  }
LABEL_17:
  float v11 = *((float *)this + 32);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v69 = v12;
  if ((v1 & 0x800000) == 0) {
    goto LABEL_105;
  }
LABEL_20:
  float v13 = *((float *)this + 37);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v68 = v14;
  if ((v1 & 0x400000) == 0) {
    goto LABEL_106;
  }
LABEL_23:
  float v15 = *((float *)this + 36);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v67 = v16;
  if ((v1 & 0x80) != 0)
  {
LABEL_26:
    uint64_t v66 = *((void *)this + 8);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_27;
    }
LABEL_108:
    uint64_t v65 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_30;
    }
LABEL_109:
    uint64_t v64 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_33;
    }
LABEL_110:
    uint64_t v63 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_36;
    }
    goto LABEL_111;
  }
LABEL_107:
  uint64_t v66 = 0;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_108;
  }
LABEL_27:
  float v17 = *((float *)this + 31);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  uint64_t v65 = v18;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_109;
  }
LABEL_30:
  float v19 = *((float *)this + 33);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  uint64_t v64 = v20;
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_110;
  }
LABEL_33:
  float v21 = *((float *)this + 44);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  uint64_t v63 = v22;
  if ((v1 & 0x200) != 0)
  {
LABEL_36:
    uint64_t v23 = *((void *)this + 10);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_37;
    }
LABEL_112:
    uint64_t v25 = 0;
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_41;
    }
LABEL_113:
    uint64_t v27 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_45;
    }
LABEL_114:
    uint64_t v29 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_49;
    }
    goto LABEL_115;
  }
LABEL_111:
  uint64_t v23 = 0;
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_112;
  }
LABEL_37:
  float v24 = *((float *)this + 39);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = LODWORD(v24);
  }
  if ((v1 & 0x200000000) == 0) {
    goto LABEL_113;
  }
LABEL_41:
  float v26 = *((float *)this + 47);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = LODWORD(v26);
  }
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_114;
  }
LABEL_45:
  float v28 = *((float *)this + 43);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = LODWORD(v28);
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_49:
    uint64_t v30 = *((void *)this + 9);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_50;
    }
LABEL_116:
    uint64_t v32 = 0;
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_54;
    }
LABEL_117:
    uint64_t v34 = 0;
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_58;
    }
LABEL_118:
    uint64_t v36 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_62;
    }
    goto LABEL_119;
  }
LABEL_115:
  uint64_t v30 = 0;
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_116;
  }
LABEL_50:
  float v31 = *((float *)this + 41);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = LODWORD(v31);
  }
  if ((v1 & 0x100000000) == 0) {
    goto LABEL_117;
  }
LABEL_54:
  float v33 = *((float *)this + 46);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = LODWORD(v33);
  }
  if ((v1 & 0x80000000) == 0) {
    goto LABEL_118;
  }
LABEL_58:
  float v35 = *((float *)this + 45);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = LODWORD(v35);
  }
  if ((v1 & 0x400) != 0)
  {
LABEL_62:
    uint64_t v37 = *((void *)this + 11);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_63;
    }
LABEL_120:
    uint64_t v39 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_67;
    }
LABEL_121:
    uint64_t v41 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_71;
    }
LABEL_122:
    uint64_t v43 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_75;
    }
    goto LABEL_123;
  }
LABEL_119:
  uint64_t v37 = 0;
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_120;
  }
LABEL_63:
  float v38 = *((float *)this + 40);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = LODWORD(v38);
  }
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_121;
  }
LABEL_67:
  float v40 = *((float *)this + 42);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = LODWORD(v40);
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_122;
  }
LABEL_71:
  float v42 = *((float *)this + 27);
  if (v42 == 0.0) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = LODWORD(v42);
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_75:
    uint64_t v44 = *((int *)this + 29);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_76;
    }
    goto LABEL_124;
  }
LABEL_123:
  uint64_t v44 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_76:
    uint64_t v45 = *((unsigned int *)this + 28);
    if ((v1 & 0x10) != 0) {
      goto LABEL_77;
    }
    goto LABEL_125;
  }
LABEL_124:
  uint64_t v45 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_77:
    uint64_t v46 = *((void *)this + 5);
    if ((v1 & 8) != 0) {
      goto LABEL_78;
    }
    goto LABEL_126;
  }
LABEL_125:
  uint64_t v46 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_78:
    uint64_t v47 = *((void *)this + 4);
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_79;
    }
LABEL_127:
    uint64_t v49 = 0;
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_82;
    }
LABEL_128:
    uint64_t v51 = 0;
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_85;
    }
LABEL_129:
    uint64_t v53 = 0;
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_88;
    }
LABEL_130:
    uint64_t v55 = 0;
    if ((v1 & 0x4000000000) != 0) {
      goto LABEL_91;
    }
    goto LABEL_131;
  }
LABEL_126:
  uint64_t v47 = 0;
  if ((v1 & 0x800000000) == 0) {
    goto LABEL_127;
  }
LABEL_79:
  float v48 = *((float *)this + 49);
  uint64_t v49 = LODWORD(v48);
  if (v48 == 0.0) {
    uint64_t v49 = 0;
  }
  if ((v1 & 0x2000000000) == 0) {
    goto LABEL_128;
  }
LABEL_82:
  float v50 = *((float *)this + 51);
  uint64_t v51 = LODWORD(v50);
  if (v50 == 0.0) {
    uint64_t v51 = 0;
  }
  if ((v1 & 0x1000000000) == 0) {
    goto LABEL_129;
  }
LABEL_85:
  float v52 = *((float *)this + 50);
  uint64_t v53 = LODWORD(v52);
  if (v52 == 0.0) {
    uint64_t v53 = 0;
  }
  if ((v1 & 0x400000000) == 0) {
    goto LABEL_130;
  }
LABEL_88:
  float v54 = *((float *)this + 48);
  uint64_t v55 = LODWORD(v54);
  if (v54 == 0.0) {
    uint64_t v55 = 0;
  }
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_91:
    uint64_t v56 = *((unsigned __int8 *)this + 208);
    if ((v1 & 0x8000000000) != 0) {
      goto LABEL_92;
    }
    goto LABEL_132;
  }
LABEL_131:
  uint64_t v56 = 0;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_92:
    uint64_t v57 = *((unsigned __int8 *)this + 209);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_93;
    }
    goto LABEL_133;
  }
LABEL_132:
  uint64_t v57 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_93:
    uint64_t v58 = *((unsigned int *)this + 26);
    if ((v1 & 4) != 0) {
      goto LABEL_94;
    }
    goto LABEL_134;
  }
LABEL_133:
  uint64_t v58 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_94:
    uint64_t v59 = *((void *)this + 3);
    if ((v1 & 2) != 0) {
      goto LABEL_95;
    }
LABEL_135:
    uint64_t v60 = 0;
    if (v1) {
      goto LABEL_96;
    }
LABEL_136:
    uint64_t v61 = 0;
    return v75 ^ v2 ^ v74 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v39 ^ v41 ^ v43 ^ v44 ^ v45 ^ v46 ^ v47 ^ v49 ^ v51 ^ v53 ^ v55 ^ v56 ^ v57 ^ v58 ^ v59 ^ v60 ^ v61;
  }
LABEL_134:
  uint64_t v59 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_135;
  }
LABEL_95:
  uint64_t v60 = *((void *)this + 2);
  if ((v1 & 1) == 0) {
    goto LABEL_136;
  }
LABEL_96:
  uint64_t v61 = *((void *)this + 1);
  return v75 ^ v2 ^ v74 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v39 ^ v41 ^ v43 ^ v44 ^ v45 ^ v46 ^ v47 ^ v49 ^ v51 ^ v53 ^ v55 ^ v56 ^ v57 ^ v58 ^ v59 ^ v60 ^ v61;
}

uint64_t CMMsl::SatelliteInfo::SatelliteInfo(uint64_t this)
{
  *(void *)this = &unk_270644CB8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270644CB8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::SatelliteInfo::~SatelliteInfo(CMMsl::SatelliteInfo *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::SatelliteInfo::SatelliteInfo(CMMsl::SatelliteInfo *this, const CMMsl::SatelliteInfo *a2)
{
  *(void *)this = &unk_270644CB8;
  *((_DWORD *)this + 5) = 0;
  char v2 = *((unsigned char *)a2 + 20);
  if ((v2 & 2) != 0)
  {
    float result = *((float *)a2 + 3);
    char v3 = 2;
    *((unsigned char *)this + 20) = 2;
    *((float *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 20);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 20))
  {
LABEL_5:
    float result = *((float *)a2 + 2);
    v3 |= 1u;
    *((unsigned char *)this + 20) = v3;
    *((float *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    float result = *((float *)a2 + 4);
    *((unsigned char *)this + 20) = v3 | 4;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t CMMsl::SatelliteInfo::operator=(uint64_t a1, const CMMsl::SatelliteInfo *a2)
{
  if ((const CMMsl::SatelliteInfo *)a1 != a2)
  {
    CMMsl::SatelliteInfo::SatelliteInfo((CMMsl::SatelliteInfo *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    int v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SatelliteInfo *a2, CMMsl::SatelliteInfo *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  int v4 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  int v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::SatelliteInfo::SatelliteInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644CB8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270644CB8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::SatelliteInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = &unk_270644CB8;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    int v4 = *(_DWORD *)(a2 + 16);
    int v10 = *(_DWORD *)(a1 + 20);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(void *)(a1 + 8) = v6;
    v8[1] = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SatelliteInfo::formatText(CMMsl::SatelliteInfo *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "azimuthDeg", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "elevationDeg", *((float *)this + 3));
  if ((*((unsigned char *)this + 20) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "l1Cn0", *((float *)this + 4));
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SatelliteInfo::readFrom(CMMsl::SatelliteInfo *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_27;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 20) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
      }
      else
      {
        if (v19 != 1)
        {
LABEL_27:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_37;
        }
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_37;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 4;
      *((void *)a2 + 1) = v2;
LABEL_37:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::SatelliteInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 2) == 0)
  {
    if ((*(unsigned char *)(this + 20) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(float *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 20) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(float *)(this + 12));
  char v4 = *(unsigned char *)(v3 + 20);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  float v5 = *(float *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::SatelliteInfo::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 20) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 4) == 0;
  if ((*(unsigned char *)(a1 + 20) & 4) != 0) {
    return (*(unsigned char *)(a2 + 20) & 4) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::SatelliteInfo::hash_value(CMMsl::SatelliteInfo *this)
{
  if ((*((unsigned char *)this + 20) & 2) != 0)
  {
    float v6 = *((float *)this + 3);
    uint64_t v1 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v1 = 0;
    }
    if (*((unsigned char *)this + 20))
    {
LABEL_3:
      float v2 = *((float *)this + 2);
      uint64_t v3 = LODWORD(v2);
      if (v2 == 0.0) {
        uint64_t v3 = 0;
      }
      if ((*((unsigned char *)this + 20) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t v5 = 0;
      return v3 ^ v1 ^ v5;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 20)) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 20) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  float v4 = *((float *)this + 4);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  return v3 ^ v1 ^ v5;
}

void CMMsl::SessionOverride::~SessionOverride(CMMsl::SessionOverride *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SessionOverride::SessionOverride(uint64_t this, const CMMsl::SessionOverride *a2)
{
  *(void *)this = &unk_270644CF0;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::SessionOverride *CMMsl::SessionOverride::operator=(const CMMsl::SessionOverride *a1, const CMMsl::SessionOverride *a2)
{
  if (a1 != a2)
  {
    CMMsl::SessionOverride::SessionOverride((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SessionOverride *a2, CMMsl::SessionOverride *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::SessionOverride::SessionOverride(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644CF0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644CF0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SessionOverride::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = &unk_270644CF0;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    void v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SessionOverride::formatText(CMMsl::SessionOverride *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "sessionType");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SessionOverride::readFrom(CMMsl::SessionOverride *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SessionOverride::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::SessionOverride::hash_value(CMMsl::SessionOverride *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

void CMMsl::SignalEnvironment::~SignalEnvironment(CMMsl::SignalEnvironment *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SignalEnvironment::SignalEnvironment(uint64_t this, const CMMsl::SignalEnvironment *a2)
{
  *(void *)this = &unk_270644D28;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::SignalEnvironment::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &unk_270644D28;
    int v3 = *(unsigned __int8 *)(a2 + 12);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = &unk_270644D28;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SignalEnvironment *a2, CMMsl::SignalEnvironment *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::SignalEnvironment::formatText(CMMsl::SignalEnvironment *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "type");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SignalEnvironment::readFrom(CMMsl::SignalEnvironment *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_42:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SignalEnvironment::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::SignalEnvironment::hash_value(CMMsl::SignalEnvironment *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

void CMMsl::SignificantUserInteraction::~SignificantUserInteraction(CMMsl::SignificantUserInteraction *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SignificantUserInteraction::SignificantUserInteraction(uint64_t this, const CMMsl::SignificantUserInteraction *a2)
{
  *(void *)this = &unk_270644D60;
  *(void *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::SignificantUserInteraction *CMMsl::SignificantUserInteraction::operator=(const CMMsl::SignificantUserInteraction *a1, const CMMsl::SignificantUserInteraction *a2)
{
  if (a1 != a2)
  {
    CMMsl::SignificantUserInteraction::SignificantUserInteraction((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SignificantUserInteraction *a2, CMMsl::SignificantUserInteraction *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::SignificantUserInteraction::SignificantUserInteraction(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270644D60;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = &unk_270644D60;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SignificantUserInteraction::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = &unk_270644D60;
    v8[1] = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4;
    void v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SignificantUserInteraction::formatText(CMMsl::SignificantUserInteraction *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp");
    char v5 = *((unsigned char *)this + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "type");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SignificantUserInteraction::readFrom(CMMsl::SignificantUserInteraction *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v38 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)a2 + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v19)
            {
              uint64_t v23 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v34 = v19++;
            char v35 = *(unsigned char *)(v20 + v34);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v23 = 0;
          }
LABEL_59:
          unint64_t v3 = v34 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v3 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v3;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((void *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SignificantUserInteraction::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::SignificantUserInteraction::hash_value(CMMsl::SignificantUserInteraction *this)
{
  if (*((unsigned char *)this + 20))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::SimActivityEvent::~SimActivityEvent(CMMsl::SimActivityEvent *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270644D98;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::SimActivityEvent::~SimActivityEvent(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SimActivityEvent::SimActivityEvent(uint64_t this, const CMMsl::SimActivityEvent *a2)
{
  *(void *)this = &unk_270644D98;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 16) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::SimMotionState::SimMotionState(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270644DD0;
  *(_DWORD *)(result + 12) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(void *)uint64_t result = &unk_270644DD0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = &unk_270644DD0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::SimActivityEvent::operator=(uint64_t a1, const CMMsl::SimActivityEvent *a2)
{
  if ((const CMMsl::SimActivityEvent *)a1 != a2)
  {
    CMMsl::SimActivityEvent::SimActivityEvent((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v6 = v10;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v6;
    uint64_t v9 = v5;
    uint64_t v10 = v4;
    CMMsl::SimActivityEvent::~SimActivityEvent((CMMsl::SimActivityEvent *)&v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SimActivityEvent *a2, CMMsl::SimActivityEvent *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v5 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(this + 16);
  uint64_t v6 = *((void *)a2 + 2);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *(void *)(this + 16) = v6;
  *((void *)a2 + 1) = v5;
  *((void *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::SimActivityEvent::SimActivityEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644D98;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t CMMsl::SimActivityEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::SimActivityEvent::SimActivityEvent((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v6 = v10;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v6;
    uint64_t v9 = v5;
    uint64_t v10 = v4;
    CMMsl::SimActivityEvent::~SimActivityEvent((CMMsl::SimActivityEvent *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SimActivityEvent::formatText(CMMsl::SimActivityEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "motionState");
  }
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "timestamp");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SimActivityEvent::readFrom(CMMsl::SimActivityEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2) {
        operator new();
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v20 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v20)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v24 = 0;
          if (v20 <= v19) {
            unint64_t v20 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v20 == v19)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v30 = v19 + 1;
            char v31 = *(unsigned char *)(v21 + v19);
            *((void *)a2 + 1) = v30;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v19 = v30;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
LABEL_39:
              uint64_t v24 = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v25 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v26 = *(unsigned char *)(v21 + v19);
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v19 = v25;
            BOOL v14 = v23++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((void *)this + 2) = v24;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SimMotionState::SimMotionState(uint64_t this)
{
  *(void *)this = &unk_270644DD0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_270644DD0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::SimActivityEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 24)) {
    this = PB::Writer::writeVarInt(a2);
  }
  int v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
  {
    return PB::Writer::writeSubmessage(a2, v4);
  }
  return this;
}

BOOL CMMsl::SimMotionState::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::SimActivityEvent::hash_value(CMMsl::SimActivityEvent *this)
{
  if (*((unsigned char *)this + 24)) {
    uint64_t v1 = *((void *)this + 2);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    char v3 = *(unsigned char *)(v2 + 12);
    uint64_t v2 = *(unsigned int *)(v2 + 8);
    if ((v3 & 1) == 0) {
      uint64_t v2 = 0;
    }
  }
  return v2 ^ v1;
}

uint64_t CMMsl::SimActivityEvent::makeMotionState(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::SimMotionState::~SimMotionState(CMMsl::SimMotionState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SimMotionState::SimMotionState(uint64_t this, const CMMsl::SimMotionState *a2)
{
  *(void *)this = &unk_270644DD0;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::SimMotionState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &unk_270644DD0;
    int v3 = *(unsigned char *)(a2 + 12) & 1;
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = &unk_270644DD0;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SimMotionState *a2, CMMsl::SimMotionState *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::SimMotionState::formatText(CMMsl::SimMotionState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "type");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SimMotionState::readFrom(CMMsl::SimMotionState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_42:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SimMotionState::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::SimMotionState::hash_value(CMMsl::SimMotionState *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned int *)this + 2);
  }
  else {
    return 0;
  }
}

void CMMsl::SitStandDetectorFeatures::~SitStandDetectorFeatures(CMMsl::SitStandDetectorFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures(CMMsl::SitStandDetectorFeatures *this, const CMMsl::SitStandDetectorFeatures *a2)
{
  *(void *)this = &unk_270644E08;
  *((_DWORD *)this + 11) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 44) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((unsigned char *)this + 44) = v3;
    *((_DWORD *)this + 7) = v4;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 44) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 10) = v4;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 6) = v4;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 5) = v4;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 9) = v4;
  if ((*((unsigned char *)a2 + 44) & 0x20) == 0) {
    return *(float *)&v4;
  }
LABEL_18:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *((unsigned char *)this + 44) = v3 | 0x20;
  *((_DWORD *)this + 8) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::SitStandDetectorFeatures::operator=(uint64_t a1, const CMMsl::SitStandDetectorFeatures *a2)
{
  if ((const CMMsl::SitStandDetectorFeatures *)a1 != a2)
  {
    CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures((CMMsl::SitStandDetectorFeatures *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    int v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorFeatures *a2, CMMsl::SitStandDetectorFeatures *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  return result;
}

float CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644E08;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270644E08;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorFeatures::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v11[0] = &unk_270644E08;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 40);
    int v15 = *(_DWORD *)(a1 + 44);
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v11[1] = v6;
    int v14 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v12 = *(_OWORD *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v9;
    uint64_t v13 = v8;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorFeatures::formatText(CMMsl::SitStandDetectorFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "magnitudeRangeInertialVertical", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "maxAngleBetweenThighAndShinDeg", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "minAngleBetweenThighAndShinDeg", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "motionPlanarity", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "timeToReachMaxThighAndShinAngleThreshold", *((float *)this + 8));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((unsigned char *)this + 44) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timeToReachMinThighAndShinAngleThreshold", *((float *)this + 9));
  char v5 = *((unsigned char *)this + 44);
  if (v5) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "vm", *((float *)this + 10));
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SitStandDetectorFeatures::readFrom(CMMsl::SitStandDetectorFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_50;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_49;
      case 2u:
        *((unsigned char *)this + 44) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 3u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 4u:
        *((unsigned char *)this + 44) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 5u:
        *((unsigned char *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 6u:
        *((unsigned char *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 7u:
        *((unsigned char *)this + 44) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 8u:
        *((unsigned char *)this + 44) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
        {
LABEL_46:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_48:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_49:
          *((void *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_50:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 36));
    if ((*(unsigned char *)(v3 + 44) & 0x20) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_17:
  float v5 = *(float *)(v3 + 32);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::SitStandDetectorFeatures::hash_value(CMMsl::SitStandDetectorFeatures *this)
{
  if ((*((unsigned char *)this + 44) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_27:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_28:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 44) & 0x80) != 0) {
      goto LABEL_9;
    }
LABEL_29:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_12;
    }
LABEL_30:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_15;
    }
LABEL_31:
    uint64_t v11 = 0;
    if ((*((unsigned char *)this + 44) & 0x40) != 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_27;
  }
LABEL_3:
  float v2 = *((float *)this + 7);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_28;
  }
LABEL_6:
  float v4 = *((float *)this + 4);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x80) == 0) {
    goto LABEL_29;
  }
LABEL_9:
  float v6 = *((float *)this + 10);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 44) & 8) == 0) {
    goto LABEL_30;
  }
LABEL_12:
  float v8 = *((float *)this + 6);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_31;
  }
LABEL_15:
  float v10 = *((float *)this + 5);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x40) != 0)
  {
LABEL_18:
    float v12 = *((float *)this + 9);
    uint64_t v13 = LODWORD(v12);
    if (v12 == 0.0) {
      uint64_t v13 = 0;
    }
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_21;
    }
LABEL_33:
    uint64_t v15 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_32:
  uint64_t v13 = 0;
  if ((*((unsigned char *)this + 44) & 0x20) == 0) {
    goto LABEL_33;
  }
LABEL_21:
  float v14 = *((float *)this + 8);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
}

void CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::~SitStandDetectorPosteriorBufferStatsForSitToStand(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this, const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a2)
{
  *(void *)this = &unk_270644E40;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 6) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    if ((*((unsigned char *)a2 + 28) & 4) == 0) {
      return *(float *)&v4;
    }
  }
  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((unsigned char *)this + 28) = v3 | 4;
  *((_DWORD *)this + 5) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator=(uint64_t a1, const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a2)
{
  if ((const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *)a1 != a2)
  {
    CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand((CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v3;
    uint64_t v4 = v11;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v4;
    int v7 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v7;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a2, CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644E40;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270644E40;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    int v10 = *(_DWORD *)(a1 + 24);
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v4;
    v9[0] = &unk_270644E40;
    int v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    *(void *)(a1 + 16) = v7;
    v9[1] = v5;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::formatText(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "maxPosterior", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "meanPosterior", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "minPosterior", *((float *)this + 6));
  if (*((unsigned char *)this + 28)) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::readFrom(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_38;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_37;
      case 2u:
        *((unsigned char *)this + 28) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_37:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_38:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 20);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::hash_value(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 2) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 4);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 5);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7;
}

void CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::~SitStandDetectorPosteriorBufferStatsForStandToSit(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this, const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a2)
{
  *(void *)this = &unk_270644E78;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 6) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    if ((*((unsigned char *)a2 + 28) & 4) == 0) {
      return *(float *)&v4;
    }
  }
  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((unsigned char *)this + 28) = v3 | 4;
  *((_DWORD *)this + 5) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator=(uint64_t a1, const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a2)
{
  if ((const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *)a1 != a2)
  {
    CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit((CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v3;
    uint64_t v4 = v11;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v4;
    int v7 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v7;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a2, CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644E78;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270644E78;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    int v10 = *(_DWORD *)(a1 + 24);
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v4;
    v9[0] = &unk_270644E78;
    int v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    *(void *)(a1 + 16) = v7;
    v9[1] = v5;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::formatText(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "maxPosterior", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "meanPosterior", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "minPosterior", *((float *)this + 6));
  if (*((unsigned char *)this + 28)) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::readFrom(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_38;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_37;
      case 2u:
        *((unsigned char *)this + 28) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_37:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_38:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 20);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::hash_value(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 2) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 4);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 5);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7;
}

void CMMsl::SitStandDetectorTransition::~SitStandDetectorTransition(CMMsl::SitStandDetectorTransition *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(uint64_t this, const CMMsl::SitStandDetectorTransition *a2)
{
  *(void *)this = &unk_270644EB0;
  *(void *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::SitStandDetectorTransition *CMMsl::SitStandDetectorTransition::operator=(const CMMsl::SitStandDetectorTransition *a1, const CMMsl::SitStandDetectorTransition *a2)
{
  if (a1 != a2)
  {
    CMMsl::SitStandDetectorTransition::SitStandDetectorTransition((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorTransition *a2, CMMsl::SitStandDetectorTransition *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644EB0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644EB0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SitStandDetectorTransition::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = &unk_270644EB0;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    void v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorTransition::formatText(CMMsl::SitStandDetectorTransition *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "transitionType");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SitStandDetectorTransition::readFrom(CMMsl::SitStandDetectorTransition *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorTransition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::SitStandDetectorTransition::hash_value(CMMsl::SitStandDetectorTransition *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 4);
  return v2 ^ *(void *)&v1;
}

void CMMsl::Skeleton2D::~Skeleton2D(CMMsl::Skeleton2D *this)
{
  *(void *)this = &unk_270644EE8;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270644EE8;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270644EE8;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::Skeleton2D::Skeleton2D(uint64_t this, const CMMsl::Skeleton2D *a2)
{
  *(void *)this = &unk_270644EE8;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 5);
    *(unsigned char *)(this + 48) |= 2u;
    *(void *)(this + 40) = v3;
    char v2 = *((unsigned char *)a2 + 48);
  }
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 48) |= 1u;
    *(void *)(this + 8) = v4;
  }
  return this;
}

void sub_2572819E8(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_2570AFA4C(a1);
}

uint64_t CMMsl::Skeleton2D::operator=(uint64_t a1, const CMMsl::Skeleton2D *a2)
{
  if ((const CMMsl::Skeleton2D *)a1 != a2)
  {
    CMMsl::Skeleton2D::Skeleton2D((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    char v9 = &unk_270644EE8;
    char v15 = (void **)&v11;
    sub_2572C6D4C(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Skeleton2D *a2, CMMsl::Skeleton2D *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::Skeleton2D::Skeleton2D(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644EE8;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  if (*(void *)(a1 + 16))
  {
    sub_2572C6DA0((void *)(a1 + 16));
    operator delete(*(void **)v4);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::Skeleton2D::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::Skeleton2D::Skeleton2D((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    char v9 = &unk_270644EE8;
    char v15 = (void **)&v11;
    sub_2572C6D4C(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton2D::formatText(CMMsl::Skeleton2D *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 48)) {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 2);
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "joint");
  }
  if ((*((unsigned char *)this + 48) & 2) != 0) {
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Skeleton2D::readFrom(CMMsl::Skeleton2D *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_21;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v21);
LABEL_33:
        *((void *)a2 + 1) += 8;
        goto LABEL_34;
      }
      if (v20 == 1) {
        operator new();
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
LABEL_34:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 48) |= 1u;
    unint64_t v22 = *((void *)a2 + 1);
    if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2))
    {
LABEL_31:
      *((unsigned char *)a2 + 24) = 1;
      goto LABEL_34;
    }
    *((void *)this + 1) = *(void *)(*(void *)a2 + v22);
    goto LABEL_33;
  }
  return v4 == 0;
}

void sub_25728211C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton2D::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base ***)(this + 16);
  uint64_t v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  char v7 = *(unsigned char *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
    char v7 = *(unsigned char *)(v3 + 48);
  }
  if (v7)
  {
    double v8 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v8);
  }
  return this;
}

uint64_t CMMsl::Skeleton2D::hash_value(CMMsl::Skeleton2D *this)
{
  unint64_t v2 = (CMMsl::Skeleton2DJoint **)*((void *)this + 2);
  uint64_t v3 = (CMMsl::Skeleton2DJoint **)*((void *)this + 3);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      v4 ^= CMMsl::Skeleton2DJoint::hash_value(v5);
    }
    while (v2 != v3);
  }
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
    double v6 = *((double *)this + 5);
    if (v6 == 0.0) {
      double v6 = 0.0;
    }
    if (*((unsigned char *)this + 48)) {
      goto LABEL_8;
    }
LABEL_14:
    double v7 = 0.0;
    return *(void *)&v6 ^ v4 ^ *(void *)&v7;
  }
  double v6 = 0.0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  double v7 = *((double *)this + 1);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  return *(void *)&v6 ^ v4 ^ *(void *)&v7;
}

uint64_t CMMsl::Skeleton2DJoint::Skeleton2DJoint(uint64_t this)
{
  *(void *)this = &unk_270644F20;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = &unk_270644F20;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::Skeleton2DJoint::~Skeleton2DJoint(CMMsl::Skeleton2DJoint *this)
{
  *(void *)this = &unk_270644F20;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::Skeleton2DJoint::~Skeleton2DJoint(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::Skeleton2DJoint *CMMsl::Skeleton2DJoint::Skeleton2DJoint(CMMsl::Skeleton2DJoint *this, const CMMsl::Skeleton2DJoint *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (void *)((char *)this + 8);
  *(void *)this = &unk_270644F20;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 11) = 0;
  if ((*((unsigned char *)a2 + 44) & 2) != 0)
  {
    int v5 = *((_DWORD *)a2 + 9);
    *((unsigned char *)this + 44) = 2;
    *((_DWORD *)this + 9) = v5;
  }
  if (this != a2) {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  char v6 = *((unsigned char *)a2 + 44);
  if (v6)
  {
    int v7 = *((_DWORD *)a2 + 8);
    *((unsigned char *)this + 44) |= 1u;
    *((_DWORD *)this + 8) = v7;
    char v6 = *((unsigned char *)a2 + 44);
  }
  if ((v6 & 4) != 0)
  {
    char v8 = *((unsigned char *)a2 + 40);
    *((unsigned char *)this + 44) |= 4u;
    *((unsigned char *)this + 40) = v8;
  }
  return this;
}

uint64_t CMMsl::Skeleton2DJoint::operator=(uint64_t a1, const CMMsl::Skeleton2DJoint *a2)
{
  if ((const CMMsl::Skeleton2DJoint *)a1 != a2)
  {
    CMMsl::Skeleton2DJoint::Skeleton2DJoint((CMMsl::Skeleton2DJoint *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v15;
    int v15 = v3;
    int v4 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v13;
    int v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v6;
    int v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    int v12 = v7;
    LOBYTE(v6) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v14;
    char v14 = v6;
    CMMsl::Skeleton2DJoint::~Skeleton2DJoint((CMMsl::Skeleton2DJoint *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Skeleton2DJoint *a2, CMMsl::Skeleton2DJoint *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  int v4 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  LOBYTE(v7) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v7;
  return result;
}

uint64_t CMMsl::Skeleton2DJoint::Skeleton2DJoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644F20;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

{
  *(void *)a1 = &unk_270644F20;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::Skeleton2DJoint::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v14 = &unk_270644F20;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    int v4 = *(_DWORD *)(a2 + 36);
    char v5 = *(unsigned char *)(a2 + 40);
    int v6 = *(_DWORD *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 24);
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    int v9 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v3;
    int v20 = v9;
    int v10 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v4;
    int v18 = v10;
    long long v11 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v15 = v11;
    uint64_t v12 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v7;
    uint64_t v16 = v12;
    LODWORD(v8) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v6;
    int v17 = v8;
    LOBYTE(v12) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v5;
    char v19 = v12;
    CMMsl::Skeleton2DJoint::~Skeleton2DJoint((CMMsl::Skeleton2DJoint *)&v14);
  }
  return a1;
}

uint64_t CMMsl::Skeleton2DJoint::formatText(CMMsl::Skeleton2DJoint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "confidence", *((float *)this + 8));
    char v5 = *((unsigned char *)this + 44);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "joint");
  }
  int v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "position", v8);
  }
  if ((*((unsigned char *)this + 44) & 4) != 0) {
    PB::TextFormatter::format(a2, "visible");
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::Skeleton2DJoint::readFrom(CMMsl::Skeleton2DJoint *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      if ((v11 & 7) != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            *((unsigned char *)this + 44) |= 2u;
            unint64_t v20 = *((void *)a2 + 1);
            unint64_t v21 = *((void *)a2 + 2);
            uint64_t v22 = *(void *)a2;
            if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
            {
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v26 = v20 + 1;
                *((void *)a2 + 1) = v20 + 1;
                char v27 = *(unsigned char *)(v22 + v20);
                v25 |= (unint64_t)(v27 & 0x7F) << v23;
                if ((v27 & 0x80) == 0) {
                  goto LABEL_85;
                }
                v23 += 7;
                unint64_t v20 = v26;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
LABEL_69:
              LODWORD(v25) = 0;
              goto LABEL_85;
            }
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v25 = 0;
            if (v21 <= v20) {
              unint64_t v21 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v49 = v20 + 1;
                char v50 = *(unsigned char *)(v22 + v20);
                *((void *)a2 + 1) = v49;
                v25 |= (unint64_t)(v50 & 0x7F) << v47;
                if (v50 < 0)
                {
                  v47 += 7;
                  unint64_t v20 = v49;
                  BOOL v14 = v48++ > 8;
                  if (v14) {
                    goto LABEL_69;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
              }
              break;
            }
LABEL_85:
            *((_DWORD *)this + 9) = v25;
            goto LABEL_20;
          case 2u:
            if ((v11 & 7) == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v28 = *((void *)a2 + 1);
              unint64_t v29 = *((void *)a2 + 2);
              while (v28 < v29 && !*((unsigned char *)a2 + 24))
              {
                char v31 = (char *)*((void *)this + 2);
                unint64_t v30 = *((void *)this + 3);
                if ((unint64_t)v31 >= v30)
                {
                  unsigned int v33 = (char *)*((void *)this + 1);
                  uint64_t v34 = (v31 - v33) >> 2;
                  unint64_t v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 62) {
                    goto LABEL_103;
                  }
                  uint64_t v36 = v30 - (void)v33;
                  if (v36 >> 1 > v35) {
                    unint64_t v35 = v36 >> 1;
                  }
                  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v37 = v35;
                  }
                  if (v37)
                  {
                    unint64_t v37 = (unint64_t)sub_2572C76F0(v37);
                    unsigned int v33 = (char *)*((void *)this + 1);
                    char v31 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    uint64_t v38 = 0;
                  }
                  char v39 = (_DWORD *)(v37 + 4 * v34);
                  *char v39 = 0;
                  char v32 = v39 + 1;
                  while (v31 != v33)
                  {
                    int v40 = *((_DWORD *)v31 - 1);
                    v31 -= 4;
                    *--char v39 = v40;
                  }
                  *((void *)this + 1) = v39;
                  *((void *)this + 2) = v32;
                  *((void *)this + 3) = v37 + 4 * v38;
                  if (v33) {
                    operator delete(v33);
                  }
                }
                else
                {
                  *(_DWORD *)char v31 = 0;
                  char v32 = v31 + 4;
                }
                *((void *)this + 2) = v32;
                unint64_t v41 = *((void *)a2 + 1);
                if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2))
                {
                  *((unsigned char *)a2 + 24) = 1;
                  break;
                }
                *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
                unint64_t v29 = *((void *)a2 + 2);
                unint64_t v28 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v28;
              }
              PB::Reader::recallMark();
            }
            else
            {
              float v52 = (char *)*((void *)this + 2);
              unint64_t v51 = *((void *)this + 3);
              if ((unint64_t)v52 >= v51)
              {
                float v54 = (char *)*((void *)this + 1);
                uint64_t v55 = (v52 - v54) >> 2;
                unint64_t v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 62) {
LABEL_103:
                }
                  sub_2570AFD0C();
                uint64_t v57 = v51 - (void)v54;
                if (v57 >> 1 > v56) {
                  unint64_t v56 = v57 >> 1;
                }
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v58 = v56;
                }
                if (v58)
                {
                  unint64_t v58 = (unint64_t)sub_2572C76F0(v58);
                  float v54 = (char *)*((void *)this + 1);
                  float v52 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v59 = 0;
                }
                uint64_t v60 = (_DWORD *)(v58 + 4 * v55);
                *uint64_t v60 = 0;
                uint64_t v53 = v60 + 1;
                while (v52 != v54)
                {
                  int v61 = *((_DWORD *)v52 - 1);
                  v52 -= 4;
                  *--uint64_t v60 = v61;
                }
                *((void *)this + 1) = v60;
                *((void *)this + 2) = v53;
                *((void *)this + 3) = v58 + 4 * v59;
                if (v54) {
                  operator delete(v54);
                }
              }
              else
              {
                *(_DWORD *)float v52 = 0;
                uint64_t v53 = v52 + 4;
              }
              *((void *)this + 2) = v53;
              unint64_t v62 = *((void *)a2 + 1);
              if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *((void *)a2 + 2))
              {
                *(v53 - 1) = *(_DWORD *)(*(void *)a2 + v62);
LABEL_98:
                *((void *)a2 + 1) += 4;
              }
              else
              {
LABEL_96:
                *((unsigned char *)a2 + 24) = 1;
              }
            }
LABEL_20:
            unint64_t v2 = *((void *)a2 + 1);
            unint64_t v3 = *((void *)a2 + 2);
            int v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0) {
              return v4 == 0;
            }
            continue;
          case 3u:
            *((unsigned char *)this + 44) |= 1u;
            unint64_t v42 = *((void *)a2 + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)a2 + 2)) {
              goto LABEL_96;
            }
            *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v42);
            goto LABEL_98;
          case 4u:
            *((unsigned char *)this + 44) |= 4u;
            unint64_t v43 = *((void *)a2 + 1);
            if (v43 >= *((void *)a2 + 2))
            {
              BOOL v46 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v44 = v43 + 1;
              int v45 = *(unsigned __int8 *)(*(void *)a2 + v43);
              *((void *)a2 + 1) = v44;
              BOOL v46 = v45 != 0;
            }
            *((unsigned char *)this + 40) = v46;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      int v4 = 0;
      return v4 == 0;
    }
    break;
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_25;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_20;
  }
  return 0;
}

uint64_t CMMsl::Skeleton2DJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 44) & 2) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  int v4 = *(float **)(v3 + 8);
  char v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  char v7 = *(unsigned char *)(v3 + 44);
  if (v7)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 32));
    char v7 = *(unsigned char *)(v3 + 44);
  }
  if ((v7 & 4) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::Skeleton2DJoint::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 8);
  unint64_t v2 = *(float **)(a1 + 16);
  int v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  BOOL v5 = (*(unsigned char *)(a2 + 44) & 4) == 0;
  if ((*(unsigned char *)(a1 + 44) & 4) != 0) {
    return (*(unsigned char *)(a2 + 44) & 4) != 0 && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
  }
  return v5;
}

uint64_t CMMsl::Skeleton2DJoint::hash_value(CMMsl::Skeleton2DJoint *this)
{
  if ((*((unsigned char *)this + 44) & 2) != 0) {
    uint64_t v2 = *((int *)this + 9);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  if (*((unsigned char *)this + 44))
  {
    float v6 = *((float *)this + 8);
    uint64_t v4 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v4 = 0;
    }
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v5 = 0;
    return v3 ^ v2 ^ v4 ^ v5;
  }
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v5 = *((unsigned __int8 *)this + 40);
  return v3 ^ v2 ^ v4 ^ v5;
}

void CMMsl::Skeleton3D::~Skeleton3D(CMMsl::Skeleton3D *this)
{
  *(void *)this = &unk_270644F58;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270644F58;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270644F58;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::Skeleton3D::Skeleton3D(void *this, const CMMsl::Skeleton3D *a2)
{
  this[1] = 0;
  *this = &unk_270644F58;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_2572830AC();
  }
  return this;
}

void sub_2572830AC()
{
}

void sub_2572831E4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3D::operator=(uint64_t a1, const CMMsl::Skeleton3D *a2)
{
  if ((const CMMsl::Skeleton3D *)a1 != a2)
  {
    CMMsl::Skeleton3D::Skeleton3D(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    float v6 = &unk_270644F58;
    char v9 = (void **)&v7;
    sub_2572C6D4C(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::Skeleton3D *a2, CMMsl::Skeleton3D *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::Skeleton3D::Skeleton3D(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644F58;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_270644F58;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::Skeleton3D::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v9 = &unk_270644F58;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_2572C6E0C((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    unint64_t v12 = (void **)&v10;
    char v9 = &unk_270644F58;
    sub_2572C6D4C(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3D::formatText(CMMsl::Skeleton3D *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "joint");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Skeleton3D::readFrom(CMMsl::Skeleton3D *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_2572836DC();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_2572836DC()
{
}

void sub_257283838(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3D::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    long long v5 = *v2++;
  return this;
}

BOOL sub_2572838B8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  long long v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = CMMsl::SkeletonJoint::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::Skeleton3D::hash_value(CMMsl::Skeleton3D *this)
{
  uint64_t v1 = (CMMsl::SkeletonJoint **)*((void *)this + 1);
  unint64_t v2 = (CMMsl::SkeletonJoint **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::SkeletonJoint::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::Skeleton3DLifted::~Skeleton3DLifted(CMMsl::Skeleton3DLifted *this)
{
  *(void *)this = &unk_270644F90;
  unint64_t v2 = (void **)((char *)this + 16);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270644F90;
  unint64_t v2 = (void **)((char *)this + 16);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270644F90;
  unint64_t v2 = (void **)((char *)this + 16);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::Skeleton3DLifted::Skeleton3DLifted(uint64_t this, const CMMsl::Skeleton3DLifted *a2)
{
  *(void *)this = &unk_270644F90;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 5);
    *(unsigned char *)(this + 48) |= 2u;
    *(void *)(this + 40) = v3;
    char v2 = *((unsigned char *)a2 + 48);
  }
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 48) |= 1u;
    *(void *)(this + 8) = v4;
  }
  return this;
}

void sub_257283CCC(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_2570AFA4C(a1);
}

uint64_t CMMsl::Skeleton3DLifted::operator=(uint64_t a1, const CMMsl::Skeleton3DLifted *a2)
{
  if ((const CMMsl::Skeleton3DLifted *)a1 != a2)
  {
    CMMsl::Skeleton3DLifted::Skeleton3DLifted((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    BOOL v9 = &unk_270644F90;
    unsigned int v15 = (void **)&v11;
    sub_2572C6D4C(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Skeleton3DLifted *a2, CMMsl::Skeleton3DLifted *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::Skeleton3DLifted::Skeleton3DLifted(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644F90;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  if (*(void *)(a1 + 16))
  {
    sub_2572C6DA0((void *)(a1 + 16));
    operator delete(*(void **)v4);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::Skeleton3DLifted::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::Skeleton3DLifted::Skeleton3DLifted((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    BOOL v9 = &unk_270644F90;
    unsigned int v15 = (void **)&v11;
    sub_2572C6D4C(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3DLifted::formatText(CMMsl::Skeleton3DLifted *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 48)) {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 2);
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "joint");
  }
  if ((*((unsigned char *)this + 48) & 2) != 0) {
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Skeleton3DLifted::readFrom(CMMsl::Skeleton3DLifted *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_21;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v21);
LABEL_33:
        *((void *)a2 + 1) += 8;
        goto LABEL_34;
      }
      if (v20 == 1) {
        operator new();
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
LABEL_34:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 48) |= 1u;
    unint64_t v22 = *((void *)a2 + 1);
    if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2))
    {
LABEL_31:
      *((unsigned char *)a2 + 24) = 1;
      goto LABEL_34;
    }
    *((void *)this + 1) = *(void *)(*(void *)a2 + v22);
    goto LABEL_33;
  }
  return v4 == 0;
}

void sub_257284400(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3DLifted::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base ***)(this + 16);
  uint64_t v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  char v7 = *(unsigned char *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
    char v7 = *(unsigned char *)(v3 + 48);
  }
  if (v7)
  {
    double v8 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v8);
  }
  return this;
}

uint64_t CMMsl::Skeleton3DLifted::hash_value(CMMsl::Skeleton3DLifted *this)
{
  unint64_t v2 = (CMMsl::Skeleton3DLiftedJoint **)*((void *)this + 2);
  uint64_t v3 = (CMMsl::Skeleton3DLiftedJoint **)*((void *)this + 3);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      v4 ^= CMMsl::Skeleton3DLiftedJoint::hash_value(v5);
    }
    while (v2 != v3);
  }
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
    double v6 = *((double *)this + 5);
    if (v6 == 0.0) {
      double v6 = 0.0;
    }
    if (*((unsigned char *)this + 48)) {
      goto LABEL_8;
    }
LABEL_14:
    double v7 = 0.0;
    return *(void *)&v6 ^ v4 ^ *(void *)&v7;
  }
  double v6 = 0.0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  double v7 = *((double *)this + 1);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  return *(void *)&v6 ^ v4 ^ *(void *)&v7;
}

double CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(CMMsl::Skeleton3DLiftedJoint *this)
{
  *(void *)this = &unk_270644FC8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270644FC8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint(CMMsl::Skeleton3DLiftedJoint *this)
{
  *(void *)this = &unk_270644FC8;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::Skeleton3DLiftedJoint *CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(CMMsl::Skeleton3DLiftedJoint *this, const CMMsl::Skeleton3DLiftedJoint *a2)
{
  *(void *)this = &unk_270644FC8;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v3 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((unsigned char *)a2 + 36))
  {
    int v4 = *((_DWORD *)a2 + 8);
    *((unsigned char *)this + 36) = 1;
    *((_DWORD *)this + 8) = v4;
  }
  if (this != a2) {
    sub_2572C75B4(v3, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::operator=(uint64_t a1, const CMMsl::Skeleton3DLiftedJoint *a2)
{
  if ((const CMMsl::Skeleton3DLiftedJoint *)a1 != a2)
  {
    CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint((CMMsl::Skeleton3DLiftedJoint *)v7, a2);
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint((CMMsl::Skeleton3DLiftedJoint *)v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::Skeleton3DLiftedJoint *a2, CMMsl::Skeleton3DLiftedJoint *a3)
{
  int v3 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  int v4 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  return this;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644FC8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(void *)a1 = &unk_270644FC8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v10 = &unk_270644FC8;
    uint64_t v3 = *(void *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v5 = *(void *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v5;
    uint64_t v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    long long v11 = v7;
    uint64_t v8 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    uint64_t v12 = v8;
    CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint((CMMsl::Skeleton3DLiftedJoint *)&v10);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::formatText(CMMsl::Skeleton3DLiftedJoint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 36)) {
    PB::TextFormatter::format(a2, "joint");
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "position", v7);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::Skeleton3DLiftedJoint::readFrom(CMMsl::Skeleton3DLiftedJoint *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v27 = *((void *)a2 + 1);
          unint64_t v28 = *((void *)a2 + 2);
          while (v27 < v28 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v30 = (char *)*((void *)this + 2);
            unint64_t v29 = *((void *)this + 3);
            if ((unint64_t)v30 >= v29)
            {
              char v32 = (char *)*((void *)this + 1);
              uint64_t v33 = (v30 - v32) >> 2;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62) {
                goto LABEL_98;
              }
              uint64_t v35 = v29 - (void)v32;
              if (v35 >> 1 > v34) {
                unint64_t v34 = v35 >> 1;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                unint64_t v36 = (unint64_t)sub_2572C76F0(v36);
                char v32 = (char *)*((void *)this + 1);
                unint64_t v30 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v37 = 0;
              }
              uint64_t v38 = (_DWORD *)(v36 + 4 * v33);
              *uint64_t v38 = 0;
              char v31 = v38 + 1;
              while (v30 != v32)
              {
                int v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *--uint64_t v38 = v39;
              }
              *((void *)this + 1) = v38;
              *((void *)this + 2) = v31;
              *((void *)this + 3) = v36 + 4 * v37;
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v30 = 0;
              char v31 = v30 + 4;
            }
            *((void *)this + 2) = v31;
            unint64_t v40 = *((void *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v31 - 1) = *(_DWORD *)(*(void *)a2 + v40);
            unint64_t v28 = *((void *)a2 + 2);
            unint64_t v27 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v27;
          }
          PB::Reader::recallMark();
        }
        else
        {
          BOOL v46 = (char *)*((void *)this + 2);
          unint64_t v45 = *((void *)this + 3);
          if ((unint64_t)v46 >= v45)
          {
            unsigned int v48 = (char *)*((void *)this + 1);
            uint64_t v49 = (v46 - v48) >> 2;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62) {
LABEL_98:
            }
              sub_2570AFD0C();
            uint64_t v51 = v45 - (void)v48;
            if (v51 >> 1 > v50) {
              unint64_t v50 = v51 >> 1;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              unint64_t v52 = (unint64_t)sub_2572C76F0(v52);
              unsigned int v48 = (char *)*((void *)this + 1);
              BOOL v46 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v53 = 0;
            }
            float v54 = (_DWORD *)(v52 + 4 * v49);
            *float v54 = 0;
            char v47 = v54 + 1;
            while (v46 != v48)
            {
              int v55 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *--float v54 = v55;
            }
            *((void *)this + 1) = v54;
            *((void *)this + 2) = v47;
            *((void *)this + 3) = v52 + 4 * v53;
            if (v48) {
              operator delete(v48);
            }
          }
          else
          {
            *(_DWORD *)BOOL v46 = 0;
            char v47 = v46 + 4;
          }
          *((void *)this + 2) = v47;
          unint64_t v56 = *((void *)a2 + 1);
          if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *((void *)a2 + 2))
          {
            *(v47 - 1) = *(_DWORD *)(*(void *)a2 + v56);
            *((void *)a2 + 1) += 4;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v20 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v20)
        {
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v24 = 0;
          if (v20 <= v19) {
            unint64_t v20 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v20 == v19)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_76;
            }
            unint64_t v43 = v19 + 1;
            char v44 = *(unsigned char *)(v21 + v19);
            *((void *)a2 + 1) = v43;
            v24 |= (unint64_t)(v44 & 0x7F) << v41;
            if ((v44 & 0x80) == 0) {
              break;
            }
            v41 += 7;
            unint64_t v19 = v43;
            BOOL v14 = v42++ > 8;
            if (v14)
            {
LABEL_62:
              LODWORD(v24) = 0;
              goto LABEL_76;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v25 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v26 = *(unsigned char *)(v21 + v19);
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v19 = v25;
            BOOL v14 = v23++ > 8;
            if (v14) {
              goto LABEL_62;
            }
          }
        }
LABEL_76:
        *((_DWORD *)this + 8) = v24;
      }
      else
      {
LABEL_30:
        if ((PB::Reader::skip(a2) & 1) == 0) {
          return 0;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 36)) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v5 = *(float **)(v3 + 8);
  int v4 = *(float **)(v3 + 16);
  while (v5 != v4)
  {
    float v6 = *v5++;
    this = PB::Writer::write(a2, v6);
  }
  return this;
}

BOOL CMMsl::Skeleton3DLiftedJoint::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  int v4 = *(float **)(a2 + 8);
  if (v2 - v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 4;
  do
  {
    float v6 = *v4++;
    BOOL result = *(float *)(v5 - 4) == v6;
    BOOL v8 = *(float *)(v5 - 4) != v6 || v5 == v2;
    v5 += 4;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::hash_value(CMMsl::Skeleton3DLiftedJoint *this)
{
  if (*((unsigned char *)this + 36)) {
    uint64_t v1 = *((int *)this + 8);
  }
  else {
    uint64_t v1 = 0;
  }
  return PBHashBytes() ^ v1;
}

void CMMsl::Skeleton3DRetargeted::~Skeleton3DRetargeted(CMMsl::Skeleton3DRetargeted *this)
{
  *(void *)this = &unk_270645000;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270645000;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270645000;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted(uint64_t this, const CMMsl::Skeleton3DRetargeted *a2)
{
  *(void *)this = &unk_270645000;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    sub_2572830AC();
  }
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 5);
    *(unsigned char *)(this + 48) |= 2u;
    *(void *)(this + 40) = v3;
    char v2 = *((unsigned char *)a2 + 48);
  }
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 48) |= 1u;
    *(void *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::Skeleton3DRetargeted::operator=(uint64_t a1, const CMMsl::Skeleton3DRetargeted *a2)
{
  if ((const CMMsl::Skeleton3DRetargeted *)a1 != a2)
  {
    CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    char v9 = &unk_270645000;
    char v15 = (void **)&v11;
    sub_2572C6D4C(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Skeleton3DRetargeted *a2, CMMsl::Skeleton3DRetargeted *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645000;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  sub_2572C6E0C((void **)(a1 + 16));
  *uint64_t v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::Skeleton3DRetargeted::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    char v9 = &unk_270645000;
    char v15 = (void **)&v11;
    sub_2572C6D4C(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3DRetargeted::formatText(CMMsl::Skeleton3DRetargeted *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 48)) {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 2);
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "joint");
  }
  if ((*((unsigned char *)this + 48) & 2) != 0) {
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Skeleton3DRetargeted::readFrom(CMMsl::Skeleton3DRetargeted *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_21;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v22);
LABEL_33:
        *((void *)a2 + 1) += 8;
        goto LABEL_34;
      }
      if (v20 == 1) {
        sub_2572836DC();
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
LABEL_34:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 48) |= 1u;
    unint64_t v21 = *((void *)a2 + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
    {
LABEL_31:
      *((unsigned char *)a2 + 24) = 1;
      goto LABEL_34;
    }
    *((void *)this + 1) = *(void *)(*(void *)a2 + v21);
    goto LABEL_33;
  }
  return v4 == 0;
}

uint64_t CMMsl::Skeleton3DRetargeted::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base ***)(this + 16);
  uint64_t v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  char v7 = *(unsigned char *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
    char v7 = *(unsigned char *)(v3 + 48);
  }
  if (v7)
  {
    double v8 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v8);
  }
  return this;
}

uint64_t CMMsl::Skeleton3DRetargeted::hash_value(CMMsl::Skeleton3DRetargeted *this)
{
  unint64_t v2 = (CMMsl::SkeletonJoint **)*((void *)this + 2);
  uint64_t v3 = (CMMsl::SkeletonJoint **)*((void *)this + 3);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      v4 ^= CMMsl::SkeletonJoint::hash_value(v5);
    }
    while (v2 != v3);
  }
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
    double v6 = *((double *)this + 5);
    if (v6 == 0.0) {
      double v6 = 0.0;
    }
    if (*((unsigned char *)this + 48)) {
      goto LABEL_8;
    }
LABEL_14:
    double v7 = 0.0;
    return *(void *)&v6 ^ v4 ^ *(void *)&v7;
  }
  double v6 = 0.0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  double v7 = *((double *)this + 1);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  return *(void *)&v6 ^ v4 ^ *(void *)&v7;
}

double CMMsl::SkeletonJoint::SkeletonJoint(CMMsl::SkeletonJoint *this)
{
  *(void *)this = &unk_270645038;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_270645038;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  return result;
}

void CMMsl::SkeletonJoint::~SkeletonJoint(CMMsl::SkeletonJoint *this)
{
  *(void *)this = &unk_270645038;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::SkeletonJoint::~SkeletonJoint(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::SkeletonJoint *CMMsl::SkeletonJoint::SkeletonJoint(CMMsl::SkeletonJoint *this, const CMMsl::SkeletonJoint *a2)
{
  *(void *)this = &unk_270645038;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  if (*((unsigned char *)a2 + 60))
  {
    int v5 = *((_DWORD *)a2 + 14);
    *((unsigned char *)this + 60) = 1;
    *((_DWORD *)this + 14) = v5;
  }
  if (this != a2)
  {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  return this;
}

uint64_t CMMsl::SkeletonJoint::operator=(uint64_t a1, const CMMsl::SkeletonJoint *a2)
{
  if ((const CMMsl::SkeletonJoint *)a1 != a2)
  {
    CMMsl::SkeletonJoint::SkeletonJoint((CMMsl::SkeletonJoint *)&v8, a2);
    uint64_t v3 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v12;
    uint64_t v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v6;
    CMMsl::SkeletonJoint::~SkeletonJoint((CMMsl::SkeletonJoint *)&v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SkeletonJoint *a2, CMMsl::SkeletonJoint *a3)
{
  int v3 = *(_DWORD *)(this + 60);
  *(_DWORD *)(this + 60) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  int v4 = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  return this;
}

uint64_t CMMsl::SkeletonJoint::SkeletonJoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645038;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::SkeletonJoint::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::SkeletonJoint::SkeletonJoint((uint64_t)&v8, a2);
    uint64_t v3 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v12;
    uint64_t v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v6;
    CMMsl::SkeletonJoint::~SkeletonJoint((CMMsl::SkeletonJoint *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SkeletonJoint::formatText(CMMsl::SkeletonJoint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 60)) {
    PB::TextFormatter::format(a2, "joint");
  }
  long long v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "position", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  long long v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "quaternion", v10);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::SkeletonJoint::readFrom(CMMsl::SkeletonJoint *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
        if (v14) {
          goto LABEL_31;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_31;
      }
    }
LABEL_20:
    int v19 = v11 & 7;
    if (v19 == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      if (v19 != 2)
      {
        uint64_t v63 = (char *)*((void *)this + 5);
        unint64_t v62 = *((void *)this + 6);
        if ((unint64_t)v63 >= v62)
        {
          uint64_t v67 = (char *)*((void *)this + 4);
          uint64_t v68 = (v63 - v67) >> 2;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62) {
            goto LABEL_140;
          }
          uint64_t v70 = v62 - (void)v67;
          if (v70 >> 1 > v69) {
            unint64_t v69 = v70 >> 1;
          }
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71)
          {
            unint64_t v71 = (unint64_t)sub_2572C76F0(v71);
            uint64_t v67 = (char *)*((void *)this + 4);
            uint64_t v63 = (char *)*((void *)this + 5);
          }
          else
          {
            uint64_t v72 = 0;
          }
          unint64_t v79 = (_DWORD *)(v71 + 4 * v68);
          *unint64_t v79 = 0;
          uint64_t v64 = v79 + 1;
          while (v63 != v67)
          {
            int v80 = *((_DWORD *)v63 - 1);
            v63 -= 4;
            *--unint64_t v79 = v80;
          }
          *((void *)this + 4) = v79;
          *((void *)this + 5) = v64;
          *((void *)this + 6) = v71 + 4 * v72;
          if (v67) {
            operator delete(v67);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v63 = 0;
          uint64_t v64 = v63 + 4;
        }
        *((void *)this + 5) = v64;
LABEL_132:
        unint64_t v83 = *((void *)a2 + 1);
        if (v83 <= 0xFFFFFFFFFFFFFFFBLL && v83 + 4 <= *((void *)a2 + 2))
        {
          *(v64 - 1) = *(_DWORD *)(*(void *)a2 + v83);
          *((void *)a2 + 1) += 4;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_32;
      }
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v30 = *((void *)a2 + 1);
      unint64_t v31 = *((void *)a2 + 2);
      while (v30 < v31 && !*((unsigned char *)a2 + 24))
      {
        uint64_t v33 = (char *)*((void *)this + 5);
        unint64_t v32 = *((void *)this + 6);
        if ((unint64_t)v33 >= v32)
        {
          uint64_t v35 = (char *)*((void *)this + 4);
          uint64_t v36 = (v33 - v35) >> 2;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62) {
            goto LABEL_140;
          }
          uint64_t v38 = v32 - (void)v35;
          if (v38 >> 1 > v37) {
            unint64_t v37 = v38 >> 1;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            unint64_t v39 = (unint64_t)sub_2572C76F0(v39);
            uint64_t v35 = (char *)*((void *)this + 4);
            uint64_t v33 = (char *)*((void *)this + 5);
          }
          else
          {
            uint64_t v40 = 0;
          }
          char v41 = (_DWORD *)(v39 + 4 * v36);
          *char v41 = 0;
          unint64_t v34 = v41 + 1;
          while (v33 != v35)
          {
            int v42 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *--char v41 = v42;
          }
          *((void *)this + 4) = v41;
          *((void *)this + 5) = v34;
          *((void *)this + 6) = v39 + 4 * v40;
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v33 = 0;
          unint64_t v34 = v33 + 4;
        }
        *((void *)this + 5) = v34;
        unint64_t v43 = *((void *)a2 + 1);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)a2 + 2))
        {
LABEL_96:
          *((unsigned char *)a2 + 24) = 1;
          break;
        }
        *(v34 - 1) = *(_DWORD *)(*(void *)a2 + v43);
        unint64_t v31 = *((void *)a2 + 2);
        unint64_t v30 = *((void *)a2 + 1) + 4;
        *((void *)a2 + 1) = v30;
      }
    }
    else
    {
      if (v20 != 2)
      {
        if (v20 == 1)
        {
          *((unsigned char *)this + 60) |= 1u;
          unint64_t v21 = *((void *)a2 + 1);
          unint64_t v22 = *((void *)a2 + 2);
          uint64_t v23 = *(void *)a2;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
          {
            char v58 = 0;
            unsigned int v59 = 0;
            uint64_t v26 = 0;
            if (v22 <= v21) {
              unint64_t v22 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v22 == v21)
              {
                LODWORD(v26) = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_117;
              }
              unint64_t v60 = v21 + 1;
              char v61 = *(unsigned char *)(v23 + v21);
              *((void *)a2 + 1) = v60;
              v26 |= (unint64_t)(v61 & 0x7F) << v58;
              if ((v61 & 0x80) == 0) {
                break;
              }
              v58 += 7;
              unint64_t v21 = v60;
              BOOL v14 = v59++ > 8;
              if (v14)
              {
LABEL_91:
                LODWORD(v26) = 0;
                goto LABEL_117;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v26) = 0;
            }
          }
          else
          {
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            while (1)
            {
              unint64_t v27 = v21 + 1;
              *((void *)a2 + 1) = v21 + 1;
              char v28 = *(unsigned char *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0) {
                break;
              }
              v24 += 7;
              unint64_t v21 = v27;
              BOOL v14 = v25++ > 8;
              if (v14) {
                goto LABEL_91;
              }
            }
          }
LABEL_117:
          *((_DWORD *)this + 14) = v26;
        }
        else
        {
LABEL_31:
          if ((PB::Reader::skip(a2) & 1) == 0) {
            return 0;
          }
        }
        goto LABEL_32;
      }
      if (v19 != 2)
      {
        uint64_t v66 = (char *)*((void *)this + 2);
        unint64_t v65 = *((void *)this + 3);
        if ((unint64_t)v66 >= v65)
        {
          uint64_t v73 = (char *)*((void *)this + 1);
          uint64_t v74 = (v66 - v73) >> 2;
          unint64_t v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62) {
LABEL_140:
          }
            sub_2570AFD0C();
          uint64_t v76 = v65 - (void)v73;
          if (v76 >> 1 > v75) {
            unint64_t v75 = v76 >> 1;
          }
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v77 = v75;
          }
          if (v77)
          {
            unint64_t v77 = (unint64_t)sub_2572C76F0(v77);
            uint64_t v73 = (char *)*((void *)this + 1);
            uint64_t v66 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v78 = 0;
          }
          unint64_t v81 = (_DWORD *)(v77 + 4 * v74);
          *unint64_t v81 = 0;
          uint64_t v64 = v81 + 1;
          while (v66 != v73)
          {
            int v82 = *((_DWORD *)v66 - 1);
            v66 -= 4;
            *--unint64_t v81 = v82;
          }
          *((void *)this + 1) = v81;
          *((void *)this + 2) = v64;
          *((void *)this + 3) = v77 + 4 * v78;
          if (v73) {
            operator delete(v73);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v66 = 0;
          uint64_t v64 = v66 + 4;
        }
        *((void *)this + 2) = v64;
        goto LABEL_132;
      }
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v44 = *((void *)a2 + 1);
      unint64_t v45 = *((void *)a2 + 2);
      while (v44 < v45 && !*((unsigned char *)a2 + 24))
      {
        char v47 = (char *)*((void *)this + 2);
        unint64_t v46 = *((void *)this + 3);
        if ((unint64_t)v47 >= v46)
        {
          uint64_t v49 = (char *)*((void *)this + 1);
          uint64_t v50 = (v47 - v49) >> 2;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62) {
            goto LABEL_140;
          }
          uint64_t v52 = v46 - (void)v49;
          if (v52 >> 1 > v51) {
            unint64_t v51 = v52 >> 1;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            unint64_t v53 = (unint64_t)sub_2572C76F0(v53);
            uint64_t v49 = (char *)*((void *)this + 1);
            char v47 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v54 = 0;
          }
          int v55 = (_DWORD *)(v53 + 4 * v50);
          *int v55 = 0;
          unsigned int v48 = v55 + 1;
          while (v47 != v49)
          {
            int v56 = *((_DWORD *)v47 - 1);
            v47 -= 4;
            *--int v55 = v56;
          }
          *((void *)this + 1) = v55;
          *((void *)this + 2) = v48;
          *((void *)this + 3) = v53 + 4 * v54;
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *(_DWORD *)char v47 = 0;
          unsigned int v48 = v47 + 4;
        }
        *((void *)this + 2) = v48;
        unint64_t v57 = *((void *)a2 + 1);
        if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)a2 + 2)) {
          goto LABEL_96;
        }
        *(v48 - 1) = *(_DWORD *)(*(void *)a2 + v57);
        unint64_t v45 = *((void *)a2 + 2);
        unint64_t v44 = *((void *)a2 + 1) + 4;
        *((void *)a2 + 1) = v44;
      }
    }
    PB::Reader::recallMark();
LABEL_32:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::SkeletonJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 60)) {
    this = PB::Writer::writeVarInt(a2);
  }
  long long v4 = (float *)v3[1];
  long long v5 = (float *)v3[2];
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  uint64_t v8 = (float *)v3[4];
  float v7 = (float *)v3[5];
  while (v8 != v7)
  {
    float v9 = *v8++;
    this = PB::Writer::write(a2, v9);
  }
  return this;
}

BOOL CMMsl::SkeletonJoint::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 60))
  {
    if ((*(unsigned char *)(a2 + 60) & 1) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 60))
  {
    return 0;
  }
  unint64_t v3 = *(float **)(a1 + 8);
  unint64_t v2 = *(float **)(a1 + 16);
  long long v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  float v7 = *(float **)(a2 + 32);
  if (v5 - v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 4;
  do
  {
    float v9 = *v7++;
    BOOL result = *(float *)(v8 - 4) == v9;
    BOOL v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::SkeletonJoint::hash_value(CMMsl::SkeletonJoint *this)
{
  if (*((unsigned char *)this + 60)) {
    uint64_t v1 = *((int *)this + 14);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

void CMMsl::SoundPressureLevel::~SoundPressureLevel(CMMsl::SoundPressureLevel *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t this, const CMMsl::SoundPressureLevel *a2)
{
  *(void *)this = &unk_270645070;
  *(_DWORD *)(this + 20) = 0;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = 2;
    *(_DWORD *)(this + 16) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 1) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 20))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = v2;
    *(void *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::SoundPressureLevel::operator=(uint64_t a1, const CMMsl::SoundPressureLevel *a2)
{
  if ((const CMMsl::SoundPressureLevel *)a1 != a2)
  {
    CMMsl::SoundPressureLevel::SoundPressureLevel((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v3;
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SoundPressureLevel *a2, CMMsl::SoundPressureLevel *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return result;
}

float CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645070;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270645070;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t CMMsl::SoundPressureLevel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    int v4 = *(_DWORD *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v12 = v6;
    int v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    int v11 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v5;
    v10[0] = &unk_270645070;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::SoundPressureLevel::formatText(CMMsl::SoundPressureLevel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "rms", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SoundPressureLevel::readFrom(CMMsl::SoundPressureLevel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((void *)this + 1) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SoundPressureLevel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::SoundPressureLevel::hash_value(CMMsl::SoundPressureLevel *this)
{
  if ((*((unsigned char *)this + 20) & 2) != 0)
  {
    float v3 = *((float *)this + 4);
    uint64_t v1 = LODWORD(v3);
    if (v3 == 0.0) {
      uint64_t v1 = 0;
    }
    if (*((unsigned char *)this + 20)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((void *)this + 1);
  return v2 ^ v1;
}

void CMMsl::SpatialEvent::~SpatialEvent(CMMsl::SpatialEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::SpatialEvent::SpatialEvent(CMMsl::SpatialEvent *this, const CMMsl::SpatialEvent *a2)
{
  *(void *)this = &unk_2706450A8;
  *((void *)this + 2) = 0;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 4);
    *((unsigned char *)this + 20) = 2;
    *((_DWORD *)this + 4) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 20))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 20) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

const CMMsl::SpatialEvent *CMMsl::SpatialEvent::operator=(const CMMsl::SpatialEvent *a1, const CMMsl::SpatialEvent *a2)
{
  if (a1 != a2)
  {
    CMMsl::SpatialEvent::SpatialEvent((CMMsl::SpatialEvent *)v7, a2);
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v3 = *((void *)a1 + 2);
    uint64_t v5 = v9;
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v5;
    uint64_t v8 = v4;
    uint64_t v9 = v3;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SpatialEvent *a2, CMMsl::SpatialEvent *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  int v4 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SpatialEvent::SpatialEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706450A8;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706450A8;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SpatialEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = &unk_2706450A8;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v6;
    void v8[2] = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SpatialEvent::formatText(CMMsl::SpatialEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "event");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SpatialEvent::readFrom(CMMsl::SpatialEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SpatialEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

uint64_t CMMsl::SpatialEvent::hash_value(CMMsl::SpatialEvent *this)
{
  if ((*((unsigned char *)this + 20) & 2) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 20)) {
      goto LABEL_3;
    }
LABEL_7:
    double v2 = 0.0;
    return *(void *)&v2 ^ v1;
  }
  uint64_t v1 = *((int *)this + 4);
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ v1;
}

void CMMsl::SteadinessEvent::~SteadinessEvent(CMMsl::SteadinessEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::SteadinessEvent::SteadinessEvent(CMMsl::SteadinessEvent *this, const CMMsl::SteadinessEvent *a2)
{
  *(void *)this = &unk_2706450E0;
  *((_DWORD *)this + 15) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    __int16 v3 = 8;
    *((_WORD *)this + 30) = 8;
    *((double *)this + 4) = result;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 12);
    v3 |= 0x20u;
    *((_WORD *)this + 30) = v3;
    *((_DWORD *)this + 12) = v5;
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    char v6 = *((unsigned char *)a2 + 55);
    v3 |= 0x200u;
    *((_WORD *)this + 30) = v3;
    *((unsigned char *)this + 55) = v6;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 56);
  v3 |= 0x400u;
  *((_WORD *)this + 30) = v3;
  *((unsigned char *)this + 56) = v7;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v8 = *((unsigned char *)a2 + 52);
  v3 |= 0x40u;
  *((_WORD *)this + 30) = v3;
  *((unsigned char *)this + 52) = v8;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  char v9 = *((unsigned char *)a2 + 53);
  v3 |= 0x80u;
  *((_WORD *)this + 30) = v3;
  *((unsigned char *)this + 53) = v9;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  char v10 = *((unsigned char *)a2 + 54);
  v3 |= 0x100u;
  *((_WORD *)this + 30) = v3;
  *((unsigned char *)this + 54) = v10;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 30) = v3;
  *((double *)this + 2) = result;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 30) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_24:
    double result = *((double *)a2 + 5);
    *((_WORD *)this + 30) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_23:
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 30) = v3;
  *((double *)this + 3) = result;
  if ((*((_WORD *)a2 + 30) & 0x10) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::SteadinessEvent::operator=(CMMsl *a1, const CMMsl::SteadinessEvent *a2)
{
  if (a1 != a2)
  {
    CMMsl::SteadinessEvent::SteadinessEvent((CMMsl::SteadinessEvent *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessEvent *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessEvent *a2, CMMsl::SteadinessEvent *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 55);
  *((unsigned char *)this + 55) = *((unsigned char *)a2 + 55);
  *((unsigned char *)a2 + 55) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 52);
  *((unsigned char *)this + 52) = *((unsigned char *)a2 + 52);
  *((unsigned char *)a2 + 52) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 53);
  *((unsigned char *)this + 53) = *((unsigned char *)a2 + 53);
  *((unsigned char *)a2 + 53) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 54);
  *((unsigned char *)this + 54) = *((unsigned char *)a2 + 54);
  *((unsigned char *)a2 + 54) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::SteadinessEvent::SteadinessEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706450E0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 55) = *(unsigned char *)(a2 + 55);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 53);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::SteadinessEvent::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessEvent::SteadinessEvent((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessEvent *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessEvent::formatText(CMMsl::SteadinessEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "isBlockoutPeriodLow");
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isBlockoutPeriodVeryLow");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "isSampleRecent");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "percentLow", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "percentOK", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "percentVeryLow", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "totalValidDuration", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "userHasOnboarded");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "value");
  if ((*((_WORD *)this + 30) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "writtenToHealthKit");
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SteadinessEvent::readFrom(CMMsl::SteadinessEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_79;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 30) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 2u:
        *((_WORD *)this + 30) |= 0x20u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_78;
            }
            unint64_t v38 = v20++;
            char v39 = *(unsigned char *)(v21 + v38);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_77:
              unint64_t v2 = v38 + 1;
              goto LABEL_78;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_77;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_78;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_78:
        *((_DWORD *)this + 12) = v24;
        break;
      case 3u:
        *((_WORD *)this + 30) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 55) = v27;
        break;
      case 4u:
        *((_WORD *)this + 30) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 56) = v29;
        break;
      case 5u:
        *((_WORD *)this + 30) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v31 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v30 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v31 = v30 != 0;
        }
        *((unsigned char *)this + 52) = v31;
        break;
      case 6u:
        *((_WORD *)this + 30) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v33 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v33 = v32 != 0;
        }
        *((unsigned char *)this + 53) = v33;
        break;
      case 7u:
        *((_WORD *)this + 30) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v35 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v34 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v35 = v34 != 0;
        }
        *((unsigned char *)this + 54) = v35;
        break;
      case 8u:
        *((_WORD *)this + 30) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 9u:
        *((_WORD *)this + 30) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 0xAu:
        *((_WORD *)this + 30) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 0xBu:
        *((_WORD *)this + 30) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
LABEL_73:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_54:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_79:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(double *)(v3 + 24));
    if ((*(_WORD *)(v3 + 60) & 0x10) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 40);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::SteadinessEvent::hash_value(CMMsl::SteadinessEvent *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 8) != 0)
  {
    double v2 = *((double *)this + 4);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 12);
      if ((*((_WORD *)this + 30) & 0x200) != 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((_WORD *)this + 30) & 0x200) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned __int8 *)this + 55);
    if ((*((_WORD *)this + 30) & 0x400) != 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v4 = 0;
  if ((*((_WORD *)this + 30) & 0x400) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned __int8 *)this + 56);
    if ((v1 & 0x40) != 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v5 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_6:
    uint64_t v6 = *((unsigned __int8 *)this + 52);
    if ((v1 & 0x80) != 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v6 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_7:
    uint64_t v7 = *((unsigned __int8 *)this + 53);
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 30) & 0x100) != 0)
  {
LABEL_8:
    uint64_t v8 = *((unsigned __int8 *)this + 54);
    if ((v1 & 2) != 0) {
      goto LABEL_9;
    }
LABEL_30:
    double v9 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_31:
    double v10 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v8 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_30;
  }
LABEL_9:
  double v9 = *((double *)this + 2);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_12:
  double v10 = *((double *)this + 1);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_15:
    double v11 = *((double *)this + 3);
    if (v11 == 0.0) {
      double v11 = 0.0;
    }
    if ((v1 & 0x10) != 0) {
      goto LABEL_18;
    }
LABEL_33:
    double v12 = 0.0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12;
  }
LABEL_32:
  double v11 = 0.0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_33;
  }
LABEL_18:
  double v12 = *((double *)this + 5);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12;
}

void CMMsl::SteadinessModelBalanceFeatures::~SteadinessModelBalanceFeatures(CMMsl::SteadinessModelBalanceFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures(CMMsl::SteadinessModelBalanceFeatures *this, const CMMsl::SteadinessModelBalanceFeatures *a2)
{
  *(void *)this = &unk_270645118;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    char v3 = 2;
    *((unsigned char *)this + 40) = 2;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 40))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 4);
    *((unsigned char *)this + 40) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((unsigned char *)this + 40) = v3;
  *((double *)this + 3) = result;
  if ((*((unsigned char *)a2 + 40) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::operator=(uint64_t a1, const CMMsl::SteadinessModelBalanceFeatures *a2)
{
  if ((const CMMsl::SteadinessModelBalanceFeatures *)a1 != a2)
  {
    CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures((CMMsl::SteadinessModelBalanceFeatures *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelBalanceFeatures *a2, CMMsl::SteadinessModelBalanceFeatures *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645118;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645118;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_270645118;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v11 = *(_DWORD *)(a1 + 40);
    long long v4 = *(_OWORD *)(a2 + 8);
    long long v9 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a1 + 24);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 24) = v6;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::formatText(CMMsl::SteadinessModelBalanceFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "intermediateBoutsAsymmetryPercentageCv", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "intermediateBoutsAsymmetryPercentageMedian", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "intermediateBoutsDoubleSupportPercentageMedian", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "intermediateBoutsDoubleSupportPercentageStd", *((double *)this + 4));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::readFrom(CMMsl::SteadinessModelBalanceFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_37;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 24));
      if ((*(unsigned char *)(v3 + 40) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 32);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::hash_value(CMMsl::SteadinessModelBalanceFeatures *this)
{
  if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 40)) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 2);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 4) != 0)
  {
LABEL_6:
    double v3 = *((double *)this + 3);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v4 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
  }
LABEL_16:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v4 = *((double *)this + 4);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
}

void CMMsl::SteadinessModelContinuousWalkingFeatures::~SteadinessModelContinuousWalkingFeatures(CMMsl::SteadinessModelContinuousWalkingFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures(CMMsl::SteadinessModelContinuousWalkingFeatures *this, const CMMsl::SteadinessModelContinuousWalkingFeatures *a2)
{
  *(void *)this = &unk_270645150;
  *((_DWORD *)this + 44) = 0;
  int v2 = *((_DWORD *)a2 + 44);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 44) = 1;
    *((double *)this + 1) = result;
    int v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 2) = result;
    int v2 = *((_DWORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 3) = result;
    int v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 11) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  double result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 12) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  double result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }
LABEL_38:
  double result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 18) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_40;
  }
LABEL_39:
  double result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x8000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_41;
  }
LABEL_40:
  double result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_42;
  }
LABEL_41:
  double result = *((double *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_43;
  }
LABEL_42:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000) == 0) {
      return result;
    }
LABEL_44:
    double result = *((double *)a2 + 13);
    *((_DWORD *)this + 44) = v3 | 0x1000;
    *((double *)this + 13) = result;
    return result;
  }
LABEL_43:
  double result = *((double *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 17) = result;
  if ((*((_DWORD *)a2 + 44) & 0x1000) != 0) {
    goto LABEL_44;
  }
  return result;
}

CMMsl *CMMsl::SteadinessModelContinuousWalkingFeatures::operator=(CMMsl *a1, const CMMsl::SteadinessModelContinuousWalkingFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures((CMMsl::SteadinessModelContinuousWalkingFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelContinuousWalkingFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelContinuousWalkingFeatures *a2, CMMsl::SteadinessModelContinuousWalkingFeatures *a3)
{
  int v3 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v7;
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  uint64_t v12 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v12;
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
  uint64_t v14 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v15;
  uint64_t v16 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v16;
  uint64_t v17 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v17;
  uint64_t v18 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v18;
  uint64_t v19 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v19;
  uint64_t v20 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v20;
  uint64_t v21 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v21;
  uint64_t v22 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v22;
  uint64_t v23 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v23;
  double result = *((double *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((double *)a2 + 13) = result;
  return result;
}

double CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645150;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  double result = *(double *)(a2 + 104);
  *(double *)(a1 + 104) = result;
  return result;
}

CMMsl *CMMsl::SteadinessModelContinuousWalkingFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelContinuousWalkingFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::formatText(CMMsl::SteadinessModelContinuousWalkingFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "allBoutsBoutDurationSecCv", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "allBoutsBoutDurationSecMedian", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "allBoutsCycleTimeCv", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "intermediateBoutsCycleTimeCv", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "intermediateBoutsCycleTimeMedian", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "intermediateBoutsDoubleSupportPercentageMedian", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthCv", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthMedian", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthMedianHeightnorm", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedCv", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedMedian", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedMedianSqrtheightnorm", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "longBoutsWalkingSpeedCountRatioLog", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "shortBoutsCycleTimeCv", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "shortBoutsCycleTimeMedian", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "shortBoutsDoubleSupportPercentageMedian", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "shortBoutsStepLengthCv", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "shortBoutsStepLengthMedianHeightnorm", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "shortBoutsWalkingSpeedCv", *((double *)this + 19));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "shortBoutsWalkingSpeedMedian", *((double *)this + 20));
  if ((*((_DWORD *)this + 44) & 0x100000) != 0) {
LABEL_22:
  }
    PB::TextFormatter::format(a2, "shortBoutsWalkingSpeedMedianSqrtheightnorm", *((double *)this + 21));
LABEL_23:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::readFrom(CMMsl::SteadinessModelContinuousWalkingFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_88;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 2u:
        *((_DWORD *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 3u:
        *((_DWORD *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 4u:
        *((_DWORD *)this + 44) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 5u:
        *((_DWORD *)this + 44) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 6u:
        *((_DWORD *)this + 44) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 7u:
        *((_DWORD *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 8u:
        *((_DWORD *)this + 44) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 9u:
        *((_DWORD *)this + 44) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xAu:
        *((_DWORD *)this + 44) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xBu:
        *((_DWORD *)this + 44) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xCu:
        *((_DWORD *)this + 44) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xDu:
        *((_DWORD *)this + 44) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xEu:
        *((_DWORD *)this + 44) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xFu:
        *((_DWORD *)this + 44) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0x10u:
        *((_DWORD *)this + 44) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0x11u:
        *((_DWORD *)this + 44) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0x12u:
        *((_DWORD *)this + 44) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0x13u:
        *((_DWORD *)this + 44) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0x14u:
        *((_DWORD *)this + 44) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_85;
        }
        *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0x15u:
        *((_DWORD *)this + 44) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_85:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
LABEL_87:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_88:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 176);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    int v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
LABEL_42:
    this = PB::Writer::write(a2, *(double *)(v3 + 136));
    if ((*(_DWORD *)(v3 + 176) & 0x1000) == 0) {
      return this;
    }
    goto LABEL_43;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_42;
  }
LABEL_21:
  if ((v4 & 0x1000) == 0) {
    return this;
  }
LABEL_43:
  double v5 = *(double *)(v3 + 104);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::hash_value(CMMsl::SteadinessModelContinuousWalkingFeatures *this)
{
  int v1 = *((_DWORD *)this + 44);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_66:
    double v3 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_67:
    double v4 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_9;
    }
LABEL_68:
    double v5 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_69:
    double v6 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_15;
    }
LABEL_70:
    double v7 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_18;
    }
LABEL_71:
    double v8 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_21;
    }
LABEL_72:
    double v9 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_24;
    }
LABEL_73:
    double v10 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_27;
    }
LABEL_74:
    double v11 = 0.0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_30;
    }
LABEL_75:
    double v12 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_33;
    }
LABEL_76:
    double v13 = 0.0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_36;
    }
LABEL_77:
    double v14 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_39;
    }
LABEL_78:
    double v15 = 0.0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_42;
    }
LABEL_79:
    double v16 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_45;
    }
LABEL_80:
    double v17 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_48;
    }
LABEL_81:
    double v18 = 0.0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_51;
    }
LABEL_82:
    double v19 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_54;
    }
LABEL_83:
    double v20 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_57;
    }
    goto LABEL_84;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_66;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_67;
  }
LABEL_6:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_68;
  }
LABEL_9:
  double v5 = *((double *)this + 11);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_69;
  }
LABEL_12:
  double v6 = *((double *)this + 10);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_70;
  }
LABEL_15:
  double v7 = *((double *)this + 5);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_71;
  }
LABEL_18:
  double v8 = *((double *)this + 4);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_72;
  }
LABEL_21:
  double v9 = *((double *)this + 8);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_73;
  }
LABEL_24:
  double v10 = *((double *)this + 7);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_74;
  }
LABEL_27:
  double v11 = *((double *)this + 6);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_75;
  }
LABEL_30:
  double v12 = *((double *)this + 12);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_76;
  }
LABEL_33:
  double v13 = *((double *)this + 9);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_77;
  }
LABEL_36:
  double v14 = *((double *)this + 20);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_78;
  }
LABEL_39:
  double v15 = *((double *)this + 21);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_79;
  }
LABEL_42:
  double v16 = *((double *)this + 18);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_80;
  }
LABEL_45:
  double v17 = *((double *)this + 15);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_81;
  }
LABEL_48:
  double v18 = *((double *)this + 16);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_82;
  }
LABEL_51:
  double v19 = *((double *)this + 19);
  if (v19 == 0.0) {
    double v19 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_83;
  }
LABEL_54:
  double v20 = *((double *)this + 14);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_57:
    double v21 = *((double *)this + 17);
    if (v21 == 0.0) {
      double v21 = 0.0;
    }
    if ((v1 & 0x1000) != 0) {
      goto LABEL_60;
    }
LABEL_85:
    double v22 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22;
  }
LABEL_84:
  double v21 = 0.0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_85;
  }
LABEL_60:
  double v22 = *((double *)this + 13);
  if (v22 == 0.0) {
    double v22 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22;
}

void CMMsl::SteadinessModelGaitBaselineFeatures::~SteadinessModelGaitBaselineFeatures(CMMsl::SteadinessModelGaitBaselineFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures(CMMsl::SteadinessModelGaitBaselineFeatures *this, const CMMsl::SteadinessModelGaitBaselineFeatures *a2)
{
  *(void *)this = &unk_270645188;
  *((_DWORD *)this + 22) = 0;
  __int16 v2 = *((_WORD *)a2 + 44);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 44) = 1;
    *((double *)this + 1) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 2) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 3) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 10) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_22:
    double result = *((double *)a2 + 6);
    *((_WORD *)this + 44) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_21:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 5) = result;
  if ((*((_WORD *)a2 + 44) & 0x20) != 0) {
    goto LABEL_22;
  }
  return result;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::operator=(uint64_t a1, const CMMsl::SteadinessModelGaitBaselineFeatures *a2)
{
  if ((const CMMsl::SteadinessModelGaitBaselineFeatures *)a1 != a2)
  {
    CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures((CMMsl::SteadinessModelGaitBaselineFeatures *)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v16;
    int v16 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v15;
    long long v15 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v14 = v7;
    long long v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelGaitBaselineFeatures *a2, CMMsl::SteadinessModelGaitBaselineFeatures *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v7;
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  double result = *((double *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645188;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures((uint64_t)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v16;
    int v16 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v15;
    long long v15 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v14 = v7;
    long long v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::formatText(CMMsl::SteadinessModelGaitBaselineFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "asymmetryPercentageMedian", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "asymmetryPercentageStd", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "doubleSupportPercentageMedian", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "height", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthQ95Heightnorm", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedQ95Sqrtheightnorm", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "modelOutputBalancePrior", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "stepLengthMedian", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "stepLengthXWalkingSpeedMedian", *((double *)this + 9));
  if ((*((_WORD *)this + 44) & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "walkingSpeedMedian", *((double *)this + 10));
LABEL_12:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::readFrom(CMMsl::SteadinessModelGaitBaselineFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_55;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_52;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 2u:
        *((_WORD *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_52;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 3u:
        *((_WORD *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_52;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 4u:
        *((_WORD *)this + 44) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_52;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 5u:
        *((_WORD *)this + 44) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_52;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 6u:
        *((_WORD *)this + 44) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_52;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 7u:
        *((_WORD *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_52;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 8u:
        *((_WORD *)this + 44) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_52;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 9u:
        *((_WORD *)this + 44) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_52;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 0xAu:
        *((_WORD *)this + 44) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_52:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
LABEL_54:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_55:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 88);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
    if ((*(_WORD *)(v3 + 88) & 0x20) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_21:
  double v5 = *(double *)(v3 + 48);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::hash_value(CMMsl::SteadinessModelGaitBaselineFeatures *this)
{
  __int16 v1 = *((_WORD *)this + 44);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_33:
    double v3 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_34:
    double v4 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_9;
    }
LABEL_35:
    double v5 = 0.0;
    if ((*((_WORD *)this + 44) & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_36:
    double v6 = 0.0;
    if ((*((_WORD *)this + 44) & 0x100) != 0) {
      goto LABEL_15;
    }
LABEL_37:
    double v7 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_18;
    }
LABEL_38:
    double v8 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_21;
    }
LABEL_39:
    double v9 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_24;
    }
    goto LABEL_40;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_34;
  }
LABEL_6:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_35;
  }
LABEL_9:
  double v5 = *((double *)this + 8);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x200) == 0) {
    goto LABEL_36;
  }
LABEL_12:
  double v6 = *((double *)this + 10);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x100) == 0) {
    goto LABEL_37;
  }
LABEL_15:
  double v7 = *((double *)this + 9);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_38;
  }
LABEL_18:
  double v8 = *((double *)this + 4);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_39;
  }
LABEL_21:
  double v9 = *((double *)this + 7);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_24:
    double v10 = *((double *)this + 5);
    if (v10 == 0.0) {
      double v10 = 0.0;
    }
    if ((v1 & 0x20) != 0) {
      goto LABEL_27;
    }
LABEL_41:
    double v11 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11;
  }
LABEL_40:
  double v10 = 0.0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_41;
  }
LABEL_27:
  double v11 = *((double *)this + 6);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11;
}

void CMMsl::SteadinessModelHarmonicFeatures::~SteadinessModelHarmonicFeatures(CMMsl::SteadinessModelHarmonicFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures(CMMsl::SteadinessModelHarmonicFeatures *this, const CMMsl::SteadinessModelHarmonicFeatures *a2)
{
  *(void *)this = &unk_2706451C0;
  *((_DWORD *)this + 62) = 0;
  int v2 = *((_DWORD *)a2 + 62);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 62) = 1;
    *((double *)this + 1) = result;
    int v2 = *((_DWORD *)a2 + 62);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 62) = v3;
    *((double *)this + 2) = result;
    int v2 = *((_DWORD *)a2 + 62);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 62) = v3;
    *((double *)this + 3) = result;
    int v2 = *((_DWORD *)a2 + 62);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_37;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 9) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_42:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 11) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }
LABEL_44:
  double result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 12) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_45:
  double result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x2000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }
LABEL_46:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_47:
  double result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_48:
  double result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
LABEL_49:
  double result = *((double *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 17) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
LABEL_50:
  double result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 18) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }
LABEL_51:
  double result = *((double *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }
LABEL_52:
  double result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }
LABEL_53:
  double result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }
LABEL_54:
  double result = *((double *)a2 + 22);
  v3 |= 0x200000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 22) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x400000) == 0)
  {
LABEL_27:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_56;
  }
LABEL_55:
  double result = *((double *)a2 + 23);
  v3 |= 0x400000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 23) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x800000) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_57;
  }
LABEL_56:
  double result = *((double *)a2 + 24);
  v3 |= 0x800000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 24) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_58;
  }
LABEL_57:
  double result = *((double *)a2 + 25);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 25) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_59;
  }
LABEL_58:
  double result = *((double *)a2 + 27);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 27) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_60;
  }
LABEL_59:
  double result = *((double *)a2 + 28);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 28) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_61;
  }
LABEL_60:
  double result = *((double *)a2 + 29);
  v3 |= 0x10000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 29) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x2000000) == 0) {
      return result;
    }
LABEL_62:
    double result = *((double *)a2 + 26);
    *((_DWORD *)this + 62) = v3 | 0x2000000;
    *((double *)this + 26) = result;
    return result;
  }
LABEL_61:
  double result = *((double *)a2 + 30);
  v3 |= 0x20000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 30) = result;
  if ((*((_DWORD *)a2 + 62) & 0x2000000) != 0) {
    goto LABEL_62;
  }
  return result;
}

CMMsl *CMMsl::SteadinessModelHarmonicFeatures::operator=(CMMsl *a1, const CMMsl::SteadinessModelHarmonicFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures((CMMsl::SteadinessModelHarmonicFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelHarmonicFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelHarmonicFeatures *a2, CMMsl::SteadinessModelHarmonicFeatures *a3)
{
  int v3 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  uint64_t v12 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v12;
  uint64_t v13 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v13;
  uint64_t v14 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v14;
  uint64_t v15 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v15;
  uint64_t v16 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v16;
  uint64_t v17 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v17;
  uint64_t v18 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v18;
  uint64_t v19 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v19;
  uint64_t v20 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v20;
  uint64_t v21 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v21;
  uint64_t v22 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v22;
  uint64_t v23 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v23;
  uint64_t v24 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v24;
  uint64_t v25 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v25;
  uint64_t v26 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v26;
  uint64_t v27 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v27;
  uint64_t v28 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v28;
  uint64_t v29 = *((void *)this + 27);
  *((void *)this + 27) = *((void *)a2 + 27);
  *((void *)a2 + 27) = v29;
  uint64_t v30 = *((void *)this + 28);
  *((void *)this + 28) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v30;
  uint64_t v31 = *((void *)this + 29);
  *((void *)this + 29) = *((void *)a2 + 29);
  *((void *)a2 + 29) = v31;
  uint64_t v32 = *((void *)this + 30);
  *((void *)this + 30) = *((void *)a2 + 30);
  *((void *)a2 + 30) = v32;
  double result = *((double *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((double *)a2 + 26) = result;
  return result;
}

double CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706451C0;
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a2 + 248) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  double result = *(double *)(a2 + 208);
  *(double *)(a1 + 208) = result;
  return result;
}

CMMsl *CMMsl::SteadinessModelHarmonicFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelHarmonicFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::formatText(CMMsl::SteadinessModelHarmonicFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 62);
  if (v5)
  {
    PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApCv", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 62);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApMean", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApMedian", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApQ5", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApQ95", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlCv", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlMean", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlMedian", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlQ5", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlQ95", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtCv", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtMean", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtMedian", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtQ5", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtQ95", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApCv", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApMean", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApMedian", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApQ5", *((double *)this + 19));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApQ95", *((double *)this + 20));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlCv", *((double *)this + 21));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlMean", *((double *)this + 22));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlMedian", *((double *)this + 23));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlQ5", *((double *)this + 24));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlQ95", *((double *)this + 25));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtCv", *((double *)this + 26));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtMean", *((double *)this + 27));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtMedian", *((double *)this + 28));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtQ5", *((double *)this + 29));
  if ((*((_DWORD *)this + 62) & 0x20000000) != 0) {
LABEL_31:
  }
    PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtQ95", *((double *)this + 30));
LABEL_32:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::readFrom(CMMsl::SteadinessModelHarmonicFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_115;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 62) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 2u:
        *((_DWORD *)this + 62) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 3u:
        *((_DWORD *)this + 62) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 4u:
        *((_DWORD *)this + 62) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 5u:
        *((_DWORD *)this + 62) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 6u:
        *((_DWORD *)this + 62) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 7u:
        *((_DWORD *)this + 62) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 8u:
        *((_DWORD *)this + 62) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 9u:
        *((_DWORD *)this + 62) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0xAu:
        *((_DWORD *)this + 62) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0xBu:
        *((_DWORD *)this + 62) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0xCu:
        *((_DWORD *)this + 62) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0xDu:
        *((_DWORD *)this + 62) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0xEu:
        *((_DWORD *)this + 62) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0xFu:
        *((_DWORD *)this + 62) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x10u:
        *((_DWORD *)this + 62) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x11u:
        *((_DWORD *)this + 62) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x12u:
        *((_DWORD *)this + 62) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x13u:
        *((_DWORD *)this + 62) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x14u:
        *((_DWORD *)this + 62) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x15u:
        *((_DWORD *)this + 62) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x16u:
        *((_DWORD *)this + 62) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 22) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x17u:
        *((_DWORD *)this + 62) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 23) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x18u:
        *((_DWORD *)this + 62) |= 0x800000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 24) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x19u:
        *((_DWORD *)this + 62) |= 0x1000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 25) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x1Au:
        *((_DWORD *)this + 62) |= 0x4000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 27) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x1Bu:
        *((_DWORD *)this + 62) |= 0x8000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 28) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x1Cu:
        *((_DWORD *)this + 62) |= 0x10000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 29) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x1Du:
        *((_DWORD *)this + 62) |= 0x20000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 30) = *(void *)(*(void *)a2 + v2);
        goto LABEL_114;
      case 0x1Eu:
        *((_DWORD *)this + 62) |= 0x2000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_112:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((void *)this + 26) = *(void *)(*(void *)a2 + v2);
LABEL_114:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_115:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 248);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    int v4 = *(_DWORD *)(v3 + 248);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 176));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(double *)(v3 + 184));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(double *)(v3 + 192));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(double *)(v3 + 200));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 216));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(double *)(v3 + 224));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_30;
    }
LABEL_60:
    this = PB::Writer::write(a2, *(double *)(v3 + 240));
    if ((*(_DWORD *)(v3 + 248) & 0x2000000) == 0) {
      return this;
    }
    goto LABEL_61;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(double *)(v3 + 232));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000000) != 0) {
    goto LABEL_60;
  }
LABEL_30:
  if ((v4 & 0x2000000) == 0) {
    return this;
  }
LABEL_61:
  double v5 = *(double *)(v3 + 208);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::hash_value(CMMsl::SteadinessModelHarmonicFeatures *this)
{
  int v1 = *((_DWORD *)this + 62);
  if ((v1 & 1) == 0)
  {
    double v35 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_117:
    double v34 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_118:
    double v33 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_119:
    uint64_t v4 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_13;
    }
LABEL_120:
    uint64_t v5 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_17;
    }
LABEL_121:
    uint64_t v6 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_21;
    }
LABEL_122:
    uint64_t v7 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_25;
    }
LABEL_123:
    uint64_t v8 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_29;
    }
LABEL_124:
    uint64_t v9 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_33;
    }
LABEL_125:
    uint64_t v10 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_37;
    }
LABEL_126:
    uint64_t v11 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_41;
    }
LABEL_127:
    uint64_t v12 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_45;
    }
LABEL_128:
    uint64_t v13 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_49;
    }
LABEL_129:
    uint64_t v14 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_53;
    }
LABEL_130:
    uint64_t v15 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_57;
    }
LABEL_131:
    uint64_t v16 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_61;
    }
LABEL_132:
    uint64_t v17 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_65;
    }
LABEL_133:
    uint64_t v18 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_69;
    }
LABEL_134:
    uint64_t v19 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_73;
    }
LABEL_135:
    uint64_t v20 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_77;
    }
LABEL_136:
    uint64_t v21 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_81;
    }
LABEL_137:
    uint64_t v22 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_85;
    }
LABEL_138:
    uint64_t v23 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_89;
    }
LABEL_139:
    uint64_t v24 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_93;
    }
LABEL_140:
    uint64_t v25 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_97;
    }
LABEL_141:
    uint64_t v26 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_101;
    }
LABEL_142:
    uint64_t v27 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_105;
    }
LABEL_143:
    double v28 = 0.0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_108;
    }
    goto LABEL_144;
  }
  double v31 = *((double *)this + 1);
  if (v31 == 0.0) {
    double v31 = 0.0;
  }
  double v35 = v31;
  if ((v1 & 2) == 0) {
    goto LABEL_117;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  double v34 = v2;
  if ((v1 & 4) == 0) {
    goto LABEL_118;
  }
LABEL_6:
  double v3 = *((double *)this + 3);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v33 = v3;
  if ((v1 & 8) == 0) {
    goto LABEL_119;
  }
LABEL_9:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *((void *)this + 4);
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_120;
  }
LABEL_13:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 5);
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_121;
  }
LABEL_17:
  if (*((double *)this + 6) == 0.0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *((void *)this + 6);
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_122;
  }
LABEL_21:
  if (*((double *)this + 7) == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *((void *)this + 7);
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_123;
  }
LABEL_25:
  if (*((double *)this + 8) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 8);
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_124;
  }
LABEL_29:
  if (*((double *)this + 9) == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)this + 9);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_125;
  }
LABEL_33:
  if (*((double *)this + 10) == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *((void *)this + 10);
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_126;
  }
LABEL_37:
  if (*((double *)this + 11) == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *((void *)this + 11);
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_127;
  }
LABEL_41:
  if (*((double *)this + 12) == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *((void *)this + 12);
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_128;
  }
LABEL_45:
  if (*((double *)this + 13) == 0.0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *((void *)this + 13);
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_129;
  }
LABEL_49:
  if (*((double *)this + 14) == 0.0) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *((void *)this + 14);
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_130;
  }
LABEL_53:
  if (*((double *)this + 15) == 0.0) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *((void *)this + 15);
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_131;
  }
LABEL_57:
  if (*((double *)this + 16) == 0.0) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *((void *)this + 16);
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_132;
  }
LABEL_61:
  if (*((double *)this + 17) == 0.0) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *((void *)this + 17);
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_133;
  }
LABEL_65:
  if (*((double *)this + 18) == 0.0) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *((void *)this + 18);
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_134;
  }
LABEL_69:
  if (*((double *)this + 19) == 0.0) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *((void *)this + 19);
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_135;
  }
LABEL_73:
  if (*((double *)this + 20) == 0.0) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *((void *)this + 20);
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_136;
  }
LABEL_77:
  if (*((double *)this + 21) == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *((void *)this + 21);
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_137;
  }
LABEL_81:
  if (*((double *)this + 22) == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *((void *)this + 22);
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_138;
  }
LABEL_85:
  if (*((double *)this + 23) == 0.0) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *((void *)this + 23);
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_139;
  }
LABEL_89:
  if (*((double *)this + 24) == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *((void *)this + 24);
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_140;
  }
LABEL_93:
  if (*((double *)this + 25) == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *((void *)this + 25);
  }
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_141;
  }
LABEL_97:
  if (*((double *)this + 27) == 0.0) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = *((void *)this + 27);
  }
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_142;
  }
LABEL_101:
  if (*((double *)this + 28) == 0.0) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = *((void *)this + 28);
  }
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_143;
  }
LABEL_105:
  double v28 = *((double *)this + 29);
  if (v28 == 0.0) {
    double v28 = 0.0;
  }
  if ((v1 & 0x20000000) != 0)
  {
LABEL_108:
    double v29 = *((double *)this + 30);
    if (v29 == 0.0) {
      double v29 = 0.0;
    }
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_111;
    }
LABEL_145:
    double v30 = 0.0;
    return *(void *)&v34 ^ *(void *)&v35 ^ *(void *)&v33 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(void *)&v28 ^ *(void *)&v29 ^ *(void *)&v30;
  }
LABEL_144:
  double v29 = 0.0;
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_145;
  }
LABEL_111:
  double v30 = *((double *)this + 26);
  if (v30 == 0.0) {
    double v30 = 0.0;
  }
  return *(void *)&v34 ^ *(void *)&v35 ^ *(void *)&v33 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(void *)&v28 ^ *(void *)&v29 ^ *(void *)&v30;
}

void CMMsl::SteadinessModelResult::~SteadinessModelResult(CMMsl::SteadinessModelResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::SteadinessModelResult::SteadinessModelResult(uint64_t this, const CMMsl::SteadinessModelResult *a2)
{
  *(void *)this = &unk_2706451F8;
  *(_DWORD *)(this + 52) = 0;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    char v3 = 4;
    *(unsigned char *)(this + 52) = 4;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 52);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 52) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 52) = v3;
    *(void *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 52);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 52) = v3;
    *(void *)(this + 8) = v6;
    char v2 = *((unsigned char *)a2 + 52);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *(unsigned char *)(this + 52) = v3;
  *(_DWORD *)(this + 48) = v7;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  int v8 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(unsigned char *)(this + 52) = v3;
  *(_DWORD *)(this + 36) = v8;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v9 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(unsigned char *)(this + 52) = v3;
  *(_DWORD *)(this + 32) = v9;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_18:
    int v11 = *((_DWORD *)a2 + 10);
    *(unsigned char *)(this + 52) = v3 | 0x20;
    *(_DWORD *)(this + 40) = v11;
    return this;
  }
LABEL_17:
  int v10 = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *(unsigned char *)(this + 52) = v3;
  *(_DWORD *)(this + 44) = v10;
  if ((*((unsigned char *)a2 + 52) & 0x20) != 0) {
    goto LABEL_18;
  }
  return this;
}

uint64_t CMMsl::SteadinessModelResult::operator=(uint64_t a1, const CMMsl::SteadinessModelResult *a2)
{
  if ((const CMMsl::SteadinessModelResult *)a1 != a2)
  {
    CMMsl::SteadinessModelResult::SteadinessModelResult((uint64_t)v7, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v11;
    uint64_t v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v10;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelResult *a2, CMMsl::SteadinessModelResult *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v7 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v7;
  int v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  int v9 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v9;
  int v10 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v10;
  int v11 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  return result;
}

double CMMsl::SteadinessModelResult::SteadinessModelResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706451F8;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706451F8;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::SteadinessModelResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v10 = &unk_2706451F8;
    uint64_t v3 = *(void *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 48);
    *(_DWORD *)(a2 + 52) = 0;
    uint64_t v12 = *(void *)(a1 + 24);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v11 = v5;
    uint64_t v14 = *(void *)(a1 + 48);
    long long v7 = *(_OWORD *)(a1 + 32);
    long long v8 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = v4;
    *(_OWORD *)(a1 + 32) = v8;
    long long v13 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelResult::formatText(CMMsl::SteadinessModelResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 52);
  if (v5)
  {
    PB::TextFormatter::format(a2, "likelihoodNotOK", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "likelihoodOK", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "numDaysWithDataLast30Days");
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "numDaysWithDataLast7Days");
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "numValidBouts28Days");
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(a2, "rawSteadiness", *((double *)this + 3));
    if ((*((unsigned char *)this + 52) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "numValidBouts7Days");
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "rejectionStatus");
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SteadinessModelResult::readFrom(CMMsl::SteadinessModelResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 52) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_36;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_108;
      case 2u:
        *((unsigned char *)this + 52) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_36;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_108;
      case 3u:
        *((unsigned char *)this + 52) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_108:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_36:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((unsigned char *)this + 52) |= 0x80u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_113;
            }
            unint64_t v53 = v21++;
            char v54 = *(unsigned char *)(v22 + v53);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v54 & 0x7F) << v51;
            if ((v54 & 0x80) == 0) {
              break;
            }
            v51 += 7;
            BOOL v14 = v52++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_112:
              unint64_t v2 = v53 + 1;
              goto LABEL_113;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
          goto LABEL_112;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_113;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_113:
        *((_DWORD *)this + 12) = v25;
        break;
      case 5u:
        *((unsigned char *)this + 52) |= 0x10u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v55 = 0;
          unsigned int v56 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_118;
            }
            unint64_t v57 = v27++;
            char v58 = *(unsigned char *)(v28 + v57);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v58 & 0x7F) << v55;
            if ((v58 & 0x80) == 0) {
              break;
            }
            v55 += 7;
            BOOL v14 = v56++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_117:
              unint64_t v2 = v57 + 1;
              goto LABEL_118;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
          goto LABEL_117;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_118;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_118:
        *((_DWORD *)this + 9) = v31;
        break;
      case 6u:
        *((unsigned char *)this + 52) |= 8u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_123;
            }
            unint64_t v61 = v33++;
            char v62 = *(unsigned char *)(v34 + v61);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v62 & 0x7F) << v59;
            if ((v62 & 0x80) == 0) {
              break;
            }
            v59 += 7;
            BOOL v14 = v60++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_122:
              unint64_t v2 = v61 + 1;
              goto LABEL_123;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
          goto LABEL_122;
        }
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        do
        {
          unint64_t v2 = v33 + 1;
          *((void *)a2 + 1) = v33 + 1;
          char v38 = *(unsigned char *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0) {
            goto LABEL_123;
          }
          v35 += 7;
          unint64_t v33 = v2;
          BOOL v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_123:
        *((_DWORD *)this + 8) = v37;
        break;
      case 7u:
        *((unsigned char *)this + 52) |= 0x40u;
        unint64_t v39 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v40 = *(void *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v43 = 0;
          if (v2 <= v39) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_128;
            }
            unint64_t v65 = v39++;
            char v66 = *(unsigned char *)(v40 + v65);
            *((void *)a2 + 1) = v39;
            v43 |= (unint64_t)(v66 & 0x7F) << v63;
            if ((v66 & 0x80) == 0) {
              break;
            }
            v63 += 7;
            BOOL v14 = v64++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_127:
              unint64_t v2 = v65 + 1;
              goto LABEL_128;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v43) = 0;
          }
          goto LABEL_127;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        do
        {
          unint64_t v2 = v39 + 1;
          *((void *)a2 + 1) = v39 + 1;
          char v44 = *(unsigned char *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0) {
            goto LABEL_128;
          }
          v41 += 7;
          unint64_t v39 = v2;
          BOOL v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_128:
        *((_DWORD *)this + 11) = v43;
        break;
      case 8u:
        *((unsigned char *)this + 52) |= 0x20u;
        unint64_t v45 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v46 = *(void *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v49 = 0;
          if (v2 <= v45) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_133;
            }
            unint64_t v69 = v45++;
            char v70 = *(unsigned char *)(v46 + v69);
            *((void *)a2 + 1) = v45;
            v49 |= (unint64_t)(v70 & 0x7F) << v67;
            if ((v70 & 0x80) == 0) {
              break;
            }
            v67 += 7;
            BOOL v14 = v68++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_132:
              unint64_t v2 = v69 + 1;
              goto LABEL_133;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v49) = 0;
          }
          goto LABEL_132;
        }
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        do
        {
          unint64_t v2 = v45 + 1;
          *((void *)a2 + 1) = v45 + 1;
          char v50 = *(unsigned char *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0) {
            goto LABEL_133;
          }
          v47 += 7;
          unint64_t v45 = v2;
          BOOL v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_133:
        *((_DWORD *)this + 10) = v49;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 52);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    char v4 = *(unsigned char *)(v3 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 52) & 0x20) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_17:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::SteadinessModelResult::hash_value(CMMsl::SteadinessModelResult *this)
{
  if ((*((unsigned char *)this + 52) & 4) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 52) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_17:
    double v2 = 0.0;
    if (*((unsigned char *)this + 52)) {
      goto LABEL_6;
    }
LABEL_18:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 52) & 0x80) != 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 52) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 52) & 1) == 0) {
    goto LABEL_18;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 52) & 0x80) != 0)
  {
LABEL_9:
    uint64_t v4 = *((unsigned int *)this + 12);
    if ((*((unsigned char *)this + 52) & 0x10) != 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 52) & 0x10) != 0)
  {
LABEL_10:
    uint64_t v5 = *((int *)this + 9);
    if ((*((unsigned char *)this + 52) & 8) != 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 52) & 8) != 0)
  {
LABEL_11:
    uint64_t v6 = *((int *)this + 8);
    if ((*((unsigned char *)this + 52) & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_22:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 52) & 0x20) != 0) {
      goto LABEL_13;
    }
LABEL_23:
    uint64_t v8 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_21:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 52) & 0x40) == 0) {
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v7 = *((int *)this + 11);
  if ((*((unsigned char *)this + 52) & 0x20) == 0) {
    goto LABEL_23;
  }
LABEL_13:
  uint64_t v8 = *((int *)this + 10);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::SteadinessModelTemporalDispersionFeatures::~SteadinessModelTemporalDispersionFeatures(CMMsl::SteadinessModelTemporalDispersionFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures(CMMsl::SteadinessModelTemporalDispersionFeatures *this, const CMMsl::SteadinessModelTemporalDispersionFeatures *a2)
{
  *(void *)this = &unk_270645230;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    char v3 = 8;
    *((unsigned char *)this + 40) = 8;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 40) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((unsigned char *)this + 40) = v3;
  *((double *)this + 2) = result;
  if (*((unsigned char *)a2 + 40)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::operator=(uint64_t a1, const CMMsl::SteadinessModelTemporalDispersionFeatures *a2)
{
  if ((const CMMsl::SteadinessModelTemporalDispersionFeatures *)a1 != a2)
  {
    CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures((CMMsl::SteadinessModelTemporalDispersionFeatures *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelTemporalDispersionFeatures *a2, CMMsl::SteadinessModelTemporalDispersionFeatures *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645230;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645230;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_270645230;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v11 = *(_DWORD *)(a1 + 40);
    long long v10 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    long long v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::formatText(CMMsl::SteadinessModelTemporalDispersionFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "centroidSlopeHeightNormDoubleSupportPercentageCadence", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "centroidSlopeHeightNormWalkingSpeedStepLength", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "l2DispersionHeightNormDoubleSupportPercentageCadence", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "l2DispersionHeightNormWalkingSpeedStepLength", *((double *)this + 4));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::readFrom(CMMsl::SteadinessModelTemporalDispersionFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_37;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 40) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::hash_value(CMMsl::SteadinessModelTemporalDispersionFeatures *this)
{
  if ((*((unsigned char *)this + 40) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 2) != 0)
  {
LABEL_6:
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if (*((unsigned char *)this + 40)) {
      goto LABEL_9;
    }
LABEL_17:
    double v4 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
  }
LABEL_16:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
}

void CMMsl::SteadinessModelTemporalEntropyFeatures::~SteadinessModelTemporalEntropyFeatures(CMMsl::SteadinessModelTemporalEntropyFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures(CMMsl::SteadinessModelTemporalEntropyFeatures *this, const CMMsl::SteadinessModelTemporalEntropyFeatures *a2)
{
  *(void *)this = &unk_270645268;
  *((_DWORD *)this + 54) = 0;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x80000) != 0)
  {
    double result = *((double *)a2 + 20);
    int v3 = 0x80000;
    *((_DWORD *)this + 54) = 0x80000;
    *((double *)this + 20) = result;
    int v2 = *((_DWORD *)a2 + 54);
    if ((v2 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 19);
    v3 |= 0x40000u;
    *((_DWORD *)this + 54) = v3;
    *((double *)this + 19) = result;
    int v2 = *((_DWORD *)a2 + 54);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 54) = v3;
    *((double *)this + 2) = result;
    int v2 = *((_DWORD *)a2 + 54);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 1) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  double result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x400000) == 0)
  {
LABEL_10:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  double result = *((double *)a2 + 23);
  v3 |= 0x400000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 23) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x200000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  double result = *((double *)a2 + 22);
  v3 |= 0x200000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 22) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x800000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  double result = *((double *)a2 + 24);
  v3 |= 0x800000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 24) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = *((double *)a2 + 26);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 26) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  double result = *((double *)a2 + 25);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 25) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 3) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }
LABEL_47:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 9) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x400) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }
LABEL_48:
  double result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 11) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x4000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  double result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  double result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }
LABEL_51:
  double result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 18) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x10000) == 0)
  {
LABEL_28:
    if ((v2 & 0x800) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
LABEL_52:
  double result = *((double *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 17) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x800) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0) {
      return result;
    }
LABEL_54:
    double result = *((double *)a2 + 13);
    *((_DWORD *)this + 54) = v3 | 0x1000;
    *((double *)this + 13) = result;
    return result;
  }
LABEL_53:
  double result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 12) = result;
  if ((*((_DWORD *)a2 + 54) & 0x1000) != 0) {
    goto LABEL_54;
  }
  return result;
}

CMMsl *CMMsl::SteadinessModelTemporalEntropyFeatures::operator=(CMMsl *a1, const CMMsl::SteadinessModelTemporalEntropyFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures((CMMsl::SteadinessModelTemporalEntropyFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelTemporalEntropyFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelTemporalEntropyFeatures *a2, CMMsl::SteadinessModelTemporalEntropyFeatures *a3)
{
  int v3 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v3;
  uint64_t v4 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v4;
  uint64_t v5 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v8;
  uint64_t v9 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v9;
  uint64_t v10 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v10;
  uint64_t v11 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v11;
  uint64_t v12 = *((void *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((void *)a2 + 26) = v12;
  uint64_t v13 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v13;
  uint64_t v14 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  uint64_t v16 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v16;
  uint64_t v17 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v17;
  uint64_t v18 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v18;
  uint64_t v19 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v19;
  uint64_t v20 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v20;
  uint64_t v21 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v21;
  uint64_t v22 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v22;
  uint64_t v23 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v23;
  uint64_t v24 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v24;
  uint64_t v25 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v25;
  uint64_t v26 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v26;
  uint64_t v27 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v27;
  uint64_t v28 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v28;
  double result = *((double *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((double *)a2 + 13) = result;
  return result;
}

double CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645268;
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a2 + 216) = 0;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  double result = *(double *)(a2 + 104);
  *(double *)(a1 + 104) = result;
  return result;
}

CMMsl *CMMsl::SteadinessModelTemporalEntropyFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelTemporalEntropyFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::formatText(CMMsl::SteadinessModelTemporalEntropyFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 54);
  if (v5)
  {
    PB::TextFormatter::format(a2, "allBoutsCycleTimeEntropy5thTo95th", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 54);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "allBoutsCycleTimeEntropyMean", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd1Mean", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd1P5", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd1P95", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd2Mean", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd2P5", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd2P95", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thLog", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimeEntropyP5Log", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthEntropyMeanLog", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P5Log", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd2P5Log", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "allBoutsStepLengthEntropy5thTo95th", *((double *)this + 19));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "allBoutsStepLengthEntropyMean", *((double *)this + 20));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd1Mean", *((double *)this + 21));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd1P5", *((double *)this + 22));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd1P95", *((double *)this + 23));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd2Mean", *((double *)this + 24));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd2P5", *((double *)this + 25));
  if ((*((_DWORD *)this + 54) & 0x2000000) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd2P95", *((double *)this + 26));
LABEL_28:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::readFrom(CMMsl::SteadinessModelTemporalEntropyFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_103;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 54) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 2u:
        *((_DWORD *)this + 54) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 3u:
        *((_DWORD *)this + 54) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 4u:
        *((_DWORD *)this + 54) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 5u:
        *((_DWORD *)this + 54) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 6u:
        *((_DWORD *)this + 54) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 23) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 7u:
        *((_DWORD *)this + 54) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 22) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 8u:
        *((_DWORD *)this + 54) |= 0x800000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 24) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 9u:
        *((_DWORD *)this + 54) |= 0x2000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 26) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0xAu:
        *((_DWORD *)this + 54) |= 0x1000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 25) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0xBu:
        *((_DWORD *)this + 54) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0xCu:
        *((_DWORD *)this + 54) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0xDu:
        *((_DWORD *)this + 54) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0xEu:
        *((_DWORD *)this + 54) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0xFu:
        *((_DWORD *)this + 54) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0x10u:
        *((_DWORD *)this + 54) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0x11u:
        *((_DWORD *)this + 54) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0x12u:
        *((_DWORD *)this + 54) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0x13u:
        *((_DWORD *)this + 54) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0x14u:
        *((_DWORD *)this + 54) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0x15u:
        *((_DWORD *)this + 54) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0x16u:
        *((_DWORD *)this + 54) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0x17u:
        *((_DWORD *)this + 54) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0x18u:
        *((_DWORD *)this + 54) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0x19u:
        *((_DWORD *)this + 54) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_100;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0x1Au:
        *((_DWORD *)this + 54) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_100:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
LABEL_102:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_103:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 216);
  if ((v4 & 0x80000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 160));
    int v4 = *(_DWORD *)(v3 + 216);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 184));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 176));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 192));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 208));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 200));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x800) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    this = PB::Writer::write(a2, *(double *)(v3 + 96));
    if ((*(_DWORD *)(v3 + 216) & 0x1000) == 0) {
      return this;
    }
    goto LABEL_53;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 0x1000) == 0) {
    return this;
  }
LABEL_53:
  double v5 = *(double *)(v3 + 104);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::hash_value(CMMsl::SteadinessModelTemporalEntropyFeatures *this)
{
  int v1 = *((_DWORD *)this + 54);
  if ((v1 & 0x80000) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_3;
    }
LABEL_81:
    double v3 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
LABEL_82:
    double v4 = 0.0;
    if (v1) {
      goto LABEL_9;
    }
LABEL_83:
    double v5 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_12;
    }
LABEL_84:
    double v6 = 0.0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_15;
    }
LABEL_85:
    double v7 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_18;
    }
LABEL_86:
    double v8 = 0.0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_21;
    }
LABEL_87:
    double v9 = 0.0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_24;
    }
LABEL_88:
    double v10 = 0.0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_27;
    }
LABEL_89:
    double v11 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_30;
    }
LABEL_90:
    double v12 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_33;
    }
LABEL_91:
    double v13 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_36;
    }
LABEL_92:
    double v14 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_39;
    }
LABEL_93:
    double v15 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_42;
    }
LABEL_94:
    double v16 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_45;
    }
LABEL_95:
    double v17 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_48;
    }
LABEL_96:
    double v18 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_51;
    }
LABEL_97:
    double v19 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_54;
    }
LABEL_98:
    double v20 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_57;
    }
LABEL_99:
    double v21 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_60;
    }
LABEL_100:
    double v22 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_63;
    }
LABEL_101:
    double v23 = 0.0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_66;
    }
LABEL_102:
    double v24 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_69;
    }
LABEL_103:
    double v25 = 0.0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_72;
    }
    goto LABEL_104;
  }
  double v2 = *((double *)this + 20);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_81;
  }
LABEL_3:
  double v3 = *((double *)this + 19);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_82;
  }
LABEL_6:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_83;
  }
LABEL_9:
  double v5 = *((double *)this + 1);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_84;
  }
LABEL_12:
  double v6 = *((double *)this + 21);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_85;
  }
LABEL_15:
  double v7 = *((double *)this + 23);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_86;
  }
LABEL_18:
  double v8 = *((double *)this + 22);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_87;
  }
LABEL_21:
  double v9 = *((double *)this + 24);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_88;
  }
LABEL_24:
  double v10 = *((double *)this + 26);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_89;
  }
LABEL_27:
  double v11 = *((double *)this + 25);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_90;
  }
LABEL_30:
  double v12 = *((double *)this + 3);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_91;
  }
LABEL_33:
  double v13 = *((double *)this + 5);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_92;
  }
LABEL_36:
  double v14 = *((double *)this + 4);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_93;
  }
LABEL_39:
  double v15 = *((double *)this + 6);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_94;
  }
LABEL_42:
  double v16 = *((double *)this + 8);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_95;
  }
LABEL_45:
  double v17 = *((double *)this + 7);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_96;
  }
LABEL_48:
  double v18 = *((double *)this + 14);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_97;
  }
LABEL_51:
  double v19 = *((double *)this + 10);
  if (v19 == 0.0) {
    double v19 = 0.0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_98;
  }
LABEL_54:
  double v20 = *((double *)this + 9);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_99;
  }
LABEL_57:
  double v21 = *((double *)this + 11);
  if (v21 == 0.0) {
    double v21 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_100;
  }
LABEL_60:
  double v22 = *((double *)this + 15);
  if (v22 == 0.0) {
    double v22 = 0.0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_101;
  }
LABEL_63:
  double v23 = *((double *)this + 16);
  if (v23 == 0.0) {
    double v23 = 0.0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_102;
  }
LABEL_66:
  double v24 = *((double *)this + 18);
  if (v24 == 0.0) {
    double v24 = 0.0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_103;
  }
LABEL_69:
  double v25 = *((double *)this + 17);
  if (v25 == 0.0) {
    double v25 = 0.0;
  }
  if ((v1 & 0x800) != 0)
  {
LABEL_72:
    double v26 = *((double *)this + 12);
    if (v26 == 0.0) {
      double v26 = 0.0;
    }
    if ((v1 & 0x1000) != 0) {
      goto LABEL_75;
    }
LABEL_105:
    double v27 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23 ^ *(void *)&v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ *(void *)&v27;
  }
LABEL_104:
  double v26 = 0.0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_105;
  }
LABEL_75:
  double v27 = *((double *)this + 13);
  if (v27 == 0.0) {
    double v27 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23 ^ *(void *)&v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ *(void *)&v27;
}

void CMMsl::StepCadenceToStrideLengthBin::~StepCadenceToStrideLengthBin(CMMsl::StepCadenceToStrideLengthBin *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin(CMMsl::StepCadenceToStrideLengthBin *this, const CMMsl::StepCadenceToStrideLengthBin *a2)
{
  *(void *)this = &unk_2706452A0;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    int v4 = *((_DWORD *)a2 + 8);
    char v3 = 8;
    *((unsigned char *)this + 40) = 8;
    *((_DWORD *)this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 40))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      double result = *((double *)a2 + 3);
      *((unsigned char *)this + 40) = v3 | 4;
      *((double *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v6 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 9) = v6;
  if ((*((unsigned char *)a2 + 40) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::operator=(uint64_t a1, const CMMsl::StepCadenceToStrideLengthBin *a2)
{
  if ((const CMMsl::StepCadenceToStrideLengthBin *)a1 != a2)
  {
    CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin((CMMsl::StepCadenceToStrideLengthBin *)&v8, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v3;
    *(void *)&long long v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v11;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v5;
    int v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v6;
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepCadenceToStrideLengthBin *a2, CMMsl::StepCadenceToStrideLengthBin *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  int v4 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  int v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706452A0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706452A0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = &unk_2706452A0;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    int v13 = *(_DWORD *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v10 = v5;
    *(void *)&long long v5 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    uint64_t v11 = v7;
    uint64_t v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::formatText(CMMsl::StepCadenceToStrideLengthBin *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "begin", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bin");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "end", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "state");
  if ((*((unsigned char *)this + 40) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "strideLength", *((double *)this + 3));
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::readFrom(CMMsl::StepCadenceToStrideLengthBin *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_72;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_66;
            }
            unint64_t v34 = v20++;
            char v35 = *(unsigned char *)(v21 + v34);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_65:
              unint64_t v2 = v34 + 1;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_65;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_66;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_66:
        *((_DWORD *)this + 8) = v24;
        break;
      case 2u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_45;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_61;
      case 3u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_45;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_61;
      case 4u:
        *((unsigned char *)this + 40) |= 0x10u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_71;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_70:
              unint64_t v2 = v38 + 1;
              goto LABEL_71;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_70;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_71;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_71:
        *((_DWORD *)this + 9) = v30;
        break;
      case 5u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_61:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_45:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_72:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 40) & 4) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::hash_value(CMMsl::StepCadenceToStrideLengthBin *this)
{
  if ((*((unsigned char *)this + 40) & 8) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 40)) {
      goto LABEL_3;
    }
LABEL_14:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_15:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
  uint64_t v1 = *((unsigned int *)this + 8);
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
LABEL_9:
    uint64_t v4 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_10;
    }
LABEL_17:
    double v5 = 0.0;
    return *(void *)&v2 ^ v1 ^ *(void *)&v3 ^ v4 ^ *(void *)&v5;
  }
LABEL_16:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 40) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_10:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3 ^ v4 ^ *(void *)&v5;
}

void CMMsl::StepCountEntry::~StepCountEntry(CMMsl::StepCountEntry *this)
{
  *(void *)this = &unk_2706452D8;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    sub_2572C6E48(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::StepCountEntry::~StepCountEntry(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::StepCountEntry::StepCountEntry(uint64_t this, const CMMsl::StepCountEntry *a2)
{
  *(void *)this = &unk_2706452D8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 72) = 0;
  *(_DWORD *)(this + 152) = 0;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 11);
    int v3 = 128;
    *(_DWORD *)(this + 152) = 128;
    *(void *)(this + 88) = v4;
    int v2 = *((_DWORD *)a2 + 38);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 10);
    v3 |= 0x40u;
    *(_DWORD *)(this + 152) = v3;
    *(void *)(this + 80) = v5;
    int v2 = *((_DWORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    uint64_t v7 = *((void *)a2 + 6);
    v3 |= 0x10u;
    *(_DWORD *)(this + 152) = v3;
    *(void *)(this + 48) = v7;
    int v2 = *((_DWORD *)a2 + 38);
    if ((v2 & 0x100) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  int v8 = *((_DWORD *)a2 + 24);
  v3 |= 0x100u;
  *(_DWORD *)(this + 152) = v3;
  *(_DWORD *)(this + 96) = v8;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v9 = *((void *)a2 + 5);
  v3 |= 8u;
  *(_DWORD *)(this + 152) = v3;
  *(void *)(this + 40) = v9;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v10 = *((void *)a2 + 8);
  v3 |= 0x20u;
  *(_DWORD *)(this + 152) = v3;
  *(void *)(this + 64) = v10;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v11 = *((_DWORD *)a2 + 30);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 152) = v3;
  *(_DWORD *)(this + 120) = v11;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v12 = *((_DWORD *)a2 + 31);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 152) = v3;
  *(_DWORD *)(this + 124) = v12;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 4) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v13 = *((void *)a2 + 4);
  v3 |= 4u;
  *(_DWORD *)(this + 152) = v3;
  *(void *)(this + 32) = v13;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v14 = *((void *)a2 + 3);
  v3 |= 2u;
  *(_DWORD *)(this + 152) = v3;
  *(void *)(this + 24) = v14;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_27:
  uint64_t v15 = *((void *)a2 + 2);
  v3 |= 1u;
  *(_DWORD *)(this + 152) = v3;
  *(void *)(this + 16) = v15;
  if ((*((_DWORD *)a2 + 38) & 0x80000) != 0)
  {
LABEL_16:
    int v6 = *((_DWORD *)a2 + 35);
    *(_DWORD *)(this + 152) = v3 | 0x80000;
    *(_DWORD *)(this + 140) = v6;
  }
LABEL_17:
  if (*((void *)a2 + 9)) {
    operator new();
  }
  int v16 = *((_DWORD *)a2 + 38);
  if ((v16 & 0x200000) != 0)
  {
    char v17 = *((unsigned char *)a2 + 148);
    *(_DWORD *)(this + 152) |= 0x200000u;
    *(unsigned char *)(this + 148) = v17;
    int v16 = *((_DWORD *)a2 + 38);
  }
  if ((v16 & 0x400000) != 0)
  {
    char v18 = *((unsigned char *)a2 + 149);
    *(_DWORD *)(this + 152) |= 0x400000u;
    *(unsigned char *)(this + 149) = v18;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  int v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x40000) != 0)
  {
    int v22 = *((_DWORD *)a2 + 34);
    *(_DWORD *)(this + 152) |= 0x40000u;
    *(_DWORD *)(this + 136) = v22;
    int v19 = *((_DWORD *)a2 + 38);
    if ((v19 & 0x100000) == 0)
    {
LABEL_37:
      if ((v19 & 0x20000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_51;
    }
  }
  else if ((v19 & 0x100000) == 0)
  {
    goto LABEL_37;
  }
  int v23 = *((_DWORD *)a2 + 36);
  *(_DWORD *)(this + 152) |= 0x100000u;
  *(_DWORD *)(this + 144) = v23;
  int v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x20000) == 0)
  {
LABEL_38:
    if ((v19 & 0x400) == 0) {
      goto LABEL_39;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v24 = *((_DWORD *)a2 + 33);
  *(_DWORD *)(this + 152) |= 0x20000u;
  *(_DWORD *)(this + 132) = v24;
  int v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x400) == 0)
  {
LABEL_39:
    if ((v19 & 0x800) == 0) {
      goto LABEL_40;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v25 = *((_DWORD *)a2 + 26);
  *(_DWORD *)(this + 152) |= 0x400u;
  *(_DWORD *)(this + 104) = v25;
  int v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x800) == 0)
  {
LABEL_40:
    if ((v19 & 0x2000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v26 = *((_DWORD *)a2 + 27);
  *(_DWORD *)(this + 152) |= 0x800u;
  *(_DWORD *)(this + 108) = v26;
  int v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x2000) == 0)
  {
LABEL_41:
    if ((v19 & 0x200) == 0) {
      goto LABEL_42;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v27 = *((_DWORD *)a2 + 29);
  *(_DWORD *)(this + 152) |= 0x2000u;
  *(_DWORD *)(this + 116) = v27;
  int v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x200) == 0)
  {
LABEL_42:
    if ((v19 & 0x1000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_55:
  int v28 = *((_DWORD *)a2 + 25);
  *(_DWORD *)(this + 152) |= 0x200u;
  *(_DWORD *)(this + 100) = v28;
  if ((*((_DWORD *)a2 + 38) & 0x1000) != 0)
  {
LABEL_43:
    int v20 = *((_DWORD *)a2 + 28);
    *(_DWORD *)(this + 152) |= 0x1000u;
    *(_DWORD *)(this + 112) = v20;
  }
LABEL_44:
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 154))
  {
    int v21 = *((_DWORD *)a2 + 32);
    *(_DWORD *)(this + 152) |= 0x10000u;
    *(_DWORD *)(this + 128) = v21;
  }
  return this;
}

CMMsl *CMMsl::StepCountEntry::operator=(CMMsl *a1, const CMMsl::StepCountEntry *a2)
{
  if (a1 != a2)
  {
    CMMsl::StepCountEntry::StepCountEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntry *)v5, v3);
    CMMsl::StepCountEntry::~StepCountEntry((CMMsl::StepCountEntry *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepCountEntry *a2, CMMsl::StepCountEntry *a3)
{
  int v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v4;
  uint64_t v5 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  int v7 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  int v10 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v10;
  int v11 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  int v15 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v15;
  uint64_t v16 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 148);
  *((unsigned char *)this + 148) = *((unsigned char *)a2 + 148);
  *((unsigned char *)a2 + 148) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 149);
  *((unsigned char *)this + 149) = *((unsigned char *)a2 + 149);
  *((unsigned char *)a2 + 149) = v16;
  uint64_t v17 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v17;
  LODWORD(v17) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v17;
  LODWORD(v17) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v17;
  LODWORD(v17) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v17;
  LODWORD(v17) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v17;
  LODWORD(v17) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v17;
  LODWORD(v17) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v17;
  LODWORD(v17) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v17;
  LODWORD(v17) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v17;
  uint64_t v18 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v18;
  LODWORD(v18) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v18;
  return result;
}

uint64_t CMMsl::StepCountEntry::StepCountEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706452D8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v5 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v4;
  if (v5) {
    sub_2572C6E48(v5);
  }
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(unsigned char *)(a1 + 149) = *(unsigned char *)(a2 + 149);
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  return a1;
}

CMMsl *CMMsl::StepCountEntry::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepCountEntry::StepCountEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntry *)v5, v3);
    CMMsl::StepCountEntry::~StepCountEntry((CMMsl::StepCountEntry *)v5);
  }
  return a1;
}

uint64_t CMMsl::StepCountEntry::formatText(CMMsl::StepCountEntry *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "accelerometerPace");
  }
  int v6 = *((_DWORD *)this + 38);
  if (v6)
  {
    PB::TextFormatter::format(a2, "activeTime", *((double *)this + 2));
    int v6 = *((_DWORD *)this + 38);
    if ((v6 & 0x100) == 0)
    {
LABEL_5:
      if ((v6 & 2) == 0) {
        goto LABEL_6;
      }
      goto LABEL_38;
    }
  }
  else if ((v6 & 0x100) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "count");
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 2) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "currentCadence", *((double *)this + 3));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "currentPace", *((double *)this + 4));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "distance", *((double *)this + 5));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x200) == 0)
  {
LABEL_9:
    if ((v6 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "distanceSource");
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x400) == 0)
  {
LABEL_10:
    if ((v6 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "elevationAscended");
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x800) == 0)
  {
LABEL_11:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "elevationDescended");
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x1000) == 0)
  {
LABEL_12:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "falseStepDetectorState");
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x2000) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "falseStepsSuppressed");
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "firstStepTime", *((double *)this + 6));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x4000) == 0)
  {
LABEL_15:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "floorsAscended");
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x8000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "floorsDescended");
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x200000) == 0)
  {
LABEL_17:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "isOdometerDistance");
  if ((*((_DWORD *)this + 38) & 0x400000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(a2, "isOdometerPace");
LABEL_19:
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "movementStats");
  }
  int v8 = *((_DWORD *)this + 38);
  if ((v8 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "paceSource");
    int v8 = *((_DWORD *)this + 38);
    if ((v8 & 0x20000) == 0)
    {
LABEL_23:
      if ((v8 & 0x40000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_53;
    }
  }
  else if ((v8 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState");
  int v8 = *((_DWORD *)this + 38);
  if ((v8 & 0x40000) == 0)
  {
LABEL_24:
    if ((v8 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "pushCount");
  int v8 = *((_DWORD *)this + 38);
  if ((v8 & 0x20) == 0)
  {
LABEL_25:
    if ((v8 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "rawDistance", *((double *)this + 8));
  if ((*((_DWORD *)this + 38) & 0x80000) != 0) {
LABEL_26:
  }
    PB::TextFormatter::format(a2, "recordId");
LABEL_27:
  if (*((void *)this + 9)) {
    PB::TextFormatter::format();
  }
  int v9 = *((_DWORD *)this + 38);
  if ((v9 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 10));
    int v9 = *((_DWORD *)this + 38);
    if ((v9 & 0x80) == 0)
    {
LABEL_31:
      if ((v9 & 0x100000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_31;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 11));
  if ((*((_DWORD *)this + 38) & 0x100000) != 0) {
LABEL_32:
  }
    PB::TextFormatter::format(a2, "workoutType");
LABEL_33:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::StepCountEntry::readFrom(CMMsl::StepCountEntry *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 38) |= 0x80u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_71;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v21);
        goto LABEL_245;
      case 2u:
        *((_DWORD *)this + 38) |= 0x40u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_71;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v22);
        goto LABEL_245;
      case 3u:
        *((_DWORD *)this + 38) |= 0x10u;
        unint64_t v23 = *((void *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
          goto LABEL_71;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v23);
        goto LABEL_245;
      case 4u:
        *((_DWORD *)this + 38) |= 0x100u;
        unint64_t v24 = *((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        uint64_t v26 = *(void *)a2;
        if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          do
          {
            unint64_t v30 = v24 + 1;
            *((void *)a2 + 1) = v24 + 1;
            char v31 = *(unsigned char *)(v26 + v24);
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if ((v31 & 0x80) == 0) {
              goto LABEL_249;
            }
            v27 += 7;
            unint64_t v24 = v30;
            BOOL v14 = v28++ > 8;
          }
          while (!v14);
LABEL_155:
          LODWORD(v29) = 0;
          goto LABEL_249;
        }
        char v141 = 0;
        unsigned int v142 = 0;
        uint64_t v29 = 0;
        if (v25 <= v24) {
          unint64_t v25 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v25 == v24)
          {
            LODWORD(v29) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v143 = v24 + 1;
            char v144 = *(unsigned char *)(v26 + v24);
            *((void *)a2 + 1) = v143;
            v29 |= (unint64_t)(v144 & 0x7F) << v141;
            if (v144 < 0)
            {
              v141 += 7;
              unint64_t v24 = v143;
              BOOL v14 = v142++ > 8;
              if (v14) {
                goto LABEL_155;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v29) = 0;
            }
          }
          break;
        }
LABEL_249:
        *((_DWORD *)this + 24) = v29;
        goto LABEL_20;
      case 5u:
        *((_DWORD *)this + 38) |= 8u;
        unint64_t v32 = *((void *)a2 + 1);
        if (v32 > 0xFFFFFFFFFFFFFFF7 || v32 + 8 > *((void *)a2 + 2)) {
          goto LABEL_71;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v32);
        goto LABEL_245;
      case 6u:
        *((_DWORD *)this + 38) |= 0x20u;
        unint64_t v33 = *((void *)a2 + 1);
        if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((void *)a2 + 2)) {
          goto LABEL_71;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v33);
        goto LABEL_245;
      case 7u:
        *((_DWORD *)this + 38) |= 0x4000u;
        unint64_t v34 = *((void *)a2 + 1);
        unint64_t v35 = *((void *)a2 + 2);
        uint64_t v36 = *(void *)a2;
        if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
        {
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v39 = 0;
          do
          {
            unint64_t v40 = v34 + 1;
            *((void *)a2 + 1) = v34 + 1;
            char v41 = *(unsigned char *)(v36 + v34);
            v39 |= (unint64_t)(v41 & 0x7F) << v37;
            if ((v41 & 0x80) == 0) {
              goto LABEL_253;
            }
            v37 += 7;
            unint64_t v34 = v40;
            BOOL v14 = v38++ > 8;
          }
          while (!v14);
LABEL_162:
          LODWORD(v39) = 0;
          goto LABEL_253;
        }
        char v145 = 0;
        unsigned int v146 = 0;
        uint64_t v39 = 0;
        if (v35 <= v34) {
          unint64_t v35 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v35 == v34)
          {
            LODWORD(v39) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v147 = v34 + 1;
            char v148 = *(unsigned char *)(v36 + v34);
            *((void *)a2 + 1) = v147;
            v39 |= (unint64_t)(v148 & 0x7F) << v145;
            if (v148 < 0)
            {
              v145 += 7;
              unint64_t v34 = v147;
              BOOL v14 = v146++ > 8;
              if (v14) {
                goto LABEL_162;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v39) = 0;
            }
          }
          break;
        }
LABEL_253:
        *((_DWORD *)this + 30) = v39;
        goto LABEL_20;
      case 8u:
        *((_DWORD *)this + 38) |= 0x8000u;
        unint64_t v42 = *((void *)a2 + 1);
        unint64_t v43 = *((void *)a2 + 2);
        uint64_t v44 = *(void *)a2;
        if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
        {
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v47 = 0;
          do
          {
            unint64_t v48 = v42 + 1;
            *((void *)a2 + 1) = v42 + 1;
            char v49 = *(unsigned char *)(v44 + v42);
            v47 |= (unint64_t)(v49 & 0x7F) << v45;
            if ((v49 & 0x80) == 0) {
              goto LABEL_257;
            }
            v45 += 7;
            unint64_t v42 = v48;
            BOOL v14 = v46++ > 8;
          }
          while (!v14);
LABEL_169:
          LODWORD(v47) = 0;
          goto LABEL_257;
        }
        char v149 = 0;
        unsigned int v150 = 0;
        uint64_t v47 = 0;
        if (v43 <= v42) {
          unint64_t v43 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v43 == v42)
          {
            LODWORD(v47) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v151 = v42 + 1;
            char v152 = *(unsigned char *)(v44 + v42);
            *((void *)a2 + 1) = v151;
            v47 |= (unint64_t)(v152 & 0x7F) << v149;
            if (v152 < 0)
            {
              v149 += 7;
              unint64_t v42 = v151;
              BOOL v14 = v150++ > 8;
              if (v14) {
                goto LABEL_169;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v47) = 0;
            }
          }
          break;
        }
LABEL_257:
        *((_DWORD *)this + 31) = v47;
        goto LABEL_20;
      case 9u:
        *((_DWORD *)this + 38) |= 4u;
        unint64_t v50 = *((void *)a2 + 1);
        if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)a2 + 2)) {
          goto LABEL_71;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v50);
        goto LABEL_245;
      case 0xAu:
        *((_DWORD *)this + 38) |= 2u;
        unint64_t v51 = *((void *)a2 + 1);
        if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((void *)a2 + 2)) {
          goto LABEL_71;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v51);
        goto LABEL_245;
      case 0xBu:
        *((_DWORD *)this + 38) |= 1u;
        unint64_t v52 = *((void *)a2 + 1);
        if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v52);
LABEL_245:
          *((void *)a2 + 1) += 8;
        }
        else
        {
LABEL_71:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 0xCu:
        *((_DWORD *)this + 38) |= 0x80000u;
        unint64_t v53 = *((void *)a2 + 1);
        unint64_t v54 = *((void *)a2 + 2);
        uint64_t v55 = *(void *)a2;
        if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v58 = 0;
          do
          {
            unint64_t v59 = v53 + 1;
            *((void *)a2 + 1) = v53 + 1;
            char v60 = *(unsigned char *)(v55 + v53);
            v58 |= (unint64_t)(v60 & 0x7F) << v56;
            if ((v60 & 0x80) == 0) {
              goto LABEL_261;
            }
            v56 += 7;
            unint64_t v53 = v59;
            BOOL v14 = v57++ > 8;
          }
          while (!v14);
LABEL_176:
          LODWORD(v58) = 0;
          goto LABEL_261;
        }
        char v153 = 0;
        unsigned int v154 = 0;
        uint64_t v58 = 0;
        if (v54 <= v53) {
          unint64_t v54 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v54 == v53)
          {
            LODWORD(v58) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v155 = v53 + 1;
            char v156 = *(unsigned char *)(v55 + v53);
            *((void *)a2 + 1) = v155;
            v58 |= (unint64_t)(v156 & 0x7F) << v153;
            if (v156 < 0)
            {
              v153 += 7;
              unint64_t v53 = v155;
              BOOL v14 = v154++ > 8;
              if (v14) {
                goto LABEL_176;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v58) = 0;
            }
          }
          break;
        }
LABEL_261:
        *((_DWORD *)this + 35) = v58;
        goto LABEL_20;
      case 0xDu:
        operator new();
      case 0xEu:
        *((_DWORD *)this + 38) |= 0x200000u;
        unint64_t v61 = *((void *)a2 + 1);
        if (v61 >= *((void *)a2 + 2))
        {
          BOOL v64 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v62 = v61 + 1;
          int v63 = *(unsigned __int8 *)(*(void *)a2 + v61);
          *((void *)a2 + 1) = v62;
          BOOL v64 = v63 != 0;
        }
        *((unsigned char *)this + 148) = v64;
        goto LABEL_20;
      case 0xFu:
        *((_DWORD *)this + 38) |= 0x400000u;
        unint64_t v65 = *((void *)a2 + 1);
        if (v65 >= *((void *)a2 + 2))
        {
          BOOL v68 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v66 = v65 + 1;
          int v67 = *(unsigned __int8 *)(*(void *)a2 + v65);
          *((void *)a2 + 1) = v66;
          BOOL v68 = v67 != 0;
        }
        *((unsigned char *)this + 149) = v68;
        goto LABEL_20;
      case 0x10u:
        operator new();
      case 0x11u:
        *((_DWORD *)this + 38) |= 0x40000u;
        unint64_t v69 = *((void *)a2 + 1);
        unint64_t v70 = *((void *)a2 + 2);
        uint64_t v71 = *(void *)a2;
        if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
        {
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v74 = 0;
          do
          {
            unint64_t v75 = v69 + 1;
            *((void *)a2 + 1) = v69 + 1;
            char v76 = *(unsigned char *)(v71 + v69);
            v74 |= (unint64_t)(v76 & 0x7F) << v72;
            if ((v76 & 0x80) == 0) {
              goto LABEL_265;
            }
            v72 += 7;
            unint64_t v69 = v75;
            BOOL v14 = v73++ > 8;
          }
          while (!v14);
LABEL_187:
          LODWORD(v74) = 0;
          goto LABEL_265;
        }
        char v157 = 0;
        unsigned int v158 = 0;
        uint64_t v74 = 0;
        if (v70 <= v69) {
          unint64_t v70 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v70 == v69)
          {
            LODWORD(v74) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v159 = v69 + 1;
            char v160 = *(unsigned char *)(v71 + v69);
            *((void *)a2 + 1) = v159;
            v74 |= (unint64_t)(v160 & 0x7F) << v157;
            if (v160 < 0)
            {
              v157 += 7;
              unint64_t v69 = v159;
              BOOL v14 = v158++ > 8;
              if (v14) {
                goto LABEL_187;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v74) = 0;
            }
          }
          break;
        }
LABEL_265:
        *((_DWORD *)this + 34) = v74;
        goto LABEL_20;
      case 0x12u:
        *((_DWORD *)this + 38) |= 0x100000u;
        unint64_t v77 = *((void *)a2 + 1);
        unint64_t v78 = *((void *)a2 + 2);
        uint64_t v79 = *(void *)a2;
        if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
        {
          char v80 = 0;
          unsigned int v81 = 0;
          uint64_t v82 = 0;
          do
          {
            unint64_t v83 = v77 + 1;
            *((void *)a2 + 1) = v77 + 1;
            char v84 = *(unsigned char *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0) {
              goto LABEL_269;
            }
            v80 += 7;
            unint64_t v77 = v83;
            BOOL v14 = v81++ > 8;
          }
          while (!v14);
LABEL_194:
          LODWORD(v82) = 0;
          goto LABEL_269;
        }
        char v161 = 0;
        unsigned int v162 = 0;
        uint64_t v82 = 0;
        if (v78 <= v77) {
          unint64_t v78 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v78 == v77)
          {
            LODWORD(v82) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v163 = v77 + 1;
            char v164 = *(unsigned char *)(v79 + v77);
            *((void *)a2 + 1) = v163;
            v82 |= (unint64_t)(v164 & 0x7F) << v161;
            if (v164 < 0)
            {
              v161 += 7;
              unint64_t v77 = v163;
              BOOL v14 = v162++ > 8;
              if (v14) {
                goto LABEL_194;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v82) = 0;
            }
          }
          break;
        }
LABEL_269:
        *((_DWORD *)this + 36) = v82;
        goto LABEL_20;
      case 0x13u:
        *((_DWORD *)this + 38) |= 0x20000u;
        unint64_t v85 = *((void *)a2 + 1);
        unint64_t v86 = *((void *)a2 + 2);
        uint64_t v87 = *(void *)a2;
        if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
        {
          char v88 = 0;
          unsigned int v89 = 0;
          uint64_t v90 = 0;
          do
          {
            unint64_t v91 = v85 + 1;
            *((void *)a2 + 1) = v85 + 1;
            char v92 = *(unsigned char *)(v87 + v85);
            v90 |= (unint64_t)(v92 & 0x7F) << v88;
            if ((v92 & 0x80) == 0) {
              goto LABEL_273;
            }
            v88 += 7;
            unint64_t v85 = v91;
            BOOL v14 = v89++ > 8;
          }
          while (!v14);
LABEL_201:
          LODWORD(v90) = 0;
          goto LABEL_273;
        }
        char v165 = 0;
        unsigned int v166 = 0;
        uint64_t v90 = 0;
        if (v86 <= v85) {
          unint64_t v86 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v167 = v85 + 1;
            char v168 = *(unsigned char *)(v87 + v85);
            *((void *)a2 + 1) = v167;
            v90 |= (unint64_t)(v168 & 0x7F) << v165;
            if (v168 < 0)
            {
              v165 += 7;
              unint64_t v85 = v167;
              BOOL v14 = v166++ > 8;
              if (v14) {
                goto LABEL_201;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v90) = 0;
            }
          }
          break;
        }
LABEL_273:
        *((_DWORD *)this + 33) = v90;
        goto LABEL_20;
      case 0x14u:
        *((_DWORD *)this + 38) |= 0x400u;
        unint64_t v93 = *((void *)a2 + 1);
        unint64_t v94 = *((void *)a2 + 2);
        uint64_t v95 = *(void *)a2;
        if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
        {
          char v96 = 0;
          unsigned int v97 = 0;
          uint64_t v98 = 0;
          do
          {
            unint64_t v99 = v93 + 1;
            *((void *)a2 + 1) = v93 + 1;
            char v100 = *(unsigned char *)(v95 + v93);
            v98 |= (unint64_t)(v100 & 0x7F) << v96;
            if ((v100 & 0x80) == 0) {
              goto LABEL_277;
            }
            v96 += 7;
            unint64_t v93 = v99;
            BOOL v14 = v97++ > 8;
          }
          while (!v14);
LABEL_208:
          LODWORD(v98) = 0;
          goto LABEL_277;
        }
        char v169 = 0;
        unsigned int v170 = 0;
        uint64_t v98 = 0;
        if (v94 <= v93) {
          unint64_t v94 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v94 == v93)
          {
            LODWORD(v98) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v171 = v93 + 1;
            char v172 = *(unsigned char *)(v95 + v93);
            *((void *)a2 + 1) = v171;
            v98 |= (unint64_t)(v172 & 0x7F) << v169;
            if (v172 < 0)
            {
              v169 += 7;
              unint64_t v93 = v171;
              BOOL v14 = v170++ > 8;
              if (v14) {
                goto LABEL_208;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v98) = 0;
            }
          }
          break;
        }
LABEL_277:
        *((_DWORD *)this + 26) = v98;
        goto LABEL_20;
      case 0x15u:
        *((_DWORD *)this + 38) |= 0x800u;
        unint64_t v101 = *((void *)a2 + 1);
        unint64_t v102 = *((void *)a2 + 2);
        uint64_t v103 = *(void *)a2;
        if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
        {
          char v104 = 0;
          unsigned int v105 = 0;
          uint64_t v106 = 0;
          do
          {
            unint64_t v107 = v101 + 1;
            *((void *)a2 + 1) = v101 + 1;
            char v108 = *(unsigned char *)(v103 + v101);
            v106 |= (unint64_t)(v108 & 0x7F) << v104;
            if ((v108 & 0x80) == 0) {
              goto LABEL_281;
            }
            v104 += 7;
            unint64_t v101 = v107;
            BOOL v14 = v105++ > 8;
          }
          while (!v14);
LABEL_215:
          LODWORD(v106) = 0;
          goto LABEL_281;
        }
        char v173 = 0;
        unsigned int v174 = 0;
        uint64_t v106 = 0;
        if (v102 <= v101) {
          unint64_t v102 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v102 == v101)
          {
            LODWORD(v106) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v175 = v101 + 1;
            char v176 = *(unsigned char *)(v103 + v101);
            *((void *)a2 + 1) = v175;
            v106 |= (unint64_t)(v176 & 0x7F) << v173;
            if (v176 < 0)
            {
              v173 += 7;
              unint64_t v101 = v175;
              BOOL v14 = v174++ > 8;
              if (v14) {
                goto LABEL_215;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v106) = 0;
            }
          }
          break;
        }
LABEL_281:
        *((_DWORD *)this + 27) = v106;
        goto LABEL_20;
      case 0x16u:
        *((_DWORD *)this + 38) |= 0x2000u;
        unint64_t v109 = *((void *)a2 + 1);
        unint64_t v110 = *((void *)a2 + 2);
        uint64_t v111 = *(void *)a2;
        if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
        {
          char v112 = 0;
          unsigned int v113 = 0;
          uint64_t v114 = 0;
          do
          {
            unint64_t v115 = v109 + 1;
            *((void *)a2 + 1) = v109 + 1;
            char v116 = *(unsigned char *)(v111 + v109);
            v114 |= (unint64_t)(v116 & 0x7F) << v112;
            if ((v116 & 0x80) == 0) {
              goto LABEL_285;
            }
            v112 += 7;
            unint64_t v109 = v115;
            BOOL v14 = v113++ > 8;
          }
          while (!v14);
LABEL_222:
          LODWORD(v114) = 0;
          goto LABEL_285;
        }
        char v177 = 0;
        unsigned int v178 = 0;
        uint64_t v114 = 0;
        if (v110 <= v109) {
          unint64_t v110 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v110 == v109)
          {
            LODWORD(v114) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v179 = v109 + 1;
            char v180 = *(unsigned char *)(v111 + v109);
            *((void *)a2 + 1) = v179;
            v114 |= (unint64_t)(v180 & 0x7F) << v177;
            if (v180 < 0)
            {
              v177 += 7;
              unint64_t v109 = v179;
              BOOL v14 = v178++ > 8;
              if (v14) {
                goto LABEL_222;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v114) = 0;
            }
          }
          break;
        }
LABEL_285:
        *((_DWORD *)this + 29) = v114;
        goto LABEL_20;
      case 0x17u:
        *((_DWORD *)this + 38) |= 0x200u;
        unint64_t v117 = *((void *)a2 + 1);
        unint64_t v118 = *((void *)a2 + 2);
        uint64_t v119 = *(void *)a2;
        if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
        {
          char v120 = 0;
          unsigned int v121 = 0;
          uint64_t v122 = 0;
          do
          {
            unint64_t v123 = v117 + 1;
            *((void *)a2 + 1) = v117 + 1;
            char v124 = *(unsigned char *)(v119 + v117);
            v122 |= (unint64_t)(v124 & 0x7F) << v120;
            if ((v124 & 0x80) == 0) {
              goto LABEL_289;
            }
            v120 += 7;
            unint64_t v117 = v123;
            BOOL v14 = v121++ > 8;
          }
          while (!v14);
LABEL_229:
          LODWORD(v122) = 0;
          goto LABEL_289;
        }
        char v181 = 0;
        unsigned int v182 = 0;
        uint64_t v122 = 0;
        if (v118 <= v117) {
          unint64_t v118 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v118 == v117)
          {
            LODWORD(v122) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v183 = v117 + 1;
            char v184 = *(unsigned char *)(v119 + v117);
            *((void *)a2 + 1) = v183;
            v122 |= (unint64_t)(v184 & 0x7F) << v181;
            if (v184 < 0)
            {
              v181 += 7;
              unint64_t v117 = v183;
              BOOL v14 = v182++ > 8;
              if (v14) {
                goto LABEL_229;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v122) = 0;
            }
          }
          break;
        }
LABEL_289:
        *((_DWORD *)this + 25) = v122;
        goto LABEL_20;
      case 0x18u:
        *((_DWORD *)this + 38) |= 0x1000u;
        unint64_t v125 = *((void *)a2 + 1);
        unint64_t v126 = *((void *)a2 + 2);
        uint64_t v127 = *(void *)a2;
        if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
        {
          char v128 = 0;
          unsigned int v129 = 0;
          uint64_t v130 = 0;
          do
          {
            unint64_t v131 = v125 + 1;
            *((void *)a2 + 1) = v125 + 1;
            char v132 = *(unsigned char *)(v127 + v125);
            v130 |= (unint64_t)(v132 & 0x7F) << v128;
            if ((v132 & 0x80) == 0) {
              goto LABEL_293;
            }
            v128 += 7;
            unint64_t v125 = v131;
            BOOL v14 = v129++ > 8;
          }
          while (!v14);
LABEL_236:
          LODWORD(v130) = 0;
          goto LABEL_293;
        }
        char v185 = 0;
        unsigned int v186 = 0;
        uint64_t v130 = 0;
        if (v126 <= v125) {
          unint64_t v126 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v126 == v125)
          {
            LODWORD(v130) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v187 = v125 + 1;
            char v188 = *(unsigned char *)(v127 + v125);
            *((void *)a2 + 1) = v187;
            v130 |= (unint64_t)(v188 & 0x7F) << v185;
            if (v188 < 0)
            {
              v185 += 7;
              unint64_t v125 = v187;
              BOOL v14 = v186++ > 8;
              if (v14) {
                goto LABEL_236;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v130) = 0;
            }
          }
          break;
        }
LABEL_293:
        *((_DWORD *)this + 28) = v130;
        goto LABEL_20;
      case 0x19u:
        operator new();
      case 0x1Au:
        *((_DWORD *)this + 38) |= 0x10000u;
        unint64_t v133 = *((void *)a2 + 1);
        unint64_t v134 = *((void *)a2 + 2);
        uint64_t v135 = *(void *)a2;
        if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
        {
          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v138 = 0;
          do
          {
            unint64_t v139 = v133 + 1;
            *((void *)a2 + 1) = v133 + 1;
            char v140 = *(unsigned char *)(v135 + v133);
            v138 |= (unint64_t)(v140 & 0x7F) << v136;
            if ((v140 & 0x80) == 0) {
              goto LABEL_297;
            }
            v136 += 7;
            unint64_t v133 = v139;
            BOOL v14 = v137++ > 8;
          }
          while (!v14);
LABEL_243:
          LODWORD(v138) = 0;
          goto LABEL_297;
        }
        char v189 = 0;
        unsigned int v190 = 0;
        uint64_t v138 = 0;
        if (v134 <= v133) {
          unint64_t v134 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v134 == v133)
      {
        LODWORD(v138) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_297;
      }
      unint64_t v191 = v133 + 1;
      char v192 = *(unsigned char *)(v135 + v133);
      *((void *)a2 + 1) = v191;
      v138 |= (unint64_t)(v192 & 0x7F) << v189;
      if ((v192 & 0x80) == 0) {
        break;
      }
      v189 += 7;
      unint64_t v133 = v191;
      BOOL v14 = v190++ > 8;
      if (v14) {
        goto LABEL_243;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v138) = 0;
    }
LABEL_297:
    *((_DWORD *)this + 32) = v138;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::StepCountEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 152);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 88));
    int v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_DWORD *)(v3 + 152) & 0x80000) != 0) {
LABEL_13:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_14:
  if (*(void *)(v3 + 72)) {
    this = PB::Writer::write();
  }
  int v5 = *(_DWORD *)(v3 + 152);
  if ((v5 & 0x200000) != 0)
  {
    this = PB::Writer::write(a2);
    int v5 = *(_DWORD *)(v3 + 152);
  }
  if ((v5 & 0x400000) != 0) {
    this = PB::Writer::write(a2);
  }
  int v6 = *(const PB::Base **)(v3 + 8);
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x40000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    int v7 = *(_DWORD *)(v3 + 152);
    if ((v7 & 0x100000) == 0)
    {
LABEL_24:
      if ((v7 & 0x20000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_49;
    }
  }
  else if ((v7 & 0x100000) == 0)
  {
    goto LABEL_24;
  }
  this = PB::Writer::writeVarInt(a2);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x20000) == 0)
  {
LABEL_25:
    if ((v7 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x400) == 0)
  {
LABEL_26:
    if ((v7 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x800) == 0)
  {
LABEL_27:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x2000) == 0)
  {
LABEL_28:
    if ((v7 & 0x200) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x200) == 0)
  {
LABEL_29:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 152) & 0x1000) != 0) {
LABEL_30:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_31:
  uint64_t v8 = *(const PB::Base **)(v3 + 56);
  if (v8) {
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  if (*(unsigned char *)(v3 + 154))
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

unint64_t CMMsl::StepCountEntry::hash_value(CMMsl::StepCountEntry *this)
{
  int v2 = *((_DWORD *)this + 38);
  if ((v2 & 0x80) == 0)
  {
    double v37 = 0.0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_34:
    double v36 = 0.0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_35:
    double v35 = 0.0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
  double v12 = *((double *)this + 11);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  double v37 = v12;
  if ((v2 & 0x40) == 0) {
    goto LABEL_34;
  }
LABEL_3:
  double v3 = *((double *)this + 10);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v36 = v3;
  if ((v2 & 0x10) == 0) {
    goto LABEL_35;
  }
LABEL_6:
  double v4 = *((double *)this + 6);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  double v35 = v4;
  if ((v2 & 0x100) != 0)
  {
LABEL_9:
    uint64_t v34 = *((unsigned int *)this + 24);
    if ((v2 & 8) != 0) {
      goto LABEL_10;
    }
LABEL_37:
    double v33 = 0.0;
    if ((v2 & 0x20) != 0) {
      goto LABEL_13;
    }
LABEL_38:
    double v32 = 0.0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_36:
  uint64_t v34 = 0;
  if ((v2 & 8) == 0) {
    goto LABEL_37;
  }
LABEL_10:
  double v5 = *((double *)this + 5);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  double v33 = v5;
  if ((v2 & 0x20) == 0) {
    goto LABEL_38;
  }
LABEL_13:
  double v6 = *((double *)this + 8);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  double v32 = v6;
  if ((v2 & 0x4000) != 0)
  {
LABEL_16:
    uint64_t v31 = *((unsigned int *)this + 30);
    if ((v2 & 0x8000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v31 = 0;
  if ((v2 & 0x8000) != 0)
  {
LABEL_17:
    uint64_t v7 = *((unsigned int *)this + 31);
    if ((v2 & 4) != 0) {
      goto LABEL_18;
    }
LABEL_41:
    uint64_t v8 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_22;
    }
LABEL_42:
    uint64_t v9 = 0;
    if (v2) {
      goto LABEL_26;
    }
    goto LABEL_43;
  }
LABEL_40:
  uint64_t v7 = 0;
  if ((v2 & 4) == 0) {
    goto LABEL_41;
  }
LABEL_18:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 4);
  }
  if ((v2 & 2) == 0) {
    goto LABEL_42;
  }
LABEL_22:
  if (*((double *)this + 3) == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)this + 3);
  }
  if (v2)
  {
LABEL_26:
    if (*((double *)this + 2) == 0.0) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = *((void *)this + 2);
    }
    if ((v2 & 0x80000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v10 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_30:
    uint64_t v11 = *((int *)this + 35);
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v11 = 0;
LABEL_45:
  uint64_t v13 = *((void *)this + 9);
  if (v13)
  {
    unint64_t v14 = sub_2572C6F9C(v13);
    if ((v2 & 0x200000) == 0) {
      goto LABEL_47;
    }
LABEL_50:
    uint64_t v15 = *((unsigned __int8 *)this + 148);
    if ((v2 & 0x400000) != 0) {
      goto LABEL_48;
    }
    goto LABEL_51;
  }
  unint64_t v14 = 0;
  if ((v2 & 0x200000) != 0) {
    goto LABEL_50;
  }
LABEL_47:
  uint64_t v15 = 0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_48:
    uint64_t v16 = *((unsigned __int8 *)this + 149);
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v16 = 0;
LABEL_52:
  unint64_t v17 = *((void *)this + 1);
  if (v17) {
    unint64_t v17 = CMMsl::AccelerometerPace::hash_value((CMMsl::AccelerometerPace *)v17);
  }
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v18 = *((unsigned int *)this + 34);
    if ((v2 & 0x100000) != 0)
    {
LABEL_56:
      uint64_t v19 = *((unsigned int *)this + 36);
      if ((v2 & 0x20000) != 0) {
        goto LABEL_57;
      }
      goto LABEL_65;
    }
  }
  else
  {
    uint64_t v18 = 0;
    if ((v2 & 0x100000) != 0) {
      goto LABEL_56;
    }
  }
  uint64_t v19 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_57:
    uint64_t v20 = *((unsigned int *)this + 33);
    if ((v2 & 0x400) != 0) {
      goto LABEL_58;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v20 = 0;
  if ((v2 & 0x400) != 0)
  {
LABEL_58:
    uint64_t v21 = *((unsigned int *)this + 26);
    if ((v2 & 0x800) != 0) {
      goto LABEL_59;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v21 = 0;
  if ((v2 & 0x800) != 0)
  {
LABEL_59:
    uint64_t v22 = *((unsigned int *)this + 27);
    if ((v2 & 0x2000) != 0) {
      goto LABEL_60;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v22 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_60:
    uint64_t v23 = *((unsigned int *)this + 29);
    if ((v2 & 0x200) != 0) {
      goto LABEL_61;
    }
LABEL_69:
    uint64_t v24 = 0;
    if ((v2 & 0x1000) != 0) {
      goto LABEL_62;
    }
LABEL_70:
    uint64_t v25 = 0;
    goto LABEL_71;
  }
LABEL_68:
  uint64_t v23 = 0;
  if ((v2 & 0x200) == 0) {
    goto LABEL_69;
  }
LABEL_61:
  uint64_t v24 = *((unsigned int *)this + 25);
  if ((v2 & 0x1000) == 0) {
    goto LABEL_70;
  }
LABEL_62:
  uint64_t v25 = *((unsigned int *)this + 28);
LABEL_71:
  uint64_t v26 = *((void *)this + 7);
  if (v26)
  {
    float v27 = *(float *)(v26 + 8);
    BOOL v28 = v27 == 0.0 || (*(unsigned char *)(v26 + 12) & 1) == 0;
    uint64_t v26 = LODWORD(v27);
    if (v28) {
      uint64_t v26 = 0;
    }
  }
  if ((v2 & 0x10000) != 0) {
    uint64_t v29 = *((int *)this + 32);
  }
  else {
    uint64_t v29 = 0;
  }
  return *(void *)&v36 ^ *(void *)&v37 ^ *(void *)&v35 ^ v34 ^ *(void *)&v33 ^ *(void *)&v32 ^ v31 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v29;
}

uint64_t CMMsl::StepCountEntry::makeAccelerometerPace(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::StepCountEntry::makeMovementStats(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

void CMMsl::StepCountEntryAddition::~StepCountEntryAddition(CMMsl::StepCountEntryAddition *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::StepCountEntryAddition::StepCountEntryAddition(uint64_t this, const CMMsl::StepCountEntryAddition *a2)
{
  *(void *)this = &unk_270645310;
  *(_DWORD *)(this + 72) = 0;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *((void *)a2 + 6);
    __int16 v3 = 32;
    *(_WORD *)(this + 72) = 32;
    *(void *)(this + 48) = v4;
    __int16 v2 = *((_WORD *)a2 + 36);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 16);
    v3 |= 0x80u;
    *(_WORD *)(this + 72) = v3;
    *(_DWORD *)(this + 64) = v5;
    __int16 v2 = *((_WORD *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 72) = v3;
    *(void *)(this + 24) = v6;
    __int16 v2 = *((_WORD *)a2 + 36);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 32) = v7;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  char v9 = *((unsigned char *)a2 + 69);
  v3 |= 0x200u;
  *(_WORD *)(this + 72) = v3;
  *(unsigned char *)(this + 69) = v9;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v10 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 8) = v10;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v11 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 56) = v11;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  char v12 = *((unsigned char *)a2 + 70);
  v3 |= 0x400u;
  *(_WORD *)(this + 72) = v3;
  *(unsigned char *)(this + 70) = v12;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0) {
      return this;
    }
LABEL_24:
    char v14 = *((unsigned char *)a2 + 68);
    *(_WORD *)(this + 72) = v3 | 0x100;
    *(unsigned char *)(this + 68) = v14;
    return this;
  }
LABEL_23:
  uint64_t v13 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 16) = v13;
  if ((*((_WORD *)a2 + 36) & 0x100) != 0) {
    goto LABEL_24;
  }
  return this;
}

CMMsl *CMMsl::StepCountEntryAddition::operator=(CMMsl *a1, const CMMsl::StepCountEntryAddition *a2)
{
  if (a1 != a2)
  {
    CMMsl::StepCountEntryAddition::StepCountEntryAddition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntryAddition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepCountEntryAddition *a2, CMMsl::StepCountEntryAddition *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  int v5 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  LOBYTE(v5) = *((unsigned char *)this + 69);
  *((unsigned char *)this + 69) = *((unsigned char *)a2 + 69);
  *((unsigned char *)a2 + 69) = v5;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  LOBYTE(v5) = *((unsigned char *)this + 70);
  *((unsigned char *)this + 70) = *((unsigned char *)a2 + 70);
  *((unsigned char *)a2 + 70) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v5) = *((unsigned char *)this + 68);
  *((unsigned char *)this + 68) = *((unsigned char *)a2 + 68);
  *((unsigned char *)a2 + 68) = v5;
  return result;
}

double CMMsl::StepCountEntryAddition::StepCountEntryAddition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645310;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 69) = *(unsigned char *)(a2 + 69);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 70) = *(unsigned char *)(a2 + 70);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  return result;
}

CMMsl *CMMsl::StepCountEntryAddition::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepCountEntryAddition::StepCountEntryAddition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntryAddition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::StepCountEntryAddition::formatText(CMMsl::StepCountEntryAddition *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 36);
  if (v5)
  {
    PB::TextFormatter::format(a2, "calibratedDistance", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "energyDeltaDistance", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "energyIsCalibrated");
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "incrementalActiveTime", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "incrementalSteps");
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "lastStepTime", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "odometerSpeed", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "rawPace", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "rawPaceDidJump");
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "stepCadenceDeltaDistance", *((double *)this + 7));
  if ((*((_WORD *)this + 36) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "stepCadenceIsCalibrated");
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::StepCountEntryAddition::readFrom(CMMsl::StepCountEntryAddition *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_77;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 36) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 2u:
        *((_WORD *)this + 36) |= 0x80u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_76;
            }
            unint64_t v34 = v20++;
            char v35 = *(unsigned char *)(v21 + v34);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_75:
              unint64_t v2 = v34 + 1;
              goto LABEL_76;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_75;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_76;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_76:
        *((_DWORD *)this + 16) = v24;
        break;
      case 3u:
        *((_WORD *)this + 36) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 4u:
        *((_WORD *)this + 36) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 5u:
        *((_WORD *)this + 36) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 6u:
        *((_WORD *)this + 36) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 69) = v27;
        break;
      case 7u:
        *((_WORD *)this + 36) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 8u:
        *((_WORD *)this + 36) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 9u:
        *((_WORD *)this + 36) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 70) = v29;
        break;
      case 0xAu:
        *((_WORD *)this + 36) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_71:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_54:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xBu:
        *((_WORD *)this + 36) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v31 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v30 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v31 = v30 != 0;
        }
        *((unsigned char *)this + 68) = v31;
        break;
      default:
        goto LABEL_19;
    }
LABEL_77:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::StepCountEntryAddition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 72);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48));
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    if ((*(_WORD *)(v3 + 72) & 0x100) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x100) == 0) {
    return this;
  }
LABEL_23:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::StepCountEntryAddition::hash_value(CMMsl::StepCountEntryAddition *this)
{
  __int16 v1 = *((_WORD *)this + 36);
  if ((v1 & 0x20) != 0)
  {
    double v2 = *((double *)this + 6);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 16);
      if ((v1 & 4) != 0) {
        goto LABEL_4;
      }
LABEL_29:
      double v4 = 0.0;
      if ((v1 & 8) != 0) {
        goto LABEL_7;
      }
LABEL_30:
      double v5 = 0.0;
      if ((v1 & 0x10) != 0) {
        goto LABEL_10;
      }
LABEL_31:
      double v6 = 0.0;
      if ((*((_WORD *)this + 36) & 0x200) != 0) {
        goto LABEL_13;
      }
      goto LABEL_32;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_29;
  }
LABEL_4:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_30;
  }
LABEL_7:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_31;
  }
LABEL_10:
  double v6 = *((double *)this + 5);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((_WORD *)this + 36) & 0x200) != 0)
  {
LABEL_13:
    uint64_t v7 = *((unsigned __int8 *)this + 69);
    if (v1) {
      goto LABEL_14;
    }
LABEL_33:
    double v8 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_17;
    }
LABEL_34:
    double v9 = 0.0;
    if ((*((_WORD *)this + 36) & 0x400) != 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_32:
  uint64_t v7 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_14:
  double v8 = *((double *)this + 1);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_34;
  }
LABEL_17:
  double v9 = *((double *)this + 7);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((*((_WORD *)this + 36) & 0x400) != 0)
  {
LABEL_20:
    uint64_t v10 = *((unsigned __int8 *)this + 70);
    if ((v1 & 2) != 0) {
      goto LABEL_21;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v10 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_21:
    double v11 = *((double *)this + 2);
    if (v11 == 0.0) {
      double v11 = 0.0;
    }
    if ((*((_WORD *)this + 36) & 0x100) != 0) {
      goto LABEL_24;
    }
LABEL_37:
    uint64_t v12 = 0;
    return v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ *(void *)&v11 ^ v12;
  }
LABEL_36:
  double v11 = 0.0;
  if ((*((_WORD *)this + 36) & 0x100) == 0) {
    goto LABEL_37;
  }
LABEL_24:
  uint64_t v12 = *((unsigned __int8 *)this + 68);
  return v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ *(void *)&v11 ^ v12;
}

void CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult(CMMsl::StepDistanceFusionResult *this)
{
  *(void *)this = &unk_270645348;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::StepDistanceFusionResult::StepDistanceFusionResult(uint64_t this, const CMMsl::StepDistanceFusionResult *a2)
{
  *(void *)this = &unk_270645348;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 100) = 0;
  *(void *)(this + 16) = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  __int16 v2 = *((_WORD *)a2 + 50);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 3);
    *(_WORD *)(this + 100) |= 1u;
    *(void *)(this + 24) = v4;
    __int16 v2 = *((_WORD *)a2 + 50);
    if ((v2 & 2) == 0)
    {
LABEL_7:
      if ((v2 & 0x80) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v5 = *((void *)a2 + 4);
  *(_WORD *)(this + 100) |= 2u;
  *(void *)(this + 32) = v5;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x80) == 0)
  {
LABEL_8:
    if ((v2 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v6 = *((void *)a2 + 10);
  *(_WORD *)(this + 100) |= 0x80u;
  *(void *)(this + 80) = v6;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v7 = *((void *)a2 + 8);
  *(_WORD *)(this + 100) |= 0x20u;
  *(void *)(this + 64) = v7;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v8 = *((void *)a2 + 9);
  *(_WORD *)(this + 100) |= 0x40u;
  *(void *)(this + 72) = v8;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v9 = *((void *)a2 + 5);
  *(_WORD *)(this + 100) |= 4u;
  *(void *)(this + 40) = v9;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v10 = *((void *)a2 + 6);
  *(_WORD *)(this + 100) |= 8u;
  *(void *)(this + 48) = v10;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v11 = *((void *)a2 + 7);
  *(_WORD *)(this + 100) |= 0x10u;
  *(void *)(this + 56) = v11;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v12 = *((unsigned char *)a2 + 96);
  *(_WORD *)(this + 100) |= 0x400u;
  *(unsigned char *)(this + 96) = v12;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0) {
      return this;
    }
    goto LABEL_16;
  }
LABEL_27:
  int v13 = *((_DWORD *)a2 + 23);
  *(_WORD *)(this + 100) |= 0x200u;
  *(_DWORD *)(this + 92) = v13;
  if ((*((_WORD *)a2 + 50) & 0x100) == 0) {
    return this;
  }
LABEL_16:
  int v3 = *((_DWORD *)a2 + 22);
  *(_WORD *)(this + 100) |= 0x100u;
  *(_DWORD *)(this + 88) = v3;
  return this;
}

CMMsl *CMMsl::StepDistanceFusionResult::operator=(CMMsl *a1, const CMMsl::StepDistanceFusionResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::StepDistanceFusionResult::StepDistanceFusionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepDistanceFusionResult *)v5, v3);
    CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult((CMMsl::StepDistanceFusionResult *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepDistanceFusionResult *a2, CMMsl::StepDistanceFusionResult *a3)
{
  int v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  uint64_t v11 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v11;
  uint64_t v12 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v12;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  LOBYTE(v5) = *((unsigned char *)this + 96);
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  *((unsigned char *)a2 + 96) = v5;
  LODWORD(v5) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v5;
  LODWORD(v5) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v5;
  return result;
}

uint64_t CMMsl::StepDistanceFusionResult::StepDistanceFusionResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645348;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return a1;
}

CMMsl *CMMsl::StepDistanceFusionResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepDistanceFusionResult::StepDistanceFusionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepDistanceFusionResult *)v5, v3);
    CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult((CMMsl::StepDistanceFusionResult *)v5);
  }
  return a1;
}

uint64_t CMMsl::StepDistanceFusionResult::formatText(CMMsl::StepDistanceFusionResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "addition");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "fused");
  }
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 0x400) != 0)
  {
    PB::TextFormatter::format(a2, "isVehicular");
    __int16 v7 = *((_WORD *)this + 50);
    if ((v7 & 1) == 0)
    {
LABEL_7:
      if ((v7 & 0x100) == 0) {
        goto LABEL_8;
      }
      goto LABEL_22;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "odometerDeltaDistance", *((double *)this + 3));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 0x100) == 0)
  {
LABEL_8:
    if ((v7 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "odometerQuality");
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 2) == 0)
  {
LABEL_9:
    if ((v7 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "odometerSmoothMeanPace", *((double *)this + 4));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 0x200) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "pedometerDistanceSource");
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "speedStdDevOdometer", *((double *)this + 5));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "speedStdDevPedometer", *((double *)this + 6));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 0x10) == 0)
  {
LABEL_13:
    if ((v7 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "speedStdDevResidualTolerance", *((double *)this + 7));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 0x20) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "totalDistanceCalibratedPedometer", *((double *)this + 8));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 0x40) == 0)
  {
LABEL_15:
    if ((v7 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "totalDistanceFused", *((double *)this + 9));
  if ((*((_WORD *)this + 50) & 0x80) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(a2, "totalDistanceOdometer", *((double *)this + 10));
LABEL_17:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::StepDistanceFusionResult::readFrom(CMMsl::StepDistanceFusionResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        *((_WORD *)this + 50) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v20);
        goto LABEL_82;
      case 4u:
        *((_WORD *)this + 50) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v21);
        goto LABEL_82;
      case 5u:
        *((_WORD *)this + 50) |= 0x80u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v22);
        goto LABEL_82;
      case 6u:
        *((_WORD *)this + 50) |= 0x20u;
        unint64_t v23 = *((void *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v23);
        goto LABEL_82;
      case 7u:
        *((_WORD *)this + 50) |= 0x40u;
        unint64_t v24 = *((void *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v24);
        goto LABEL_82;
      case 8u:
        *((_WORD *)this + 50) |= 4u;
        unint64_t v25 = *((void *)a2 + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v25);
        goto LABEL_82;
      case 9u:
        *((_WORD *)this + 50) |= 8u;
        unint64_t v26 = *((void *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v26);
        goto LABEL_82;
      case 0xAu:
        *((_WORD *)this + 50) |= 0x10u;
        unint64_t v27 = *((void *)a2 + 1);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 7) = *(void *)(*(void *)a2 + v27);
LABEL_82:
          *((void *)a2 + 1) += 8;
        }
        else
        {
LABEL_48:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_91;
      case 0xBu:
        *((_WORD *)this + 50) |= 0x400u;
        unint64_t v28 = *((void *)a2 + 1);
        if (v28 >= *((void *)a2 + 2))
        {
          BOOL v31 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v29 = v28 + 1;
          int v30 = *(unsigned __int8 *)(*(void *)a2 + v28);
          *((void *)a2 + 1) = v29;
          BOOL v31 = v30 != 0;
        }
        *((unsigned char *)this + 96) = v31;
        goto LABEL_91;
      case 0xCu:
        *((_WORD *)this + 50) |= 0x200u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v32 <= 0xFFFFFFFFFFFFFFF5 && v32 + 10 <= v33)
        {
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          do
          {
            unint64_t v38 = v32 + 1;
            *((void *)a2 + 1) = v32 + 1;
            char v39 = *(unsigned char *)(v34 + v32);
            v37 |= (unint64_t)(v39 & 0x7F) << v35;
            if ((v39 & 0x80) == 0) {
              goto LABEL_86;
            }
            v35 += 7;
            unint64_t v32 = v38;
            BOOL v14 = v36++ > 8;
          }
          while (!v14);
LABEL_73:
          LODWORD(v37) = 0;
          goto LABEL_86;
        }
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v37 = 0;
        if (v33 <= v32) {
          unint64_t v33 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v33 == v32)
          {
            LODWORD(v37) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v50 = v32 + 1;
            char v51 = *(unsigned char *)(v34 + v32);
            *((void *)a2 + 1) = v50;
            v37 |= (unint64_t)(v51 & 0x7F) << v48;
            if (v51 < 0)
            {
              v48 += 7;
              unint64_t v32 = v50;
              BOOL v14 = v49++ > 8;
              if (v14) {
                goto LABEL_73;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v37) = 0;
            }
          }
          break;
        }
LABEL_86:
        *((_DWORD *)this + 23) = v37;
        goto LABEL_91;
      case 0xDu:
        *((_WORD *)this + 50) |= 0x100u;
        unint64_t v40 = *((void *)a2 + 1);
        unint64_t v41 = *((void *)a2 + 2);
        uint64_t v42 = *(void *)a2;
        if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v45 = 0;
          do
          {
            unint64_t v46 = v40 + 1;
            *((void *)a2 + 1) = v40 + 1;
            char v47 = *(unsigned char *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0) {
              goto LABEL_90;
            }
            v43 += 7;
            unint64_t v40 = v46;
            BOOL v14 = v44++ > 8;
          }
          while (!v14);
LABEL_80:
          LODWORD(v45) = 0;
          goto LABEL_90;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v45 = 0;
        if (v41 <= v40) {
          unint64_t v41 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v41 == v40)
      {
        LODWORD(v45) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_90;
      }
      unint64_t v54 = v40 + 1;
      char v55 = *(unsigned char *)(v42 + v40);
      *((void *)a2 + 1) = v54;
      v45 |= (unint64_t)(v55 & 0x7F) << v52;
      if ((v55 & 0x80) == 0) {
        break;
      }
      v52 += 7;
      unint64_t v40 = v54;
      BOOL v14 = v53++ > 8;
      if (v14) {
        goto LABEL_80;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v45) = 0;
    }
LABEL_90:
    *((_DWORD *)this + 22) = v45;
LABEL_91:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_91;
  }
  return result;
}

uint64_t CMMsl::StepDistanceFusionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  __int16 v6 = *(_WORD *)(v3 + 100);
  if (v6)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 24));
    __int16 v6 = *(_WORD *)(v3 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0) {
        goto LABEL_8;
      }
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_11:
    if ((v6 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_12:
    if ((v6 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x200) == 0) {
      goto LABEL_15;
    }
LABEL_26:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 100) & 0x100) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2);
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x200) != 0) {
    goto LABEL_26;
  }
LABEL_15:
  if ((v6 & 0x100) == 0) {
    return this;
  }
LABEL_27:
  return PB::Writer::writeVarInt(a2);
}

unint64_t CMMsl::StepDistanceFusionResult::hash_value(CMMsl::StepDistanceFusionResult *this)
{
  unint64_t v2 = (CMMsl::StepCountEntry *)*((void *)this + 2);
  if (v2) {
    unint64_t v3 = CMMsl::StepCountEntry::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 1);
  if (v4) {
    unint64_t v4 = CMMsl::StepCountEntryAddition::hash_value((CMMsl::StepCountEntryAddition *)v4);
  }
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 1) == 0)
  {
    double v6 = 0.0;
    if ((v5 & 2) != 0) {
      goto LABEL_8;
    }
LABEL_35:
    double v7 = 0.0;
    if ((v5 & 0x80) != 0) {
      goto LABEL_11;
    }
LABEL_36:
    double v8 = 0.0;
    if ((v5 & 0x20) != 0) {
      goto LABEL_14;
    }
LABEL_37:
    double v9 = 0.0;
    if ((v5 & 0x40) != 0) {
      goto LABEL_17;
    }
LABEL_38:
    double v10 = 0.0;
    if ((v5 & 4) != 0) {
      goto LABEL_20;
    }
LABEL_39:
    double v11 = 0.0;
    if ((v5 & 8) != 0) {
      goto LABEL_23;
    }
LABEL_40:
    double v12 = 0.0;
    if ((v5 & 0x10) != 0) {
      goto LABEL_26;
    }
LABEL_41:
    double v13 = 0.0;
    if ((*((_WORD *)this + 50) & 0x400) != 0) {
      goto LABEL_29;
    }
    goto LABEL_42;
  }
  double v6 = *((double *)this + 3);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v5 & 2) == 0) {
    goto LABEL_35;
  }
LABEL_8:
  double v7 = *((double *)this + 4);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v5 & 0x80) == 0) {
    goto LABEL_36;
  }
LABEL_11:
  double v8 = *((double *)this + 10);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v5 & 0x20) == 0) {
    goto LABEL_37;
  }
LABEL_14:
  double v9 = *((double *)this + 8);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v5 & 0x40) == 0) {
    goto LABEL_38;
  }
LABEL_17:
  double v10 = *((double *)this + 9);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v5 & 4) == 0) {
    goto LABEL_39;
  }
LABEL_20:
  double v11 = *((double *)this + 5);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v5 & 8) == 0) {
    goto LABEL_40;
  }
LABEL_23:
  double v12 = *((double *)this + 6);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v5 & 0x10) == 0) {
    goto LABEL_41;
  }
LABEL_26:
  double v13 = *((double *)this + 7);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((*((_WORD *)this + 50) & 0x400) != 0)
  {
LABEL_29:
    uint64_t v14 = *((unsigned __int8 *)this + 96);
    if ((*((_WORD *)this + 50) & 0x200) != 0) {
      goto LABEL_30;
    }
LABEL_43:
    uint64_t v15 = 0;
    if ((*((_WORD *)this + 50) & 0x100) != 0) {
      goto LABEL_31;
    }
LABEL_44:
    uint64_t v16 = 0;
    return v4 ^ v3 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ v14 ^ v15 ^ v16;
  }
LABEL_42:
  uint64_t v14 = 0;
  if ((*((_WORD *)this + 50) & 0x200) == 0) {
    goto LABEL_43;
  }
LABEL_30:
  uint64_t v15 = *((int *)this + 23);
  if ((*((_WORD *)this + 50) & 0x100) == 0) {
    goto LABEL_44;
  }
LABEL_31:
  uint64_t v16 = *((int *)this + 22);
  return v4 ^ v3 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ v14 ^ v15 ^ v16;
}

uint64_t CMMsl::StepDistanceFusionResult::makeFused(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::StepDistanceFusionResult::makeAddition(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::StepLikelihoodFeatures::~StepLikelihoodFeatures(CMMsl::StepLikelihoodFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(CMMsl::StepLikelihoodFeatures *this, const CMMsl::StepLikelihoodFeatures *a2)
{
  *(void *)this = &unk_270645380;
  *((_DWORD *)this + 24) = 0;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x40) != 0)
  {
    double result = *((double *)a2 + 7);
    __int16 v3 = 64;
    *((_WORD *)this + 48) = 64;
    *((double *)this + 7) = result;
    __int16 v2 = *((_WORD *)a2 + 48);
    if ((v2 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 48) & 0x400) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 11);
    v3 |= 0x400u;
    *((_WORD *)this + 48) = v3;
    *((double *)this + 11) = result;
    __int16 v2 = *((_WORD *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    double result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_WORD *)this + 48) = v3;
    *((double *)this + 6) = result;
    __int16 v2 = *((_WORD *)a2 + 48);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 10) = result;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 5) = result;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 2) = result;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_24:
    double result = *((double *)a2 + 1);
    *((_WORD *)this + 48) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_23:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 8) = result;
  if (*((_WORD *)a2 + 48)) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::StepLikelihoodFeatures::operator=(CMMsl *a1, const CMMsl::StepLikelihoodFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures((CMMsl::StepLikelihoodFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepLikelihoodFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepLikelihoodFeatures *a2, CMMsl::StepLikelihoodFeatures *a3)
{
  int v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  uint64_t v13 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v13;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645380;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::StepLikelihoodFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepLikelihoodFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::StepLikelihoodFeatures::formatText(CMMsl::StepLikelihoodFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "bobbiness", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bufferAvgSampleRateHz", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "concavityDeltaDeg", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "deltaInertialZVel", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "horizontalDisplacement", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "impulseDurationSec", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "likelihoodRatio", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "peakiness", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "thetaPitchFaceDeg", *((double *)this + 9));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "thetaRollFaceDeg", *((double *)this + 10));
  if ((*((_WORD *)this + 48) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "timeSinceLastStepSec", *((double *)this + 11));
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::StepLikelihoodFeatures::readFrom(CMMsl::StepLikelihoodFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_58;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 48) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 2u:
        *((_WORD *)this + 48) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 3u:
        *((_WORD *)this + 48) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 4u:
        *((_WORD *)this + 48) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 5u:
        *((_WORD *)this + 48) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 6u:
        *((_WORD *)this + 48) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 7u:
        *((_WORD *)this + 48) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 8u:
        *((_WORD *)this + 48) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 9u:
        *((_WORD *)this + 48) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 0xAu:
        *((_WORD *)this + 48) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_55;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 0xBu:
        *((_WORD *)this + 48) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_57:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_55:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_58:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::StepLikelihoodFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 96);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    __int16 v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(this + 96) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(double *)(v3 + 64));
    if ((*(_WORD *)(v3 + 96) & 1) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::StepLikelihoodFeatures::hash_value(CMMsl::StepLikelihoodFeatures *this)
{
  __int16 v1 = *((_WORD *)this + 48);
  if ((v1 & 0x40) == 0)
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 48) & 0x400) != 0) {
      goto LABEL_3;
    }
LABEL_36:
    double v3 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_37:
    double v4 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_38:
    double v5 = 0.0;
    if ((*((_WORD *)this + 48) & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_39:
    double v6 = 0.0;
    if ((*((_WORD *)this + 48) & 0x100) != 0) {
      goto LABEL_15;
    }
LABEL_40:
    double v7 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_18;
    }
LABEL_41:
    double v8 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_21;
    }
LABEL_42:
    double v9 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_24;
    }
LABEL_43:
    double v10 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_27;
    }
    goto LABEL_44;
  }
  double v2 = *((double *)this + 7);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((_WORD *)this + 48) & 0x400) == 0) {
    goto LABEL_36;
  }
LABEL_3:
  double v3 = *((double *)this + 11);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_37;
  }
LABEL_6:
  double v4 = *((double *)this + 6);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_38;
  }
LABEL_9:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((_WORD *)this + 48) & 0x200) == 0) {
    goto LABEL_39;
  }
LABEL_12:
  double v6 = *((double *)this + 10);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((_WORD *)this + 48) & 0x100) == 0) {
    goto LABEL_40;
  }
LABEL_15:
  double v7 = *((double *)this + 9);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_41;
  }
LABEL_18:
  double v8 = *((double *)this + 5);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_42;
  }
LABEL_21:
  double v9 = *((double *)this + 3);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_43;
  }
LABEL_24:
  double v10 = *((double *)this + 2);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_27:
    double v11 = *((double *)this + 8);
    if (v11 == 0.0) {
      double v11 = 0.0;
    }
    if (v1) {
      goto LABEL_30;
    }
LABEL_45:
    double v12 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12;
  }
LABEL_44:
  double v11 = 0.0;
  if ((v1 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_30:
  double v12 = *((double *)this + 1);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12;
}

void CMMsl::StreamingHeartRateData::~StreamingHeartRateData(CMMsl::StreamingHeartRateData *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706453B8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::StreamingHeartRateData::~StreamingHeartRateData(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::StreamingHeartRateData::StreamingHeartRateData(void *this, const CMMsl::StreamingHeartRateData *a2)
{
  *this = &unk_2706453B8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::StreamingHeartRateData *CMMsl::StreamingHeartRateData::operator=(const CMMsl::StreamingHeartRateData *a1, const CMMsl::StreamingHeartRateData *a2)
{
  if (a1 != a2)
  {
    CMMsl::StreamingHeartRateData::StreamingHeartRateData(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::StreamingHeartRateData::~StreamingHeartRateData((CMMsl::StreamingHeartRateData *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::StreamingHeartRateData *a2, CMMsl::StreamingHeartRateData *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::StreamingHeartRateData::StreamingHeartRateData(void *a1, uint64_t a2)
{
  *a1 = &unk_2706453B8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706453B8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::StreamingHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706453B8;
    v6[1] = v4;
    CMMsl::StreamingHeartRateData::~StreamingHeartRateData((CMMsl::StreamingHeartRateData *)v6);
  }
  return a1;
}

uint64_t CMMsl::StreamingHeartRateData::formatText(CMMsl::StreamingHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::StreamingHeartRateData::readFrom(CMMsl::StreamingHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StreamingHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::OnsetHeartRateData *CMMsl::StreamingHeartRateData::hash_value(CMMsl::StreamingHeartRateData *this)
{
  uint64_t result = (CMMsl::OnsetHeartRateData *)*((void *)this + 1);
  if (result) {
    return (CMMsl::OnsetHeartRateData *)CMMsl::OnsetHeartRateData::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::StreamingHeartRateData::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::StreamingHighFrequencyHeartRateData::~StreamingHighFrequencyHeartRateData(CMMsl::StreamingHighFrequencyHeartRateData *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706453F0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::StreamingHighFrequencyHeartRateData::~StreamingHighFrequencyHeartRateData(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(void *this, const CMMsl::StreamingHighFrequencyHeartRateData *a2)
{
  *this = &unk_2706453F0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::StreamingHighFrequencyHeartRateData *CMMsl::StreamingHighFrequencyHeartRateData::operator=(const CMMsl::StreamingHighFrequencyHeartRateData *a1, const CMMsl::StreamingHighFrequencyHeartRateData *a2)
{
  if (a1 != a2)
  {
    CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::StreamingHighFrequencyHeartRateData::~StreamingHighFrequencyHeartRateData((CMMsl::StreamingHighFrequencyHeartRateData *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::StreamingHighFrequencyHeartRateData *a2, CMMsl::StreamingHighFrequencyHeartRateData *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(void *a1, uint64_t a2)
{
  *a1 = &unk_2706453F0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706453F0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706453F0;
    v6[1] = v4;
    CMMsl::StreamingHighFrequencyHeartRateData::~StreamingHighFrequencyHeartRateData((CMMsl::StreamingHighFrequencyHeartRateData *)v6);
  }
  return a1;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::formatText(CMMsl::StreamingHighFrequencyHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::readFrom(CMMsl::StreamingHighFrequencyHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::OnsetHeartRateData *CMMsl::StreamingHighFrequencyHeartRateData::hash_value(CMMsl::StreamingHighFrequencyHeartRateData *this)
{
  uint64_t result = (CMMsl::OnsetHeartRateData *)*((void *)this + 1);
  if (result) {
    return (CMMsl::OnsetHeartRateData *)CMMsl::OnsetHeartRateData::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::StrideCalBin::~StrideCalBin(CMMsl::StrideCalBin *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::StrideCalBin::StrideCalBin(CMMsl::StrideCalBin *this, const CMMsl::StrideCalBin *a2)
{
  *(void *)this = &unk_270645428;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    int v4 = *((_DWORD *)a2 + 8);
    char v3 = 8;
    *((unsigned char *)this + 40) = 8;
    *((_DWORD *)this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 40))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      double result = *((double *)a2 + 3);
      *((unsigned char *)this + 40) = v3 | 4;
      *((double *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v6 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 9) = v6;
  if ((*((unsigned char *)a2 + 40) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::StrideCalBin::operator=(uint64_t a1, const CMMsl::StrideCalBin *a2)
{
  if ((const CMMsl::StrideCalBin *)a1 != a2)
  {
    CMMsl::StrideCalBin::StrideCalBin((CMMsl::StrideCalBin *)&v8, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v3;
    *(void *)&long long v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v11;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v5;
    int v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v6;
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StrideCalBin *a2, CMMsl::StrideCalBin *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  int v4 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  int v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::StrideCalBin::StrideCalBin(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645428;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645428;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::StrideCalBin::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = &unk_270645428;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    int v13 = *(_DWORD *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v10 = v5;
    *(void *)&long long v5 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    uint64_t v11 = v7;
    uint64_t v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::StrideCalBin::formatText(CMMsl::StrideCalBin *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "begin", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bin");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "end", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "kValue", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "state");
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::StrideCalBin::readFrom(CMMsl::StrideCalBin *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_72;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_66;
            }
            unint64_t v34 = v20++;
            char v35 = *(unsigned char *)(v21 + v34);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_65:
              unint64_t v2 = v34 + 1;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_65;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_66;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_66:
        *((_DWORD *)this + 8) = v24;
        break;
      case 2u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_45;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_61;
      case 3u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_45;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_61;
      case 4u:
        *((unsigned char *)this + 40) |= 0x10u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_71;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_70:
              unint64_t v2 = v38 + 1;
              goto LABEL_71;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_70;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_71;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_71:
        *((_DWORD *)this + 9) = v30;
        break;
      case 5u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_61:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_45:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_72:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::StrideCalBin::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 40) & 4) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::StrideCalBin::hash_value(CMMsl::StrideCalBin *this)
{
  if ((*((unsigned char *)this + 40) & 8) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 40)) {
      goto LABEL_3;
    }
LABEL_14:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_15:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
  uint64_t v1 = *((unsigned int *)this + 8);
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
LABEL_9:
    uint64_t v4 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_10;
    }
LABEL_17:
    double v5 = 0.0;
    return *(void *)&v2 ^ v1 ^ *(void *)&v3 ^ v4 ^ *(void *)&v5;
  }
LABEL_16:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 40) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_10:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3 ^ v4 ^ *(void *)&v5;
}

void CMMsl::StrideCalEntry::~StrideCalEntry(CMMsl::StrideCalEntry *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::StrideCalEntry::StrideCalEntry(uint64_t this, const CMMsl::StrideCalEntry *a2)
{
  *(void *)this = &unk_270645460;
  *(_DWORD *)(this + 92) = 0;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x100) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    __int16 v3 = 256;
    *(_WORD *)(this + 92) = 256;
    *(void *)(this + 72) = v4;
    __int16 v2 = *((_WORD *)a2 + 46);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 92) = v3;
    *(void *)(this + 16) = v5;
    __int16 v2 = *((_WORD *)a2 + 46);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *((void *)a2 + 4);
    v3 |= 8u;
    *(_WORD *)(this + 92) = v3;
    *(void *)(this + 32) = v6;
    __int16 v2 = *((_WORD *)a2 + 46);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 40) = v7;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v8 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 8) = v8;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v9 = *((_DWORD *)a2 + 22);
  v3 |= 0x800u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 88) = v9;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v10 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v10;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v11 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 64) = v11;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v12 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 48) = v12;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 24) = v13;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x40) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0) {
      return this;
    }
LABEL_26:
    int v15 = *((_DWORD *)a2 + 20);
    *(_WORD *)(this + 92) = v3 | 0x200;
    *(_DWORD *)(this + 80) = v15;
    return this;
  }
LABEL_25:
  uint64_t v14 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 56) = v14;
  if ((*((_WORD *)a2 + 46) & 0x200) != 0) {
    goto LABEL_26;
  }
  return this;
}

CMMsl *CMMsl::StrideCalEntry::operator=(CMMsl *a1, const CMMsl::StrideCalEntry *a2)
{
  if (a1 != a2)
  {
    CMMsl::StrideCalEntry::StrideCalEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StrideCalEntry *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StrideCalEntry *a2, CMMsl::StrideCalEntry *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  int v9 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v9;
  int v10 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  uint64_t v12 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  int v15 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v15;
  return result;
}

double CMMsl::StrideCalEntry::StrideCalEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645460;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

CMMsl *CMMsl::StrideCalEntry::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StrideCalEntry::StrideCalEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StrideCalEntry *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::StrideCalEntry::formatText(CMMsl::StrideCalEntry *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 46);
  if (v5)
  {
    PB::TextFormatter::format(a2, "distance", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 46);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "gpsSource", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "kvalue", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "kvalueTrack", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "percentGrade", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "runningFormStrideLength", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "runningFormStrideLengthMetrics");
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "session");
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 9));
  if ((*((_WORD *)this + 46) & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "steps");
LABEL_14:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::StrideCalEntry::readFrom(CMMsl::StrideCalEntry *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_109;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 46) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 2u:
        *((_WORD *)this + 46) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 3u:
        *((_WORD *)this + 46) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 4u:
        *((_WORD *)this + 46) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 5u:
        *((_WORD *)this + 46) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 6u:
        *((_WORD *)this + 46) |= 0x800u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_98;
            }
            unint64_t v40 = v20++;
            char v41 = *(unsigned char *)(v21 + v40);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_97:
              unint64_t v2 = v40 + 1;
              goto LABEL_98;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_97;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_98;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_98:
        *((_DWORD *)this + 22) = v24;
        break;
      case 7u:
        *((_WORD *)this + 46) |= 0x400u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_103;
            }
            unint64_t v44 = v26++;
            char v45 = *(unsigned char *)(v27 + v44);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            BOOL v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_102:
              unint64_t v2 = v44 + 1;
              goto LABEL_103;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_102;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_103;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_103:
        *((_DWORD *)this + 21) = v30;
        break;
      case 8u:
        *((_WORD *)this + 46) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 9u:
        *((_WORD *)this + 46) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 0xAu:
        *((_WORD *)this + 46) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 0xBu:
        *((_WORD *)this + 46) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
LABEL_93:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_63:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xCu:
        *((_WORD *)this + 46) |= 0x200u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_108;
            }
            unint64_t v48 = v32++;
            char v49 = *(unsigned char *)(v33 + v48);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v46 += 7;
            BOOL v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_107:
              unint64_t v2 = v48 + 1;
              goto LABEL_108;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_107;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_108;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_108:
        *((_DWORD *)this + 20) = v36;
        break;
      default:
        goto LABEL_19;
    }
LABEL_109:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::StrideCalEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 92);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 72));
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(double *)(v3 + 56));
    if ((*(_WORD *)(v3 + 92) & 0x200) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x40) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 0x200) == 0) {
    return this;
  }
LABEL_25:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::StrideCalEntry::hash_value(CMMsl::StrideCalEntry *this)
{
  __int16 v1 = *((_WORD *)this + 46);
  if ((v1 & 0x100) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_33:
    double v3 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_6;
    }
LABEL_34:
    double v4 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_9;
    }
LABEL_35:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_36:
    double v6 = 0.0;
    if ((*((_WORD *)this + 46) & 0x800) != 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
  double v2 = *((double *)this + 9);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_34;
  }
LABEL_6:
  double v4 = *((double *)this + 4);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_35;
  }
LABEL_9:
  double v5 = *((double *)this + 5);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((_WORD *)this + 46) & 0x800) != 0)
  {
LABEL_15:
    uint64_t v7 = *((int *)this + 22);
    if ((*((_WORD *)this + 46) & 0x400) != 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 46) & 0x400) != 0)
  {
LABEL_16:
    uint64_t v8 = *((int *)this + 21);
    if ((v1 & 0x80) != 0) {
      goto LABEL_17;
    }
LABEL_39:
    double v9 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_20;
    }
LABEL_40:
    double v10 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_23;
    }
LABEL_41:
    double v11 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_26;
    }
    goto LABEL_42;
  }
LABEL_38:
  uint64_t v8 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_39;
  }
LABEL_17:
  double v9 = *((double *)this + 8);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_40;
  }
LABEL_20:
  double v10 = *((double *)this + 6);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_41;
  }
LABEL_23:
  double v11 = *((double *)this + 3);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x40) != 0)
  {
LABEL_26:
    double v12 = *((double *)this + 7);
    if (v12 == 0.0) {
      double v12 = 0.0;
    }
    if ((*((_WORD *)this + 46) & 0x200) != 0) {
      goto LABEL_29;
    }
LABEL_43:
    uint64_t v13 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ v13;
  }
LABEL_42:
  double v12 = 0.0;
  if ((*((_WORD *)this + 46) & 0x200) == 0) {
    goto LABEL_43;
  }
LABEL_29:
  uint64_t v13 = *((int *)this + 20);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ v13;
}

void CMMsl::SubStats::~SubStats(CMMsl::SubStats *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::SubStats::SubStats(CMMsl::SubStats *this, const CMMsl::SubStats *a2)
{
  *(void *)this = &unk_270645498;
  *((_DWORD *)this + 14) = 0;
  __int16 v2 = *((_WORD *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 28) = 1;
    *((void *)this + 1) = v4;
    __int16 v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((_WORD *)this + 28) = v3;
    *((_DWORD *)this + 8) = v5;
    __int16 v2 = *((_WORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    float result = *((float *)a2 + 5);
    v3 |= 4u;
    *((_WORD *)this + 28) = v3;
    *((float *)this + 5) = result;
    __int16 v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  float result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 6) = result;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  float result = *((float *)a2 + 12);
  v3 |= 0x200u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 12) = result;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  float result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 10) = result;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  char v7 = *((unsigned char *)a2 + 52);
  v3 |= 0x400u;
  *((_WORD *)this + 28) = v3;
  *((unsigned char *)this + 52) = v7;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v8 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 4) = v8;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_24:
    float result = *((float *)a2 + 9);
    *((_WORD *)this + 28) = v3 | 0x40;
    *((float *)this + 9) = result;
    return result;
  }
LABEL_23:
  int v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 11) = v9;
  if ((*((_WORD *)a2 + 28) & 0x40) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::SubStats::operator=(CMMsl *a1, const CMMsl::SubStats *a2)
{
  if (a1 != a2)
  {
    CMMsl::SubStats::SubStats((CMMsl::SubStats *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SubStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SubStats *a2, CMMsl::SubStats *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  int v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  int v8 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  int v9 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v9;
  LOBYTE(v4) = *((unsigned char *)this + 52);
  *((unsigned char *)this + 52) = *((unsigned char *)a2 + 52);
  *((unsigned char *)a2 + 52) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::SubStats::SubStats(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645498;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

CMMsl *CMMsl::SubStats::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SubStats::SubStats((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SubStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SubStats::formatText(CMMsl::SubStats *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "classifierCall");
    __int16 v5 = *((_WORD *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "featureSlope", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "maxAccel", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "maxMinPressure", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "model");
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "sCal", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "slopeNxCorr", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "state");
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "timestamp");
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "xCorr", *((float *)this + 12));
  if ((*((_WORD *)this + 28) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "zoh");
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SubStats::readFrom(CMMsl::SubStats *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_123;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 28) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_107;
            }
            unint64_t v48 = v20++;
            char v49 = *(unsigned char *)(v21 + v48);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v46 += 7;
            BOOL v14 = v47++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_106:
              unint64_t v2 = v48 + 1;
              goto LABEL_107;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_106;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_107;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_107:
        *((void *)this + 1) = v24;
        break;
      case 2u:
        *((_WORD *)this + 28) |= 0x20u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_112;
            }
            unint64_t v52 = v26++;
            char v53 = *(unsigned char *)(v27 + v52);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0) {
              break;
            }
            v50 += 7;
            BOOL v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_111:
              unint64_t v2 = v52 + 1;
              goto LABEL_112;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_111;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_112;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_112:
        *((_DWORD *)this + 8) = v30;
        break;
      case 3u:
        *((_WORD *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_70;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 4u:
        *((_WORD *)this + 28) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_70;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 5u:
        *((_WORD *)this + 28) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_70;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 6u:
        *((_WORD *)this + 28) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_70;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 7u:
        *((_WORD *)this + 28) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_70;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 8u:
        *((_WORD *)this + 28) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v33 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v33 = v32 != 0;
        }
        *((unsigned char *)this + 52) = v33;
        break;
      case 9u:
        *((_WORD *)this + 28) |= 2u;
        unint64_t v34 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v38 = 0;
          if (v2 <= v34) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_117;
            }
            unint64_t v56 = v34++;
            char v57 = *(unsigned char *)(v35 + v56);
            *((void *)a2 + 1) = v34;
            v38 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0) {
              break;
            }
            v54 += 7;
            BOOL v14 = v55++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_116:
              unint64_t v2 = v56 + 1;
              goto LABEL_117;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v38) = 0;
          }
          goto LABEL_116;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        do
        {
          unint64_t v2 = v34 + 1;
          *((void *)a2 + 1) = v34 + 1;
          char v39 = *(unsigned char *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0) {
            goto LABEL_117;
          }
          v36 += 7;
          unint64_t v34 = v2;
          BOOL v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_117:
        *((_DWORD *)this + 4) = v38;
        break;
      case 0xAu:
        *((_WORD *)this + 28) |= 0x100u;
        unint64_t v40 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v41 = *(void *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v44 = 0;
          if (v2 <= v40) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_122;
            }
            unint64_t v60 = v40++;
            char v61 = *(unsigned char *)(v41 + v60);
            *((void *)a2 + 1) = v40;
            v44 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0) {
              break;
            }
            v58 += 7;
            BOOL v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_121:
              unint64_t v2 = v60 + 1;
              goto LABEL_122;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v44) = 0;
          }
          goto LABEL_121;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        do
        {
          unint64_t v2 = v40 + 1;
          *((void *)a2 + 1) = v40 + 1;
          char v45 = *(unsigned char *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0) {
            goto LABEL_122;
          }
          v42 += 7;
          unint64_t v40 = v2;
          BOOL v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_122:
        *((_DWORD *)this + 11) = v44;
        break;
      case 0xBu:
        *((_WORD *)this + 28) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_102:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_70:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_123:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SubStats::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 56);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    __int16 v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 56) & 0x40) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_23:
  float v5 = *(float *)(v3 + 36);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::SubStats::hash_value(CMMsl::SubStats *this)
{
  __int16 v1 = *((_WORD *)this + 28);
  if (v1)
  {
    uint64_t v2 = *((void *)this + 1);
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 8);
      if ((v1 & 4) != 0) {
        goto LABEL_4;
      }
LABEL_27:
      uint64_t v5 = 0;
      if ((v1 & 0x10) != 0) {
        goto LABEL_7;
      }
LABEL_28:
      uint64_t v7 = 0;
      if ((v1 & 8) != 0) {
        goto LABEL_10;
      }
LABEL_29:
      uint64_t v9 = 0;
      if ((*((_WORD *)this + 28) & 0x200) != 0) {
        goto LABEL_13;
      }
LABEL_30:
      uint64_t v11 = 0;
      if ((v1 & 0x80) != 0) {
        goto LABEL_16;
      }
LABEL_31:
      uint64_t v13 = 0;
      if ((*((_WORD *)this + 28) & 0x400) != 0) {
        goto LABEL_19;
      }
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_27;
  }
LABEL_4:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_28;
  }
LABEL_7:
  float v6 = *((float *)this + 7);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_29;
  }
LABEL_10:
  float v8 = *((float *)this + 6);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((_WORD *)this + 28) & 0x200) == 0) {
    goto LABEL_30;
  }
LABEL_13:
  float v10 = *((float *)this + 12);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_16:
  float v12 = *((float *)this + 10);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((*((_WORD *)this + 28) & 0x400) != 0)
  {
LABEL_19:
    uint64_t v14 = *((unsigned __int8 *)this + 52);
    if ((v1 & 2) != 0) {
      goto LABEL_20;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v14 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_20:
    uint64_t v15 = *((int *)this + 4);
    if ((*((_WORD *)this + 28) & 0x100) != 0) {
      goto LABEL_21;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v15 = 0;
  if ((*((_WORD *)this + 28) & 0x100) != 0)
  {
LABEL_21:
    uint64_t v16 = *((unsigned int *)this + 11);
    if ((v1 & 0x40) != 0) {
      goto LABEL_22;
    }
LABEL_35:
    uint64_t v18 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
  }
LABEL_34:
  uint64_t v16 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_35;
  }
LABEL_22:
  float v17 = *((float *)this + 9);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
}

void CMMsl::SwingDoTCandidate::~SwingDoTCandidate(CMMsl::SwingDoTCandidate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::SwingDoTCandidate::SwingDoTCandidate(CMMsl::SwingDoTCandidate *this, const CMMsl::SwingDoTCandidate *a2)
{
  *(void *)this = &unk_2706454D0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 8) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 7);
    char v3 = 8;
    *((unsigned char *)this + 32) = 8;
    *((_DWORD *)this + 7) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((unsigned char *)this + 32) = v3;
  *((double *)this + 1) = result;
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::SwingDoTCandidate::operator=(uint64_t a1, const CMMsl::SwingDoTCandidate *a2)
{
  if ((const CMMsl::SwingDoTCandidate *)a1 != a2)
  {
    CMMsl::SwingDoTCandidate::SwingDoTCandidate((CMMsl::SwingDoTCandidate *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SwingDoTCandidate *a2, CMMsl::SwingDoTCandidate *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::SwingDoTCandidate::SwingDoTCandidate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706454D0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706454D0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::SwingDoTCandidate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_2706454D0;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SwingDoTCandidate::formatText(CMMsl::SwingDoTCandidate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dirAngleRad", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "extremaVal", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "peakTimestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "valleyTimestamp", *((double *)this + 2));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::SwingDoTCandidate::readFrom(CMMsl::SwingDoTCandidate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_39;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_29;
      case 2u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_29:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_38;
      case 3u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_37;
      case 4u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_37:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_38:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SwingDoTCandidate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 8));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if (v4) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::SwingDoTCandidate::hash_value(CMMsl::SwingDoTCandidate *this)
{
  if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if (*((unsigned char *)this + 32)) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  float v6 = *((float *)this + 7);
  uint64_t v1 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if (*((unsigned char *)this + 32))
  {
LABEL_6:
    double v4 = *((double *)this + 1);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v5 = 0.0;
    return v3 ^ v1 ^ *(void *)&v4 ^ *(void *)&v5;
  }
LABEL_16:
  double v4 = 0.0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v5 = *((double *)this + 2);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  return v3 ^ v1 ^ *(void *)&v4 ^ *(void *)&v5;
}

void CMMsl::TapAccept::~TapAccept(CMMsl::TapAccept *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::TapAccept::TapAccept(uint64_t this, const CMMsl::TapAccept *a2)
{
  *(void *)this = &unk_270645508;
  *(_DWORD *)(this + 36) = -1;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 44) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(unsigned char *)(this + 44) = v3;
    *(_DWORD *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *(unsigned char *)(this + 44) = v3;
    *(_DWORD *)(this + 36) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 32) = v7;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v8 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 28) = v8;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return this;
    }
LABEL_16:
    int v10 = *((_DWORD *)a2 + 10);
    *(unsigned char *)(this + 44) = v3 | 0x40;
    *(_DWORD *)(this + 40) = v10;
    return this;
  }
LABEL_15:
  uint64_t v9 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 44) = v3;
  *(void *)(this + 8) = v9;
  if ((*((unsigned char *)a2 + 44) & 0x40) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::TapAccept::operator=(uint64_t a1, const CMMsl::TapAccept *a2)
{
  if ((const CMMsl::TapAccept *)a1 != a2)
  {
    CMMsl::TapAccept::TapAccept((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    int v13 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v4;
    uint64_t v5 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v11;
    uint64_t v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v6;
    *(void *)&long long v6 = *(void *)(a1 + 36);
    *(void *)(a1 + 36) = v12;
    uint64_t v12 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TapAccept *a2, CMMsl::TapAccept *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  double result = *(double *)((char *)a2 + 36);
  uint64_t v8 = *(void *)((char *)this + 36);
  *(double *)((char *)this + 36) = result;
  *(void *)((char *)a2 + 36) = v8;
  return result;
}

double CMMsl::TapAccept::TapAccept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645508;
  *(_DWORD *)(a1 + 36) = -1;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 36);
  *(double *)(a1 + 36) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645508;
  *(_DWORD *)(a1 + 36) = -1;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 36);
  *(double *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::TapAccept::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = &unk_270645508;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    int v14 = *(_DWORD *)(a1 + 44);
    int v11 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = *(void *)(a2 + 28);
    uint64_t v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v10 = v6;
    *(void *)&long long v6 = *(void *)(a1 + 36);
    uint64_t v7 = *(void *)(a2 + 36);
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 44) = v3;
    *(void *)(a1 + 36) = v7;
    uint64_t v13 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::TapAccept::formatText(CMMsl::TapAccept *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 44) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "peakHalfWidth", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "peakMagnitude", *((float *)this + 8));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "peakTime", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "tapAcceptStatus");
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "tapCounter");
  if ((*((unsigned char *)this + 44) & 2) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::TapAccept::readFrom(CMMsl::TapAccept *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_96;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_79;
      case 2u:
        *((unsigned char *)this + 44) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_85;
            }
            unint64_t v40 = v20++;
            char v41 = *(unsigned char *)(v21 + v40);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_84:
              unint64_t v2 = v40 + 1;
              goto LABEL_85;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_84;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_85;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_85:
        *((_DWORD *)this + 6) = v24;
        break;
      case 3u:
        *((unsigned char *)this + 44) |= 0x20u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_90;
            }
            unint64_t v44 = v26++;
            char v45 = *(unsigned char *)(v27 + v44);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            BOOL v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_89:
              unint64_t v2 = v44 + 1;
              goto LABEL_90;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_89;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_90;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_90:
        *((_DWORD *)this + 9) = v30;
        break;
      case 4u:
        *((unsigned char *)this + 44) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_46;
      case 5u:
        *((unsigned char *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_46:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_80;
      case 6u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_79:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_80:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_49:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 7u:
        *((unsigned char *)this + 44) |= 0x40u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_95;
            }
            unint64_t v48 = v32++;
            char v49 = *(unsigned char *)(v33 + v48);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v46 += 7;
            BOOL v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_94:
              unint64_t v2 = v48 + 1;
              goto LABEL_95;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_94;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_95;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_95:
        *((_DWORD *)this + 10) = v36;
        break;
      default:
        goto LABEL_19;
    }
LABEL_96:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::TapAccept::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 44) & 0x40) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 44);
  if (v4) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_15:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::TapAccept::hash_value(CMMsl::TapAccept *this)
{
  if ((*((unsigned char *)this + 44) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 6);
      if ((*((unsigned char *)this + 44) & 0x20) != 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 44) & 0x20) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 9);
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_5;
    }
LABEL_20:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_8;
    }
LABEL_21:
    uint64_t v7 = 0;
    if (*((unsigned char *)this + 44)) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_20;
  }
LABEL_5:
  float v4 = *((float *)this + 8);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 44) & 8) == 0) {
    goto LABEL_21;
  }
LABEL_8:
  float v6 = *((float *)this + 7);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if (*((unsigned char *)this + 44))
  {
LABEL_11:
    double v8 = *((double *)this + 1);
    if (v8 == 0.0) {
      double v8 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 0x40) != 0) {
      goto LABEL_14;
    }
LABEL_23:
    uint64_t v9 = 0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v5 ^ v7 ^ *(void *)&v8 ^ v9;
  }
LABEL_22:
  double v8 = 0.0;
  if ((*((unsigned char *)this + 44) & 0x40) == 0) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v9 = *((unsigned int *)this + 10);
  return v2 ^ *(void *)&v1 ^ v3 ^ v5 ^ v7 ^ *(void *)&v8 ^ v9;
}

void CMMsl::TapDetect::~TapDetect(CMMsl::TapDetect *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::TapDetect::TapDetect(CMMsl::TapDetect *this, const CMMsl::TapDetect *a2)
{
  *(void *)this = &unk_270645540;
  *((_DWORD *)this + 7) = -2;
  double result = NAN;
  *(_OWORD *)((char *)this + 52) = xmmword_2572D6C80;
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    __int16 v4 = 2;
    *((_WORD *)this + 32) = 2;
    *((double *)this + 2) = result;
    __int16 v3 = *((_WORD *)a2 + 32);
    if ((v3 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v4 = 0;
  if ((v3 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 9);
    v4 |= 0x20u;
    *((_WORD *)this + 32) = v4;
    *((_DWORD *)this + 9) = v5;
    __int16 v3 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v3 & 0x400) != 0)
  {
    int v6 = *((_DWORD *)a2 + 14);
    v4 |= 0x400u;
    *((_WORD *)this + 32) = v4;
    *((_DWORD *)this + 14) = v6;
    __int16 v3 = *((_WORD *)a2 + 32);
    if ((v3 & 4) == 0)
    {
LABEL_8:
      if ((v3 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 6);
  v4 |= 4u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 6) = v7;
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x10) == 0)
  {
LABEL_9:
    if ((v3 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v8 = *((_DWORD *)a2 + 8);
  v4 |= 0x10u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 8) = v8;
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x200) == 0)
  {
LABEL_10:
    if ((v3 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v9 = *((_DWORD *)a2 + 13);
  v4 |= 0x200u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 13) = v9;
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x800) == 0)
  {
LABEL_11:
    if ((v3 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v10 = *((_DWORD *)a2 + 15);
  v4 |= 0x800u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 15) = v10;
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 8) == 0)
  {
LABEL_12:
    if ((v3 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v11 = *((_DWORD *)a2 + 7);
  v4 |= 8u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 7) = v11;
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x100) == 0)
  {
LABEL_13:
    if ((v3 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v4 |= 0x100u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 12) = LODWORD(result);
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x80) == 0)
  {
LABEL_14:
    if ((v3 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v4 |= 0x80u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 11) = LODWORD(result);
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x40) == 0)
  {
LABEL_15:
    if ((v3 & 1) == 0) {
      return result;
    }
LABEL_26:
    double result = *((double *)a2 + 1);
    *((_WORD *)this + 32) = v4 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_25:
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v4 |= 0x40u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 10) = LODWORD(result);
  if (*((_WORD *)a2 + 32)) {
    goto LABEL_26;
  }
  return result;
}

CMMsl *CMMsl::TapDetect::operator=(CMMsl *a1, const CMMsl::TapDetect *a2)
{
  if (a1 != a2)
  {
    CMMsl::TapDetect::TapDetect((CMMsl::TapDetect *)v5, a2);
    CMMsl::swap(a1, (CMMsl::TapDetect *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TapDetect *a2, CMMsl::TapDetect *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  uint64_t v6 = *(void *)((char *)this + 52);
  *(void *)((char *)this + 52) = *(void *)((char *)a2 + 52);
  *(void *)((char *)a2 + 52) = v6;
  int v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  int v9 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v9;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::TapDetect::TapDetect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645540;
  *(_DWORD *)(a1 + 28) = -2;
  *(void *)(a1 + 52) = 0x100000001;
  *(_DWORD *)(a1 + 60) = -2;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 52) = *(void *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::TapDetect::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::TapDetect::TapDetect((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::TapDetect *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::TapDetect::formatText(CMMsl::TapDetect *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "axis");
    __int16 v5 = *((_WORD *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "clippedPeakType");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "direction");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "location");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "peakHalfWidth", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "peakMagnitude", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "peakTime", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "peakValue", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "strideDirection");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "tapDetectStatus");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  if ((*((_WORD *)this + 32) & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "widthCalculationMethod");
LABEL_14:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::TapDetect::readFrom(CMMsl::TapDetect *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_175;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_87;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_138;
      case 2u:
        *((_WORD *)this + 32) |= 0x20u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_144;
            }
            unint64_t v64 = v20++;
            char v65 = *(unsigned char *)(v21 + v64);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0) {
              break;
            }
            v62 += 7;
            BOOL v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_143:
              unint64_t v2 = v64 + 1;
              goto LABEL_144;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_143;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_144;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_144:
        *((_DWORD *)this + 9) = v24;
        break;
      case 3u:
        *((_WORD *)this + 32) |= 0x400u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_149;
            }
            unint64_t v68 = v26++;
            char v69 = *(unsigned char *)(v27 + v68);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0) {
              break;
            }
            v66 += 7;
            BOOL v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_148:
              unint64_t v2 = v68 + 1;
              goto LABEL_149;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_148;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_149;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_149:
        *((_DWORD *)this + 14) = v30;
        break;
      case 4u:
        *((_WORD *)this + 32) |= 4u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_154;
            }
            unint64_t v72 = v32++;
            char v73 = *(unsigned char *)(v33 + v72);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0) {
              break;
            }
            v70 += 7;
            BOOL v14 = v71++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_153:
              unint64_t v2 = v72 + 1;
              goto LABEL_154;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_153;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_154;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_154:
        *((_DWORD *)this + 6) = v36;
        break;
      case 5u:
        *((_WORD *)this + 32) |= 0x10u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_159;
            }
            unint64_t v76 = v38++;
            char v77 = *(unsigned char *)(v39 + v76);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v77 & 0x7F) << v74;
            if ((v77 & 0x80) == 0) {
              break;
            }
            v74 += 7;
            BOOL v14 = v75++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_158:
              unint64_t v2 = v76 + 1;
              goto LABEL_159;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_158;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_159;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_159:
        *((_DWORD *)this + 8) = v42;
        break;
      case 6u:
        *((_WORD *)this + 32) |= 0x200u;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v45 = *(void *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          char v78 = 0;
          unsigned int v79 = 0;
          uint64_t v48 = 0;
          if (v2 <= v44) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_164;
            }
            unint64_t v80 = v44++;
            char v81 = *(unsigned char *)(v45 + v80);
            *((void *)a2 + 1) = v44;
            v48 |= (unint64_t)(v81 & 0x7F) << v78;
            if ((v81 & 0x80) == 0) {
              break;
            }
            v78 += 7;
            BOOL v14 = v79++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_163:
              unint64_t v2 = v80 + 1;
              goto LABEL_164;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v48) = 0;
          }
          goto LABEL_163;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        do
        {
          unint64_t v2 = v44 + 1;
          *((void *)a2 + 1) = v44 + 1;
          char v49 = *(unsigned char *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0) {
            goto LABEL_164;
          }
          v46 += 7;
          unint64_t v44 = v2;
          BOOL v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_164:
        *((_DWORD *)this + 13) = v48;
        break;
      case 7u:
        *((_WORD *)this + 32) |= 0x800u;
        unint64_t v50 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v51 = *(void *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v54 = 0;
          if (v2 <= v50) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v50)
            {
              LODWORD(v54) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_169;
            }
            unint64_t v84 = v50++;
            char v85 = *(unsigned char *)(v51 + v84);
            *((void *)a2 + 1) = v50;
            v54 |= (unint64_t)(v85 & 0x7F) << v82;
            if ((v85 & 0x80) == 0) {
              break;
            }
            v82 += 7;
            BOOL v14 = v83++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_168:
              unint64_t v2 = v84 + 1;
              goto LABEL_169;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v54) = 0;
          }
          goto LABEL_168;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        do
        {
          unint64_t v2 = v50 + 1;
          *((void *)a2 + 1) = v50 + 1;
          char v55 = *(unsigned char *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0) {
            goto LABEL_169;
          }
          v52 += 7;
          unint64_t v50 = v2;
          BOOL v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_169:
        *((_DWORD *)this + 15) = v54;
        break;
      case 8u:
        *((_WORD *)this + 32) |= 8u;
        unint64_t v56 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v57 = *(void *)a2;
        if (v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v2)
        {
          char v86 = 0;
          unsigned int v87 = 0;
          uint64_t v60 = 0;
          if (v2 <= v56) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v56)
            {
              LODWORD(v60) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_174;
            }
            unint64_t v88 = v56++;
            char v89 = *(unsigned char *)(v57 + v88);
            *((void *)a2 + 1) = v56;
            v60 |= (unint64_t)(v89 & 0x7F) << v86;
            if ((v89 & 0x80) == 0) {
              break;
            }
            v86 += 7;
            BOOL v14 = v87++ > 8;
            if (v14)
            {
              LODWORD(v60) = 0;
LABEL_173:
              unint64_t v2 = v88 + 1;
              goto LABEL_174;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v60) = 0;
          }
          goto LABEL_173;
        }
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v60 = 0;
        do
        {
          unint64_t v2 = v56 + 1;
          *((void *)a2 + 1) = v56 + 1;
          char v61 = *(unsigned char *)(v57 + v56);
          v60 |= (unint64_t)(v61 & 0x7F) << v58;
          if ((v61 & 0x80) == 0) {
            goto LABEL_174;
          }
          v58 += 7;
          unint64_t v56 = v2;
          BOOL v14 = v59++ > 8;
        }
        while (!v14);
        LODWORD(v60) = 0;
LABEL_174:
        *((_DWORD *)this + 7) = v60;
        break;
      case 9u:
        *((_WORD *)this + 32) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_87;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_84;
      case 0xAu:
        *((_WORD *)this + 32) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_87;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_84;
      case 0xBu:
        *((_WORD *)this + 32) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_87;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_84:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_139;
      case 0xCu:
        *((_WORD *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_138:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_139:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_87:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_175:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::TapDetect::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 64);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(float *)(v3 + 40));
    if ((*(_WORD *)(v3 + 64) & 1) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_25:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::TapDetect::hash_value(CMMsl::TapDetect *this)
{
  __int16 v1 = *((_WORD *)this + 32);
  if ((v1 & 2) != 0)
  {
    double v2 = *((double *)this + 2);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 9);
      if ((*((_WORD *)this + 32) & 0x400) != 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((_WORD *)this + 32) & 0x400) != 0)
  {
LABEL_4:
    uint64_t v4 = *((int *)this + 14);
    if ((v1 & 4) != 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v4 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((int *)this + 6);
    if ((v1 & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v5 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_6:
    uint64_t v6 = *((int *)this + 8);
    if ((*((_WORD *)this + 32) & 0x200) != 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v6 = 0;
  if ((*((_WORD *)this + 32) & 0x200) != 0)
  {
LABEL_7:
    uint64_t v7 = *((int *)this + 13);
    if ((*((_WORD *)this + 32) & 0x800) != 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 32) & 0x800) != 0)
  {
LABEL_8:
    uint64_t v8 = *((int *)this + 15);
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v8 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_9:
    uint64_t v9 = *((int *)this + 7);
    if ((*((_WORD *)this + 32) & 0x100) != 0) {
      goto LABEL_10;
    }
LABEL_32:
    uint64_t v11 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_13;
    }
LABEL_33:
    uint64_t v13 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v9 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0) {
    goto LABEL_32;
  }
LABEL_10:
  float v10 = *((float *)this + 12);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_33;
  }
LABEL_13:
  float v12 = *((float *)this + 11);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v1 & 0x40) != 0)
  {
LABEL_16:
    float v14 = *((float *)this + 10);
    uint64_t v15 = LODWORD(v14);
    if (v14 == 0.0) {
      uint64_t v15 = 0;
    }
    if (v1) {
      goto LABEL_19;
    }
LABEL_35:
    double v16 = 0.0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15 ^ *(void *)&v16;
  }
LABEL_34:
  uint64_t v15 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_19:
  double v16 = *((double *)this + 1);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15 ^ *(void *)&v16;
}

void CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion(CMMsl::TempestPoCAuxiliaryDeviceMotion *this)
{
  *(void *)this = &unk_270645578;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::TempestPoCAuxiliaryDeviceMotion *CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion(CMMsl::TempestPoCAuxiliaryDeviceMotion *this, const CMMsl::TempestPoCAuxiliaryDeviceMotion *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_270645578;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 26) = 0;
  if (*((void *)a2 + 10)) {
    operator new();
  }
  if (this != a2) {
    sub_2572C75B4((void *)this + 1, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x80) != 0)
  {
    int v7 = *((_DWORD *)a2 + 23);
    *((_WORD *)this + 52) |= 0x80u;
    *((_DWORD *)this + 23) = v7;
    __int16 v4 = *((_WORD *)a2 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_7:
      if ((v4 & 0x100) == 0) {
        goto LABEL_8;
      }
      goto LABEL_19;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  int v8 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 52) |= 0x40u;
  *((_DWORD *)this + 22) = v8;
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v9 = *((_DWORD *)a2 + 24);
  *((_WORD *)this + 52) |= 0x100u;
  *((_DWORD *)this + 24) = v9;
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v10 = *((_DWORD *)a2 + 25);
  *((_WORD *)this + 52) |= 0x200u;
  *((_DWORD *)this + 25) = v10;
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v11 = *((void *)a2 + 5);
  *((_WORD *)this + 52) |= 2u;
  *((void *)this + 5) = v11;
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v12 = *((void *)a2 + 6);
  *((_WORD *)this + 52) |= 4u;
  *((void *)this + 6) = v12;
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v13 = *((void *)a2 + 8);
  *((_WORD *)this + 52) |= 0x10u;
  *((void *)this + 8) = v13;
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_25:
    uint64_t v15 = *((void *)a2 + 4);
    *((_WORD *)this + 52) |= 1u;
    *((void *)this + 4) = v15;
    if ((*((_WORD *)a2 + 52) & 8) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_24:
  uint64_t v14 = *((void *)a2 + 9);
  *((_WORD *)this + 52) |= 0x20u;
  *((void *)this + 9) = v14;
  __int16 v4 = *((_WORD *)a2 + 52);
  if (v4) {
    goto LABEL_25;
  }
LABEL_14:
  if ((v4 & 8) != 0)
  {
LABEL_15:
    uint64_t v5 = *((void *)a2 + 7);
    *((_WORD *)this + 52) |= 8u;
    *((void *)this + 7) = v5;
  }
  return this;
}

CMMsl *CMMsl::TempestPoCAuxiliaryDeviceMotion::operator=(CMMsl *a1, const CMMsl::TempestPoCAuxiliaryDeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion((CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5, v3);
    CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion((CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TempestPoCAuxiliaryDeviceMotion *a2, CMMsl::TempestPoCAuxiliaryDeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  int v8 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  LODWORD(v7) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v7;
  LODWORD(v7) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  int v9 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645578;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v6 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_2572C7560(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

CMMsl *CMMsl::TempestPoCAuxiliaryDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5, v3);
    CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion((CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::formatText(CMMsl::TempestPoCAuxiliaryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_WORD *)this + 52)) {
    PB::TextFormatter::format(a2, "auxiliaryIosTimeUncertainty", *((double *)this + 4));
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "filteredAcceleration", v7);
  }
  __int16 v8 = *((_WORD *)this + 52);
  if ((v8 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "quiescentMode");
    __int16 v8 = *((_WORD *)this + 52);
    if ((v8 & 0x80) == 0)
    {
LABEL_7:
      if ((v8 & 2) == 0) {
        goto LABEL_8;
      }
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "quiescentNoise", *((float *)this + 23));
  __int16 v8 = *((_WORD *)this + 52);
  if ((v8 & 2) == 0)
  {
LABEL_8:
    if ((v8 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "sensorTimeBeforeAlignment", *((double *)this + 5));
  __int16 v8 = *((_WORD *)this + 52);
  if ((v8 & 4) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "sentCftime", *((double *)this + 6));
  __int16 v8 = *((_WORD *)this + 52);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "sequenceNumber");
  __int16 v8 = *((_WORD *)this + 52);
  if ((v8 & 8) == 0)
  {
LABEL_11:
    if ((v8 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "sourceIosTimeUncertainty", *((double *)this + 7));
  __int16 v8 = *((_WORD *)this + 52);
  if ((v8 & 0x10) == 0)
  {
LABEL_12:
    if ((v8 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "sourceReceiveCftime", *((double *)this + 8));
  if ((*((_WORD *)this + 52) & 0x20) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "sourceReceiveSensorTimestamp", *((double *)this + 9));
LABEL_14:
  uint64_t v9 = *((void *)this + 10);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "super");
  }
  if ((*((_WORD *)this + 52) & 0x200) != 0) {
    PB::TextFormatter::format(a2, "version", *((float *)this + 25));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::TempestPoCAuxiliaryDeviceMotion::readFrom(CMMsl::TempestPoCAuxiliaryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v19 = *((void *)a2 + 1);
          unint64_t v20 = *((void *)a2 + 2);
          while (v19 < v20 && !*((unsigned char *)a2 + 24))
          {
            char v22 = (char *)*((void *)this + 2);
            unint64_t v21 = *((void *)this + 3);
            if ((unint64_t)v22 >= v21)
            {
              uint64_t v24 = (char *)*((void *)this + 1);
              uint64_t v25 = (v22 - v24) >> 2;
              unint64_t v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 62) {
                goto LABEL_142;
              }
              uint64_t v27 = v21 - (void)v24;
              if (v27 >> 1 > v26) {
                unint64_t v26 = v27 >> 1;
              }
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v26;
              }
              if (v28)
              {
                unint64_t v28 = (unint64_t)sub_2572C76F0(v28);
                uint64_t v24 = (char *)*((void *)this + 1);
                char v22 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v29 = 0;
              }
              uint64_t v30 = (_DWORD *)(v28 + 4 * v25);
              *uint64_t v30 = 0;
              unsigned int v23 = v30 + 1;
              while (v22 != v24)
              {
                int v31 = *((_DWORD *)v22 - 1);
                v22 -= 4;
                *--uint64_t v30 = v31;
              }
              *((void *)this + 1) = v30;
              *((void *)this + 2) = v23;
              *((void *)this + 3) = v28 + 4 * v29;
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *(_DWORD *)char v22 = 0;
              unsigned int v23 = v22 + 4;
            }
            *((void *)this + 2) = v23;
            unint64_t v32 = *((void *)a2 + 1);
            if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v23 - 1) = *(_DWORD *)(*(void *)a2 + v32);
            unint64_t v20 = *((void *)a2 + 2);
            unint64_t v19 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v19;
          }
          PB::Reader::recallMark();
        }
        else
        {
          unsigned int v59 = (char *)*((void *)this + 2);
          unint64_t v58 = *((void *)this + 3);
          if ((unint64_t)v59 >= v58)
          {
            char v69 = (char *)*((void *)this + 1);
            uint64_t v70 = (v59 - v69) >> 2;
            unint64_t v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 62) {
LABEL_142:
            }
              sub_2570AFD0C();
            uint64_t v72 = v58 - (void)v69;
            if (v72 >> 1 > v71) {
              unint64_t v71 = v72 >> 1;
            }
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v73 = v71;
            }
            if (v73)
            {
              unint64_t v73 = (unint64_t)sub_2572C76F0(v73);
              char v69 = (char *)*((void *)this + 1);
              unsigned int v59 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v74 = 0;
            }
            unsigned int v75 = (_DWORD *)(v73 + 4 * v70);
            *unsigned int v75 = 0;
            uint64_t v60 = v75 + 1;
            while (v59 != v69)
            {
              int v76 = *((_DWORD *)v59 - 1);
              v59 -= 4;
              *--unsigned int v75 = v76;
            }
            *((void *)this + 1) = v75;
            *((void *)this + 2) = v60;
            *((void *)this + 3) = v73 + 4 * v74;
            if (v69) {
              operator delete(v69);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v59 = 0;
            uint64_t v60 = v59 + 4;
          }
          *((void *)this + 2) = v60;
          unint64_t v77 = *((void *)a2 + 1);
          if (v77 <= 0xFFFFFFFFFFFFFFFBLL && v77 + 4 <= *((void *)a2 + 2))
          {
            *(v60 - 1) = *(_DWORD *)(*(void *)a2 + v77);
LABEL_131:
            uint64_t v57 = *((void *)a2 + 1) + 4;
LABEL_132:
            *((void *)a2 + 1) = v57;
          }
          else
          {
LABEL_129:
            *((unsigned char *)a2 + 24) = 1;
          }
        }
        break;
      case 3u:
        *((_WORD *)this + 52) |= 0x80u;
        unint64_t v33 = *((void *)a2 + 1);
        if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v33);
        goto LABEL_131;
      case 4u:
        *((_WORD *)this + 52) |= 0x40u;
        unint64_t v34 = *((void *)a2 + 1);
        unint64_t v35 = *((void *)a2 + 2);
        uint64_t v36 = *(void *)a2;
        if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
        {
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v39 = 0;
          do
          {
            unint64_t v40 = v34 + 1;
            *((void *)a2 + 1) = v34 + 1;
            char v41 = *(unsigned char *)(v36 + v34);
            v39 |= (unint64_t)(v41 & 0x7F) << v37;
            if ((v41 & 0x80) == 0) {
              goto LABEL_116;
            }
            v37 += 7;
            unint64_t v34 = v40;
            BOOL v14 = v38++ > 8;
          }
          while (!v14);
LABEL_96:
          LODWORD(v39) = 0;
          goto LABEL_116;
        }
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v39 = 0;
        if (v35 <= v34) {
          unint64_t v35 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v35 == v34)
          {
            LODWORD(v39) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v63 = v34 + 1;
            char v64 = *(unsigned char *)(v36 + v34);
            *((void *)a2 + 1) = v63;
            v39 |= (unint64_t)(v64 & 0x7F) << v61;
            if (v64 < 0)
            {
              v61 += 7;
              unint64_t v34 = v63;
              BOOL v14 = v62++ > 8;
              if (v14) {
                goto LABEL_96;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v39) = 0;
            }
          }
          break;
        }
LABEL_116:
        *((_DWORD *)this + 22) = v39;
        break;
      case 5u:
        *((_WORD *)this + 52) |= 0x100u;
        unint64_t v42 = *((void *)a2 + 1);
        unint64_t v43 = *((void *)a2 + 2);
        uint64_t v44 = *(void *)a2;
        if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
        {
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v47 = 0;
          do
          {
            unint64_t v48 = v42 + 1;
            *((void *)a2 + 1) = v42 + 1;
            char v49 = *(unsigned char *)(v44 + v42);
            v47 |= (unint64_t)(v49 & 0x7F) << v45;
            if ((v49 & 0x80) == 0) {
              goto LABEL_119;
            }
            v45 += 7;
            unint64_t v42 = v48;
            BOOL v14 = v46++ > 8;
          }
          while (!v14);
LABEL_103:
          LODWORD(v47) = 0;
          goto LABEL_119;
        }
        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v47 = 0;
        if (v43 <= v42) {
          unint64_t v43 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v43 == v42)
          {
            LODWORD(v47) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v67 = v42 + 1;
            char v68 = *(unsigned char *)(v44 + v42);
            *((void *)a2 + 1) = v67;
            v47 |= (unint64_t)(v68 & 0x7F) << v65;
            if (v68 < 0)
            {
              v65 += 7;
              unint64_t v42 = v67;
              BOOL v14 = v66++ > 8;
              if (v14) {
                goto LABEL_103;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v47) = 0;
            }
          }
          break;
        }
LABEL_119:
        *((_DWORD *)this + 24) = v47;
        break;
      case 6u:
        *((_WORD *)this + 52) |= 0x200u;
        unint64_t v50 = *((void *)a2 + 1);
        if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v50);
        goto LABEL_131;
      case 7u:
        *((_WORD *)this + 52) |= 2u;
        unint64_t v51 = *((void *)a2 + 1);
        if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v51);
        goto LABEL_87;
      case 8u:
        *((_WORD *)this + 52) |= 4u;
        unint64_t v52 = *((void *)a2 + 1);
        if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v52);
        goto LABEL_87;
      case 9u:
        *((_WORD *)this + 52) |= 0x10u;
        unint64_t v53 = *((void *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v53);
        goto LABEL_87;
      case 0xAu:
        *((_WORD *)this + 52) |= 0x20u;
        unint64_t v54 = *((void *)a2 + 1);
        if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v54);
        goto LABEL_87;
      case 0xBu:
        *((_WORD *)this + 52) |= 1u;
        unint64_t v55 = *((void *)a2 + 1);
        if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v55);
        goto LABEL_87;
      case 0xCu:
        *((_WORD *)this + 52) |= 8u;
        unint64_t v56 = *((void *)a2 + 1);
        if (v56 > 0xFFFFFFFFFFFFFFF7 || v56 + 8 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v56);
LABEL_87:
        uint64_t v57 = *((void *)a2 + 1) + 8;
        goto LABEL_132;
      default:
        goto LABEL_19;
    }
LABEL_133:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_133;
  }
  return 0;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 80);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 92));
    __int16 v8 = *(_WORD *)(v3 + 104);
    if ((v8 & 0x40) == 0)
    {
LABEL_8:
      if ((v8 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_9:
    if ((v8 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x200) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x20) == 0)
  {
LABEL_14:
    if ((v8 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_25:
    this = PB::Writer::write(a2, *(double *)(v3 + 32));
    if ((*(_WORD *)(v3 + 104) & 8) == 0) {
      return this;
    }
    goto LABEL_26;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  __int16 v8 = *(_WORD *)(v3 + 104);
  if (v8) {
    goto LABEL_25;
  }
LABEL_15:
  if ((v8 & 8) == 0) {
    return this;
  }
LABEL_26:
  double v9 = *(double *)(v3 + 56);
  return PB::Writer::write(a2, v9);
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::hash_value(CMMsl::TempestPoCAuxiliaryDeviceMotion *this)
{
  unint64_t v2 = (CMMsl::AuxiliaryDeviceMotion *)*((void *)this + 10);
  if (v2) {
    uint64_t v3 = CMMsl::AuxiliaryDeviceMotion::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = PBHashBytes();
  __int16 v5 = *((_WORD *)this + 52);
  if ((v5 & 0x80) != 0)
  {
    float v17 = *((float *)this + 23);
    uint64_t v6 = LODWORD(v17);
    if (v17 == 0.0) {
      uint64_t v6 = 0;
    }
    if ((v5 & 0x40) != 0)
    {
LABEL_6:
      uint64_t v7 = *((unsigned int *)this + 22);
      if ((*((_WORD *)this + 52) & 0x100) != 0) {
        goto LABEL_7;
      }
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if ((v5 & 0x40) != 0) {
      goto LABEL_6;
    }
  }
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 52) & 0x100) != 0)
  {
LABEL_7:
    uint64_t v8 = *((unsigned int *)this + 24);
    if ((*((_WORD *)this + 52) & 0x200) != 0) {
      goto LABEL_8;
    }
LABEL_34:
    uint64_t v10 = 0;
    if ((v5 & 2) != 0) {
      goto LABEL_11;
    }
LABEL_35:
    double v11 = 0.0;
    if ((v5 & 4) != 0) {
      goto LABEL_14;
    }
LABEL_36:
    double v12 = 0.0;
    if ((v5 & 0x10) != 0) {
      goto LABEL_17;
    }
LABEL_37:
    double v13 = 0.0;
    if ((v5 & 0x20) != 0) {
      goto LABEL_20;
    }
LABEL_38:
    double v14 = 0.0;
    if (v5) {
      goto LABEL_23;
    }
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v8 = 0;
  if ((*((_WORD *)this + 52) & 0x200) == 0) {
    goto LABEL_34;
  }
LABEL_8:
  float v9 = *((float *)this + 25);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v5 & 2) == 0) {
    goto LABEL_35;
  }
LABEL_11:
  double v11 = *((double *)this + 5);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v5 & 4) == 0) {
    goto LABEL_36;
  }
LABEL_14:
  double v12 = *((double *)this + 6);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v5 & 0x10) == 0) {
    goto LABEL_37;
  }
LABEL_17:
  double v13 = *((double *)this + 8);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v5 & 0x20) == 0) {
    goto LABEL_38;
  }
LABEL_20:
  double v14 = *((double *)this + 9);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if (v5)
  {
LABEL_23:
    double v15 = *((double *)this + 4);
    if (v15 == 0.0) {
      double v15 = 0.0;
    }
    if ((v5 & 8) != 0) {
      goto LABEL_26;
    }
LABEL_40:
    double v16 = 0.0;
    return v4 ^ v3 ^ v6 ^ v7 ^ v8 ^ v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16;
  }
LABEL_39:
  double v15 = 0.0;
  if ((v5 & 8) == 0) {
    goto LABEL_40;
  }
LABEL_26:
  double v16 = *((double *)this + 7);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  return v4 ^ v3 ^ v6 ^ v7 ^ v8 ^ v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 80)) {
    operator new();
  }
  return this;
}

void CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation(CMMsl::TempestPoCListenerOrientation *this)
{
  *(void *)this = &unk_2706455B0;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::TempestPoCListenerOrientation *CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation(CMMsl::TempestPoCListenerOrientation *this, const CMMsl::TempestPoCListenerOrientation *a2)
{
  *(void *)this = &unk_2706455B0;
  *((void *)this + 1) = 0;
  uint64_t v4 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 24) = 0;
  __int16 v5 = *((_WORD *)a2 + 48);
  if ((v5 & 0x10) != 0)
  {
    uint64_t v7 = *((void *)a2 + 8);
    __int16 v6 = 16;
    *((_WORD *)this + 48) = 16;
    *((void *)this + 8) = v7;
    __int16 v5 = *((_WORD *)a2 + 48);
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = 0;
  if ((*((_WORD *)a2 + 48) & 0x200) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 22);
    v6 |= 0x200u;
    *((_WORD *)this + 48) = v6;
    *((_DWORD *)this + 22) = v8;
    __int16 v5 = *((_WORD *)a2 + 48);
  }
LABEL_6:
  if ((v5 & 0x80) == 0)
  {
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v13 = *((_DWORD *)a2 + 20);
  v6 |= 0x80u;
  *((_WORD *)this + 48) = v6;
  *((_DWORD *)this + 20) = v13;
  if ((*((_WORD *)a2 + 48) & 0x100) != 0)
  {
LABEL_8:
    int v9 = *((_DWORD *)a2 + 21);
    *((_WORD *)this + 48) = v6 | 0x100;
    *((_DWORD *)this + 21) = v9;
  }
LABEL_9:
  if (this != a2) {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v10 = *((_WORD *)a2 + 48);
  if ((v10 & 0x400) != 0)
  {
    char v14 = *((unsigned char *)a2 + 92);
    *((_WORD *)this + 48) |= 0x400u;
    *((unsigned char *)this + 92) = v14;
    __int16 v10 = *((_WORD *)a2 + 48);
    if ((v10 & 0x20) == 0)
    {
LABEL_13:
      if ((v10 & 0x40) == 0) {
        goto LABEL_14;
      }
      goto LABEL_24;
    }
  }
  else if ((v10 & 0x20) == 0)
  {
    goto LABEL_13;
  }
  int v15 = *((_DWORD *)a2 + 18);
  *((_WORD *)this + 48) |= 0x20u;
  *((_DWORD *)this + 18) = v15;
  __int16 v10 = *((_WORD *)a2 + 48);
  if ((v10 & 0x40) == 0)
  {
LABEL_14:
    if ((v10 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v16 = *((_DWORD *)a2 + 19);
  *((_WORD *)this + 48) |= 0x40u;
  *((_DWORD *)this + 19) = v16;
  __int16 v10 = *((_WORD *)a2 + 48);
  if ((v10 & 8) == 0)
  {
LABEL_15:
    if ((v10 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v17 = *((void *)a2 + 7);
  *((_WORD *)this + 48) |= 8u;
  *((void *)this + 7) = v17;
  __int16 v10 = *((_WORD *)a2 + 48);
  if ((v10 & 1) == 0)
  {
LABEL_16:
    if ((v10 & 4) == 0) {
      goto LABEL_17;
    }
LABEL_27:
    uint64_t v19 = *((void *)a2 + 6);
    *((_WORD *)this + 48) |= 4u;
    *((void *)this + 6) = v19;
    if ((*((_WORD *)a2 + 48) & 2) == 0) {
      return this;
    }
    goto LABEL_18;
  }
LABEL_26:
  uint64_t v18 = *((void *)a2 + 4);
  *((_WORD *)this + 48) |= 1u;
  *((void *)this + 4) = v18;
  __int16 v10 = *((_WORD *)a2 + 48);
  if ((v10 & 4) != 0) {
    goto LABEL_27;
  }
LABEL_17:
  if ((v10 & 2) != 0)
  {
LABEL_18:
    uint64_t v11 = *((void *)a2 + 5);
    *((_WORD *)this + 48) |= 2u;
    *((void *)this + 5) = v11;
  }
  return this;
}

CMMsl *CMMsl::TempestPoCListenerOrientation::operator=(CMMsl *a1, const CMMsl::TempestPoCListenerOrientation *a2)
{
  if (a1 != a2)
  {
    CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation((CMMsl::TempestPoCListenerOrientation *)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCListenerOrientation *)v5, v3);
    CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation((CMMsl::TempestPoCListenerOrientation *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TempestPoCListenerOrientation *a2, CMMsl::TempestPoCListenerOrientation *a3)
{
  int v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 92);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
  *((unsigned char *)a2 + 92) = v7;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706455B0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

CMMsl *CMMsl::TempestPoCListenerOrientation::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCListenerOrientation *)v5, v3);
    CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation((CMMsl::TempestPoCListenerOrientation *)v5);
  }
  return a1;
}

uint64_t CMMsl::TempestPoCListenerOrientation::formatText(CMMsl::TempestPoCListenerOrientation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "angularVelocityConstraintRps", *((float *)this + 18));
    __int16 v5 = *((_WORD *)this + 48);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "consumedAuxTimestamp", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "dthetaNormRad", *((float *)this + 19));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x400) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "inBTZ");
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "listenerPitch", *((float *)this + 20));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "listenerRoll", *((float *)this + 21));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "listenerYaw", *((float *)this + 22));
  if ((*((_WORD *)this + 48) & 2) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "machAbsTimestamp", *((double *)this + 5));
LABEL_10:
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "quaternion", v8);
  }
  __int16 v9 = *((_WORD *)this + 48);
  if ((v9 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "receivedAuxTimestamp", *((double *)this + 6));
    __int16 v9 = *((_WORD *)this + 48);
    if ((v9 & 8) == 0)
    {
LABEL_14:
      if ((v9 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  else if ((v9 & 8) == 0)
  {
    goto LABEL_14;
  }
  PB::TextFormatter::format(a2, "srcTimestamp", *((double *)this + 7));
  if ((*((_WORD *)this + 48) & 0x10) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
LABEL_16:
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::TempestPoCListenerOrientation::readFrom(CMMsl::TempestPoCListenerOrientation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 48) |= 0x10u;
        unint64_t v19 = *((void *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((void *)a2 + 2)) {
          goto LABEL_102;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v19);
        goto LABEL_79;
      case 2u:
        *((_WORD *)this + 48) |= 0x200u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((void *)a2 + 2)) {
          goto LABEL_102;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v20);
        goto LABEL_104;
      case 3u:
        *((_WORD *)this + 48) |= 0x80u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((void *)a2 + 2)) {
          goto LABEL_102;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v21);
        goto LABEL_104;
      case 4u:
        *((_WORD *)this + 48) |= 0x100u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)a2 + 2)) {
          goto LABEL_102;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v22);
        goto LABEL_104;
      case 5u:
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v23 = *((void *)a2 + 1);
          unint64_t v24 = *((void *)a2 + 2);
          while (v23 < v24 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v26 = (char *)*((void *)this + 2);
            unint64_t v25 = *((void *)this + 3);
            if ((unint64_t)v26 >= v25)
            {
              unint64_t v28 = (char *)*((void *)this + 1);
              uint64_t v29 = (v26 - v28) >> 2;
              unint64_t v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 62) {
                goto LABEL_113;
              }
              uint64_t v31 = v25 - (void)v28;
              if (v31 >> 1 > v30) {
                unint64_t v30 = v31 >> 1;
              }
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v32 = v30;
              }
              if (v32)
              {
                unint64_t v32 = (unint64_t)sub_2572C76F0(v32);
                unint64_t v28 = (char *)*((void *)this + 1);
                unint64_t v26 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v33 = 0;
              }
              unint64_t v34 = (_DWORD *)(v32 + 4 * v29);
              *unint64_t v34 = 0;
              uint64_t v27 = v34 + 1;
              while (v26 != v28)
              {
                int v35 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *--unint64_t v34 = v35;
              }
              *((void *)this + 1) = v34;
              *((void *)this + 2) = v27;
              *((void *)this + 3) = v32 + 4 * v33;
              if (v28) {
                operator delete(v28);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v26 = 0;
              uint64_t v27 = v26 + 4;
            }
            *((void *)this + 2) = v27;
            unint64_t v36 = *((void *)a2 + 1);
            if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v27 - 1) = *(_DWORD *)(*(void *)a2 + v36);
            unint64_t v24 = *((void *)a2 + 2);
            unint64_t v23 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v23;
          }
          PB::Reader::recallMark();
        }
        else
        {
          char v49 = (char *)*((void *)this + 2);
          unint64_t v48 = *((void *)this + 3);
          if ((unint64_t)v49 >= v48)
          {
            unint64_t v51 = (char *)*((void *)this + 1);
            uint64_t v52 = (v49 - v51) >> 2;
            unint64_t v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62) {
LABEL_113:
            }
              sub_2570AFD0C();
            uint64_t v54 = v48 - (void)v51;
            if (v54 >> 1 > v53) {
              unint64_t v53 = v54 >> 1;
            }
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v53;
            }
            if (v55)
            {
              unint64_t v55 = (unint64_t)sub_2572C76F0(v55);
              unint64_t v51 = (char *)*((void *)this + 1);
              char v49 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v57 = (_DWORD *)(v55 + 4 * v52);
            *uint64_t v57 = 0;
            unint64_t v50 = v57 + 1;
            while (v49 != v51)
            {
              int v58 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *--uint64_t v57 = v58;
            }
            *((void *)this + 1) = v57;
            *((void *)this + 2) = v50;
            *((void *)this + 3) = v55 + 4 * v56;
            if (v51) {
              operator delete(v51);
            }
          }
          else
          {
            *(_DWORD *)char v49 = 0;
            unint64_t v50 = v49 + 4;
          }
          *((void *)this + 2) = v50;
          unint64_t v59 = *((void *)a2 + 1);
          if (v59 <= 0xFFFFFFFFFFFFFFFBLL && v59 + 4 <= *((void *)a2 + 2))
          {
            *(v50 - 1) = *(_DWORD *)(*(void *)a2 + v59);
LABEL_104:
            uint64_t v47 = *((void *)a2 + 1) + 4;
LABEL_105:
            *((void *)a2 + 1) = v47;
          }
          else
          {
LABEL_102:
            *((unsigned char *)a2 + 24) = 1;
          }
        }
        break;
      case 6u:
        *((_WORD *)this + 48) |= 0x400u;
        unint64_t v37 = *((void *)a2 + 1);
        if (v37 >= *((void *)a2 + 2))
        {
          BOOL v40 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v38 = v37 + 1;
          int v39 = *(unsigned __int8 *)(*(void *)a2 + v37);
          *((void *)a2 + 1) = v38;
          BOOL v40 = v39 != 0;
        }
        *((unsigned char *)this + 92) = v40;
        break;
      case 7u:
        *((_WORD *)this + 48) |= 0x20u;
        unint64_t v41 = *((void *)a2 + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2)) {
          goto LABEL_102;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v41);
        goto LABEL_104;
      case 8u:
        *((_WORD *)this + 48) |= 0x40u;
        unint64_t v42 = *((void *)a2 + 1);
        if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)a2 + 2)) {
          goto LABEL_102;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v42);
        goto LABEL_104;
      case 9u:
        *((_WORD *)this + 48) |= 8u;
        unint64_t v43 = *((void *)a2 + 1);
        if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((void *)a2 + 2)) {
          goto LABEL_102;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v43);
        goto LABEL_79;
      case 0xAu:
        *((_WORD *)this + 48) |= 1u;
        unint64_t v44 = *((void *)a2 + 1);
        if (v44 > 0xFFFFFFFFFFFFFFF7 || v44 + 8 > *((void *)a2 + 2)) {
          goto LABEL_102;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v44);
        goto LABEL_79;
      case 0xBu:
        *((_WORD *)this + 48) |= 4u;
        unint64_t v45 = *((void *)a2 + 1);
        if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((void *)a2 + 2)) {
          goto LABEL_102;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v45);
        goto LABEL_79;
      case 0xCu:
        *((_WORD *)this + 48) |= 2u;
        unint64_t v46 = *((void *)a2 + 1);
        if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((void *)a2 + 2)) {
          goto LABEL_102;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v46);
LABEL_79:
        uint64_t v47 = *((void *)a2 + 1) + 8;
        goto LABEL_105;
      default:
        goto LABEL_19;
    }
LABEL_106:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_106;
  }
  return 0;
}

uint64_t CMMsl::TempestPoCListenerOrientation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 96);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64));
    __int16 v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
LABEL_19:
      this = PB::Writer::write(a2, *(float *)(v3 + 80));
      if ((*(_WORD *)(v3 + 96) & 0x100) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(_WORD *)(this + 96) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) != 0) {
    goto LABEL_19;
  }
LABEL_4:
  if ((v4 & 0x100) != 0) {
LABEL_5:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 84));
LABEL_6:
  __int16 v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x400) != 0)
  {
    this = PB::Writer::write(a2);
    __int16 v8 = *(_WORD *)(v3 + 96);
    if ((v8 & 0x20) == 0)
    {
LABEL_11:
      if ((v8 & 0x40) == 0) {
        goto LABEL_12;
      }
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x40) == 0)
  {
LABEL_12:
    if ((v8 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 8) == 0)
  {
LABEL_13:
    if ((v8 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 1) == 0)
  {
LABEL_14:
    if ((v8 & 4) == 0) {
      goto LABEL_15;
    }
LABEL_26:
    this = PB::Writer::write(a2, *(double *)(v3 + 48));
    if ((*(_WORD *)(v3 + 96) & 2) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 4) != 0) {
    goto LABEL_26;
  }
LABEL_15:
  if ((v8 & 2) == 0) {
    return this;
  }
LABEL_27:
  double v9 = *(double *)(v3 + 40);
  return PB::Writer::write(a2, v9);
}

uint64_t CMMsl::TempestPoCListenerOrientation::hash_value(CMMsl::TempestPoCListenerOrientation *this)
{
  __int16 v2 = *((_WORD *)this + 48);
  if ((v2 & 0x10) == 0)
  {
    uint64_t v3 = 0;
    if ((*((_WORD *)this + 48) & 0x200) != 0) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v5 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  if (*((double *)this + 8) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 8);
  }
  if ((*((_WORD *)this + 48) & 0x200) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  float v4 = *((float *)this + 22);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = LODWORD(v4);
  }
  if ((v2 & 0x80) != 0)
  {
LABEL_7:
    float v6 = *((float *)this + 20);
    if (v6 == 0.0) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = LODWORD(v6);
    }
    if ((*((_WORD *)this + 48) & 0x100) != 0) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v9 = 0;
    goto LABEL_21;
  }
LABEL_19:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 48) & 0x100) == 0) {
    goto LABEL_20;
  }
LABEL_11:
  float v8 = *((float *)this + 21);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = LODWORD(v8);
  }
LABEL_21:
  uint64_t v10 = PBHashBytes();
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 0x400) == 0)
  {
    uint64_t v12 = 0;
    if ((v11 & 0x20) != 0) {
      goto LABEL_23;
    }
LABEL_42:
    uint64_t v14 = 0;
    if ((v11 & 0x40) != 0) {
      goto LABEL_26;
    }
LABEL_43:
    uint64_t v16 = 0;
    if ((v11 & 8) != 0) {
      goto LABEL_29;
    }
LABEL_44:
    double v17 = 0.0;
    if (v11) {
      goto LABEL_32;
    }
LABEL_45:
    double v18 = 0.0;
    if ((v11 & 4) != 0) {
      goto LABEL_35;
    }
    goto LABEL_46;
  }
  uint64_t v12 = *((unsigned __int8 *)this + 92);
  if ((v11 & 0x20) == 0) {
    goto LABEL_42;
  }
LABEL_23:
  float v13 = *((float *)this + 18);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v11 & 0x40) == 0) {
    goto LABEL_43;
  }
LABEL_26:
  float v15 = *((float *)this + 19);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v11 & 8) == 0) {
    goto LABEL_44;
  }
LABEL_29:
  double v17 = *((double *)this + 7);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v11 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_32:
  double v18 = *((double *)this + 4);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v11 & 4) != 0)
  {
LABEL_35:
    double v19 = *((double *)this + 6);
    if (v19 == 0.0) {
      double v19 = 0.0;
    }
    if ((v11 & 2) != 0) {
      goto LABEL_38;
    }
LABEL_47:
    double v20 = 0.0;
    return v5 ^ v3 ^ v7 ^ v9 ^ v12 ^ v14 ^ v16 ^ *(void *)&v17 ^ v10 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20;
  }
LABEL_46:
  double v19 = 0.0;
  if ((v11 & 2) == 0) {
    goto LABEL_47;
  }
LABEL_38:
  double v20 = *((double *)this + 5);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  return v5 ^ v3 ^ v7 ^ v9 ^ v12 ^ v14 ^ v16 ^ *(void *)&v17 ^ v10 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20;
}

void CMMsl::Timestamp::~Timestamp(CMMsl::Timestamp *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::Timestamp::Timestamp(uint64_t this, const CMMsl::Timestamp *a2)
{
  *(void *)this = &unk_2706455E8;
  *(void *)(this + 16) = 0;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = 2;
    *(_DWORD *)(this + 16) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 1) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 20))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = v2;
    *(void *)(this + 8) = v4;
  }
  return this;
}

const CMMsl::Timestamp *CMMsl::Timestamp::operator=(const CMMsl::Timestamp *a1, const CMMsl::Timestamp *a2)
{
  if (a1 != a2)
  {
    CMMsl::Timestamp::Timestamp((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v3;
    uint64_t v4 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::Timestamp *a2, CMMsl::Timestamp *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  int v4 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return this;
}

uint64_t CMMsl::Timestamp::Timestamp(uint64_t result, uint64_t a2)
{
  *(void *)double result = &unk_2706455E8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

{
  *(void *)double result = &unk_2706455E8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t CMMsl::Timestamp::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4;
    void v8[2] = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = &unk_2706455E8;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::Timestamp::formatText(CMMsl::Timestamp *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "source");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Timestamp::readFrom(CMMsl::Timestamp *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v30 = 0;
          }
LABEL_63:
          unint64_t v3 = v38 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)a2 + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
              break;
            }
          }
        }
LABEL_64:
        *((void *)this + 1) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v34 = v19++;
            char v35 = *(unsigned char *)(v20 + v34);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_59:
          unint64_t v3 = v34 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v3 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v3;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 4) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Timestamp::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::Timestamp::hash_value(CMMsl::Timestamp *this)
{
  if ((*((unsigned char *)this + 20) & 2) != 0)
  {
    uint64_t v1 = *((int *)this + 4);
    if (*((unsigned char *)this + 20)) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((void *)this + 1);
  return v2 ^ v1;
}

void CMMsl::TouchOscarEmu::~TouchOscarEmu(CMMsl::TouchOscarEmu *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t this, const CMMsl::TouchOscarEmu *a2)
{
  *(void *)this = &unk_270645620;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::TouchOscarEmu::operator=(uint64_t a1, const CMMsl::TouchOscarEmu *a2)
{
  if ((const CMMsl::TouchOscarEmu *)a1 != a2)
  {
    CMMsl::TouchOscarEmu::TouchOscarEmu((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TouchOscarEmu *a2, CMMsl::TouchOscarEmu *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645620;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645620;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::TouchOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = &unk_270645620;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::TouchOscarEmu::formatText(CMMsl::TouchOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "touchDetected");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::TouchOscarEmu::readFrom(CMMsl::TouchOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::TouchOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

uint64_t CMMsl::TouchOscarEmu::hash_value(CMMsl::TouchOscarEmu *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

void CMMsl::TrackRunData::~TrackRunData(CMMsl::TrackRunData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::TrackRunData::TrackRunData(uint64_t this, const CMMsl::TrackRunData *a2)
{
  *(void *)this = &unk_270645658;
  *(_DWORD *)(this + 40) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x10) != 0)
  {
    int v4 = *((_DWORD *)a2 + 7);
    char v3 = 16;
    *(unsigned char *)(this + 40) = 16;
    *(_DWORD *)(this + 28) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 40) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 40) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(unsigned char *)(this + 40) = v3;
  *(_DWORD *)(this + 16) = v7;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v8 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(unsigned char *)(this + 40) = v3;
  *(_DWORD *)(this + 32) = v8;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return this;
    }
LABEL_16:
    char v10 = *((unsigned char *)a2 + 36);
    *(unsigned char *)(this + 40) = v3 | 0x40;
    *(unsigned char *)(this + 36) = v10;
    return this;
  }
LABEL_15:
  uint64_t v9 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 40) = v3;
  *(void *)(this + 8) = v9;
  if ((*((unsigned char *)a2 + 40) & 0x40) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::TrackRunData::operator=(uint64_t a1, const CMMsl::TrackRunData *a2)
{
  if ((const CMMsl::TrackRunData *)a1 != a2)
  {
    CMMsl::TrackRunData::TrackRunData((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v4;
    int v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    int v11 = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v6;
    LOBYTE(v5) = *(unsigned char *)(a1 + 36);
    *(unsigned char *)(a1 + 36) = v12;
    char v12 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TrackRunData *a2, CMMsl::TrackRunData *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  int v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  int v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  int v8 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v8;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v8) = *((unsigned char *)this + 36);
  *((unsigned char *)this + 36) = *((unsigned char *)a2 + 36);
  *((unsigned char *)a2 + 36) = v8;
  return result;
}

double CMMsl::TrackRunData::TrackRunData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645658;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645658;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  return result;
}

uint64_t CMMsl::TrackRunData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v11[0] = &unk_270645658;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v4 = *(_DWORD *)(a2 + 32);
    uint64_t v5 = *(void *)(a2 + 8);
    char v6 = *(unsigned char *)(a2 + 36);
    int v15 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 16);
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 16) = v8;
    long long v12 = v7;
    int v9 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v4;
    int v13 = v9;
    *(void *)&long long v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v5;
    v11[1] = v7;
    LOBYTE(v9) = *(unsigned char *)(a1 + 36);
    *(unsigned char *)(a1 + 36) = v6;
    char v14 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::TrackRunData::formatText(CMMsl::TrackRunData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "distanceToTrackMeters", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "estimatedLaneConfidence");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "estimatedLaneNumber");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "laneCount");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "laneNumber");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "odometerHasBeenCorrected");
  if ((*((unsigned char *)this + 40) & 0x20) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "trackProximity");
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::TrackRunData::readFrom(CMMsl::TrackRunData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 0x10u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_110;
            }
            unint64_t v55 = v21++;
            char v56 = *(unsigned char *)(v22 + v55);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v56 & 0x7F) << v53;
            if ((v56 & 0x80) == 0) {
              break;
            }
            v53 += 7;
            BOOL v14 = v54++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_109:
              unint64_t v2 = v55 + 1;
              goto LABEL_110;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
          goto LABEL_109;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_110;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_110:
        *((_DWORD *)this + 7) = v25;
        break;
      case 2u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v57 = 0;
          unsigned int v58 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_115;
            }
            unint64_t v59 = v27++;
            char v60 = *(unsigned char *)(v28 + v59);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v60 & 0x7F) << v57;
            if ((v60 & 0x80) == 0) {
              break;
            }
            v57 += 7;
            BOOL v14 = v58++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_114:
              unint64_t v2 = v59 + 1;
              goto LABEL_115;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
          goto LABEL_114;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_115;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_115:
        *((_DWORD *)this + 5) = v31;
        break;
      case 3u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_120;
            }
            unint64_t v63 = v33++;
            char v64 = *(unsigned char *)(v34 + v63);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v64 & 0x7F) << v61;
            if ((v64 & 0x80) == 0) {
              break;
            }
            v61 += 7;
            BOOL v14 = v62++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_119:
              unint64_t v2 = v63 + 1;
              goto LABEL_120;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
          goto LABEL_119;
        }
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        do
        {
          unint64_t v2 = v33 + 1;
          *((void *)a2 + 1) = v33 + 1;
          char v38 = *(unsigned char *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0) {
            goto LABEL_120;
          }
          v35 += 7;
          unint64_t v33 = v2;
          BOOL v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_120:
        *((_DWORD *)this + 6) = v37;
        break;
      case 4u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v39 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v40 = *(void *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v43 = 0;
          if (v2 <= v39) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_125;
            }
            unint64_t v67 = v39++;
            char v68 = *(unsigned char *)(v40 + v67);
            *((void *)a2 + 1) = v39;
            v43 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0) {
              break;
            }
            v65 += 7;
            BOOL v14 = v66++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_124:
              unint64_t v2 = v67 + 1;
              goto LABEL_125;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v43) = 0;
          }
          goto LABEL_124;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        do
        {
          unint64_t v2 = v39 + 1;
          *((void *)a2 + 1) = v39 + 1;
          char v44 = *(unsigned char *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0) {
            goto LABEL_125;
          }
          v41 += 7;
          unint64_t v39 = v2;
          BOOL v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_125:
        *((_DWORD *)this + 4) = v43;
        break;
      case 5u:
        *((unsigned char *)this + 40) |= 0x20u;
        unint64_t v45 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v46 = *(void *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v49 = 0;
          if (v2 <= v45) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_130;
            }
            unint64_t v71 = v45++;
            char v72 = *(unsigned char *)(v46 + v71);
            *((void *)a2 + 1) = v45;
            v49 |= (unint64_t)(v72 & 0x7F) << v69;
            if ((v72 & 0x80) == 0) {
              break;
            }
            v69 += 7;
            BOOL v14 = v70++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_129:
              unint64_t v2 = v71 + 1;
              goto LABEL_130;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v49) = 0;
          }
          goto LABEL_129;
        }
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        do
        {
          unint64_t v2 = v45 + 1;
          *((void *)a2 + 1) = v45 + 1;
          char v50 = *(unsigned char *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0) {
            goto LABEL_130;
          }
          v47 += 7;
          unint64_t v45 = v2;
          BOOL v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_130:
        *((_DWORD *)this + 8) = v49;
        break;
      case 6u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 7u:
        *((unsigned char *)this + 40) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v52 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v51 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v52 = v51 != 0;
        }
        *((unsigned char *)this + 36) = v52;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::TrackRunData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 40) & 0x40) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_15:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::TrackRunData::hash_value(CMMsl::TrackRunData *this)
{
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
    uint64_t v1 = *((int *)this + 7);
    if ((*((unsigned char *)this + 40) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((int *)this + 5);
      if ((*((unsigned char *)this + 40) & 8) != 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 40) & 8) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 6);
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 40) & 2) != 0)
  {
LABEL_5:
    uint64_t v4 = *((int *)this + 4);
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 40) & 0x20) != 0)
  {
LABEL_6:
    uint64_t v5 = *((int *)this + 8);
    if (*((unsigned char *)this + 40)) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v5 = 0;
  if (*((unsigned char *)this + 40))
  {
LABEL_7:
    double v6 = *((double *)this + 1);
    if (v6 == 0.0) {
      double v6 = 0.0;
    }
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_10;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ *(void *)&v6 ^ v7;
  }
LABEL_16:
  double v6 = 0.0;
  if ((*((unsigned char *)this + 40) & 0x40) == 0) {
    goto LABEL_17;
  }
LABEL_10:
  uint64_t v7 = *((unsigned __int8 *)this + 36);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ *(void *)&v6 ^ v7;
}

void CMMsl::UWBRange::~UWBRange(CMMsl::UWBRange *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::UWBRange::UWBRange(CMMsl::UWBRange *this, const CMMsl::UWBRange *a2)
{
  *(void *)this = &unk_270645690;
  *((_DWORD *)this + 14) = 0;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    char v3 = 8;
    *((unsigned char *)this + 56) = 8;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 56) & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 56) = v3;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 56);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 56) = v3;
    *((void *)this + 1) = v5;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v6 = *((void *)a2 + 2);
  v3 |= 2u;
  *((unsigned char *)this + 56) = v3;
  *((void *)this + 2) = v6;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_14:
    double result = *((double *)a2 + 6);
    *((unsigned char *)this + 56) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_13:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((unsigned char *)this + 56) = v3;
  *((double *)this + 5) = result;
  if ((*((unsigned char *)a2 + 56) & 0x20) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t CMMsl::UWBRange::operator=(uint64_t a1, const CMMsl::UWBRange *a2)
{
  if ((const CMMsl::UWBRange *)a1 != a2)
  {
    CMMsl::UWBRange::UWBRange((CMMsl::UWBRange *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::UWBRange *a2, CMMsl::UWBRange *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  double result = *((double *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::UWBRange::UWBRange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645690;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645690;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t CMMsl::UWBRange::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = &unk_270645690;
    int v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    int v13 = *(_DWORD *)(a1 + 56);
    long long v4 = *(_OWORD *)(a2 + 24);
    long long v11 = *(_OWORD *)(a1 + 24);
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 40) = v7;
    long long v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::UWBRange::formatText(CMMsl::UWBRange *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 56);
  if (v5)
  {
    PB::TextFormatter::format(a2, "cycleIndex");
    char v5 = *((unsigned char *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "error");
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "machAbsoluteTimestamp", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 4));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "range", *((double *)this + 5));
  if ((*((unsigned char *)this + 56) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "rssi", *((double *)this + 6));
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::UWBRange::readFrom(CMMsl::UWBRange *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_75;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 56) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_64;
      case 2u:
        *((unsigned char *)this + 56) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_64;
      case 3u:
        *((unsigned char *)this + 56) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_69;
            }
            unint64_t v34 = v20++;
            char v35 = *(unsigned char *)(v21 + v34);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_68:
              unint64_t v2 = v34 + 1;
              goto LABEL_69;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_68;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_69;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_69:
        *((void *)this + 1) = v24;
        break;
      case 4u:
        *((unsigned char *)this + 56) |= 2u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_74;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
LABEL_73:
              unint64_t v2 = v38 + 1;
              goto LABEL_74;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v30 = 0;
          }
          goto LABEL_73;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_74;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        uint64_t v30 = 0;
LABEL_74:
        *((void *)this + 2) = v30;
        break;
      case 5u:
        *((unsigned char *)this + 56) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_64;
      case 6u:
        *((unsigned char *)this + 56) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
LABEL_64:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_48:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_75:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::UWBRange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 56);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
    if ((*(unsigned char *)(v3 + 56) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 48);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::UWBRange::hash_value(CMMsl::UWBRange *this)
{
  if ((*((unsigned char *)this + 56) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 56) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_17:
    double v2 = 0.0;
    if (*((unsigned char *)this + 56)) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if (*((unsigned char *)this + 56))
  {
LABEL_6:
    uint64_t v3 = *((void *)this + 1);
    if ((*((unsigned char *)this + 56) & 2) != 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 56) & 2) != 0)
  {
LABEL_7:
    uint64_t v4 = *((void *)this + 2);
    if ((*((unsigned char *)this + 56) & 0x10) != 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 56) & 0x10) != 0)
  {
LABEL_8:
    double v5 = *((double *)this + 5);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if ((*((unsigned char *)this + 56) & 0x20) != 0) {
      goto LABEL_11;
    }
LABEL_21:
    double v6 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6;
  }
LABEL_20:
  double v5 = 0.0;
  if ((*((unsigned char *)this + 56) & 0x20) == 0) {
    goto LABEL_21;
  }
LABEL_11:
  double v6 = *((double *)this + 6);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6;
}

void CMMsl::UltraFastAccel::~UltraFastAccel(CMMsl::UltraFastAccel *this)
{
  *(void *)this = &unk_2706456C8;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::UltraFastAccel::~UltraFastAccel(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::UltraFastAccel::UltraFastAccel(uint64_t this, const CMMsl::UltraFastAccel *a2)
{
  *(void *)this = &unk_2706456C8;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 1);
    *(unsigned char *)(this + 24) |= 1u;
    *(void *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::UltraFastAccel::operator=(uint64_t a1, const CMMsl::UltraFastAccel *a2)
{
  if ((const CMMsl::UltraFastAccel *)a1 != a2)
  {
    CMMsl::UltraFastAccel::UltraFastAccel((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v6 = v10;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v6;
    uint64_t v9 = v5;
    uint64_t v10 = v4;
    CMMsl::UltraFastAccel::~UltraFastAccel((CMMsl::UltraFastAccel *)&v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::UltraFastAccel *a2, CMMsl::UltraFastAccel *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v5 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(this + 16);
  uint64_t v6 = *((void *)a2 + 2);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *(void *)(this + 16) = v6;
  *((void *)a2 + 1) = v5;
  *((void *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::UltraFastAccel::UltraFastAccel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706456C8;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::UltraFastAccel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::UltraFastAccel::UltraFastAccel((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v6 = v10;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v6;
    uint64_t v9 = v5;
    uint64_t v10 = v4;
    CMMsl::UltraFastAccel::~UltraFastAccel((CMMsl::UltraFastAccel *)&v8);
  }
  return a1;
}

uint64_t CMMsl::UltraFastAccel::formatText(CMMsl::UltraFastAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "aopTimestamp");
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::UltraFastAccel::readFrom(CMMsl::UltraFastAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v21 == v20)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v30 = v20 + 1;
            char v31 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v30;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v20 = v30;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
LABEL_39:
              uint64_t v25 = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((void *)this + 1) = v25;
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::UltraFastAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(unsigned char *)(v3 + 24))
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

unint64_t CMMsl::UltraFastAccel::hash_value(CMMsl::UltraFastAccel *this)
{
  unint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v2 = CMMsl::Accel::hash_value((CMMsl::Accel *)v2);
  }
  if (*((unsigned char *)this + 24)) {
    uint64_t v3 = *((void *)this + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::UltraFastAccel::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

void CMMsl::UserStudyEvent::~UserStudyEvent(CMMsl::UserStudyEvent *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270645700;
  *((void *)this + 1) = 0;
  if (v2) {
    sub_2572C6E48(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::UserStudyEvent::~UserStudyEvent(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::UserStudyEvent::UserStudyEvent(uint64_t this, const CMMsl::UserStudyEvent *a2)
{
  *(void *)this = &unk_270645700;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 16) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::UserStudyEvent::operator=(uint64_t a1, const CMMsl::UserStudyEvent *a2)
{
  if ((const CMMsl::UserStudyEvent *)a1 != a2)
  {
    CMMsl::UserStudyEvent::UserStudyEvent((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    CMMsl::UserStudyEvent::~UserStudyEvent((CMMsl::UserStudyEvent *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::UserStudyEvent *a2, CMMsl::UserStudyEvent *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return result;
}

uint64_t CMMsl::UserStudyEvent::UserStudyEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645700;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  if (v4) {
    sub_2572C6E48(v4);
  }
  return a1;
}

uint64_t CMMsl::UserStudyEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::UserStudyEvent::UserStudyEvent((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    CMMsl::UserStudyEvent::~UserStudyEvent((CMMsl::UserStudyEvent *)&v7);
  }
  return a1;
}

uint64_t CMMsl::UserStudyEvent::formatText(CMMsl::UserStudyEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::UserStudyEvent::readFrom(CMMsl::UserStudyEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2) {
        operator new();
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v19);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::UserStudyEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = this;
  if (*(unsigned char *)(this + 24)) {
    this = PB::Writer::write(a2, *(double *)(this + 16));
  }
  if (*(void *)(v2 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

unint64_t CMMsl::UserStudyEvent::hash_value(CMMsl::UserStudyEvent *this)
{
  if (*((unsigned char *)this + 24))
  {
    if (*((double *)this + 2) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 2);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = sub_2572C6F9C(v2);
  }
  return v2 ^ v1;
}

void CMMsl::VIOEstimation::~VIOEstimation(CMMsl::VIOEstimation *this)
{
  *(void *)this = &unk_270645738;
  unint64_t v2 = (void *)*((void *)this + 34);
  if (v2)
  {
    *((void *)this + 35) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 31);
  if (v3)
  {
    *((void *)this + 32) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 28);
  if (v4)
  {
    *((void *)this + 29) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 25);
  if (v5)
  {
    *((void *)this + 26) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 22);
  if (v6)
  {
    *((void *)this + 23) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 19);
  if (v7)
  {
    *((void *)this + 20) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 16);
  if (v8)
  {
    *((void *)this + 17) = v8;
    operator delete(v8);
  }
  char v9 = (void *)*((void *)this + 13);
  if (v9)
  {
    *((void *)this + 14) = v9;
    operator delete(v9);
  }
  unsigned int v10 = (void *)*((void *)this + 10);
  if (v10)
  {
    *((void *)this + 11) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 7);
  if (v11)
  {
    *((void *)this + 8) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 4);
  if (v12)
  {
    *((void *)this + 5) = v12;
    operator delete(v12);
  }
  char v13 = (void *)*((void *)this + 1);
  if (v13)
  {
    *((void *)this + 2) = v13;
    operator delete(v13);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VIOEstimation::~VIOEstimation(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::VIOEstimation *CMMsl::VIOEstimation::VIOEstimation(CMMsl::VIOEstimation *this, const CMMsl::VIOEstimation *a2)
{
  *(void *)this = &unk_270645738;
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v5 = (void *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v6 = (void *)((char *)this + 104);
  *(_OWORD *)((char *)this + 152) = 0u;
  uint64_t v7 = (void *)((char *)this + 152);
  *(_OWORD *)((char *)this + 200) = 0u;
  uint64_t v8 = (void *)((char *)this + 200);
  *(_OWORD *)((char *)this + 248) = 0u;
  char v9 = (void *)((char *)this + 248);
  *((void *)this + 42) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  char v10 = *((unsigned char *)a2 + 340);
  if ((v10 & 0x40) != 0)
  {
    int v12 = *((_DWORD *)a2 + 84);
    char v11 = 64;
    *((unsigned char *)this + 340) = 64;
    *((_DWORD *)this + 84) = v12;
    char v10 = *((unsigned char *)a2 + 340);
    if ((v10 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v11 = 0;
  if ((*((unsigned char *)a2 + 340) & 4) != 0)
  {
LABEL_5:
    uint64_t v13 = *((void *)a2 + 39);
    v11 |= 4u;
    *((unsigned char *)this + 340) = v11;
    *((void *)this + 39) = v13;
    char v10 = *((unsigned char *)a2 + 340);
  }
LABEL_6:
  if (v10)
  {
    uint64_t v19 = *((void *)a2 + 37);
    v11 |= 1u;
    *((unsigned char *)this + 340) = v11;
    *((void *)this + 37) = v19;
    char v10 = *((unsigned char *)a2 + 340);
    if ((v10 & 8) == 0)
    {
LABEL_8:
      if ((v10 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else if ((v10 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v20 = *((void *)a2 + 40);
  v11 |= 8u;
  *((unsigned char *)this + 340) = v11;
  *((void *)this + 40) = v20;
  if ((*((unsigned char *)a2 + 340) & 2) != 0)
  {
LABEL_9:
    uint64_t v14 = *((void *)a2 + 38);
    *((unsigned char *)this + 340) = v11 | 2;
    *((void *)this + 38) = v14;
  }
LABEL_10:
  if (this != a2)
  {
    sub_2572C73EC((void *)this + 22, *((char **)a2 + 22), *((char **)a2 + 23), (uint64_t)(*((void *)a2 + 23) - *((void *)a2 + 22)) >> 3);
    sub_2572C73EC(v6, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
    sub_2572C73EC((void *)this + 34, *((char **)a2 + 34), *((char **)a2 + 35), (uint64_t)(*((void *)a2 + 35) - *((void *)a2 + 34)) >> 3);
    sub_2572C73EC(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_2572C73EC((void *)this + 28, *((char **)a2 + 28), *((char **)a2 + 29), (uint64_t)(*((void *)a2 + 29) - *((void *)a2 + 28)) >> 3);
    sub_2572C73EC(v7, *((char **)a2 + 19), *((char **)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 3);
    sub_2572C73EC((void *)this + 16, *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 3);
    sub_2572C73EC(v9, *((char **)a2 + 31), *((char **)a2 + 32), (uint64_t)(*((void *)a2 + 32) - *((void *)a2 + 31)) >> 3);
    sub_2572C73EC((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_2572C73EC(v8, *((char **)a2 + 25), *((char **)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 3);
    sub_2572C73EC((void *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
    sub_2572C73EC(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  char v15 = *((unsigned char *)a2 + 340);
  if ((v15 & 0x20) != 0)
  {
    int v16 = *((_DWORD *)a2 + 83);
    *((unsigned char *)this + 340) |= 0x20u;
    *((_DWORD *)this + 83) = v16;
    char v15 = *((unsigned char *)a2 + 340);
  }
  if ((v15 & 0x10) != 0)
  {
    int v17 = *((_DWORD *)a2 + 82);
    *((unsigned char *)this + 340) |= 0x10u;
    *((_DWORD *)this + 82) = v17;
  }
  return this;
}

CMMsl *CMMsl::VIOEstimation::operator=(CMMsl *a1, const CMMsl::VIOEstimation *a2)
{
  if (a1 != a2)
  {
    CMMsl::VIOEstimation::VIOEstimation((CMMsl::VIOEstimation *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOEstimation *)v5, v3);
    CMMsl::VIOEstimation::~VIOEstimation((CMMsl::VIOEstimation *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VIOEstimation *a2, CMMsl::VIOEstimation *a3)
{
  int v3 = *((_DWORD *)this + 85);
  *((_DWORD *)this + 85) = *((_DWORD *)a2 + 85);
  *((_DWORD *)a2 + 85) = v3;
  int v4 = *((_DWORD *)this + 84);
  *((_DWORD *)this + 84) = *((_DWORD *)a2 + 84);
  *((_DWORD *)a2 + 84) = v4;
  uint64_t v5 = *((void *)this + 39);
  *((void *)this + 39) = *((void *)a2 + 39);
  *((void *)a2 + 39) = v5;
  uint64_t v6 = *((void *)this + 37);
  *((void *)this + 37) = *((void *)a2 + 37);
  *((void *)a2 + 37) = v6;
  uint64_t v7 = *((void *)this + 40);
  *((void *)this + 40) = *((void *)a2 + 40);
  *((void *)a2 + 40) = v7;
  uint64_t v8 = *((void *)this + 38);
  *((void *)this + 38) = *((void *)a2 + 38);
  *((void *)a2 + 38) = v8;
  uint64_t v9 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v9;
  uint64_t v10 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v10;
  uint64_t v11 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v11;
  uint64_t v12 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v12;
  uint64_t v13 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v13;
  uint64_t v14 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v14;
  uint64_t v15 = *((void *)this + 34);
  *((void *)this + 34) = *((void *)a2 + 34);
  *((void *)a2 + 34) = v15;
  uint64_t v16 = *((void *)this + 35);
  *((void *)this + 35) = *((void *)a2 + 35);
  *((void *)a2 + 35) = v16;
  uint64_t v17 = *((void *)this + 36);
  *((void *)this + 36) = *((void *)a2 + 36);
  *((void *)a2 + 36) = v17;
  uint64_t v18 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v18;
  uint64_t v19 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v19;
  uint64_t v20 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v20;
  uint64_t v21 = *((void *)this + 28);
  *((void *)this + 28) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v21;
  uint64_t v22 = *((void *)this + 29);
  *((void *)this + 29) = *((void *)a2 + 29);
  *((void *)a2 + 29) = v22;
  uint64_t v23 = *((void *)this + 30);
  *((void *)this + 30) = *((void *)a2 + 30);
  *((void *)a2 + 30) = v23;
  uint64_t v24 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v24;
  uint64_t v25 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v25;
  uint64_t v26 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v26;
  uint64_t v27 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v27;
  uint64_t v28 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v28;
  uint64_t v29 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v29;
  uint64_t v30 = *((void *)this + 31);
  *((void *)this + 31) = *((void *)a2 + 31);
  *((void *)a2 + 31) = v30;
  uint64_t v31 = *((void *)this + 32);
  *((void *)this + 32) = *((void *)a2 + 32);
  *((void *)a2 + 32) = v31;
  uint64_t v32 = *((void *)this + 33);
  *((void *)this + 33) = *((void *)a2 + 33);
  *((void *)a2 + 33) = v32;
  uint64_t v33 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v33;
  uint64_t v34 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v34;
  uint64_t v35 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v35;
  uint64_t v36 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v36;
  uint64_t v37 = *((void *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((void *)a2 + 26) = v37;
  uint64_t v38 = *((void *)this + 27);
  *((void *)this + 27) = *((void *)a2 + 27);
  *((void *)a2 + 27) = v38;
  uint64_t v39 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v39;
  uint64_t v40 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v40;
  uint64_t v41 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v41;
  uint64_t v42 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v42;
  uint64_t v43 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v43;
  uint64_t v44 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v44;
  LODWORD(v8) = *((_DWORD *)this + 83);
  *((_DWORD *)this + 83) = *((_DWORD *)a2 + 83);
  *((_DWORD *)a2 + 83) = v8;
  float result = *((float *)this + 82);
  *((_DWORD *)this + 82) = *((_DWORD *)a2 + 82);
  *((float *)a2 + 82) = result;
  return result;
}

uint64_t CMMsl::VIOEstimation::VIOEstimation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645738;
  uint64_t v6 = a1 + 32;
  uint64_t v7 = a1 + 80;
  uint64_t v5 = a1 + 128;
  *(_DWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a2 + 340) = 0;
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  sub_2572C7560(a1 + 176, (__n128 *)(a2 + 176));
  sub_2572C7560(a1 + 104, (__n128 *)(a2 + 104));
  sub_2572C7560(a1 + 272, (__n128 *)(a2 + 272));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(a1 + 224, (__n128 *)(a2 + 224));
  sub_2572C7560(a1 + 152, (__n128 *)(a2 + 152));
  sub_2572C7560(v5, (__n128 *)(a2 + 128));
  sub_2572C7560(a1 + 248, (__n128 *)(a2 + 248));
  sub_2572C7560(v6, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 200, (__n128 *)(a2 + 200));
  sub_2572C7560(v7, (__n128 *)(a2 + 80));
  sub_2572C7560(a1 + 56, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a2 + 332);
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
  return a1;
}

CMMsl *CMMsl::VIOEstimation::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VIOEstimation::VIOEstimation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOEstimation *)v5, v3);
    CMMsl::VIOEstimation::~VIOEstimation((CMMsl::VIOEstimation *)v5);
  }
  return a1;
}

uint64_t CMMsl::VIOEstimation::formatText(CMMsl::VIOEstimation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  uint64_t v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "accelBias", v7);
  }
  uint64_t v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "accelBiasCov", v10);
  }
  char v11 = *((unsigned char *)this + 340);
  if ((v11 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "cameraImageResolutionHeight", *((float *)this + 82));
    char v11 = *((unsigned char *)this + 340);
  }
  if ((v11 & 0x20) != 0) {
    PB::TextFormatter::format(a2, "cameraImageResolutionWidth", *((float *)this + 83));
  }
  uint64_t v12 = (double *)*((void *)this + 7);
  uint64_t v13 = (double *)*((void *)this + 8);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(a2, "cameraIntrinsics", v14);
  }
  uint64_t v15 = (double *)*((void *)this + 10);
  uint64_t v16 = (double *)*((void *)this + 11);
  while (v15 != v16)
  {
    double v17 = *v15++;
    PB::TextFormatter::format(a2, "cameraPose", v17);
  }
  uint64_t v18 = (double *)*((void *)this + 13);
  uint64_t v19 = (double *)*((void *)this + 14);
  while (v18 != v19)
  {
    double v20 = *v18++;
    PB::TextFormatter::format(a2, "gyroBias", v20);
  }
  uint64_t v21 = (double *)*((void *)this + 16);
  uint64_t v22 = (double *)*((void *)this + 17);
  while (v21 != v22)
  {
    double v23 = *v21++;
    PB::TextFormatter::format(a2, "gyroBiasCov", v23);
  }
  char v24 = *((unsigned char *)this + 340);
  if (v24)
  {
    PB::TextFormatter::format(a2, "machContinuousOriginTimestamp", *((double *)this + 37));
    char v24 = *((unsigned char *)this + 340);
  }
  if ((v24 & 2) != 0) {
    PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 38));
  }
  uint64_t v25 = (double *)*((void *)this + 22);
  uint64_t v26 = (double *)*((void *)this + 23);
  while (v25 != v26)
  {
    double v27 = *v25++;
    PB::TextFormatter::format(a2, "orientation", v27);
  }
  uint64_t v28 = (double *)*((void *)this + 19);
  uint64_t v29 = (double *)*((void *)this + 20);
  while (v28 != v29)
  {
    double v30 = *v28++;
    PB::TextFormatter::format(a2, "orientationCov", v30);
  }
  if ((*((unsigned char *)this + 340) & 4) != 0) {
    PB::TextFormatter::format(a2, "originTimestamp", *((double *)this + 39));
  }
  uint64_t v31 = (double *)*((void *)this + 28);
  uint64_t v32 = (double *)*((void *)this + 29);
  while (v31 != v32)
  {
    double v33 = *v31++;
    PB::TextFormatter::format(a2, "position", v33);
  }
  uint64_t v34 = (double *)*((void *)this + 25);
  uint64_t v35 = (double *)*((void *)this + 26);
  while (v34 != v35)
  {
    double v36 = *v34++;
    PB::TextFormatter::format(a2, "positionCov", v36);
  }
  char v37 = *((unsigned char *)this + 340);
  if ((v37 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 40));
    char v37 = *((unsigned char *)this + 340);
  }
  if ((v37 & 0x40) != 0) {
    PB::TextFormatter::format(a2, "trackingState");
  }
  uint64_t v38 = (double *)*((void *)this + 34);
  uint64_t v39 = (double *)*((void *)this + 35);
  while (v38 != v39)
  {
    double v40 = *v38++;
    PB::TextFormatter::format(a2, "velocity", v40);
  }
  uint64_t v41 = (double *)*((void *)this + 31);
  uint64_t v42 = (double *)*((void *)this + 32);
  while (v41 != v42)
  {
    double v43 = *v41++;
    PB::TextFormatter::format(a2, "velocityCov", v43);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::VIOEstimation::readFrom(CMMsl::VIOEstimation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 340) |= 0x40u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_469;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_345:
            LODWORD(v25) = 0;
            goto LABEL_469;
          }
          char v203 = 0;
          unsigned int v204 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v205 = v20 + 1;
              char v206 = *(unsigned char *)(v22 + v20);
              *((void *)a2 + 1) = v205;
              v25 |= (unint64_t)(v206 & 0x7F) << v203;
              if (v206 < 0)
              {
                v203 += 7;
                unint64_t v20 = v205;
                BOOL v14 = v204++ > 8;
                if (v14) {
                  goto LABEL_345;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v25) = 0;
              }
            }
            break;
          }
LABEL_469:
          *((_DWORD *)this + 84) = v25;
          goto LABEL_560;
        case 2u:
          *((unsigned char *)this + 340) |= 4u;
          unint64_t v28 = *((void *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((void *)a2 + 2)) {
            goto LABEL_556;
          }
          *((void *)this + 39) = *(void *)(*(void *)a2 + v28);
          goto LABEL_558;
        case 3u:
          *((unsigned char *)this + 340) |= 1u;
          unint64_t v29 = *((void *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((void *)a2 + 2)) {
            goto LABEL_556;
          }
          *((void *)this + 37) = *(void *)(*(void *)a2 + v29);
          goto LABEL_558;
        case 4u:
          *((unsigned char *)this + 340) |= 8u;
          unint64_t v30 = *((void *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFF7 || v30 + 8 > *((void *)a2 + 2)) {
            goto LABEL_556;
          }
          *((void *)this + 40) = *(void *)(*(void *)a2 + v30);
          goto LABEL_558;
        case 5u:
          *((unsigned char *)this + 340) |= 2u;
          unint64_t v31 = *((void *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFF7 || v31 + 8 > *((void *)a2 + 2)) {
            goto LABEL_556;
          }
          *((void *)this + 38) = *(void *)(*(void *)a2 + v31);
          goto LABEL_558;
        case 6u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v32 = *((void *)a2 + 1);
            unint64_t v33 = *((void *)a2 + 2);
            while (v32 < v33 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v35 = (char *)*((void *)this + 23);
              unint64_t v34 = *((void *)this + 24);
              if ((unint64_t)v35 >= v34)
              {
                char v37 = (char *)*((void *)this + 22);
                uint64_t v38 = (v35 - v37) >> 3;
                unint64_t v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 61) {
                  goto LABEL_569;
                }
                uint64_t v40 = v34 - (void)v37;
                if (v40 >> 2 > v39) {
                  unint64_t v39 = v40 >> 2;
                }
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v41 = v39;
                }
                if (v41)
                {
                  unint64_t v41 = (unint64_t)sub_2572C7528(v41);
                  char v37 = (char *)*((void *)this + 22);
                  uint64_t v35 = (char *)*((void *)this + 23);
                }
                else
                {
                  uint64_t v42 = 0;
                }
                double v43 = (void *)(v41 + 8 * v38);
                *double v43 = 0;
                double v36 = v43 + 1;
                while (v35 != v37)
                {
                  uint64_t v44 = *((void *)v35 - 1);
                  v35 -= 8;
                  *--double v43 = v44;
                }
                *((void *)this + 22) = v43;
                *((void *)this + 23) = v36;
                *((void *)this + 24) = v41 + 8 * v42;
                if (v37) {
                  operator delete(v37);
                }
              }
              else
              {
                *(void *)uint64_t v35 = 0;
                double v36 = v35 + 8;
              }
              *((void *)this + 23) = v36;
              unint64_t v45 = *((void *)a2 + 1);
              if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((void *)a2 + 2)) {
                goto LABEL_330;
              }
              *(v36 - 1) = *(void *)(*(void *)a2 + v45);
              unint64_t v33 = *((void *)a2 + 2);
              unint64_t v32 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v32;
            }
            goto LABEL_331;
          }
          unsigned int v208 = (char *)*((void *)this + 23);
          unint64_t v207 = *((void *)this + 24);
          if ((unint64_t)v208 >= v207)
          {
            v232 = (char *)*((void *)this + 22);
            uint64_t v233 = (v208 - v232) >> 3;
            unint64_t v234 = v233 + 1;
            if ((unint64_t)(v233 + 1) >> 61) {
              goto LABEL_569;
            }
            uint64_t v235 = v207 - (void)v232;
            if (v235 >> 2 > v234) {
              unint64_t v234 = v235 >> 2;
            }
            if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v236 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v236 = v234;
            }
            if (v236)
            {
              unint64_t v236 = (unint64_t)sub_2572C7528(v236);
              v232 = (char *)*((void *)this + 22);
              unsigned int v208 = (char *)*((void *)this + 23);
            }
            else
            {
              uint64_t v237 = 0;
            }
            v304 = (void *)(v236 + 8 * v233);
            void *v304 = 0;
            unint64_t v209 = v304 + 1;
            while (v208 != v232)
            {
              uint64_t v305 = *((void *)v208 - 1);
              v208 -= 8;
              *--v304 = v305;
            }
            *((void *)this + 22) = v304;
            *((void *)this + 23) = v209;
            *((void *)this + 24) = v236 + 8 * v237;
            if (v232) {
              operator delete(v232);
            }
          }
          else
          {
            *(void *)unsigned int v208 = 0;
            unint64_t v209 = v208 + 8;
          }
          *((void *)this + 23) = v209;
          goto LABEL_554;
        case 7u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v46 = *((void *)a2 + 1);
            unint64_t v47 = *((void *)a2 + 2);
            while (v46 < v47 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v49 = (char *)*((void *)this + 14);
              unint64_t v48 = *((void *)this + 15);
              if ((unint64_t)v49 >= v48)
              {
                int v51 = (char *)*((void *)this + 13);
                uint64_t v52 = (v49 - v51) >> 3;
                unint64_t v53 = v52 + 1;
                if ((unint64_t)(v52 + 1) >> 61) {
                  goto LABEL_569;
                }
                uint64_t v54 = v48 - (void)v51;
                if (v54 >> 2 > v53) {
                  unint64_t v53 = v54 >> 2;
                }
                if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v55 = v53;
                }
                if (v55)
                {
                  unint64_t v55 = (unint64_t)sub_2572C7528(v55);
                  int v51 = (char *)*((void *)this + 13);
                  uint64_t v49 = (char *)*((void *)this + 14);
                }
                else
                {
                  uint64_t v56 = 0;
                }
                char v57 = (void *)(v55 + 8 * v52);
                *char v57 = 0;
                char v50 = v57 + 1;
                while (v49 != v51)
                {
                  uint64_t v58 = *((void *)v49 - 1);
                  v49 -= 8;
                  *--char v57 = v58;
                }
                *((void *)this + 13) = v57;
                *((void *)this + 14) = v50;
                *((void *)this + 15) = v55 + 8 * v56;
                if (v51) {
                  operator delete(v51);
                }
              }
              else
              {
                *(void *)uint64_t v49 = 0;
                char v50 = v49 + 8;
              }
              *((void *)this + 14) = v50;
              unint64_t v59 = *((void *)a2 + 1);
              if (v59 > 0xFFFFFFFFFFFFFFF7 || v59 + 8 > *((void *)a2 + 2)) {
                goto LABEL_330;
              }
              *(v50 - 1) = *(void *)(*(void *)a2 + v59);
              unint64_t v47 = *((void *)a2 + 2);
              unint64_t v46 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v46;
            }
            goto LABEL_331;
          }
          char v211 = (char *)*((void *)this + 14);
          unint64_t v210 = *((void *)this + 15);
          if ((unint64_t)v211 >= v210)
          {
            v238 = (char *)*((void *)this + 13);
            uint64_t v239 = (v211 - v238) >> 3;
            unint64_t v240 = v239 + 1;
            if ((unint64_t)(v239 + 1) >> 61) {
              goto LABEL_569;
            }
            uint64_t v241 = v210 - (void)v238;
            if (v241 >> 2 > v240) {
              unint64_t v240 = v241 >> 2;
            }
            if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v242 = v240;
            }
            if (v242)
            {
              unint64_t v242 = (unint64_t)sub_2572C7528(v242);
              v238 = (char *)*((void *)this + 13);
              char v211 = (char *)*((void *)this + 14);
            }
            else
            {
              uint64_t v243 = 0;
            }
            v306 = (void *)(v242 + 8 * v239);
            void *v306 = 0;
            unint64_t v209 = v306 + 1;
            while (v211 != v238)
            {
              uint64_t v307 = *((void *)v211 - 1);
              v211 -= 8;
              *--v306 = v307;
            }
            *((void *)this + 13) = v306;
            *((void *)this + 14) = v209;
            *((void *)this + 15) = v242 + 8 * v243;
            if (v238) {
              operator delete(v238);
            }
          }
          else
          {
            *(void *)char v211 = 0;
            unint64_t v209 = v211 + 8;
          }
          *((void *)this + 14) = v209;
          goto LABEL_554;
        case 8u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v60 = *((void *)a2 + 1);
            unint64_t v61 = *((void *)a2 + 2);
            while (v60 < v61 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v63 = (char *)*((void *)this + 35);
              unint64_t v62 = *((void *)this + 36);
              if ((unint64_t)v63 >= v62)
              {
                char v65 = (char *)*((void *)this + 34);
                uint64_t v66 = (v63 - v65) >> 3;
                unint64_t v67 = v66 + 1;
                if ((unint64_t)(v66 + 1) >> 61) {
                  goto LABEL_569;
                }
                uint64_t v68 = v62 - (void)v65;
                if (v68 >> 2 > v67) {
                  unint64_t v67 = v68 >> 2;
                }
                if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v69 = v67;
                }
                if (v69)
                {
                  unint64_t v69 = (unint64_t)sub_2572C7528(v69);
                  char v65 = (char *)*((void *)this + 34);
                  unint64_t v63 = (char *)*((void *)this + 35);
                }
                else
                {
                  uint64_t v70 = 0;
                }
                unint64_t v71 = (void *)(v69 + 8 * v66);
                *unint64_t v71 = 0;
                char v64 = v71 + 1;
                while (v63 != v65)
                {
                  uint64_t v72 = *((void *)v63 - 1);
                  v63 -= 8;
                  *--unint64_t v71 = v72;
                }
                *((void *)this + 34) = v71;
                *((void *)this + 35) = v64;
                *((void *)this + 36) = v69 + 8 * v70;
                if (v65) {
                  operator delete(v65);
                }
              }
              else
              {
                *(void *)unint64_t v63 = 0;
                char v64 = v63 + 8;
              }
              *((void *)this + 35) = v64;
              unint64_t v73 = *((void *)a2 + 1);
              if (v73 > 0xFFFFFFFFFFFFFFF7 || v73 + 8 > *((void *)a2 + 2)) {
                goto LABEL_330;
              }
              *(v64 - 1) = *(void *)(*(void *)a2 + v73);
              unint64_t v61 = *((void *)a2 + 2);
              unint64_t v60 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v60;
            }
            goto LABEL_331;
          }
          unint64_t v213 = (char *)*((void *)this + 35);
          unint64_t v212 = *((void *)this + 36);
          if ((unint64_t)v213 >= v212)
          {
            v244 = (char *)*((void *)this + 34);
            uint64_t v245 = (v213 - v244) >> 3;
            unint64_t v246 = v245 + 1;
            if ((unint64_t)(v245 + 1) >> 61) {
              goto LABEL_569;
            }
            uint64_t v247 = v212 - (void)v244;
            if (v247 >> 2 > v246) {
              unint64_t v246 = v247 >> 2;
            }
            if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v248 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v248 = v246;
            }
            if (v248)
            {
              unint64_t v248 = (unint64_t)sub_2572C7528(v248);
              v244 = (char *)*((void *)this + 34);
              unint64_t v213 = (char *)*((void *)this + 35);
            }
            else
            {
              uint64_t v249 = 0;
            }
            v308 = (void *)(v248 + 8 * v245);
            void *v308 = 0;
            unint64_t v209 = v308 + 1;
            while (v213 != v244)
            {
              uint64_t v309 = *((void *)v213 - 1);
              v213 -= 8;
              *--v308 = v309;
            }
            *((void *)this + 34) = v308;
            *((void *)this + 35) = v209;
            *((void *)this + 36) = v248 + 8 * v249;
            if (v244) {
              operator delete(v244);
            }
          }
          else
          {
            *(void *)unint64_t v213 = 0;
            unint64_t v209 = v213 + 8;
          }
          *((void *)this + 35) = v209;
          goto LABEL_554;
        case 9u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v74 = *((void *)a2 + 1);
            unint64_t v75 = *((void *)a2 + 2);
            while (v74 < v75 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v77 = (char *)*((void *)this + 2);
              unint64_t v76 = *((void *)this + 3);
              if ((unint64_t)v77 >= v76)
              {
                unsigned int v79 = (char *)*((void *)this + 1);
                uint64_t v80 = (v77 - v79) >> 3;
                unint64_t v81 = v80 + 1;
                if ((unint64_t)(v80 + 1) >> 61) {
                  goto LABEL_569;
                }
                uint64_t v82 = v76 - (void)v79;
                if (v82 >> 2 > v81) {
                  unint64_t v81 = v82 >> 2;
                }
                if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v83 = v81;
                }
                if (v83)
                {
                  unint64_t v83 = (unint64_t)sub_2572C7528(v83);
                  unsigned int v79 = (char *)*((void *)this + 1);
                  unint64_t v77 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v84 = 0;
                }
                char v85 = (void *)(v83 + 8 * v80);
                *char v85 = 0;
                char v78 = v85 + 1;
                while (v77 != v79)
                {
                  uint64_t v86 = *((void *)v77 - 1);
                  v77 -= 8;
                  *--char v85 = v86;
                }
                *((void *)this + 1) = v85;
                *((void *)this + 2) = v78;
                *((void *)this + 3) = v83 + 8 * v84;
                if (v79) {
                  operator delete(v79);
                }
              }
              else
              {
                *(void *)unint64_t v77 = 0;
                char v78 = v77 + 8;
              }
              *((void *)this + 2) = v78;
              unint64_t v87 = *((void *)a2 + 1);
              if (v87 > 0xFFFFFFFFFFFFFFF7 || v87 + 8 > *((void *)a2 + 2)) {
                goto LABEL_330;
              }
              *(v78 - 1) = *(void *)(*(void *)a2 + v87);
              unint64_t v75 = *((void *)a2 + 2);
              unint64_t v74 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v74;
            }
            goto LABEL_331;
          }
          char v215 = (char *)*((void *)this + 2);
          unint64_t v214 = *((void *)this + 3);
          if ((unint64_t)v215 >= v214)
          {
            v250 = (char *)*((void *)this + 1);
            uint64_t v251 = (v215 - v250) >> 3;
            unint64_t v252 = v251 + 1;
            if ((unint64_t)(v251 + 1) >> 61) {
              goto LABEL_569;
            }
            uint64_t v253 = v214 - (void)v250;
            if (v253 >> 2 > v252) {
              unint64_t v252 = v253 >> 2;
            }
            if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v254 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v254 = v252;
            }
            if (v254)
            {
              unint64_t v254 = (unint64_t)sub_2572C7528(v254);
              v250 = (char *)*((void *)this + 1);
              char v215 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v255 = 0;
            }
            v310 = (void *)(v254 + 8 * v251);
            void *v310 = 0;
            unint64_t v209 = v310 + 1;
            while (v215 != v250)
            {
              uint64_t v311 = *((void *)v215 - 1);
              v215 -= 8;
              *--v310 = v311;
            }
            *((void *)this + 1) = v310;
            *((void *)this + 2) = v209;
            *((void *)this + 3) = v254 + 8 * v255;
            if (v250) {
              operator delete(v250);
            }
          }
          else
          {
            *(void *)char v215 = 0;
            unint64_t v209 = v215 + 8;
          }
          *((void *)this + 2) = v209;
          goto LABEL_554;
        case 0xAu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v88 = *((void *)a2 + 1);
            unint64_t v89 = *((void *)a2 + 2);
            while (v88 < v89 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v91 = (char *)*((void *)this + 29);
              unint64_t v90 = *((void *)this + 30);
              if ((unint64_t)v91 >= v90)
              {
                unint64_t v93 = (char *)*((void *)this + 28);
                uint64_t v94 = (v91 - v93) >> 3;
                unint64_t v95 = v94 + 1;
                if ((unint64_t)(v94 + 1) >> 61) {
                  goto LABEL_569;
                }
                uint64_t v96 = v90 - (void)v93;
                if (v96 >> 2 > v95) {
                  unint64_t v95 = v96 >> 2;
                }
                if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v97 = v95;
                }
                if (v97)
                {
                  unint64_t v97 = (unint64_t)sub_2572C7528(v97);
                  unint64_t v93 = (char *)*((void *)this + 28);
                  unint64_t v91 = (char *)*((void *)this + 29);
                }
                else
                {
                  uint64_t v98 = 0;
                }
                unint64_t v99 = (void *)(v97 + 8 * v94);
                *unint64_t v99 = 0;
                char v92 = v99 + 1;
                while (v91 != v93)
                {
                  uint64_t v100 = *((void *)v91 - 1);
                  v91 -= 8;
                  *--unint64_t v99 = v100;
                }
                *((void *)this + 28) = v99;
                *((void *)this + 29) = v92;
                *((void *)this + 30) = v97 + 8 * v98;
                if (v93) {
                  operator delete(v93);
                }
              }
              else
              {
                *(void *)unint64_t v91 = 0;
                char v92 = v91 + 8;
              }
              *((void *)this + 29) = v92;
              unint64_t v101 = *((void *)a2 + 1);
              if (v101 > 0xFFFFFFFFFFFFFFF7 || v101 + 8 > *((void *)a2 + 2)) {
                goto LABEL_330;
              }
              *(v92 - 1) = *(void *)(*(void *)a2 + v101);
              unint64_t v89 = *((void *)a2 + 2);
              unint64_t v88 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v88;
            }
            goto LABEL_331;
          }
          unint64_t v217 = (char *)*((void *)this + 29);
          unint64_t v216 = *((void *)this + 30);
          if ((unint64_t)v217 >= v216)
          {
            v256 = (char *)*((void *)this + 28);
            uint64_t v257 = (v217 - v256) >> 3;
            unint64_t v258 = v257 + 1;
            if ((unint64_t)(v257 + 1) >> 61) {
              goto LABEL_569;
            }
            uint64_t v259 = v216 - (void)v256;
            if (v259 >> 2 > v258) {
              unint64_t v258 = v259 >> 2;
            }
            if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v260 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v260 = v258;
            }
            if (v260)
            {
              unint64_t v260 = (unint64_t)sub_2572C7528(v260);
              v256 = (char *)*((void *)this + 28);
              unint64_t v217 = (char *)*((void *)this + 29);
            }
            else
            {
              uint64_t v261 = 0;
            }
            v312 = (void *)(v260 + 8 * v257);
            void *v312 = 0;
            unint64_t v209 = v312 + 1;
            while (v217 != v256)
            {
              uint64_t v313 = *((void *)v217 - 1);
              v217 -= 8;
              *--v312 = v313;
            }
            *((void *)this + 28) = v312;
            *((void *)this + 29) = v209;
            *((void *)this + 30) = v260 + 8 * v261;
            if (v256) {
              operator delete(v256);
            }
          }
          else
          {
            *(void *)unint64_t v217 = 0;
            unint64_t v209 = v217 + 8;
          }
          *((void *)this + 29) = v209;
          goto LABEL_554;
        case 0xBu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v102 = *((void *)a2 + 1);
            unint64_t v103 = *((void *)a2 + 2);
            while (v102 < v103 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v105 = (char *)*((void *)this + 20);
              unint64_t v104 = *((void *)this + 21);
              if ((unint64_t)v105 >= v104)
              {
                unint64_t v107 = (char *)*((void *)this + 19);
                uint64_t v108 = (v105 - v107) >> 3;
                unint64_t v109 = v108 + 1;
                if ((unint64_t)(v108 + 1) >> 61) {
                  goto LABEL_569;
                }
                uint64_t v110 = v104 - (void)v107;
                if (v110 >> 2 > v109) {
                  unint64_t v109 = v110 >> 2;
                }
                if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v111 = v109;
                }
                if (v111)
                {
                  unint64_t v111 = (unint64_t)sub_2572C7528(v111);
                  unint64_t v107 = (char *)*((void *)this + 19);
                  unsigned int v105 = (char *)*((void *)this + 20);
                }
                else
                {
                  uint64_t v112 = 0;
                }
                unsigned int v113 = (void *)(v111 + 8 * v108);
                *unsigned int v113 = 0;
                uint64_t v106 = v113 + 1;
                while (v105 != v107)
                {
                  uint64_t v114 = *((void *)v105 - 1);
                  v105 -= 8;
                  *--unsigned int v113 = v114;
                }
                *((void *)this + 19) = v113;
                *((void *)this + 20) = v106;
                *((void *)this + 21) = v111 + 8 * v112;
                if (v107) {
                  operator delete(v107);
                }
              }
              else
              {
                *(void *)unsigned int v105 = 0;
                uint64_t v106 = v105 + 8;
              }
              *((void *)this + 20) = v106;
              unint64_t v115 = *((void *)a2 + 1);
              if (v115 > 0xFFFFFFFFFFFFFFF7 || v115 + 8 > *((void *)a2 + 2)) {
                goto LABEL_330;
              }
              *(v106 - 1) = *(void *)(*(void *)a2 + v115);
              unint64_t v103 = *((void *)a2 + 2);
              unint64_t v102 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v102;
            }
            goto LABEL_331;
          }
          char v219 = (char *)*((void *)this + 20);
          unint64_t v218 = *((void *)this + 21);
          if ((unint64_t)v219 >= v218)
          {
            v262 = (char *)*((void *)this + 19);
            uint64_t v263 = (v219 - v262) >> 3;
            unint64_t v264 = v263 + 1;
            if ((unint64_t)(v263 + 1) >> 61) {
              goto LABEL_569;
            }
            uint64_t v265 = v218 - (void)v262;
            if (v265 >> 2 > v264) {
              unint64_t v264 = v265 >> 2;
            }
            if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v266 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v266 = v264;
            }
            if (v266)
            {
              unint64_t v266 = (unint64_t)sub_2572C7528(v266);
              v262 = (char *)*((void *)this + 19);
              char v219 = (char *)*((void *)this + 20);
            }
            else
            {
              uint64_t v267 = 0;
            }
            v314 = (void *)(v266 + 8 * v263);
            void *v314 = 0;
            unint64_t v209 = v314 + 1;
            while (v219 != v262)
            {
              uint64_t v315 = *((void *)v219 - 1);
              v219 -= 8;
              *--v314 = v315;
            }
            *((void *)this + 19) = v314;
            *((void *)this + 20) = v209;
            *((void *)this + 21) = v266 + 8 * v267;
            if (v262) {
              operator delete(v262);
            }
          }
          else
          {
            *(void *)char v219 = 0;
            unint64_t v209 = v219 + 8;
          }
          *((void *)this + 20) = v209;
          goto LABEL_554;
        case 0xCu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v116 = *((void *)a2 + 1);
            unint64_t v117 = *((void *)a2 + 2);
            while (v116 < v117 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v119 = (char *)*((void *)this + 17);
              unint64_t v118 = *((void *)this + 18);
              if ((unint64_t)v119 >= v118)
              {
                unsigned int v121 = (char *)*((void *)this + 16);
                uint64_t v122 = (v119 - v121) >> 3;
                unint64_t v123 = v122 + 1;
                if ((unint64_t)(v122 + 1) >> 61) {
                  goto LABEL_569;
                }
                uint64_t v124 = v118 - (void)v121;
                if (v124 >> 2 > v123) {
                  unint64_t v123 = v124 >> 2;
                }
                if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v125 = v123;
                }
                if (v125)
                {
                  unint64_t v125 = (unint64_t)sub_2572C7528(v125);
                  unsigned int v121 = (char *)*((void *)this + 16);
                  uint64_t v119 = (char *)*((void *)this + 17);
                }
                else
                {
                  uint64_t v126 = 0;
                }
                uint64_t v127 = (void *)(v125 + 8 * v122);
                *uint64_t v127 = 0;
                char v120 = v127 + 1;
                while (v119 != v121)
                {
                  uint64_t v128 = *((void *)v119 - 1);
                  v119 -= 8;
                  *--uint64_t v127 = v128;
                }
                *((void *)this + 16) = v127;
                *((void *)this + 17) = v120;
                *((void *)this + 18) = v125 + 8 * v126;
                if (v121) {
                  operator delete(v121);
                }
              }
              else
              {
                *(void *)uint64_t v119 = 0;
                char v120 = v119 + 8;
              }
              *((void *)this + 17) = v120;
              unint64_t v129 = *((void *)a2 + 1);
              if (v129 > 0xFFFFFFFFFFFFFFF7 || v129 + 8 > *((void *)a2 + 2)) {
                goto LABEL_330;
              }
              *(v120 - 1) = *(void *)(*(void *)a2 + v129);
              unint64_t v117 = *((void *)a2 + 2);
              unint64_t v116 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v116;
            }
            goto LABEL_331;
          }
          unint64_t v221 = (char *)*((void *)this + 17);
          unint64_t v220 = *((void *)this + 18);
          if ((unint64_t)v221 >= v220)
          {
            v268 = (char *)*((void *)this + 16);
            uint64_t v269 = (v221 - v268) >> 3;
            unint64_t v270 = v269 + 1;
            if ((unint64_t)(v269 + 1) >> 61) {
              goto LABEL_569;
            }
            uint64_t v271 = v220 - (void)v268;
            if (v271 >> 2 > v270) {
              unint64_t v270 = v271 >> 2;
            }
            if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v272 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v272 = v270;
            }
            if (v272)
            {
              unint64_t v272 = (unint64_t)sub_2572C7528(v272);
              v268 = (char *)*((void *)this + 16);
              unint64_t v221 = (char *)*((void *)this + 17);
            }
            else
            {
              uint64_t v273 = 0;
            }
            v316 = (void *)(v272 + 8 * v269);
            void *v316 = 0;
            unint64_t v209 = v316 + 1;
            while (v221 != v268)
            {
              uint64_t v317 = *((void *)v221 - 1);
              v221 -= 8;
              *--v316 = v317;
            }
            *((void *)this + 16) = v316;
            *((void *)this + 17) = v209;
            *((void *)this + 18) = v272 + 8 * v273;
            if (v268) {
              operator delete(v268);
            }
          }
          else
          {
            *(void *)unint64_t v221 = 0;
            unint64_t v209 = v221 + 8;
          }
          *((void *)this + 17) = v209;
          goto LABEL_554;
        case 0xDu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v130 = *((void *)a2 + 1);
            unint64_t v131 = *((void *)a2 + 2);
            while (v130 < v131 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v133 = (char *)*((void *)this + 32);
              unint64_t v132 = *((void *)this + 33);
              if ((unint64_t)v133 >= v132)
              {
                uint64_t v135 = (char *)*((void *)this + 31);
                uint64_t v136 = (v133 - v135) >> 3;
                unint64_t v137 = v136 + 1;
                if ((unint64_t)(v136 + 1) >> 61) {
                  goto LABEL_569;
                }
                uint64_t v138 = v132 - (void)v135;
                if (v138 >> 2 > v137) {
                  unint64_t v137 = v138 >> 2;
                }
                if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v139 = v137;
                }
                if (v139)
                {
                  unint64_t v139 = (unint64_t)sub_2572C7528(v139);
                  uint64_t v135 = (char *)*((void *)this + 31);
                  unint64_t v133 = (char *)*((void *)this + 32);
                }
                else
                {
                  uint64_t v140 = 0;
                }
                char v141 = (void *)(v139 + 8 * v136);
                *char v141 = 0;
                unint64_t v134 = v141 + 1;
                while (v133 != v135)
                {
                  uint64_t v142 = *((void *)v133 - 1);
                  v133 -= 8;
                  *--char v141 = v142;
                }
                *((void *)this + 31) = v141;
                *((void *)this + 32) = v134;
                *((void *)this + 33) = v139 + 8 * v140;
                if (v135) {
                  operator delete(v135);
                }
              }
              else
              {
                *(void *)unint64_t v133 = 0;
                unint64_t v134 = v133 + 8;
              }
              *((void *)this + 32) = v134;
              unint64_t v143 = *((void *)a2 + 1);
              if (v143 > 0xFFFFFFFFFFFFFFF7 || v143 + 8 > *((void *)a2 + 2)) {
                goto LABEL_330;
              }
              *(v134 - 1) = *(void *)(*(void *)a2 + v143);
              unint64_t v131 = *((void *)a2 + 2);
              unint64_t v130 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v130;
            }
            goto LABEL_331;
          }
          char v223 = (char *)*((void *)this + 32);
          unint64_t v222 = *((void *)this + 33);
          if ((unint64_t)v223 >= v222)
          {
            v274 = (char *)*((void *)this + 31);
            uint64_t v275 = (v223 - v274) >> 3;
            unint64_t v276 = v275 + 1;
            if ((unint64_t)(v275 + 1) >> 61) {
              goto LABEL_569;
            }
            uint64_t v277 = v222 - (void)v274;
            if (v277 >> 2 > v276) {
              unint64_t v276 = v277 >> 2;
            }
            if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v278 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v278 = v276;
            }
            if (v278)
            {
              unint64_t v278 = (unint64_t)sub_2572C7528(v278);
              v274 = (char *)*((void *)this + 31);
              char v223 = (char *)*((void *)this + 32);
            }
            else
            {
              uint64_t v279 = 0;
            }
            v318 = (void *)(v278 + 8 * v275);
            void *v318 = 0;
            unint64_t v209 = v318 + 1;
            while (v223 != v274)
            {
              uint64_t v319 = *((void *)v223 - 1);
              v223 -= 8;
              *--v318 = v319;
            }
            *((void *)this + 31) = v318;
            *((void *)this + 32) = v209;
            *((void *)this + 33) = v278 + 8 * v279;
            if (v274) {
              operator delete(v274);
            }
          }
          else
          {
            *(void *)char v223 = 0;
            unint64_t v209 = v223 + 8;
          }
          *((void *)this + 32) = v209;
          goto LABEL_554;
        case 0xEu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v144 = *((void *)a2 + 1);
            unint64_t v145 = *((void *)a2 + 2);
            while (v144 < v145 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v147 = (char *)*((void *)this + 5);
              unint64_t v146 = *((void *)this + 6);
              if ((unint64_t)v147 >= v146)
              {
                char v149 = (char *)*((void *)this + 4);
                uint64_t v150 = (v147 - v149) >> 3;
                unint64_t v151 = v150 + 1;
                if ((unint64_t)(v150 + 1) >> 61) {
                  goto LABEL_569;
                }
                uint64_t v152 = v146 - (void)v149;
                if (v152 >> 2 > v151) {
                  unint64_t v151 = v152 >> 2;
                }
                if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v153 = v151;
                }
                if (v153)
                {
                  unint64_t v153 = (unint64_t)sub_2572C7528(v153);
                  char v149 = (char *)*((void *)this + 4);
                  unint64_t v147 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v154 = 0;
                }
                unint64_t v155 = (void *)(v153 + 8 * v150);
                *unint64_t v155 = 0;
                char v148 = v155 + 1;
                while (v147 != v149)
                {
                  uint64_t v156 = *((void *)v147 - 1);
                  v147 -= 8;
                  *--unint64_t v155 = v156;
                }
                *((void *)this + 4) = v155;
                *((void *)this + 5) = v148;
                *((void *)this + 6) = v153 + 8 * v154;
                if (v149) {
                  operator delete(v149);
                }
              }
              else
              {
                *(void *)unint64_t v147 = 0;
                char v148 = v147 + 8;
              }
              *((void *)this + 5) = v148;
              unint64_t v157 = *((void *)a2 + 1);
              if (v157 > 0xFFFFFFFFFFFFFFF7 || v157 + 8 > *((void *)a2 + 2)) {
                goto LABEL_330;
              }
              *(v148 - 1) = *(void *)(*(void *)a2 + v157);
              unint64_t v145 = *((void *)a2 + 2);
              unint64_t v144 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v144;
            }
            goto LABEL_331;
          }
          unint64_t v225 = (char *)*((void *)this + 5);
          unint64_t v224 = *((void *)this + 6);
          if ((unint64_t)v225 >= v224)
          {
            v280 = (char *)*((void *)this + 4);
            uint64_t v281 = (v225 - v280) >> 3;
            unint64_t v282 = v281 + 1;
            if ((unint64_t)(v281 + 1) >> 61) {
              goto LABEL_569;
            }
            uint64_t v283 = v224 - (void)v280;
            if (v283 >> 2 > v282) {
              unint64_t v282 = v283 >> 2;
            }
            if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v284 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v284 = v282;
            }
            if (v284)
            {
              unint64_t v284 = (unint64_t)sub_2572C7528(v284);
              v280 = (char *)*((void *)this + 4);
              unint64_t v225 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v285 = 0;
            }
            v320 = (void *)(v284 + 8 * v281);
            void *v320 = 0;
            unint64_t v209 = v320 + 1;
            while (v225 != v280)
            {
              uint64_t v321 = *((void *)v225 - 1);
              v225 -= 8;
              *--v320 = v321;
            }
            *((void *)this + 4) = v320;
            *((void *)this + 5) = v209;
            *((void *)this + 6) = v284 + 8 * v285;
            if (v280) {
              operator delete(v280);
            }
          }
          else
          {
            *(void *)unint64_t v225 = 0;
            unint64_t v209 = v225 + 8;
          }
          *((void *)this + 5) = v209;
          goto LABEL_554;
        case 0xFu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v158 = *((void *)a2 + 1);
            unint64_t v159 = *((void *)a2 + 2);
            while (v158 < v159 && !*((unsigned char *)a2 + 24))
            {
              char v161 = (char *)*((void *)this + 26);
              unint64_t v160 = *((void *)this + 27);
              if ((unint64_t)v161 >= v160)
              {
                unint64_t v163 = (char *)*((void *)this + 25);
                uint64_t v164 = (v161 - v163) >> 3;
                unint64_t v165 = v164 + 1;
                if ((unint64_t)(v164 + 1) >> 61) {
                  goto LABEL_569;
                }
                uint64_t v166 = v160 - (void)v163;
                if (v166 >> 2 > v165) {
                  unint64_t v165 = v166 >> 2;
                }
                if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v167 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v167 = v165;
                }
                if (v167)
                {
                  unint64_t v167 = (unint64_t)sub_2572C7528(v167);
                  unint64_t v163 = (char *)*((void *)this + 25);
                  char v161 = (char *)*((void *)this + 26);
                }
                else
                {
                  uint64_t v168 = 0;
                }
                char v169 = (void *)(v167 + 8 * v164);
                *char v169 = 0;
                unsigned int v162 = v169 + 1;
                while (v161 != v163)
                {
                  uint64_t v170 = *((void *)v161 - 1);
                  v161 -= 8;
                  *--char v169 = v170;
                }
                *((void *)this + 25) = v169;
                *((void *)this + 26) = v162;
                *((void *)this + 27) = v167 + 8 * v168;
                if (v163) {
                  operator delete(v163);
                }
              }
              else
              {
                *(void *)char v161 = 0;
                unsigned int v162 = v161 + 8;
              }
              *((void *)this + 26) = v162;
              unint64_t v171 = *((void *)a2 + 1);
              if (v171 > 0xFFFFFFFFFFFFFFF7 || v171 + 8 > *((void *)a2 + 2)) {
                goto LABEL_330;
              }
              *(v162 - 1) = *(void *)(*(void *)a2 + v171);
              unint64_t v159 = *((void *)a2 + 2);
              unint64_t v158 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v158;
            }
            goto LABEL_331;
          }
          char v227 = (char *)*((void *)this + 26);
          unint64_t v226 = *((void *)this + 27);
          if ((unint64_t)v227 >= v226)
          {
            v286 = (char *)*((void *)this + 25);
            uint64_t v287 = (v227 - v286) >> 3;
            unint64_t v288 = v287 + 1;
            if ((unint64_t)(v287 + 1) >> 61) {
              goto LABEL_569;
            }
            uint64_t v289 = v226 - (void)v286;
            if (v289 >> 2 > v288) {
              unint64_t v288 = v289 >> 2;
            }
            if ((unint64_t)v289 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v290 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v290 = v288;
            }
            if (v290)
            {
              unint64_t v290 = (unint64_t)sub_2572C7528(v290);
              v286 = (char *)*((void *)this + 25);
              char v227 = (char *)*((void *)this + 26);
            }
            else
            {
              uint64_t v291 = 0;
            }
            v322 = (void *)(v290 + 8 * v287);
            void *v322 = 0;
            unint64_t v209 = v322 + 1;
            while (v227 != v286)
            {
              uint64_t v323 = *((void *)v227 - 1);
              v227 -= 8;
              *--v322 = v323;
            }
            *((void *)this + 25) = v322;
            *((void *)this + 26) = v209;
            *((void *)this + 27) = v290 + 8 * v291;
            if (v286) {
              operator delete(v286);
            }
          }
          else
          {
            *(void *)char v227 = 0;
            unint64_t v209 = v227 + 8;
          }
          *((void *)this + 26) = v209;
          goto LABEL_554;
        case 0x10u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v172 = *((void *)a2 + 1);
            unint64_t v173 = *((void *)a2 + 2);
            while (v172 < v173 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v175 = (char *)*((void *)this + 11);
              unint64_t v174 = *((void *)this + 12);
              if ((unint64_t)v175 >= v174)
              {
                char v177 = (char *)*((void *)this + 10);
                uint64_t v178 = (v175 - v177) >> 3;
                unint64_t v179 = v178 + 1;
                if ((unint64_t)(v178 + 1) >> 61) {
                  goto LABEL_569;
                }
                uint64_t v180 = v174 - (void)v177;
                if (v180 >> 2 > v179) {
                  unint64_t v179 = v180 >> 2;
                }
                if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v181 = v179;
                }
                if (v181)
                {
                  unint64_t v181 = (unint64_t)sub_2572C7528(v181);
                  char v177 = (char *)*((void *)this + 10);
                  unint64_t v175 = (char *)*((void *)this + 11);
                }
                else
                {
                  uint64_t v182 = 0;
                }
                unint64_t v183 = (void *)(v181 + 8 * v178);
                *unint64_t v183 = 0;
                char v176 = v183 + 1;
                while (v175 != v177)
                {
                  uint64_t v184 = *((void *)v175 - 1);
                  v175 -= 8;
                  *--unint64_t v183 = v184;
                }
                *((void *)this + 10) = v183;
                *((void *)this + 11) = v176;
                *((void *)this + 12) = v181 + 8 * v182;
                if (v177) {
                  operator delete(v177);
                }
              }
              else
              {
                *(void *)unint64_t v175 = 0;
                char v176 = v175 + 8;
              }
              *((void *)this + 11) = v176;
              unint64_t v185 = *((void *)a2 + 1);
              if (v185 > 0xFFFFFFFFFFFFFFF7 || v185 + 8 > *((void *)a2 + 2)) {
                goto LABEL_330;
              }
              *(v176 - 1) = *(void *)(*(void *)a2 + v185);
              unint64_t v173 = *((void *)a2 + 2);
              unint64_t v172 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v172;
            }
            goto LABEL_331;
          }
          unint64_t v229 = (char *)*((void *)this + 11);
          unint64_t v228 = *((void *)this + 12);
          if ((unint64_t)v229 >= v228)
          {
            v292 = (char *)*((void *)this + 10);
            uint64_t v293 = (v229 - v292) >> 3;
            unint64_t v294 = v293 + 1;
            if ((unint64_t)(v293 + 1) >> 61) {
              goto LABEL_569;
            }
            uint64_t v295 = v228 - (void)v292;
            if (v295 >> 2 > v294) {
              unint64_t v294 = v295 >> 2;
            }
            if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v296 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v296 = v294;
            }
            if (v296)
            {
              unint64_t v296 = (unint64_t)sub_2572C7528(v296);
              v292 = (char *)*((void *)this + 10);
              unint64_t v229 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v297 = 0;
            }
            v324 = (void *)(v296 + 8 * v293);
            void *v324 = 0;
            unint64_t v209 = v324 + 1;
            while (v229 != v292)
            {
              uint64_t v325 = *((void *)v229 - 1);
              v229 -= 8;
              *--v324 = v325;
            }
            *((void *)this + 10) = v324;
            *((void *)this + 11) = v209;
            *((void *)this + 12) = v296 + 8 * v297;
            if (v292) {
              operator delete(v292);
            }
          }
          else
          {
            *(void *)unint64_t v229 = 0;
            unint64_t v209 = v229 + 8;
          }
          *((void *)this + 11) = v209;
          goto LABEL_554;
        case 0x11u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v186 = *((void *)a2 + 1);
            unint64_t v187 = *((void *)a2 + 2);
            while (v186 < v187 && !*((unsigned char *)a2 + 24))
            {
              char v189 = (char *)*((void *)this + 8);
              unint64_t v188 = *((void *)this + 9);
              if ((unint64_t)v189 >= v188)
              {
                unint64_t v191 = (char *)*((void *)this + 7);
                uint64_t v192 = (v189 - v191) >> 3;
                unint64_t v193 = v192 + 1;
                if ((unint64_t)(v192 + 1) >> 61) {
                  goto LABEL_569;
                }
                uint64_t v194 = v188 - (void)v191;
                if (v194 >> 2 > v193) {
                  unint64_t v193 = v194 >> 2;
                }
                if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v195 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v195 = v193;
                }
                if (v195)
                {
                  unint64_t v195 = (unint64_t)sub_2572C7528(v195);
                  unint64_t v191 = (char *)*((void *)this + 7);
                  char v189 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v196 = 0;
                }
                unint64_t v197 = (void *)(v195 + 8 * v192);
                *unint64_t v197 = 0;
                unsigned int v190 = v197 + 1;
                while (v189 != v191)
                {
                  uint64_t v198 = *((void *)v189 - 1);
                  v189 -= 8;
                  *--unint64_t v197 = v198;
                }
                *((void *)this + 7) = v197;
                *((void *)this + 8) = v190;
                *((void *)this + 9) = v195 + 8 * v196;
                if (v191) {
                  operator delete(v191);
                }
              }
              else
              {
                *(void *)char v189 = 0;
                unsigned int v190 = v189 + 8;
              }
              *((void *)this + 8) = v190;
              unint64_t v199 = *((void *)a2 + 1);
              if (v199 > 0xFFFFFFFFFFFFFFF7 || v199 + 8 > *((void *)a2 + 2))
              {
LABEL_330:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v190 - 1) = *(void *)(*(void *)a2 + v199);
              unint64_t v187 = *((void *)a2 + 2);
              unint64_t v186 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v186;
            }
LABEL_331:
            PB::Reader::recallMark();
          }
          else
          {
            v231 = (char *)*((void *)this + 8);
            unint64_t v230 = *((void *)this + 9);
            if ((unint64_t)v231 >= v230)
            {
              v298 = (char *)*((void *)this + 7);
              uint64_t v299 = (v231 - v298) >> 3;
              unint64_t v300 = v299 + 1;
              if ((unint64_t)(v299 + 1) >> 61) {
LABEL_569:
              }
                sub_2570AFD0C();
              uint64_t v301 = v230 - (void)v298;
              if (v301 >> 2 > v300) {
                unint64_t v300 = v301 >> 2;
              }
              if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v302 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v302 = v300;
              }
              if (v302)
              {
                unint64_t v302 = (unint64_t)sub_2572C7528(v302);
                v298 = (char *)*((void *)this + 7);
                v231 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v303 = 0;
              }
              v326 = (void *)(v302 + 8 * v299);
              void *v326 = 0;
              unint64_t v209 = v326 + 1;
              while (v231 != v298)
              {
                uint64_t v327 = *((void *)v231 - 1);
                v231 -= 8;
                *--v326 = v327;
              }
              *((void *)this + 7) = v326;
              *((void *)this + 8) = v209;
              *((void *)this + 9) = v302 + 8 * v303;
              if (v298) {
                operator delete(v298);
              }
            }
            else
            {
              *(void *)v231 = 0;
              unint64_t v209 = v231 + 8;
            }
            *((void *)this + 8) = v209;
LABEL_554:
            unint64_t v328 = *((void *)a2 + 1);
            if (v328 <= 0xFFFFFFFFFFFFFFF7 && v328 + 8 <= *((void *)a2 + 2))
            {
              *(v209 - 1) = *(void *)(*(void *)a2 + v328);
LABEL_558:
              uint64_t v202 = *((void *)a2 + 1) + 8;
LABEL_559:
              *((void *)a2 + 1) = v202;
            }
            else
            {
LABEL_556:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        case 0x12u:
          *((unsigned char *)this + 340) |= 0x20u;
          unint64_t v200 = *((void *)a2 + 1);
          if (v200 > 0xFFFFFFFFFFFFFFFBLL || v200 + 4 > *((void *)a2 + 2)) {
            goto LABEL_556;
          }
          *((_DWORD *)this + 83) = *(_DWORD *)(*(void *)a2 + v200);
          goto LABEL_338;
        case 0x13u:
          *((unsigned char *)this + 340) |= 0x10u;
          unint64_t v201 = *((void *)a2 + 1);
          if (v201 > 0xFFFFFFFFFFFFFFFBLL || v201 + 4 > *((void *)a2 + 2)) {
            goto LABEL_556;
          }
          *((_DWORD *)this + 82) = *(_DWORD *)(*(void *)a2 + v201);
LABEL_338:
          uint64_t v202 = *((void *)a2 + 1) + 4;
          goto LABEL_559;
        default:
          goto LABEL_19;
      }
      goto LABEL_560;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_560:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::VIOEstimation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 340);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 340);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }
  else if ((*(unsigned char *)(this + 340) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 312));
  char v4 = *(unsigned char *)(v3 + 340);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_50:
    this = PB::Writer::write(a2, *(double *)(v3 + 320));
    if ((*(unsigned char *)(v3 + 340) & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 296));
  char v4 = *(unsigned char *)(v3 + 340);
  if ((v4 & 8) != 0) {
    goto LABEL_50;
  }
LABEL_5:
  if ((v4 & 2) != 0) {
LABEL_6:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 304));
LABEL_7:
  uint64_t v5 = *(double **)(v3 + 176);
  uint64_t v6 = *(double **)(v3 + 184);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  uint64_t v8 = *(double **)(v3 + 104);
  char v9 = *(double **)(v3 + 112);
  while (v8 != v9)
  {
    double v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  unint64_t v11 = *(double **)(v3 + 272);
  unint64_t v12 = *(double **)(v3 + 280);
  while (v11 != v12)
  {
    double v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  BOOL v14 = *(double **)(v3 + 8);
  char v15 = *(double **)(v3 + 16);
  while (v14 != v15)
  {
    double v16 = *v14++;
    this = PB::Writer::write(a2, v16);
  }
  unint64_t v17 = *(double **)(v3 + 224);
  char v18 = *(double **)(v3 + 232);
  while (v17 != v18)
  {
    double v19 = *v17++;
    this = PB::Writer::write(a2, v19);
  }
  unint64_t v20 = *(double **)(v3 + 152);
  unint64_t v21 = *(double **)(v3 + 160);
  while (v20 != v21)
  {
    double v22 = *v20++;
    this = PB::Writer::write(a2, v22);
  }
  char v23 = *(double **)(v3 + 128);
  unsigned int v24 = *(double **)(v3 + 136);
  while (v23 != v24)
  {
    double v25 = *v23++;
    this = PB::Writer::write(a2, v25);
  }
  unint64_t v26 = *(double **)(v3 + 248);
  char v27 = *(double **)(v3 + 256);
  while (v26 != v27)
  {
    double v28 = *v26++;
    this = PB::Writer::write(a2, v28);
  }
  unint64_t v29 = *(double **)(v3 + 32);
  unint64_t v30 = *(double **)(v3 + 40);
  while (v29 != v30)
  {
    double v31 = *v29++;
    this = PB::Writer::write(a2, v31);
  }
  unint64_t v32 = *(double **)(v3 + 200);
  unint64_t v33 = *(double **)(v3 + 208);
  while (v32 != v33)
  {
    double v34 = *v32++;
    this = PB::Writer::write(a2, v34);
  }
  uint64_t v35 = *(double **)(v3 + 80);
  double v36 = *(double **)(v3 + 88);
  while (v35 != v36)
  {
    double v37 = *v35++;
    this = PB::Writer::write(a2, v37);
  }
  uint64_t v38 = *(double **)(v3 + 56);
  unint64_t v39 = *(double **)(v3 + 64);
  while (v38 != v39)
  {
    double v40 = *v38++;
    this = PB::Writer::write(a2, v40);
  }
  char v41 = *(unsigned char *)(v3 + 340);
  if ((v41 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 332));
    char v41 = *(unsigned char *)(v3 + 340);
  }
  if ((v41 & 0x10) != 0)
  {
    float v42 = *(float *)(v3 + 328);
    return PB::Writer::write(a2, v42);
  }
  return this;
}

uint64_t CMMsl::VIOEstimation::hash_value(CMMsl::VIOEstimation *this)
{
  if ((*((unsigned char *)this + 340) & 0x40) == 0)
  {
    uint64_t v27 = 0;
    if ((*((unsigned char *)this + 340) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    double v26 = 0.0;
    if (*((unsigned char *)this + 340)) {
      goto LABEL_6;
    }
LABEL_17:
    double v25 = 0.0;
    if ((*((unsigned char *)this + 340) & 8) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  uint64_t v27 = *((int *)this + 84);
  if ((*((unsigned char *)this + 340) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  double v2 = *((double *)this + 39);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  double v26 = v2;
  if ((*((unsigned char *)this + 340) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  double v3 = *((double *)this + 37);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v25 = v3;
  if ((*((unsigned char *)this + 340) & 8) != 0)
  {
LABEL_9:
    double v4 = *((double *)this + 40);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    double v24 = v4;
    if ((*((unsigned char *)this + 340) & 2) != 0) {
      goto LABEL_12;
    }
LABEL_19:
    double v23 = 0.0;
    goto LABEL_20;
  }
LABEL_18:
  double v24 = 0.0;
  if ((*((unsigned char *)this + 340) & 2) == 0) {
    goto LABEL_19;
  }
LABEL_12:
  double v5 = *((double *)this + 38);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  double v23 = v5;
LABEL_20:
  uint64_t v22 = PBHashBytes();
  uint64_t v21 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  uint64_t v7 = PBHashBytes();
  uint64_t v8 = PBHashBytes();
  uint64_t v9 = PBHashBytes();
  uint64_t v10 = PBHashBytes();
  uint64_t v11 = PBHashBytes();
  uint64_t v12 = PBHashBytes();
  uint64_t v13 = PBHashBytes();
  uint64_t v14 = PBHashBytes();
  uint64_t v15 = PBHashBytes();
  if ((*((unsigned char *)this + 340) & 0x20) != 0)
  {
    float v19 = *((float *)this + 83);
    uint64_t v16 = LODWORD(v19);
    if (v19 == 0.0) {
      uint64_t v16 = 0;
    }
    if ((*((unsigned char *)this + 340) & 0x10) != 0) {
      goto LABEL_22;
    }
LABEL_28:
    uint64_t v18 = 0;
    return *(void *)&v26 ^ v27 ^ *(void *)&v25 ^ *(void *)&v24 ^ *(void *)&v23 ^ v22 ^ v21 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
  }
  uint64_t v16 = 0;
  if ((*((unsigned char *)this + 340) & 0x10) == 0) {
    goto LABEL_28;
  }
LABEL_22:
  float v17 = *((float *)this + 82);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  return *(void *)&v26 ^ v27 ^ *(void *)&v25 ^ *(void *)&v24 ^ *(void *)&v23 ^ v22 ^ v21 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
}

void CMMsl::VIOPose::~VIOPose(CMMsl::VIOPose *this)
{
  *(void *)this = &unk_270645770;
  double v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VIOPose::~VIOPose(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::VIOPose *CMMsl::VIOPose::VIOPose(CMMsl::VIOPose *this, const CMMsl::VIOPose *a2)
{
  *(void *)this = &unk_270645770;
  *((void *)this + 1) = 0;
  double v4 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 28) = 0;
  __int16 v5 = *((_WORD *)a2 + 56);
  if (v5)
  {
    uint64_t v7 = *((void *)a2 + 4);
    __int16 v6 = 1;
    *((_WORD *)this + 56) = 1;
    *((void *)this + 4) = v7;
    __int16 v5 = *((_WORD *)a2 + 56);
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = 0;
  if ((*((_WORD *)a2 + 56) & 0x200) != 0)
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 13);
    v6 |= 0x200u;
    *((_WORD *)this + 56) = v6;
    *((void *)this + 13) = v8;
    __int16 v5 = *((_WORD *)a2 + 56);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    uint64_t v9 = *((void *)a2 + 5);
    *((_WORD *)this + 56) = v6 | 2;
    *((void *)this + 5) = v9;
  }
  if (this != a2) {
    sub_2572C73EC(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  __int16 v10 = *((_WORD *)a2 + 56);
  if ((v10 & 8) != 0)
  {
    uint64_t v13 = *((void *)a2 + 7);
    *((_WORD *)this + 56) |= 8u;
    *((void *)this + 7) = v13;
    __int16 v10 = *((_WORD *)a2 + 56);
    if ((v10 & 0x10) == 0)
    {
LABEL_12:
      if ((v10 & 0x20) == 0) {
        goto LABEL_13;
      }
      goto LABEL_21;
    }
  }
  else if ((v10 & 0x10) == 0)
  {
    goto LABEL_12;
  }
  uint64_t v14 = *((void *)a2 + 8);
  *((_WORD *)this + 56) |= 0x10u;
  *((void *)this + 8) = v14;
  __int16 v10 = *((_WORD *)a2 + 56);
  if ((v10 & 0x20) == 0)
  {
LABEL_13:
    if ((v10 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v15 = *((void *)a2 + 9);
  *((_WORD *)this + 56) |= 0x20u;
  *((void *)this + 9) = v15;
  __int16 v10 = *((_WORD *)a2 + 56);
  if ((v10 & 4) == 0)
  {
LABEL_14:
    if ((v10 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v16 = *((void *)a2 + 6);
  *((_WORD *)this + 56) |= 4u;
  *((void *)this + 6) = v16;
  __int16 v10 = *((_WORD *)a2 + 56);
  if ((v10 & 0x80) == 0)
  {
LABEL_15:
    if ((v10 & 0x100) == 0) {
      goto LABEL_16;
    }
LABEL_24:
    uint64_t v18 = *((void *)a2 + 12);
    *((_WORD *)this + 56) |= 0x100u;
    *((void *)this + 12) = v18;
    if ((*((_WORD *)a2 + 56) & 0x40) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_23:
  uint64_t v17 = *((void *)a2 + 11);
  *((_WORD *)this + 56) |= 0x80u;
  *((void *)this + 11) = v17;
  __int16 v10 = *((_WORD *)a2 + 56);
  if ((v10 & 0x100) != 0) {
    goto LABEL_24;
  }
LABEL_16:
  if ((v10 & 0x40) != 0)
  {
LABEL_17:
    uint64_t v11 = *((void *)a2 + 10);
    *((_WORD *)this + 56) |= 0x40u;
    *((void *)this + 10) = v11;
  }
  return this;
}

CMMsl *CMMsl::VIOPose::operator=(CMMsl *a1, const CMMsl::VIOPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::VIOPose::VIOPose((CMMsl::VIOPose *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOPose *)v5, v3);
    CMMsl::VIOPose::~VIOPose((CMMsl::VIOPose *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VIOPose *a2, CMMsl::VIOPose *a3)
{
  int v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  uint64_t v12 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v12;
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
  uint64_t v14 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v14;
  uint64_t v15 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v15;
  double result = *((double *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((double *)a2 + 10) = result;
  return result;
}

uint64_t CMMsl::VIOPose::VIOPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645770;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

CMMsl *CMMsl::VIOPose::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VIOPose::VIOPose((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOPose *)v5, v3);
    CMMsl::VIOPose::~VIOPose((CMMsl::VIOPose *)v5);
  }
  return a1;
}

uint64_t CMMsl::VIOPose::formatText(CMMsl::VIOPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 56);
  if (v5)
  {
    PB::TextFormatter::format(a2, "currentTimestamp", *((double *)this + 4));
    __int16 v5 = *((_WORD *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "latestInertialTimestamp", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "latestInertialTimestampMeta", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "positionX", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "positionY", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 56);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "positionZ", *((double *)this + 9));
  __int16 v5 = *((_WORD *)this + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "predictionComputeTimeMeta", *((double *)this + 10));
  __int16 v5 = *((_WORD *)this + 56);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "predictionTimeMeta", *((double *)this + 11));
  if ((*((_WORD *)this + 56) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "propagationTimeMeta", *((double *)this + 12));
LABEL_11:
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "rotationMatrixElement", v8);
  }
  if ((*((_WORD *)this + 56) & 0x200) != 0) {
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 13));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::VIOPose::readFrom(CMMsl::VIOPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 56) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v19);
        goto LABEL_99;
      case 2u:
        *((_WORD *)this + 56) |= 0x200u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 13) = *(void *)(*(void *)a2 + v20);
        goto LABEL_99;
      case 3u:
        *((_WORD *)this + 56) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v21);
        goto LABEL_99;
      case 4u:
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v22 = *((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
          while (v22 < v23 && !*((unsigned char *)a2 + 24))
          {
            double v25 = (char *)*((void *)this + 2);
            unint64_t v24 = *((void *)this + 3);
            if ((unint64_t)v25 >= v24)
            {
              uint64_t v27 = (char *)*((void *)this + 1);
              uint64_t v28 = (v25 - v27) >> 3;
              unint64_t v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 61) {
                goto LABEL_107;
              }
              uint64_t v30 = v24 - (void)v27;
              if (v30 >> 2 > v29) {
                unint64_t v29 = v30 >> 2;
              }
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v29;
              }
              if (v31)
              {
                unint64_t v31 = (unint64_t)sub_2572C7528(v31);
                uint64_t v27 = (char *)*((void *)this + 1);
                double v25 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v32 = 0;
              }
              unint64_t v33 = (void *)(v31 + 8 * v28);
              *unint64_t v33 = 0;
              double v26 = v33 + 1;
              while (v25 != v27)
              {
                uint64_t v34 = *((void *)v25 - 1);
                v25 -= 8;
                *--unint64_t v33 = v34;
              }
              *((void *)this + 1) = v33;
              *((void *)this + 2) = v26;
              *((void *)this + 3) = v31 + 8 * v32;
              if (v27) {
                operator delete(v27);
              }
            }
            else
            {
              *(void *)double v25 = 0;
              double v26 = v25 + 8;
            }
            *((void *)this + 2) = v26;
            unint64_t v35 = *((void *)a2 + 1);
            if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v26 - 1) = *(void *)(*(void *)a2 + v35);
            unint64_t v23 = *((void *)a2 + 2);
            unint64_t v22 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v22;
          }
          PB::Reader::recallMark();
        }
        else
        {
          uint64_t v44 = (char *)*((void *)this + 2);
          unint64_t v43 = *((void *)this + 3);
          if ((unint64_t)v44 >= v43)
          {
            unint64_t v46 = (char *)*((void *)this + 1);
            uint64_t v47 = (v44 - v46) >> 3;
            unint64_t v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61) {
LABEL_107:
            }
              sub_2570AFD0C();
            uint64_t v49 = v43 - (void)v46;
            if (v49 >> 2 > v48) {
              unint64_t v48 = v49 >> 2;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v48;
            }
            if (v50)
            {
              unint64_t v50 = (unint64_t)sub_2572C7528(v50);
              unint64_t v46 = (char *)*((void *)this + 1);
              uint64_t v44 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v52 = (void *)(v50 + 8 * v47);
            *uint64_t v52 = 0;
            unint64_t v45 = v52 + 1;
            while (v44 != v46)
            {
              uint64_t v53 = *((void *)v44 - 1);
              v44 -= 8;
              *--uint64_t v52 = v53;
            }
            *((void *)this + 1) = v52;
            *((void *)this + 2) = v45;
            *((void *)this + 3) = v50 + 8 * v51;
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            *(void *)uint64_t v44 = 0;
            unint64_t v45 = v44 + 8;
          }
          *((void *)this + 2) = v45;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 <= 0xFFFFFFFFFFFFFFF7 && v54 + 8 <= *((void *)a2 + 2))
          {
            *(v45 - 1) = *(void *)(*(void *)a2 + v54);
LABEL_99:
            *((void *)a2 + 1) += 8;
          }
          else
          {
LABEL_97:
            *((unsigned char *)a2 + 24) = 1;
          }
        }
        break;
      case 5u:
        *((_WORD *)this + 56) |= 8u;
        unint64_t v36 = *((void *)a2 + 1);
        if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v36);
        goto LABEL_99;
      case 6u:
        *((_WORD *)this + 56) |= 0x10u;
        unint64_t v37 = *((void *)a2 + 1);
        if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v37);
        goto LABEL_99;
      case 7u:
        *((_WORD *)this + 56) |= 0x20u;
        unint64_t v38 = *((void *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v38);
        goto LABEL_99;
      case 8u:
        *((_WORD *)this + 56) |= 4u;
        unint64_t v39 = *((void *)a2 + 1);
        if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v39);
        goto LABEL_99;
      case 9u:
        *((_WORD *)this + 56) |= 0x80u;
        unint64_t v40 = *((void *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v40);
        goto LABEL_99;
      case 0xAu:
        *((_WORD *)this + 56) |= 0x100u;
        unint64_t v41 = *((void *)a2 + 1);
        if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v41);
        goto LABEL_99;
      case 0xBu:
        *((_WORD *)this + 56) |= 0x40u;
        unint64_t v42 = *((void *)a2 + 1);
        if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((void *)a2 + 2)) {
          goto LABEL_97;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v42);
        goto LABEL_99;
      default:
        goto LABEL_19;
    }
LABEL_100:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_100;
  }
  return 0;
}

uint64_t CMMsl::VIOPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 112);
  if ((v4 & 1) == 0)
  {
    if ((*(_WORD *)(this + 112) & 0x200) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    this = PB::Writer::write(a2, *(double *)(v3 + 104));
    if ((*(_WORD *)(v3 + 112) & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  this = PB::Writer::write(a2, *(double *)(this + 32));
  __int16 v4 = *(_WORD *)(v3 + 112);
  if ((v4 & 0x200) != 0) {
    goto LABEL_17;
  }
LABEL_3:
  if ((v4 & 2) != 0) {
LABEL_4:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
LABEL_5:
  __int16 v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 56));
    __int16 v8 = *(_WORD *)(v3 + 112);
    if ((v8 & 0x10) == 0)
    {
LABEL_10:
      if ((v8 & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
  }
  else if ((v8 & 0x10) == 0)
  {
    goto LABEL_10;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x20) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x80) == 0)
  {
LABEL_13:
    if ((v8 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(double *)(v3 + 96));
    if ((*(_WORD *)(v3 + 112) & 0x40) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x100) != 0) {
    goto LABEL_24;
  }
LABEL_14:
  if ((v8 & 0x40) == 0) {
    return this;
  }
LABEL_25:
  double v9 = *(double *)(v3 + 80);
  return PB::Writer::write(a2, v9);
}

uint64_t CMMsl::VIOPose::hash_value(CMMsl::VIOPose *this)
{
  __int16 v2 = *((_WORD *)this + 56);
  if (v2)
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = *((void *)this + 4);
    }
    if ((*((_WORD *)this + 56) & 0x200) != 0)
    {
LABEL_3:
      if (*((double *)this + 13) == 0.0) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = *((void *)this + 13);
      }
      if ((v2 & 2) != 0) {
        goto LABEL_7;
      }
LABEL_15:
      uint64_t v5 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((_WORD *)this + 56) & 0x200) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_15;
  }
LABEL_7:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 5);
  }
LABEL_16:
  uint64_t v6 = PBHashBytes();
  __int16 v7 = *((_WORD *)this + 56);
  if ((v7 & 8) == 0)
  {
    double v8 = 0.0;
    if ((v7 & 0x10) != 0) {
      goto LABEL_18;
    }
LABEL_39:
    double v9 = 0.0;
    if ((v7 & 0x20) != 0) {
      goto LABEL_21;
    }
LABEL_40:
    double v10 = 0.0;
    if ((v7 & 4) != 0) {
      goto LABEL_24;
    }
LABEL_41:
    double v11 = 0.0;
    if ((v7 & 0x80) != 0) {
      goto LABEL_27;
    }
LABEL_42:
    double v12 = 0.0;
    if ((*((_WORD *)this + 56) & 0x100) != 0) {
      goto LABEL_30;
    }
    goto LABEL_43;
  }
  double v8 = *((double *)this + 7);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v7 & 0x10) == 0) {
    goto LABEL_39;
  }
LABEL_18:
  double v9 = *((double *)this + 8);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v7 & 0x20) == 0) {
    goto LABEL_40;
  }
LABEL_21:
  double v10 = *((double *)this + 9);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v7 & 4) == 0) {
    goto LABEL_41;
  }
LABEL_24:
  double v11 = *((double *)this + 6);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v7 & 0x80) == 0) {
    goto LABEL_42;
  }
LABEL_27:
  double v12 = *((double *)this + 11);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((*((_WORD *)this + 56) & 0x100) != 0)
  {
LABEL_30:
    double v13 = *((double *)this + 12);
    if (v13 == 0.0) {
      double v13 = 0.0;
    }
    if ((v7 & 0x40) != 0) {
      goto LABEL_33;
    }
LABEL_44:
    double v14 = 0.0;
    return v4 ^ v3 ^ v5 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ v6 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14;
  }
LABEL_43:
  double v13 = 0.0;
  if ((v7 & 0x40) == 0) {
    goto LABEL_44;
  }
LABEL_33:
  double v14 = *((double *)this + 10);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  return v4 ^ v3 ^ v5 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ v6 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14;
}

void CMMsl::VIOReplayPose::~VIOReplayPose(CMMsl::VIOReplayPose *this)
{
  *(void *)this = &unk_2706457A8;
  __int16 v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VIOReplayPose::~VIOReplayPose(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::VIOReplayPose *CMMsl::VIOReplayPose::VIOReplayPose(CMMsl::VIOReplayPose *this, const CMMsl::VIOReplayPose *a2)
{
  *(void *)this = &unk_2706457A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((unsigned char *)a2 + 64))
  {
    uint64_t v5 = *((void *)a2 + 7);
    *((unsigned char *)this + 64) = 1;
    *((void *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_2572C73EC(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_2572C73EC((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  }
  return this;
}

uint64_t CMMsl::VIOReplayPose::operator=(uint64_t a1, const CMMsl::VIOReplayPose *a2)
{
  if ((const CMMsl::VIOReplayPose *)a1 != a2)
  {
    CMMsl::VIOReplayPose::VIOReplayPose((CMMsl::VIOReplayPose *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    CMMsl::VIOReplayPose::~VIOReplayPose((CMMsl::VIOReplayPose *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VIOReplayPose *a2, CMMsl::VIOReplayPose *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::VIOReplayPose::VIOReplayPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706457A8;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::VIOReplayPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::VIOReplayPose::VIOReplayPose((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    CMMsl::VIOReplayPose::~VIOReplayPose((CMMsl::VIOReplayPose *)v9);
  }
  return a1;
}

uint64_t CMMsl::VIOReplayPose::formatText(CMMsl::VIOReplayPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "so3", v7);
  }
  if (*((unsigned char *)this + 64)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  }
  uint64_t v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "translation", v10);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::VIOReplayPose::readFrom(CMMsl::VIOReplayPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_27;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        if (v19 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v36 = *((void *)a2 + 1);
          unint64_t v37 = *((void *)a2 + 2);
          while (v36 < v37 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v39 = (char *)*((void *)this + 2);
            unint64_t v38 = *((void *)this + 3);
            if ((unint64_t)v39 >= v38)
            {
              unint64_t v41 = (char *)*((void *)this + 1);
              uint64_t v42 = (v39 - v41) >> 3;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61) {
                goto LABEL_125;
              }
              uint64_t v44 = v38 - (void)v41;
              if (v44 >> 2 > v43) {
                unint64_t v43 = v44 >> 2;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                unint64_t v45 = (unint64_t)sub_2572C7528(v45);
                unint64_t v41 = (char *)*((void *)this + 1);
                unint64_t v39 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v46 = 0;
              }
              uint64_t v47 = (void *)(v45 + 8 * v42);
              *uint64_t v47 = 0;
              unint64_t v40 = v47 + 1;
              while (v39 != v41)
              {
                uint64_t v48 = *((void *)v39 - 1);
                v39 -= 8;
                *--uint64_t v47 = v48;
              }
              *((void *)this + 1) = v47;
              *((void *)this + 2) = v40;
              *((void *)this + 3) = v45 + 8 * v46;
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(void *)unint64_t v39 = 0;
              unint64_t v40 = v39 + 8;
            }
            *((void *)this + 2) = v40;
            unint64_t v49 = *((void *)a2 + 1);
            if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((void *)a2 + 2)) {
              goto LABEL_81;
            }
            *(v40 - 1) = *(void *)(*(void *)a2 + v49);
            unint64_t v37 = *((void *)a2 + 2);
            unint64_t v36 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v36;
          }
          goto LABEL_82;
        }
        unint64_t v54 = (char *)*((void *)this + 2);
        unint64_t v53 = *((void *)this + 3);
        if ((unint64_t)v54 >= v53)
        {
          unint64_t v61 = (char *)*((void *)this + 1);
          uint64_t v62 = (v54 - v61) >> 3;
          unint64_t v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 61) {
LABEL_125:
          }
            sub_2570AFD0C();
          uint64_t v64 = v53 - (void)v61;
          if (v64 >> 2 > v63) {
            unint64_t v63 = v64 >> 2;
          }
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v65 = v63;
          }
          if (v65)
          {
            unint64_t v65 = (unint64_t)sub_2572C7528(v65);
            unint64_t v61 = (char *)*((void *)this + 1);
            unint64_t v54 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v66 = 0;
          }
          unint64_t v69 = (void *)(v65 + 8 * v62);
          *unint64_t v69 = 0;
          uint64_t v52 = v69 + 1;
          while (v54 != v61)
          {
            uint64_t v70 = *((void *)v54 - 1);
            v54 -= 8;
            *--unint64_t v69 = v70;
          }
          *((void *)this + 1) = v69;
          *((void *)this + 2) = v52;
          *((void *)this + 3) = v65 + 8 * v66;
          if (v61) {
            operator delete(v61);
          }
        }
        else
        {
          *(void *)unint64_t v54 = 0;
          uint64_t v52 = v54 + 8;
        }
        *((void *)this + 2) = v52;
LABEL_113:
        unint64_t v71 = *((void *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((void *)a2 + 2)) {
          goto LABEL_115;
        }
        *(v52 - 1) = *(void *)(*(void *)a2 + v71);
        goto LABEL_117;
      }
      if (v20 != 1)
      {
LABEL_27:
        if ((PB::Reader::skip(a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_118;
      }
      *((unsigned char *)this + 64) |= 1u;
      unint64_t v21 = *((void *)a2 + 1);
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
      {
LABEL_115:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_118;
      }
      *((void *)this + 7) = *(void *)(*(void *)a2 + v21);
LABEL_117:
      *((void *)a2 + 1) += 8;
LABEL_118:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    if (v19 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v22 = *((void *)a2 + 1);
      unint64_t v23 = *((void *)a2 + 2);
      while (v22 < v23 && !*((unsigned char *)a2 + 24))
      {
        double v25 = (char *)*((void *)this + 5);
        unint64_t v24 = *((void *)this + 6);
        if ((unint64_t)v25 >= v24)
        {
          uint64_t v27 = (char *)*((void *)this + 4);
          uint64_t v28 = (v25 - v27) >> 3;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 61) {
            goto LABEL_125;
          }
          uint64_t v30 = v24 - (void)v27;
          if (v30 >> 2 > v29) {
            unint64_t v29 = v30 >> 2;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            unint64_t v31 = (unint64_t)sub_2572C7528(v31);
            uint64_t v27 = (char *)*((void *)this + 4);
            double v25 = (char *)*((void *)this + 5);
          }
          else
          {
            uint64_t v32 = 0;
          }
          unint64_t v33 = (void *)(v31 + 8 * v28);
          *unint64_t v33 = 0;
          double v26 = v33 + 1;
          while (v25 != v27)
          {
            uint64_t v34 = *((void *)v25 - 1);
            v25 -= 8;
            *--unint64_t v33 = v34;
          }
          *((void *)this + 4) = v33;
          *((void *)this + 5) = v26;
          *((void *)this + 6) = v31 + 8 * v32;
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)double v25 = 0;
          double v26 = v25 + 8;
        }
        *((void *)this + 5) = v26;
        unint64_t v35 = *((void *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((void *)a2 + 2))
        {
LABEL_81:
          *((unsigned char *)a2 + 24) = 1;
          break;
        }
        *(v26 - 1) = *(void *)(*(void *)a2 + v35);
        unint64_t v23 = *((void *)a2 + 2);
        unint64_t v22 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v22;
      }
LABEL_82:
      PB::Reader::recallMark();
      goto LABEL_118;
    }
    uint64_t v51 = (char *)*((void *)this + 5);
    unint64_t v50 = *((void *)this + 6);
    if ((unint64_t)v51 >= v50)
    {
      unint64_t v55 = (char *)*((void *)this + 4);
      uint64_t v56 = (v51 - v55) >> 3;
      unint64_t v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61) {
        goto LABEL_125;
      }
      uint64_t v58 = v50 - (void)v55;
      if (v58 >> 2 > v57) {
        unint64_t v57 = v58 >> 2;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (v59)
      {
        unint64_t v59 = (unint64_t)sub_2572C7528(v59);
        unint64_t v55 = (char *)*((void *)this + 4);
        uint64_t v51 = (char *)*((void *)this + 5);
      }
      else
      {
        uint64_t v60 = 0;
      }
      unint64_t v67 = (void *)(v59 + 8 * v56);
      *unint64_t v67 = 0;
      uint64_t v52 = v67 + 1;
      while (v51 != v55)
      {
        uint64_t v68 = *((void *)v51 - 1);
        v51 -= 8;
        *--unint64_t v67 = v68;
      }
      *((void *)this + 4) = v67;
      *((void *)this + 5) = v52;
      *((void *)this + 6) = v59 + 8 * v60;
      if (v55) {
        operator delete(v55);
      }
    }
    else
    {
      *(void *)uint64_t v51 = 0;
      uint64_t v52 = v51 + 8;
    }
    *((void *)this + 5) = v52;
    goto LABEL_113;
  }
  return v4 == 0;
}

uint64_t CMMsl::VIOReplayPose::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 64)) {
    this = PB::Writer::write(a2, *(double *)(this + 56));
  }
  int v4 = (double *)v3[1];
  long long v5 = (double *)v3[2];
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  uint64_t v8 = (double *)v3[4];
  double v7 = (double *)v3[5];
  while (v8 != v7)
  {
    double v9 = *v8++;
    this = PB::Writer::write(a2, v9);
  }
  return this;
}

uint64_t CMMsl::VIOReplayPose::hash_value(CMMsl::VIOReplayPose *this)
{
  if (*((unsigned char *)this + 64))
  {
    if (*((double *)this + 7) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 7);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

void CMMsl::VO2MaxInput::~VO2MaxInput(CMMsl::VO2MaxInput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::VO2MaxInput::VO2MaxInput(CMMsl::VO2MaxInput *this, const CMMsl::VO2MaxInput *a2)
{
  *(void *)this = &unk_2706457E0;
  *((_DWORD *)this + 22) = 0;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x80) != 0)
  {
    double result = *((double *)a2 + 8);
    __int16 v3 = 128;
    *((_WORD *)this + 44) = 128;
    *((double *)this + 8) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 6) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    int v5 = *((_DWORD *)a2 + 19);
    v3 |= 0x200u;
    *((_WORD *)this + 44) = v3;
    *((_DWORD *)this + 19) = v5;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 2) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v6 = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 18) = v6;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v7 = *((unsigned char *)a2 + 84);
  v3 |= 0x800u;
  *((_WORD *)this + 44) = v3;
  *((unsigned char *)this + 84) = v7;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  char v8 = *((unsigned char *)a2 + 85);
  v3 |= 0x1000u;
  *((_WORD *)this + 44) = v3;
  *((unsigned char *)this + 85) = v8;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v9 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 20) = v9;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_30:
    double result = *((double *)a2 + 5);
    *((_WORD *)this + 44) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_29:
  char v10 = *((unsigned char *)a2 + 86);
  v3 |= 0x2000u;
  *((_WORD *)this + 44) = v3;
  *((unsigned char *)this + 86) = v10;
  if ((*((_WORD *)a2 + 44) & 0x10) != 0) {
    goto LABEL_30;
  }
  return result;
}

CMMsl *CMMsl::VO2MaxInput::operator=(CMMsl *a1, const CMMsl::VO2MaxInput *a2)
{
  if (a1 != a2)
  {
    CMMsl::VO2MaxInput::VO2MaxInput((CMMsl::VO2MaxInput *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VO2MaxInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VO2MaxInput *a2, CMMsl::VO2MaxInput *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  int v10 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v10;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  uint64_t v12 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v12;
  LOBYTE(v10) = *((unsigned char *)this + 84);
  *((unsigned char *)this + 84) = *((unsigned char *)a2 + 84);
  *((unsigned char *)a2 + 84) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 85);
  *((unsigned char *)this + 85) = *((unsigned char *)a2 + 85);
  *((unsigned char *)a2 + 85) = v10;
  int v13 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 86);
  *((unsigned char *)this + 86) = *((unsigned char *)a2 + 86);
  *((unsigned char *)a2 + 86) = v13;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::VO2MaxInput::VO2MaxInput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706457E0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 86) = *(unsigned char *)(a2 + 86);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::VO2MaxInput::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VO2MaxInput::VO2MaxInput((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VO2MaxInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::VO2MaxInput::formatText(CMMsl::VO2MaxInput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "cadence", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "grade", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "gradeType");
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "hasGps");
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "hasStrideCal");
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "heartRate", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "heartRateConfidence", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "hrTime", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isStroller");
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "metSource");
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "mets", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "pace", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "startDate", *((double *)this + 8));
  if ((*((_WORD *)this + 44) & 0x400) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "workoutType");
LABEL_16:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::VO2MaxInput::readFrom(CMMsl::VO2MaxInput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_118;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 44) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 2u:
        *((_WORD *)this + 44) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 3u:
        *((_WORD *)this + 44) |= 0x200u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_107;
            }
            unint64_t v46 = v20++;
            char v47 = *(unsigned char *)(v21 + v46);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            BOOL v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_106:
              unint64_t v2 = v46 + 1;
              goto LABEL_107;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_106;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_107;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_107:
        *((_DWORD *)this + 19) = v24;
        break;
      case 4u:
        *((_WORD *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 5u:
        *((_WORD *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 6u:
        *((_WORD *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 7u:
        *((_WORD *)this + 44) |= 0x100u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_112;
            }
            unint64_t v50 = v26++;
            char v51 = *(unsigned char *)(v27 + v50);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            BOOL v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_111:
              unint64_t v2 = v50 + 1;
              goto LABEL_112;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_111;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_112;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_112:
        *((_DWORD *)this + 18) = v30;
        break;
      case 8u:
        *((_WORD *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 9u:
        *((_WORD *)this + 44) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_73;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_102;
      case 0xAu:
        *((_WORD *)this + 44) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v33 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v33 = v32 != 0;
        }
        *((unsigned char *)this + 84) = v33;
        break;
      case 0xBu:
        *((_WORD *)this + 44) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v35 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v34 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v35 = v34 != 0;
        }
        *((unsigned char *)this + 85) = v35;
        break;
      case 0xCu:
        *((_WORD *)this + 44) |= 0x400u;
        unint64_t v36 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v37 = *(void *)a2;
        if (v36 > 0xFFFFFFFFFFFFFFF5 || v36 + 10 > v2)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v40 = 0;
          if (v2 <= v36) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v36)
            {
              LODWORD(v40) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_117;
            }
            unint64_t v54 = v36++;
            char v55 = *(unsigned char *)(v37 + v54);
            *((void *)a2 + 1) = v36;
            v40 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0) {
              break;
            }
            v52 += 7;
            BOOL v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v40) = 0;
LABEL_116:
              unint64_t v2 = v54 + 1;
              goto LABEL_117;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v40) = 0;
          }
          goto LABEL_116;
        }
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v40 = 0;
        do
        {
          unint64_t v2 = v36 + 1;
          *((void *)a2 + 1) = v36 + 1;
          char v41 = *(unsigned char *)(v37 + v36);
          v40 |= (unint64_t)(v41 & 0x7F) << v38;
          if ((v41 & 0x80) == 0) {
            goto LABEL_117;
          }
          v38 += 7;
          unint64_t v36 = v2;
          BOOL v14 = v39++ > 8;
        }
        while (!v14);
        LODWORD(v40) = 0;
LABEL_117:
        *((_DWORD *)this + 20) = v40;
        break;
      case 0xDu:
        *((_WORD *)this + 44) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v43 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v42 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v43 = v42 != 0;
        }
        *((unsigned char *)this + 86) = v43;
        break;
      case 0xEu:
        *((_WORD *)this + 44) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
LABEL_102:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_73:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_118:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::VO2MaxInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 88);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64));
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::write(a2);
    if ((*(_WORD *)(v3 + 88) & 0x10) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_29:
  double v5 = *(double *)(v3 + 40);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::VO2MaxInput::hash_value(CMMsl::VO2MaxInput *this)
{
  __int16 v1 = *((_WORD *)this + 44);
  if ((v1 & 0x80) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_33:
    double v3 = 0.0;
    if ((*((_WORD *)this + 44) & 0x200) != 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
  double v2 = *((double *)this + 8);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  double v3 = *((double *)this + 6);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x200) != 0)
  {
LABEL_6:
    uint64_t v4 = *((int *)this + 19);
    if ((v1 & 4) != 0) {
      goto LABEL_7;
    }
LABEL_35:
    double v5 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_10;
    }
LABEL_36:
    double v6 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_13;
    }
LABEL_37:
    double v7 = 0.0;
    if ((*((_WORD *)this + 44) & 0x100) != 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v4 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_35;
  }
LABEL_7:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_36;
  }
LABEL_10:
  double v6 = *((double *)this + 4);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_37;
  }
LABEL_13:
  double v7 = *((double *)this + 2);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x100) != 0)
  {
LABEL_16:
    uint64_t v8 = *((int *)this + 18);
    if (v1) {
      goto LABEL_17;
    }
LABEL_39:
    double v9 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_20;
    }
LABEL_40:
    double v10 = 0.0;
    if ((*((_WORD *)this + 44) & 0x800) != 0) {
      goto LABEL_23;
    }
    goto LABEL_41;
  }
LABEL_38:
  uint64_t v8 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_17:
  double v9 = *((double *)this + 1);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_40;
  }
LABEL_20:
  double v10 = *((double *)this + 7);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x800) != 0)
  {
LABEL_23:
    uint64_t v11 = *((unsigned __int8 *)this + 84);
    if ((*((_WORD *)this + 44) & 0x1000) != 0) {
      goto LABEL_24;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v11 = 0;
  if ((*((_WORD *)this + 44) & 0x1000) != 0)
  {
LABEL_24:
    uint64_t v12 = *((unsigned __int8 *)this + 85);
    if ((*((_WORD *)this + 44) & 0x400) != 0) {
      goto LABEL_25;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v12 = 0;
  if ((*((_WORD *)this + 44) & 0x400) != 0)
  {
LABEL_25:
    uint64_t v13 = *((int *)this + 20);
    if ((*((_WORD *)this + 44) & 0x2000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v13 = 0;
  if ((*((_WORD *)this + 44) & 0x2000) != 0)
  {
LABEL_26:
    uint64_t v14 = *((unsigned __int8 *)this + 86);
    if ((v1 & 0x10) != 0) {
      goto LABEL_27;
    }
LABEL_45:
    double v15 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(void *)&v15;
  }
LABEL_44:
  uint64_t v14 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_45;
  }
LABEL_27:
  double v15 = *((double *)this + 5);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(void *)&v15;
}

void CMMsl::VO2MaxModelInput::~VO2MaxModelInput(CMMsl::VO2MaxModelInput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::VO2MaxModelInput::VO2MaxModelInput(CMMsl::VO2MaxModelInput *this, const CMMsl::VO2MaxModelInput *a2)
{
  *(void *)this = &unk_270645818;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    char v3 = 4;
    *((unsigned char *)this + 40) = 4;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 4);
    *((unsigned char *)this + 40) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((unsigned char *)this + 40) = v3;
  *((double *)this + 1) = result;
  if ((*((unsigned char *)a2 + 40) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::VO2MaxModelInput::operator=(uint64_t a1, const CMMsl::VO2MaxModelInput *a2)
{
  if ((const CMMsl::VO2MaxModelInput *)a1 != a2)
  {
    CMMsl::VO2MaxModelInput::VO2MaxModelInput((CMMsl::VO2MaxModelInput *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VO2MaxModelInput *a2, CMMsl::VO2MaxModelInput *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::VO2MaxModelInput::VO2MaxModelInput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645818;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645818;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::VO2MaxModelInput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_270645818;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v11 = *(_DWORD *)(a1 + 40);
    long long v4 = *(_OWORD *)(a2 + 8);
    long long v9 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a1 + 24);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 24) = v6;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::VO2MaxModelInput::formatText(CMMsl::VO2MaxModelInput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "hr", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hrTime", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "time", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "vo2", *((double *)this + 4));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::VO2MaxModelInput::readFrom(CMMsl::VO2MaxModelInput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_37;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::VO2MaxModelInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 8));
      if ((*(unsigned char *)(v3 + 40) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 32);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::VO2MaxModelInput::hash_value(CMMsl::VO2MaxModelInput *this)
{
  if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if (*((unsigned char *)this + 40)) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if (*((unsigned char *)this + 40))
  {
LABEL_6:
    double v3 = *((double *)this + 1);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v4 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
  }
LABEL_16:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v4 = *((double *)this + 4);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
}

void CMMsl::VO2MaxOutput::~VO2MaxOutput(CMMsl::VO2MaxOutput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::VO2MaxOutput::VO2MaxOutput(uint64_t this, const CMMsl::VO2MaxOutput *a2)
{
  *(void *)this = &unk_270645850;
  *(_DWORD *)(this + 72) = 0;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *((void *)a2 + 6);
    __int16 v3 = 32;
    *(_WORD *)(this + 72) = 32;
    *(void *)(this + 48) = v4;
    __int16 v2 = *((_WORD *)a2 + 36);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 72) = v3;
    *(void *)(this + 16) = v5;
    __int16 v2 = *((_WORD *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    int v6 = *((_DWORD *)a2 + 17);
    v3 |= 0x100u;
    *(_WORD *)(this + 72) = v3;
    *(_DWORD *)(this + 68) = v6;
    __int16 v2 = *((_WORD *)a2 + 36);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 8) = v7;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v8 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 32) = v8;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v9 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 40) = v9;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v10 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 56) = v10;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_20:
    int v12 = *((_DWORD *)a2 + 16);
    *(_WORD *)(this + 72) = v3 | 0x80;
    *(_DWORD *)(this + 64) = v12;
    return this;
  }
LABEL_19:
  uint64_t v11 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 24) = v11;
  if ((*((_WORD *)a2 + 36) & 0x80) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::VO2MaxOutput::operator=(uint64_t a1, const CMMsl::VO2MaxOutput *a2)
{
  if ((const CMMsl::VO2MaxOutput *)a1 != a2)
  {
    CMMsl::VO2MaxOutput::VO2MaxOutput((uint64_t)&v10, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v5;
    *(void *)&long long v5 = v15;
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v5;
    int v8 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    int v16 = v8;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VO2MaxOutput *a2, CMMsl::VO2MaxOutput *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  int v6 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  int v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  return result;
}

double CMMsl::VO2MaxOutput::VO2MaxOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645850;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

uint64_t CMMsl::VO2MaxOutput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::VO2MaxOutput::VO2MaxOutput((uint64_t)&v10, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v5;
    *(void *)&long long v5 = v15;
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v5;
    int v8 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    int v16 = v8;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::VO2MaxOutput::formatText(CMMsl::VO2MaxOutput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 36);
  if (v5)
  {
    PB::TextFormatter::format(a2, "durationInSeconds", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "estimatedVo2Max", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "filteredVo2Max", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "hrMax", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "hrMin", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "sessionType");
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "variance", *((double *)this + 7));
  if ((*((_WORD *)this + 36) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "workoutType");
LABEL_11:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::VO2MaxOutput::readFrom(CMMsl::VO2MaxOutput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_84;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 36) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 2u:
        *((_WORD *)this + 36) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 3u:
        *((_WORD *)this + 36) |= 0x100u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_78;
            }
            unint64_t v34 = v20++;
            char v35 = *(unsigned char *)(v21 + v34);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_77:
              unint64_t v2 = v34 + 1;
              goto LABEL_78;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_77;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_78;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_78:
        *((_DWORD *)this + 17) = v24;
        break;
      case 4u:
        *((_WORD *)this + 36) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 5u:
        *((_WORD *)this + 36) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 6u:
        *((_WORD *)this + 36) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 7u:
        *((_WORD *)this + 36) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 8u:
        *((_WORD *)this + 36) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_73:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_50:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 9u:
        *((_WORD *)this + 36) |= 0x80u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_83;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_82:
              unint64_t v2 = v38 + 1;
              goto LABEL_83;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_82;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_83;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_83:
        *((_DWORD *)this + 16) = v30;
        break;
      default:
        goto LABEL_19;
    }
LABEL_84:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::VO2MaxOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 72);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48));
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(double *)(v3 + 24));
    if ((*(_WORD *)(v3 + 72) & 0x80) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_19:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::VO2MaxOutput::hash_value(CMMsl::VO2MaxOutput *this)
{
  __int16 v1 = *((_WORD *)this + 36);
  if ((v1 & 0x20) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_26:
    double v3 = 0.0;
    if ((*((_WORD *)this + 36) & 0x100) != 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
  double v2 = *((double *)this + 6);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_26;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((_WORD *)this + 36) & 0x100) != 0)
  {
LABEL_6:
    uint64_t v4 = *((int *)this + 17);
    if (v1) {
      goto LABEL_7;
    }
LABEL_28:
    double v5 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_10;
    }
LABEL_29:
    double v6 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_13;
    }
LABEL_30:
    double v7 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_16;
    }
LABEL_31:
    double v8 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_19;
    }
    goto LABEL_32;
  }
LABEL_27:
  uint64_t v4 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_7:
  double v5 = *((double *)this + 1);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_29;
  }
LABEL_10:
  double v6 = *((double *)this + 4);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_30;
  }
LABEL_13:
  double v7 = *((double *)this + 5);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_16:
  double v8 = *((double *)this + 7);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_19:
    double v9 = *((double *)this + 3);
    if (v9 == 0.0) {
      double v9 = 0.0;
    }
    if ((v1 & 0x80) != 0) {
      goto LABEL_22;
    }
LABEL_33:
    uint64_t v10 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10;
  }
LABEL_32:
  double v9 = 0.0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_33;
  }
LABEL_22:
  uint64_t v10 = *((int *)this + 16);
  return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10;
}

void CMMsl::VehicularFlagsData::~VehicularFlagsData(CMMsl::VehicularFlagsData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::VehicularFlagsData::VehicularFlagsData(uint64_t this, const CMMsl::VehicularFlagsData *a2)
{
  *(void *)this = &unk_270645888;
  *(_DWORD *)(this + 20) = 0;
  char v2 = *((unsigned char *)a2 + 20);
  if ((v2 & 0x10) != 0)
  {
    char v4 = *((unsigned char *)a2 + 15);
    char v3 = 16;
    *(unsigned char *)(this + 20) = 16;
    *(unsigned char *)(this + 15) = v4;
    char v2 = *((unsigned char *)a2 + 20);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 20) & 8) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 14);
    v3 |= 8u;
    *(unsigned char *)(this + 20) = v3;
    *(unsigned char *)(this + 14) = v5;
    char v2 = *((unsigned char *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    char v6 = *((unsigned char *)a2 + 12);
    v3 |= 2u;
    *(unsigned char *)(this + 20) = v3;
    *(unsigned char *)(this + 12) = v6;
    char v2 = *((unsigned char *)a2 + 20);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 16);
  v3 |= 0x20u;
  *(unsigned char *)(this + 20) = v3;
  *(unsigned char *)(this + 16) = v7;
  char v2 = *((unsigned char *)a2 + 20);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return this;
    }
LABEL_14:
    int v9 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 20) = v3 | 1;
    *(_DWORD *)(this + 8) = v9;
    return this;
  }
LABEL_13:
  char v8 = *((unsigned char *)a2 + 13);
  v3 |= 4u;
  *(unsigned char *)(this + 20) = v3;
  *(unsigned char *)(this + 13) = v8;
  if (*((unsigned char *)a2 + 20)) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::VehicularFlagsData::operator=(uint64_t a1, const CMMsl::VehicularFlagsData *a2)
{
  if ((const CMMsl::VehicularFlagsData *)a1 != a2)
  {
    CMMsl::VehicularFlagsData::VehicularFlagsData((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    int v12 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v11;
    char v11 = v3;
    int v5 = *(_DWORD *)(a1 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    int v6 = v10;
    *(_DWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 12) = v6;
    int v9 = v5;
    int v10 = v4;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::VehicularFlagsData *a2, CMMsl::VehicularFlagsData *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 15);
  *(unsigned char *)(this + 15) = *((unsigned char *)a2 + 15);
  *((unsigned char *)a2 + 15) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 14);
  *(unsigned char *)(this + 14) = *((unsigned char *)a2 + 14);
  *((unsigned char *)a2 + 14) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 12);
  *(unsigned char *)(this + 12) = *((unsigned char *)a2 + 12);
  *((unsigned char *)a2 + 12) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 13);
  *(unsigned char *)(this + 13) = *((unsigned char *)a2 + 13);
  *((unsigned char *)a2 + 13) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::VehicularFlagsData::VehicularFlagsData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270645888;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(unsigned char *)(result + 15) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(result + 14) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(result + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(result + 13) = *(unsigned char *)(a2 + 13);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = &unk_270645888;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(unsigned char *)(result + 15) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(result + 14) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(result + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(result + 13) = *(unsigned char *)(a2 + 13);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::VehicularFlagsData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v10 = &unk_270645888;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    char v4 = *(unsigned char *)(a2 + 16);
    int v14 = *(_DWORD *)(a1 + 20);
    char v13 = *(unsigned char *)(a1 + 16);
    int v5 = *(_DWORD *)(a2 + 8);
    int v6 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 20) = v3;
    *(unsigned char *)(a1 + 16) = v4;
    int v8 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 12) = v6;
    int v11 = v8;
    int v12 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::VehicularFlagsData::formatText(CMMsl::VehicularFlagsData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "basebandHint");
    char v5 = *((unsigned char *)this + 20);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 20) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "btHint");
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "gpsHint");
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "motionHint");
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "vehicularData");
  if ((*((unsigned char *)this + 20) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "wifiHint");
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::VehicularFlagsData::readFrom(CMMsl::VehicularFlagsData *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v3 > v2) {
        unint64_t v2 = v3;
      }
      do
      {
        if (v2 == v3)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v3 + 1;
        char v18 = *(unsigned char *)(v8 + v3);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_24;
        }
        v15 += 7;
        unint64_t v3 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v3 = *((void *)a2 + 1);
      unint64_t v2 = *((void *)a2 + 2);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v3 + 1;
      *((void *)a2 + 1) = v3 + 1;
      char v13 = *(unsigned char *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v3 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_24:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 20) |= 0x10u;
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        if (v3 >= v2)
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v3++);
          *((void *)a2 + 1) = v3;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 15) = v21;
        break;
      case 2u:
        *((unsigned char *)this + 20) |= 8u;
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        if (v3 >= v2)
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v3++);
          *((void *)a2 + 1) = v3;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 14) = v23;
        break;
      case 3u:
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        if (v3 >= v2)
        {
          BOOL v25 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v24 = *(unsigned __int8 *)(*(void *)a2 + v3++);
          *((void *)a2 + 1) = v3;
          BOOL v25 = v24 != 0;
        }
        *((unsigned char *)this + 12) = v25;
        break;
      case 4u:
        *((unsigned char *)this + 20) |= 0x20u;
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        if (v3 >= v2)
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v3++);
          *((void *)a2 + 1) = v3;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 16) = v27;
        break;
      case 5u:
        *((unsigned char *)this + 20) |= 4u;
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        if (v3 >= v2)
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v3++);
          *((void *)a2 + 1) = v3;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 13) = v29;
        break;
      case 6u:
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v34 = 0;
          if (v2 <= v30) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v30)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_65;
            }
            unint64_t v38 = v30++;
            char v39 = *(unsigned char *)(v31 + v38);
            *((void *)a2 + 1) = v30;
            v34 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v34) = 0;
LABEL_64:
              unint64_t v3 = v38 + 1;
              goto LABEL_65;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v34) = 0;
          }
          goto LABEL_64;
        }
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        do
        {
          unint64_t v3 = v30 + 1;
          *((void *)a2 + 1) = v30 + 1;
          char v35 = *(unsigned char *)(v31 + v30);
          v34 |= (unint64_t)(v35 & 0x7F) << v32;
          if ((v35 & 0x80) == 0) {
            goto LABEL_65;
          }
          v32 += 7;
          unint64_t v30 = v3;
          BOOL v14 = v33++ > 8;
        }
        while (!v14);
        LODWORD(v34) = 0;
LABEL_65:
        *((_DWORD *)this + 2) = v34;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::VehicularFlagsData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2);
    char v4 = *(unsigned char *)(v3 + 20);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 20) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 20);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 20) & 1) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 20);
  if ((v4 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_13:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::VehicularFlagsData::hash_value(CMMsl::VehicularFlagsData *this)
{
  if ((*((unsigned char *)this + 20) & 0x10) != 0)
  {
    uint64_t v1 = *((unsigned __int8 *)this + 15);
    if ((*((unsigned char *)this + 20) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 14);
      if ((*((unsigned char *)this + 20) & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 20) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 20) & 2) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned __int8 *)this + 12);
    if ((*((unsigned char *)this + 20) & 0x20) != 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 20) & 0x20) != 0)
  {
LABEL_5:
    uint64_t v4 = *((unsigned __int8 *)this + 16);
    if ((*((unsigned char *)this + 20) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v5 = 0;
    if (*((unsigned char *)this + 20)) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v6 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_11:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 20) & 4) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v5 = *((unsigned __int8 *)this + 13);
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v6 = *((unsigned int *)this + 2);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6;
}

void CMMsl::VelocityEstimatorFusionState::~VelocityEstimatorFusionState(CMMsl::VelocityEstimatorFusionState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState(CMMsl::VelocityEstimatorFusionState *this, const CMMsl::VelocityEstimatorFusionState *a2)
{
  *(void *)this = &unk_2706458C0;
  *((_DWORD *)this + 15) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 30) = 1;
    *((double *)this + 1) = result;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 30) & 0x100) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 12);
    v3 |= 0x100u;
    *((_WORD *)this + 30) = v3;
    *((_DWORD *)this + 12) = LODWORD(result);
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 13);
    v3 |= 0x200u;
    *((_WORD *)this + 30) = v3;
    *((_DWORD *)this + 13) = LODWORD(result);
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x400u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  LODWORD(result) = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 9) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 10) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v5 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 6) = v5;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v6 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 7) = v6;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_24:
    double result = *((double *)a2 + 2);
    *((_WORD *)this + 30) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_23:
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 8) = v7;
  if ((*((_WORD *)a2 + 30) & 2) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::VelocityEstimatorFusionState::operator=(CMMsl *a1, const CMMsl::VelocityEstimatorFusionState *a2)
{
  if (a1 != a2)
  {
    CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState((CMMsl::VelocityEstimatorFusionState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VelocityEstimatorFusionState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VelocityEstimatorFusionState *a2, CMMsl::VelocityEstimatorFusionState *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706458C0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::VelocityEstimatorFusionState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VelocityEstimatorFusionState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::VelocityEstimatorFusionState::formatText(CMMsl::VelocityEstimatorFusionState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "sourceX");
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sourceY");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "sourceZ");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "velocityUncX", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "velocityUncY", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "velocityUncZ", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "velocityX", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "velocityY", *((float *)this + 13));
  if ((*((_WORD *)this + 30) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "velocityZ", *((float *)this + 14));
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::VelocityEstimatorFusionState::readFrom(CMMsl::VelocityEstimatorFusionState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_108;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 30) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 2u:
        *((_WORD *)this + 30) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_44;
      case 3u:
        *((_WORD *)this + 30) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_44;
      case 4u:
        *((_WORD *)this + 30) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_44;
      case 5u:
        *((_WORD *)this + 30) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_44;
      case 6u:
        *((_WORD *)this + 30) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_44;
      case 7u:
        *((_WORD *)this + 30) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_44:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_92;
      case 8u:
        *((_WORD *)this + 30) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_97;
            }
            unint64_t v40 = v20++;
            char v41 = *(unsigned char *)(v21 + v40);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_96:
              unint64_t v2 = v40 + 1;
              goto LABEL_97;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_96;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_97;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_97:
        *((_DWORD *)this + 6) = v24;
        break;
      case 9u:
        *((_WORD *)this + 30) |= 8u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_102;
            }
            unint64_t v44 = v26++;
            char v45 = *(unsigned char *)(v27 + v44);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            BOOL v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_101:
              unint64_t v2 = v44 + 1;
              goto LABEL_102;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_101;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_102;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_102:
        *((_DWORD *)this + 7) = v30;
        break;
      case 0xAu:
        *((_WORD *)this + 30) |= 0x10u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_107;
            }
            unint64_t v48 = v32++;
            char v49 = *(unsigned char *)(v33 + v48);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v46 += 7;
            BOOL v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_106:
              unint64_t v2 = v48 + 1;
              goto LABEL_107;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_106;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_107;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_107:
        *((_DWORD *)this + 8) = v36;
        break;
      case 0xBu:
        *((_WORD *)this + 30) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_91:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_92:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_68:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_108:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::VelocityEstimatorFusionState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(this + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 60) & 2) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::VelocityEstimatorFusionState::hash_value(CMMsl::VelocityEstimatorFusionState *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_3;
    }
LABEL_30:
    uint64_t v4 = 0;
    if ((*((_WORD *)this + 30) & 0x200) != 0) {
      goto LABEL_6;
    }
LABEL_31:
    uint64_t v6 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0) {
      goto LABEL_9;
    }
LABEL_32:
    uint64_t v8 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_12;
    }
LABEL_33:
    uint64_t v10 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_34:
    uint64_t v12 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_18;
    }
LABEL_35:
    uint64_t v14 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_21;
    }
    goto LABEL_36;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((_WORD *)this + 30) & 0x100) == 0) {
    goto LABEL_30;
  }
LABEL_3:
  float v3 = *((float *)this + 12);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x200) == 0) {
    goto LABEL_31;
  }
LABEL_6:
  float v5 = *((float *)this + 13);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x400) == 0) {
    goto LABEL_32;
  }
LABEL_9:
  float v7 = *((float *)this + 14);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_33;
  }
LABEL_12:
  float v9 = *((float *)this + 9);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_34;
  }
LABEL_15:
  float v11 = *((float *)this + 10);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_35;
  }
LABEL_18:
  float v13 = *((float *)this + 11);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_21:
    uint64_t v15 = *((unsigned int *)this + 6);
    if ((v1 & 8) != 0) {
      goto LABEL_22;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v15 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_22:
    uint64_t v16 = *((unsigned int *)this + 7);
    if ((v1 & 0x10) != 0) {
      goto LABEL_23;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v16 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_23:
    uint64_t v17 = *((unsigned int *)this + 8);
    if ((v1 & 2) != 0) {
      goto LABEL_24;
    }
LABEL_39:
    double v18 = 0.0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(void *)&v18;
  }
LABEL_38:
  uint64_t v17 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_39;
  }
LABEL_24:
  double v18 = *((double *)this + 2);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(void *)&v18;
}

void CMMsl::VibrationEvent::~VibrationEvent(CMMsl::VibrationEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::VibrationEvent::VibrationEvent(uint64_t this, const CMMsl::VibrationEvent *a2)
{
  *(void *)this = &unk_2706458F8;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::VibrationEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    float v7 = &unk_2706458F8;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void *v7;
  char v8;
  int v9;

  if (a1 != a2)
  {
    float v7 = &unk_2706458F8;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::VibrationEvent *a2, CMMsl::VibrationEvent *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::VibrationEvent::formatText(CMMsl::VibrationEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "isDeviceVibrating");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::VibrationEvent::readFrom(CMMsl::VibrationEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v20 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v19 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v20 = v19 != 0;
        }
        *((unsigned char *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VibrationEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2);
  }
  return this;
}

uint64_t CMMsl::VibrationEvent::hash_value(CMMsl::VibrationEvent *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

void CMMsl::ViewObstructedMachineLearningDecision::~ViewObstructedMachineLearningDecision(CMMsl::ViewObstructedMachineLearningDecision *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision(uint64_t this, const CMMsl::ViewObstructedMachineLearningDecision *a2)
{
  *(void *)this = &unk_270645930;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::operator=(uint64_t a1, const CMMsl::ViewObstructedMachineLearningDecision *a2)
{
  if ((const CMMsl::ViewObstructedMachineLearningDecision *)a1 != a2)
  {
    CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ViewObstructedMachineLearningDecision *a2, CMMsl::ViewObstructedMachineLearningDecision *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270645930;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = &unk_270645930;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[0] = &unk_270645930;
    v9[1] = v7;
    LOBYTE(v7) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::formatText(CMMsl::ViewObstructedMachineLearningDecision *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "shouldSuppress");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::readFrom(CMMsl::ViewObstructedMachineLearningDecision *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 16) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              uint64_t v23 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_48;
            }
            unint64_t v30 = v19++;
            char v31 = *(unsigned char *)(v20 + v30);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_47;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v23 = 0;
          }
LABEL_47:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              break;
            }
          }
        }
LABEL_48:
        *((void *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::hash_value(CMMsl::ViewObstructedMachineLearningDecision *this)
{
  if (*((unsigned char *)this + 20))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ v1;
}

void CMMsl::ViewObstructedMachineLearningFeatures::~ViewObstructedMachineLearningFeatures(CMMsl::ViewObstructedMachineLearningFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures(CMMsl::ViewObstructedMachineLearningFeatures *this, const CMMsl::ViewObstructedMachineLearningFeatures *a2)
{
  *(void *)this = &unk_270645968;
  *((_DWORD *)this + 29) = 0;
  int v2 = *((_DWORD *)a2 + 29);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 29) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 17);
    v3 |= 0x4000u;
    *((_DWORD *)this + 29) = v3;
    *((float *)this + 17) = result;
    int v2 = *((_DWORD *)a2 + 29);
  }
LABEL_6:
  if ((v2 & 0x8000) != 0)
  {
    float result = *((float *)a2 + 18);
    v3 |= 0x8000u;
    *((_DWORD *)this + 29) = v3;
    *((float *)this + 18) = result;
    int v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  float result = *((float *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 12) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  float result = *((float *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  float result = *((float *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  float result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  float result = *((float *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  float result = *((float *)a2 + 28);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 28) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  float result = *((float *)a2 + 21);
  v3 |= 0x40000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  float result = *((float *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  float result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 8) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  float result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  float result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  float result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  float result = *((float *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 9) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  float result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }
LABEL_47:
  float result = *((float *)a2 + 22);
  v3 |= 0x80000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 22) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100000) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }
LABEL_48:
  float result = *((float *)a2 + 23);
  v3 |= 0x100000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 23) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  float result = *((float *)a2 + 24);
  v3 |= 0x200000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 24) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  float result = *((float *)a2 + 25);
  v3 |= 0x400000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 25) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }
LABEL_51:
  float result = *((float *)a2 + 26);
  v3 |= 0x800000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 26) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
LABEL_52:
  float result = *((float *)a2 + 27);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 27) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_54:
    float result = *((float *)a2 + 4);
    *((_DWORD *)this + 29) = v3 | 2;
    *((float *)this + 4) = result;
    return result;
  }
LABEL_53:
  float result = *((float *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 11) = result;
  if ((*((_DWORD *)a2 + 29) & 2) != 0) {
    goto LABEL_54;
  }
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningFeatures::operator=(CMMsl *a1, const CMMsl::ViewObstructedMachineLearningFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures((CMMsl::ViewObstructedMachineLearningFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ViewObstructedMachineLearningFeatures *a2, CMMsl::ViewObstructedMachineLearningFeatures *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v5;
  int v6 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  int v7 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v7;
  int v8 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  int v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  int v10 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  int v11 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v11;
  int v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  int v13 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v13;
  int v14 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v14;
  int v15 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v15;
  int v16 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v16;
  int v17 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v17;
  int v18 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v18;
  int v19 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v19;
  int v20 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v20;
  int v21 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v21;
  int v22 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v22;
  int v23 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v23;
  int v24 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v24;
  int v25 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v25;
  int v26 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v26;
  int v27 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v27;
  int v28 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v28;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645968;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::formatText(CMMsl::ViewObstructedMachineLearningFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "absMeanGravX", *((float *)this + 4));
    int v5 = *((_DWORD *)this + 29);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelFFTBin1", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "accelFFTBin2", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "accelFFTBin3", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "accelFFTBin4", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "accelFFTBin5", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "accelFFTBin6", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "accelFFTBinDotPressureFFTBin", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "fFTBin1", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "fFTBin2", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "fFTBin3", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "fFTBin4", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "fFTBin5", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "meanGravX", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "meanGravY", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "meanGravZ", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "medianLux", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "medianPocketProbability", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "pressureFFTBin1", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "pressureFFTBin2", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "pressureFFTBin3", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "pressureFFTBin4", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "pressureFFTBin5", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "pressureFFTBin6", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "stdPressure", *((float *)this + 28));
  if (*((_DWORD *)this + 29)) {
LABEL_27:
  }
    PB::TextFormatter::format(a2, "timestamp");
LABEL_28:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::readFrom(CMMsl::ViewObstructedMachineLearningFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_114;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 29) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_123;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_122:
              unint64_t v2 = v28 + 1;
              goto LABEL_123;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_122;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_123;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_123:
        *((void *)this + 1) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 29) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 3u:
        *((_DWORD *)this + 29) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 4u:
        *((_DWORD *)this + 29) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 5u:
        *((_DWORD *)this + 29) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 6u:
        *((_DWORD *)this + 29) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 7u:
        *((_DWORD *)this + 29) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 8u:
        *((_DWORD *)this + 29) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 9u:
        *((_DWORD *)this + 29) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0xAu:
        *((_DWORD *)this + 29) |= 0x2000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0xBu:
        *((_DWORD *)this + 29) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0xCu:
        *((_DWORD *)this + 29) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0xDu:
        *((_DWORD *)this + 29) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0xEu:
        *((_DWORD *)this + 29) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0xFu:
        *((_DWORD *)this + 29) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0x10u:
        *((_DWORD *)this + 29) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0x11u:
        *((_DWORD *)this + 29) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0x12u:
        *((_DWORD *)this + 29) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0x13u:
        *((_DWORD *)this + 29) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0x14u:
        *((_DWORD *)this + 29) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0x15u:
        *((_DWORD *)this + 29) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0x16u:
        *((_DWORD *)this + 29) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0x17u:
        *((_DWORD *)this + 29) |= 0x800000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0x18u:
        *((_DWORD *)this + 29) |= 0x1000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0x19u:
        *((_DWORD *)this + 29) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_104;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_113;
      case 0x1Au:
        *((_DWORD *)this + 29) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_113:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_104:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_114:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 116);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x8000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    this = PB::Writer::write(a2, *(float *)(v3 + 44));
    if ((*(_DWORD *)(v3 + 116) & 2) == 0) {
      return this;
    }
    goto LABEL_53;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_53:
  float v5 = *(float *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::hash_value(CMMsl::ViewObstructedMachineLearningFeatures *this)
{
  int v1 = *((_DWORD *)this + 29);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_3;
    }
LABEL_79:
    uint64_t v4 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_6;
    }
LABEL_80:
    uint64_t v6 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_9;
    }
LABEL_81:
    uint64_t v8 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_82:
    uint64_t v10 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_15;
    }
LABEL_83:
    uint64_t v12 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_18;
    }
LABEL_84:
    uint64_t v14 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_21;
    }
LABEL_85:
    uint64_t v16 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_24;
    }
LABEL_86:
    uint64_t v18 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_27;
    }
LABEL_87:
    uint64_t v20 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_30;
    }
LABEL_88:
    uint64_t v22 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_33;
    }
LABEL_89:
    uint64_t v24 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_36;
    }
LABEL_90:
    uint64_t v26 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_39;
    }
LABEL_91:
    uint64_t v28 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_42;
    }
LABEL_92:
    uint64_t v30 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_45;
    }
LABEL_93:
    uint64_t v32 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_48;
    }
LABEL_94:
    uint64_t v34 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_51;
    }
LABEL_95:
    uint64_t v36 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_54;
    }
LABEL_96:
    uint64_t v38 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_57;
    }
LABEL_97:
    uint64_t v40 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_60;
    }
LABEL_98:
    uint64_t v42 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_63;
    }
LABEL_99:
    uint64_t v44 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_66;
    }
LABEL_100:
    uint64_t v46 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_69;
    }
LABEL_101:
    uint64_t v48 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_72;
    }
    goto LABEL_102;
  }
  uint64_t v2 = *((void *)this + 1);
  if ((v1 & 0x4000) == 0) {
    goto LABEL_79;
  }
LABEL_3:
  float v3 = *((float *)this + 17);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_80;
  }
LABEL_6:
  float v5 = *((float *)this + 18);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_81;
  }
LABEL_9:
  float v7 = *((float *)this + 19);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_82;
  }
LABEL_12:
  float v9 = *((float *)this + 12);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_83;
  }
LABEL_15:
  float v11 = *((float *)this + 13);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_84;
  }
LABEL_18:
  float v13 = *((float *)this + 14);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_85;
  }
LABEL_21:
  float v15 = *((float *)this + 15);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_86;
  }
LABEL_24:
  float v17 = *((float *)this + 16);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_87;
  }
LABEL_27:
  float v19 = *((float *)this + 28);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_88;
  }
LABEL_30:
  float v21 = *((float *)this + 21);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_89;
  }
LABEL_33:
  float v23 = *((float *)this + 20);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_90;
  }
LABEL_36:
  float v25 = *((float *)this + 5);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_91;
  }
LABEL_39:
  float v27 = *((float *)this + 6);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_92;
  }
LABEL_42:
  float v29 = *((float *)this + 7);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_93;
  }
LABEL_45:
  float v31 = *((float *)this + 8);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_94;
  }
LABEL_48:
  float v33 = *((float *)this + 9);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_95;
  }
LABEL_51:
  float v35 = *((float *)this + 10);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_96;
  }
LABEL_54:
  float v37 = *((float *)this + 22);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_97;
  }
LABEL_57:
  float v39 = *((float *)this + 23);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_98;
  }
LABEL_60:
  float v41 = *((float *)this + 24);
  uint64_t v42 = LODWORD(v41);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_99;
  }
LABEL_63:
  float v43 = *((float *)this + 25);
  uint64_t v44 = LODWORD(v43);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_100;
  }
LABEL_66:
  float v45 = *((float *)this + 26);
  uint64_t v46 = LODWORD(v45);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_101;
  }
LABEL_69:
  float v47 = *((float *)this + 27);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_72:
    float v49 = *((float *)this + 11);
    uint64_t v50 = LODWORD(v49);
    if (v49 == 0.0) {
      uint64_t v50 = 0;
    }
    if ((v1 & 2) != 0) {
      goto LABEL_75;
    }
LABEL_103:
    uint64_t v52 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
  }
LABEL_102:
  uint64_t v50 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_103;
  }
LABEL_75:
  float v51 = *((float *)this + 4);
  uint64_t v52 = LODWORD(v51);
  if (v51 == 0.0) {
    uint64_t v52 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
}

void CMMsl::ViewObstructedMachineLearningProbabilities::~ViewObstructedMachineLearningProbabilities(CMMsl::ViewObstructedMachineLearningProbabilities *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities(CMMsl::ViewObstructedMachineLearningProbabilities *this, const CMMsl::ViewObstructedMachineLearningProbabilities *a2)
{
  *(void *)this = &unk_2706459A0;
  *((_DWORD *)this + 16) = 0;
  __int16 v2 = *((_WORD *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 32) = 1;
    *((void *)this + 1) = v4;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 5);
    v3 |= 4u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 5) = result;
    __int16 v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    float result = *((float *)a2 + 7);
    v3 |= 0x10u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 7) = result;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  float result = *((float *)a2 + 9);
  v3 |= 0x40u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  float result = *((float *)a2 + 13);
  v3 |= 0x400u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 13) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  float result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 15) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  float result = *((float *)a2 + 12);
  v3 |= 0x200u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 12) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  float result = *((float *)a2 + 4);
  v3 |= 2u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  float result = *((float *)a2 + 14);
  v3 |= 0x800u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 14) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  float result = *((float *)a2 + 11);
  v3 |= 0x100u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 11) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_28:
    float result = *((float *)a2 + 10);
    *((_WORD *)this + 32) = v3 | 0x80;
    *((float *)this + 10) = result;
    return result;
  }
LABEL_27:
  float result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 6) = result;
  if ((*((_WORD *)a2 + 32) & 0x80) != 0) {
    goto LABEL_28;
  }
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningProbabilities::operator=(CMMsl *a1, const CMMsl::ViewObstructedMachineLearningProbabilities *a2)
{
  if (a1 != a2)
  {
    CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities((CMMsl::ViewObstructedMachineLearningProbabilities *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningProbabilities *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ViewObstructedMachineLearningProbabilities *a2, CMMsl::ViewObstructedMachineLearningProbabilities *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  int v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  int v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  int v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  int v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  int v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  int v13 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v13;
  int v14 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v14;
  int v15 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v15;
  float result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  return result;
}

float CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706459A0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningProbabilities::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningProbabilities *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::formatText(CMMsl::ViewObstructedMachineLearningProbabilities *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "bagObstructed", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "closeCoveredBagObstructed", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "closeCoveredObstructed", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "closeCoveredPocketObstructed", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "inHandObstructed", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "looseCoveredBagObstructed", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "looseCoveredObstructed", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "looseCoveredPocketObstructed", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "obstructed", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "otherObstructed", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "pocketObstructed", *((float *)this + 14));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "timestamp");
  if ((*((_WORD *)this + 32) & 0x1000) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "visible", *((float *)this + 15));
LABEL_15:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::readFrom(CMMsl::ViewObstructedMachineLearningProbabilities *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_80;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 32) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_79;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_78:
              unint64_t v2 = v28 + 1;
              goto LABEL_79;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_78;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_79;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_79:
        *((void *)this + 1) = v24;
        break;
      case 2u:
        *((_WORD *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_74;
      case 3u:
        *((_WORD *)this + 32) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_74;
      case 4u:
        *((_WORD *)this + 32) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_74;
      case 5u:
        *((_WORD *)this + 32) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_74;
      case 6u:
        *((_WORD *)this + 32) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_74;
      case 7u:
        *((_WORD *)this + 32) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_74;
      case 8u:
        *((_WORD *)this + 32) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_74;
      case 9u:
        *((_WORD *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_74;
      case 0xAu:
        *((_WORD *)this + 32) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_74;
      case 0xBu:
        *((_WORD *)this + 32) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_74;
      case 0xCu:
        *((_WORD *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_74;
      case 0xDu:
        *((_WORD *)this + 32) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_74:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_65:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_80:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 64);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = PB::Writer::write(a2, *(float *)(v3 + 24));
    if ((*(_WORD *)(v3 + 64) & 0x80) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_27:
  float v5 = *(float *)(v3 + 40);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::hash_value(CMMsl::ViewObstructedMachineLearningProbabilities *this)
{
  __int16 v1 = *((_WORD *)this + 32);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_3;
    }
LABEL_40:
    uint64_t v4 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_41:
    uint64_t v6 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_42:
    uint64_t v8 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_43:
    uint64_t v10 = 0;
    if ((*((_WORD *)this + 32) & 0x400) != 0) {
      goto LABEL_15;
    }
LABEL_44:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 32) & 0x1000) != 0) {
      goto LABEL_18;
    }
LABEL_45:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0) {
      goto LABEL_21;
    }
LABEL_46:
    uint64_t v16 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_24;
    }
LABEL_47:
    uint64_t v18 = 0;
    if ((*((_WORD *)this + 32) & 0x800) != 0) {
      goto LABEL_27;
    }
LABEL_48:
    uint64_t v20 = 0;
    if ((*((_WORD *)this + 32) & 0x100) != 0) {
      goto LABEL_30;
    }
LABEL_49:
    uint64_t v22 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_33;
    }
    goto LABEL_50;
  }
  uint64_t v2 = *((void *)this + 1);
  if ((v1 & 4) == 0) {
    goto LABEL_40;
  }
LABEL_3:
  float v3 = *((float *)this + 5);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_41;
  }
LABEL_6:
  float v5 = *((float *)this + 7);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_42;
  }
LABEL_9:
  float v7 = *((float *)this + 8);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_43;
  }
LABEL_12:
  float v9 = *((float *)this + 9);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x400) == 0) {
    goto LABEL_44;
  }
LABEL_15:
  float v11 = *((float *)this + 13);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x1000) == 0) {
    goto LABEL_45;
  }
LABEL_18:
  float v13 = *((float *)this + 15);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x200) == 0) {
    goto LABEL_46;
  }
LABEL_21:
  float v15 = *((float *)this + 12);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_47;
  }
LABEL_24:
  float v17 = *((float *)this + 4);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x800) == 0) {
    goto LABEL_48;
  }
LABEL_27:
  float v19 = *((float *)this + 14);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x100) == 0) {
    goto LABEL_49;
  }
LABEL_30:
  float v21 = *((float *)this + 11);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 8) != 0)
  {
LABEL_33:
    float v23 = *((float *)this + 6);
    uint64_t v24 = LODWORD(v23);
    if (v23 == 0.0) {
      uint64_t v24 = 0;
    }
    if ((v1 & 0x80) != 0) {
      goto LABEL_36;
    }
LABEL_51:
    uint64_t v26 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26;
  }
LABEL_50:
  uint64_t v24 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_51;
  }
LABEL_36:
  float v25 = *((float *)this + 10);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26;
}

void CMMsl::ViewObstructedState::~ViewObstructedState(CMMsl::ViewObstructedState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::ViewObstructedState::ViewObstructedState(uint64_t this, const CMMsl::ViewObstructedState *a2)
{
  *(void *)this = &unk_2706459D8;
  *(_DWORD *)(this + 84) = 0;
  int v2 = *((_DWORD *)a2 + 21);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *(_DWORD *)(this + 84) = 1;
    *(void *)(this + 8) = v4;
    int v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 80);
    v3 |= 0x20000u;
    *(_DWORD *)(this + 84) = v3;
    *(unsigned char *)(this + 80) = v5;
    int v2 = *((_DWORD *)a2 + 21);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_DWORD *)(this + 84) = v3;
    *(_DWORD *)(this + 20) = v6;
    int v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 64) = v7;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v8 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 60) = v8;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v9 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 48) = v9;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v10 = *((_DWORD *)a2 + 19);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 76) = v10;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v11 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 52) = v11;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v12 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 56) = v12;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 36) = v13;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v14 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 40) = v14;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v15 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 24) = v15;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v16 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 28) = v16;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v17 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 32) = v17;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v18 = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 68) = v18;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v19 = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 72) = v19;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v20 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 44) = v20;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 2) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0) {
      return this;
    }
LABEL_40:
    char v22 = *((unsigned char *)a2 + 81);
    *(_DWORD *)(this + 84) = v3 | 0x40000;
    *(unsigned char *)(this + 81) = v22;
    return this;
  }
LABEL_39:
  int v21 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 16) = v21;
  if ((*((_DWORD *)a2 + 21) & 0x40000) != 0) {
    goto LABEL_40;
  }
  return this;
}

CMMsl *CMMsl::ViewObstructedState::operator=(CMMsl *a1, const CMMsl::ViewObstructedState *a2)
{
  if (a1 != a2)
  {
    CMMsl::ViewObstructedState::ViewObstructedState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ViewObstructedState *a2, CMMsl::ViewObstructedState *a3)
{
  int v3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 80);
  *((unsigned char *)this + 80) = *((unsigned char *)a2 + 80);
  *((unsigned char *)a2 + 80) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  int v6 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  int v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  int v8 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  int v9 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v9;
  int v10 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v10;
  int v11 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v11;
  int v12 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v12;
  int v13 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v13;
  int v14 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v14;
  int v15 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v15;
  float result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 81);
  *((unsigned char *)this + 81) = *((unsigned char *)a2 + 81);
  *((unsigned char *)a2 + 81) = v4;
  return result;
}

float CMMsl::ViewObstructedState::ViewObstructedState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706459D8;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  float result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return result;
}

CMMsl *CMMsl::ViewObstructedState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ViewObstructedState::ViewObstructedState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ViewObstructedState::formatText(CMMsl::ViewObstructedState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "currentEventTag");
    int v5 = *((_DWORD *)this + 21);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "currentState");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "filteredGravityX", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "filteredGravityY", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "filteredGravityZ", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "gravityAngle", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "gravityShift", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "isMovingFiltered", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "lux", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "luxBaseline", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "luxShift", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "motionType");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "orientation");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "pocketProbEnter", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "pocketProbExit", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "pocketProbability", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "shouldSuppress");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "sufficientMotion");
  if (*((_DWORD *)this + 21)) {
LABEL_20:
  }
    PB::TextFormatter::format(a2, "timestamp");
LABEL_21:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ViewObstructedState::readFrom(CMMsl::ViewObstructedState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_164;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 21) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_143;
            }
            unint64_t v56 = v20++;
            char v57 = *(unsigned char *)(v21 + v56);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0) {
              break;
            }
            v54 += 7;
            BOOL v14 = v55++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_142:
              unint64_t v2 = v56 + 1;
              goto LABEL_143;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_142;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_143;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_143:
        *((void *)this + 1) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 21) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 80) = v27;
        break;
      case 3u:
        *((_DWORD *)this + 21) |= 4u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v29 = *(void *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v32 = 0;
          if (v2 <= v28) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_148;
            }
            unint64_t v60 = v28++;
            char v61 = *(unsigned char *)(v29 + v60);
            *((void *)a2 + 1) = v28;
            v32 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0) {
              break;
            }
            v58 += 7;
            BOOL v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
LABEL_147:
              unint64_t v2 = v60 + 1;
              goto LABEL_148;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v32) = 0;
          }
          goto LABEL_147;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        do
        {
          unint64_t v2 = v28 + 1;
          *((void *)a2 + 1) = v28 + 1;
          char v33 = *(unsigned char *)(v29 + v28);
          v32 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0) {
            goto LABEL_148;
          }
          v30 += 7;
          unint64_t v28 = v2;
          BOOL v14 = v31++ > 8;
        }
        while (!v14);
        LODWORD(v32) = 0;
LABEL_148:
        *((_DWORD *)this + 5) = v32;
        break;
      case 4u:
        *((_DWORD *)this + 21) |= 0x2000u;
        unint64_t v34 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v38 = 0;
          if (v2 <= v34) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_153;
            }
            unint64_t v64 = v34++;
            char v65 = *(unsigned char *)(v35 + v64);
            *((void *)a2 + 1) = v34;
            v38 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0) {
              break;
            }
            v62 += 7;
            BOOL v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_152:
              unint64_t v2 = v64 + 1;
              goto LABEL_153;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v38) = 0;
          }
          goto LABEL_152;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        do
        {
          unint64_t v2 = v34 + 1;
          *((void *)a2 + 1) = v34 + 1;
          char v39 = *(unsigned char *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0) {
            goto LABEL_153;
          }
          v36 += 7;
          unint64_t v34 = v2;
          BOOL v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_153:
        *((_DWORD *)this + 16) = v38;
        break;
      case 5u:
        *((_DWORD *)this + 21) |= 0x1000u;
        unint64_t v40 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v41 = *(void *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v44 = 0;
          if (v2 <= v40) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_158;
            }
            unint64_t v68 = v40++;
            char v69 = *(unsigned char *)(v41 + v68);
            *((void *)a2 + 1) = v40;
            v44 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0) {
              break;
            }
            v66 += 7;
            BOOL v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_157:
              unint64_t v2 = v68 + 1;
              goto LABEL_158;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v44) = 0;
          }
          goto LABEL_157;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        do
        {
          unint64_t v2 = v40 + 1;
          *((void *)a2 + 1) = v40 + 1;
          char v45 = *(unsigned char *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0) {
            goto LABEL_158;
          }
          v42 += 7;
          unint64_t v40 = v2;
          BOOL v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_158:
        *((_DWORD *)this + 15) = v44;
        break;
      case 6u:
        *((_DWORD *)this + 21) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_88;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_138;
      case 7u:
        *((_DWORD *)this + 21) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_88;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_138;
      case 8u:
        *((_DWORD *)this + 21) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_88;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_138;
      case 9u:
        *((_DWORD *)this + 21) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_88;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_138;
      case 0xAu:
        *((_DWORD *)this + 21) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_88;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_138;
      case 0xBu:
        *((_DWORD *)this + 21) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_88;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_138;
      case 0xCu:
        *((_DWORD *)this + 21) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_88;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_138;
      case 0xDu:
        *((_DWORD *)this + 21) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_88;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_138;
      case 0xEu:
        *((_DWORD *)this + 21) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_88;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_138;
      case 0xFu:
        *((_DWORD *)this + 21) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_88;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_138;
      case 0x10u:
        *((_DWORD *)this + 21) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_88;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_138;
      case 0x11u:
        *((_DWORD *)this + 21) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_138:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_88:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0x12u:
        *((_DWORD *)this + 21) |= 2u;
        unint64_t v46 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v47 = *(void *)a2;
        if (v46 > 0xFFFFFFFFFFFFFFF5 || v46 + 10 > v2)
        {
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v50 = 0;
          if (v2 <= v46) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v46)
            {
              LODWORD(v50) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_163;
            }
            unint64_t v72 = v46++;
            char v73 = *(unsigned char *)(v47 + v72);
            *((void *)a2 + 1) = v46;
            v50 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0) {
              break;
            }
            v70 += 7;
            BOOL v14 = v71++ > 8;
            if (v14)
            {
              LODWORD(v50) = 0;
LABEL_162:
              unint64_t v2 = v72 + 1;
              goto LABEL_163;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v50) = 0;
          }
          goto LABEL_162;
        }
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v50 = 0;
        do
        {
          unint64_t v2 = v46 + 1;
          *((void *)a2 + 1) = v46 + 1;
          char v51 = *(unsigned char *)(v47 + v46);
          v50 |= (unint64_t)(v51 & 0x7F) << v48;
          if ((v51 & 0x80) == 0) {
            goto LABEL_163;
          }
          v48 += 7;
          unint64_t v46 = v2;
          BOOL v14 = v49++ > 8;
        }
        while (!v14);
        LODWORD(v50) = 0;
LABEL_163:
        *((_DWORD *)this + 4) = v50;
        break;
      case 0x13u:
        *((_DWORD *)this + 21) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v53 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v52 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v53 = v52 != 0;
        }
        *((unsigned char *)this + 81) = v53;
        break;
      default:
        goto LABEL_19;
    }
LABEL_164:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 84);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    int v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 2) == 0) {
      goto LABEL_19;
    }
LABEL_38:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_DWORD *)(v3 + 84) & 0x40000) == 0) {
      return this;
    }
    goto LABEL_39;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) != 0) {
    goto LABEL_38;
  }
LABEL_19:
  if ((v4 & 0x40000) == 0) {
    return this;
  }
LABEL_39:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::ViewObstructedState::hash_value(CMMsl::ViewObstructedState *this)
{
  int v1 = *((_DWORD *)this + 21);
  if (v1)
  {
    uint64_t v2 = *((void *)this + 1);
    if ((v1 & 0x20000) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned __int8 *)this + 80);
      if ((v1 & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned int *)this + 5);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v4 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned int *)this + 16);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_6:
    uint64_t v6 = *((unsigned int *)this + 15);
    if ((v1 & 0x200) != 0) {
      goto LABEL_7;
    }
LABEL_50:
    uint64_t v8 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_10;
    }
LABEL_51:
    uint64_t v10 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_13;
    }
LABEL_52:
    uint64_t v12 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_16;
    }
LABEL_53:
    uint64_t v14 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_19;
    }
LABEL_54:
    uint64_t v16 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_22;
    }
LABEL_55:
    uint64_t v18 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_25;
    }
LABEL_56:
    uint64_t v20 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_28;
    }
LABEL_57:
    uint64_t v22 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_31;
    }
LABEL_58:
    uint64_t v24 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_34;
    }
LABEL_59:
    uint64_t v26 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_37;
    }
LABEL_60:
    uint64_t v28 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_40;
    }
LABEL_61:
    uint64_t v30 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_43;
    }
LABEL_62:
    uint64_t v31 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_44;
    }
LABEL_63:
    uint64_t v32 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32;
  }
LABEL_49:
  uint64_t v6 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_50;
  }
LABEL_7:
  float v7 = *((float *)this + 12);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_51;
  }
LABEL_10:
  float v9 = *((float *)this + 19);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_52;
  }
LABEL_13:
  float v11 = *((float *)this + 13);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_53;
  }
LABEL_16:
  float v13 = *((float *)this + 14);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_54;
  }
LABEL_19:
  float v15 = *((float *)this + 9);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_55;
  }
LABEL_22:
  float v17 = *((float *)this + 10);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_56;
  }
LABEL_25:
  float v19 = *((float *)this + 6);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_57;
  }
LABEL_28:
  float v21 = *((float *)this + 7);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_58;
  }
LABEL_31:
  float v23 = *((float *)this + 8);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_59;
  }
LABEL_34:
  float v25 = *((float *)this + 17);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_60;
  }
LABEL_37:
  float v27 = *((float *)this + 18);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_61;
  }
LABEL_40:
  float v29 = *((float *)this + 11);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_62;
  }
LABEL_43:
  uint64_t v31 = *((unsigned int *)this + 4);
  if ((v1 & 0x40000) == 0) {
    goto LABEL_63;
  }
LABEL_44:
  uint64_t v32 = *((unsigned __int8 *)this + 81);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32;
}

void CMMsl::VisionCompassBias::~VisionCompassBias(CMMsl::VisionCompassBias *this)
{
  *(void *)this = &unk_270645A10;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VisionCompassBias::~VisionCompassBias(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::VisionCompassBias *CMMsl::VisionCompassBias::VisionCompassBias(CMMsl::VisionCompassBias *this, const CMMsl::VisionCompassBias *a2)
{
  *(void *)this = &unk_270645A10;
  *((void *)this + 1) = 0;
  uint64_t v4 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 19) = 0;
  __int16 v5 = *((_WORD *)a2 + 38);
  if (v5)
  {
    uint64_t v7 = *((void *)a2 + 4);
    __int16 v6 = 1;
    *((_WORD *)this + 38) = 1;
    *((void *)this + 4) = v7;
    __int16 v5 = *((_WORD *)a2 + 38);
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = 0;
  if ((v5 & 2) != 0)
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 5);
    v6 |= 2u;
    *((_WORD *)this + 38) = v6;
    *((void *)this + 5) = v8;
    __int16 v5 = *((_WORD *)a2 + 38);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    int v13 = *((_DWORD *)a2 + 12);
    v6 |= 4u;
    *((_WORD *)this + 38) = v6;
    *((_DWORD *)this + 12) = v13;
    __int16 v5 = *((_WORD *)a2 + 38);
    if ((v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v5 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v14 = *((_DWORD *)a2 + 14);
  v6 |= 0x10u;
  *((_WORD *)this + 38) = v6;
  *((_DWORD *)this + 14) = v14;
  if ((*((_WORD *)a2 + 38) & 8) != 0)
  {
LABEL_9:
    int v9 = *((_DWORD *)a2 + 13);
    *((_WORD *)this + 38) = v6 | 8;
    *((_DWORD *)this + 13) = v9;
  }
LABEL_10:
  if (this != a2) {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v10 = *((_WORD *)a2 + 38);
  if ((v10 & 0x40) != 0)
  {
    int v15 = *((_DWORD *)a2 + 16);
    *((_WORD *)this + 38) |= 0x40u;
    *((_DWORD *)this + 16) = v15;
    __int16 v10 = *((_WORD *)a2 + 38);
    if ((v10 & 0x80) == 0)
    {
LABEL_14:
      if ((v10 & 0x100) == 0) {
        goto LABEL_15;
      }
LABEL_23:
      int v17 = *((_DWORD *)a2 + 18);
      *((_WORD *)this + 38) |= 0x100u;
      *((_DWORD *)this + 18) = v17;
      if ((*((_WORD *)a2 + 38) & 0x20) == 0) {
        return this;
      }
      goto LABEL_16;
    }
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_14;
  }
  int v16 = *((_DWORD *)a2 + 17);
  *((_WORD *)this + 38) |= 0x80u;
  *((_DWORD *)this + 17) = v16;
  __int16 v10 = *((_WORD *)a2 + 38);
  if ((v10 & 0x100) != 0) {
    goto LABEL_23;
  }
LABEL_15:
  if ((v10 & 0x20) != 0)
  {
LABEL_16:
    int v11 = *((_DWORD *)a2 + 15);
    *((_WORD *)this + 38) |= 0x20u;
    *((_DWORD *)this + 15) = v11;
  }
  return this;
}

CMMsl *CMMsl::VisionCompassBias::operator=(CMMsl *a1, const CMMsl::VisionCompassBias *a2)
{
  if (a1 != a2)
  {
    CMMsl::VisionCompassBias::VisionCompassBias((CMMsl::VisionCompassBias *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisionCompassBias *)v5, v3);
    CMMsl::VisionCompassBias::~VisionCompassBias((CMMsl::VisionCompassBias *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VisionCompassBias *a2, CMMsl::VisionCompassBias *a3)
{
  int v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  LODWORD(v5) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LODWORD(v5) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  float result = *((float *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((float *)a2 + 17) = result;
  LODWORD(v8) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v8;
  LODWORD(v8) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v8;
  return result;
}

uint64_t CMMsl::VisionCompassBias::VisionCompassBias(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645A10;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return a1;
}

CMMsl *CMMsl::VisionCompassBias::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VisionCompassBias::VisionCompassBias((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisionCompassBias *)v5, v3);
    CMMsl::VisionCompassBias::~VisionCompassBias((CMMsl::VisionCompassBias *)v5);
  }
  return a1;
}

uint64_t CMMsl::VisionCompassBias::formatText(CMMsl::VisionCompassBias *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "compassBias", *((float *)this + 12));
    __int16 v5 = *((_WORD *)this + 38);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "estimatedBiasUncertainty", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "estimatedHeading", *((float *)this + 14));
  if ((*((_WORD *)this + 38) & 0x20) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "globalReferenceFrame");
LABEL_6:
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "lslGlobalToDeviceFrameRotationMatrix", v8);
  }
  __int16 v9 = *((_WORD *)this + 38);
  if ((v9 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "lslHeadingAccuracy", *((float *)this + 16));
    __int16 v9 = *((_WORD *)this + 38);
    if ((v9 & 0x80) == 0)
    {
LABEL_10:
      if ((v9 & 1) == 0) {
        goto LABEL_11;
      }
      goto LABEL_23;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(a2, "lslHeadingConfidence", *((float *)this + 17));
  __int16 v9 = *((_WORD *)this + 38);
  if ((v9 & 1) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 4));
  __int16 v9 = *((_WORD *)this + 38);
  if ((v9 & 0x100) == 0)
  {
LABEL_12:
    if ((v9 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "roadID");
  if ((*((_WORD *)this + 38) & 2) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
LABEL_14:
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::VisionCompassBias::readFrom(CMMsl::VisionCompassBias *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 38) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((void *)a2 + 2)) {
          goto LABEL_125;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v19);
        goto LABEL_29;
      case 2u:
        *((_WORD *)this + 38) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
          goto LABEL_125;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v20);
LABEL_29:
        uint64_t v21 = *((void *)a2 + 1) + 8;
        goto LABEL_128;
      case 3u:
        *((_WORD *)this + 38) |= 4u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)a2 + 2)) {
          goto LABEL_125;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v22);
        goto LABEL_127;
      case 4u:
        *((_WORD *)this + 38) |= 0x10u;
        unint64_t v23 = *((void *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)a2 + 2)) {
          goto LABEL_125;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v23);
        goto LABEL_127;
      case 5u:
        *((_WORD *)this + 38) |= 8u;
        unint64_t v24 = *((void *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)a2 + 2)) {
          goto LABEL_125;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v24);
        goto LABEL_127;
      case 6u:
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v25 = *((void *)a2 + 1);
          unint64_t v26 = *((void *)a2 + 2);
          while (v25 < v26 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v28 = (char *)*((void *)this + 2);
            unint64_t v27 = *((void *)this + 3);
            if ((unint64_t)v28 >= v27)
            {
              uint64_t v30 = (char *)*((void *)this + 1);
              uint64_t v31 = (v28 - v30) >> 2;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62) {
                goto LABEL_138;
              }
              uint64_t v33 = v27 - (void)v30;
              if (v33 >> 1 > v32) {
                unint64_t v32 = v33 >> 1;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34)
              {
                unint64_t v34 = (unint64_t)sub_2572C76F0(v34);
                uint64_t v30 = (char *)*((void *)this + 1);
                uint64_t v28 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v35 = 0;
              }
              char v36 = (_DWORD *)(v34 + 4 * v31);
              *char v36 = 0;
              float v29 = v36 + 1;
              while (v28 != v30)
              {
                int v37 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *--char v36 = v37;
              }
              *((void *)this + 1) = v36;
              *((void *)this + 2) = v29;
              *((void *)this + 3) = v34 + 4 * v35;
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v28 = 0;
              float v29 = v28 + 4;
            }
            *((void *)this + 2) = v29;
            unint64_t v38 = *((void *)a2 + 1);
            if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v29 - 1) = *(_DWORD *)(*(void *)a2 + v38);
            unint64_t v26 = *((void *)a2 + 2);
            unint64_t v25 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v25;
          }
          PB::Reader::recallMark();
        }
        else
        {
          char v58 = (char *)*((void *)this + 2);
          unint64_t v57 = *((void *)this + 3);
          if ((unint64_t)v58 >= v57)
          {
            unint64_t v68 = (char *)*((void *)this + 1);
            uint64_t v69 = (v58 - v68) >> 2;
            unint64_t v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 62) {
LABEL_138:
            }
              sub_2570AFD0C();
            uint64_t v71 = v57 - (void)v68;
            if (v71 >> 1 > v70) {
              unint64_t v70 = v71 >> 1;
            }
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v72 = v70;
            }
            if (v72)
            {
              unint64_t v72 = (unint64_t)sub_2572C76F0(v72);
              unint64_t v68 = (char *)*((void *)this + 1);
              char v58 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v73 = 0;
            }
            unint64_t v74 = (_DWORD *)(v72 + 4 * v69);
            *unint64_t v74 = 0;
            unsigned int v59 = v74 + 1;
            while (v58 != v68)
            {
              int v75 = *((_DWORD *)v58 - 1);
              v58 -= 4;
              *--unint64_t v74 = v75;
            }
            *((void *)this + 1) = v74;
            *((void *)this + 2) = v59;
            *((void *)this + 3) = v72 + 4 * v73;
            if (v68) {
              operator delete(v68);
            }
          }
          else
          {
            *(_DWORD *)char v58 = 0;
            unsigned int v59 = v58 + 4;
          }
          *((void *)this + 2) = v59;
          unint64_t v76 = *((void *)a2 + 1);
          if (v76 <= 0xFFFFFFFFFFFFFFFBLL && v76 + 4 <= *((void *)a2 + 2))
          {
            *(v59 - 1) = *(_DWORD *)(*(void *)a2 + v76);
LABEL_127:
            uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_128:
            *((void *)a2 + 1) = v21;
          }
          else
          {
LABEL_125:
            *((unsigned char *)a2 + 24) = 1;
          }
        }
        break;
      case 7u:
        *((_WORD *)this + 38) |= 0x40u;
        unint64_t v39 = *((void *)a2 + 1);
        if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
          goto LABEL_125;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v39);
        goto LABEL_127;
      case 8u:
        *((_WORD *)this + 38) |= 0x80u;
        unint64_t v40 = *((void *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2)) {
          goto LABEL_125;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v40);
        goto LABEL_127;
      case 9u:
        *((_WORD *)this + 38) |= 0x100u;
        unint64_t v41 = *((void *)a2 + 1);
        unint64_t v42 = *((void *)a2 + 2);
        uint64_t v43 = *(void *)a2;
        if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v46 = 0;
          do
          {
            unint64_t v47 = v41 + 1;
            *((void *)a2 + 1) = v41 + 1;
            char v48 = *(unsigned char *)(v43 + v41);
            v46 |= (unint64_t)(v48 & 0x7F) << v44;
            if ((v48 & 0x80) == 0) {
              goto LABEL_111;
            }
            v44 += 7;
            unint64_t v41 = v47;
            BOOL v14 = v45++ > 8;
          }
          while (!v14);
LABEL_91:
          LODWORD(v46) = 0;
          goto LABEL_111;
        }
        char v60 = 0;
        unsigned int v61 = 0;
        uint64_t v46 = 0;
        if (v42 <= v41) {
          unint64_t v42 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v42 == v41)
          {
            LODWORD(v46) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v62 = v41 + 1;
            char v63 = *(unsigned char *)(v43 + v41);
            *((void *)a2 + 1) = v62;
            v46 |= (unint64_t)(v63 & 0x7F) << v60;
            if (v63 < 0)
            {
              v60 += 7;
              unint64_t v41 = v62;
              BOOL v14 = v61++ > 8;
              if (v14) {
                goto LABEL_91;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v46) = 0;
            }
          }
          break;
        }
LABEL_111:
        *((_DWORD *)this + 18) = v46;
        break;
      case 0xAu:
        *((_WORD *)this + 38) |= 0x20u;
        unint64_t v49 = *((void *)a2 + 1);
        unint64_t v50 = *((void *)a2 + 2);
        uint64_t v51 = *(void *)a2;
        if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v54 = 0;
          do
          {
            unint64_t v55 = v49 + 1;
            *((void *)a2 + 1) = v49 + 1;
            char v56 = *(unsigned char *)(v51 + v49);
            v54 |= (unint64_t)(v56 & 0x7F) << v52;
            if ((v56 & 0x80) == 0) {
              goto LABEL_114;
            }
            v52 += 7;
            unint64_t v49 = v55;
            BOOL v14 = v53++ > 8;
          }
          while (!v14);
LABEL_98:
          LODWORD(v54) = 0;
          goto LABEL_114;
        }
        char v64 = 0;
        unsigned int v65 = 0;
        uint64_t v54 = 0;
        if (v50 <= v49) {
          unint64_t v50 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v50 == v49)
          {
            LODWORD(v54) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v66 = v49 + 1;
            char v67 = *(unsigned char *)(v51 + v49);
            *((void *)a2 + 1) = v66;
            v54 |= (unint64_t)(v67 & 0x7F) << v64;
            if (v67 < 0)
            {
              v64 += 7;
              unint64_t v49 = v66;
              BOOL v14 = v65++ > 8;
              if (v14) {
                goto LABEL_98;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v54) = 0;
            }
          }
          break;
        }
LABEL_114:
        *((_DWORD *)this + 15) = v54;
        break;
      default:
        goto LABEL_19;
    }
LABEL_129:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_129;
  }
  return 0;
}

uint64_t CMMsl::VisionCompassBias::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 76);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(float *)(v3 + 56));
    if ((*(_WORD *)(v3 + 76) & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x10) != 0) {
    goto LABEL_18;
  }
LABEL_5:
  if ((v4 & 8) != 0) {
LABEL_6:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 52));
LABEL_7:
  __int16 v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  __int16 v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 64));
    __int16 v8 = *(_WORD *)(v3 + 76);
    if ((v8 & 0x80) == 0)
    {
LABEL_12:
      if ((v8 & 0x100) == 0) {
        goto LABEL_13;
      }
LABEL_22:
      this = PB::Writer::writeVarInt(a2);
      if ((*(_WORD *)(v3 + 76) & 0x20) == 0) {
        return this;
      }
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_12;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  __int16 v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x100) != 0) {
    goto LABEL_22;
  }
LABEL_13:
  if ((v8 & 0x20) == 0) {
    return this;
  }
LABEL_23:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::VisionCompassBias::hash_value(CMMsl::VisionCompassBias *this)
{
  __int16 v2 = *((_WORD *)this + 38);
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_22:
    uint64_t v4 = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_7;
    }
LABEL_23:
    uint64_t v6 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
  if (*((double *)this + 4) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 4);
  }
  if ((v2 & 2) == 0) {
    goto LABEL_22;
  }
LABEL_3:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *((void *)this + 5);
  }
  if ((v2 & 4) == 0) {
    goto LABEL_23;
  }
LABEL_7:
  float v5 = *((float *)this + 12);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = LODWORD(v5);
  }
  if ((v2 & 0x10) != 0)
  {
LABEL_11:
    float v7 = *((float *)this + 14);
    if (v7 == 0.0) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = LODWORD(v7);
    }
    if ((v2 & 8) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v10 = 0;
    goto LABEL_26;
  }
LABEL_24:
  uint64_t v8 = 0;
  if ((v2 & 8) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  float v9 = *((float *)this + 13);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = LODWORD(v9);
  }
LABEL_26:
  uint64_t v11 = PBHashBytes();
  __int16 v12 = *((_WORD *)this + 38);
  if ((v12 & 0x40) == 0)
  {
    uint64_t v13 = 0;
    if ((v12 & 0x80) != 0) {
      goto LABEL_28;
    }
LABEL_36:
    uint64_t v15 = 0;
    if ((*((_WORD *)this + 38) & 0x100) != 0) {
      goto LABEL_31;
    }
LABEL_37:
    uint64_t v16 = 0;
    if ((v12 & 0x20) != 0) {
      goto LABEL_32;
    }
LABEL_38:
    uint64_t v17 = 0;
    return v4 ^ v3 ^ v6 ^ v8 ^ v10 ^ v13 ^ v15 ^ v16 ^ v11 ^ v17;
  }
  float v18 = *((float *)this + 16);
  uint64_t v13 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v12 & 0x80) == 0) {
    goto LABEL_36;
  }
LABEL_28:
  float v14 = *((float *)this + 17);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((*((_WORD *)this + 38) & 0x100) == 0) {
    goto LABEL_37;
  }
LABEL_31:
  uint64_t v16 = *((unsigned int *)this + 18);
  if ((v12 & 0x20) == 0) {
    goto LABEL_38;
  }
LABEL_32:
  uint64_t v17 = *((unsigned int *)this + 15);
  return v4 ^ v3 ^ v6 ^ v8 ^ v10 ^ v13 ^ v15 ^ v16 ^ v11 ^ v17;
}

void CMMsl::VisualLocalization::~VisualLocalization(CMMsl::VisualLocalization *this)
{
  *(void *)this = &unk_270645A48;
  __int16 v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VisualLocalization::~VisualLocalization(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::VisualLocalization *CMMsl::VisualLocalization::VisualLocalization(CMMsl::VisualLocalization *this, const CMMsl::VisualLocalization *a2)
{
  *(void *)this = &unk_270645A48;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 25) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  char v5 = *((unsigned char *)a2 + 100);
  if ((v5 & 0x10) != 0)
  {
    uint64_t v7 = *((void *)a2 + 11);
    char v6 = 16;
    *((unsigned char *)this + 100) = 16;
    *((void *)this + 11) = v7;
    char v5 = *((unsigned char *)a2 + 100);
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if ((*((unsigned char *)a2 + 100) & 4) != 0)
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 9);
    v6 |= 4u;
    *((unsigned char *)this + 100) = v6;
    *((void *)this + 9) = v8;
    char v5 = *((unsigned char *)a2 + 100);
  }
LABEL_6:
  if ((v5 & 8) != 0)
  {
    uint64_t v12 = *((void *)a2 + 10);
    v6 |= 8u;
    *((unsigned char *)this + 100) = v6;
    *((void *)this + 10) = v12;
    char v5 = *((unsigned char *)a2 + 100);
    if ((v5 & 1) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v13 = *((void *)a2 + 7);
  v6 |= 1u;
  *((unsigned char *)this + 100) = v6;
  *((void *)this + 7) = v13;
  if ((*((unsigned char *)a2 + 100) & 2) != 0)
  {
LABEL_9:
    uint64_t v9 = *((void *)a2 + 8);
    *((unsigned char *)this + 100) = v6 | 2;
    *((void *)this + 8) = v9;
  }
LABEL_10:
  if (this != a2)
  {
    sub_2572C73EC((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if ((*((unsigned char *)a2 + 100) & 0x20) != 0)
  {
    int v10 = *((_DWORD *)a2 + 24);
    *((unsigned char *)this + 100) |= 0x20u;
    *((_DWORD *)this + 24) = v10;
  }
  return this;
}

CMMsl *CMMsl::VisualLocalization::operator=(CMMsl *a1, const CMMsl::VisualLocalization *a2)
{
  if (a1 != a2)
  {
    CMMsl::VisualLocalization::VisualLocalization((CMMsl::VisualLocalization *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualLocalization *)v5, v3);
    CMMsl::VisualLocalization::~VisualLocalization((CMMsl::VisualLocalization *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VisualLocalization *a2, CMMsl::VisualLocalization *a3)
{
  int v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v4;
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v5;
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v6;
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v12;
  uint64_t v13 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v13;
  uint64_t v14 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v14;
  float result = *((float *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((float *)a2 + 24) = result;
  return result;
}

uint64_t CMMsl::VisualLocalization::VisualLocalization(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645A48;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

CMMsl *CMMsl::VisualLocalization::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VisualLocalization::VisualLocalization((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualLocalization *)v5, v3);
    CMMsl::VisualLocalization::~VisualLocalization((CMMsl::VisualLocalization *)v5);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalization::formatText(CMMsl::VisualLocalization *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 100);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitudeOfLocalizedPoseInEcefCoordinate", *((double *)this + 7));
    char v5 = *((unsigned char *)this + 100);
  }
  if ((v5 & 0x20) != 0) {
    PB::TextFormatter::format(a2, "confidence", *((float *)this + 24));
  }
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "covariance", v8);
  }
  char v9 = *((unsigned char *)this + 100);
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "horizontalAccuracyOfLocalizedPoseInEcefCoordinate", *((double *)this + 8));
    char v9 = *((unsigned char *)this + 100);
    if ((v9 & 4) == 0)
    {
LABEL_9:
      if ((v9 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
  }
  else if ((*((unsigned char *)this + 100) & 4) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "latitudeOfLocalizedPoseInEcefCoordinate", *((double *)this + 9));
  char v9 = *((unsigned char *)this + 100);
  if ((v9 & 8) == 0)
  {
LABEL_10:
    if ((v9 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "longitudeOfLocalizedPoseInEcefCoordinate", *((double *)this + 10));
  if ((*((unsigned char *)this + 100) & 0x10) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 11));
LABEL_12:
  uint64_t v10 = (double *)*((void *)this + 4);
  uint64_t v11 = (double *)*((void *)this + 5);
  while (v10 != v11)
  {
    double v12 = *v10++;
    PB::TextFormatter::format(a2, "transformMatrixFromCameraToEcefCoordinate", v12);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::VisualLocalization::readFrom(CMMsl::VisualLocalization *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    int v19 = v11 & 7;
    if (v19 == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 100) |= 0x10u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v20);
        goto LABEL_120;
      case 2u:
        *((unsigned char *)this + 100) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v21);
        goto LABEL_120;
      case 3u:
        *((unsigned char *)this + 100) |= 8u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v22);
        goto LABEL_120;
      case 4u:
        *((unsigned char *)this + 100) |= 1u;
        unint64_t v23 = *((void *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v23);
        goto LABEL_120;
      case 5u:
        *((unsigned char *)this + 100) |= 2u;
        unint64_t v24 = *((void *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v24);
        goto LABEL_120;
      case 6u:
        if (v19 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v25 = *((void *)a2 + 1);
          unint64_t v26 = *((void *)a2 + 2);
          while (v25 < v26 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v28 = (char *)*((void *)this + 5);
            unint64_t v27 = *((void *)this + 6);
            if ((unint64_t)v28 >= v27)
            {
              uint64_t v30 = (char *)*((void *)this + 4);
              uint64_t v31 = (v28 - v30) >> 3;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61) {
                goto LABEL_140;
              }
              uint64_t v33 = v27 - (void)v30;
              if (v33 >> 2 > v32) {
                unint64_t v32 = v33 >> 2;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34)
              {
                unint64_t v34 = (unint64_t)sub_2572C7528(v34);
                uint64_t v30 = (char *)*((void *)this + 4);
                uint64_t v28 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v35 = 0;
              }
              char v36 = (void *)(v34 + 8 * v31);
              *char v36 = 0;
              float v29 = v36 + 1;
              while (v28 != v30)
              {
                uint64_t v37 = *((void *)v28 - 1);
                v28 -= 8;
                *--char v36 = v37;
              }
              *((void *)this + 4) = v36;
              *((void *)this + 5) = v29;
              *((void *)this + 6) = v34 + 8 * v35;
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(void *)uint64_t v28 = 0;
              float v29 = v28 + 8;
            }
            *((void *)this + 5) = v29;
            unint64_t v38 = *((void *)a2 + 1);
            if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)a2 + 2)) {
              goto LABEL_93;
            }
            *(v29 - 1) = *(void *)(*(void *)a2 + v38);
            unint64_t v26 = *((void *)a2 + 2);
            unint64_t v25 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v25;
          }
          goto LABEL_94;
        }
        unint64_t v55 = (char *)*((void *)this + 5);
        unint64_t v54 = *((void *)this + 6);
        if ((unint64_t)v55 >= v54)
        {
          char v60 = (char *)*((void *)this + 4);
          uint64_t v61 = (v55 - v60) >> 3;
          unint64_t v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 61) {
LABEL_140:
          }
            sub_2570AFD0C();
          uint64_t v63 = v54 - (void)v60;
          if (v63 >> 2 > v62) {
            unint64_t v62 = v63 >> 2;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v62;
          }
          if (v64)
          {
            unint64_t v64 = (unint64_t)sub_2572C7528(v64);
            char v60 = (char *)*((void *)this + 4);
            unint64_t v55 = (char *)*((void *)this + 5);
          }
          else
          {
            uint64_t v65 = 0;
          }
          unint64_t v72 = (void *)(v64 + 8 * v61);
          *unint64_t v72 = 0;
          char v56 = v72 + 1;
          while (v55 != v60)
          {
            uint64_t v73 = *((void *)v55 - 1);
            v55 -= 8;
            *--unint64_t v72 = v73;
          }
          *((void *)this + 4) = v72;
          *((void *)this + 5) = v56;
          *((void *)this + 6) = v64 + 8 * v65;
          if (v60) {
            operator delete(v60);
          }
        }
        else
        {
          *(void *)unint64_t v55 = 0;
          char v56 = v55 + 8;
        }
        *((void *)this + 5) = v56;
        unint64_t v74 = *((void *)a2 + 1);
        if (v74 <= 0xFFFFFFFFFFFFFFF7 && v74 + 8 <= *((void *)a2 + 2))
        {
          *(v56 - 1) = *(void *)(*(void *)a2 + v74);
LABEL_120:
          uint64_t v75 = *((void *)a2 + 1) + 8;
          goto LABEL_132;
        }
        goto LABEL_129;
      case 7u:
        if (v19 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v39 = *((void *)a2 + 1);
          unint64_t v40 = *((void *)a2 + 2);
          while (v39 < v40 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v42 = (char *)*((void *)this + 2);
            unint64_t v41 = *((void *)this + 3);
            if ((unint64_t)v42 >= v41)
            {
              char v44 = (char *)*((void *)this + 1);
              uint64_t v45 = (v42 - v44) >> 2;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62) {
                goto LABEL_141;
              }
              uint64_t v47 = v41 - (void)v44;
              if (v47 >> 1 > v46) {
                unint64_t v46 = v47 >> 1;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                unint64_t v48 = (unint64_t)sub_2572C76F0(v48);
                char v44 = (char *)*((void *)this + 1);
                unint64_t v42 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v49 = 0;
              }
              unint64_t v50 = (_DWORD *)(v48 + 4 * v45);
              *unint64_t v50 = 0;
              uint64_t v43 = v50 + 1;
              while (v42 != v44)
              {
                int v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *--unint64_t v50 = v51;
              }
              *((void *)this + 1) = v50;
              *((void *)this + 2) = v43;
              *((void *)this + 3) = v48 + 4 * v49;
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v42 = 0;
              uint64_t v43 = v42 + 4;
            }
            *((void *)this + 2) = v43;
            unint64_t v52 = *((void *)a2 + 1);
            if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)a2 + 2))
            {
LABEL_93:
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v43 - 1) = *(_DWORD *)(*(void *)a2 + v52);
            unint64_t v40 = *((void *)a2 + 2);
            unint64_t v39 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v39;
          }
LABEL_94:
          PB::Reader::recallMark();
        }
        else
        {
          char v58 = (char *)*((void *)this + 2);
          unint64_t v57 = *((void *)this + 3);
          if ((unint64_t)v58 >= v57)
          {
            unint64_t v66 = (char *)*((void *)this + 1);
            uint64_t v67 = (v58 - v66) >> 2;
            unint64_t v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 62) {
LABEL_141:
            }
              sub_2570AFD0C();
            uint64_t v69 = v57 - (void)v66;
            if (v69 >> 1 > v68) {
              unint64_t v68 = v69 >> 1;
            }
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v70 = v68;
            }
            if (v70)
            {
              unint64_t v70 = (unint64_t)sub_2572C76F0(v70);
              unint64_t v66 = (char *)*((void *)this + 1);
              char v58 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v71 = 0;
            }
            unint64_t v76 = (_DWORD *)(v70 + 4 * v67);
            *unint64_t v76 = 0;
            unsigned int v59 = v76 + 1;
            while (v58 != v66)
            {
              int v77 = *((_DWORD *)v58 - 1);
              v58 -= 4;
              *--unint64_t v76 = v77;
            }
            *((void *)this + 1) = v76;
            *((void *)this + 2) = v59;
            *((void *)this + 3) = v70 + 4 * v71;
            if (v66) {
              operator delete(v66);
            }
          }
          else
          {
            *(_DWORD *)char v58 = 0;
            unsigned int v59 = v58 + 4;
          }
          *((void *)this + 2) = v59;
          unint64_t v78 = *((void *)a2 + 1);
          if (v78 <= 0xFFFFFFFFFFFFFFFBLL && v78 + 4 <= *((void *)a2 + 2))
          {
            *(v59 - 1) = *(_DWORD *)(*(void *)a2 + v78);
LABEL_131:
            uint64_t v75 = *((void *)a2 + 1) + 4;
LABEL_132:
            *((void *)a2 + 1) = v75;
          }
          else
          {
LABEL_129:
            *((unsigned char *)a2 + 24) = 1;
          }
        }
        break;
      case 8u:
        *((unsigned char *)this + 100) |= 0x20u;
        unint64_t v53 = *((void *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)a2 + 2)) {
          goto LABEL_129;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v53);
        goto LABEL_131;
      default:
        goto LABEL_19;
    }
LABEL_133:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_133;
  }
  return 0;
}

uint64_t CMMsl::VisualLocalization::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 100);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 88));
    char v4 = *(unsigned char *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(unsigned char *)(this + 100) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  char v4 = *(unsigned char *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(double *)(v3 + 56));
    if ((*(unsigned char *)(v3 + 100) & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  char v4 = *(unsigned char *)(v3 + 100);
  if (v4) {
    goto LABEL_18;
  }
LABEL_5:
  if ((v4 & 2) != 0) {
LABEL_6:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 64));
LABEL_7:
  char v5 = *(double **)(v3 + 32);
  uint64_t v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  uint64_t v8 = *(float **)(v3 + 8);
  char v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  if ((*(unsigned char *)(v3 + 100) & 0x20) != 0)
  {
    float v11 = *(float *)(v3 + 96);
    return PB::Writer::write(a2, v11);
  }
  return this;
}

uint64_t CMMsl::VisualLocalization::hash_value(CMMsl::VisualLocalization *this)
{
  if ((*((unsigned char *)this + 100) & 0x10) == 0)
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 100) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_22:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 100) & 8) != 0) {
      goto LABEL_7;
    }
LABEL_23:
    uint64_t v4 = 0;
    if (*((unsigned char *)this + 100)) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
  if (*((double *)this + 11) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 11);
  }
  if ((*((unsigned char *)this + 100) & 4) == 0) {
    goto LABEL_22;
  }
LABEL_3:
  if (*((double *)this + 9) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 9);
  }
  if ((*((unsigned char *)this + 100) & 8) == 0) {
    goto LABEL_23;
  }
LABEL_7:
  if (*((double *)this + 10) == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *((void *)this + 10);
  }
  if (*((unsigned char *)this + 100))
  {
LABEL_11:
    if (*((double *)this + 7) == 0.0) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = *((void *)this + 7);
    }
    if ((*((unsigned char *)this + 100) & 2) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v6 = 0;
    goto LABEL_26;
  }
LABEL_24:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 100) & 2) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  if (*((double *)this + 8) == 0.0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *((void *)this + 8);
  }
LABEL_26:
  uint64_t v7 = PBHashBytes();
  uint64_t v8 = PBHashBytes();
  if ((*((unsigned char *)this + 100) & 0x20) != 0)
  {
    float v10 = *((float *)this + 24);
    uint64_t v9 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9;
}

void CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints(CMMsl::VisualLocalizationAttitudeConstraints *this)
{
  *(void *)this = &unk_270645A80;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::VisualLocalizationAttitudeConstraints *CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints(CMMsl::VisualLocalizationAttitudeConstraints *this, const CMMsl::VisualLocalizationAttitudeConstraints *a2)
{
  *(void *)this = &unk_270645A80;
  *((void *)this + 1) = 0;
  uint64_t v4 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 15) = 0;
  char v5 = *((unsigned char *)a2 + 60);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 5);
    char v6 = 2;
    *((unsigned char *)this + 60) = 2;
    *((void *)this + 5) = v7;
    char v5 = *((unsigned char *)a2 + 60);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if (*((unsigned char *)a2 + 60))
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 4);
    v6 |= 1u;
    *((unsigned char *)this + 60) = v6;
    *((void *)this + 4) = v8;
    char v5 = *((unsigned char *)a2 + 60);
  }
LABEL_6:
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v12 = *((_DWORD *)a2 + 14);
  v6 |= 0x10u;
  *((unsigned char *)this + 60) = v6;
  *((_DWORD *)this + 14) = v12;
  if ((*((unsigned char *)a2 + 60) & 8) != 0)
  {
LABEL_8:
    int v9 = *((_DWORD *)a2 + 13);
    *((unsigned char *)this + 60) = v6 | 8;
    *((_DWORD *)this + 13) = v9;
  }
LABEL_9:
  if (this != a2) {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if ((*((unsigned char *)a2 + 60) & 4) != 0)
  {
    int v10 = *((_DWORD *)a2 + 12);
    *((unsigned char *)this + 60) |= 4u;
    *((_DWORD *)this + 12) = v10;
  }
  return this;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::operator=(uint64_t a1, const CMMsl::VisualLocalizationAttitudeConstraints *a2)
{
  if ((const CMMsl::VisualLocalizationAttitudeConstraints *)a1 != a2)
  {
    CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints((CMMsl::VisualLocalizationAttitudeConstraints *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    long long v12 = v4;
    int v5 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v14;
    int v14 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v7;
    *(void *)&long long v6 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v13;
    uint64_t v13 = v6;
    CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints((CMMsl::VisualLocalizationAttitudeConstraints *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VisualLocalizationAttitudeConstraints *a2, CMMsl::VisualLocalizationAttitudeConstraints *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  LODWORD(v5) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  float result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645A80;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    long long v12 = v4;
    int v5 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v14;
    int v14 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v7;
    *(void *)&long long v6 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v13;
    uint64_t v13 = v6;
    CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints((CMMsl::VisualLocalizationAttitudeConstraints *)&v9);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::formatText(CMMsl::VisualLocalizationAttitudeConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "deltaHeading", *((float *)this + 12));
    char v5 = *((unsigned char *)this + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)this + 60) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gravityZ", *((float *)this + 13));
  char v5 = *((unsigned char *)this + 60);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "lastStateTimestamp", *((double *)this + 4));
  if ((*((unsigned char *)this + 60) & 0x10) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "meanRotRate", *((float *)this + 14));
LABEL_6:
  long long v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "quaternion", v8);
  }
  if ((*((unsigned char *)this + 60) & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::VisualLocalizationAttitudeConstraints::readFrom(CMMsl::VisualLocalizationAttitudeConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 60) |= 2u;
        unint64_t v19 = *((void *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((void *)a2 + 2)) {
          goto LABEL_83;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v19);
        goto LABEL_29;
      case 2u:
        *((unsigned char *)this + 60) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
          goto LABEL_83;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v20);
LABEL_29:
        uint64_t v21 = *((void *)a2 + 1) + 8;
        goto LABEL_86;
      case 3u:
        *((unsigned char *)this + 60) |= 0x10u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)a2 + 2)) {
          goto LABEL_83;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v22);
        goto LABEL_85;
      case 4u:
        *((unsigned char *)this + 60) |= 8u;
        unint64_t v23 = *((void *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)a2 + 2)) {
          goto LABEL_83;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v23);
        goto LABEL_85;
      case 5u:
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v24 = *((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
          while (v24 < v25 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v27 = (char *)*((void *)this + 2);
            unint64_t v26 = *((void *)this + 3);
            if ((unint64_t)v27 >= v26)
            {
              float v29 = (char *)*((void *)this + 1);
              uint64_t v30 = (v27 - v29) >> 2;
              unint64_t v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62) {
                goto LABEL_94;
              }
              uint64_t v32 = v26 - (void)v29;
              if (v32 >> 1 > v31) {
                unint64_t v31 = v32 >> 1;
              }
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33)
              {
                unint64_t v33 = (unint64_t)sub_2572C76F0(v33);
                float v29 = (char *)*((void *)this + 1);
                unint64_t v27 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v34 = 0;
              }
              uint64_t v35 = (_DWORD *)(v33 + 4 * v30);
              *uint64_t v35 = 0;
              uint64_t v28 = v35 + 1;
              while (v27 != v29)
              {
                int v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *--uint64_t v35 = v36;
              }
              *((void *)this + 1) = v35;
              *((void *)this + 2) = v28;
              *((void *)this + 3) = v33 + 4 * v34;
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v27 = 0;
              uint64_t v28 = v27 + 4;
            }
            *((void *)this + 2) = v28;
            unint64_t v37 = *((void *)a2 + 1);
            if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v28 - 1) = *(_DWORD *)(*(void *)a2 + v37);
            unint64_t v25 = *((void *)a2 + 2);
            unint64_t v24 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v24;
          }
          PB::Reader::recallMark();
        }
        else
        {
          unint64_t v40 = (char *)*((void *)this + 2);
          unint64_t v39 = *((void *)this + 3);
          if ((unint64_t)v40 >= v39)
          {
            unint64_t v42 = (char *)*((void *)this + 1);
            uint64_t v43 = (v40 - v42) >> 2;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 62) {
LABEL_94:
            }
              sub_2570AFD0C();
            uint64_t v45 = v39 - (void)v42;
            if (v45 >> 1 > v44) {
              unint64_t v44 = v45 >> 1;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              unint64_t v46 = (unint64_t)sub_2572C76F0(v46);
              unint64_t v42 = (char *)*((void *)this + 1);
              unint64_t v40 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v47 = 0;
            }
            unint64_t v48 = (_DWORD *)(v46 + 4 * v43);
            *unint64_t v48 = 0;
            unint64_t v41 = v48 + 1;
            while (v40 != v42)
            {
              int v49 = *((_DWORD *)v40 - 1);
              v40 -= 4;
              *--unint64_t v48 = v49;
            }
            *((void *)this + 1) = v48;
            *((void *)this + 2) = v41;
            *((void *)this + 3) = v46 + 4 * v47;
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v40 = 0;
            unint64_t v41 = v40 + 4;
          }
          *((void *)this + 2) = v41;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 <= 0xFFFFFFFFFFFFFFFBLL && v50 + 4 <= *((void *)a2 + 2))
          {
            *(v41 - 1) = *(_DWORD *)(*(void *)a2 + v50);
LABEL_85:
            uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_86:
            *((void *)a2 + 1) = v21;
          }
          else
          {
LABEL_83:
            *((unsigned char *)a2 + 24) = 1;
          }
        }
        break;
      case 6u:
        *((unsigned char *)this + 60) |= 4u;
        unint64_t v38 = *((void *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
          goto LABEL_83;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v38);
        goto LABEL_85;
      default:
        goto LABEL_19;
    }
LABEL_87:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_87;
  }
  return 0;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 60);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    char v4 = *(unsigned char *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
LABEL_13:
      this = PB::Writer::write(a2, *(float *)(v3 + 56));
      if ((*(unsigned char *)(v3 + 60) & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(this + 60) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 60);
  if ((v4 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v4 & 8) != 0) {
LABEL_5:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 52));
LABEL_6:
  char v5 = *(float **)(v3 + 8);
  long long v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if ((*(unsigned char *)(v3 + 60) & 4) != 0)
  {
    float v8 = *(float *)(v3 + 48);
    return PB::Writer::write(a2, v8);
  }
  return this;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::hash_value(CMMsl::VisualLocalizationAttitudeConstraints *this)
{
  if ((*((unsigned char *)this + 60) & 2) == 0)
  {
    uint64_t v2 = 0;
    if (*((unsigned char *)this + 60)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 60) & 0x10) != 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  if (*((double *)this + 5) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 5);
  }
  if ((*((unsigned char *)this + 60) & 1) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 4);
  }
  if ((*((unsigned char *)this + 60) & 0x10) != 0)
  {
LABEL_7:
    float v4 = *((float *)this + 14);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = LODWORD(v4);
    }
    if ((*((unsigned char *)this + 60) & 8) != 0) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v7 = 0;
    goto LABEL_21;
  }
LABEL_19:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 60) & 8) == 0) {
    goto LABEL_20;
  }
LABEL_11:
  float v6 = *((float *)this + 13);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = LODWORD(v6);
  }
LABEL_21:
  uint64_t v8 = PBHashBytes();
  if ((*((unsigned char *)this + 60) & 4) != 0)
  {
    float v10 = *((float *)this + 12);
    uint64_t v9 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v8;
}

void CMMsl::VisualLocalizationAttitudeCorrection::~VisualLocalizationAttitudeCorrection(CMMsl::VisualLocalizationAttitudeCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270645AB8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VisualLocalizationAttitudeCorrection::~VisualLocalizationAttitudeCorrection(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(void *this, const CMMsl::VisualLocalizationAttitudeCorrection *a2)
{
  *this = &unk_270645AB8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::VisualLocalizationAttitudeCorrection *CMMsl::VisualLocalizationAttitudeCorrection::operator=(const CMMsl::VisualLocalizationAttitudeCorrection *a1, const CMMsl::VisualLocalizationAttitudeCorrection *a2)
{
  if (a1 != a2)
  {
    CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::VisualLocalizationAttitudeCorrection::~VisualLocalizationAttitudeCorrection((CMMsl::VisualLocalizationAttitudeCorrection *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::VisualLocalizationAttitudeCorrection *a2, CMMsl::VisualLocalizationAttitudeCorrection *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(void *a1, uint64_t a2)
{
  *a1 = &unk_270645AB8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270645AB8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270645AB8;
    v6[1] = v4;
    CMMsl::VisualLocalizationAttitudeCorrection::~VisualLocalizationAttitudeCorrection((CMMsl::VisualLocalizationAttitudeCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::formatText(CMMsl::VisualLocalizationAttitudeCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::readFrom(CMMsl::VisualLocalizationAttitudeCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::DeviceMotionCorrection *CMMsl::VisualLocalizationAttitudeCorrection::hash_value(CMMsl::VisualLocalizationAttitudeCorrection *this)
{
  uint64_t result = (CMMsl::DeviceMotionCorrection *)*((void *)this + 1);
  if (result) {
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::VisualStateMeasurement::~VisualStateMeasurement(CMMsl::VisualStateMeasurement *this)
{
  *(void *)this = &unk_270645AF0;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VisualStateMeasurement::~VisualStateMeasurement(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::VisualStateMeasurement *CMMsl::VisualStateMeasurement::VisualStateMeasurement(CMMsl::VisualStateMeasurement *this, const CMMsl::VisualStateMeasurement *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = &unk_270645AF0;
  *((_DWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  if (*((unsigned char *)a2 + 96))
  {
    uint64_t v5 = *((void *)a2 + 10);
    *((unsigned char *)this + 96) = 1;
    *((void *)this + 10) = v5;
  }
  if (this != a2)
  {
    sub_2572C73EC(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_2572C73EC((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_2572C73EC((void *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  char v6 = *((unsigned char *)a2 + 96);
  if ((v6 & 4) != 0)
  {
    char v7 = *((unsigned char *)a2 + 92);
    *((unsigned char *)this + 96) |= 4u;
    *((unsigned char *)this + 92) = v7;
    char v6 = *((unsigned char *)a2 + 96);
  }
  if ((v6 & 2) != 0)
  {
    int v8 = *((_DWORD *)a2 + 22);
    *((unsigned char *)this + 96) |= 2u;
    *((_DWORD *)this + 22) = v8;
  }
  return this;
}

CMMsl *CMMsl::VisualStateMeasurement::operator=(CMMsl *a1, const CMMsl::VisualStateMeasurement *a2)
{
  if (a1 != a2)
  {
    CMMsl::VisualStateMeasurement::VisualStateMeasurement((CMMsl::VisualStateMeasurement *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualStateMeasurement *)v5, v3);
    CMMsl::VisualStateMeasurement::~VisualStateMeasurement((CMMsl::VisualStateMeasurement *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VisualStateMeasurement *a2, CMMsl::VisualStateMeasurement *a3)
{
  int v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  double result = *((double *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((double *)a2 + 10) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 92);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
  *((unsigned char *)a2 + 92) = v13;
  LODWORD(v13) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v13;
  return result;
}

uint64_t CMMsl::VisualStateMeasurement::VisualStateMeasurement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645AF0;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  sub_2572C7560(v5, (__n128 *)(a2 + 56));
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return a1;
}

CMMsl *CMMsl::VisualStateMeasurement::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VisualStateMeasurement::VisualStateMeasurement((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualStateMeasurement *)v5, v3);
    CMMsl::VisualStateMeasurement::~VisualStateMeasurement((CMMsl::VisualStateMeasurement *)v5);
  }
  return a1;
}

uint64_t CMMsl::VisualStateMeasurement::formatText(CMMsl::VisualStateMeasurement *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  uint64_t v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  char v8 = *((unsigned char *)this + 96);
  if ((v8 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "isInitFinished");
    char v8 = *((unsigned char *)this + 96);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 2) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)this + 96) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  if ((*((unsigned char *)this + 96) & 2) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "trackingState");
LABEL_7:
  uint64_t v9 = (double *)*((void *)this + 4);
  uint64_t v10 = (double *)*((void *)this + 5);
  while (v9 != v10)
  {
    double v11 = *v9++;
    PB::TextFormatter::format(a2, "translation", v11);
  }
  uint64_t v12 = (double *)*((void *)this + 7);
  uint64_t v13 = (double *)*((void *)this + 8);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(a2, "velocity", v14);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::VisualStateMeasurement::readFrom(CMMsl::VisualStateMeasurement *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      int v20 = v11 & 7;
      if (v20 != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            *((unsigned char *)this + 96) |= 1u;
            unint64_t v21 = *((void *)a2 + 1);
            if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
              goto LABEL_179;
            }
            *((void *)this + 10) = *(void *)(*(void *)a2 + v21);
            goto LABEL_181;
          case 2u:
            if (v20 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v22 = *((void *)a2 + 1);
              unint64_t v23 = *((void *)a2 + 2);
              while (v22 < v23 && !*((unsigned char *)a2 + 24))
              {
                unint64_t v25 = (char *)*((void *)this + 2);
                unint64_t v24 = *((void *)this + 3);
                if ((unint64_t)v25 >= v24)
                {
                  unint64_t v27 = (char *)*((void *)this + 1);
                  uint64_t v28 = (v25 - v27) >> 3;
                  unint64_t v29 = v28 + 1;
                  if ((unint64_t)(v28 + 1) >> 61) {
                    goto LABEL_186;
                  }
                  uint64_t v30 = v24 - (void)v27;
                  if (v30 >> 2 > v29) {
                    unint64_t v29 = v30 >> 2;
                  }
                  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v31 = v29;
                  }
                  if (v31)
                  {
                    unint64_t v31 = (unint64_t)sub_2572C7528(v31);
                    unint64_t v27 = (char *)*((void *)this + 1);
                    unint64_t v25 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    uint64_t v32 = 0;
                  }
                  unint64_t v33 = (void *)(v31 + 8 * v28);
                  *unint64_t v33 = 0;
                  unint64_t v26 = v33 + 1;
                  while (v25 != v27)
                  {
                    uint64_t v34 = *((void *)v25 - 1);
                    v25 -= 8;
                    *--unint64_t v33 = v34;
                  }
                  *((void *)this + 1) = v33;
                  *((void *)this + 2) = v26;
                  *((void *)this + 3) = v31 + 8 * v32;
                  if (v27) {
                    operator delete(v27);
                  }
                }
                else
                {
                  *(void *)unint64_t v25 = 0;
                  unint64_t v26 = v25 + 8;
                }
                *((void *)this + 2) = v26;
                unint64_t v35 = *((void *)a2 + 1);
                if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((void *)a2 + 2)) {
                  goto LABEL_126;
                }
                *(v26 - 1) = *(void *)(*(void *)a2 + v35);
                unint64_t v23 = *((void *)a2 + 2);
                unint64_t v22 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v22;
              }
              goto LABEL_127;
            }
            int v77 = (char *)*((void *)this + 2);
            unint64_t v76 = *((void *)this + 3);
            if ((unint64_t)v77 >= v76)
            {
              unint64_t v87 = (char *)*((void *)this + 1);
              uint64_t v88 = (v77 - v87) >> 3;
              unint64_t v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 61) {
                goto LABEL_186;
              }
              uint64_t v90 = v76 - (void)v87;
              if (v90 >> 2 > v89) {
                unint64_t v89 = v90 >> 2;
              }
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v91 = v89;
              }
              if (v91)
              {
                unint64_t v91 = (unint64_t)sub_2572C7528(v91);
                unint64_t v87 = (char *)*((void *)this + 1);
                int v77 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v92 = 0;
              }
              unsigned int v105 = (void *)(v91 + 8 * v88);
              *unsigned int v105 = 0;
              unint64_t v78 = v105 + 1;
              while (v77 != v87)
              {
                uint64_t v106 = *((void *)v77 - 1);
                v77 -= 8;
                *--unsigned int v105 = v106;
              }
              *((void *)this + 1) = v105;
              *((void *)this + 2) = v78;
              *((void *)this + 3) = v91 + 8 * v92;
              if (v87) {
                operator delete(v87);
              }
            }
            else
            {
              *(void *)int v77 = 0;
              unint64_t v78 = v77 + 8;
            }
            *((void *)this + 2) = v78;
            goto LABEL_177;
          case 3u:
            if (v20 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v36 = *((void *)a2 + 1);
              unint64_t v37 = *((void *)a2 + 2);
              while (v36 < v37 && !*((unsigned char *)a2 + 24))
              {
                unint64_t v39 = (char *)*((void *)this + 5);
                unint64_t v38 = *((void *)this + 6);
                if ((unint64_t)v39 >= v38)
                {
                  unint64_t v41 = (char *)*((void *)this + 4);
                  uint64_t v42 = (v39 - v41) >> 3;
                  unint64_t v43 = v42 + 1;
                  if ((unint64_t)(v42 + 1) >> 61) {
                    goto LABEL_186;
                  }
                  uint64_t v44 = v38 - (void)v41;
                  if (v44 >> 2 > v43) {
                    unint64_t v43 = v44 >> 2;
                  }
                  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v45 = v43;
                  }
                  if (v45)
                  {
                    unint64_t v45 = (unint64_t)sub_2572C7528(v45);
                    unint64_t v41 = (char *)*((void *)this + 4);
                    unint64_t v39 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    uint64_t v46 = 0;
                  }
                  uint64_t v47 = (void *)(v45 + 8 * v42);
                  *uint64_t v47 = 0;
                  unint64_t v40 = v47 + 1;
                  while (v39 != v41)
                  {
                    uint64_t v48 = *((void *)v39 - 1);
                    v39 -= 8;
                    *--uint64_t v47 = v48;
                  }
                  *((void *)this + 4) = v47;
                  *((void *)this + 5) = v40;
                  *((void *)this + 6) = v45 + 8 * v46;
                  if (v41) {
                    operator delete(v41);
                  }
                }
                else
                {
                  *(void *)unint64_t v39 = 0;
                  unint64_t v40 = v39 + 8;
                }
                *((void *)this + 5) = v40;
                unint64_t v49 = *((void *)a2 + 1);
                if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((void *)a2 + 2)) {
                  goto LABEL_126;
                }
                *(v40 - 1) = *(void *)(*(void *)a2 + v49);
                unint64_t v37 = *((void *)a2 + 2);
                unint64_t v36 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v36;
              }
              goto LABEL_127;
            }
            uint64_t v80 = (char *)*((void *)this + 5);
            unint64_t v79 = *((void *)this + 6);
            if ((unint64_t)v80 >= v79)
            {
              unint64_t v93 = (char *)*((void *)this + 4);
              uint64_t v94 = (v80 - v93) >> 3;
              unint64_t v95 = v94 + 1;
              if ((unint64_t)(v94 + 1) >> 61) {
                goto LABEL_186;
              }
              uint64_t v96 = v79 - (void)v93;
              if (v96 >> 2 > v95) {
                unint64_t v95 = v96 >> 2;
              }
              if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v97 = v95;
              }
              if (v97)
              {
                unint64_t v97 = (unint64_t)sub_2572C7528(v97);
                unint64_t v93 = (char *)*((void *)this + 4);
                uint64_t v80 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v98 = 0;
              }
              unint64_t v107 = (void *)(v97 + 8 * v94);
              *unint64_t v107 = 0;
              unint64_t v78 = v107 + 1;
              while (v80 != v93)
              {
                uint64_t v108 = *((void *)v80 - 1);
                v80 -= 8;
                *--unint64_t v107 = v108;
              }
              *((void *)this + 4) = v107;
              *((void *)this + 5) = v78;
              *((void *)this + 6) = v97 + 8 * v98;
              if (v93) {
                operator delete(v93);
              }
            }
            else
            {
              *(void *)uint64_t v80 = 0;
              unint64_t v78 = v80 + 8;
            }
            *((void *)this + 5) = v78;
            goto LABEL_177;
          case 4u:
            if (v20 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v50 = *((void *)a2 + 1);
              unint64_t v51 = *((void *)a2 + 2);
              while (v50 < v51 && !*((unsigned char *)a2 + 24))
              {
                unint64_t v53 = (char *)*((void *)this + 8);
                unint64_t v52 = *((void *)this + 9);
                if ((unint64_t)v53 >= v52)
                {
                  unint64_t v55 = (char *)*((void *)this + 7);
                  uint64_t v56 = (v53 - v55) >> 3;
                  unint64_t v57 = v56 + 1;
                  if ((unint64_t)(v56 + 1) >> 61) {
                    goto LABEL_186;
                  }
                  uint64_t v58 = v52 - (void)v55;
                  if (v58 >> 2 > v57) {
                    unint64_t v57 = v58 >> 2;
                  }
                  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v59 = v57;
                  }
                  if (v59)
                  {
                    unint64_t v59 = (unint64_t)sub_2572C7528(v59);
                    unint64_t v55 = (char *)*((void *)this + 7);
                    unint64_t v53 = (char *)*((void *)this + 8);
                  }
                  else
                  {
                    uint64_t v60 = 0;
                  }
                  uint64_t v61 = (void *)(v59 + 8 * v56);
                  *uint64_t v61 = 0;
                  unint64_t v54 = v61 + 1;
                  while (v53 != v55)
                  {
                    uint64_t v62 = *((void *)v53 - 1);
                    v53 -= 8;
                    *--uint64_t v61 = v62;
                  }
                  *((void *)this + 7) = v61;
                  *((void *)this + 8) = v54;
                  *((void *)this + 9) = v59 + 8 * v60;
                  if (v55) {
                    operator delete(v55);
                  }
                }
                else
                {
                  *(void *)unint64_t v53 = 0;
                  unint64_t v54 = v53 + 8;
                }
                *((void *)this + 8) = v54;
                unint64_t v63 = *((void *)a2 + 1);
                if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((void *)a2 + 2))
                {
LABEL_126:
                  *((unsigned char *)a2 + 24) = 1;
                  break;
                }
                *(v54 - 1) = *(void *)(*(void *)a2 + v63);
                unint64_t v51 = *((void *)a2 + 2);
                unint64_t v50 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v50;
              }
LABEL_127:
              PB::Reader::recallMark();
            }
            else
            {
              uint64_t v82 = (char *)*((void *)this + 8);
              unint64_t v81 = *((void *)this + 9);
              if ((unint64_t)v82 >= v81)
              {
                unint64_t v99 = (char *)*((void *)this + 7);
                uint64_t v100 = (v82 - v99) >> 3;
                unint64_t v101 = v100 + 1;
                if ((unint64_t)(v100 + 1) >> 61) {
LABEL_186:
                }
                  sub_2570AFD0C();
                uint64_t v102 = v81 - (void)v99;
                if (v102 >> 2 > v101) {
                  unint64_t v101 = v102 >> 2;
                }
                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v103 = v101;
                }
                if (v103)
                {
                  unint64_t v103 = (unint64_t)sub_2572C7528(v103);
                  unint64_t v99 = (char *)*((void *)this + 7);
                  uint64_t v82 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v104 = 0;
                }
                unint64_t v109 = (void *)(v103 + 8 * v100);
                *unint64_t v109 = 0;
                unint64_t v78 = v109 + 1;
                while (v82 != v99)
                {
                  uint64_t v110 = *((void *)v82 - 1);
                  v82 -= 8;
                  *--unint64_t v109 = v110;
                }
                *((void *)this + 7) = v109;
                *((void *)this + 8) = v78;
                *((void *)this + 9) = v103 + 8 * v104;
                if (v99) {
                  operator delete(v99);
                }
              }
              else
              {
                *(void *)uint64_t v82 = 0;
                unint64_t v78 = v82 + 8;
              }
              *((void *)this + 8) = v78;
LABEL_177:
              unint64_t v111 = *((void *)a2 + 1);
              if (v111 <= 0xFFFFFFFFFFFFFFF7 && v111 + 8 <= *((void *)a2 + 2))
              {
                *(v78 - 1) = *(void *)(*(void *)a2 + v111);
LABEL_181:
                *((void *)a2 + 1) += 8;
              }
              else
              {
LABEL_179:
                *((unsigned char *)a2 + 24) = 1;
              }
            }
LABEL_20:
            unint64_t v2 = *((void *)a2 + 1);
            unint64_t v3 = *((void *)a2 + 2);
            int v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0) {
              return v4 == 0;
            }
            continue;
          case 5u:
            *((unsigned char *)this + 96) |= 4u;
            unint64_t v64 = *((void *)a2 + 1);
            if (v64 >= *((void *)a2 + 2))
            {
              BOOL v67 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v65 = v64 + 1;
              int v66 = *(unsigned __int8 *)(*(void *)a2 + v64);
              *((void *)a2 + 1) = v65;
              BOOL v67 = v66 != 0;
            }
            *((unsigned char *)this + 92) = v67;
            goto LABEL_20;
          case 6u:
            *((unsigned char *)this + 96) |= 2u;
            unint64_t v68 = *((void *)a2 + 1);
            unint64_t v69 = *((void *)a2 + 2);
            uint64_t v70 = *(void *)a2;
            if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
            {
              char v71 = 0;
              unsigned int v72 = 0;
              uint64_t v73 = 0;
              do
              {
                unint64_t v74 = v68 + 1;
                *((void *)a2 + 1) = v68 + 1;
                char v75 = *(unsigned char *)(v70 + v68);
                v73 |= (unint64_t)(v75 & 0x7F) << v71;
                if ((v75 & 0x80) == 0) {
                  goto LABEL_155;
                }
                v71 += 7;
                unint64_t v68 = v74;
                BOOL v14 = v72++ > 8;
              }
              while (!v14);
LABEL_125:
              LODWORD(v73) = 0;
              goto LABEL_155;
            }
            char v83 = 0;
            unsigned int v84 = 0;
            uint64_t v73 = 0;
            if (v69 <= v68) {
              unint64_t v69 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v69 == v68)
              {
                LODWORD(v73) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v85 = v68 + 1;
                char v86 = *(unsigned char *)(v70 + v68);
                *((void *)a2 + 1) = v85;
                v73 |= (unint64_t)(v86 & 0x7F) << v83;
                if (v86 < 0)
                {
                  v83 += 7;
                  unint64_t v68 = v85;
                  BOOL v14 = v84++ > 8;
                  if (v14) {
                    goto LABEL_125;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v73) = 0;
                }
              }
              break;
            }
LABEL_155:
            *((_DWORD *)this + 22) = v73;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      int v4 = 0;
      return v4 == 0;
    }
    break;
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_25;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_20;
  }
  return 0;
}

uint64_t CMMsl::VisualStateMeasurement::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 96)) {
    this = PB::Writer::write(a2, *(double *)(this + 80));
  }
  int v4 = *(double **)(v3 + 8);
  uint64_t v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  double v7 = *(double **)(v3 + 32);
  uint64_t v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  unsigned int v10 = *(double **)(v3 + 56);
  unint64_t v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    double v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  char v13 = *(unsigned char *)(v3 + 96);
  if ((v13 & 4) != 0)
  {
    this = PB::Writer::write(a2);
    char v13 = *(unsigned char *)(v3 + 96);
  }
  if ((v13 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::VisualStateMeasurement::hash_value(CMMsl::VisualStateMeasurement *this)
{
  if (*((unsigned char *)this + 96))
  {
    if (*((double *)this + 10) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 10);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  if ((*((unsigned char *)this + 96) & 4) != 0)
  {
    uint64_t v6 = *((unsigned __int8 *)this + 92);
    if ((*((unsigned char *)this + 96) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v7 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
  }
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 96) & 2) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v7 = *((unsigned int *)this + 22);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::WakeGestureNotification::~WakeGestureNotification(CMMsl::WakeGestureNotification *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::WakeGestureNotification::WakeGestureNotification(CMMsl::WakeGestureNotification *this, const CMMsl::WakeGestureNotification *a2)
{
  *(void *)this = &unk_270645B28;
  *((_DWORD *)this + 11) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    char v3 = 2;
    *((unsigned char *)this + 44) = 2;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 44) = v3;
    *((void *)this + 3) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *((unsigned char *)this + 44) = v3;
    *((_DWORD *)this + 9) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 8) = v7;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_14:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 44) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_13:
  char v8 = *((unsigned char *)a2 + 40);
  v3 |= 0x20u;
  *((unsigned char *)this + 44) = v3;
  *((unsigned char *)this + 40) = v8;
  if (*((unsigned char *)a2 + 44)) {
    goto LABEL_14;
  }
  return result;
}

uint64_t CMMsl::WakeGestureNotification::operator=(uint64_t a1, const CMMsl::WakeGestureNotification *a2)
{
  if ((const CMMsl::WakeGestureNotification *)a1 != a2)
  {
    CMMsl::WakeGestureNotification::WakeGestureNotification((CMMsl::WakeGestureNotification *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    LOBYTE(v4) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v12;
    char v12 = v4;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WakeGestureNotification *a2, CMMsl::WakeGestureNotification *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  LODWORD(v5) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::WakeGestureNotification::WakeGestureNotification(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645B28;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645B28;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::WakeGestureNotification::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v11 = &unk_270645B28;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    char v5 = *(unsigned char *)(a2 + 40);
    int v16 = *(_DWORD *)(a1 + 44);
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    uint64_t v14 = v7;
    LOBYTE(v4) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v5;
    char v15 = v4;
    long long v8 = *(_OWORD *)(a1 + 8);
    long long v9 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 8) = v9;
    long long v12 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::WakeGestureNotification::formatText(CMMsl::WakeGestureNotification *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "gestureType");
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hostPowerState");
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "machContinuousTime", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "receivedTime", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "state");
  if ((*((unsigned char *)this + 44) & 4) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "timestampPossible");
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WakeGestureNotification::readFrom(CMMsl::WakeGestureNotification *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_56;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_81;
      case 2u:
        *((unsigned char *)this + 44) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_86;
            }
            unint64_t v43 = v21++;
            char v44 = *(unsigned char *)(v22 + v43);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v44 & 0x7F) << v41;
            if ((v44 & 0x80) == 0) {
              break;
            }
            v41 += 7;
            BOOL v14 = v42++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
LABEL_85:
              unint64_t v2 = v43 + 1;
              goto LABEL_86;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
          goto LABEL_85;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_86;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        uint64_t v25 = 0;
LABEL_86:
        *((void *)this + 3) = v25;
        break;
      case 3u:
        *((unsigned char *)this + 44) |= 0x10u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_91;
            }
            unint64_t v47 = v27++;
            char v48 = *(unsigned char *)(v28 + v47);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v48 & 0x7F) << v45;
            if ((v48 & 0x80) == 0) {
              break;
            }
            v45 += 7;
            BOOL v14 = v46++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_90:
              unint64_t v2 = v47 + 1;
              goto LABEL_91;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
          goto LABEL_90;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_91;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_91:
        *((_DWORD *)this + 9) = v31;
        break;
      case 4u:
        *((unsigned char *)this + 44) |= 8u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_96;
            }
            unint64_t v51 = v33++;
            char v52 = *(unsigned char *)(v34 + v51);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v52 & 0x7F) << v49;
            if ((v52 & 0x80) == 0) {
              break;
            }
            v49 += 7;
            BOOL v14 = v50++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_95:
              unint64_t v2 = v51 + 1;
              goto LABEL_96;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
          goto LABEL_95;
        }
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        do
        {
          unint64_t v2 = v33 + 1;
          *((void *)a2 + 1) = v33 + 1;
          char v38 = *(unsigned char *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0) {
            goto LABEL_96;
          }
          v35 += 7;
          unint64_t v33 = v2;
          BOOL v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_96:
        *((_DWORD *)this + 8) = v37;
        break;
      case 5u:
        *((unsigned char *)this + 44) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v40 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v40 = v39 != 0;
        }
        *((unsigned char *)this + 40) = v40;
        break;
      case 6u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_81:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_56:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::WakeGestureNotification::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 44) & 1) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::WakeGestureNotification::hash_value(CMMsl::WakeGestureNotification *this)
{
  if ((*((unsigned char *)this + 44) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 3);
      if ((*((unsigned char *)this + 44) & 0x10) != 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 44) & 0x10) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 9);
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 44) & 8) != 0)
  {
LABEL_5:
    uint64_t v4 = *((int *)this + 8);
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 0x20) != 0)
  {
LABEL_6:
    uint64_t v5 = *((unsigned __int8 *)this + 40);
    if (*((unsigned char *)this + 44)) {
      goto LABEL_7;
    }
LABEL_17:
    double v6 = 0.0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 44) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_7:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ *(void *)&v6;
}

void CMMsl::WakeGestureSample::~WakeGestureSample(CMMsl::WakeGestureSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::WakeGestureSample::WakeGestureSample(uint64_t this, const CMMsl::WakeGestureSample *a2)
{
  *(void *)this = &unk_270645B60;
  *(_DWORD *)(this + 84) = 0;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    int v3 = 16;
    *(_DWORD *)(this + 84) = 16;
    *(void *)(this + 40) = v4;
    int v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 6);
    v3 |= 0x20u;
    *(_DWORD *)(this + 84) = v3;
    *(void *)(this + 48) = v5;
    int v2 = *((_DWORD *)a2 + 21);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    int v6 = *((_DWORD *)a2 + 17);
    v3 |= 0x200u;
    *(_DWORD *)(this + 84) = v3;
    *(_DWORD *)(this + 68) = v6;
    int v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 18);
  v3 |= 0x400u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 72) = v7;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  char v8 = *((unsigned char *)a2 + 76);
  v3 |= 0x800u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 76) = v8;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v9 = *((unsigned char *)a2 + 81);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 81) = v9;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  char v10 = *((unsigned char *)a2 + 79);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 79) = v10;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  char v11 = *((unsigned char *)a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 80) = v11;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  char v12 = *((unsigned char *)a2 + 78);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 78) = v12;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  char v13 = *((unsigned char *)a2 + 82);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 82) = v13;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  char v14 = *((unsigned char *)a2 + 77);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 77) = v14;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v15 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 84) = v3;
  *(void *)(this + 16) = v15;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v16 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 84) = v3;
  *(void *)(this + 8) = v16;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v17 = *((_DWORD *)a2 + 15);
  v3 |= 0x80u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 60) = v17;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v18 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 84) = v3;
  *(void *)(this + 32) = v18;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v19 = *((_DWORD *)a2 + 16);
  v3 |= 0x100u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 64) = v19;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x40) == 0) {
      return this;
    }
LABEL_38:
    int v21 = *((_DWORD *)a2 + 14);
    *(_DWORD *)(this + 84) = v3 | 0x40;
    *(_DWORD *)(this + 56) = v21;
    return this;
  }
LABEL_37:
  uint64_t v20 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 84) = v3;
  *(void *)(this + 24) = v20;
  if ((*((_DWORD *)a2 + 21) & 0x40) != 0) {
    goto LABEL_38;
  }
  return this;
}

CMMsl *CMMsl::WakeGestureSample::operator=(CMMsl *a1, const CMMsl::WakeGestureSample *a2)
{
  if (a1 != a2)
  {
    CMMsl::WakeGestureSample::WakeGestureSample((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WakeGestureSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WakeGestureSample *a2, CMMsl::WakeGestureSample *a3)
{
  int v3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  int v7 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 76);
  *((unsigned char *)this + 76) = *((unsigned char *)a2 + 76);
  *((unsigned char *)a2 + 76) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 81);
  *((unsigned char *)this + 81) = *((unsigned char *)a2 + 81);
  *((unsigned char *)a2 + 81) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 79);
  *((unsigned char *)this + 79) = *((unsigned char *)a2 + 79);
  *((unsigned char *)a2 + 79) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 80);
  *((unsigned char *)this + 80) = *((unsigned char *)a2 + 80);
  *((unsigned char *)a2 + 80) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 78);
  *((unsigned char *)this + 78) = *((unsigned char *)a2 + 78);
  *((unsigned char *)a2 + 78) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 82);
  *((unsigned char *)this + 82) = *((unsigned char *)a2 + 82);
  *((unsigned char *)a2 + 82) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 77);
  *((unsigned char *)this + 77) = *((unsigned char *)a2 + 77);
  *((unsigned char *)a2 + 77) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  int v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  int v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  int v14 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v14;
  return result;
}

double CMMsl::WakeGestureSample::WakeGestureSample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645B60;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 79) = *(unsigned char *)(a2 + 79);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 78) = *(unsigned char *)(a2 + 78);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

CMMsl *CMMsl::WakeGestureSample::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::WakeGestureSample::WakeGestureSample((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WakeGestureSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::WakeGestureSample::formatText(CMMsl::WakeGestureSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "detectionMode");
    int v5 = *((_DWORD *)this + 21);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "detectorRunning");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "enableStateDetected");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "fireAll");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "gestureDetectionDelay", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "gyroInUse");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "hostAwake");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "hostWakeCount");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "hostWakeDelay", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "invertSensors");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 4) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "runningModeDuration", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "runningModeStartTime", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "runningSwitchCount");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "state");
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "timestampPossible", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "type");
  if ((*((_DWORD *)this + 21) & 0x20000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(a2, "wakePending");
LABEL_20:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WakeGestureSample::readFrom(CMMsl::WakeGestureSample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 21) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_87;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 2u:
        *((_DWORD *)this + 21) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_87;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 3u:
        *((_DWORD *)this + 21) |= 0x200u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_150;
            }
            unint64_t v67 = v21++;
            char v68 = *(unsigned char *)(v22 + v67);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0) {
              break;
            }
            v65 += 7;
            BOOL v14 = v66++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_149:
              unint64_t v2 = v67 + 1;
              goto LABEL_150;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
          goto LABEL_149;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_150;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_150:
        *((_DWORD *)this + 17) = v25;
        break;
      case 4u:
        *((_DWORD *)this + 21) |= 0x400u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_155;
            }
            unint64_t v71 = v27++;
            char v72 = *(unsigned char *)(v28 + v71);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v72 & 0x7F) << v69;
            if ((v72 & 0x80) == 0) {
              break;
            }
            v69 += 7;
            BOOL v14 = v70++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_154:
              unint64_t v2 = v71 + 1;
              goto LABEL_155;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
          goto LABEL_154;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_155;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_155:
        *((_DWORD *)this + 18) = v31;
        break;
      case 5u:
        *((_DWORD *)this + 21) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v34 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v34 = v33 != 0;
        }
        *((unsigned char *)this + 76) = v34;
        break;
      case 6u:
        *((_DWORD *)this + 21) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v36 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v36 = v35 != 0;
        }
        *((unsigned char *)this + 81) = v36;
        break;
      case 7u:
        *((_DWORD *)this + 21) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v38 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v37 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v38 = v37 != 0;
        }
        *((unsigned char *)this + 79) = v38;
        break;
      case 8u:
        *((_DWORD *)this + 21) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v40 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v40 = v39 != 0;
        }
        *((unsigned char *)this + 80) = v40;
        break;
      case 9u:
        *((_DWORD *)this + 21) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v42 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v41 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v42 = v41 != 0;
        }
        *((unsigned char *)this + 78) = v42;
        break;
      case 0xAu:
        *((_DWORD *)this + 21) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v44 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v43 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v44 = v43 != 0;
        }
        *((unsigned char *)this + 82) = v44;
        break;
      case 0xBu:
        *((_DWORD *)this + 21) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v46 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v45 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v46 = v45 != 0;
        }
        *((unsigned char *)this + 77) = v46;
        break;
      case 0xCu:
        *((_DWORD *)this + 21) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_87;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 0xDu:
        *((_DWORD *)this + 21) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_87;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 0xEu:
        *((_DWORD *)this + 21) |= 0x80u;
        unint64_t v47 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v48 = *(void *)a2;
        if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
        {
          char v73 = 0;
          unsigned int v74 = 0;
          uint64_t v51 = 0;
          if (v2 <= v47) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v47)
            {
              LODWORD(v51) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_160;
            }
            unint64_t v75 = v47++;
            char v76 = *(unsigned char *)(v48 + v75);
            *((void *)a2 + 1) = v47;
            v51 |= (unint64_t)(v76 & 0x7F) << v73;
            if ((v76 & 0x80) == 0) {
              break;
            }
            v73 += 7;
            BOOL v14 = v74++ > 8;
            if (v14)
            {
              LODWORD(v51) = 0;
LABEL_159:
              unint64_t v2 = v75 + 1;
              goto LABEL_160;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v51) = 0;
          }
          goto LABEL_159;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        do
        {
          unint64_t v2 = v47 + 1;
          *((void *)a2 + 1) = v47 + 1;
          char v52 = *(unsigned char *)(v48 + v47);
          v51 |= (unint64_t)(v52 & 0x7F) << v49;
          if ((v52 & 0x80) == 0) {
            goto LABEL_160;
          }
          v49 += 7;
          unint64_t v47 = v2;
          BOOL v14 = v50++ > 8;
        }
        while (!v14);
        LODWORD(v51) = 0;
LABEL_160:
        *((_DWORD *)this + 15) = v51;
        break;
      case 0xFu:
        *((_DWORD *)this + 21) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_87;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_145;
      case 0x10u:
        *((_DWORD *)this + 21) |= 0x100u;
        unint64_t v53 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v54 = *(void *)a2;
        if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
        {
          char v77 = 0;
          unsigned int v78 = 0;
          uint64_t v57 = 0;
          if (v2 <= v53) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v53)
            {
              LODWORD(v57) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_165;
            }
            unint64_t v79 = v53++;
            char v80 = *(unsigned char *)(v54 + v79);
            *((void *)a2 + 1) = v53;
            v57 |= (unint64_t)(v80 & 0x7F) << v77;
            if ((v80 & 0x80) == 0) {
              break;
            }
            v77 += 7;
            BOOL v14 = v78++ > 8;
            if (v14)
            {
              LODWORD(v57) = 0;
LABEL_164:
              unint64_t v2 = v79 + 1;
              goto LABEL_165;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v57) = 0;
          }
          goto LABEL_164;
        }
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v57 = 0;
        do
        {
          unint64_t v2 = v53 + 1;
          *((void *)a2 + 1) = v53 + 1;
          char v58 = *(unsigned char *)(v54 + v53);
          v57 |= (unint64_t)(v58 & 0x7F) << v55;
          if ((v58 & 0x80) == 0) {
            goto LABEL_165;
          }
          v55 += 7;
          unint64_t v53 = v2;
          BOOL v14 = v56++ > 8;
        }
        while (!v14);
        LODWORD(v57) = 0;
LABEL_165:
        *((_DWORD *)this + 16) = v57;
        break;
      case 0x11u:
        *((_DWORD *)this + 21) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_145:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_87:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0x12u:
        *((_DWORD *)this + 21) |= 0x40u;
        unint64_t v59 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v60 = *(void *)a2;
        if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
        {
          char v81 = 0;
          unsigned int v82 = 0;
          uint64_t v63 = 0;
          if (v2 <= v59) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v59)
            {
              LODWORD(v63) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_170;
            }
            unint64_t v83 = v59++;
            char v84 = *(unsigned char *)(v60 + v83);
            *((void *)a2 + 1) = v59;
            v63 |= (unint64_t)(v84 & 0x7F) << v81;
            if ((v84 & 0x80) == 0) {
              break;
            }
            v81 += 7;
            BOOL v14 = v82++ > 8;
            if (v14)
            {
              LODWORD(v63) = 0;
LABEL_169:
              unint64_t v2 = v83 + 1;
              goto LABEL_170;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v63) = 0;
          }
          goto LABEL_169;
        }
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v63 = 0;
        do
        {
          unint64_t v2 = v59 + 1;
          *((void *)a2 + 1) = v59 + 1;
          char v64 = *(unsigned char *)(v60 + v59);
          v63 |= (unint64_t)(v64 & 0x7F) << v61;
          if ((v64 & 0x80) == 0) {
            goto LABEL_170;
          }
          v61 += 7;
          unint64_t v59 = v2;
          BOOL v14 = v62++ > 8;
        }
        while (!v14);
        LODWORD(v63) = 0;
LABEL_170:
        *((_DWORD *)this + 14) = v63;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::WakeGestureSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 84);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    int v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    this = PB::Writer::write(a2, *(double *)(v3 + 24));
    if ((*(_DWORD *)(v3 + 84) & 0x40) == 0) {
      return this;
    }
    goto LABEL_37;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) != 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_37:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::WakeGestureSample::hash_value(CMMsl::WakeGestureSample *this)
{
  int v1 = *((_DWORD *)this + 21);
  if ((v1 & 0x10) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_33:
    double v3 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
  double v2 = *((double *)this + 5);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  double v3 = *((double *)this + 6);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x200) != 0)
  {
LABEL_6:
    uint64_t v4 = *((int *)this + 17);
    if ((v1 & 0x400) != 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v4 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_7:
    uint64_t v5 = *((int *)this + 18);
    if ((v1 & 0x800) != 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v5 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_8:
    uint64_t v6 = *((unsigned __int8 *)this + 76);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v6 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_9:
    uint64_t v7 = *((unsigned __int8 *)this + 81);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v7 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_10:
    uint64_t v8 = *((unsigned __int8 *)this + 79);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v8 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_11:
    uint64_t v9 = *((unsigned __int8 *)this + 80);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v9 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_12:
    uint64_t v10 = *((unsigned __int8 *)this + 78);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v10 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_13:
    uint64_t v11 = *((unsigned __int8 *)this + 82);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v11 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_14:
    uint64_t v12 = *((unsigned __int8 *)this + 77);
    if ((v1 & 2) != 0) {
      goto LABEL_15;
    }
LABEL_43:
    double v13 = 0.0;
    if (v1) {
      goto LABEL_18;
    }
LABEL_44:
    double v14 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_42:
  uint64_t v12 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_43;
  }
LABEL_15:
  double v13 = *((double *)this + 2);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_18:
  double v14 = *((double *)this + 1);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_21:
    uint64_t v15 = *((int *)this + 15);
    if ((v1 & 8) != 0) {
      goto LABEL_22;
    }
LABEL_46:
    double v16 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_25;
    }
    goto LABEL_47;
  }
LABEL_45:
  uint64_t v15 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_46;
  }
LABEL_22:
  double v16 = *((double *)this + 4);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_25:
    uint64_t v17 = *((int *)this + 16);
    if ((v1 & 4) != 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v17 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_26:
    double v18 = *((double *)this + 3);
    if (v18 == 0.0) {
      double v18 = 0.0;
    }
    if ((v1 & 0x40) != 0) {
      goto LABEL_29;
    }
LABEL_49:
    uint64_t v19 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ v15 ^ *(void *)&v16 ^ v17 ^ *(void *)&v18 ^ v19;
  }
LABEL_48:
  double v18 = 0.0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_49;
  }
LABEL_29:
  uint64_t v19 = *((int *)this + 14);
  return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ v15 ^ *(void *)&v16 ^ v17 ^ *(void *)&v18 ^ v19;
}

void CMMsl::WalkingDetectionResult::~WalkingDetectionResult(CMMsl::WalkingDetectionResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::WalkingDetectionResult::WalkingDetectionResult(uint64_t this, const CMMsl::WalkingDetectionResult *a2)
{
  *(void *)this = &unk_270645B98;
  *(_DWORD *)(this + 60) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    __int16 v3 = 8;
    *(_WORD *)(this + 60) = 8;
    *(_DWORD *)(this + 24) = v4;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 28) = v5;
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 32) = v6;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 36) = v7;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v8 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 48) = v8;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 44) = v9;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v10 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 52) = v10;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  char v11 = *((unsigned char *)a2 + 59);
  v3 |= 0x4000u;
  *(_WORD *)(this + 60) = v3;
  *(unsigned char *)(this + 59) = v11;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v12 = *((unsigned char *)a2 + 58);
  v3 |= 0x2000u;
  *(_WORD *)(this + 60) = v3;
  *(unsigned char *)(this + 58) = v12;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  char v13 = *((unsigned char *)a2 + 57);
  v3 |= 0x1000u;
  *(_WORD *)(this + 60) = v3;
  *(unsigned char *)(this + 57) = v13;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v14 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 60) = v3;
  *(void *)(this + 8) = v14;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_29:
  char v15 = *((unsigned char *)a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(this + 60) = v3;
  *(unsigned char *)(this + 56) = v15;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v16 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 16) = v16;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_32:
    int v18 = *((_DWORD *)a2 + 10);
    *(_WORD *)(this + 60) = v3 | 0x80;
    *(_DWORD *)(this + 40) = v18;
    return this;
  }
LABEL_31:
  int v17 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 20) = v17;
  if ((*((_WORD *)a2 + 30) & 0x80) != 0) {
    goto LABEL_32;
  }
  return this;
}

CMMsl *CMMsl::WalkingDetectionResult::operator=(CMMsl *a1, const CMMsl::WalkingDetectionResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::WalkingDetectionResult::WalkingDetectionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WalkingDetectionResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::WalkingDetectionResult *a2, CMMsl::WalkingDetectionResult *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  int v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  int v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  int v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  int v8 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  int v9 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v9;
  int v10 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v10;
  LOBYTE(v3) = *((unsigned char *)this + 59);
  *((unsigned char *)this + 59) = *((unsigned char *)a2 + 59);
  *((unsigned char *)a2 + 59) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 58);
  *((unsigned char *)this + 58) = *((unsigned char *)a2 + 58);
  *((unsigned char *)a2 + 58) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 57);
  *((unsigned char *)this + 57) = *((unsigned char *)a2 + 57);
  *((unsigned char *)a2 + 57) = v3;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  LOBYTE(v11) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v11;
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  LODWORD(v11) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  return result;
}

float CMMsl::WalkingDetectionResult::WalkingDetectionResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645B98;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 59);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

CMMsl *CMMsl::WalkingDetectionResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::WalkingDetectionResult::WalkingDetectionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WalkingDetectionResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::WalkingDetectionResult::formatText(CMMsl::WalkingDetectionResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dataRate", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((*((_WORD *)this + 30) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isInterpolated");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isMissingSamples");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "isWalkingFiltered");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "isWalkingRaw");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "maxSampleDeltaInSecond", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "pedEnergyPlane", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "pedEnergyZ", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "pedEnergyZByPlane", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "pedEnergyZPeak", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "reversedTimestampCounts");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "thetaPitchFaceDeg", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "thetaRollFaceDeg", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "thetaYawFaceDeg", *((float *)this + 13));
  if (*((_WORD *)this + 30)) {
LABEL_16:
  }
    PB::TextFormatter::format(a2, "timestamp");
LABEL_17:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WalkingDetectionResult::readFrom(CMMsl::WalkingDetectionResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_106;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 30) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_95;
      case 2u:
        *((_WORD *)this + 30) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_95;
      case 3u:
        *((_WORD *)this + 30) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_95;
      case 4u:
        *((_WORD *)this + 30) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_95;
      case 5u:
        *((_WORD *)this + 30) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_95;
      case 6u:
        *((_WORD *)this + 30) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_95;
      case 7u:
        *((_WORD *)this + 30) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_95;
      case 8u:
        *((_WORD *)this + 30) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 59) = v21;
        break;
      case 9u:
        *((_WORD *)this + 30) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 58) = v23;
        break;
      case 0xAu:
        *((_WORD *)this + 30) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v25 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v24 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v25 = v24 != 0;
        }
        *((unsigned char *)this + 57) = v25;
        break;
      case 0xBu:
        *((_WORD *)this + 30) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_100;
            }
            unint64_t v42 = v26++;
            char v43 = *(unsigned char *)(v27 + v42);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0) {
              break;
            }
            v40 += 7;
            BOOL v14 = v41++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
LABEL_99:
              unint64_t v2 = v42 + 1;
              goto LABEL_100;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v30 = 0;
          }
          goto LABEL_99;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_100;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        uint64_t v30 = 0;
LABEL_100:
        *((void *)this + 1) = v30;
        break;
      case 0xCu:
        *((_WORD *)this + 30) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v33 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v33 = v32 != 0;
        }
        *((unsigned char *)this + 56) = v33;
        break;
      case 0xDu:
        *((_WORD *)this + 30) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_95;
      case 0xEu:
        *((_WORD *)this + 30) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_95:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_64:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xFu:
        *((_WORD *)this + 30) |= 0x80u;
        unint64_t v34 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v38 = 0;
          if (v2 <= v34) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_105;
            }
            unint64_t v46 = v34++;
            char v47 = *(unsigned char *)(v35 + v46);
            *((void *)a2 + 1) = v34;
            v38 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            BOOL v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_104:
              unint64_t v2 = v46 + 1;
              goto LABEL_105;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v38) = 0;
          }
          goto LABEL_104;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        do
        {
          unint64_t v2 = v34 + 1;
          *((void *)a2 + 1) = v34 + 1;
          char v39 = *(unsigned char *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0) {
            goto LABEL_105;
          }
          v36 += 7;
          unint64_t v34 = v2;
          BOOL v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_105:
        *((_DWORD *)this + 10) = v38;
        break;
      default:
        goto LABEL_19;
    }
LABEL_106:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::WalkingDetectionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 24));
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
LABEL_30:
    this = PB::Writer::write(a2, *(float *)(v3 + 20));
    if ((*(_WORD *)(v3 + 60) & 0x80) == 0) {
      return this;
    }
    goto LABEL_31;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) != 0) {
    goto LABEL_30;
  }
LABEL_15:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_31:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::WalkingDetectionResult::hash_value(CMMsl::WalkingDetectionResult *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 8) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v4 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_37:
    uint64_t v6 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_9;
    }
LABEL_38:
    uint64_t v8 = 0;
    if ((*((_WORD *)this + 30) & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_39:
    uint64_t v10 = 0;
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_15;
    }
LABEL_40:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0) {
      goto LABEL_18;
    }
LABEL_41:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 30) & 0x4000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }
  float v25 = *((float *)this + 6);
  uint64_t v2 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_36;
  }
LABEL_3:
  float v3 = *((float *)this + 7);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_37;
  }
LABEL_6:
  float v5 = *((float *)this + 8);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_38;
  }
LABEL_9:
  float v7 = *((float *)this + 9);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x200) == 0) {
    goto LABEL_39;
  }
LABEL_12:
  float v9 = *((float *)this + 12);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x100) == 0) {
    goto LABEL_40;
  }
LABEL_15:
  float v11 = *((float *)this + 11);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x400) == 0) {
    goto LABEL_41;
  }
LABEL_18:
  float v13 = *((float *)this + 13);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x4000) != 0)
  {
LABEL_21:
    uint64_t v15 = *((unsigned __int8 *)this + 59);
    if ((*((_WORD *)this + 30) & 0x2000) != 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v15 = 0;
  if ((*((_WORD *)this + 30) & 0x2000) != 0)
  {
LABEL_22:
    uint64_t v16 = *((unsigned __int8 *)this + 58);
    if ((*((_WORD *)this + 30) & 0x1000) != 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v16 = 0;
  if ((*((_WORD *)this + 30) & 0x1000) != 0)
  {
LABEL_23:
    uint64_t v17 = *((unsigned __int8 *)this + 57);
    if (v1) {
      goto LABEL_24;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v17 = 0;
  if (v1)
  {
LABEL_24:
    uint64_t v18 = *((void *)this + 1);
    if ((*((_WORD *)this + 30) & 0x800) != 0) {
      goto LABEL_25;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v18 = 0;
  if ((*((_WORD *)this + 30) & 0x800) != 0)
  {
LABEL_25:
    uint64_t v19 = *((unsigned __int8 *)this + 56);
    if ((v1 & 2) != 0) {
      goto LABEL_26;
    }
LABEL_47:
    uint64_t v21 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_29;
    }
    goto LABEL_48;
  }
LABEL_46:
  uint64_t v19 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_47;
  }
LABEL_26:
  float v20 = *((float *)this + 4);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_29:
    float v22 = *((float *)this + 5);
    uint64_t v23 = LODWORD(v22);
    if (v22 == 0.0) {
      uint64_t v23 = 0;
    }
    if ((v1 & 0x80) != 0) {
      goto LABEL_32;
    }
LABEL_49:
    uint64_t v24 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v21 ^ v23 ^ v24;
  }
LABEL_48:
  uint64_t v23 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_49;
  }
LABEL_32:
  uint64_t v24 = *((unsigned int *)this + 10);
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v21 ^ v23 ^ v24;
}

void CMMsl::WalkingSteadinessClassification::~WalkingSteadinessClassification(CMMsl::WalkingSteadinessClassification *this)
{
  *(void *)this = &unk_270645BD0;
  uint64_t v2 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WalkingSteadinessClassification::~WalkingSteadinessClassification(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification(uint64_t this, const CMMsl::WalkingSteadinessClassification *a2)
{
  *(void *)this = &unk_270645BD0;
  *(void *)(this + 64) = 0;
  *(_OWORD *)(this + 88) = 0u;
  *(_DWORD *)(this + 244) = 0;
  *(_OWORD *)(this + 104) = 0u;
  *(_OWORD *)(this + 120) = 0u;
  *(_OWORD *)(this + 136) = 0u;
  *(_OWORD *)(this + 152) = 0u;
  *(void *)(this + 168) = 0;
  int v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x100) != 0)
  {
    uint64_t v4 = *((void *)a2 + 10);
    int v3 = 256;
    *(_DWORD *)(this + 244) = 256;
    *(void *)(this + 80) = v4;
    int v2 = *((_DWORD *)a2 + 61);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 9);
    v3 |= 0x80u;
    *(_DWORD *)(this + 244) = v3;
    *(void *)(this + 72) = v5;
    int v2 = *((_DWORD *)a2 + 61);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    int v12 = *((_DWORD *)a2 + 55);
    v3 |= 0x10000u;
    *(_DWORD *)(this + 244) = v3;
    *(_DWORD *)(this + 220) = v12;
    int v2 = *((_DWORD *)a2 + 61);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_62;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  int v13 = *((_DWORD *)a2 + 54);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 244) = v3;
  *(_DWORD *)(this + 216) = v13;
  int v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x40000) == 0)
  {
LABEL_9:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v14 = *((_DWORD *)a2 + 57);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 244) = v3;
  *(_DWORD *)(this + 228) = v14;
  int v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_64;
  }
LABEL_63:
  char v15 = *((unsigned char *)a2 + 241);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 244) = v3;
  *(unsigned char *)(this + 241) = v15;
  int v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x80000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v16 = *((_DWORD *)a2 + 58);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 244) = v3;
  *(_DWORD *)(this + 232) = v16;
  int v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_66;
  }
LABEL_65:
  char v17 = *((unsigned char *)a2 + 242);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 244) = v3;
  *(unsigned char *)(this + 242) = v17;
  int v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_66:
  uint64_t v18 = *((void *)a2 + 22);
  v3 |= 0x200u;
  *(_DWORD *)(this + 244) = v3;
  *(void *)(this + 176) = v18;
  if ((*((_DWORD *)a2 + 61) & 0x400000) != 0)
  {
LABEL_14:
    char v6 = *((unsigned char *)a2 + 238);
    *(_DWORD *)(this + 244) = v3 | 0x400000;
    *(unsigned char *)(this + 238) = v6;
  }
LABEL_15:
  if (*((void *)a2 + 8)) {
    operator new();
  }
  int v7 = *((_DWORD *)a2 + 61);
  if ((v7 & 0x800) != 0)
  {
    uint64_t v19 = *((void *)a2 + 24);
    *(_DWORD *)(this + 244) |= 0x800u;
    *(void *)(this + 192) = v19;
    int v7 = *((_DWORD *)a2 + 61);
    if ((v7 & 0x800000) == 0)
    {
LABEL_19:
      if ((v7 & 0x400) == 0) {
        goto LABEL_20;
      }
      goto LABEL_70;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_19;
  }
  char v20 = *((unsigned char *)a2 + 239);
  *(_DWORD *)(this + 244) |= 0x800000u;
  *(unsigned char *)(this + 239) = v20;
  int v7 = *((_DWORD *)a2 + 61);
  if ((v7 & 0x400) == 0)
  {
LABEL_20:
    if ((v7 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_70:
  uint64_t v21 = *((void *)a2 + 23);
  *(_DWORD *)(this + 244) |= 0x400u;
  *(void *)(this + 184) = v21;
  if ((*((_DWORD *)a2 + 61) & 0x200000) != 0)
  {
LABEL_21:
    char v8 = *((unsigned char *)a2 + 237);
    *(_DWORD *)(this + 244) |= 0x200000u;
    *(unsigned char *)(this + 237) = v8;
  }
LABEL_22:
  if (*((void *)a2 + 15)) {
    operator new();
  }
  if (*((void *)a2 + 14)) {
    operator new();
  }
  if (*((void *)a2 + 13)) {
    operator new();
  }
  if (*((void *)a2 + 12)) {
    operator new();
  }
  if (*((void *)a2 + 19)) {
    operator new();
  }
  if (*((void *)a2 + 18)) {
    operator new();
  }
  if (*((void *)a2 + 21)) {
    operator new();
  }
  if (*((void *)a2 + 20)) {
    operator new();
  }
  if ((*((unsigned char *)a2 + 246) & 0x10) != 0)
  {
    char v9 = *((unsigned char *)a2 + 236);
    *(_DWORD *)(this + 244) |= 0x100000u;
    *(unsigned char *)(this + 236) = v9;
  }
  if (*((void *)a2 + 11)) {
    operator new();
  }
  int v10 = *((_DWORD *)a2 + 61);
  if (v10)
  {
    uint64_t v22 = *((void *)a2 + 1);
    *(_DWORD *)(this + 244) |= 1u;
    *(void *)(this + 8) = v22;
    int v10 = *((_DWORD *)a2 + 61);
    if ((v10 & 8) == 0)
    {
LABEL_44:
      if ((v10 & 0x20000) == 0) {
        goto LABEL_45;
      }
      goto LABEL_74;
    }
  }
  else if ((v10 & 8) == 0)
  {
    goto LABEL_44;
  }
  uint64_t v23 = *((void *)a2 + 4);
  *(_DWORD *)(this + 244) |= 8u;
  *(void *)(this + 32) = v23;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x20000) == 0)
  {
LABEL_45:
    if ((v10 & 0x1000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_75;
  }
LABEL_74:
  int v24 = *((_DWORD *)a2 + 56);
  *(_DWORD *)(this + 244) |= 0x20000u;
  *(_DWORD *)(this + 224) = v24;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_76;
  }
LABEL_75:
  char v25 = *((unsigned char *)a2 + 240);
  *(_DWORD *)(this + 244) |= 0x1000000u;
  *(unsigned char *)(this + 240) = v25;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x1000) == 0)
  {
LABEL_47:
    if ((v10 & 0x40) == 0) {
      goto LABEL_48;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v26 = *((void *)a2 + 25);
  *(_DWORD *)(this + 244) |= 0x1000u;
  *(void *)(this + 200) = v26;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x40) == 0)
  {
LABEL_48:
    if ((v10 & 2) == 0) {
      goto LABEL_49;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t v27 = *((void *)a2 + 7);
  *(_DWORD *)(this + 244) |= 0x40u;
  *(void *)(this + 56) = v27;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 2) == 0)
  {
LABEL_49:
    if ((v10 & 0x10) == 0) {
      goto LABEL_50;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t v28 = *((void *)a2 + 2);
  *(_DWORD *)(this + 244) |= 2u;
  *(void *)(this + 16) = v28;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x10) == 0)
  {
LABEL_50:
    if ((v10 & 0x4000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t v29 = *((void *)a2 + 5);
  *(_DWORD *)(this + 244) |= 0x10u;
  *(void *)(this + 40) = v29;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x4000) == 0)
  {
LABEL_51:
    if ((v10 & 0x2000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_81;
  }
LABEL_80:
  int v30 = *((_DWORD *)a2 + 53);
  *(_DWORD *)(this + 244) |= 0x4000u;
  *(_DWORD *)(this + 212) = v30;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x2000) == 0)
  {
LABEL_52:
    if ((v10 & 0x20) == 0) {
      goto LABEL_53;
    }
    goto LABEL_82;
  }
LABEL_81:
  int v31 = *((_DWORD *)a2 + 52);
  *(_DWORD *)(this + 244) |= 0x2000u;
  *(_DWORD *)(this + 208) = v31;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x20) == 0)
  {
LABEL_53:
    if ((v10 & 4) == 0) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_82:
  uint64_t v32 = *((void *)a2 + 6);
  *(_DWORD *)(this + 244) |= 0x20u;
  *(void *)(this + 48) = v32;
  if ((*((_DWORD *)a2 + 61) & 4) != 0)
  {
LABEL_54:
    uint64_t v11 = *((void *)a2 + 3);
    *(_DWORD *)(this + 244) |= 4u;
    *(void *)(this + 24) = v11;
  }
LABEL_55:
  if (*((void *)a2 + 17)) {
    operator new();
  }
  if (*((void *)a2 + 16)) {
    operator new();
  }
  return this;
}

CMMsl *CMMsl::WalkingSteadinessClassification::operator=(CMMsl *a1, const CMMsl::WalkingSteadinessClassification *a2)
{
  if (a1 != a2)
  {
    CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WalkingSteadinessClassification *)v5, v3);
    CMMsl::WalkingSteadinessClassification::~WalkingSteadinessClassification((CMMsl::WalkingSteadinessClassification *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WalkingSteadinessClassification *a2, CMMsl::WalkingSteadinessClassification *a3)
{
  int v3 = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v3;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v5;
  int v6 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v6;
  int v7 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v7;
  LODWORD(v5) = *((_DWORD *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = v5;
  LOBYTE(v7) = *((unsigned char *)this + 241);
  *((unsigned char *)this + 241) = *((unsigned char *)a2 + 241);
  *((unsigned char *)a2 + 241) = v7;
  LODWORD(v5) = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v5;
  LOBYTE(v7) = *((unsigned char *)this + 242);
  *((unsigned char *)this + 242) = *((unsigned char *)a2 + 242);
  *((unsigned char *)a2 + 242) = v7;
  uint64_t v8 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v8;
  LOBYTE(v7) = *((unsigned char *)this + 238);
  *((unsigned char *)this + 238) = *((unsigned char *)a2 + 238);
  *((unsigned char *)a2 + 238) = v7;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v10;
  LOBYTE(v9) = *((unsigned char *)this + 239);
  *((unsigned char *)this + 239) = *((unsigned char *)a2 + 239);
  *((unsigned char *)a2 + 239) = v9;
  uint64_t v11 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v11;
  LOBYTE(v9) = *((unsigned char *)this + 237);
  *((unsigned char *)this + 237) = *((unsigned char *)a2 + 237);
  *((unsigned char *)a2 + 237) = v9;
  uint64_t v12 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v12;
  uint64_t v13 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v13;
  uint64_t v14 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v14;
  uint64_t v15 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v15;
  uint64_t v16 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v16;
  uint64_t v17 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v17;
  uint64_t v18 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v18;
  uint64_t v19 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v19;
  LOBYTE(v19) = *((unsigned char *)this + 236);
  *((unsigned char *)this + 236) = *((unsigned char *)a2 + 236);
  *((unsigned char *)a2 + 236) = v19;
  uint64_t v20 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v20;
  uint64_t v21 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v21;
  uint64_t v22 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v22;
  LODWORD(v22) = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v22;
  LOBYTE(v20) = *((unsigned char *)this + 240);
  *((unsigned char *)this + 240) = *((unsigned char *)a2 + 240);
  *((unsigned char *)a2 + 240) = v20;
  uint64_t v23 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v23;
  uint64_t v24 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v24;
  uint64_t v25 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v25;
  uint64_t v26 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v26;
  LODWORD(v20) = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v20;
  LODWORD(v20) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v20;
  uint64_t v27 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v27;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  uint64_t v29 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v29;
  uint64_t v30 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v30;
  return result;
}

uint64_t CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645BD0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a2 + 244) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(unsigned char *)(a1 + 241) = *(unsigned char *)(a2 + 241);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 238) = *(unsigned char *)(a2 + 238);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 239) = *(unsigned char *)(a2 + 239);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 237) = *(unsigned char *)(a2 + 237);
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  uint64_t v7 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v9 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v11 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  uint64_t v13 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v12;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  uint64_t v15 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = v14;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = 0;
  uint64_t v17 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v16;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  uint64_t v19 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v18;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  uint64_t v21 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v20;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  *(unsigned char *)(a1 + 236) = *(unsigned char *)(a2 + 236);
  uint64_t v22 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  uint64_t v23 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v22;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v24 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  uint64_t v25 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v24;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  uint64_t v27 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v26;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  return a1;
}

CMMsl *CMMsl::WalkingSteadinessClassification::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WalkingSteadinessClassification *)v5, v3);
    CMMsl::WalkingSteadinessClassification::~WalkingSteadinessClassification((CMMsl::WalkingSteadinessClassification *)v5);
  }
  return a1;
}

uint64_t CMMsl::WalkingSteadinessClassification::formatText(CMMsl::WalkingSteadinessClassification *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x100000) != 0)
  {
    PB::TextFormatter::format(a2, "appliedBoutMetricCorrections");
    int v5 = *((_DWORD *)this + 61);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_60;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dailyFlights30daysMax", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "dailyFlights30daysMean", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "dailySteps30DaysTotal", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "dailySteps30daysMax", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "dailySteps30daysMean", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "dailySteps7DaysTotal", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "dailySteps7daysMean", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "daysWithSteps30Days");
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "daysWithSteps7Days");
  if ((*((_DWORD *)this + 61) & 0x8000) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "errorStatus");
LABEL_13:
  uint64_t v6 = *((void *)this + 8);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "eventResult");
  }
  int v7 = *((_DWORD *)this + 61);
  if ((v7 & 0x200000) != 0)
  {
    PB::TextFormatter::format(a2, "fusionSuccess");
    int v7 = *((_DWORD *)this + 61);
    if ((v7 & 0x80) == 0)
    {
LABEL_17:
      if ((v7 & 0x100) == 0) {
        goto LABEL_18;
      }
      goto LABEL_71;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_17;
  }
  PB::TextFormatter::format(a2, "hkEndTime", *((double *)this + 9));
  int v7 = *((_DWORD *)this + 61);
  if ((v7 & 0x100) == 0)
  {
LABEL_18:
    if ((v7 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "hkStartTime", *((double *)this + 10));
  if ((*((_DWORD *)this + 61) & 0x400000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(a2, "isHistoricalCompute");
LABEL_20:
  uint64_t v8 = *((void *)this + 11);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "modelBalanceFeatures");
  }
  uint64_t v9 = *((void *)this + 12);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "modelContinuousWalkingFeatures");
  }
  uint64_t v10 = *((void *)this + 13);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "modelContinuousWalkingResult");
  }
  uint64_t v11 = *((void *)this + 14);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "modelGaitBaselineFeatures");
  }
  uint64_t v12 = *((void *)this + 15);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "modelGaitBaselineResult");
  }
  uint64_t v13 = *((void *)this + 16);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "modelHarmonicFeatures");
  }
  uint64_t v14 = *((void *)this + 17);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, a2, "modelHarmonicResult");
  }
  uint64_t v15 = *((void *)this + 18);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, a2, "modelTemporalDispersionFeatures");
  }
  uint64_t v16 = *((void *)this + 19);
  if (v16) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32))(v16, a2, "modelTemporalDispersionResult");
  }
  uint64_t v17 = *((void *)this + 20);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, a2, "modelTemporalEntropyFeatures");
  }
  uint64_t v18 = *((void *)this + 21);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32))(v18, a2, "modelTemporalEntropyResult");
  }
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "nextClassificationTime", *((double *)this + 22));
    int v19 = *((_DWORD *)this + 61);
    if ((v19 & 0x400) == 0)
    {
LABEL_44:
      if ((v19 & 0x10000) == 0) {
        goto LABEL_45;
      }
      goto LABEL_75;
    }
  }
  else if ((v19 & 0x400) == 0)
  {
    goto LABEL_44;
  }
  PB::TextFormatter::format(a2, "rawSteadiness", *((double *)this + 23));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x10000) == 0)
  {
LABEL_45:
    if ((v19 & 0x800) == 0) {
      goto LABEL_46;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "rejectionStatus");
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x800) == 0)
  {
LABEL_46:
    if ((v19 & 0x800000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "steadinessScore", *((double *)this + 24));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x800000) == 0)
  {
LABEL_47:
    if ((v19 & 0x1000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "steadinessScoreIsValid");
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x1000) == 0)
  {
LABEL_48:
    if ((v19 & 0x20000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "unadjustedScore", *((double *)this + 25));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x20000) == 0)
  {
LABEL_49:
    if ((v19 & 0x40000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "userAge", *((float *)this + 56));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x40000) == 0)
  {
LABEL_50:
    if ((v19 & 0x1000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "userHeight", *((float *)this + 57));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x1000000) == 0)
  {
LABEL_51:
    if ((v19 & 0x2000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "userIsAgeSet");
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x2000000) == 0)
  {
LABEL_52:
    if ((v19 & 0x4000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "userIsHeightSet");
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x4000000) == 0)
  {
LABEL_53:
    if ((v19 & 0x80000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "userIsWeightSet");
  if ((*((_DWORD *)this + 61) & 0x80000) != 0) {
LABEL_54:
  }
    PB::TextFormatter::format(a2, "userWeight", *((float *)this + 58));
LABEL_55:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WalkingSteadinessClassification::readFrom(CMMsl::WalkingSteadinessClassification *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 61) |= 0x100u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v20);
        goto LABEL_169;
      case 2u:
        *((_DWORD *)this + 61) |= 0x80u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v21);
        goto LABEL_169;
      case 4u:
        *((_DWORD *)this + 61) |= 0x10000u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = *(void *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          do
          {
            unint64_t v28 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              goto LABEL_174;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v14 = v26++ > 8;
          }
          while (!v14);
LABEL_132:
          LODWORD(v27) = 0;
          goto LABEL_174;
        }
        char v97 = 0;
        unsigned int v98 = 0;
        uint64_t v27 = 0;
        if (v23 <= v22) {
          unint64_t v23 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v99 = v22 + 1;
            char v100 = *(unsigned char *)(v24 + v22);
            *((void *)a2 + 1) = v99;
            v27 |= (unint64_t)(v100 & 0x7F) << v97;
            if (v100 < 0)
            {
              v97 += 7;
              unint64_t v22 = v99;
              BOOL v14 = v98++ > 8;
              if (v14) {
                goto LABEL_132;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v27) = 0;
            }
          }
          break;
        }
LABEL_174:
        *((_DWORD *)this + 55) = v27;
        goto LABEL_187;
      case 5u:
        *((_DWORD *)this + 61) |= 0x8000u;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        uint64_t v32 = *(void *)a2;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          do
          {
            unint64_t v36 = v30 + 1;
            *((void *)a2 + 1) = v30 + 1;
            char v37 = *(unsigned char *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0) {
              goto LABEL_178;
            }
            v33 += 7;
            unint64_t v30 = v36;
            BOOL v14 = v34++ > 8;
          }
          while (!v14);
LABEL_139:
          LODWORD(v35) = 0;
          goto LABEL_178;
        }
        char v101 = 0;
        unsigned int v102 = 0;
        uint64_t v35 = 0;
        if (v31 <= v30) {
          unint64_t v31 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v31 == v30)
          {
            LODWORD(v35) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v103 = v30 + 1;
            char v104 = *(unsigned char *)(v32 + v30);
            *((void *)a2 + 1) = v103;
            v35 |= (unint64_t)(v104 & 0x7F) << v101;
            if (v104 < 0)
            {
              v101 += 7;
              unint64_t v30 = v103;
              BOOL v14 = v102++ > 8;
              if (v14) {
                goto LABEL_139;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v35) = 0;
            }
          }
          break;
        }
LABEL_178:
        *((_DWORD *)this + 54) = v35;
        goto LABEL_187;
      case 6u:
        *((_DWORD *)this + 61) |= 0x40000u;
        unint64_t v38 = *((void *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((_DWORD *)this + 57) = *(_DWORD *)(*(void *)a2 + v38);
        goto LABEL_89;
      case 7u:
        *((_DWORD *)this + 61) |= 0x2000000u;
        unint64_t v39 = *((void *)a2 + 1);
        if (v39 >= *((void *)a2 + 2))
        {
          BOOL v42 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v40 = v39 + 1;
          int v41 = *(unsigned __int8 *)(*(void *)a2 + v39);
          *((void *)a2 + 1) = v40;
          BOOL v42 = v41 != 0;
        }
        *((unsigned char *)this + 241) = v42;
        goto LABEL_187;
      case 8u:
        *((_DWORD *)this + 61) |= 0x80000u;
        unint64_t v43 = *((void *)a2 + 1);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((_DWORD *)this + 58) = *(_DWORD *)(*(void *)a2 + v43);
        goto LABEL_89;
      case 9u:
        *((_DWORD *)this + 61) |= 0x4000000u;
        unint64_t v44 = *((void *)a2 + 1);
        if (v44 >= *((void *)a2 + 2))
        {
          BOOL v47 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v45 = v44 + 1;
          int v46 = *(unsigned __int8 *)(*(void *)a2 + v44);
          *((void *)a2 + 1) = v45;
          BOOL v47 = v46 != 0;
        }
        *((unsigned char *)this + 242) = v47;
        goto LABEL_187;
      case 0xAu:
        *((_DWORD *)this + 61) |= 0x200u;
        unint64_t v48 = *((void *)a2 + 1);
        if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((void *)this + 22) = *(void *)(*(void *)a2 + v48);
        goto LABEL_169;
      case 0xBu:
        *((_DWORD *)this + 61) |= 0x400000u;
        unint64_t v49 = *((void *)a2 + 1);
        if (v49 >= *((void *)a2 + 2))
        {
          BOOL v52 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v50 = v49 + 1;
          int v51 = *(unsigned __int8 *)(*(void *)a2 + v49);
          *((void *)a2 + 1) = v50;
          BOOL v52 = v51 != 0;
        }
        *((unsigned char *)this + 238) = v52;
        goto LABEL_187;
      case 0xCu:
        operator new();
      case 0xDu:
        *((_DWORD *)this + 61) |= 0x800u;
        unint64_t v53 = *((void *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((void *)this + 24) = *(void *)(*(void *)a2 + v53);
        goto LABEL_169;
      case 0xEu:
        *((_DWORD *)this + 61) |= 0x800000u;
        unint64_t v54 = *((void *)a2 + 1);
        if (v54 >= *((void *)a2 + 2))
        {
          BOOL v57 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v55 = v54 + 1;
          int v56 = *(unsigned __int8 *)(*(void *)a2 + v54);
          *((void *)a2 + 1) = v55;
          BOOL v57 = v56 != 0;
        }
        *((unsigned char *)this + 239) = v57;
        goto LABEL_187;
      case 0xFu:
        *((_DWORD *)this + 61) |= 0x400u;
        unint64_t v58 = *((void *)a2 + 1);
        if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((void *)this + 23) = *(void *)(*(void *)a2 + v58);
        goto LABEL_169;
      case 0x10u:
        *((_DWORD *)this + 61) |= 0x200000u;
        unint64_t v59 = *((void *)a2 + 1);
        if (v59 >= *((void *)a2 + 2))
        {
          BOOL v62 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v60 = v59 + 1;
          int v61 = *(unsigned __int8 *)(*(void *)a2 + v59);
          *((void *)a2 + 1) = v60;
          BOOL v62 = v61 != 0;
        }
        *((unsigned char *)this + 237) = v62;
        goto LABEL_187;
      case 0x11u:
        operator new();
      case 0x12u:
        operator new();
      case 0x13u:
        operator new();
      case 0x14u:
        operator new();
      case 0x15u:
        operator new();
      case 0x16u:
        operator new();
      case 0x17u:
        operator new();
      case 0x18u:
        operator new();
      case 0x19u:
        *((_DWORD *)this + 61) |= 0x100000u;
        unint64_t v63 = *((void *)a2 + 1);
        if (v63 >= *((void *)a2 + 2))
        {
          BOOL v66 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v64 = v63 + 1;
          int v65 = *(unsigned __int8 *)(*(void *)a2 + v63);
          *((void *)a2 + 1) = v64;
          BOOL v66 = v65 != 0;
        }
        *((unsigned char *)this + 236) = v66;
        goto LABEL_187;
      case 0x1Au:
        operator new();
      case 0x1Bu:
        *((_DWORD *)this + 61) |= 1u;
        unint64_t v67 = *((void *)a2 + 1);
        if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v67);
        goto LABEL_169;
      case 0x1Cu:
        *((_DWORD *)this + 61) |= 8u;
        unint64_t v68 = *((void *)a2 + 1);
        if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v68);
        goto LABEL_169;
      case 0x1Du:
        *((_DWORD *)this + 61) |= 0x20000u;
        unint64_t v69 = *((void *)a2 + 1);
        if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((_DWORD *)this + 56) = *(_DWORD *)(*(void *)a2 + v69);
LABEL_89:
        uint64_t v70 = *((void *)a2 + 1) + 4;
        goto LABEL_170;
      case 0x1Eu:
        *((_DWORD *)this + 61) |= 0x1000000u;
        unint64_t v71 = *((void *)a2 + 1);
        if (v71 >= *((void *)a2 + 2))
        {
          BOOL v74 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v72 = v71 + 1;
          int v73 = *(unsigned __int8 *)(*(void *)a2 + v71);
          *((void *)a2 + 1) = v72;
          BOOL v74 = v73 != 0;
        }
        *((unsigned char *)this + 240) = v74;
        goto LABEL_187;
      case 0x1Fu:
        *((_DWORD *)this + 61) |= 0x1000u;
        unint64_t v75 = *((void *)a2 + 1);
        if (v75 > 0xFFFFFFFFFFFFFFF7 || v75 + 8 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((void *)this + 25) = *(void *)(*(void *)a2 + v75);
        goto LABEL_169;
      case 0x20u:
        *((_DWORD *)this + 61) |= 0x40u;
        unint64_t v76 = *((void *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v76);
        goto LABEL_169;
      case 0x21u:
        *((_DWORD *)this + 61) |= 2u;
        unint64_t v77 = *((void *)a2 + 1);
        if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v77);
        goto LABEL_169;
      case 0x22u:
        *((_DWORD *)this + 61) |= 0x10u;
        unint64_t v78 = *((void *)a2 + 1);
        if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v78);
        goto LABEL_169;
      case 0x23u:
        *((_DWORD *)this + 61) |= 0x4000u;
        unint64_t v79 = *((void *)a2 + 1);
        unint64_t v80 = *((void *)a2 + 2);
        uint64_t v81 = *(void *)a2;
        if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
        {
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v84 = 0;
          do
          {
            unint64_t v85 = v79 + 1;
            *((void *)a2 + 1) = v79 + 1;
            char v86 = *(unsigned char *)(v81 + v79);
            v84 |= (unint64_t)(v86 & 0x7F) << v82;
            if ((v86 & 0x80) == 0) {
              goto LABEL_182;
            }
            v82 += 7;
            unint64_t v79 = v85;
            BOOL v14 = v83++ > 8;
          }
          while (!v14);
LABEL_160:
          LODWORD(v84) = 0;
          goto LABEL_182;
        }
        char v105 = 0;
        unsigned int v106 = 0;
        uint64_t v84 = 0;
        if (v80 <= v79) {
          unint64_t v80 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v80 == v79)
          {
            LODWORD(v84) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v107 = v79 + 1;
            char v108 = *(unsigned char *)(v81 + v79);
            *((void *)a2 + 1) = v107;
            v84 |= (unint64_t)(v108 & 0x7F) << v105;
            if (v108 < 0)
            {
              v105 += 7;
              unint64_t v79 = v107;
              BOOL v14 = v106++ > 8;
              if (v14) {
                goto LABEL_160;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v84) = 0;
            }
          }
          break;
        }
LABEL_182:
        *((_DWORD *)this + 53) = v84;
        goto LABEL_187;
      case 0x24u:
        *((_DWORD *)this + 61) |= 0x2000u;
        unint64_t v87 = *((void *)a2 + 1);
        unint64_t v88 = *((void *)a2 + 2);
        uint64_t v89 = *(void *)a2;
        if (v87 <= 0xFFFFFFFFFFFFFFF5 && v87 + 10 <= v88)
        {
          char v90 = 0;
          unsigned int v91 = 0;
          uint64_t v92 = 0;
          do
          {
            unint64_t v93 = v87 + 1;
            *((void *)a2 + 1) = v87 + 1;
            char v94 = *(unsigned char *)(v89 + v87);
            v92 |= (unint64_t)(v94 & 0x7F) << v90;
            if ((v94 & 0x80) == 0) {
              goto LABEL_186;
            }
            v90 += 7;
            unint64_t v87 = v93;
            BOOL v14 = v91++ > 8;
          }
          while (!v14);
LABEL_167:
          LODWORD(v92) = 0;
          goto LABEL_186;
        }
        char v109 = 0;
        unsigned int v110 = 0;
        uint64_t v92 = 0;
        if (v88 <= v87) {
          unint64_t v88 = *((void *)a2 + 1);
        }
        break;
      case 0x25u:
        *((_DWORD *)this + 61) |= 0x20u;
        unint64_t v95 = *((void *)a2 + 1);
        if (v95 > 0xFFFFFFFFFFFFFFF7 || v95 + 8 > *((void *)a2 + 2)) {
          goto LABEL_123;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v95);
        goto LABEL_169;
      case 0x26u:
        *((_DWORD *)this + 61) |= 4u;
        unint64_t v96 = *((void *)a2 + 1);
        if (v96 <= 0xFFFFFFFFFFFFFFF7 && v96 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 3) = *(void *)(*(void *)a2 + v96);
LABEL_169:
          uint64_t v70 = *((void *)a2 + 1) + 8;
LABEL_170:
          *((void *)a2 + 1) = v70;
        }
        else
        {
LABEL_123:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_187;
      case 0x27u:
        operator new();
      case 0x28u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v88 == v87)
      {
        LODWORD(v92) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_186;
      }
      unint64_t v111 = v87 + 1;
      char v112 = *(unsigned char *)(v89 + v87);
      *((void *)a2 + 1) = v111;
      v92 |= (unint64_t)(v112 & 0x7F) << v109;
      if ((v112 & 0x80) == 0) {
        break;
      }
      v109 += 7;
      unint64_t v87 = v111;
      BOOL v14 = v110++ > 8;
      if (v14) {
        goto LABEL_167;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v92) = 0;
    }
LABEL_186:
    *((_DWORD *)this + 52) = v92;
LABEL_187:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_187;
  }
  return result;
}

uint64_t CMMsl::WalkingSteadinessClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 244);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 80));
    int v4 = *(_DWORD *)(v3 + 244);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_60;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 228));
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 232));
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(double *)(v3 + 176));
  if ((*(_DWORD *)(v3 + 244) & 0x400000) != 0) {
LABEL_11:
  }
    this = PB::Writer::write(a2);
LABEL_12:
  int v5 = *(const PB::Base **)(v3 + 64);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  int v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 192));
    int v6 = *(_DWORD *)(v3 + 244);
    if ((v6 & 0x800000) == 0)
    {
LABEL_16:
      if ((v6 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_70;
    }
  }
  else if ((v6 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::write(a2);
  int v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x400) == 0)
  {
LABEL_17:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(double *)(v3 + 184));
  if ((*(_DWORD *)(v3 + 244) & 0x200000) != 0) {
LABEL_18:
  }
    this = PB::Writer::write(a2);
LABEL_19:
  int v7 = *(const PB::Base **)(v3 + 120);
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = *(const PB::Base **)(v3 + 112);
  if (v8) {
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  char v9 = *(const PB::Base **)(v3 + 104);
  if (v9) {
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  unsigned int v10 = *(const PB::Base **)(v3 + 96);
  if (v10) {
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  unint64_t v11 = *(const PB::Base **)(v3 + 152);
  if (v11) {
    this = PB::Writer::writeSubmessage(a2, v11);
  }
  unint64_t v12 = *(const PB::Base **)(v3 + 144);
  if (v12) {
    this = PB::Writer::writeSubmessage(a2, v12);
  }
  char v13 = *(const PB::Base **)(v3 + 168);
  if (v13) {
    this = PB::Writer::writeSubmessage(a2, v13);
  }
  BOOL v14 = *(const PB::Base **)(v3 + 160);
  if (v14) {
    this = PB::Writer::writeSubmessage(a2, v14);
  }
  if ((*(unsigned char *)(v3 + 246) & 0x10) != 0) {
    this = PB::Writer::write(a2);
  }
  char v15 = *(const PB::Base **)(v3 + 88);
  if (v15) {
    this = PB::Writer::writeSubmessage(a2, v15);
  }
  int v16 = *(_DWORD *)(v3 + 244);
  if (v16)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    int v16 = *(_DWORD *)(v3 + 244);
    if ((v16 & 8) == 0)
    {
LABEL_41:
      if ((v16 & 0x20000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_74;
    }
  }
  else if ((v16 & 8) == 0)
  {
    goto LABEL_41;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20000) == 0)
  {
LABEL_42:
    if ((v16 & 0x1000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 224));
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v16 & 0x1000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000) == 0)
  {
LABEL_44:
    if ((v16 & 0x40) == 0) {
      goto LABEL_45;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(double *)(v3 + 200));
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x40) == 0)
  {
LABEL_45:
    if ((v16 & 2) == 0) {
      goto LABEL_46;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 2) == 0)
  {
LABEL_46:
    if ((v16 & 0x10) == 0) {
      goto LABEL_47;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x10) == 0)
  {
LABEL_47:
    if ((v16 & 0x4000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x4000) == 0)
  {
LABEL_48:
    if ((v16 & 0x2000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x2000) == 0)
  {
LABEL_49:
    if ((v16 & 0x20) == 0) {
      goto LABEL_50;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::writeVarInt(a2);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20) == 0)
  {
LABEL_50:
    if ((v16 & 4) == 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  if ((*(_DWORD *)(v3 + 244) & 4) != 0) {
LABEL_51:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 24));
LABEL_52:
  unint64_t v17 = *(const PB::Base **)(v3 + 136);
  if (v17) {
    this = PB::Writer::writeSubmessage(a2, v17);
  }
  char v18 = *(const PB::Base **)(v3 + 128);
  if (v18)
  {
    return PB::Writer::writeSubmessage(a2, v18);
  }
  return this;
}

unint64_t CMMsl::WalkingSteadinessClassification::hash_value(CMMsl::WalkingSteadinessClassification *this)
{
  int v2 = *((_DWORD *)this + 61);
  if ((v2 & 0x100) == 0)
  {
    double v68 = 0.0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_23:
    double v67 = 0.0;
    if ((v2 & 0x10000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
  double v9 = *((double *)this + 10);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  double v68 = v9;
  if ((v2 & 0x80) == 0) {
    goto LABEL_23;
  }
LABEL_3:
  double v3 = *((double *)this + 9);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v67 = v3;
  if ((v2 & 0x10000) != 0)
  {
LABEL_6:
    uint64_t v66 = *((unsigned int *)this + 55);
    if ((v2 & 0x8000) != 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v66 = 0;
  if ((v2 & 0x8000) != 0)
  {
LABEL_7:
    uint64_t v65 = *((unsigned int *)this + 54);
    if ((v2 & 0x40000) != 0) {
      goto LABEL_8;
    }
LABEL_26:
    uint64_t v64 = 0;
    if ((v2 & 0x2000000) != 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t v65 = 0;
  if ((v2 & 0x40000) == 0) {
    goto LABEL_26;
  }
LABEL_8:
  float v4 = *((float *)this + 57);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  uint64_t v64 = v5;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_11:
    uint64_t v63 = *((unsigned __int8 *)this + 241);
    if ((v2 & 0x80000) != 0) {
      goto LABEL_12;
    }
LABEL_28:
    uint64_t v62 = 0;
    if ((v2 & 0x4000000) != 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t v63 = 0;
  if ((v2 & 0x80000) == 0) {
    goto LABEL_28;
  }
LABEL_12:
  float v6 = *((float *)this + 58);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  uint64_t v62 = v7;
  if ((v2 & 0x4000000) != 0)
  {
LABEL_15:
    uint64_t v61 = *((unsigned __int8 *)this + 242);
    if ((v2 & 0x200) != 0) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v61 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_16:
    double v8 = *((double *)this + 22);
    if (v8 == 0.0) {
      double v8 = 0.0;
    }
    double v60 = v8;
    if ((v2 & 0x400000) != 0) {
      goto LABEL_19;
    }
    goto LABEL_31;
  }
LABEL_30:
  double v60 = 0.0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_19:
    uint64_t v59 = *((unsigned __int8 *)this + 238);
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v59 = 0;
LABEL_32:
  unsigned int v10 = (CMMsl::SteadinessEvent *)*((void *)this + 8);
  if (v10) {
    unsigned int v10 = (CMMsl::SteadinessEvent *)CMMsl::SteadinessEvent::hash_value(v10);
  }
  if ((v2 & 0x800) == 0)
  {
    double v58 = 0.0;
    if ((v2 & 0x800000) != 0) {
      goto LABEL_36;
    }
LABEL_43:
    uint64_t v57 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_37;
    }
LABEL_44:
    double v56 = 0.0;
    goto LABEL_45;
  }
  double v12 = *((double *)this + 24);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  double v58 = v12;
  if ((v2 & 0x800000) == 0) {
    goto LABEL_43;
  }
LABEL_36:
  uint64_t v57 = *((unsigned __int8 *)this + 239);
  if ((v2 & 0x400) == 0) {
    goto LABEL_44;
  }
LABEL_37:
  double v11 = *((double *)this + 23);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  double v56 = v11;
LABEL_45:
  unint64_t v72 = v10;
  if ((v2 & 0x200000) != 0) {
    uint64_t v55 = *((unsigned __int8 *)this + 237);
  }
  else {
    uint64_t v55 = 0;
  }
  char v13 = (CMMsl::SteadinessModelResult *)*((void *)this + 15);
  if (v13) {
    uint64_t v14 = CMMsl::SteadinessModelResult::hash_value(v13);
  }
  else {
    uint64_t v14 = 0;
  }
  char v15 = (CMMsl::SteadinessModelGaitBaselineFeatures *)*((void *)this + 14);
  if (v15) {
    uint64_t v16 = CMMsl::SteadinessModelGaitBaselineFeatures::hash_value(v15);
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v17 = (CMMsl::SteadinessModelResult *)*((void *)this + 13);
  if (v17) {
    uint64_t v18 = CMMsl::SteadinessModelResult::hash_value(v17);
  }
  else {
    uint64_t v18 = 0;
  }
  int v19 = (CMMsl::SteadinessModelContinuousWalkingFeatures *)*((void *)this + 12);
  if (v19) {
    uint64_t v20 = CMMsl::SteadinessModelContinuousWalkingFeatures::hash_value(v19);
  }
  else {
    uint64_t v20 = 0;
  }
  unint64_t v21 = (CMMsl::SteadinessModelResult *)*((void *)this + 19);
  if (v21) {
    uint64_t v22 = CMMsl::SteadinessModelResult::hash_value(v21);
  }
  else {
    uint64_t v22 = 0;
  }
  unint64_t v23 = (CMMsl::SteadinessModelTemporalDispersionFeatures *)*((void *)this + 18);
  if (v23) {
    uint64_t v24 = CMMsl::SteadinessModelTemporalDispersionFeatures::hash_value(v23);
  }
  else {
    uint64_t v24 = 0;
  }
  char v25 = (CMMsl::SteadinessModelResult *)*((void *)this + 21);
  if (v25) {
    uint64_t v26 = CMMsl::SteadinessModelResult::hash_value(v25);
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = (CMMsl::SteadinessModelTemporalEntropyFeatures *)*((void *)this + 20);
  if (v27) {
    uint64_t v27 = (CMMsl::SteadinessModelTemporalEntropyFeatures *)CMMsl::SteadinessModelTemporalEntropyFeatures::hash_value(v27);
  }
  unint64_t v69 = v27;
  if ((v2 & 0x100000) != 0) {
    uint64_t v54 = *((unsigned __int8 *)this + 236);
  }
  else {
    uint64_t v54 = 0;
  }
  unint64_t v28 = (CMMsl::SteadinessModelBalanceFeatures *)*((void *)this + 11);
  if (v28) {
    unint64_t v28 = (CMMsl::SteadinessModelBalanceFeatures *)CMMsl::SteadinessModelBalanceFeatures::hash_value(v28);
  }
  if ((v2 & 1) == 0)
  {
    double v53 = 0.0;
    if ((v2 & 8) != 0) {
      goto LABEL_78;
    }
LABEL_94:
    double v52 = 0.0;
    if ((v2 & 0x20000) != 0) {
      goto LABEL_81;
    }
LABEL_95:
    uint64_t v51 = 0;
    if ((v2 & 0x1000000) != 0) {
      goto LABEL_84;
    }
    goto LABEL_96;
  }
  double v34 = *((double *)this + 1);
  if (v34 == 0.0) {
    double v34 = 0.0;
  }
  double v53 = v34;
  if ((v2 & 8) == 0) {
    goto LABEL_94;
  }
LABEL_78:
  double v29 = *((double *)this + 4);
  if (v29 == 0.0) {
    double v29 = 0.0;
  }
  double v52 = v29;
  if ((v2 & 0x20000) == 0) {
    goto LABEL_95;
  }
LABEL_81:
  float v30 = *((float *)this + 56);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  uint64_t v51 = v31;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_84:
    uint64_t v50 = *((unsigned __int8 *)this + 240);
    if ((v2 & 0x1000) != 0) {
      goto LABEL_85;
    }
    goto LABEL_97;
  }
LABEL_96:
  uint64_t v50 = 0;
  if ((v2 & 0x1000) != 0)
  {
LABEL_85:
    double v32 = *((double *)this + 25);
    if (v32 == 0.0) {
      double v32 = 0.0;
    }
    double v49 = v32;
    if ((v2 & 0x40) != 0) {
      goto LABEL_88;
    }
LABEL_98:
    double v48 = 0.0;
    goto LABEL_99;
  }
LABEL_97:
  double v49 = 0.0;
  if ((v2 & 0x40) == 0) {
    goto LABEL_98;
  }
LABEL_88:
  double v33 = *((double *)this + 7);
  if (v33 == 0.0) {
    double v33 = 0.0;
  }
  double v48 = v33;
LABEL_99:
  uint64_t v71 = v16;
  if ((v2 & 2) != 0)
  {
    double v35 = *((double *)this + 2);
    if (v35 == 0.0) {
      double v35 = 0.0;
    }
    double v47 = v35;
  }
  else
  {
    double v47 = 0.0;
  }
  uint64_t v70 = v14;
  if ((v2 & 0x10) != 0)
  {
    double v37 = *((double *)this + 5);
    if (v37 == 0.0) {
      double v37 = 0.0;
    }
    double v46 = v37;
    if ((v2 & 0x4000) != 0)
    {
LABEL_106:
      uint64_t v45 = *((int *)this + 53);
      if ((v2 & 0x2000) != 0) {
        goto LABEL_107;
      }
      goto LABEL_115;
    }
  }
  else
  {
    double v46 = 0.0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_106;
    }
  }
  uint64_t v45 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_107:
    uint64_t v44 = *((int *)this + 52);
    if ((v2 & 0x20) != 0) {
      goto LABEL_108;
    }
    goto LABEL_116;
  }
LABEL_115:
  uint64_t v44 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_108:
    if (*((double *)this + 6) == 0.0) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = *((void *)this + 6);
    }
    goto LABEL_117;
  }
LABEL_116:
  uint64_t v36 = 0;
LABEL_117:
  unint64_t v38 = v28;
  if ((v2 & 4) != 0)
  {
    if (*((double *)this + 3) == 0.0) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = *((void *)this + 3);
    }
  }
  else
  {
    uint64_t v39 = 0;
  }
  unint64_t v40 = (CMMsl::SteadinessModelResult *)*((void *)this + 17);
  if (v40) {
    uint64_t v41 = CMMsl::SteadinessModelResult::hash_value(v40);
  }
  else {
    uint64_t v41 = 0;
  }
  unint64_t v42 = *((void *)this + 16);
  if (v42) {
    unint64_t v42 = CMMsl::SteadinessModelHarmonicFeatures::hash_value((CMMsl::SteadinessModelHarmonicFeatures *)v42);
  }
  return *(void *)&v67 ^ *(void *)&v68 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v61 ^ *(void *)&v60 ^ v59 ^ (unint64_t)v72 ^ *(void *)&v58 ^ v57 ^ *(void *)&v56 ^ v55 ^ v70 ^ v71 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ (unint64_t)v69 ^ v54 ^ (unint64_t)v38 ^ *(void *)&v53 ^ *(void *)&v52 ^ v51 ^ v50 ^ *(void *)&v49 ^ *(void *)&v48 ^ *(void *)&v47 ^ *(void *)&v46 ^ v45 ^ v44 ^ v36 ^ v39 ^ v41 ^ v42;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeEventResult(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelGaitBaselineResult(uint64_t this)
{
  if (!*(void *)(this + 120)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelGaitBaselineFeatures(uint64_t this)
{
  if (!*(void *)(this + 112)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelContinuousWalkingResult(uint64_t this)
{
  if (!*(void *)(this + 104)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelContinuousWalkingFeatures(uint64_t this)
{
  if (!*(void *)(this + 96)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelTemporalDispersionResult(uint64_t this)
{
  if (!*(void *)(this + 152)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelTemporalDispersionFeatures(uint64_t this)
{
  if (!*(void *)(this + 144)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelTemporalEntropyResult(uint64_t this)
{
  if (!*(void *)(this + 168)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelTemporalEntropyFeatures(uint64_t this)
{
  if (!*(void *)(this + 160)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelBalanceFeatures(uint64_t this)
{
  if (!*(void *)(this + 88)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelHarmonicResult(uint64_t this)
{
  if (!*(void *)(this + 136)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelHarmonicFeatures(uint64_t this)
{
  if (!*(void *)(this + 128)) {
    operator new();
  }
  return this;
}

void CMMsl::WatchActiveCalories::~WatchActiveCalories(CMMsl::WatchActiveCalories *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::WatchActiveCalories::WatchActiveCalories(CMMsl::WatchActiveCalories *this, const CMMsl::WatchActiveCalories *a2)
{
  *(void *)this = &unk_270645C08;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 6);
    char v3 = 4;
    *((unsigned char *)this + 28) = 4;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 28) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::WatchActiveCalories::operator=(uint64_t a1, const CMMsl::WatchActiveCalories *a2)
{
  if ((const CMMsl::WatchActiveCalories *)a1 != a2)
  {
    CMMsl::WatchActiveCalories::WatchActiveCalories((CMMsl::WatchActiveCalories *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v10;
    int v10 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchActiveCalories *a2, CMMsl::WatchActiveCalories *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::WatchActiveCalories::WatchActiveCalories(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645C08;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645C08;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::WatchActiveCalories::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v9 = &unk_270645C08;
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    int v12 = *(_DWORD *)(a1 + 28);
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WatchActiveCalories::formatText(CMMsl::WatchActiveCalories *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "calories_kCal", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WatchActiveCalories::readFrom(CMMsl::WatchActiveCalories *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_27;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v19 == 2)
      {
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_36:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_37;
      }
      if (v19 != 1)
      {
LABEL_27:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        goto LABEL_38;
      }
      *((unsigned char *)this + 28) |= 4u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
      {
LABEL_34:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
      unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_37:
      *((void *)a2 + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 28) |= 1u;
    unint64_t v2 = *((void *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
      goto LABEL_34;
    }
    *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchActiveCalories::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 28) & 1) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(float *)(this + 24));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::WatchActiveCalories::hash_value(CMMsl::WatchActiveCalories *this)
{
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
    float v4 = *((float *)this + 6);
    uint64_t v1 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v1 = 0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 2);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if (*((unsigned char *)this + 28)) {
        goto LABEL_6;
      }
LABEL_13:
      double v3 = 0.0;
      return *(void *)&v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3;
}

void CMMsl::WatchBasalCalories::~WatchBasalCalories(CMMsl::WatchBasalCalories *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::WatchBasalCalories::WatchBasalCalories(CMMsl::WatchBasalCalories *this, const CMMsl::WatchBasalCalories *a2)
{
  *(void *)this = &unk_270645C40;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 6);
    char v3 = 4;
    *((unsigned char *)this + 28) = 4;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 28) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::WatchBasalCalories::operator=(uint64_t a1, const CMMsl::WatchBasalCalories *a2)
{
  if ((const CMMsl::WatchBasalCalories *)a1 != a2)
  {
    CMMsl::WatchBasalCalories::WatchBasalCalories((CMMsl::WatchBasalCalories *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v10;
    int v10 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchBasalCalories *a2, CMMsl::WatchBasalCalories *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::WatchBasalCalories::WatchBasalCalories(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645C40;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645C40;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::WatchBasalCalories::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v9 = &unk_270645C40;
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    int v12 = *(_DWORD *)(a1 + 28);
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WatchBasalCalories::formatText(CMMsl::WatchBasalCalories *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "calories_kCal", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WatchBasalCalories::readFrom(CMMsl::WatchBasalCalories *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_27;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v19 == 2)
      {
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_36:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_37;
      }
      if (v19 != 1)
      {
LABEL_27:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        goto LABEL_38;
      }
      *((unsigned char *)this + 28) |= 4u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
      {
LABEL_34:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
      unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_37:
      *((void *)a2 + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 28) |= 1u;
    unint64_t v2 = *((void *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
      goto LABEL_34;
    }
    *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchBasalCalories::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 28) & 1) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(float *)(this + 24));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::WatchBasalCalories::hash_value(CMMsl::WatchBasalCalories *this)
{
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
    float v4 = *((float *)this + 6);
    uint64_t v1 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v1 = 0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 2);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if (*((unsigned char *)this + 28)) {
        goto LABEL_6;
      }
LABEL_13:
      double v3 = 0.0;
      return *(void *)&v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3;
}

void CMMsl::WatchEnclosureMaterial::~WatchEnclosureMaterial(CMMsl::WatchEnclosureMaterial *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial(uint64_t this, const CMMsl::WatchEnclosureMaterial *a2)
{
  *(void *)this = &unk_270645C78;
  *(_DWORD *)(this + 24) = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) = 2;
    *(void *)(this + 16) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 1) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 24))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 24) = v2;
    *(void *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::WatchEnclosureMaterial::operator=(uint64_t a1, const CMMsl::WatchEnclosureMaterial *a2)
{
  if ((const CMMsl::WatchEnclosureMaterial *)a1 != a2)
  {
    CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchEnclosureMaterial *a2, CMMsl::WatchEnclosureMaterial *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return result;
}

double CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645C78;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645C78;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t CMMsl::WatchEnclosureMaterial::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4;
    void v10[2] = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v5;
    v10[0] = &unk_270645C78;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::WatchEnclosureMaterial::formatText(CMMsl::WatchEnclosureMaterial *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "enclosureMaterial");
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WatchEnclosureMaterial::readFrom(CMMsl::WatchEnclosureMaterial *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((void *)this + 1) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchEnclosureMaterial::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::WatchEnclosureMaterial::hash_value(CMMsl::WatchEnclosureMaterial *this)
{
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 24)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((void *)this + 1);
  return v2 ^ *(void *)&v1;
}

void CMMsl::WatchHeartRateData::~WatchHeartRateData(CMMsl::WatchHeartRateData *this)
{
  *(void *)this = &unk_270645CB0;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WatchHeartRateData::~WatchHeartRateData(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::WatchHeartRateData::WatchHeartRateData(uint64_t this, const CMMsl::WatchHeartRateData *a2)
{
  *(void *)this = &unk_270645CB0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  if ((*((unsigned char *)a2 + 32) & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 2);
    *(unsigned char *)(this + 32) = 2;
    *(void *)(this + 16) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 32) & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 32))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 32) = v2;
    *(void *)(this + 8) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 3)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WatchHeartRateData::operator=(uint64_t a1, const CMMsl::WatchHeartRateData *a2)
{
  if ((const CMMsl::WatchHeartRateData *)a1 != a2)
  {
    CMMsl::WatchHeartRateData::WatchHeartRateData((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    CMMsl::WatchHeartRateData::~WatchHeartRateData((CMMsl::WatchHeartRateData *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchHeartRateData *a2, CMMsl::WatchHeartRateData *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  return result;
}

uint64_t CMMsl::WatchHeartRateData::WatchHeartRateData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645CB0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WatchHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::WatchHeartRateData::WatchHeartRateData((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    CMMsl::WatchHeartRateData::~WatchHeartRateData((CMMsl::WatchHeartRateData *)v7);
  }
  return a1;
}

uint64_t CMMsl::WatchHeartRateData::formatText(CMMsl::WatchHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 32);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WatchHeartRateData::readFrom(CMMsl::WatchHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_21;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v22);
      }
      else
      {
        if (v20 != 1)
        {
LABEL_19:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          goto LABEL_34;
        }
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
        {
LABEL_31:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v21);
      }
      *((void *)a2 + 1) += 8;
LABEL_34:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 32);
  }
  if (v4) {
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
  }
  char v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

unint64_t CMMsl::WatchHeartRateData::hash_value(CMMsl::WatchHeartRateData *this)
{
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
    if (*((double *)this + 2) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 2);
    }
    if (*((unsigned char *)this + 32)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v2 = 0;
    goto LABEL_11;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_10;
  }
LABEL_3:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 1);
  }
LABEL_11:
  unint64_t v3 = *((void *)this + 3);
  if (v3) {
    unint64_t v3 = CMMsl::OnsetHeartRateData::hash_value((CMMsl::OnsetHeartRateData *)v3);
  }
  return v2 ^ v1 ^ v3;
}

uint64_t CMMsl::WatchHeartRateData::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

void CMMsl::WatchOnWristState::~WatchOnWristState(CMMsl::WatchOnWristState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::WatchOnWristState::WatchOnWristState(uint64_t this, const CMMsl::WatchOnWristState *a2)
{
  *(void *)this = &unk_270645CE8;
  *(_DWORD *)(this + 40) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 40) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(unsigned char *)(this + 40) = v3;
    *(_DWORD *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x10u;
    *(unsigned char *)(this + 40) = v3;
    *(_DWORD *)(this + 32) = v6;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(unsigned char *)(this + 40) = v3;
  *(_DWORD *)(this + 28) = v7;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  char v8 = *((unsigned char *)a2 + 37);
  v3 |= 0x40u;
  *(unsigned char *)(this + 40) = v3;
  *(unsigned char *)(this + 37) = v8;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  char v9 = *((unsigned char *)a2 + 36);
  v3 |= 0x20u;
  *(unsigned char *)(this + 40) = v3;
  *(unsigned char *)(this + 36) = v9;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_18:
    uint64_t v11 = *((void *)a2 + 2);
    *(unsigned char *)(this + 40) = v3 | 2;
    *(void *)(this + 16) = v11;
    return this;
  }
LABEL_17:
  char v10 = *((unsigned char *)a2 + 38);
  v3 |= 0x80u;
  *(unsigned char *)(this + 40) = v3;
  *(unsigned char *)(this + 38) = v10;
  if ((*((unsigned char *)a2 + 40) & 2) != 0) {
    goto LABEL_18;
  }
  return this;
}

uint64_t CMMsl::WatchOnWristState::operator=(uint64_t a1, const CMMsl::WatchOnWristState *a2)
{
  if ((const CMMsl::WatchOnWristState *)a1 != a2)
  {
    CMMsl::WatchOnWristState::WatchOnWristState((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v4;
    int v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v6;
    LOBYTE(v5) = *(unsigned char *)(a1 + 37);
    *(unsigned char *)(a1 + 37) = v15;
    char v15 = v5;
    LOBYTE(v5) = *(unsigned char *)(a1 + 36);
    *(unsigned char *)(a1 + 36) = v14;
    char v14 = v5;
    LOBYTE(v5) = *(unsigned char *)(a1 + 38);
    *(unsigned char *)(a1 + 38) = v16;
    char v16 = v5;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v11;
    uint64_t v11 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchOnWristState *a2, CMMsl::WatchOnWristState *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  int v7 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 37);
  *((unsigned char *)this + 37) = *((unsigned char *)a2 + 37);
  *((unsigned char *)a2 + 37) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 36);
  *((unsigned char *)this + 36) = *((unsigned char *)a2 + 36);
  *((unsigned char *)a2 + 36) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 38);
  *((unsigned char *)this + 38) = *((unsigned char *)a2 + 38);
  *((unsigned char *)a2 + 38) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  return result;
}

double CMMsl::WatchOnWristState::WatchOnWristState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645CE8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645CE8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return result;
}

uint64_t CMMsl::WatchOnWristState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v15[0] = &unk_270645CE8;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 32);
    char v6 = *(unsigned char *)(a2 + 37);
    char v7 = *(unsigned char *)(a2 + 36);
    char v8 = *(unsigned char *)(a2 + 38);
    uint64_t v9 = *(void *)(a2 + 16);
    int v20 = *(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v15[1] = v10;
    int v16 = *(_DWORD *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 32) = v5;
    *(void *)(a1 + 24) = v12;
    v15[3] = v11;
    LOBYTE(v3) = *(unsigned char *)(a1 + 37);
    *(unsigned char *)(a1 + 37) = v6;
    char v18 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 36);
    *(unsigned char *)(a1 + 36) = v7;
    char v17 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 38);
    *(unsigned char *)(a1 + 38) = v8;
    char v19 = v3;
    uint64_t v13 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    v15[2] = v13;
    PB::Base::~Base((PB::Base *)v15);
  }
  return a1;
}

uint64_t CMMsl::WatchOnWristState::formatText(CMMsl::WatchOnWristState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "date", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)this + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isForcedOnWristEnabled");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "isOnCharger");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isWristDetectionEnabled");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "onWrist");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "onWristConfidence");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "onWristSensor");
  if ((*((unsigned char *)this + 40) & 2) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "timestamp");
LABEL_10:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WatchOnWristState::readFrom(CMMsl::WatchOnWristState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_104;
            }
            unint64_t v53 = v21++;
            char v54 = *(unsigned char *)(v22 + v53);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v54 & 0x7F) << v51;
            if ((v54 & 0x80) == 0) {
              break;
            }
            v51 += 7;
            BOOL v14 = v52++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_103:
              unint64_t v2 = v53 + 1;
              goto LABEL_104;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
          goto LABEL_103;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_104;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_104:
        *((_DWORD *)this + 6) = v25;
        break;
      case 3u:
        *((unsigned char *)this + 40) |= 0x10u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v55 = 0;
          unsigned int v56 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_109;
            }
            unint64_t v57 = v27++;
            char v58 = *(unsigned char *)(v28 + v57);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v58 & 0x7F) << v55;
            if ((v58 & 0x80) == 0) {
              break;
            }
            v55 += 7;
            BOOL v14 = v56++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_108:
              unint64_t v2 = v57 + 1;
              goto LABEL_109;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
          goto LABEL_108;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_109;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_109:
        *((_DWORD *)this + 8) = v31;
        break;
      case 4u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_114;
            }
            unint64_t v61 = v33++;
            char v62 = *(unsigned char *)(v34 + v61);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v62 & 0x7F) << v59;
            if ((v62 & 0x80) == 0) {
              break;
            }
            v59 += 7;
            BOOL v14 = v60++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_113:
              unint64_t v2 = v61 + 1;
              goto LABEL_114;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
          goto LABEL_113;
        }
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        do
        {
          unint64_t v2 = v33 + 1;
          *((void *)a2 + 1) = v33 + 1;
          char v38 = *(unsigned char *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0) {
            goto LABEL_114;
          }
          v35 += 7;
          unint64_t v33 = v2;
          BOOL v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_114:
        *((_DWORD *)this + 7) = v37;
        break;
      case 5u:
        *((unsigned char *)this + 40) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v40 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v40 = v39 != 0;
        }
        *((unsigned char *)this + 37) = v40;
        break;
      case 6u:
        *((unsigned char *)this + 40) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v42 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v41 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v42 = v41 != 0;
        }
        *((unsigned char *)this + 36) = v42;
        break;
      case 7u:
        *((unsigned char *)this + 40) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v44 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v43 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v44 = v43 != 0;
        }
        *((unsigned char *)this + 38) = v44;
        break;
      case 8u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v45 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v46 = *(void *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v49 = 0;
          if (v2 <= v45) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v45)
            {
              uint64_t v49 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_119;
            }
            unint64_t v65 = v45++;
            char v66 = *(unsigned char *)(v46 + v65);
            *((void *)a2 + 1) = v45;
            v49 |= (unint64_t)(v66 & 0x7F) << v63;
            if ((v66 & 0x80) == 0) {
              break;
            }
            v63 += 7;
            BOOL v14 = v64++ > 8;
            if (v14)
            {
              uint64_t v49 = 0;
LABEL_118:
              unint64_t v2 = v65 + 1;
              goto LABEL_119;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v49 = 0;
          }
          goto LABEL_118;
        }
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        do
        {
          unint64_t v2 = v45 + 1;
          *((void *)a2 + 1) = v45 + 1;
          char v50 = *(unsigned char *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0) {
            goto LABEL_119;
          }
          v47 += 7;
          unint64_t v45 = v2;
          BOOL v14 = v48++ > 8;
        }
        while (!v14);
        uint64_t v49 = 0;
LABEL_119:
        *((void *)this + 2) = v49;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::WatchOnWristState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 40) & 2) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4 < 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_17:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::WatchOnWristState::hash_value(CMMsl::WatchOnWristState *this)
{
  if (*((unsigned char *)this + 40))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 40) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 6);
      if ((*((unsigned char *)this + 40) & 0x10) != 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 8);
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 40) & 8) != 0)
  {
LABEL_5:
    uint64_t v4 = *((unsigned int *)this + 7);
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 40) & 0x40) != 0)
  {
LABEL_6:
    uint64_t v5 = *((unsigned __int8 *)this + 37);
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 40) & 0x20) != 0)
  {
LABEL_7:
    uint64_t v6 = *((unsigned __int8 *)this + 36);
    if ((*((unsigned char *)this + 40) & 0x80) != 0) {
      goto LABEL_8;
    }
LABEL_18:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_19:
    uint64_t v8 = 0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_17:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 40) & 0x80) == 0) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v7 = *((unsigned __int8 *)this + 38);
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_19;
  }
LABEL_9:
  uint64_t v8 = *((void *)this + 2);
  return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::WatchOrientationSettings::~WatchOrientationSettings(CMMsl::WatchOrientationSettings *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::WatchOrientationSettings::WatchOrientationSettings(uint64_t this, const CMMsl::WatchOrientationSettings *a2)
{
  *(void *)this = &unk_270645D20;
  *(_DWORD *)(this + 16) = 0;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 16) = 2;
    *(_DWORD *)(this + 12) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 1) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 16))
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 16) = v2;
    *(_DWORD *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::WatchOrientationSettings::operator=(uint64_t a1, const CMMsl::WatchOrientationSettings *a2)
{
  if ((const CMMsl::WatchOrientationSettings *)a1 != a2)
  {
    CMMsl::WatchOrientationSettings::WatchOrientationSettings((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::WatchOrientationSettings *a2, CMMsl::WatchOrientationSettings *a3)
{
  int v3 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  int v5 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  return this;
}

uint64_t CMMsl::WatchOrientationSettings::WatchOrientationSettings(uint64_t result, _DWORD *a2)
{
  *(void *)uint64_t result = &unk_270645D20;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

{
  *(void *)uint64_t result = &unk_270645D20;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

uint64_t CMMsl::WatchOrientationSettings::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = &unk_270645D20;
    int v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::WatchOrientationSettings::formatText(CMMsl::WatchOrientationSettings *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "crown");
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "wrist");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WatchOrientationSettings::readFrom(CMMsl::WatchOrientationSettings *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v38 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)a2 + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 2) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v34 = v19++;
            char v35 = *(unsigned char *)(v20 + v34);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_59:
          unint64_t v3 = v34 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v3 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v3;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 3) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchOrientationSettings::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::WatchOrientationSettings::hash_value(CMMsl::WatchOrientationSettings *this)
{
  if ((*((unsigned char *)this + 16) & 2) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 3);
    if (*((unsigned char *)this + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 2);
  return v2 ^ v1;
}

uint64_t CMMsl::WifiScanEntry::WifiScanEntry(uint64_t this)
{
  *(void *)this = &unk_270645D58;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_270645D58;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::WifiScanEntry::~WifiScanEntry(CMMsl::WifiScanEntry *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::WifiScanEntry::WifiScanEntry(uint64_t this, const CMMsl::WifiScanEntry *a2)
{
  *(void *)this = &unk_270645D58;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    char v7 = *((unsigned char *)a2 + 28);
    *(unsigned char *)(this + 32) = v3 | 8;
    *(unsigned char *)(this + 28) = v7;
    return this;
  }
  uint64_t v6 = *((void *)a2 + 2);
  v3 |= 2u;
  *(unsigned char *)(this + 32) = v3;
  *(void *)(this + 16) = v6;
  if ((*((unsigned char *)a2 + 32) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::WifiScanEntry::operator=(uint64_t a1, const CMMsl::WifiScanEntry *a2)
{
  if ((const CMMsl::WifiScanEntry *)a1 != a2)
  {
    CMMsl::WifiScanEntry::WifiScanEntry((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    LOBYTE(v4) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v11;
    char v11 = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WifiScanEntry *a2, CMMsl::WifiScanEntry *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v4) = *((unsigned char *)this + 28);
  *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
  *((unsigned char *)a2 + 28) = v4;
  return result;
}

double CMMsl::WifiScanEntry::WifiScanEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645D58;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645D58;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return result;
}

uint64_t CMMsl::WifiScanEntry::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 24);
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = *(unsigned char *)(a2 + 28);
    int v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v3;
    int v15 = v8;
    uint64_t v9 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v12[0] = &unk_270645D58;
    v12[1] = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v5;
    int v13 = v9;
    uint64_t v10 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v6;
    v12[2] = v10;
    LOBYTE(v9) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v7;
    char v14 = v9;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::WifiScanEntry::formatText(CMMsl::WifiScanEntry *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "entryId");
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isMoving");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "rssi");
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WifiScanEntry::readFrom(CMMsl::WifiScanEntry *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_68;
            }
            unint64_t v37 = v21++;
            char v38 = *(unsigned char *)(v22 + v37);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            BOOL v14 = v36++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
LABEL_67:
              unint64_t v2 = v37 + 1;
              goto LABEL_68;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
          goto LABEL_67;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_68;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        uint64_t v25 = 0;
LABEL_68:
        *((void *)this + 1) = v25;
        break;
      case 2u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_73;
            }
            unint64_t v41 = v27++;
            char v42 = *(unsigned char *)(v28 + v41);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0) {
              break;
            }
            v39 += 7;
            BOOL v14 = v40++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_72:
              unint64_t v2 = v41 + 1;
              goto LABEL_73;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
          goto LABEL_72;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_73;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_73:
        *((_DWORD *)this + 6) = -(v31 & 1) ^ ((int)v31 >> 1);
        break;
      case 3u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v34 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v34 = v33 != 0;
        }
        *((unsigned char *)this + 28) = v34;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::WifiScanEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeSInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  return PB::Writer::write(a2);
}

BOOL CMMsl::WifiScanEntry::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 8) == 0;
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
    return (*(unsigned char *)(a2 + 32) & 8) != 0 && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28);
  }
  return v2;
}

uint64_t CMMsl::WifiScanEntry::hash_value(CMMsl::WifiScanEntry *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((int *)this + 6);
      if ((*((unsigned char *)this + 32) & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_4:
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v4 = 0;
    return v2 ^ v1 ^ *(void *)&v3 ^ v4;
  }
LABEL_10:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v4 = *((unsigned __int8 *)this + 28);
  return v2 ^ v1 ^ *(void *)&v3 ^ v4;
}

void CMMsl::WifiScanResults::~WifiScanResults(CMMsl::WifiScanResults *this)
{
  *(void *)this = &unk_270645D90;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270645D90;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270645D90;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WifiScanResults::WifiScanResults(void *this, const CMMsl::WifiScanResults *a2)
{
  this[1] = 0;
  *this = &unk_270645D90;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_2572BAB1C(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_2570AFA4C(a1);
}

uint64_t CMMsl::WifiScanResults::operator=(uint64_t a1, const CMMsl::WifiScanResults *a2)
{
  if ((const CMMsl::WifiScanResults *)a1 != a2)
  {
    CMMsl::WifiScanResults::WifiScanResults(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = &unk_270645D90;
    char v9 = (void **)&v7;
    sub_2572C6D4C(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::WifiScanResults *a2, CMMsl::WifiScanResults *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::WifiScanResults::WifiScanResults(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645D90;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_270645D90;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::WifiScanResults::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v9 = &unk_270645D90;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_2572C6E0C((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    unint64_t v12 = (void **)&v10;
    char v9 = &unk_270645D90;
    sub_2572C6D4C(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WifiScanResults::formatText(CMMsl::WifiScanResults *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "entries");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WifiScanResults::readFrom(CMMsl::WifiScanResults *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_2572BB138(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::WifiScanResults::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (int i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    long long v5 = *v2++;
  return this;
}

BOOL sub_2572BB1BC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  long long v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = CMMsl::WifiScanEntry::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::WifiScanResults::hash_value(CMMsl::WifiScanResults *this)
{
  uint64_t v1 = (CMMsl::WifiScanEntry **)*((void *)this + 1);
  unint64_t v2 = (CMMsl::WifiScanEntry **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::WifiScanEntry::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::WorkoutActivity::~WorkoutActivity(CMMsl::WorkoutActivity *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::WorkoutActivity::WorkoutActivity(uint64_t this, const CMMsl::WorkoutActivity *a2)
{
  *(void *)this = &unk_270645DC8;
  *(_DWORD *)(this + 16) = 0;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 16) = 2;
    *(_DWORD *)(this + 12) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 1) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 16))
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 16) = v2;
    *(_DWORD *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::WorkoutActivity::operator=(uint64_t a1, const CMMsl::WorkoutActivity *a2)
{
  if ((const CMMsl::WorkoutActivity *)a1 != a2)
  {
    CMMsl::WorkoutActivity::WorkoutActivity((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::WorkoutActivity *a2, CMMsl::WorkoutActivity *a3)
{
  int v3 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  int v5 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  return this;
}

uint64_t CMMsl::WorkoutActivity::WorkoutActivity(uint64_t result, _DWORD *a2)
{
  *(void *)BOOL result = &unk_270645DC8;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

{
  *(void *)BOOL result = &unk_270645DC8;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

uint64_t CMMsl::WorkoutActivity::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = &unk_270645DC8;
    int v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::WorkoutActivity::formatText(CMMsl::WorkoutActivity *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "activityType");
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "motionNotification");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutActivity::readFrom(CMMsl::WorkoutActivity *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v38 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)a2 + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 2) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v34 = v19++;
            char v35 = *(unsigned char *)(v20 + v34);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_59:
          unint64_t v3 = v34 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v3 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v3;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 3) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::WorkoutActivity::hash_value(CMMsl::WorkoutActivity *this)
{
  if ((*((unsigned char *)this + 16) & 2) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 3);
    if (*((unsigned char *)this + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 2);
  return v2 ^ v1;
}

void CMMsl::WorkoutEvent::~WorkoutEvent(CMMsl::WorkoutEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::WorkoutEvent::WorkoutEvent(uint64_t this, const CMMsl::WorkoutEvent *a2)
{
  *(void *)this = &unk_270645E00;
  *(_DWORD *)(this + 64) = 0;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) != 0)
  {
    int v4 = *((_DWORD *)a2 + 15);
    __int16 v3 = 512;
    *(_WORD *)(this + 64) = 512;
    *(_DWORD *)(this + 60) = v4;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 10);
    v3 |= 0x10u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 40) = v5;
    __int16 v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 64) = v3;
    *(void *)(this + 16) = v6;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 32) = v7;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v8 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 8) = v8;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v9 = *((_DWORD *)a2 + 13);
  v3 |= 0x80u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v9;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v10 = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 56) = v10;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x40u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v11;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_22:
    int v13 = *((_DWORD *)a2 + 11);
    *(_WORD *)(this + 64) = v3 | 0x20;
    *(_DWORD *)(this + 44) = v13;
    return this;
  }
LABEL_21:
  uint64_t v12 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 24) = v12;
  if ((*((_WORD *)a2 + 32) & 0x20) != 0) {
    goto LABEL_22;
  }
  return this;
}

uint64_t CMMsl::WorkoutEvent::operator=(uint64_t a1, const CMMsl::WorkoutEvent *a2)
{
  if ((const CMMsl::WorkoutEvent *)a1 != a2)
  {
    CMMsl::WorkoutEvent::WorkoutEvent((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    uint64_t v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v4;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WorkoutEvent *a2, CMMsl::WorkoutEvent *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  int v4 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  int v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  int v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  int v10 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  int v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  int v13 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v13;
  return result;
}

double CMMsl::WorkoutEvent::WorkoutEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645E00;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return result;
}

uint64_t CMMsl::WorkoutEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutEvent::WorkoutEvent((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    uint64_t v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v4;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::WorkoutEvent::formatText(CMMsl::WorkoutEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "endTime", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "eventTime", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "eventType");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "genericWorkoutLabel");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "poolLength", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "swimLocation");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "workoutLocationType");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "workoutMode");
  if ((*((_WORD *)this + 32) & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "workoutType");
LABEL_12:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutEvent::readFrom(CMMsl::WorkoutEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_151;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 32) |= 0x200u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_125;
            }
            unint64_t v58 = v20++;
            char v59 = *(unsigned char *)(v21 + v58);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            BOOL v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_124:
              unint64_t v2 = v58 + 1;
              goto LABEL_125;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_124;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_125;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_125:
        *((_DWORD *)this + 15) = v24;
        break;
      case 2u:
        *((_WORD *)this + 32) |= 0x10u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_130;
            }
            unint64_t v62 = v26++;
            char v63 = *(unsigned char *)(v27 + v62);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0) {
              break;
            }
            v60 += 7;
            BOOL v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_129:
              unint64_t v2 = v62 + 1;
              goto LABEL_130;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_129;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_130;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_130:
        *((_DWORD *)this + 10) = v30;
        break;
      case 3u:
        *((_WORD *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_69;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_120;
      case 4u:
        *((_WORD *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_69;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_120;
      case 5u:
        *((_WORD *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_69;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_120;
      case 6u:
        *((_WORD *)this + 32) |= 0x80u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_135;
            }
            unint64_t v66 = v32++;
            char v67 = *(unsigned char *)(v33 + v66);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0) {
              break;
            }
            v64 += 7;
            BOOL v14 = v65++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_134:
              unint64_t v2 = v66 + 1;
              goto LABEL_135;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_134;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_135;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_135:
        *((_DWORD *)this + 13) = v36;
        break;
      case 7u:
        *((_WORD *)this + 32) |= 0x100u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_140;
            }
            unint64_t v70 = v38++;
            char v71 = *(unsigned char *)(v39 + v70);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0) {
              break;
            }
            v68 += 7;
            BOOL v14 = v69++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_139:
              unint64_t v2 = v70 + 1;
              goto LABEL_140;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_139;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_140;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_140:
        *((_DWORD *)this + 14) = v42;
        break;
      case 8u:
        *((_WORD *)this + 32) |= 0x40u;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v45 = *(void *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v48 = 0;
          if (v2 <= v44) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_145;
            }
            unint64_t v74 = v44++;
            char v75 = *(unsigned char *)(v45 + v74);
            *((void *)a2 + 1) = v44;
            v48 |= (unint64_t)(v75 & 0x7F) << v72;
            if ((v75 & 0x80) == 0) {
              break;
            }
            v72 += 7;
            BOOL v14 = v73++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_144:
              unint64_t v2 = v74 + 1;
              goto LABEL_145;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v48) = 0;
          }
          goto LABEL_144;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        do
        {
          unint64_t v2 = v44 + 1;
          *((void *)a2 + 1) = v44 + 1;
          char v49 = *(unsigned char *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0) {
            goto LABEL_145;
          }
          v46 += 7;
          unint64_t v44 = v2;
          BOOL v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_145:
        *((_DWORD *)this + 12) = v48;
        break;
      case 9u:
        *((_WORD *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_120:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_69:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xAu:
        *((_WORD *)this + 32) |= 0x20u;
        unint64_t v50 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v51 = *(void *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v54 = 0;
          if (v2 <= v50) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v50)
            {
              LODWORD(v54) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_150;
            }
            unint64_t v78 = v50++;
            char v79 = *(unsigned char *)(v51 + v78);
            *((void *)a2 + 1) = v50;
            v54 |= (unint64_t)(v79 & 0x7F) << v76;
            if ((v79 & 0x80) == 0) {
              break;
            }
            v76 += 7;
            BOOL v14 = v77++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_149:
              unint64_t v2 = v78 + 1;
              goto LABEL_150;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v54) = 0;
          }
          goto LABEL_149;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        do
        {
          unint64_t v2 = v50 + 1;
          *((void *)a2 + 1) = v50 + 1;
          char v55 = *(unsigned char *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0) {
            goto LABEL_150;
          }
          v52 += 7;
          unint64_t v50 = v2;
          BOOL v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_150:
        *((_DWORD *)this + 11) = v54;
        break;
      default:
        goto LABEL_19;
    }
LABEL_151:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::WorkoutEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::write(a2, *(double *)(v3 + 24));
    if ((*(_WORD *)(v3 + 64) & 0x20) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_21:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::WorkoutEvent::hash_value(CMMsl::WorkoutEvent *this)
{
  __int16 v1 = *((_WORD *)this + 32);
  if ((v1 & 0x200) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 15);
    if ((v1 & 0x10) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 10);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
LABEL_22:
      double v4 = 0.0;
      if ((v1 & 8) != 0) {
        goto LABEL_7;
      }
LABEL_23:
      double v5 = 0.0;
      if (v1) {
        goto LABEL_10;
      }
LABEL_24:
      double v6 = 0.0;
      if ((v1 & 0x80) != 0) {
        goto LABEL_13;
      }
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_22;
  }
LABEL_4:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_23;
  }
LABEL_7:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_10:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_13:
    uint64_t v7 = *((unsigned int *)this + 13);
    if ((*((_WORD *)this + 32) & 0x100) != 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 32) & 0x100) != 0)
  {
LABEL_14:
    uint64_t v8 = *((unsigned int *)this + 14);
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v8 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    uint64_t v9 = *((unsigned int *)this + 12);
    if ((v1 & 4) != 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v9 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_16:
    double v10 = *((double *)this + 3);
    if (v10 == 0.0) {
      double v10 = 0.0;
    }
    if ((v1 & 0x20) != 0) {
      goto LABEL_19;
    }
LABEL_29:
    uint64_t v11 = 0;
    return v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ v11;
  }
LABEL_28:
  double v10 = 0.0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v11 = *((unsigned int *)this + 11);
  return v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ v11;
}

uint64_t CMMsl::WorkoutPriorInformation::WorkoutPriorInformation(uint64_t this)
{
  *(void *)this = &unk_270645E38;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_270645E38;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::WorkoutPriorInformation::~WorkoutPriorInformation(CMMsl::WorkoutPriorInformation *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::WorkoutPriorInformation::WorkoutPriorInformation(uint64_t this, const CMMsl::WorkoutPriorInformation *a2)
{
  *(void *)this = &unk_270645E38;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    int v4 = *((_DWORD *)a2 + 7);
    char v3 = 16;
    *(unsigned char *)(this + 32) = 16;
    *(_DWORD *)(this + 28) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 4);
      *(unsigned char *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 32) = v3;
  *(void *)(this + 8) = v7;
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::WorkoutPriorInformation::operator=(uint64_t a1, const CMMsl::WorkoutPriorInformation *a2)
{
  if ((const CMMsl::WorkoutPriorInformation *)a1 != a2)
  {
    CMMsl::WorkoutPriorInformation::WorkoutPriorInformation((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WorkoutPriorInformation *a2, CMMsl::WorkoutPriorInformation *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

double CMMsl::WorkoutPriorInformation::WorkoutPriorInformation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270645E38;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270645E38;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::WorkoutPriorInformation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = &unk_270645E38;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::WorkoutPriorInformation::formatText(CMMsl::WorkoutPriorInformation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "genericWorkoutLabel");
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "poolLength", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "swimLocation");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "workoutLocationType");
  if ((*((unsigned char *)this + 32) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "workoutType");
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutPriorInformation::readFrom(CMMsl::WorkoutPriorInformation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 0x10u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_92;
            }
            unint64_t v47 = v21++;
            char v48 = *(unsigned char *)(v22 + v47);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v48 & 0x7F) << v45;
            if ((v48 & 0x80) == 0) {
              break;
            }
            v45 += 7;
            BOOL v14 = v46++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_91:
              unint64_t v2 = v47 + 1;
              goto LABEL_92;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
          goto LABEL_91;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_92;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_92:
        *((_DWORD *)this + 7) = v25;
        break;
      case 2u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_97;
            }
            unint64_t v51 = v27++;
            char v52 = *(unsigned char *)(v28 + v51);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v52 & 0x7F) << v49;
            if ((v52 & 0x80) == 0) {
              break;
            }
            v49 += 7;
            BOOL v14 = v50++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_96:
              unint64_t v2 = v51 + 1;
              goto LABEL_97;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
          goto LABEL_96;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_97;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_97:
        *((_DWORD *)this + 6) = v31;
        break;
      case 3u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_102;
            }
            unint64_t v55 = v33++;
            char v56 = *(unsigned char *)(v34 + v55);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v56 & 0x7F) << v53;
            if ((v56 & 0x80) == 0) {
              break;
            }
            v53 += 7;
            BOOL v14 = v54++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_101:
              unint64_t v2 = v55 + 1;
              goto LABEL_102;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
          goto LABEL_101;
        }
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        do
        {
          unint64_t v2 = v33 + 1;
          *((void *)a2 + 1) = v33 + 1;
          char v38 = *(unsigned char *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0) {
            goto LABEL_102;
          }
          v35 += 7;
          unint64_t v33 = v2;
          BOOL v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_102:
        *((_DWORD *)this + 5) = v37;
        break;
      case 4u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v39 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v40 = *(void *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          char v57 = 0;
          unsigned int v58 = 0;
          uint64_t v43 = 0;
          if (v2 <= v39) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_107;
            }
            unint64_t v59 = v39++;
            char v60 = *(unsigned char *)(v40 + v59);
            *((void *)a2 + 1) = v39;
            v43 |= (unint64_t)(v60 & 0x7F) << v57;
            if ((v60 & 0x80) == 0) {
              break;
            }
            v57 += 7;
            BOOL v14 = v58++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_106:
              unint64_t v2 = v59 + 1;
              goto LABEL_107;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v43) = 0;
          }
          goto LABEL_106;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        do
        {
          unint64_t v2 = v39 + 1;
          *((void *)a2 + 1) = v39 + 1;
          char v44 = *(unsigned char *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0) {
            goto LABEL_107;
          }
          v41 += 7;
          unint64_t v39 = v2;
          BOOL v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_107:
        *((_DWORD *)this + 4) = v43;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::WorkoutPriorInformation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_11:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::WorkoutPriorInformation::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::WorkoutPriorInformation::hash_value(CMMsl::WorkoutPriorInformation *this)
{
  if ((*((unsigned char *)this + 32) & 0x10) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 7);
    if ((*((unsigned char *)this + 32) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 6);
      if ((*((unsigned char *)this + 32) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 5);
    if (*((unsigned char *)this + 32)) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v3 = 0;
  if (*((unsigned char *)this + 32))
  {
LABEL_5:
    double v4 = *((double *)this + 1);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v5 = 0;
    return v2 ^ v1 ^ v3 ^ *(void *)&v4 ^ v5;
  }
LABEL_12:
  double v4 = 0.0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v5 = *((unsigned int *)this + 4);
  return v2 ^ v1 ^ v3 ^ *(void *)&v4 ^ v5;
}

void CMMsl::WorkoutRecorderALSData::~WorkoutRecorderALSData(CMMsl::WorkoutRecorderALSData *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270645E70;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderALSData::~WorkoutRecorderALSData(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(void *this, const CMMsl::WorkoutRecorderALSData *a2)
{
  *this = &unk_270645E70;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderALSData *CMMsl::WorkoutRecorderALSData::operator=(const CMMsl::WorkoutRecorderALSData *a1, const CMMsl::WorkoutRecorderALSData *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderALSData::~WorkoutRecorderALSData((CMMsl::WorkoutRecorderALSData *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderALSData *a2, CMMsl::WorkoutRecorderALSData *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(void *a1, uint64_t a2)
{
  *a1 = &unk_270645E70;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270645E70;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderALSData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270645E70;
    v6[1] = v4;
    CMMsl::WorkoutRecorderALSData::~WorkoutRecorderALSData((CMMsl::WorkoutRecorderALSData *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderALSData::formatText(CMMsl::WorkoutRecorderALSData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderALSData::readFrom(CMMsl::WorkoutRecorderALSData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t CMMsl::WorkoutRecorderALSData::hash_value(CMMsl::WorkoutRecorderALSData *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  float v2 = *(float *)(v1 + 8);
  if (v2 == 0.0 || (*(unsigned char *)(v1 + 12) & 1) == 0) {
    return 0;
  }
  else {
    return LODWORD(v2);
  }
}

uint64_t CMMsl::WorkoutRecorderALSData::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderAccel::~WorkoutRecorderAccel(CMMsl::WorkoutRecorderAccel *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270645EA8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderAccel::~WorkoutRecorderAccel(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(void *this, const CMMsl::WorkoutRecorderAccel *a2)
{
  *this = &unk_270645EA8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderAccel *CMMsl::WorkoutRecorderAccel::operator=(const CMMsl::WorkoutRecorderAccel *a1, const CMMsl::WorkoutRecorderAccel *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderAccel::~WorkoutRecorderAccel((CMMsl::WorkoutRecorderAccel *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderAccel *a2, CMMsl::WorkoutRecorderAccel *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(void *a1, uint64_t a2)
{
  *a1 = &unk_270645EA8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270645EA8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAccel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270645EA8;
    v6[1] = v4;
    CMMsl::WorkoutRecorderAccel::~WorkoutRecorderAccel((CMMsl::WorkoutRecorderAccel *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAccel::formatText(CMMsl::WorkoutRecorderAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderAccel::readFrom(CMMsl::WorkoutRecorderAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::Accel *CMMsl::WorkoutRecorderAccel::hash_value(CMMsl::WorkoutRecorderAccel *this)
{
  uint64_t result = (CMMsl::Accel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderAccel::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderAccel800::~WorkoutRecorderAccel800(CMMsl::WorkoutRecorderAccel800 *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270645EE0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderAccel800::~WorkoutRecorderAccel800(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(void *this, const CMMsl::WorkoutRecorderAccel800 *a2)
{
  *this = &unk_270645EE0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderAccel800 *CMMsl::WorkoutRecorderAccel800::operator=(const CMMsl::WorkoutRecorderAccel800 *a1, const CMMsl::WorkoutRecorderAccel800 *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderAccel800::~WorkoutRecorderAccel800((CMMsl::WorkoutRecorderAccel800 *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderAccel800 *a2, CMMsl::WorkoutRecorderAccel800 *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(void *a1, uint64_t a2)
{
  *a1 = &unk_270645EE0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270645EE0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAccel800::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270645EE0;
    v6[1] = v4;
    CMMsl::WorkoutRecorderAccel800::~WorkoutRecorderAccel800((CMMsl::WorkoutRecorderAccel800 *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAccel800::formatText(CMMsl::WorkoutRecorderAccel800 *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderAccel800::readFrom(CMMsl::WorkoutRecorderAccel800 *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderAccel800::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::Accel *CMMsl::WorkoutRecorderAccel800::hash_value(CMMsl::WorkoutRecorderAccel800 *this)
{
  uint64_t result = (CMMsl::Accel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderAccel800::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderAveragedALSData::~WorkoutRecorderAveragedALSData(CMMsl::WorkoutRecorderAveragedALSData *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270645F18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderAveragedALSData::~WorkoutRecorderAveragedALSData(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(void *this, const CMMsl::WorkoutRecorderAveragedALSData *a2)
{
  *this = &unk_270645F18;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderAveragedALSData *CMMsl::WorkoutRecorderAveragedALSData::operator=(const CMMsl::WorkoutRecorderAveragedALSData *a1, const CMMsl::WorkoutRecorderAveragedALSData *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderAveragedALSData::~WorkoutRecorderAveragedALSData((CMMsl::WorkoutRecorderAveragedALSData *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderAveragedALSData *a2, CMMsl::WorkoutRecorderAveragedALSData *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(void *a1, uint64_t a2)
{
  *a1 = &unk_270645F18;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270645F18;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270645F18;
    v6[1] = v4;
    CMMsl::WorkoutRecorderAveragedALSData::~WorkoutRecorderAveragedALSData((CMMsl::WorkoutRecorderAveragedALSData *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::formatText(CMMsl::WorkoutRecorderAveragedALSData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::readFrom(CMMsl::WorkoutRecorderAveragedALSData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::hash_value(CMMsl::WorkoutRecorderAveragedALSData *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  char v2 = *(unsigned char *)(v1 + 20);
  BOOL v3 = *(double *)(v1 + 8) == 0.0 || (v2 & 1) == 0;
  uint64_t v4 = *(void *)(v1 + 8);
  if (v3) {
    uint64_t v4 = 0;
  }
  int v5 = v2 & 2;
  float v6 = *(float *)(v1 + 16);
  BOOL v7 = v6 == 0.0 || v5 == 0;
  uint64_t v8 = LODWORD(v6);
  if (v7) {
    uint64_t v8 = 0;
  }
  return v8 ^ v4;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderBodyMetrics::~WorkoutRecorderBodyMetrics(CMMsl::WorkoutRecorderBodyMetrics *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270645F50;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderBodyMetrics::~WorkoutRecorderBodyMetrics(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(void *this, const CMMsl::WorkoutRecorderBodyMetrics *a2)
{
  *this = &unk_270645F50;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderBodyMetrics *CMMsl::WorkoutRecorderBodyMetrics::operator=(const CMMsl::WorkoutRecorderBodyMetrics *a1, const CMMsl::WorkoutRecorderBodyMetrics *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderBodyMetrics::~WorkoutRecorderBodyMetrics((CMMsl::WorkoutRecorderBodyMetrics *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderBodyMetrics *a2, CMMsl::WorkoutRecorderBodyMetrics *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(void *a1, uint64_t a2)
{
  *a1 = &unk_270645F50;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270645F50;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270645F50;
    v6[1] = v4;
    CMMsl::WorkoutRecorderBodyMetrics::~WorkoutRecorderBodyMetrics((CMMsl::WorkoutRecorderBodyMetrics *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::formatText(CMMsl::WorkoutRecorderBodyMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::readFrom(CMMsl::WorkoutRecorderBodyMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::BodyMetrics *CMMsl::WorkoutRecorderBodyMetrics::hash_value(CMMsl::WorkoutRecorderBodyMetrics *this)
{
  uint64_t result = (CMMsl::BodyMetrics *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BodyMetrics *)CMMsl::BodyMetrics::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderCompassCalibration::~WorkoutRecorderCompassCalibration(CMMsl::WorkoutRecorderCompassCalibration *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270645F88;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderCompassCalibration::~WorkoutRecorderCompassCalibration(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(void *this, const CMMsl::WorkoutRecorderCompassCalibration *a2)
{
  *this = &unk_270645F88;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderCompassCalibration *CMMsl::WorkoutRecorderCompassCalibration::operator=(const CMMsl::WorkoutRecorderCompassCalibration *a1, const CMMsl::WorkoutRecorderCompassCalibration *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderCompassCalibration::~WorkoutRecorderCompassCalibration((CMMsl::WorkoutRecorderCompassCalibration *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderCompassCalibration *a2, CMMsl::WorkoutRecorderCompassCalibration *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(void *a1, uint64_t a2)
{
  *a1 = &unk_270645F88;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270645F88;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270645F88;
    v6[1] = v4;
    CMMsl::WorkoutRecorderCompassCalibration::~WorkoutRecorderCompassCalibration((CMMsl::WorkoutRecorderCompassCalibration *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::formatText(CMMsl::WorkoutRecorderCompassCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::readFrom(CMMsl::WorkoutRecorderCompassCalibration *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::CompassCalibration *CMMsl::WorkoutRecorderCompassCalibration::hash_value(CMMsl::WorkoutRecorderCompassCalibration *this)
{
  uint64_t result = (CMMsl::CompassCalibration *)*((void *)this + 1);
  if (result) {
    return (CMMsl::CompassCalibration *)CMMsl::CompassCalibration::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderElevation::~WorkoutRecorderElevation(CMMsl::WorkoutRecorderElevation *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270645FC0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderElevation::~WorkoutRecorderElevation(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(void *this, const CMMsl::WorkoutRecorderElevation *a2)
{
  *this = &unk_270645FC0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderElevation *CMMsl::WorkoutRecorderElevation::operator=(const CMMsl::WorkoutRecorderElevation *a1, const CMMsl::WorkoutRecorderElevation *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderElevation::~WorkoutRecorderElevation((CMMsl::WorkoutRecorderElevation *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderElevation *a2, CMMsl::WorkoutRecorderElevation *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(void *a1, uint64_t a2)
{
  *a1 = &unk_270645FC0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270645FC0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderElevation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270645FC0;
    v6[1] = v4;
    CMMsl::WorkoutRecorderElevation::~WorkoutRecorderElevation((CMMsl::WorkoutRecorderElevation *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderElevation::formatText(CMMsl::WorkoutRecorderElevation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderElevation::readFrom(CMMsl::WorkoutRecorderElevation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderElevation::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::ElevationChange *CMMsl::WorkoutRecorderElevation::hash_value(CMMsl::WorkoutRecorderElevation *this)
{
  uint64_t result = (CMMsl::ElevationChange *)*((void *)this + 1);
  if (result) {
    return (CMMsl::ElevationChange *)CMMsl::ElevationChange::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderElevation::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderFaceCovered::~WorkoutRecorderFaceCovered(CMMsl::WorkoutRecorderFaceCovered *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270645FF8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderFaceCovered::~WorkoutRecorderFaceCovered(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(void *this, const CMMsl::WorkoutRecorderFaceCovered *a2)
{
  *this = &unk_270645FF8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderFaceCovered *CMMsl::WorkoutRecorderFaceCovered::operator=(const CMMsl::WorkoutRecorderFaceCovered *a1, const CMMsl::WorkoutRecorderFaceCovered *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderFaceCovered::~WorkoutRecorderFaceCovered((CMMsl::WorkoutRecorderFaceCovered *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderFaceCovered *a2, CMMsl::WorkoutRecorderFaceCovered *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(void *a1, uint64_t a2)
{
  *a1 = &unk_270645FF8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270645FF8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270645FF8;
    v6[1] = v4;
    CMMsl::WorkoutRecorderFaceCovered::~WorkoutRecorderFaceCovered((CMMsl::WorkoutRecorderFaceCovered *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::formatText(CMMsl::WorkoutRecorderFaceCovered *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::readFrom(CMMsl::WorkoutRecorderFaceCovered *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::hash_value(CMMsl::WorkoutRecorderFaceCovered *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(v1 + 20);
  BOOL v3 = *(double *)(v1 + 8) == 0.0 || (v2 & 1) == 0;
  uint64_t v4 = *(void *)(v1 + 8);
  if (v3) {
    uint64_t v4 = 0;
  }
  return v4 ^ (*(unsigned char *)(v1 + 16) & (v2 << 30 >> 31));
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderFitnessMachineData::~WorkoutRecorderFitnessMachineData(CMMsl::WorkoutRecorderFitnessMachineData *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270646030;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderFitnessMachineData::~WorkoutRecorderFitnessMachineData(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(void *this, const CMMsl::WorkoutRecorderFitnessMachineData *a2)
{
  *this = &unk_270646030;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderFitnessMachineData *CMMsl::WorkoutRecorderFitnessMachineData::operator=(const CMMsl::WorkoutRecorderFitnessMachineData *a1, const CMMsl::WorkoutRecorderFitnessMachineData *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderFitnessMachineData::~WorkoutRecorderFitnessMachineData((CMMsl::WorkoutRecorderFitnessMachineData *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderFitnessMachineData *a2, CMMsl::WorkoutRecorderFitnessMachineData *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(void *a1, uint64_t a2)
{
  *a1 = &unk_270646030;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270646030;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270646030;
    v6[1] = v4;
    CMMsl::WorkoutRecorderFitnessMachineData::~WorkoutRecorderFitnessMachineData((CMMsl::WorkoutRecorderFitnessMachineData *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::formatText(CMMsl::WorkoutRecorderFitnessMachineData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::readFrom(CMMsl::WorkoutRecorderFitnessMachineData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::FitnessMachineData *CMMsl::WorkoutRecorderFitnessMachineData::hash_value(CMMsl::WorkoutRecorderFitnessMachineData *this)
{
  uint64_t result = (CMMsl::FitnessMachineData *)*((void *)this + 1);
  if (result) {
    return (CMMsl::FitnessMachineData *)CMMsl::FitnessMachineData::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderHealthKitInfo::~WorkoutRecorderHealthKitInfo(CMMsl::WorkoutRecorderHealthKitInfo *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::WorkoutRecorderHealthKitInfo::WorkoutRecorderHealthKitInfo(CMMsl::WorkoutRecorderHealthKitInfo *this, const CMMsl::WorkoutRecorderHealthKitInfo *a2)
{
  *(void *)this = &unk_270646068;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    char v3 = 4;
    *((unsigned char *)this + 28) = 4;
    *((_DWORD *)this + 6) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 28))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 28) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 28) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::operator=(uint64_t a1, const CMMsl::WorkoutRecorderHealthKitInfo *a2)
{
  if ((const CMMsl::WorkoutRecorderHealthKitInfo *)a1 != a2)
  {
    CMMsl::WorkoutRecorderHealthKitInfo::WorkoutRecorderHealthKitInfo((CMMsl::WorkoutRecorderHealthKitInfo *)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WorkoutRecorderHealthKitInfo *a2, CMMsl::WorkoutRecorderHealthKitInfo *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::WorkoutRecorderHealthKitInfo::WorkoutRecorderHealthKitInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270646068;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270646068;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_270646068;
    long long v3 = *(_OWORD *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    long long v5 = *(_OWORD *)(a1 + 8);
    *(void *)(a1 + 24) = v4;
    *(_OWORD *)(a1 + 8) = v3;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::formatText(CMMsl::WorkoutRecorderHealthKitInfo *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "restingHeartRate", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "walkingHeartRateAverage", *((double *)this + 2));
  if ((*((unsigned char *)this + 28) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "workoutActivityType");
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::readFrom(CMMsl::WorkoutRecorderHealthKitInfo *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
        if (v14) {
          goto LABEL_31;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_31;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v19 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((unsigned char *)this + 28) |= 2u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_47:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if (v19 != 2)
      {
        if (v19 == 1)
        {
          *((unsigned char *)this + 28) |= 4u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v2 = *((void *)a2 + 2);
          uint64_t v21 = *(void *)a2;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v24 = 0;
            if (v2 <= v20) {
              unint64_t v2 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v2 == v20)
              {
                LODWORD(v24) = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_52;
              }
              unint64_t v29 = v20++;
              char v30 = *(unsigned char *)(v21 + v29);
              *((void *)a2 + 1) = v20;
              v24 |= (unint64_t)(v30 & 0x7F) << v27;
              if ((v30 & 0x80) == 0) {
                break;
              }
              v27 += 7;
              BOOL v14 = v28++ > 8;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_51;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v24) = 0;
            }
LABEL_51:
            unint64_t v2 = v29 + 1;
          }
          else
          {
            char v22 = 0;
            unsigned int v23 = 0;
            uint64_t v24 = 0;
            while (1)
            {
              unint64_t v2 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v25 = *(unsigned char *)(v21 + v20);
              v24 |= (unint64_t)(v25 & 0x7F) << v22;
              if ((v25 & 0x80) == 0) {
                break;
              }
              v22 += 7;
              unint64_t v20 = v2;
              BOOL v14 = v23++ > 8;
              if (v14)
              {
                LODWORD(v24) = 0;
                break;
              }
            }
          }
LABEL_52:
          *((_DWORD *)this + 6) = v24;
        }
        else
        {
LABEL_31:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
        }
        goto LABEL_53;
      }
      *((unsigned char *)this + 28) |= 1u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      }
    }
    *((unsigned char *)a2 + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 28);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::hash_value(CMMsl::WorkoutRecorderHealthKitInfo *this)
{
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 6);
    if (*((unsigned char *)this + 28))
    {
LABEL_3:
      double v2 = *((double *)this + 1);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 28) & 2) != 0) {
        goto LABEL_6;
      }
LABEL_11:
      double v3 = 0.0;
      return *(void *)&v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 28)) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3;
}

void CMMsl::WorkoutRecorderHeartRate::~WorkoutRecorderHeartRate(CMMsl::WorkoutRecorderHeartRate *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706460A0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderHeartRate::~WorkoutRecorderHeartRate(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(void *this, const CMMsl::WorkoutRecorderHeartRate *a2)
{
  *this = &unk_2706460A0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderHeartRate *CMMsl::WorkoutRecorderHeartRate::operator=(const CMMsl::WorkoutRecorderHeartRate *a1, const CMMsl::WorkoutRecorderHeartRate *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderHeartRate::~WorkoutRecorderHeartRate((CMMsl::WorkoutRecorderHeartRate *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderHeartRate *a2, CMMsl::WorkoutRecorderHeartRate *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(void *a1, uint64_t a2)
{
  *a1 = &unk_2706460A0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706460A0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderHeartRate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706460A0;
    v6[1] = v4;
    CMMsl::WorkoutRecorderHeartRate::~WorkoutRecorderHeartRate((CMMsl::WorkoutRecorderHeartRate *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderHeartRate::formatText(CMMsl::WorkoutRecorderHeartRate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderHeartRate::readFrom(CMMsl::WorkoutRecorderHeartRate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderHeartRate::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::OnsetHeartRateData *CMMsl::WorkoutRecorderHeartRate::hash_value(CMMsl::WorkoutRecorderHeartRate *this)
{
  uint64_t result = (CMMsl::OnsetHeartRateData *)*((void *)this + 1);
  if (result) {
    return (CMMsl::OnsetHeartRateData *)CMMsl::OnsetHeartRateData::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderHeartRate::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderMagnetometer::~WorkoutRecorderMagnetometer(CMMsl::WorkoutRecorderMagnetometer *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706460D8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderMagnetometer::~WorkoutRecorderMagnetometer(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(void *this, const CMMsl::WorkoutRecorderMagnetometer *a2)
{
  *this = &unk_2706460D8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderMagnetometer *CMMsl::WorkoutRecorderMagnetometer::operator=(const CMMsl::WorkoutRecorderMagnetometer *a1, const CMMsl::WorkoutRecorderMagnetometer *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderMagnetometer::~WorkoutRecorderMagnetometer((CMMsl::WorkoutRecorderMagnetometer *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderMagnetometer *a2, CMMsl::WorkoutRecorderMagnetometer *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(void *a1, uint64_t a2)
{
  *a1 = &unk_2706460D8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706460D8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706460D8;
    v6[1] = v4;
    CMMsl::WorkoutRecorderMagnetometer::~WorkoutRecorderMagnetometer((CMMsl::WorkoutRecorderMagnetometer *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::formatText(CMMsl::WorkoutRecorderMagnetometer *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::readFrom(CMMsl::WorkoutRecorderMagnetometer *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::Magnetometer *CMMsl::WorkoutRecorderMagnetometer::hash_value(CMMsl::WorkoutRecorderMagnetometer *this)
{
  uint64_t result = (CMMsl::Magnetometer *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Magnetometer *)CMMsl::Magnetometer::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderOdometer::~WorkoutRecorderOdometer(CMMsl::WorkoutRecorderOdometer *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270646110;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderOdometer::~WorkoutRecorderOdometer(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(void *this, const CMMsl::WorkoutRecorderOdometer *a2)
{
  *this = &unk_270646110;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderOdometer *CMMsl::WorkoutRecorderOdometer::operator=(const CMMsl::WorkoutRecorderOdometer *a1, const CMMsl::WorkoutRecorderOdometer *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderOdometer::~WorkoutRecorderOdometer((CMMsl::WorkoutRecorderOdometer *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderOdometer *a2, CMMsl::WorkoutRecorderOdometer *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(void *a1, uint64_t a2)
{
  *a1 = &unk_270646110;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270646110;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderOdometer::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270646110;
    v6[1] = v4;
    CMMsl::WorkoutRecorderOdometer::~WorkoutRecorderOdometer((CMMsl::WorkoutRecorderOdometer *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderOdometer::formatText(CMMsl::WorkoutRecorderOdometer *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderOdometer::readFrom(CMMsl::WorkoutRecorderOdometer *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderOdometer::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::OdometerWithAltitude *CMMsl::WorkoutRecorderOdometer::hash_value(CMMsl::WorkoutRecorderOdometer *this)
{
  uint64_t result = (CMMsl::OdometerWithAltitude *)*((void *)this + 1);
  if (result) {
    return (CMMsl::OdometerWithAltitude *)CMMsl::OdometerWithAltitude::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderOdometer::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderPressure::~WorkoutRecorderPressure(CMMsl::WorkoutRecorderPressure *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270646148;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderPressure::~WorkoutRecorderPressure(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(void *this, const CMMsl::WorkoutRecorderPressure *a2)
{
  *this = &unk_270646148;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderPressure *CMMsl::WorkoutRecorderPressure::operator=(const CMMsl::WorkoutRecorderPressure *a1, const CMMsl::WorkoutRecorderPressure *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderPressure::~WorkoutRecorderPressure((CMMsl::WorkoutRecorderPressure *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderPressure *a2, CMMsl::WorkoutRecorderPressure *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(void *a1, uint64_t a2)
{
  *a1 = &unk_270646148;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270646148;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderPressure::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270646148;
    v6[1] = v4;
    CMMsl::WorkoutRecorderPressure::~WorkoutRecorderPressure((CMMsl::WorkoutRecorderPressure *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderPressure::formatText(CMMsl::WorkoutRecorderPressure *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderPressure::readFrom(CMMsl::WorkoutRecorderPressure *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderPressure::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::Pressure *CMMsl::WorkoutRecorderPressure::hash_value(CMMsl::WorkoutRecorderPressure *this)
{
  uint64_t result = (CMMsl::Pressure *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderPressure::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderRotationRate::~WorkoutRecorderRotationRate(CMMsl::WorkoutRecorderRotationRate *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270646180;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderRotationRate::~WorkoutRecorderRotationRate(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(void *this, const CMMsl::WorkoutRecorderRotationRate *a2)
{
  *this = &unk_270646180;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderRotationRate *CMMsl::WorkoutRecorderRotationRate::operator=(const CMMsl::WorkoutRecorderRotationRate *a1, const CMMsl::WorkoutRecorderRotationRate *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderRotationRate::~WorkoutRecorderRotationRate((CMMsl::WorkoutRecorderRotationRate *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderRotationRate *a2, CMMsl::WorkoutRecorderRotationRate *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(void *a1, uint64_t a2)
{
  *a1 = &unk_270646180;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270646180;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderRotationRate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270646180;
    v6[1] = v4;
    CMMsl::WorkoutRecorderRotationRate::~WorkoutRecorderRotationRate((CMMsl::WorkoutRecorderRotationRate *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderRotationRate::formatText(CMMsl::WorkoutRecorderRotationRate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderRotationRate::readFrom(CMMsl::WorkoutRecorderRotationRate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderRotationRate::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::RotationRate *CMMsl::WorkoutRecorderRotationRate::hash_value(CMMsl::WorkoutRecorderRotationRate *this)
{
  uint64_t result = (CMMsl::RotationRate *)*((void *)this + 1);
  if (result) {
    return (CMMsl::RotationRate *)CMMsl::RotationRate::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderRotationRate::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderWatchOnWristStatus::~WorkoutRecorderWatchOnWristStatus(CMMsl::WorkoutRecorderWatchOnWristStatus *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706461B8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderWatchOnWristStatus::~WorkoutRecorderWatchOnWristStatus(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(void *this, const CMMsl::WorkoutRecorderWatchOnWristStatus *a2)
{
  *this = &unk_2706461B8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderWatchOnWristStatus *CMMsl::WorkoutRecorderWatchOnWristStatus::operator=(const CMMsl::WorkoutRecorderWatchOnWristStatus *a1, const CMMsl::WorkoutRecorderWatchOnWristStatus *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderWatchOnWristStatus::~WorkoutRecorderWatchOnWristStatus((CMMsl::WorkoutRecorderWatchOnWristStatus *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWatchOnWristStatus *a2, CMMsl::WorkoutRecorderWatchOnWristStatus *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(void *a1, uint64_t a2)
{
  *a1 = &unk_2706461B8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706461B8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706461B8;
    v6[1] = v4;
    CMMsl::WorkoutRecorderWatchOnWristStatus::~WorkoutRecorderWatchOnWristStatus((CMMsl::WorkoutRecorderWatchOnWristStatus *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::formatText(CMMsl::WorkoutRecorderWatchOnWristStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::readFrom(CMMsl::WorkoutRecorderWatchOnWristStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::WatchOnWristState *CMMsl::WorkoutRecorderWatchOnWristStatus::hash_value(CMMsl::WorkoutRecorderWatchOnWristStatus *this)
{
  uint64_t result = (CMMsl::WatchOnWristState *)*((void *)this + 1);
  if (result) {
    return (CMMsl::WatchOnWristState *)CMMsl::WatchOnWristState::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderWatchOrientationSettings::~WorkoutRecorderWatchOrientationSettings(CMMsl::WorkoutRecorderWatchOrientationSettings *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706461F0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderWatchOrientationSettings::~WorkoutRecorderWatchOrientationSettings(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(void *this, const CMMsl::WorkoutRecorderWatchOrientationSettings *a2)
{
  *this = &unk_2706461F0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderWatchOrientationSettings *CMMsl::WorkoutRecorderWatchOrientationSettings::operator=(const CMMsl::WorkoutRecorderWatchOrientationSettings *a1, const CMMsl::WorkoutRecorderWatchOrientationSettings *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderWatchOrientationSettings::~WorkoutRecorderWatchOrientationSettings((CMMsl::WorkoutRecorderWatchOrientationSettings *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWatchOrientationSettings *a2, CMMsl::WorkoutRecorderWatchOrientationSettings *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(void *a1, uint64_t a2)
{
  *a1 = &unk_2706461F0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706461F0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706461F0;
    v6[1] = v4;
    CMMsl::WorkoutRecorderWatchOrientationSettings::~WorkoutRecorderWatchOrientationSettings((CMMsl::WorkoutRecorderWatchOrientationSettings *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::formatText(CMMsl::WorkoutRecorderWatchOrientationSettings *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::readFrom(CMMsl::WorkoutRecorderWatchOrientationSettings *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::hash_value(CMMsl::WorkoutRecorderWatchOrientationSettings *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  char v2 = *(unsigned char *)(v1 + 16);
  uint64_t v5 = v1 + 8;
  uint64_t v3 = *(unsigned int *)(v1 + 8);
  uint64_t v4 = *(unsigned int *)(v5 + 4);
  if ((v2 & 2) == 0) {
    uint64_t v4 = 0;
  }
  if ((v2 & 1) == 0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v4;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderWifiScanResults::~WorkoutRecorderWifiScanResults(CMMsl::WorkoutRecorderWifiScanResults *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270646228;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderWifiScanResults::~WorkoutRecorderWifiScanResults(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(void *this, const CMMsl::WorkoutRecorderWifiScanResults *a2)
{
  *this = &unk_270646228;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderWifiScanResults *CMMsl::WorkoutRecorderWifiScanResults::operator=(const CMMsl::WorkoutRecorderWifiScanResults *a1, const CMMsl::WorkoutRecorderWifiScanResults *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderWifiScanResults::~WorkoutRecorderWifiScanResults((CMMsl::WorkoutRecorderWifiScanResults *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWifiScanResults *a2, CMMsl::WorkoutRecorderWifiScanResults *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(void *a1, uint64_t a2)
{
  *a1 = &unk_270646228;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270646228;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270646228;
    v6[1] = v4;
    CMMsl::WorkoutRecorderWifiScanResults::~WorkoutRecorderWifiScanResults((CMMsl::WorkoutRecorderWifiScanResults *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::formatText(CMMsl::WorkoutRecorderWifiScanResults *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::readFrom(CMMsl::WorkoutRecorderWifiScanResults *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::hash_value(CMMsl::WorkoutRecorderWifiScanResults *this)
{
  return sub_2571B33F0(*((void *)this + 1));
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderWorkoutEvent::~WorkoutRecorderWorkoutEvent(CMMsl::WorkoutRecorderWorkoutEvent *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270646260;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderWorkoutEvent::~WorkoutRecorderWorkoutEvent(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(void *this, const CMMsl::WorkoutRecorderWorkoutEvent *a2)
{
  *this = &unk_270646260;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderWorkoutEvent *CMMsl::WorkoutRecorderWorkoutEvent::operator=(const CMMsl::WorkoutRecorderWorkoutEvent *a1, const CMMsl::WorkoutRecorderWorkoutEvent *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderWorkoutEvent::~WorkoutRecorderWorkoutEvent((CMMsl::WorkoutRecorderWorkoutEvent *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWorkoutEvent *a2, CMMsl::WorkoutRecorderWorkoutEvent *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(void *a1, uint64_t a2)
{
  *a1 = &unk_270646260;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270646260;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270646260;
    v6[1] = v4;
    CMMsl::WorkoutRecorderWorkoutEvent::~WorkoutRecorderWorkoutEvent((CMMsl::WorkoutRecorderWorkoutEvent *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::formatText(CMMsl::WorkoutRecorderWorkoutEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::readFrom(CMMsl::WorkoutRecorderWorkoutEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::WorkoutEvent *CMMsl::WorkoutRecorderWorkoutEvent::hash_value(CMMsl::WorkoutRecorderWorkoutEvent *this)
{
  uint64_t result = (CMMsl::WorkoutEvent *)*((void *)this + 1);
  if (result) {
    return (CMMsl::WorkoutEvent *)CMMsl::WorkoutEvent::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderWorkoutSessionPriors::~WorkoutRecorderWorkoutSessionPriors(CMMsl::WorkoutRecorderWorkoutSessionPriors *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270646298;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderWorkoutSessionPriors::~WorkoutRecorderWorkoutSessionPriors(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(void *this, const CMMsl::WorkoutRecorderWorkoutSessionPriors *a2)
{
  *this = &unk_270646298;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderWorkoutSessionPriors *CMMsl::WorkoutRecorderWorkoutSessionPriors::operator=(const CMMsl::WorkoutRecorderWorkoutSessionPriors *a1, const CMMsl::WorkoutRecorderWorkoutSessionPriors *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderWorkoutSessionPriors::~WorkoutRecorderWorkoutSessionPriors((CMMsl::WorkoutRecorderWorkoutSessionPriors *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWorkoutSessionPriors *a2, CMMsl::WorkoutRecorderWorkoutSessionPriors *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(void *a1, uint64_t a2)
{
  *a1 = &unk_270646298;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270646298;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270646298;
    v6[1] = v4;
    CMMsl::WorkoutRecorderWorkoutSessionPriors::~WorkoutRecorderWorkoutSessionPriors((CMMsl::WorkoutRecorderWorkoutSessionPriors *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::formatText(CMMsl::WorkoutRecorderWorkoutSessionPriors *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::readFrom(CMMsl::WorkoutRecorderWorkoutSessionPriors *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::hash_value(CMMsl::WorkoutRecorderWorkoutSessionPriors *this)
{
  return sub_2571B3448(*((void *)this + 1));
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutSessionPriors::~WorkoutSessionPriors(CMMsl::WorkoutSessionPriors *this)
{
  *(void *)this = &unk_2706462D0;
  unint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_2706462D0;
  unint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_2706462D0;
  unint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(void *this, const CMMsl::WorkoutSessionPriors *a2)
{
  this[1] = 0;
  *this = &unk_2706462D0;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_2572C5EDC(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_2570AFA4C(a1);
}

uint64_t CMMsl::WorkoutSessionPriors::operator=(uint64_t a1, const CMMsl::WorkoutSessionPriors *a2)
{
  if ((const CMMsl::WorkoutSessionPriors *)a1 != a2)
  {
    CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = &unk_2706462D0;
    unsigned int v9 = (void **)&v7;
    sub_2572C6D4C(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::WorkoutSessionPriors *a2, CMMsl::WorkoutSessionPriors *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706462D0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_2706462D0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::WorkoutSessionPriors::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v9 = &unk_2706462D0;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_2572C6E0C((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    char v12 = (void **)&v10;
    unsigned int v9 = &unk_2706462D0;
    sub_2572C6D4C(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WorkoutSessionPriors::formatText(CMMsl::WorkoutSessionPriors *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "workoutPriors");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::WorkoutSessionPriors::readFrom(CMMsl::WorkoutSessionPriors *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_2572C64F8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::WorkoutSessionPriors::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (int i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    long long v5 = *v2++;
  return this;
}

BOOL sub_2572C657C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  long long v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = CMMsl::WorkoutPriorInformation::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::WorkoutSessionPriors::hash_value(CMMsl::WorkoutSessionPriors *this)
{
  uint64_t v1 = (CMMsl::WorkoutPriorInformation **)*((void *)this + 1);
  unint64_t v2 = (CMMsl::WorkoutPriorInformation **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::WorkoutPriorInformation::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::ZeroVelocityCorrection::~ZeroVelocityCorrection(CMMsl::ZeroVelocityCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270646308;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ZeroVelocityCorrection::~ZeroVelocityCorrection(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(void *this, const CMMsl::ZeroVelocityCorrection *a2)
{
  *this = &unk_270646308;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::ZeroVelocityCorrection *CMMsl::ZeroVelocityCorrection::operator=(const CMMsl::ZeroVelocityCorrection *a1, const CMMsl::ZeroVelocityCorrection *a2)
{
  if (a1 != a2)
  {
    CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::ZeroVelocityCorrection::~ZeroVelocityCorrection((CMMsl::ZeroVelocityCorrection *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ZeroVelocityCorrection *a2, CMMsl::ZeroVelocityCorrection *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(void *a1, uint64_t a2)
{
  *a1 = &unk_270646308;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270646308;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::ZeroVelocityCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270646308;
    v6[1] = v4;
    CMMsl::ZeroVelocityCorrection::~ZeroVelocityCorrection((CMMsl::ZeroVelocityCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::ZeroVelocityCorrection::formatText(CMMsl::ZeroVelocityCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ZeroVelocityCorrection::readFrom(CMMsl::ZeroVelocityCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ZeroVelocityCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::DeviceMotionCorrection *CMMsl::ZeroVelocityCorrection::hash_value(CMMsl::ZeroVelocityCorrection *this)
{
  uint64_t result = (CMMsl::DeviceMotionCorrection *)*((void *)this + 1);
  if (result) {
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::ZeroVelocityCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void sub_2572C6D4C(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_2572C6DA0(v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_2572C6DA0(void *result)
{
  uint64_t v1 = result;
  unint64_t v2 = (void *)*result;
  unint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    int v4 = (void *)*--v3;
    uint64_t result = v4;
    *unint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void sub_2572C6E0C(void **a1)
{
  if (*a1)
  {
    sub_2572C6DA0(a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_2572C6E48(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  JUMPOUT(0x25A2B2850);
}

void ***sub_2572C6E9C(void ***result, void **a2)
{
  unint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    free(*v2);
    JUMPOUT(0x25A2B2850);
  }
  return result;
}

void *sub_2572C6EFC(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_2570AFBB8();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    char v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

unint64_t sub_2572C6F9C(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    int v4 = (uint64_t *)a1;
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v44 + v46 + v47 + v2;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v47 + v2 + v43 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v45 + v48 + v56;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      unsigned int v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v69 + v67 + v78 + v68;
        uint64_t v60 = __ROR8__(v69 + v67 + v78, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      unsigned int v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      unint64_t v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * ((v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)) ^ v40);
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

void *sub_2572C73EC(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  unsigned int v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 61) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61) {
LABEL_23:
    }
      sub_2570AFD0C();
    unint64_t result = sub_2572C7528(v11);
    unsigned int v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    void v7[2] = &result[v12];
    size_t v13 = a3 - v6;
    if (v13) {
      unint64_t result = memmove(result, v6, v13);
    }
    uint64_t v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v14 = (void **)(result + 1);
  uint64_t v15 = (unsigned char *)result[1];
  unint64_t v16 = (v15 - v9) >> 3;
  if (v16 >= a4)
  {
    size_t v13 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint64_t v18 = (void *)*result;
LABEL_21:
    unint64_t result = memmove(v18, __src, v13);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[8 * v16];
  if (v15 != v9)
  {
    unint64_t result = memmove((void *)*result, __src, v15 - v9);
    unsigned int v9 = (char *)*v14;
  }
  size_t v13 = a3 - v17;
  if (v13)
  {
    uint64_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v14 = &v9[v13];
  return result;
}

void *sub_2572C7528(unint64_t a1)
{
  if (a1 >> 61) {
    sub_2570AFC60();
  }
  return operator new(8 * a1);
}

__n128 sub_2572C7560(uint64_t a1, __n128 *a2)
{
  int v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void *sub_2572C75B4(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  unsigned int v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 62) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 62) {
LABEL_23:
    }
      sub_2570AFD0C();
    __n128 result = sub_2572C76F0(v11);
    unsigned int v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    void v7[2] = (char *)result + 4 * v12;
    size_t v13 = a3 - v6;
    if (v13) {
      __n128 result = memmove(result, v6, v13);
    }
    uint64_t v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v14 = (void **)(result + 1);
  uint64_t v15 = (unsigned char *)result[1];
  unint64_t v16 = (v15 - v9) >> 2;
  if (v16 >= a4)
  {
    size_t v13 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint64_t v18 = (void *)*result;
LABEL_21:
    __n128 result = memmove(v18, __src, v13);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[4 * v16];
  if (v15 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v15 - v9);
    unsigned int v9 = (char *)*v14;
  }
  size_t v13 = a3 - v17;
  if (v13)
  {
    uint64_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v14 = &v9[v13];
  return result;
}

void *sub_2572C76F0(unint64_t a1)
{
  if (a1 >> 62) {
    sub_2570AFC60();
  }
  return operator new(4 * a1);
}

uint64_t sub_2572C7728(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t CMMsl::ReaderIterator::operator++(uint64_t a1)
{
  unint64_t v2 = (std::__shared_weak_count *)operator new(0xE40uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_270648F98;
  uint64_t v3 = (CMMsl::Item *)&v2[1];
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_270642520;
  bzero(&v2[1].__shared_owners_, 0x260uLL);
  bzero(&v2[27], 0xBB4uLL);
  uint64_t v4 = *(CMMsl::Reader **)a1;
  do
    int ItemInternal = CMMsl::Reader::nextItemInternal(v4, v3);
  while (ItemInternal == 1);
  if (ItemInternal)
  {
    *(void *)a1 = 0;
  }
  else
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v2;
    if (v6) {
      sub_2572C8014(v6);
    }
  }
  sub_2572C8014(v2);
  return a1;
}

void sub_2572C7880(_Unwind_Exception *a1)
{
  sub_2572C8014(v1);
  _Unwind_Resume(a1);
}

BOOL CMMsl::Reader::nextItem(CMMsl::Reader *this, CMMsl::Item *a2)
{
  do
    int ItemInternal = CMMsl::Reader::nextItemInternal(this, a2);
  while (ItemInternal == 1);
  return ItemInternal == 0;
}

CMMsl::ReaderIterator *CMMsl::ReaderIterator::ReaderIterator(CMMsl::ReaderIterator *this, CMMsl::Reader *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = a2;
  CMMsl::ReaderIterator::operator++((uint64_t)this);
  return this;
}

void sub_2572C7908(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_2572C8014(v3);
  }
  _Unwind_Resume(exception_object);
}

CMMsl::Reader *CMMsl::Reader::Reader(CMMsl::Reader *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = -1;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 14) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 24) = 0;
  inflateInit_((z_streamp)((char *)this + 48), "1.2.12", 112);
  return this;
}

void sub_2572C7994(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 168) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void CMMsl::Reader::~Reader(CMMsl::Reader *this)
{
  inflateEnd((z_streamp)((char *)this + 48));
  unint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
}

uint64_t CMMsl::Reader::open(CMMsl::Reader *this, const char *a2)
{
  CMMsl::Reader::close(this);
  int v4 = open(a2, 0x1000000);
  *((_DWORD *)this + 2) = v4;
  if (v4 < 0) {
    return 0;
  }
  size_t v5 = lseek(v4, 0, 2);
  if ((v5 & 0x8000000000000000) != 0
    || (size_t v6 = v5, v7 = mmap(0, v5, 1, 1, *((_DWORD *)this + 2), 0), v7 == (void *)-1))
  {
    CMMsl::Reader::close(this);
    return 0;
  }
  *((void *)this + 2) = v6;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = v7;
  *((unsigned char *)this + 40) = 0;
  return CMMsl::Reader::openInternal(this);
}

uint64_t CMMsl::Reader::close(CMMsl::Reader *this)
{
  *((void *)this + 21) = *((void *)this + 20);
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  if (!*(void *)this)
  {
    unint64_t v2 = (void *)*((void *)this + 4);
    if (v2) {
      munmap(v2, *((void *)this + 2));
    }
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 4) = 0;
  uint64_t result = *((unsigned int *)this + 2);
  if ((result & 0x80000000) == 0) {
    uint64_t result = close(result);
  }
  *((_DWORD *)this + 2) = -1;
  *(void *)this = 0;
  return result;
}

uint64_t CMMsl::Reader::openInternal(CMMsl::Reader *this)
{
  uint64_t v1 = (void *)*((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 2) > 7uLL && *v1 == 0xE020C5BE006C536DLL)
    {
      *((void *)this + 3) += 8;
      return 1;
    }
    CMMsl::Reader::close(this);
  }
  return 0;
}

uint64_t CMMsl::Reader::open(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  *(unsigned char *)(a1 + 40) = 0;
  return CMMsl::Reader::openInternal((CMMsl::Reader *)a1);
}

void *CMMsl::Reader::closeSens(void *this)
{
  this[21] = this[20];
  this[23] = 0;
  this[24] = 0;
  return this;
}

BOOL CMMsl::Reader::isOpen(CMMsl::Reader *this)
{
  return *((void *)this + 4) != 0;
}

uint64_t CMMsl::Reader::nextItemInternal(CMMsl::Reader *this, CMMsl::Item *a2)
{
  uint64_t v3 = *((void *)this + 20);
  if (v3 == *((void *)this + 21))
  {
    return CMMsl::Reader::nextSens(this);
  }
  else
  {
    int v4 = (void *)((char *)this + 184);
    unint64_t v5 = *((void *)this + 23);
    if (v5 >= 4
      && (uint64_t v7 = (_DWORD *)*((void *)this + 24),
          unsigned int v10 = *v7,
          uint64_t v8 = (const unsigned __int8 *)(v7 + 1),
          uint64_t v9 = v10,
          unint64_t v11 = v5 - 4,
          *((void *)this + 23) = v11,
          *((void *)this + 24) = v8,
          v11 >= v10))
    {
      PB::Reader::Reader((PB::Reader *)v14, v8);
      (*(void (**)(CMMsl::Item *, unsigned char *))(*(void *)a2 + 16))(a2, v14);
      uint64_t v13 = *((void *)this + 24) + v9;
      *((void *)this + 23) -= v9;
      *((void *)this + 24) = v13;
      return v14[24];
    }
    else
    {
      *((void *)this + 21) = v3;
      uint64_t result = 1;
      *int v4 = 0;
      *((void *)this + 24) = 0;
    }
  }
  return result;
}

uint64_t CMMsl::Reader::nextSens(CMMsl::Reader *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 2;
  }
  unint64_t v3 = *((void *)this + 2);
  unint64_t v4 = *((void *)this + 3);
  if (v4 >= v3 || (unint64_t v5 = v4 + 16, v3 <= v4 + 16))
  {
LABEL_18:
    CMMsl::Reader::close(this);
    return 2;
  }
  if (*((unsigned char *)this + 40))
  {
    *((unsigned char *)this + 40) = 0;
    if (v4 + 8 < v3)
    {
      uint64_t result = 1;
      while (*(void *)(v1 + v4) != 0x5979AAB3D5E07959)
      {
        unint64_t v7 = v4 + 16;
        v4 += 8;
        *((void *)this + 3) = v4;
        if (v7 >= v3) {
          return result;
        }
      }
    }
    return 1;
  }
  uint64_t v8 = v1 + v4;
  if (*(void *)(v1 + v4) != 0x5979AAB3D5E07959)
  {
    *((void *)this + 3) = v4 + 8;
    goto LABEL_21;
  }
  uint64_t v11 = v8 + 8;
  int v9 = *(_DWORD *)(v8 + 8);
  uint64_t v10 = *(unsigned int *)(v11 + 4);
  *((void *)this + 3) = v5;
  if (v9 != 1936614771)
  {
    uint64_t v13 = v4 + v10 + 23;
    goto LABEL_23;
  }
  if (v10 <= 0xB)
  {
LABEL_21:
    uint64_t result = 1;
    *((unsigned char *)this + 40) = 1;
    return result;
  }
  int v12 = v10;
  if (v5 + v10 >= v3)
  {
    if (v4 + 44 < v3)
    {
      int v12 = v3 - (v4 + 16);
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_16:
  if (!CMMsl::Reader::decompressSens(this, (const unsigned __int8 *)(v1 + v5 + 12), v12 - 12)) {
    goto LABEL_21;
  }
  uint64_t v13 = v10 + *((void *)this + 3) + 7;
LABEL_23:
  *((void *)this + 3) = v13 & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t CMMsl::Reader::scanForSync(uint64_t this)
{
  *(unsigned char *)(this + 40) = 0;
  unint64_t v1 = *(void *)(this + 16);
  uint64_t v2 = *(void *)(this + 24);
  if (v2 + 8 < v1)
  {
    uint64_t v3 = *(void *)(this + 32);
    do
    {
      if (*(void *)(v3 + v2) == 0x5979AAB3D5E07959) {
        break;
      }
      unint64_t v4 = v2 + 16;
      v2 += 8;
      *(void *)(this + 24) = v2;
    }
    while (v4 < v1);
  }
  return this;
}

BOOL CMMsl::Reader::decompressSens(CMMsl::Reader *this, const unsigned __int8 *a2, int a3)
{
  int v6 = 0x4000;
  unint64_t v7 = (char *)operator new(0x4000uLL);
  uint64_t v8 = v7 + 0x4000;
  uint64_t v20 = v7;
  uint64_t v22 = v7 + 0x4000;
  bzero(v7, 0x4000uLL);
  uint64_t v21 = v7 + 0x4000;
  *((void *)this + 6) = a2;
  *((_DWORD *)this + 14) = a3;
  *((void *)this + 9) = v7;
  while (1)
  {
    *((_DWORD *)this + 20) = v6;
    int v9 = inflate((z_streamp)((char *)this + 48), 2);
    if (v9) {
      break;
    }
    size_t v10 = v8 - v7;
    if (v8 - v7 < 1)
    {
      if ((v10 & 0x8000000000000000) != 0)
      {
        uint64_t v8 = &v7[2 * v10];
        uint64_t v21 = v8;
      }
    }
    else
    {
      sub_2572C8124((unint64_t *)&v20, v10);
      unint64_t v7 = v20;
      uint64_t v8 = v21;
    }
    uint64_t v11 = &v7[*((void *)this + 11)];
    *((void *)this + 9) = v11;
    int v6 = v8 - v11;
  }
  BOOL v12 = v9 == 1;
  unint64_t v13 = *((void *)this + 11);
  BOOL v14 = v13 >= v8 - v7;
  if (v13 <= v8 - v7)
  {
    uint64_t v15 = &v7[v13];
    if (v14) {
      uint64_t v15 = v8;
    }
  }
  else
  {
    sub_2572C8124((unint64_t *)&v20, v13 - (v8 - v7));
    unint64_t v7 = v20;
    uint64_t v15 = v21;
  }
  int64_t v16 = v15 - v7;
  uint64_t v20 = (char *)*((void *)this + 20);
  uint64_t v17 = v20;
  *((void *)this + 20) = v7;
  *((void *)this + 21) = v15;
  uint64_t v18 = v22;
  *((void *)this + 23) = v16;
  *((void *)this + 24) = v7;
  *((void *)this + 22) = v18;
  inflateReset((z_streamp)((char *)this + 48));
  if (v17) {
    operator delete(v17);
  }
  return v12;
}

void sub_2572C7FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2572C8014(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_2572C8088(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270648F98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2572C80A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270648F98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572C80FC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2572C8124(unint64_t *a1, size_t a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    unint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_2570AFD0C();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    BOOL v12 = &v7[v11];
    unint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      BOOL v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      unint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_2572C825C(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unint64_t v4 = (uint64_t *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_2572C6EFC((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)unint64_t v4 = v5;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    sub_2572C6EFC((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v6;
  }
  unint64_t v7 = (unsigned char *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_2572C6EFC(v7, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)unint64_t v7 = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0xBFF0000000000000;
  char v10 = sub_2570AF26C(v4);
  *(unsigned char *)(a1 + 136) = v10;
  if ((v10 & 1) == 0)
  {
    if (qword_269FE5238 != -1) {
      dispatch_once(&qword_269FE5238, &unk_270648FD8);
    }
    unint64_t v11 = qword_269FE5230;
    if (os_log_type_enabled((os_log_t)qword_269FE5230, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 39) < 0) {
        unint64_t v4 = (uint64_t *)*v4;
      }
      int v13 = 136446210;
      BOOL v14 = v4;
      _os_log_error_impl(&dword_2570AE000, v11, OS_LOG_TYPE_ERROR, "Unable to create directory at path: %{public}s", (uint8_t *)&v13, 0xCu);
    }
  }
  return a1;
}

void sub_2572C840C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2572C846C(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

CMMsl::Writer *sub_2572C84E0(uint64_t a1)
{
  uint64_t v2 = (CMMsl::Writer **)(a1 + 128);
  uint64_t result = *(CMMsl::Writer **)(a1 + 128);
  if (result)
  {
    CMMsl::Writer::sync(result);
    return sub_2572C9844(v2, 0);
  }
  return result;
}

uint64_t sub_2572C8530(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A2B2820](a1 + 112);
  return a1;
}

void sub_2572C8634(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 136))
  {
    long long v5 = *(void **)(a1 + 128);
    if (!v5
      || (double v6 = *(double *)(a1 + 144), v6 < 0.0)
      || (v6 <= a3 ? (BOOL v7 = v5[15] + v5[6] <= *(void *)a1) : (BOOL v7 = 0),
          !v7 || (LODWORD(a4) = *(_DWORD *)(a1 + 8), a3 - v6 > (double)*(unint64_t *)&a4)))
    {
      sub_2572C84E0(a1);
      operator new();
    }
    long long v8 = v5[1];
    *(void *)block = MEMORY[0x263EF8330];
    *(void *)&block[8] = 0x40000000;
    *(void *)&block[16] = sub_2570B1758;
    BOOL v12 = (const char *)&unk_2654268F8;
    int v13 = v5;
    uint64_t v14 = a2;
    dispatch_sync(v8, block);
  }
  else
  {
    if (qword_269FE5238 != -1) {
      dispatch_once(&qword_269FE5238, &unk_270648FD8);
    }
    long long v9 = qword_269FE5230;
    if (os_log_type_enabled((os_log_t)qword_269FE5230, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)block = 136315650;
      *(void *)&block[4] = "assert";
      *(_WORD *)&block[12] = 2080;
      *(void *)&block[14] = "fValid";
      *(_WORD *)&block[22] = 2080;
      BOOL v12 = "On call to writeItem client should check if the logger was opened";
      _os_log_fault_impl(&dword_2570AE000, v9, OS_LOG_TYPE_FAULT, "Event: %s\n Condition: %s\n Message: %s", block, 0x20u);
      if (qword_269FE5238 != -1) {
        dispatch_once(&qword_269FE5238, &unk_270648FD8);
      }
    }
    char v10 = qword_269FE5230;
    if (os_log_type_enabled((os_log_t)qword_269FE5230, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)block = 136315650;
      *(void *)&block[4] = "assert";
      *(_WORD *)&block[12] = 2080;
      *(void *)&block[14] = "fValid";
      *(_WORD *)&block[22] = 2080;
      BOOL v12 = "On call to writeItem client should check if the logger was opened";
      _os_log_impl(&dword_2570AE000, v10, OS_LOG_TYPE_INFO, "Event: %s\n Condition: %s\n Message: %s", block, 0x20u);
    }
    abort_report_np();
    __break(1u);
  }
}

void sub_2572C948C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,std::locale a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,std::locale a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::locale a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,char a60)
{
  if (a2)
  {
    if (a34 < 0) {
      operator delete(__p);
    }
    MEMORY[0x25A2B26D0](&a35);
    __cxa_begin_catch(exception_object);
    std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
    __cxa_end_catch();
    JUMPOUT(0x2572C8CE4);
  }
  _Unwind_Resume(exception_object);
}

void sub_2572C96E8()
{
}

void sub_2572C97E0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B2850](v1, 0x10F0C401CD2F398);
  _Unwind_Resume(a1);
}

void sub_2572C9804(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    sub_2572C8014(locale);
  }
  std::locale::~locale(this);
}

CMMsl::Writer *sub_2572C9844(CMMsl::Writer **a1, CMMsl::Writer *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    CMMsl::Writer::~Writer(result);
    JUMPOUT(0x25A2B2850);
  }
  return result;
}

void *sub_2572C9894(void *__dst, const void **a2, char a3)
{
  uint64_t v3 = __dst;
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  unint64_t v6 = v5 + 1;
  if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2570AFBB8();
  }
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v11 = operator new(v9 + 1);
    v3[1] = v6;
    v3[2] = v10 | 0x8000000000000000;
    *uint64_t v3 = v11;
    uint64_t v3 = v11;
  }
  else
  {
    __dst[1] = 0;
    __dst[2] = 0;
    *__dst = 0;
    *((unsigned char *)__dst + 23) = v6;
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    BOOL v12 = a2;
  }
  else {
    BOOL v12 = *a2;
  }
  __dst = memmove(v3, v12, v5);
LABEL_15:
  int v13 = (char *)v3 + v5;
  *int v13 = a3;
  v13[1] = 0;
  return __dst;
}

os_log_t sub_2572C9970()
{
  os_log_t result = os_log_create("com.apple.MotionSensorLogging", "MSL");
  qword_269FE5230 = (uint64_t)result;
  return result;
}

const std::locale *sub_2572C99A0(const std::locale *a1)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x25A2B27D0]();
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  a1[2].__locale_ = (std::locale::__imp *)std::locale::use_facet(a1, MEMORY[0x263F8C130]);
  return a1;
}

void sub_2572C99EC(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_2572C9A00()
{
}

void sub_2572C9E34(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_2572C9E98()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 17);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572C9EDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_2572C9EF0(_DWORD *a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v6 = a2;
  do
  {
    BOOL v7 = v6;
    unint64_t v6 = sub_2572CA60C(a1, v6, a3);
  }
  while (v6 != v7);
  if (v7 == a2) {
    operator new();
  }
  if (v7 != (unsigned __int8 *)a3)
  {
    if (*v7 == 124)
    {
      long long v8 = v7 + 1;
      uint64_t v9 = v7 + 1;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = sub_2572CA60C(a1, v9, a3);
      }
      while (v9 != v10);
      if (v10 == v8) {
        operator new();
      }
      sub_2572CA504();
    }
    return (char *)v7;
  }
  return a3;
}

unsigned __int8 *sub_2572CA050(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  int v4 = a3;
  if (*a2 == 94) {
    sub_2572CAF18();
  }
  if (a2 != a3)
  {
    do
    {
      unint64_t v6 = v3;
      uint64_t v3 = sub_2572D13A4(a1, v3, v4);
    }
    while (v3 != v6);
    if (v6 != v4)
    {
      if (v6 + 1 == v4 && *v6 == 36) {
        sub_2572CAF9C();
      }
      sub_2572D134C();
    }
  }
  return v4;
}

unsigned __int8 *sub_2572CA100(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = sub_2572D18CC(a1, a2, a3);
  if (v6 == a2) {
LABEL_8:
  }
    sub_2572D134C();
  if (v6 != (unsigned __int8 *)v3)
  {
    if (*v6 == 124)
    {
      if (sub_2572D18CC(a1, v6 + 1, v3) != v6 + 1) {
        sub_2572CA504();
      }
      goto LABEL_8;
    }
    return v6;
  }
  return (unsigned __int8 *)v3;
}

void sub_2572CA1A4()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 14);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572CA1E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2572CA200()
{
}

void sub_2572CA214(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_2572CA22C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572CA264(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2572CA294(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002572DA6F3
    || ((v3 & 0x80000002572DA6F3 & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x80000002572DA6F3)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002572DA6F3 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_2572CA300(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_2572CA36C(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572CA3F8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_2572CA40C(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_2572CA478(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x25A2B2850);
}

void sub_2572CA504()
{
}

unsigned __int8 *sub_2572CA60C(_DWORD *a1, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  int v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != (unsigned __int8 *)a3)
      {
        int v13 = a2[1];
        if (v13 == 66 || v13 == 98) {
          sub_2572CB020();
        }
      }
    }
    else if (v6 == 94)
    {
      sub_2572CAF18();
    }
  }
  else
  {
    if (v6 == 36) {
      sub_2572CAF9C();
    }
    BOOL v9 = v6 == 40;
    long long v8 = (char *)(a2 + 1);
    BOOL v9 = !v9 || v8 == a3;
    if (!v9)
    {
      BOOL v9 = *v8 == 63;
      uint64_t v10 = (char *)(a2 + 2);
      if (v9 && v10 != a3)
      {
        int v12 = *v10;
        if (v12 == 33)
        {
          sub_2572C99A0(v27);
          long long v28 = 0u;
          uint64_t v30 = 0;
          long long v29 = 0u;
          LODWORD(v28) = a1[6];
          sub_2572C9A00(v27, a2 + 3, a3);
          sub_2572CB0B4();
        }
        if (v12 == 61)
        {
          sub_2572C99A0(v27);
          long long v28 = 0u;
          uint64_t v30 = 0;
          long long v29 = 0u;
          LODWORD(v28) = a1[6];
          sub_2572C9A00(v27, a2 + 3, a3);
          sub_2572CB0B4();
        }
      }
    }
  }
  if ((char)v7 <= 91)
  {
    uint64_t result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_51;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_79;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          uint64_t v15 = a1 + 9;
          ++a1[9];
          int64_t v16 = (char *)sub_2572C9EF0(a1, a2 + 3, a3);
          if (v16 == a3) {
            goto LABEL_79;
          }
          uint64_t v17 = v16;
          if (*v16 != 41) {
            goto LABEL_79;
          }
        }
        else
        {
          sub_2572CD4D8((uint64_t)a1);
          uint64_t v15 = a1 + 9;
          ++a1[9];
          uint64_t v23 = (char *)sub_2572C9EF0(a1, a2 + 1, a3);
          if (v23 == a3 || (uint64_t v17 = v23, *v23 != 41)) {
LABEL_79:
          }
            sub_2572CB184();
          sub_2572CD55C((uint64_t)a1);
        }
        --*v15;
        uint64_t v19 = (unsigned __int8 *)(v17 + 1);
        goto LABEL_48;
      case '*':
      case '+':
        goto LABEL_56;
      case '.':
        operator new();
      default:
        if ((char)v7 == 91)
        {
          uint64_t v19 = sub_2572CC810((uint64_t)a1, a2, a3);
          goto LABEL_48;
        }
        if ((char)v7 != 63) {
          goto LABEL_51;
        }
        goto LABEL_56;
    }
  }
  uint64_t v18 = ((char)v7 - 92);
  if (v18 > 0x21) {
LABEL_51:
  }
    sub_2572CDA64((uint64_t)a1);
  if (((1 << (v7 - 92)) & 0x300000006) != 0) {
    return a2;
  }
  if ((char)v7 != 92)
  {
    if (v18 == 31) {
LABEL_56:
    }
      sub_2572CD5D8();
    goto LABEL_51;
  }
  if (v7 != 92) {
    return a2;
  }
  uint64_t v20 = a2 + 1;
  if (a2 + 1 == (unsigned __int8 *)a3) {
    sub_2572CD728();
  }
  int v21 = *v20;
  unsigned int v22 = v21 - 48;
  if (v21 == 48) {
    sub_2572CDA64((uint64_t)a1);
  }
  if ((v21 - 49) <= 8)
  {
    uint64_t v24 = (char *)(a2 + 2);
    if (a2 + 2 == (unsigned __int8 *)a3) {
      goto LABEL_63;
    }
    do
    {
      int v25 = *v24;
      if ((v25 - 48) > 9) {
        break;
      }
      if (v22 >= 0x19999999) {
        goto LABEL_80;
      }
      ++v24;
      unsigned int v22 = v25 + 10 * v22 - 48;
    }
    while (v24 != a3);
    if (v22)
    {
LABEL_63:
      if (v22 <= a1[7]) {
        sub_2572CDCA8((uint64_t)a1);
      }
    }
LABEL_80:
    sub_2572CDC50();
  }
  if ((char)v21 > 99)
  {
    if ((char)v21 == 119) {
      goto LABEL_74;
    }
    if ((char)v21 == 115) {
LABEL_78:
    }
      sub_2572CE834();
    if ((char)v21 != 100) {
      goto LABEL_75;
    }
LABEL_73:
    sub_2572CE834();
  }
  switch((char)v21)
  {
    case 'D':
      goto LABEL_73;
    case 'S':
      goto LABEL_78;
    case 'W':
LABEL_74:
      sub_2572CE834();
  }
LABEL_75:
  uint64_t v26 = sub_2572CD780((uint64_t)a1, (char *)a2 + 1, a3, 0);
  if (v26 == v20) {
    uint64_t v19 = a2;
  }
  else {
    uint64_t v19 = v26;
  }
LABEL_48:
  uint64_t result = a2;
  if (v19 != a2)
  {
    return sub_2572CAC1C((uint64_t)a1, v19, (unsigned __int8 *)a3);
  }
  return result;
}

void sub_2572CABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *sub_2572CAC1C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = (char)*a2;
  if (v4 <= 62)
  {
    if (v4 == 42 || v4 == 43) {
LABEL_18:
    }
      sub_2572D0D4C();
    return a2;
  }
  if (v4 == 63) {
    goto LABEL_18;
  }
  if (v4 == 123)
  {
    size_t v5 = a2 + 1;
    int v6 = sub_2572D0EDC(a2 + 1, a3, &v12);
    if (v6 == v5) {
      goto LABEL_23;
    }
    if (v6 != a3)
    {
      int v7 = (char)*v6;
      if (v7 != 44)
      {
        if (v7 == 125) {
          goto LABEL_18;
        }
LABEL_23:
        sub_2572D0F78();
      }
      long long v8 = v6 + 1;
      if (v6 + 1 == a3) {
        goto LABEL_23;
      }
      if (*v8 == 125) {
        goto LABEL_18;
      }
      int v11 = -1;
      uint64_t v10 = sub_2572D0EDC(v6 + 1, a3, &v11);
      if (v10 != v8 && v10 != a3 && *v10 == 125)
      {
        if (v11 >= v12) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
    }
    sub_2572D0FD0();
  }
  return a2;
}

void sub_2572CAF18()
{
}

void sub_2572CAF9C()
{
}

void sub_2572CB020()
{
}

void sub_2572CB0B4()
{
}

void sub_2572CB184()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 6);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572CB1C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2572CB1DC(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_2572CB248(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572CB2D4(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void *sub_2572CB334(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_2572CB3A0(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572CB42C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_2572CB47C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_2706491E8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_2572CB508(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_2706491E8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572CB5B4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

std::locale *sub_2572CB6C8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270649230;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    sub_2572C8014(locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_2572CB768(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270649230;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    sub_2572C8014(locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }
  JUMPOUT(0x25A2B2850);
}

void sub_2572CB828(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v25 = 0;
  long long v26 = 0uLL;
  char v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  __p = 0;
  uint64_t v19 = 0;
  unint64_t v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v20 = 0;
  *(void *)&long long v21 = v5;
  *((void *)&v21 + 1) = v5;
  char v22 = 0;
  sub_2572CBE18((char **)&__p, v4, &v21);
  uint64_t v23 = v6;
  uint64_t v24 = v6;
  char v25 = 0;
  long long v26 = v21;
  char v27 = v22;
  uint64_t v29 = v6;
  char v28 = 1;
  uint64_t v7 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(void *)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_2572CB9CC(a1 + 16, v7, *(void *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    int v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  int v10 = (char *)__p;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    int64_t v16 = &v10[24 * v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v16;
    *(unsigned char *)(v17 + 16) = v16[16];
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  operator delete(v10);
}

void sub_2572CB9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2572CB9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  int64x2_t v45 = 0uLL;
  unint64_t v46 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(void *)&long long v43 = a3;
    *((void *)&v43 + 1) = a3;
    char v44 = 0;
    *(_DWORD *)unint64_t v40 = 0;
    memset(&v40[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v42, 0, 21);
    v45.i64[1] = (uint64_t)sub_2572CC3B0(&v45, (uint64_t)v40);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*(void *)&v40[32]) {
      operator delete(*(void **)&v40[32]);
    }
    unint64_t v38 = a4;
    uint64_t v13 = v45.i64[1];
    *(_DWORD *)(v45.i64[1] - 96) = 0;
    *(void *)(v13 - 88) = a2;
    *(void *)(v13 - 80) = a2;
    *(void *)(v13 - 72) = a3;
    sub_2572CC05C((void **)(v13 - 64), *(unsigned int *)(a1 + 28), &v43);
    sub_2572CC1E8((char **)(v45.i64[1] - 40), *(unsigned int *)(a1 + 32));
    uint64_t v14 = v45.i64[1];
    *(void *)(v45.i64[1] - 16) = v6;
    uint64_t v39 = a3;
    signed int v15 = a3 - a2;
    *(_DWORD *)(v14 - 8) = a5;
    *(unsigned char *)(v14 - 4) = a6;
    unsigned int v16 = 1;
    while (2)
    {
      if ((v16 & 0xFFF) != 0 || (int)(v16 >> 12) < v15)
      {
        uint64_t v18 = (void *)(v14 - 16);
        uint64_t v17 = *(void *)(v14 - 16);
        uint64_t v19 = (_OWORD *)(v14 - 96);
        if (v17) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v14 - 96);
        }
        switch(*(_DWORD *)v19)
        {
          case 0xFFFFFC18:
            uint64_t v20 = *(void *)(v14 - 80);
            if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v39) {
              goto LABEL_16;
            }
            uint64_t v29 = *v38;
            *(void *)uint64_t v29 = a2;
            *(void *)(v29 + 8) = v20;
            *(unsigned char *)(v29 + 16) = 1;
            uint64_t v30 = *(void *)(v14 - 64);
            uint64_t v31 = *(void *)(v14 - 56) - v30;
            if (v31)
            {
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
              uint64_t v33 = (unsigned char *)(v30 + 16);
              unsigned int v34 = 1;
              do
              {
                uint64_t v35 = v29 + 24 * v34;
                *(_OWORD *)uint64_t v35 = *((_OWORD *)v33 - 1);
                char v36 = *v33;
                v33 += 24;
                *(unsigned char *)(v35 + 16) = v36;
              }
              while (v32 > v34++);
            }
            uint64_t v27 = 1;
            goto LABEL_25;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_23;
          case 0xFFFFFC1F:
LABEL_16:
            uint64_t v21 = v45.i64[1] - 96;
            sub_2572CC578((void *)(v45.i64[1] - 96));
            v45.i64[1] = v21;
            goto LABEL_23;
          case 0xFFFFFC20:
            long long v22 = *(_OWORD *)(v14 - 80);
            *(_OWORD *)unint64_t v40 = *v19;
            *(_OWORD *)&v40[16] = v22;
            memset(&v40[32], 0, 24);
            sub_2572CC658(&v40[32], *(long long **)(v14 - 64), *(long long **)(v14 - 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v14 - 56) - *(void *)(v14 - 64)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v42[0] = 0;
            sub_2572CC6D8((char *)__p, *(long long **)(v14 - 40), *(long long **)(v14 - 32), (uint64_t)(*(void *)(v14 - 32) - *(void *)(v14 - 40)) >> 4);
            uint64_t v23 = *v18;
            *(void *)((char *)&v42[1] + 5) = *(void *)(v14 - 11);
            v42[1] = v23;
            (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v18 + 24))(*v18, 1, v14 - 96);
            (*(void (**)(void, void, unsigned char *))(*(void *)v42[1] + 24))(v42[1], 0, v40);
            uint64_t v24 = v45.i64[1];
            if (v45.i64[1] >= v46)
            {
              v45.i64[1] = (uint64_t)sub_2572CC3B0(&v45, (uint64_t)v40);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v25 = *(_OWORD *)&v40[16];
              *(_OWORD *)v45.i64[1] = *(_OWORD *)v40;
              *(_OWORD *)(v24 + 16) = v25;
              *(void *)(v24 + 32) = 0;
              *(void *)(v24 + 40) = 0;
              *(void *)(v24 + 48) = 0;
              *(void *)(v24 + 56) = 0;
              *(_OWORD *)(v24 + 32) = *(_OWORD *)&v40[32];
              *(void *)(v24 + 48) = *(void *)&v40[48];
              memset(&v40[32], 0, 24);
              *(void *)(v24 + 64) = 0;
              *(void *)(v24 + 72) = 0;
              *(_OWORD *)(v24 + 56) = *(_OWORD *)__p;
              *(void *)(v24 + 72) = v42[0];
              __p[0] = 0;
              __p[1] = 0;
              v42[0] = 0;
              uint64_t v26 = v42[1];
              *(void *)(v24 + 85) = *(void *)((char *)&v42[1] + 5);
              *(void *)(v24 + 80) = v26;
              v45.i64[1] = v24 + 96;
            }
            if (*(void *)&v40[32])
            {
              *(void *)&v40[40] = *(void *)&v40[32];
              operator delete(*(void **)&v40[32]);
            }
LABEL_23:
            uint64_t v14 = v45.i64[1];
            ++v16;
            if (v45.i64[0] == v45.i64[1]) {
              goto LABEL_24;
            }
            continue;
          default:
            sub_2572CC358();
        }
      }
      break;
    }
    sub_2572CC300();
  }
LABEL_24:
  uint64_t v27 = 0;
LABEL_25:
  *(void *)unint64_t v40 = &v45;
  sub_2572CC78C((void ***)v40);
  return v27;
}

void sub_2572CBD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  sub_2572CC018(&a11);
  a11 = v16 - 112;
  sub_2572CC78C((void ***)&a11);
  _Unwind_Resume(a1);
}

char *sub_2572CBE18(char **a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) >= a2)
  {
    signed int v15 = a1[1];
    unint64_t v16 = (v15 - result) / 24;
    if (v16 >= a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = (v15 - result) / 24;
    }
    if (v17)
    {
      uint64_t v18 = result;
      do
      {
        *(_OWORD *)uint64_t v18 = *a3;
        v18[16] = *((unsigned char *)a3 + 16);
        v18 += 24;
        --v17;
      }
      while (v17);
    }
    if (a2 <= v16)
    {
      a1[1] = &result[24 * a2];
    }
    else
    {
      uint64_t v19 = &v15[24 * (a2 - v16)];
      uint64_t v20 = 24 * a2 - 24 * v16;
      do
      {
        long long v21 = *a3;
        *((void *)v15 + 2) = *((void *)a3 + 2);
        *(_OWORD *)signed int v15 = v21;
        v15 += 24;
        v20 -= 24;
      }
      while (v20);
      a1[1] = v19;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t result = sub_2572CBF80(a1, v10);
    unint64_t v11 = a1[1];
    int v12 = &v11[24 * a2];
    uint64_t v13 = 24 * a2;
    do
    {
      long long v14 = *a3;
      *((void *)v11 + 2) = *((void *)a3 + 2);
      *(_OWORD *)unint64_t v11 = v14;
      v11 += 24;
      v13 -= 24;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

char *sub_2572CBF80(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2570AFD0C();
  }
  uint64_t result = (char *)sub_2572CBFD0(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_2572CBFD0(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2570AFC60();
  }
  return operator new(24 * a1);
}

void *sub_2572CC018(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_2572CC05C(void **a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = (char *)*a1;
  uint64_t v5 = (char *)a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
  unint64_t v8 = a2 - v7;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[24 * a2];
    }
  }
  else
  {
    unint64_t v10 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - v5) >> 3) >= v8)
    {
      long long v25 = &v5[24 * v8];
      uint64_t v26 = 24 * a2 - 8 * ((v5 - (unsigned char *)*a1) >> 3);
      do
      {
        long long v27 = *a3;
        *((void *)v5 + 2) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v5 = v27;
        v5 += 24;
        v26 -= 24;
      }
      while (v26);
      a1[1] = v25;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        sub_2570AFD0C();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= a2) {
        uint64_t v12 = a2;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      long long v14 = (char *)sub_2572CBFD0(v13);
      unint64_t v16 = &v14[24 * v7];
      uint64_t v17 = &v14[24 * a2];
      uint64_t v18 = v16;
      uint64_t v19 = 24 * a2 - 24 * v7;
      do
      {
        long long v20 = *a3;
        *((void *)v18 + 2) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v18 = v20;
        v18 += 24;
        v19 -= 24;
      }
      while (v19);
      long long v21 = &v14[24 * v15];
      uint64_t v23 = (char *)*a1;
      long long v22 = (char *)a1[1];
      if (v22 != *a1)
      {
        do
        {
          long long v24 = *(_OWORD *)(v22 - 24);
          *((void *)v16 - 1) = *((void *)v22 - 1);
          *(_OWORD *)(v16 - 24) = v24;
          v16 -= 24;
          v22 -= 24;
        }
        while (v22 != v23);
        long long v22 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v21;
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

void sub_2572CC1E8(char **a1, unint64_t a2)
{
  int v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v18 = &v3[16 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  unint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 4)
  {
    bzero(a1[1], 16 * v6);
    uint64_t v18 = &v4[16 * v6];
LABEL_19:
    a1[1] = v18;
    return;
  }
  if (a2 >> 60) {
    sub_2570AFD0C();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 3;
  if (v8 >> 3 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)sub_2572CC620(v10);
  uint64_t v12 = &v11[16 * v5];
  long long v14 = &v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[16 * v6];
  uint64_t v17 = *a1;
  unint64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *((_OWORD *)v16 - 1);
      v12 -= 16;
      v16 -= 16;
    }
    while (v16 != v17);
    unint64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void sub_2572CC300()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 12);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572CC344(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2572CC358()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 16);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572CC39C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_2572CC3B0(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_2570AFD0C();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  long long v27 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      sub_2570AFC60();
    }
    unint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  uint64_t v9 = &v7[96 * v2];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v13 = v9 + 96;
  v25.i64[1] = (uint64_t)(v9 + 96);
  uint64_t v26 = v10;
  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v21 = vdupq_n_s64(v14);
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = &v9[v16];
      uint64_t v18 = v14 + v16;
      long long v19 = *(_OWORD *)(v14 + v16 - 80);
      *((_OWORD *)v17 - 6) = *(_OWORD *)(v14 + v16 - 96);
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((void *)v17 - 8) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)(v14 + v16 - 64);
      *((void *)v17 - 6) = *(void *)(v14 + v16 - 48);
      *(void *)(v18 - 64) = 0;
      *(void *)(v18 - 56) = 0;
      *(void *)(v18 - 48) = 0;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)(v14 + v16 - 40);
      *((void *)v17 - 3) = *(void *)(v14 + v16 - 24);
      *(void *)(v18 - 40) = 0;
      *(void *)(v18 - 32) = 0;
      *(void *)(v18 - 24) = 0;
      uint64_t v20 = *(void *)(v14 + v16 - 16);
      *(void *)(v17 - 11) = *(void *)(v14 + v16 - 11);
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (v14 + v16 != v15);
    int64x2_t v21 = *a1;
    v9 += v16;
    uint64_t v13 = (char *)v25.i64[1];
    unint64_t v10 = v26;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v13;
  int64x2_t v25 = v21;
  long long v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v10;
  uint64_t v26 = v22;
  uint64_t v24 = v21.i64[0];
  sub_2572CC5D0((uint64_t)&v24);
  return v13;
}

void sub_2572CC578(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

uint64_t sub_2572CC5D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    sub_2572CC578((void *)(i - 96));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_2572CC620(unint64_t a1)
{
  if (a1 >> 60) {
    sub_2570AFC60();
  }
  return operator new(16 * a1);
}

char *sub_2572CC658(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_2572CBF80(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2572CC6BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2572CC6D8(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_2572CC74C(result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2572CC730(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2572CC74C(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_2570AFD0C();
  }
  uint64_t result = (char *)sub_2572CC620(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_2572CC78C(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        sub_2572CC578(v4);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned char *sub_2572CC810(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3) {
      sub_2572CE834();
    }
    sub_2572CFC10();
  }
  return a2;
}

void sub_2572CD3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  *(void *)(v46 + 144) = v47;
  if (a46 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v48 - 145) < 0) {
    operator delete(*(void **)(v48 - 168));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2572CD4D8(uint64_t result)
{
  if ((*(unsigned char *)(result + 24) & 2) == 0) {
    operator new();
  }
  return result;
}

uint64_t sub_2572CD55C(uint64_t result)
{
  if ((*(unsigned char *)(result + 24) & 2) == 0) {
    operator new();
  }
  return result;
}

void sub_2572CD5D8()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 11);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572CD61C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2572CD630(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_2572CD69C(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x25A2B2850);
}

void sub_2572CD728()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 3);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572CD76C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2572CD780(uint64_t a1, char *a2, char *a3, std::string *this)
{
  uint64_t v4 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v4;
  }
  int v5 = *a2;
  if (v5 > 109)
  {
    switch(*a2)
    {
      case 'n':
        if (!this) {
          goto LABEL_50;
        }
        unint64_t v6 = this;
        std::string::value_type v7 = 10;
        goto LABEL_48;
      case 'r':
        if (!this) {
          goto LABEL_50;
        }
        unint64_t v6 = this;
        std::string::value_type v7 = 13;
        goto LABEL_48;
      case 't':
        if (!this) {
          goto LABEL_50;
        }
        unint64_t v6 = this;
        std::string::value_type v7 = 9;
        goto LABEL_48;
      case 'u':
        if (a2 + 1 != a3)
        {
          int v8 = a2[1];
          if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
          {
            uint64_t v4 = a2 + 2;
            if (a2 + 2 != a3)
            {
              int v9 = *v4;
              if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6) {
                goto LABEL_23;
              }
            }
          }
        }
        goto LABEL_53;
      case 'v':
        if (!this) {
          goto LABEL_50;
        }
        unint64_t v6 = this;
        std::string::value_type v7 = 11;
        goto LABEL_48;
      case 'x':
LABEL_23:
        if (v4 + 1 == a3) {
          goto LABEL_53;
        }
        unsigned __int8 v10 = v4[1];
        char v11 = -48;
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
          goto LABEL_28;
        }
        v10 |= 0x20u;
        if ((v10 - 97) >= 6u) {
          goto LABEL_53;
        }
        char v11 = -87;
LABEL_28:
        if (v4 + 2 == a3) {
          goto LABEL_53;
        }
        unsigned __int8 v12 = v4[2];
        char v13 = -48;
        if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
          goto LABEL_33;
        }
        v12 |= 0x20u;
        if ((v12 - 97) >= 6u) {
          goto LABEL_53;
        }
        char v13 = -87;
LABEL_33:
        if (!this) {
          sub_2572CDA64(a1);
        }
        std::string::operator=(this, v12 + 16 * (v10 + v11) + v13);
        v4 += 3;
        break;
      default:
        goto LABEL_43;
    }
    return (unsigned __int8 *)v4;
  }
  if (v5 == 48)
  {
    if (this)
    {
      unint64_t v6 = this;
      std::string::value_type v7 = 0;
      goto LABEL_48;
    }
LABEL_50:
    sub_2572CDA64(a1);
  }
  if (v5 != 99)
  {
    if (v5 == 102)
    {
      if (this)
      {
        unint64_t v6 = this;
        std::string::value_type v7 = 12;
LABEL_48:
        std::string::operator=(v6, v7);
        return (unsigned __int8 *)++v4;
      }
      goto LABEL_50;
    }
LABEL_43:
    uint64_t v15 = *a2;
    if (v15 != 95
      && ((v15 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 4 * v15) & 0x500) == 0))
    {
      std::string::value_type v7 = *a2;
      if (this)
      {
        unint64_t v6 = this;
        goto LABEL_48;
      }
      goto LABEL_50;
    }
LABEL_53:
    sub_2572CD728();
  }
  if (a2 + 1 == a3) {
    goto LABEL_53;
  }
  char v14 = a2[1];
  if (((v14 & 0xDF) - 65) > 0x19u) {
    goto LABEL_53;
  }
  if (!this) {
    sub_2572CDA64(a1);
  }
  std::string::operator=(this, v14 & 0x1F);
  v4 += 2;
  return (unsigned __int8 *)v4;
}

void sub_2572CDA64(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_2572CDBD8(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  *int v1 = &unk_270649128;
  uint64_t v4 = v1[1];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  MEMORY[0x25A2B2850](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void sub_2572CDC50()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 4);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572CDC94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2572CDCA8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

std::locale *sub_2572CDDD8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_2706492C0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_2572CDE64(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_2706492C0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572CDF10(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_2572CDFA4(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270649308;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_2572CE030(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270649308;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572CE0DC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void *sub_2572CE124(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_2572CE190(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572CE21C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *sub_2572CE264(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270649398;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_2572CE2F0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270649398;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572CE39C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *sub_2572CE4B4(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_2706493E0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_2572CE540(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_2706493E0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572CE5EC(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      unsigned __int8 v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void *sub_2572CE67C(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_2572CE6E8(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x25A2B2850);
}

unsigned int *sub_2572CE774(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    sub_2572CDC50();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

void sub_2572CE834()
{
}

void sub_2572CE9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  sub_2570AFA60((void ***)&a10);
  uint64_t v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  sub_2572CF780((void ***)&a10);
  uint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  uint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *uint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  MEMORY[0x25A2B2850](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void sub_2572CEA68(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = &v5[-v6];
      uint64_t v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        unint64_t v9 = v4 - v6;
        if (2 * v9 > v8) {
          uint64_t v8 = 2 * v9;
        }
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v10 = v8;
        }
        if (v10) {
          uint64_t v11 = operator new(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        long long v19 = &v7[(void)v11];
        uint64_t v20 = (char *)v11 + v10;
        v7[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v7[(void)v11 + 1];
        if (v5 != (unsigned char *)v6)
        {
          int64x2_t v21 = &v5[~v6];
          do
          {
            char v22 = *--v5;
            (v21--)[(void)v11] = v22;
          }
          while (v5 != (unsigned char *)v6);
LABEL_45:
          unsigned int v5 = *(unsigned char **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_2570AFD0C();
    }
    goto LABEL_22;
  }
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      unint64_t v23 = *(void *)(a1 + 40);
      uint64_t v24 = &v5[-v23];
      uint64_t v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        unint64_t v26 = v12 - v23;
        if (2 * v26 > v25) {
          uint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v27 = v25;
        }
        if (v27) {
          uint64_t v11 = operator new(v27);
        }
        else {
          uint64_t v11 = 0;
        }
        long long v19 = &v24[(void)v11];
        uint64_t v20 = (char *)v11 + v27;
        v24[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v24[(void)v11 + 1];
        if (v5 != (unsigned char *)v23)
        {
          uint64_t v30 = &v5[~v23];
          do
          {
            char v31 = *--v5;
            (v30--)[(void)v11] = v31;
          }
          while (v5 != (unsigned char *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned int v5 = v2;
    uint64_t v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12) {
    goto LABEL_22;
  }
  unint64_t v13 = *(void *)(a1 + 40);
  char v14 = &v5[-v13];
  uint64_t v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0) {
    goto LABEL_50;
  }
  unint64_t v16 = v12 - v13;
  if (2 * v16 > v15) {
    uint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v17 = v15;
  }
  if (v17) {
    uint64_t v11 = operator new(v17);
  }
  else {
    uint64_t v11 = 0;
  }
  long long v19 = &v14[(void)v11];
  uint64_t v20 = (char *)v11 + v17;
  v14[(void)v11] = v2;
  uint64_t v18 = (uint64_t)&v14[(void)v11 + 1];
  if (v5 != (unsigned char *)v13)
  {
    char v28 = &v5[~v13];
    do
    {
      char v29 = *--v5;
      (v28--)[(void)v11] = v29;
    }
    while (v5 != (unsigned char *)v13);
    goto LABEL_45;
  }
LABEL_46:
  uint64_t v11 = v19;
LABEL_47:
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v20;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v18;
}

void sub_2572CECA0(std::locale *a1)
{
  sub_2572CF8A0(a1);
  JUMPOUT(0x25A2B2850);
}

void sub_2572CECD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *(char **)(a2 + 16);
  unsigned int v5 = *(char **)(a2 + 24);
  if (v4 == v5)
  {
    uint64_t v10 = 0;
    int v11 = *(unsigned __int8 *)(a1 + 168);
LABEL_220:
    int v127 = v11;
    goto LABEL_221;
  }
  if (!*(unsigned char *)(a1 + 171) || v4 + 1 == v5) {
    goto LABEL_65;
  }
  char v6 = *v4;
  LOBYTE(v129) = *v4;
  char v7 = v4[1];
  HIBYTE(v129) = v7;
  if (*(unsigned char *)(a1 + 169))
  {
    LOBYTE(v129) = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v6);
    HIBYTE(v129) = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v7);
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v129;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v130, (const char *)&__s);
  std::string __p = v130;
  std::string::size_type size = HIBYTE(v130.__r_.__value_.__r.__words[2]);
  int v9 = SHIBYTE(v130.__r_.__value_.__r.__words[2]);
  if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v130.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    goto LABEL_14;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 32) + 32))(&v130);
  if (v9 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v130;
  if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v130.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v130.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_173;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_173:
    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
LABEL_14:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_16;
    }
LABEL_65:
    int v127 = 0;
    uint64_t v10 = 1;
    goto LABEL_66;
  }
  std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v41) {
    goto LABEL_65;
  }
LABEL_16:
  uint64_t v12 = *(void *)(a1 + 112);
  uint64_t v13 = *(void *)(a1 + 120) - v12;
  if (v13)
  {
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    uint64_t v15 = (unsigned __int8 *)(v12 + 1);
    do
    {
      if (v129 == *(v15 - 1) && HIBYTE(v129) == *v15) {
        goto LABEL_248;
      }
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  uint64_t v17 = a1 + 16;
  if (!*(unsigned char *)(a1 + 170) || *(void *)(a1 + 88) == *(void *)(a1 + 96))
  {
    int v127 = 0;
    goto LABEL_182;
  }
  sub_2572CF988((uint64_t)&__s, a1 + 16, (char *)&v129, (char *)&v130);
  uint64_t v18 = *(void *)(a1 + 88);
  char v19 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  uint64_t v20 = *(void *)(a1 + 96) - v18;
  if (v20)
  {
    uint64_t v21 = 0;
    unint64_t v22 = v20 / 48;
    char v120 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = __s.__r_.__value_.__l.__size_;
    }
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_s = &__s;
    }
    else {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if (v22 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v20 / 48;
    }
    unint64_t v26 = (unsigned __int8 *)(v18 + 47);
    BOOL v27 = 1;
    while (1)
    {
      int v28 = (char)*(v26 - 24);
      if (v28 >= 0) {
        size_t v29 = *(v26 - 24);
      }
      else {
        size_t v29 = *(void *)(v26 - 39);
      }
      if (v28 >= 0) {
        uint64_t v30 = (char *)(v26 - 47);
      }
      else {
        uint64_t v30 = *(char **)(v26 - 47);
      }
      if (v29 >= v23) {
        size_t v31 = v23;
      }
      else {
        size_t v31 = v29;
      }
      int v32 = memcmp(p_s, v30, v31);
      BOOL v33 = v23 >= v29;
      if (v32) {
        BOOL v33 = v32 >= 0;
      }
      if (v33)
      {
        int v34 = (char)*v26;
        if (v34 >= 0) {
          size_t v35 = *v26;
        }
        else {
          size_t v35 = *(void *)(v26 - 15);
        }
        if (v34 >= 0) {
          char v36 = (char *)(v26 - 23);
        }
        else {
          char v36 = *(char **)(v26 - 23);
        }
        if (v23 >= v35) {
          size_t v37 = v35;
        }
        else {
          size_t v37 = v23;
        }
        int v38 = memcmp(v36, p_s, v37);
        BOOL v39 = v35 >= v23;
        if (v38) {
          BOOL v39 = v38 >= 0;
        }
        if (v39) {
          break;
        }
      }
      BOOL v27 = ++v21 < v22;
      v26 += 48;
      if (v25 == v21)
      {
        int v127 = 0;
        char v40 = 1;
        goto LABEL_176;
      }
    }
    char v40 = 0;
    int v127 = 1;
LABEL_176:
    uint64_t v17 = a1 + 16;
    char v19 = v120;
  }
  else
  {
    BOOL v27 = 0;
    int v127 = 0;
    char v40 = 1;
  }
  if (v19 < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (!v27)
  {
LABEL_182:
    if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
      goto LABEL_230;
    }
    sub_2572CFAF4((uint64_t)&__s, v17, (char *)&v129, (char *)&v130);
    uint64_t v93 = *(void *)(a1 + 136);
    uint64_t v94 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    uint64_t v95 = *(void *)(a1 + 144) - v93;
    if (v95)
    {
      unint64_t v96 = 0;
      unint64_t v97 = v95 / 24;
      size_t v99 = __s.__r_.__value_.__l.__size_;
      unsigned int v98 = (const void *)__s.__r_.__value_.__r.__words[0];
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v100 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v100 = __s.__r_.__value_.__l.__size_;
      }
      if (v97 <= 1) {
        uint64_t v101 = 1;
      }
      else {
        uint64_t v101 = v95 / 24;
      }
      for (BOOL i = 1; ; BOOL i = v96 < v97)
      {
        uint64_t v103 = v93 + 24 * v96;
        uint64_t v104 = *(unsigned __int8 *)(v103 + 23);
        int v105 = (char)v104;
        if ((v104 & 0x80u) != 0) {
          uint64_t v104 = *(void *)(v103 + 8);
        }
        if (v100 != v104) {
          goto LABEL_203;
        }
        unsigned int v106 = v105 >= 0 ? (unsigned __int8 *)(v93 + 24 * v96) : *(unsigned __int8 **)v103;
        if ((v94 & 0x80) == 0) {
          break;
        }
        uint64_t v126 = v93;
        unint64_t v108 = v97;
        char v109 = v98;
        size_t v110 = v99;
        if (!memcmp(v98, v106, v99))
        {
          operator delete(__s.__r_.__value_.__l.__data_);
LABEL_228:
          if (!i)
          {
            int v127 = 1;
            goto LABEL_230;
          }
LABEL_248:
          int v119 = 1;
LABEL_249:
          int v127 = v119;
LABEL_250:
          uint64_t v10 = 2;
          goto LABEL_221;
        }
        ++v96;
        size_t v99 = v110;
        unsigned int v98 = v109;
        unint64_t v97 = v108;
        uint64_t v93 = v126;
        if (v96 == v101) {
          goto LABEL_209;
        }
LABEL_207:
        ;
      }
      if (!v94) {
        goto LABEL_228;
      }
      uint64_t v107 = 0;
      while (__s.__r_.__value_.__s.__data_[v107] == v106[v107])
      {
        if (v94 == ++v107) {
          goto LABEL_228;
        }
      }
LABEL_203:
      if (++v96 == v101) {
        goto LABEL_208;
      }
      goto LABEL_207;
    }
LABEL_208:
    if ((v94 & 0x80) != 0) {
LABEL_209:
    }
      operator delete(__s.__r_.__value_.__l.__data_);
LABEL_230:
    if ((char)v129 < 0)
    {
      int v118 = *(_DWORD *)(a1 + 164);
    }
    else
    {
      int v115 = *(_DWORD *)(a1 + 160);
      uint64_t v116 = *(void *)(*(void *)(a1 + 24) + 16);
      int v117 = *(_DWORD *)(v116 + 4 * v129);
      if (((v117 & v115) != 0 || v129 == 95 && (v115 & 0x80) != 0)
        && (SHIBYTE(v129) & 0x80000000) == 0
        && ((*(_DWORD *)(v116 + 4 * HIBYTE(v129)) & v115) != 0 || (v115 & 0x80) != 0 && HIBYTE(v129) == 95))
      {
        goto LABEL_248;
      }
      int v118 = *(_DWORD *)(a1 + 164);
      if ((v118 & v117) != 0 || v129 == 95 && (v118 & 0x80) != 0) {
        goto LABEL_247;
      }
    }
    if (SHIBYTE(v129) < 0) {
      goto LABEL_248;
    }
    if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * HIBYTE(v129)) & v118) == 0)
    {
      int v119 = 1;
      if (HIBYTE(v129) != 95 || (v118 & 0x80) == 0) {
        goto LABEL_249;
      }
    }
LABEL_247:
    int v119 = v127;
    goto LABEL_249;
  }
  if ((v40 & 1) == 0) {
    goto LABEL_250;
  }
  uint64_t v10 = 2;
LABEL_66:
  unsigned __int8 v42 = **(unsigned char **)(v2 + 16);
  v130.__r_.__value_.__s.__data_[0] = v42;
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v42 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), (char)v42);
    v130.__r_.__value_.__s.__data_[0] = v42;
  }
  long long v43 = *(unsigned __int8 **)(a1 + 40);
  unint64_t v44 = *(void *)(a1 + 48) - (void)v43;
  if (v44)
  {
    if (v44 <= 1) {
      unint64_t v44 = 1;
    }
    do
    {
      int v45 = *v43++;
      if (v45 == v42) {
        goto LABEL_219;
      }
    }
    while (--v44);
  }
  unsigned int v46 = *(_DWORD *)(a1 + 164);
  if (v46 || *(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    if ((v42 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v42) & v46) == 0)
    {
      int v48 = (v46 >> 7) & 1;
      char v47 = v42 == 95 ? v48 : 0;
    }
    else
    {
      char v47 = 1;
    }
    uint64_t v49 = *(void **)(a1 + 72);
    unint64_t v50 = memchr(*(void **)(a1 + 64), (char)v42, (size_t)v49 - *(void *)(a1 + 64));
    unint64_t v51 = v50 ? v50 : v49;
    if ((v47 & 1) == 0 && v51 == v49)
    {
LABEL_219:
      int v11 = 1;
      goto LABEL_220;
    }
  }
  uint64_t v52 = *(void *)(a1 + 88);
  uint64_t v53 = *(void *)(a1 + 96);
  if (v52 != v53)
  {
    if (*(unsigned char *)(a1 + 170))
    {
      sub_2572CF988((uint64_t)&__s, a1 + 16, (char *)&v130, &v130.__r_.__value_.__s.__data_[1]);
      uint64_t v52 = *(void *)(a1 + 88);
      uint64_t v53 = *(void *)(a1 + 96);
      unsigned int v54 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      unsigned int v54 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v42;
    }
    uint64_t v55 = v53 - v52;
    if (v55)
    {
      uint64_t v124 = v10;
      uint64_t v56 = 0;
      unint64_t v57 = v55 / 48;
      char v122 = v54;
      if ((v54 & 0x80u) == 0) {
        std::string::size_type v58 = v54;
      }
      else {
        std::string::size_type v58 = __s.__r_.__value_.__l.__size_;
      }
      if ((v54 & 0x80u) == 0) {
        uint64_t v59 = &__s;
      }
      else {
        uint64_t v59 = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if (v57 <= 1) {
        uint64_t v60 = 1;
      }
      else {
        uint64_t v60 = v55 / 48;
      }
      unsigned int v61 = (unsigned __int8 *)(v52 + 47);
      BOOL v62 = 1;
      while (1)
      {
        int v63 = (char)*(v61 - 24);
        if (v63 >= 0) {
          size_t v64 = *(v61 - 24);
        }
        else {
          size_t v64 = *(void *)(v61 - 39);
        }
        if (v63 >= 0) {
          uint64_t v65 = (char *)(v61 - 47);
        }
        else {
          uint64_t v65 = *(char **)(v61 - 47);
        }
        if (v64 >= v58) {
          size_t v66 = v58;
        }
        else {
          size_t v66 = v64;
        }
        int v67 = memcmp(v59, v65, v66);
        BOOL v68 = v58 >= v64;
        if (v67) {
          BOOL v68 = v67 >= 0;
        }
        if (v68)
        {
          int v69 = (char)*v61;
          if (v69 >= 0) {
            size_t v70 = *v61;
          }
          else {
            size_t v70 = *(void *)(v61 - 15);
          }
          if (v69 >= 0) {
            uint64_t v71 = (char *)(v61 - 23);
          }
          else {
            uint64_t v71 = *(char **)(v61 - 23);
          }
          if (v58 >= v70) {
            size_t v72 = v70;
          }
          else {
            size_t v72 = v58;
          }
          int v73 = memcmp(v71, v59, v72);
          BOOL v74 = v70 >= v58;
          if (v73) {
            BOOL v74 = v73 >= 0;
          }
          if (v74) {
            break;
          }
        }
        BOOL v62 = ++v56 < v57;
        v61 += 48;
        if (v60 == v56) {
          goto LABEL_138;
        }
      }
      int v127 = 1;
LABEL_138:
      uint64_t v10 = v124;
      if ((v122 & 0x80) == 0) {
        goto LABEL_140;
      }
    }
    else
    {
      BOOL v62 = 0;
      if ((v54 & 0x80) == 0) {
        goto LABEL_140;
      }
    }
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_140:
    if (v62) {
      goto LABEL_221;
    }
  }
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_214;
  }
  sub_2572CFAF4((uint64_t)&__s, a1 + 16, (char *)&v130, &v130.__r_.__value_.__s.__data_[1]);
  uint64_t v75 = *(void *)(a1 + 136);
  uint64_t v76 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  uint64_t v77 = *(void *)(a1 + 144) - v75;
  if (!v77)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
LABEL_214:
    if (v130.__r_.__value_.__s.__data_[0] < 0) {
      goto LABEL_221;
    }
    unsigned int v111 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4
                                                               * v130.__r_.__value_.__s.__data_[0]) & v111) == 0)
    {
      int v112 = (v111 >> 7) & 1;
      if (v130.__r_.__value_.__s.__data_[0] != 95) {
        int v112 = 0;
      }
      if (v112 != 1) {
        goto LABEL_221;
      }
    }
    goto LABEL_219;
  }
  uint64_t v125 = v10;
  unint64_t v78 = 0;
  unint64_t v79 = v77 / 24;
  size_t v81 = __s.__r_.__value_.__l.__size_;
  unint64_t v80 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v82 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v82 = __s.__r_.__value_.__l.__size_;
  }
  if (v79 <= 1) {
    uint64_t v83 = 1;
  }
  else {
    uint64_t v83 = v77 / 24;
  }
  for (BOOL j = 1; ; BOOL j = v78 < v79)
  {
    unint64_t v85 = (unsigned __int8 **)(v75 + 24 * v78);
    char v86 = (unsigned __int8 *)*((unsigned __int8 *)v85 + 23);
    int v87 = (char)v86;
    if ((char)v86 < 0) {
      char v86 = v85[1];
    }
    if ((unsigned __int8 *)v82 == v86) {
      break;
    }
LABEL_162:
    if (++v78 == v83)
    {
      if ((v76 & 0x80) != 0) {
LABEL_212:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
      uint64_t v10 = v125;
      goto LABEL_214;
    }
LABEL_166:
    ;
  }
  if (v87 >= 0) {
    unint64_t v88 = (unsigned __int8 *)(v75 + 24 * v78);
  }
  else {
    unint64_t v88 = *v85;
  }
  if ((v76 & 0x80) == 0)
  {
    if (!v76)
    {
LABEL_167:
      int v127 = 1;
      uint64_t v10 = v125;
      if (!j) {
        goto LABEL_214;
      }
      goto LABEL_221;
    }
    uint64_t v89 = 0;
    while (__s.__r_.__value_.__s.__data_[v89] == v88[v89])
    {
      if (v76 == ++v89) {
        goto LABEL_167;
      }
    }
    goto LABEL_162;
  }
  BOOL v121 = j;
  uint64_t v123 = v2;
  uint64_t v90 = v75;
  unsigned int v91 = v80;
  size_t v92 = v81;
  if (memcmp(v80, v88, v81))
  {
    ++v78;
    size_t v81 = v92;
    unint64_t v80 = v91;
    uint64_t v75 = v90;
    uint64_t v2 = v123;
    if (v78 == v83) {
      goto LABEL_212;
    }
    goto LABEL_166;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  int v127 = 1;
  uint64_t v2 = v123;
  uint64_t v10 = v125;
  if (!v121) {
    goto LABEL_214;
  }
LABEL_221:
  if (v127 == *(unsigned __int8 *)(a1 + 168))
  {
    uint64_t v113 = 0;
    int v114 = -993;
  }
  else
  {
    *(void *)(v2 + 16) += v10;
    uint64_t v113 = *(void *)(a1 + 8);
    int v114 = -995;
  }
  *(_DWORD *)uint64_t v2 = v114;
  *(void *)(v2 + 80) = v113;
}

void sub_2572CF744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_2572CF780(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_2572CF804(v4);
      }
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2572CF804(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_2572CF85C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::locale *sub_2572CF8A0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270649470;
  char v7 = a1 + 17;
  sub_2570AFA60((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  char v7 = a1 + 11;
  sub_2572CF780((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_270649128;
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void sub_2572CF988(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  sub_2572CFA4C(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2572CFA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2572CFA4C(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2570AFBB8();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

void sub_2572CFAF4(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  sub_2572CFA4C(__p, a3, a4, a4 - a3);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    char v7 = __p;
  }
  else {
    char v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = (unsigned char *)a1;
      }
      else {
        char v10 = *(unsigned char **)a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2572CFBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2572CFC10()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 5);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572CFC54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2572CFC68(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    sub_2572CFC10();
  sub_2572D0584((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    sub_2572D052C();
  }
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *sub_2572CFD54(uint64_t a1, char *a2, char *a3, std::string *this, uint64_t a5)
{
  if (a2 == a3) {
    sub_2572CD728();
  }
  int v7 = *a2;
  if (v7 > 97)
  {
    if (v7 > 114)
    {
      if (v7 != 115)
      {
        if (v7 != 119) {
          goto LABEL_26;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_2572CEA68(a5, 95);
        return (unsigned __int8 *)(a2 + 1);
      }
      int v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v7 == 98)
      {
        unint64_t v16 = this;
        std::string::value_type v15 = 8;
LABEL_21:
        std::string::operator=(v16, v15);
        return (unsigned __int8 *)(a2 + 1);
      }
      if (v7 != 100) {
        goto LABEL_26;
      }
      int v9 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v9;
    return (unsigned __int8 *)(a2 + 1);
  }
  if (v7 <= 82)
  {
    if (*a2)
    {
      if (v7 == 68)
      {
        int v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_23:
        *(_DWORD *)(a5 + 164) = v8;
        return (unsigned __int8 *)(a2 + 1);
      }
      goto LABEL_26;
    }
    std::string::value_type v15 = 0;
    unint64_t v16 = this;
    goto LABEL_21;
  }
  if (v7 == 83)
  {
    int v8 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_23;
  }
  if (v7 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(unsigned char *)(a5 + 169))
    {
      char v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a5 + 24) + 40))(*(void *)(a5 + 24), 95);
      char v11 = v10;
      uint64_t v13 = *(unsigned char **)(a5 + 72);
      unint64_t v12 = *(void *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        *uint64_t v13 = v10;
        uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_57:
        *(void *)(a5 + 72) = v14;
        return (unsigned __int8 *)(a2 + 1);
      }
      unint64_t v26 = *(void *)(a5 + 64);
      BOOL v27 = &v13[-v26];
      uint64_t v28 = (uint64_t)&v13[-v26 + 1];
      if (v28 >= 0)
      {
        unint64_t v29 = v12 - v26;
        if (2 * v29 > v28) {
          uint64_t v28 = 2 * v29;
        }
        if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v30 = v28;
        }
        if (v30) {
          size_t v31 = operator new(v30);
        }
        else {
          size_t v31 = 0;
        }
        BOOL v33 = &v31[v30];
        v27[(void)v31] = v11;
        uint64_t v14 = (uint64_t)&v27[(void)v31 + 1];
        if (v13 == (unsigned char *)v26)
        {
          size_t v31 = &v27[(void)v31];
        }
        else
        {
          int v34 = &v13[~v26];
          do
          {
            char v35 = *--v13;
            (v34--)[(void)v31] = v35;
          }
          while (v13 != (unsigned char *)v26);
          uint64_t v13 = *(unsigned char **)(a5 + 64);
        }
        *(void *)(a5 + 64) = v31;
        *(void *)(a5 + 72) = v14;
        *(void *)(a5 + 80) = v33;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_57;
      }
LABEL_82:
      sub_2570AFD0C();
    }
    char v19 = *(unsigned char **)(a5 + 72);
    unint64_t v18 = *(void *)(a5 + 80);
    if (*(unsigned char *)(a5 + 170))
    {
      if ((unint64_t)v19 >= v18)
      {
        unint64_t v20 = *(void *)(a5 + 64);
        uint64_t v21 = &v19[-v20];
        uint64_t v22 = (uint64_t)&v19[-v20 + 1];
        if (v22 < 0) {
          goto LABEL_82;
        }
        unint64_t v23 = v18 - v20;
        if (2 * v23 > v22) {
          uint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v24 = v22;
        }
        if (v24) {
          uint64_t v25 = operator new(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        std::string::size_type v41 = &v21[(void)v25];
        unsigned __int8 v42 = (char *)v25 + v24;
        v21[(void)v25] = 95;
        uint64_t v32 = (uint64_t)&v21[(void)v25 + 1];
        if (v19 != (unsigned char *)v20)
        {
          long long v43 = &v19[~v20];
          do
          {
            char v44 = *--v19;
            (v43--)[(void)v25] = v44;
          }
          while (v19 != (unsigned char *)v20);
LABEL_75:
          char v19 = *(unsigned char **)(a5 + 64);
          goto LABEL_77;
        }
        goto LABEL_76;
      }
    }
    else if ((unint64_t)v19 >= v18)
    {
      unint64_t v36 = *(void *)(a5 + 64);
      size_t v37 = &v19[-v36];
      uint64_t v38 = (uint64_t)&v19[-v36 + 1];
      if (v38 < 0) {
        goto LABEL_82;
      }
      unint64_t v39 = v18 - v36;
      if (2 * v39 > v38) {
        uint64_t v38 = 2 * v39;
      }
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v40 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v40 = v38;
      }
      if (v40) {
        uint64_t v25 = operator new(v40);
      }
      else {
        uint64_t v25 = 0;
      }
      std::string::size_type v41 = &v37[(void)v25];
      unsigned __int8 v42 = (char *)v25 + v40;
      v37[(void)v25] = 95;
      uint64_t v32 = (uint64_t)&v37[(void)v25 + 1];
      if (v19 != (unsigned char *)v36)
      {
        int v45 = &v19[~v36];
        do
        {
          char v46 = *--v19;
          (v45--)[(void)v25] = v46;
        }
        while (v19 != (unsigned char *)v36);
        goto LABEL_75;
      }
LABEL_76:
      uint64_t v25 = v41;
LABEL_77:
      *(void *)(a5 + 64) = v25;
      *(void *)(a5 + 72) = v32;
      *(void *)(a5 + 80) = v42;
      if (v19) {
        operator delete(v19);
      }
      goto LABEL_79;
    }
    *char v19 = 95;
    uint64_t v32 = (uint64_t)(v19 + 1);
LABEL_79:
    *(void *)(a5 + 72) = v32;
    return (unsigned __int8 *)(a2 + 1);
  }
LABEL_26:
  return sub_2572CD780(a1, a2, a3, this);
}

char *sub_2572D00E8(uint64_t a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_45:
  }
    sub_2572CD728();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (!this) {
          goto LABEL_43;
        }
        unint64_t v6 = this;
        LOBYTE(v5) = 10;
        goto LABEL_16;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (!this) {
          goto LABEL_43;
        }
        unint64_t v6 = this;
        LOBYTE(v5) = 13;
        goto LABEL_16;
      case 't':
        if (!this) {
          goto LABEL_43;
        }
        unint64_t v6 = this;
        LOBYTE(v5) = 9;
        goto LABEL_16;
      case 'v':
        if (!this) {
          goto LABEL_43;
        }
        unint64_t v6 = this;
        LOBYTE(v5) = 11;
        goto LABEL_16;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            unint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            unint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
        }
        break;
    }
    goto LABEL_43;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        unint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
LABEL_43:
      sub_2572CDA64(a1);
    }
LABEL_14:
    if (this)
    {
      unint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_43;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_45;
  }
  std::string::value_type v7 = v5 - 48;
  char v11 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_38:
    char v11 = a3;
    goto LABEL_39;
  }
  if ((*v11 & 0xF8) == 0x30)
  {
    std::string::value_type v7 = *v11 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v8 = a2[2];
      int v9 = v8 & 0xF8;
      std::string::value_type v10 = v8 + 8 * v7 - 48;
      if (v9 == 48) {
        char v11 = a2 + 3;
      }
      else {
        char v11 = a2 + 2;
      }
      if (v9 == 48) {
        std::string::value_type v7 = v10;
      }
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_39:
  if (!this) {
    sub_2572CDA64(a1);
  }
  std::string::operator=(this, v7);
  return v11;
}

void sub_2572D02F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v8 = *(_WORD **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)sub_2572D0AC0(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v25 = (_WORD *)(v22 + 2 * v19);
        uint64_t v26 = v22 + 2 * v23;
        *uint64_t v25 = v6;
        size_t v24 = v25 + 1;
        size_t v37 = *(char **)(a1 + 112);
        BOOL v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_46;
        }
        do
        {
          __int16 v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v35 = (uint64_t)sub_2572D0AC0(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v25 = (_WORD *)(v35 + 2 * v32);
        uint64_t v26 = v35 + 2 * v36;
        *uint64_t v25 = v6;
        size_t v24 = v25 + 1;
        unint64_t v39 = *(char **)(a1 + 112);
        BOOL v27 = *(char **)(a1 + 120);
        if (v27 == v39) {
          goto LABEL_46;
        }
        do
        {
          __int16 v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    sub_2570AFD0C();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
  char v8 = *(_WORD **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *char v8 = v6;
    size_t v24 = v8 + 1;
    goto LABEL_48;
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3) {
    goto LABEL_49;
  }
  uint64_t v11 = v10 >> 1;
  unint64_t v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1) {
    unint64_t v13 = v11 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    uint64_t v14 = (uint64_t)sub_2572D0AC0(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v25 = (_WORD *)(v14 + 2 * v11);
  uint64_t v26 = v14 + 2 * v15;
  *uint64_t v25 = v6;
  size_t v24 = v25 + 1;
  uint64_t v28 = *(char **)(a1 + 112);
  BOOL v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_46;
  }
  do
  {
    __int16 v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--uint64_t v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  BOOL v27 = *(char **)(a1 + 112);
LABEL_46:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_48:
  *(void *)(a1 + 120) = v24;
}

void sub_2572D052C()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 1);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572D0570(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2572D0584(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  sub_2572CFA4C(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_2572D070C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2572D0740()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 2);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572D0784(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2572D0798(void *result, long long *a2)
{
  uint64_t v3 = (char **)result;
  unint64_t v4 = result[2];
  unint64_t v5 = result[1];
  if (v5 >= v4)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *result) >> 4);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555) {
      sub_2570AFD0C();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *result) >> 4);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v25 = result + 2;
    if (v12)
    {
      if (v12 > 0x555555555555555) {
        sub_2570AFC60();
      }
      unint64_t v13 = (char *)operator new(48 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[48 * v9];
    *((void *)v14 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v14 = *a2;
    long long v15 = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((void *)v14 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    unint64_t v8 = v14 + 48;
    unint64_t v16 = *v3;
    unint64_t v17 = (unint64_t)v3[1];
    if ((char *)v17 == *v3)
    {
      int64x2_t v20 = vdupq_n_s64(v17);
    }
    else
    {
      do
      {
        long long v18 = *(_OWORD *)(v17 - 48);
        *((void *)v14 - 4) = *(void *)(v17 - 32);
        *((_OWORD *)v14 - 3) = v18;
        *(void *)(v17 - 40) = 0;
        *(void *)(v17 - 32) = 0;
        *(void *)(v17 - 48) = 0;
        long long v19 = *(_OWORD *)(v17 - 24);
        *((void *)v14 - 1) = *(void *)(v17 - 8);
        *(_OWORD *)(v14 - 24) = v19;
        v14 -= 48;
        *(void *)(v17 - 16) = 0;
        *(void *)(v17 - 8) = 0;
        *(void *)(v17 - 24) = 0;
        v17 -= 48;
      }
      while ((char *)v17 != v16);
      int64x2_t v20 = *(int64x2_t *)v3;
    }
    *uint64_t v3 = v14;
    v3[1] = v8;
    int64x2_t v23 = v20;
    unint64_t v21 = v3[2];
    v3[2] = &v13[48 * v12];
    size_t v24 = v21;
    uint64_t v22 = v20.i64[0];
    uint64_t result = (void *)sub_2572D0A70((uint64_t)&v22);
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v7 = *(long long *)((char *)a2 + 24);
    *(void *)(v5 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v5 + 24) = v7;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    unint64_t v8 = (char *)(v5 + 48);
  }
  v3[1] = v8;
  return result;
}

void sub_2572D0954(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  sub_2572CFA4C(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    long long v6 = __p;
  }
  else {
    long long v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2572D09FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2572D0A18()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 9);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572D0A5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2572D0A70(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_2572CF804(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_2572D0AC0(uint64_t a1)
{
  if (a1 < 0) {
    sub_2570AFC60();
  }
  return operator new(2 * a1);
}

void *sub_2572D0AF4(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_2572D0B60(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572D0BEC(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_2572D0C1C(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_2572D0C88(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572D0D14(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_2572D0D4C()
{
}

void sub_2572D0EA4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2572D0EDC(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364) {
            sub_2572D0F78();
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

void sub_2572D0F78()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 8);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572D0FBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2572D0FD0()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 7);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572D1014(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2572D102C(void *a1)
{
  sub_2572D1184(a1);
  JUMPOUT(0x25A2B2850);
}

unsigned int *sub_2572D1064(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *int v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return sub_2572D1238(result, a2);
    }
    goto LABEL_23;
  }
  *int v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *sub_2572D1118(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return sub_2572D1238(result, a3);
  }
  return result;
}

void sub_2572D114C(void *a1)
{
  sub_2572D1184(a1);
  JUMPOUT(0x25A2B2850);
}

void *sub_2572D1184(void *a1)
{
  *a1 = &unk_2706495A8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = &unk_270649128;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

unsigned int *sub_2572D1238(unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unint64_t v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      *unint64_t v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_2572D128C()
{
}

uint64_t sub_2572D12A0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_2572D12B8(void *a1)
{
  sub_2572D1184(a1);
  JUMPOUT(0x25A2B2850);
}

void sub_2572D12F0(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_2572D12FC(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void sub_2572D1324()
{
}

uint64_t sub_2572D1338(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_2572D134C()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x25A2B2660](exception, 15);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2572D1390(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2572D13A4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    unint64_t v7 = a2 + 1;
    int v6 = *a2;
    if (a2 + 1 != a3 || v6 != 36)
    {
      if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0) {
        sub_2572CDA64(a1);
      }
      if (v7 == a3 || v6 != 92)
      {
        if (v6 == 46) {
          operator new();
        }
      }
      else
      {
        unsigned int v14 = (char)*v7 - 36;
        if (v14 <= 0x3A && ((1 << v14) & 0x580000000000441) != 0) {
          sub_2572CDA64(a1);
        }
      }
    }
    BOOL v8 = sub_2572CC810(a1, a2, a3);
    unint64_t v9 = v8;
    if (v8 == v3 && v8 != a3)
    {
      if (v7 == a3 || *v3 != 92) {
        return v3;
      }
      int v10 = *v7;
      if (v10 == 40)
      {
        uint64_t v11 = (uint64_t)(v3 + 2);
        sub_2572CD4D8(a1);
        do
        {
          unint64_t v12 = (unsigned __int8 *)v11;
          uint64_t v11 = sub_2572D13A4(a1, v11, a3);
        }
        while ((unsigned __int8 *)v11 != v12);
        if (v12 == a3 || v12 + 1 == a3 || *v12 != 92 || v12[1] != 41) {
          sub_2572CB184();
        }
        unint64_t v9 = v12 + 2;
        sub_2572CD55C(a1);
      }
      else
      {
        int v15 = sub_2572D186C(a1, v10);
        uint64_t v16 = 2;
        if (!v15) {
          uint64_t v16 = 0;
        }
        unint64_t v9 = &v3[v16];
      }
    }
    if (v9 != v3)
    {
      if (v9 == a3)
      {
        return a3;
      }
      else
      {
        int v17 = *v9;
        if (v17 == 42) {
          sub_2572D0D4C();
        }
        if (v9 + 1 != a3 && v17 == 92 && v9[1] == 123)
        {
          int v24 = 0;
          long long v18 = sub_2572D0EDC(v9 + 2, a3, &v24);
          if (v18 == v9 + 2) {
            goto LABEL_48;
          }
          if (v18 != a3)
          {
            long long v19 = v18 + 1;
            int v20 = *v18;
            if (v20 == 44)
            {
              int v23 = -1;
              unint64_t v21 = sub_2572D0EDC(v18 + 1, a3, &v23);
              if (v21 != a3 && v21 + 1 != a3 && *v21 == 92 && v21[1] == 125)
              {
                if (v23 != -1 && v23 < v24) {
LABEL_48:
                }
                  sub_2572D0F78();
LABEL_53:
                sub_2572D0D4C();
              }
            }
            else if (v19 != a3 && v20 == 92 && *v19 == 125)
            {
              goto LABEL_53;
            }
          }
          sub_2572D0FD0();
        }
        return v9;
      }
    }
  }
  return v3;
}

void *sub_2572D1734(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_2572D17A0(void *a1)
{
  *a1 = &unk_270649128;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x25A2B2850);
}

uint64_t sub_2572D182C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

uint64_t sub_2572D186C(uint64_t a1, unsigned __int8 a2)
{
  if (((a2 & 0xF8) == 0x30 || (a2 & 0xFE) == 0x38) && a2 - 49 <= 8)
  {
    if (a2 - 48 <= *(_DWORD *)(a1 + 28)) {
      sub_2572CDCA8(a1);
    }
    sub_2572CDC50();
  }
  return 0;
}

unsigned __int8 *sub_2572D18CC(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  int v6 = sub_2572D192C(a1, a2, a3);
  if (v6 == a2) {
    sub_2572D134C();
  }
  do
  {
    unint64_t v7 = v6;
    int v6 = sub_2572D192C(a1, v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *sub_2572D192C(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3)
  {
LABEL_24:
    uint64_t v11 = sub_2572CC810(a1, a2, a3);
    goto LABEL_25;
  }
  int v6 = (char)*a2;
  int v7 = *a2;
  uint64_t v8 = (v6 - 36);
  if (v8 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v6 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v8 == 5)
    {
      if (*(_DWORD *)(a1 + 36)) {
        goto LABEL_4;
      }
LABEL_14:
      sub_2572CDA64(a1);
    }
LABEL_13:
    if ((v6 - 123) < 2) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
LABEL_4:
  unint64_t v9 = a2 + 1;
  if (a2 + 1 == (unsigned __int8 *)a3 || v7 != 92)
  {
LABEL_22:
    if (v7 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v10 = (char)*v9;
  if ((v10 - 36) <= 0x3A && ((1 << (v10 - 36)) & 0x5800000080004F1) != 0
    || (v10 - 123) < 3)
  {
    sub_2572CDA64(a1);
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    uint64_t v11 = (unsigned __int8 *)sub_2572D00E8(a1, (char *)a2 + 1, a3, 0);
  }
  else
  {
    int v12 = sub_2572D186C(a1, *v9);
    uint64_t v13 = 2;
    if (!v12) {
      uint64_t v13 = 0;
    }
    uint64_t v11 = &a2[v13];
  }
  if (v11 == a2)
  {
    int v7 = *a2;
    goto LABEL_22;
  }
LABEL_25:
  if (v11 == a2 && v11 != (unsigned __int8 *)a3)
  {
    int v14 = (char)*a2;
    if (v14 == 36) {
      sub_2572CAF9C();
    }
    if (v14 != 40)
    {
      if (v14 == 94) {
        sub_2572CAF18();
      }
      return a2;
    }
    sub_2572CD4D8(a1);
    ++*(_DWORD *)(a1 + 36);
    int v15 = (char *)sub_2572CA100(a1, a2 + 1, a3);
    if (v15 == a3 || (uint64_t v16 = v15, *v15 != 41)) {
      sub_2572CB184();
    }
    sub_2572CD55C(a1);
    --*(_DWORD *)(a1 + 36);
    uint64_t v11 = (unsigned __int8 *)(v16 + 1);
  }
  if (v11 == a2) {
    return a2;
  }
  return sub_2572CAC1C(a1, v11, (unsigned __int8 *)a3);
}

void sub_2572D1BF4(unint64_t a1, __n128 *a2, uint64_t **a3, uint64_t a4, char a5)
{
  v132[2] = *MEMORY[0x263EF8340];
LABEL_2:
  uint64_t v11 = (uint64_t)&a2[-2].n128_i64[1];
  uint64_t v121 = (uint64_t)&a2[-3];
  uint64_t v124 = a2;
  uint64_t v118 = (uint64_t)&a2[-5].n128_i64[1];
  int v12 = (__n128 *)a1;
  while (1)
  {
    a1 = (unint64_t)v12;
    uint64_t v13 = (char *)v124 - (char *)v12;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (char *)v12) >> 3);
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          sub_2572D3810(v130, **a3, v11);
          sub_2572D3810(__p, **a3, a1);
          BOOL v53 = sub_2570B095C(v130, __p);
          if (v129 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v131) < 0) {
            operator delete(v130[0]);
          }
          if (v53)
          {
            __n128 v54 = *(__n128 *)a1;
            unint64_t v131 = *(void *)(a1 + 16);
            *(__n128 *)std::string v130 = v54;
            long long v55 = *(_OWORD *)v11;
            *(void *)(a1 + 16) = *(void *)(v11 + 16);
            *(_OWORD *)a1 = v55;
            long long v56 = *(_OWORD *)v130;
            *(void *)(v11 + 16) = v131;
            *(_OWORD *)uint64_t v11 = v56;
          }
          break;
        case 3uLL:
          sub_2572D31A4((__n128 *)a1, a1 + 24, v11, a3);
          break;
        case 4uLL:
          sub_2572D5580((__n128 *)a1, a1 + 24, a1 + 48, v11, a3);
          break;
        case 5uLL:
          sub_2572D2F18((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, v11, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 575)
    {
      if (a5)
      {
        if ((__n128 *)a1 == v124) {
          return;
        }
        uint64_t v57 = a1 + 24;
        if ((__n128 *)(a1 + 24) == v124) {
          return;
        }
        uint64_t v58 = 0;
        uint64_t v59 = a1;
        while (2)
        {
          uint64_t v60 = v57;
          sub_2572D3810(v130, **a3, v57);
          sub_2572D3810(__p, **a3, v59);
          BOOL v61 = sub_2570B095C(v130, __p);
          if (v129 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v131) < 0)
          {
            operator delete(v130[0]);
            if (!v61) {
              goto LABEL_148;
            }
          }
          else if (!v61)
          {
            goto LABEL_148;
          }
          __n128 v62 = *(__n128 *)v60;
          unint64_t v127 = *(void *)(v60 + 16);
          __n128 v126 = v62;
          *(void *)(v60 + 8) = 0;
          *(void *)(v60 + 16) = 0;
          *(void *)uint64_t v60 = 0;
          uint64_t v63 = v58;
          do
          {
            uint64_t v64 = a1 + v63;
            uint64_t v65 = (void **)(a1 + v63 + 24);
            if (*(char *)(a1 + v63 + 47) < 0) {
              operator delete(*v65);
            }
            *(_OWORD *)uint64_t v65 = *(_OWORD *)v64;
            *(void *)(a1 + v63 + 40) = *(void *)(v64 + 16);
            *(unsigned char *)(v64 + 23) = 0;
            *(unsigned char *)uint64_t v64 = 0;
            if (!v63)
            {
              uint64_t v67 = a1;
              goto LABEL_147;
            }
            sub_2572D3810(v130, **a3, (uint64_t)&v126);
            sub_2572D3810(__p, **a3, a1 + v63 - 24);
            BOOL v66 = sub_2570B095C(v130, __p);
            if (v129 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v131) < 0) {
              operator delete(v130[0]);
            }
            v63 -= 24;
          }
          while (v66);
          uint64_t v67 = a1 + v63 + 24;
          if (*(char *)(a1 + v63 + 47) < 0) {
            operator delete(*(void **)v67);
          }
LABEL_147:
          __n128 v68 = v126;
          *(void *)(v67 + 16) = v127;
          *(__n128 *)uint64_t v67 = v68;
LABEL_148:
          uint64_t v57 = v60 + 24;
          v58 += 24;
          uint64_t v59 = v60;
          if ((__n128 *)(v60 + 24) == v124) {
            return;
          }
          continue;
        }
      }
      if ((__n128 *)a1 == v124) {
        return;
      }
      uint64_t v107 = a1 + 24;
      if ((__n128 *)(a1 + 24) == v124) {
        return;
      }
      uint64_t v108 = a1 - 24;
      while (2)
      {
        unint64_t v109 = v107;
        sub_2572D3810(v130, **a3, v107);
        sub_2572D3810(__p, **a3, a1);
        BOOL v110 = sub_2570B095C(v130, __p);
        if (v129 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v131) < 0)
        {
          operator delete(v130[0]);
          if (!v110) {
            goto LABEL_243;
          }
        }
        else if (!v110)
        {
          goto LABEL_243;
        }
        __n128 v111 = *(__n128 *)v109;
        unint64_t v127 = *(void *)(v109 + 16);
        __n128 v126 = v111;
        *(void *)(v109 + 8) = 0;
        *(void *)(v109 + 16) = 0;
        *(void *)unint64_t v109 = 0;
        uint64_t v112 = v108;
        do
        {
          uint64_t v113 = (void **)(v112 + 48);
          if (*(char *)(v112 + 71) < 0) {
            operator delete(*v113);
          }
          *(_OWORD *)uint64_t v113 = *(_OWORD *)(v112 + 24);
          *(void *)(v112 + 64) = *(void *)(v112 + 40);
          *(unsigned char *)(v112 + 47) = 0;
          *(unsigned char *)(v112 + 24) = 0;
          sub_2572D3810(v130, **a3, (uint64_t)&v126);
          sub_2572D3810(__p, **a3, v112);
          BOOL v114 = sub_2570B095C(v130, __p);
          if (v129 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v131) < 0) {
            operator delete(v130[0]);
          }
          v112 -= 24;
        }
        while (v114);
        int v115 = *(char *)(v112 + 71);
        uint64_t v116 = v112 + 48;
        if (v115 < 0) {
          operator delete(*(void **)v116);
        }
        __n128 v117 = v126;
        *(void *)(v116 + 16) = v127;
        *(__n128 *)uint64_t v116 = v117;
LABEL_243:
        uint64_t v107 = v109 + 24;
        v108 += 24;
        a1 = v109;
        if ((__n128 *)(v109 + 24) == v124) {
          return;
        }
        continue;
      }
    }
    if (!a4) {
      break;
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = a1 + 24 * (v14 >> 1);
    if ((unint64_t)v13 >= 0xC01)
    {
      sub_2572D31A4((__n128 *)a1, a1 + 24 * (v14 >> 1), v11, a3);
      sub_2572D31A4((__n128 *)(a1 + 24), a1 + 24 * v15 - 24, v121, a3);
      sub_2572D31A4((__n128 *)(a1 + 48), a1 + 24 * v15 + 24, v118, a3);
      sub_2572D31A4((__n128 *)(a1 + 24 * v15 - 24), v16, a1 + 24 * v15 + 24, a3);
      __n128 v17 = *(__n128 *)a1;
      unint64_t v131 = *(void *)(a1 + 16);
      *(__n128 *)std::string v130 = v17;
      long long v18 = *(_OWORD *)v16;
      *(void *)(a1 + 16) = *(void *)(v16 + 16);
      *(_OWORD *)a1 = v18;
      long long v19 = *(_OWORD *)v130;
      *(void *)(v16 + 16) = v131;
      *(_OWORD *)uint64_t v16 = v19;
    }
    else
    {
      sub_2572D31A4((__n128 *)(a1 + 24 * (v14 >> 1)), a1, v11, a3);
    }
    --a4;
    if (a5) {
      goto LABEL_16;
    }
    sub_2572D3810(v130, **a3, a1 - 24);
    sub_2572D3810(__p, **a3, a1);
    BOOL v20 = sub_2570B095C(v130, __p);
    if (v129 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v131) < 0) {
      operator delete(v130[0]);
    }
    if (v20)
    {
LABEL_16:
      uint64_t v21 = 0;
      __n128 v22 = *(__n128 *)a1;
      unint64_t v127 = *(void *)(a1 + 16);
      __n128 v126 = v22;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      do
      {
        sub_2572D3810(v130, **a3, a1 + v21 + 24);
        sub_2572D3810(__p, **a3, (uint64_t)&v126);
        BOOL v23 = sub_2570B095C(v130, __p);
        if (v129 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v131) < 0) {
          operator delete(v130[0]);
        }
        v21 += 24;
      }
      while (v23);
      unint64_t v24 = a1 + v21;
      unint64_t v25 = (unint64_t)v124;
      if (v21 == 24)
      {
        unint64_t v25 = (unint64_t)v124;
        while (v24 < v25)
        {
          v25 -= 24;
          sub_2572D3810(v130, **a3, v25);
          sub_2572D3810(__p, **a3, (uint64_t)&v126);
          BOOL v27 = sub_2570B095C(v130, __p);
          if (v129 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v131) < 0)
          {
            operator delete(v130[0]);
            if (v27) {
              break;
            }
          }
          else if (v27)
          {
            break;
          }
        }
      }
      else
      {
        do
        {
          while (1)
          {
            v25 -= 24;
            sub_2572D3810(v130, **a3, v25);
            sub_2572D3810(__p, **a3, (uint64_t)&v126);
            BOOL v26 = sub_2570B095C(v130, __p);
            if (v129 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v131) < 0) {
              break;
            }
            if (v26) {
              goto LABEL_38;
            }
          }
          operator delete(v130[0]);
        }
        while (!v26);
      }
LABEL_38:
      int v12 = (__n128 *)(a1 + v21);
      if (v24 < v25)
      {
        unint64_t v28 = v25;
        do
        {
          __n128 v29 = *v12;
          unint64_t v131 = v12[1].n128_u64[0];
          *(__n128 *)std::string v130 = v29;
          __n128 v30 = *(__n128 *)v28;
          v12[1].n128_u64[0] = *(void *)(v28 + 16);
          *int v12 = v30;
          long long v31 = *(_OWORD *)v130;
          *(void *)(v28 + 16) = v131;
          *(_OWORD *)unint64_t v28 = v31;
          do
          {
            while (1)
            {
              int v12 = (__n128 *)((char *)v12 + 24);
              sub_2572D3810(v130, **a3, (uint64_t)v12);
              sub_2572D3810(__p, **a3, (uint64_t)&v126);
              BOOL v32 = sub_2570B095C(v130, __p);
              if (v129 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v131) < 0) {
                break;
              }
              if (!v32) {
                goto LABEL_49;
              }
            }
            operator delete(v130[0]);
          }
          while (v32);
          do
          {
            while (1)
            {
LABEL_49:
              v28 -= 24;
              sub_2572D3810(v130, **a3, v28);
              sub_2572D3810(__p, **a3, (uint64_t)&v126);
              BOOL v33 = sub_2570B095C(v130, __p);
              if (v129 < 0) {
                operator delete(__p[0]);
              }
              if ((SHIBYTE(v131) & 0x80000000) == 0) {
                break;
              }
              operator delete(v130[0]);
              if (v33) {
                goto LABEL_53;
              }
            }
          }
          while (!v33);
LABEL_53:
          ;
        }
        while ((unint64_t)v12 < v28);
      }
      unint64_t v34 = &v12[-2].n128_i8[8];
      if (&v12[-2].n128_i8[8] == (__int8 *)a1)
      {
        if (v12[-1].n128_i8[15] < 0) {
          operator delete(*(void **)a1);
        }
      }
      else
      {
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        long long v35 = *(_OWORD *)v34;
        *(void *)(a1 + 16) = v12[-1].n128_u64[1];
        *(_OWORD *)a1 = v35;
        v12[-1].n128_u8[15] = 0;
        v12[-2].n128_u8[8] = 0;
      }
      __n128 v36 = v126;
      v12[-1].n128_u64[1] = v127;
      *(__n128 *)unint64_t v34 = v36;
      if (v24 < v25) {
        goto LABEL_63;
      }
      BOOL v37 = sub_2572D3490((__n128 *)a1, (__n128 *)((char *)v12 - 24), a3);
      if (sub_2572D3490(v12, v124, a3))
      {
        a2 = (__n128 *)((char *)v12 - 24);
        if (v37) {
          return;
        }
        goto LABEL_2;
      }
      if (!v37)
      {
LABEL_63:
        sub_2572D1BF4(a1, &v12[-2].n128_i8[8], a3, a4, a5 & 1);
        a5 = 0;
      }
    }
    else
    {
      __n128 v38 = *(__n128 *)a1;
      unint64_t v127 = *(void *)(a1 + 16);
      __n128 v126 = v38;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      sub_2572D3810(v130, **a3, (uint64_t)&v126);
      sub_2572D3810(__p, **a3, v11);
      BOOL v39 = sub_2570B095C(v130, __p);
      if (v129 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v131) < 0) {
        operator delete(v130[0]);
      }
      if (v39)
      {
        int v12 = (__n128 *)a1;
        do
        {
          sub_2572D3810(v130, **a3, (uint64_t)&v126);
          int v12 = (__n128 *)((char *)v12 + 24);
          sub_2572D3810(__p, **a3, (uint64_t)v12);
          BOOL v40 = sub_2570B095C(v130, __p);
          if (v129 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v131) < 0) {
            operator delete(v130[0]);
          }
        }
        while (!v40);
      }
      else
      {
        std::string::size_type v41 = (__n128 *)(a1 + 24);
        do
        {
          int v12 = v41;
          if (v41 >= v124) {
            break;
          }
          sub_2572D3810(v130, **a3, (uint64_t)&v126);
          sub_2572D3810(__p, **a3, (uint64_t)v12);
          BOOL v42 = sub_2570B095C(v130, __p);
          if (v129 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v131) < 0) {
            operator delete(v130[0]);
          }
          std::string::size_type v41 = (__n128 *)((char *)v12 + 24);
        }
        while (!v42);
      }
      unint64_t v43 = (unint64_t)v124;
      if (v12 < v124)
      {
        unint64_t v43 = (unint64_t)v124;
        do
        {
          while (1)
          {
            sub_2572D3810(v130, **a3, (uint64_t)&v126);
            v43 -= 24;
            sub_2572D3810(__p, **a3, v43);
            BOOL v44 = sub_2570B095C(v130, __p);
            if (v129 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v131) < 0) {
              break;
            }
            if (!v44) {
              goto LABEL_105;
            }
          }
          operator delete(v130[0]);
        }
        while (v44);
      }
LABEL_105:
      while ((unint64_t)v12 < v43)
      {
        __n128 v45 = *v12;
        unint64_t v131 = v12[1].n128_u64[0];
        *(__n128 *)std::string v130 = v45;
        __n128 v46 = *(__n128 *)v43;
        v12[1].n128_u64[0] = *(void *)(v43 + 16);
        *int v12 = v46;
        long long v47 = *(_OWORD *)v130;
        *(void *)(v43 + 16) = v131;
        *(_OWORD *)unint64_t v43 = v47;
        do
        {
          while (1)
          {
            sub_2572D3810(v130, **a3, (uint64_t)&v126);
            int v12 = (__n128 *)((char *)v12 + 24);
            sub_2572D3810(__p, **a3, (uint64_t)v12);
            BOOL v48 = sub_2570B095C(v130, __p);
            if (v129 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v131) < 0) {
              break;
            }
            if (v48) {
              goto LABEL_101;
            }
          }
          operator delete(v130[0]);
        }
        while (!v48);
        do
        {
          while (1)
          {
LABEL_101:
            sub_2572D3810(v130, **a3, (uint64_t)&v126);
            v43 -= 24;
            sub_2572D3810(__p, **a3, v43);
            BOOL v49 = sub_2570B095C(v130, __p);
            if (v129 < 0) {
              operator delete(__p[0]);
            }
            if ((SHIBYTE(v131) & 0x80000000) == 0) {
              break;
            }
            operator delete(v130[0]);
            if (!v49) {
              goto LABEL_105;
            }
          }
        }
        while (v49);
      }
      unint64_t v50 = &v12[-2].n128_i8[8];
      BOOL v5 = (unint64_t)&v12[-2].n128_u64[1] >= a1;
      BOOL v6 = &v12[-2].n128_i8[8] == (__int8 *)a1;
      if (&v12[-2].n128_i8[8] == (__int8 *)a1)
      {
        if (v12[-1].n128_i8[15] < 0) {
          operator delete(*(void **)a1);
        }
      }
      else
      {
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        long long v51 = *(_OWORD *)v50;
        *(void *)(a1 + 16) = v12[-1].n128_u64[1];
        *(_OWORD *)a1 = v51;
        v12[-1].n128_u8[15] = 0;
        v12[-2].n128_u8[8] = 0;
      }
      a5 = 0;
      __n128 v52 = v126;
      v12[-1].n128_u64[1] = v127;
      *(__n128 *)unint64_t v50 = v52;
    }
  }
  int v69 = v124;
  if ((__n128 *)a1 != v124)
  {
    int64_t v70 = (v14 - 2) >> 1;
    int64_t v122 = v70;
    do
    {
      int64_t v71 = v70;
      if (v122 >= v70)
      {
        uint64_t v72 = (2 * v70) | 1;
        uint64_t v73 = a1 + 24 * v72;
        uint64_t v74 = 2 * v70 + 2;
        int64_t v75 = v70;
        if (v74 < (uint64_t)v14)
        {
          sub_2572D3810(v130, **a3, a1 + 24 * v72);
          sub_2572D3810(__p, **a3, v73 + 24);
          BOOL v76 = sub_2570B095C(v130, __p);
          if (v129 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v131) < 0) {
            operator delete(v130[0]);
          }
          if (v76)
          {
            v73 += 24;
            uint64_t v72 = v74;
          }
        }
        sub_2572D3810(v130, **a3, v73);
        int64_t v119 = v75;
        uint64_t v77 = a1 + 24 * v75;
        sub_2572D3810(__p, **a3, v77);
        BOOL v78 = sub_2570B095C(v130, __p);
        int v69 = v124;
        if (v129 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v131) < 0) {
          operator delete(v130[0]);
        }
        int64_t v71 = v75;
        if (!v78)
        {
          __n128 v79 = *(__n128 *)v77;
          unint64_t v127 = *(void *)(v77 + 16);
          __n128 v126 = v79;
          *(void *)(v77 + 8) = 0;
          *(void *)(v77 + 16) = 0;
          *(void *)uint64_t v77 = 0;
          do
          {
            uint64_t v80 = v73;
            if (*(char *)(v77 + 23) < 0) {
              operator delete(*(void **)v77);
            }
            long long v81 = *(_OWORD *)v73;
            *(void *)(v77 + 16) = *(void *)(v73 + 16);
            *(_OWORD *)uint64_t v77 = v81;
            *(unsigned char *)(v73 + 23) = 0;
            *(unsigned char *)uint64_t v73 = 0;
            if (v122 < v72) {
              goto LABEL_185;
            }
            uint64_t v82 = (2 * v72) | 1;
            uint64_t v73 = a1 + 24 * v82;
            uint64_t v72 = 2 * v72 + 2;
            if (v72 < (uint64_t)v14)
            {
              sub_2572D3810(v130, **a3, a1 + 24 * v82);
              sub_2572D3810(__p, **a3, v73 + 24);
              BOOL v83 = sub_2570B095C(v130, __p);
              if (v129 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v131) < 0) {
                operator delete(v130[0]);
              }
              if (v83) {
                v73 += 24;
              }
              else {
                uint64_t v72 = v82;
              }
            }
            else
            {
              uint64_t v72 = v82;
            }
            sub_2572D3810(v130, **a3, v73);
            sub_2572D3810(__p, **a3, (uint64_t)&v126);
            BOOL v84 = sub_2570B095C(v130, __p);
            if (v129 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v131) < 0) {
              operator delete(v130[0]);
            }
            uint64_t v77 = v80;
          }
          while (!v84);
          if (*(char *)(v80 + 23) < 0) {
            operator delete(*(void **)v80);
          }
LABEL_185:
          __n128 v85 = v126;
          *(void *)(v80 + 16) = v127;
          *(__n128 *)uint64_t v80 = v85;
          int v69 = v124;
          int64_t v71 = v119;
        }
      }
      int64_t v70 = v71 - 1;
    }
    while (v71);
    int64_t v86 = v13 / 0x18uLL;
    while (2)
    {
      uint64_t v87 = 0;
      char v120 = v69;
      unint64_t v123 = *(void *)a1;
      v132[0] = *(void *)(a1 + 8);
      *(void *)((char *)v132 + 7) = *(void *)(a1 + 15);
      unsigned __int8 v125 = *(unsigned char *)(a1 + 23);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      unint64_t v88 = a1;
      do
      {
        uint64_t v89 = v88 + 24 * v87 + 24;
        uint64_t v90 = 2 * v87;
        uint64_t v87 = (2 * v87) | 1;
        uint64_t v91 = v90 + 2;
        if (v90 + 2 < v86)
        {
          sub_2572D3810(v130, **a3, v89);
          sub_2572D3810(__p, **a3, v89 + 24);
          BOOL v92 = sub_2570B095C(v130, __p);
          if (v129 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v131) < 0) {
            operator delete(v130[0]);
          }
          if (v92)
          {
            v89 += 24;
            uint64_t v87 = v91;
          }
        }
        if (*(char *)(v88 + 23) < 0) {
          operator delete(*(void **)v88);
        }
        __n128 v93 = *(__n128 *)v89;
        *(void *)(v88 + 16) = *(void *)(v89 + 16);
        *(__n128 *)unint64_t v88 = v93;
        *(unsigned char *)(v89 + 23) = 0;
        *(unsigned char *)uint64_t v89 = 0;
        unint64_t v88 = v89;
      }
      while (v87 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
      int v69 = (__n128 *)((char *)v120 - 24);
      if ((__int8 *)v89 == &v120[-2].n128_i8[8])
      {
        *(void *)uint64_t v89 = v123;
        uint64_t v100 = *(void *)((char *)v132 + 7);
        *(void *)(v89 + 8) = v132[0];
        *(void *)(v89 + 15) = v100;
        *(unsigned char *)(v89 + 23) = v125;
        goto LABEL_220;
      }
      __n128 v94 = *v69;
      *(void *)(v89 + 16) = v120[-1].n128_u64[1];
      *(__n128 *)uint64_t v89 = v94;
      v120[-2].n128_u64[1] = v123;
      unint64_t v95 = v132[0];
      *(unint64_t *)((char *)v120[-1].n128_u64 + 7) = *(void *)((char *)v132 + 7);
      v120[-1].n128_u64[0] = v95;
      v120[-1].n128_u8[15] = v125;
      uint64_t v96 = v89 - a1 + 24;
      if (v96 < 25) {
        goto LABEL_220;
      }
      unint64_t v97 = (v96 / 0x18uLL - 2) >> 1;
      uint64_t v98 = a1 + 24 * v97;
      sub_2572D3810(v130, **a3, v98);
      sub_2572D3810(__p, **a3, v89);
      BOOL v99 = sub_2570B095C(v130, __p);
      if (v129 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v131) < 0)
      {
        operator delete(v130[0]);
        if (!v99) {
          goto LABEL_220;
        }
      }
      else if (!v99)
      {
        goto LABEL_220;
      }
      __n128 v101 = *(__n128 *)v89;
      unint64_t v127 = *(void *)(v89 + 16);
      __n128 v126 = v101;
      *(void *)(v89 + 8) = 0;
      *(void *)(v89 + 16) = 0;
      *(void *)uint64_t v89 = 0;
      while (1)
      {
        uint64_t v102 = v98;
        if (*(char *)(v89 + 23) < 0) {
          operator delete(*(void **)v89);
        }
        long long v103 = *(_OWORD *)v98;
        *(void *)(v89 + 16) = *(void *)(v98 + 16);
        *(_OWORD *)uint64_t v89 = v103;
        *(unsigned char *)(v98 + 23) = 0;
        *(unsigned char *)uint64_t v98 = 0;
        if (!v97) {
          break;
        }
        unint64_t v97 = (v97 - 1) >> 1;
        uint64_t v98 = a1 + 24 * v97;
        sub_2572D3810(v130, **a3, v98);
        sub_2572D3810(__p, **a3, (uint64_t)&v126);
        BOOL v104 = sub_2570B095C(v130, __p);
        if (v129 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v131) < 0) {
          operator delete(v130[0]);
        }
        uint64_t v89 = v102;
        if (!v104)
        {
          if (*(char *)(v102 + 23) < 0) {
            operator delete(*(void **)v102);
          }
          break;
        }
      }
      __n128 v105 = v126;
      *(void *)(v102 + 16) = v127;
      *(__n128 *)uint64_t v102 = v105;
      int v69 = (__n128 *)((char *)v120 - 24);
LABEL_220:
      if (v86-- <= 2) {
        return;
      }
      continue;
    }
  }
}

void sub_2572D2DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_2572D2F18(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6)
{
  sub_2572D5580(a1, a2, a3, a4, a6);
  sub_2572D3810(v30, **a6, a5);
  sub_2572D3810(__p, **a6, a4);
  BOOL v12 = sub_2570B095C(v30, __p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v12) {
      return result;
    }
  }
  else if (!v12)
  {
    return result;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  long long v15 = *(_OWORD *)a4;
  uint64_t v16 = *(void *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(void *)(a4 + 16) = v16;
  *(_OWORD *)a5 = v15;
  *(void *)(a5 + 16) = v14;
  sub_2572D3810(v30, **a6, a4);
  sub_2572D3810(__p, **a6, a3);
  BOOL v17 = sub_2570B095C(v30, __p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v17) {
      return result;
    }
  }
  else if (!v17)
  {
    return result;
  }
  uint64_t v18 = *(void *)(a3 + 16);
  long long v19 = *(_OWORD *)a3;
  uint64_t v20 = *(void *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v20;
  *(_OWORD *)a4 = v19;
  *(void *)(a4 + 16) = v18;
  sub_2572D3810(v30, **a6, a3);
  sub_2572D3810(__p, **a6, a2);
  BOOL v21 = sub_2570B095C(v30, __p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v21) {
      return result;
    }
  }
  else if (!v21)
  {
    return result;
  }
  uint64_t v22 = *(void *)(a2 + 16);
  __n128 v23 = *(__n128 *)a2;
  uint64_t v24 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v24;
  *(__n128 *)a3 = v23;
  *(void *)(a3 + 16) = v22;
  sub_2572D3810(v30, **a6, a2);
  sub_2572D3810(__p, **a6, (uint64_t)a1);
  BOOL v25 = sub_2570B095C(v30, __p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v25)
  {
    unint64_t v26 = a1[1].n128_u64[0];
    __n128 result = *a1;
    unint64_t v27 = *(void *)(a2 + 16);
    *a1 = *(__n128 *)a2;
    a1[1].n128_u64[0] = v27;
    *(__n128 *)a2 = result;
    *(void *)(a2 + 16) = v26;
  }
  return result;
}

void sub_2572D317C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_2572D31A4(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  sub_2572D3810(v27, **a4, a2);
  sub_2572D3810(__p, **a4, (uint64_t)a1);
  BOOL v8 = sub_2570B095C(v27, __p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0)
  {
    operator delete(v27[0]);
    if (v8) {
      goto LABEL_5;
    }
  }
  else if (v8)
  {
LABEL_5:
    sub_2572D3810(v27, **a4, a3);
    sub_2572D3810(__p, **a4, a2);
    BOOL v9 = sub_2570B095C(v27, __p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0)
    {
      operator delete(v27[0]);
      if (v9) {
        goto LABEL_9;
      }
    }
    else if (v9)
    {
LABEL_9:
      unint64_t v10 = a1[1].n128_u64[0];
      __n128 result = *a1;
      unint64_t v12 = *(void *)(a3 + 16);
      *a1 = *(__n128 *)a3;
      a1[1].n128_u64[0] = v12;
LABEL_23:
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v10;
      return result;
    }
    unint64_t v14 = a1[1].n128_u64[0];
    __n128 v15 = *a1;
    unint64_t v16 = *(void *)(a2 + 16);
    *a1 = *(__n128 *)a2;
    a1[1].n128_u64[0] = v16;
    *(__n128 *)a2 = v15;
    *(void *)(a2 + 16) = v14;
    sub_2572D3810(v27, **a4, a3);
    sub_2572D3810(__p, **a4, a2);
    BOOL v17 = sub_2570B095C(v27, __p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (v17)
    {
      unint64_t v10 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v18 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v18;
      goto LABEL_23;
    }
    return result;
  }
  sub_2572D3810(v27, **a4, a3);
  sub_2572D3810(__p, **a4, a2);
  BOOL v13 = sub_2570B095C(v27, __p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0)
  {
    operator delete(v27[0]);
    if (!v13) {
      return result;
    }
  }
  else if (!v13)
  {
    return result;
  }
  uint64_t v19 = *(void *)(a2 + 16);
  __n128 v20 = *(__n128 *)a2;
  uint64_t v21 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v21;
  *(__n128 *)a3 = v20;
  *(void *)(a3 + 16) = v19;
  sub_2572D3810(v27, **a4, a2);
  sub_2572D3810(__p, **a4, (uint64_t)a1);
  BOOL v22 = sub_2570B095C(v27, __p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v22)
  {
    unint64_t v23 = a1[1].n128_u64[0];
    __n128 result = *a1;
    unint64_t v24 = *(void *)(a2 + 16);
    *a1 = *(__n128 *)a2;
    a1[1].n128_u64[0] = v24;
    *(__n128 *)a2 = result;
    *(void *)(a2 + 16) = v23;
  }
  return result;
}

void sub_2572D3464(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 81) < 0) {
    operator delete(*(void **)(v1 - 104));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2572D3490(__n128 *a1, __n128 *a2, uint64_t **a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v8 = (__n128 *)((char *)a2 - 24);
      sub_2572D3810(v27, **a3, (uint64_t)&a2[-2].n128_i64[1]);
      sub_2572D3810(__p, **a3, (uint64_t)a1);
      BOOL v9 = sub_2570B095C(v27, __p);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v9)
      {
        unint64_t v10 = a1[1].n128_u64[0];
        __n128 v11 = *a1;
        unint64_t v12 = v8[1].n128_u64[0];
        *a1 = *v8;
        a1[1].n128_u64[0] = v12;
        *BOOL v8 = v11;
        v8[1].n128_u64[0] = v10;
      }
      return 1;
    case 3uLL:
      sub_2572D31A4(a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1], a3);
      return 1;
    case 4uLL:
      sub_2572D5580(a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3], (uint64_t)&a2[-2].n128_i64[1], a3);
      return 1;
    case 5uLL:
      sub_2572D2F18(a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3], (uint64_t)&a1[4].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1], a3);
      return 1;
    default:
      uint64_t v13 = (uint64_t)&a1[3];
      sub_2572D31A4(a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3], a3);
      uint64_t v14 = (uint64_t)&a1[4].n128_i64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    sub_2572D3810(v27, **a3, v14);
    sub_2572D3810(__p, **a3, v13);
    BOOL v17 = sub_2570B095C(v27, __p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      break;
    }
    if (v17) {
      goto LABEL_17;
    }
LABEL_30:
    uint64_t v13 = v14;
    v15 += 24;
    v14 += 24;
    if ((__n128 *)v14 == a2) {
      return 1;
    }
  }
  operator delete(v27[0]);
  if (!v17) {
    goto LABEL_30;
  }
LABEL_17:
  long long v23 = *(_OWORD *)v14;
  uint64_t v24 = *(void *)(v14 + 16);
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = 0;
  *(void *)uint64_t v14 = 0;
  uint64_t v18 = v15;
  do
  {
    uint64_t v19 = (char *)a1 + v18;
    __n128 v20 = (void **)((char *)&a1[4].n128_u64[1] + v18);
    if (a1[5].n128_i8[v18 + 15] < 0) {
      operator delete(*v20);
    }
    *(_OWORD *)__n128 v20 = *((_OWORD *)v19 + 3);
    *(unint64_t *)((char *)&a1[5].n128_u64[1] + v18) = *((void *)v19 + 8);
    v19[71] = 0;
    v19[48] = 0;
    if (v18 == -48)
    {
      uint64_t v22 = (uint64_t)a1;
      goto LABEL_29;
    }
    sub_2572D3810(v27, **a3, (uint64_t)&v23);
    sub_2572D3810(__p, **a3, (uint64_t)&a1[1].n128_i64[1] + v18);
    BOOL v21 = sub_2570B095C(v27, __p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    v18 -= 24;
  }
  while (v21);
  uint64_t v22 = (uint64_t)&a1[4].n128_i64[1] + v18;
  if (a1[5].n128_i8[v18 + 15] < 0) {
    operator delete(*(void **)v22);
  }
LABEL_29:
  *(_OWORD *)uint64_t v22 = v23;
  *(void *)(v22 + 16) = v24;
  if (++v16 != 8) {
    goto LABEL_30;
  }
  return v14 + 24 == (void)a2;
}

void sub_2572D37AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2572D3810(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = *(void *)a3;
  }
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  uint64_t v183 = v6;
  uint64_t v184 = 0;
  uint64_t v8 = v7 + v6;
  uint64_t v189 = 0;
  uint64_t v190 = 0;
  char v191 = 0;
  long long v192 = 0uLL;
  BOOL v193 = 0;
  char v194 = 0;
  uint64_t v195 = 0;
  unint64_t v185 = 0;
  uint64_t v186 = 0;
  unint64_t v9 = (*(_DWORD *)(a2 + 28) + 1);
  *(void *)&long long v187 = v7 + v6;
  *((void *)&v187 + 1) = v7 + v6;
  BOOL v188 = 0;
  sub_2572CBE18(&v184, v9, &v187);
  uint64_t v189 = v7;
  uint64_t v190 = v7;
  char v191 = 0;
  long long v192 = v187;
  BOOL v193 = v188;
  uint64_t v195 = v7;
  char v194 = 1;
  if ((*(_WORD *)(a2 + 24) & 0x1F0) != 0)
  {
    uint64_t v182 = v8;
    if (*(_DWORD *)(a2 + 28))
    {
      v196[0] = 0;
      v196[1] = 0;
      *(void *)&long long v197 = 0;
      uint64_t v10 = *(void *)(a2 + 40);
      if (v10)
      {
        *(void *)&long long v201 = v182;
        *((void *)&v201 + 1) = v182;
        char v202 = 0;
        *(_DWORD *)unint64_t v199 = 0;
        memset(&v199[8], 0, 48);
        memset(v200, 0, 37);
        v196[1] = sub_2572CC3B0((int64x2_t *)v196, (uint64_t)v199);
        if (*(void *)&v200[0]) {
          operator delete(*(void **)&v200[0]);
        }
        if (*(void *)&v199[32]) {
          operator delete(*(void **)&v199[32]);
        }
        __n128 v11 = (void **)v196[1];
        *((_DWORD *)v196[1] - 24) = 0;
        *(v11 - 11) = (void *)v7;
        *(v11 - 10) = (void *)v7;
        *(v11 - 9) = (void *)v182;
        sub_2572CC05C(v11 - 8, *(unsigned int *)(a2 + 28), &v201);
        sub_2572CC1E8((char **)v196[1] - 5, *(unsigned int *)(a2 + 32));
        unint64_t v181 = 0;
        uint64_t v178 = 0;
        unint64_t v179 = 0;
        unint64_t v172 = 0;
        uint64_t v176 = 0;
        std::string __p = 0;
        uint64_t v12 = 0;
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = v196[1];
        *((void *)v196[1] - 2) = v10;
        *(v15 - 2) = 4160;
        *((unsigned char *)v15 - 4) = 1;
        do
        {
          BOOL v16 = (++v14 & 0xFFF) != 0 || (int)(v14 >> 12) < (int)v183;
          if (!v16) {
            sub_2572CC300();
          }
          uint64_t v18 = v15 - 4;
          uint64_t v17 = *((void *)v15 - 2);
          uint64_t v19 = v15 - 24;
          if (v17) {
            (*(void (**)(uint64_t, _DWORD *))(*(void *)v17 + 16))(v17, v15 - 24);
          }
          switch(*(_DWORD *)v19)
          {
            case 0xFFFFFC18:
              if (*((void *)v15 - 10) != v182) {
                goto LABEL_23;
              }
              uint64_t v26 = v182 - *((void *)v15 - 11);
              if ((v13 & (v12 >= v26)) == 0)
              {
                unint64_t v27 = (long long *)*((void *)v15 - 8);
                char v28 = (long long *)*((void *)v15 - 7);
                unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v178 - (uint64_t)__p) >> 3) >= v29)
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((v181 - __p) >> 3) >= v29)
                  {
                    if (v27 == v28)
                    {
                      std::string::size_type v41 = __p;
                      BOOL v42 = __p;
                    }
                    else
                    {
                      std::string::size_type v41 = __p;
                      BOOL v42 = __p;
                      unint64_t v43 = __p;
                      do
                      {
                        *(_OWORD *)unint64_t v43 = *v27;
                        v43[16] = *((unsigned char *)v27 + 16);
                        v42 += 24;
                        unint64_t v27 = (long long *)((char *)v27 + 24);
                        v43 += 24;
                      }
                      while (v27 != v28);
                    }
                    char v169 = (char *)(v42 - v41);
                    unint64_t v181 = v41;
                  }
                  else
                  {
                    __n128 v36 = (long long *)((char *)v27 + 8 * ((v181 - __p) >> 3));
                    if (v181 != __p)
                    {
                      BOOL v37 = __p;
                      do
                      {
                        *(_OWORD *)BOOL v37 = *v27;
                        v37[16] = *((unsigned char *)v27 + 16);
                        unint64_t v27 = (long long *)((char *)v27 + 24);
                        v37 += 24;
                      }
                      while (v27 != v36);
                    }
                    __n128 v38 = v181;
                    if (v36 != v28)
                    {
                      BOOL v39 = v181;
                      do
                      {
                        long long v40 = *v36;
                        *((void *)v39 + 2) = *((void *)v36 + 2);
                        *(_OWORD *)BOOL v39 = v40;
                        v39 += 24;
                        __n128 v36 = (long long *)((char *)v36 + 24);
                        v38 += 24;
                      }
                      while (v36 != v28);
                    }
                    char v169 = (char *)(v38 - v181);
                  }
                }
                else
                {
                  if (__p)
                  {
                    operator delete(__p);
                    uint64_t v178 = 0;
                  }
                  if (v29 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_252;
                  }
                  unint64_t v30 = 0x5555555555555556 * (v178 >> 3);
                  if (v30 <= v29) {
                    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3);
                  }
                  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v178 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v30;
                  if (v31 > 0xAAAAAAAAAAAAAAALL) {
LABEL_252:
                  }
                    sub_2570AFD0C();
                  unint64_t v181 = (char *)sub_2572CBFD0(v31);
                  if (v27 == v28)
                  {
                    BOOL v33 = v181;
                    unint64_t v34 = v181;
                  }
                  else
                  {
                    BOOL v33 = v181;
                    unint64_t v34 = v181;
                    do
                    {
                      long long v35 = *v27;
                      *((void *)v34 + 2) = *((void *)v27 + 2);
                      *(_OWORD *)unint64_t v34 = v35;
                      v34 += 24;
                      unint64_t v27 = (long long *)((char *)v27 + 24);
                    }
                    while (v27 != v28);
                  }
                  uint64_t v178 = (uint64_t)&v33[24 * v32];
                  char v169 = (char *)(v34 - v33);
                  std::string __p = v33;
                }
                __n128 v45 = (char *)*((void *)v15 - 5);
                BOOL v44 = (char *)*((void *)v15 - 4);
                unint64_t v46 = (v44 - v45) >> 4;
                if (v46 <= (v176 - (uint64_t)v179) >> 4)
                {
                  long long v51 = v172;
                  unint64_t v54 = (v172 - v179) >> 4;
                  if (v54 >= v46)
                  {
                    long long v56 = v181;
                    if (v45 == v44)
                    {
                      long long v51 = v179;
                      uint64_t v63 = v179;
                      uint64_t v60 = v169;
                    }
                    else
                    {
                      long long v51 = v179;
                      uint64_t v63 = v179;
                      uint64_t v64 = v179;
                      uint64_t v60 = v169;
                      do
                      {
                        *(void *)uint64_t v64 = *(void *)v45;
                        *((void *)v64 + 1) = *((void *)v45 + 1);
                        v63 += 16;
                        v45 += 16;
                        v64 += 16;
                      }
                      while (v45 != v44);
                    }
                    int64_t v62 = v63 - v51;
                  }
                  else
                  {
                    long long v55 = &v45[16 * v54];
                    long long v56 = v181;
                    if (v172 != v179)
                    {
                      uint64_t v57 = v179;
                      do
                      {
                        *(void *)uint64_t v57 = *(void *)v45;
                        *((void *)v57 + 1) = *((void *)v45 + 1);
                        v45 += 16;
                        v57 += 16;
                      }
                      while (v45 != v55);
                    }
                    uint64_t v58 = v172;
                    if (v55 == v44)
                    {
                      uint64_t v60 = v169;
                    }
                    else
                    {
                      uint64_t v59 = v172;
                      uint64_t v60 = v169;
                      do
                      {
                        long long v61 = *(_OWORD *)v55;
                        v55 += 16;
                        *(_OWORD *)uint64_t v59 = v61;
                        v59 += 16;
                        v58 += 16;
                      }
                      while (v55 != v44);
                    }
                    int64_t v62 = v58 - v172;
                  }
                }
                else
                {
                  if (v179)
                  {
                    operator delete(v179);
                    uint64_t v176 = 0;
                  }
                  if (v44 - v45 < 0) {
                    goto LABEL_251;
                  }
                  uint64_t v47 = v176 >> 3;
                  if (v176 >> 3 <= v46) {
                    uint64_t v47 = (v44 - v45) >> 4;
                  }
                  unint64_t v48 = (unint64_t)v176 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v47;
                  if (v48 >> 60) {
LABEL_251:
                  }
                    sub_2570AFD0C();
                  BOOL v49 = (char *)sub_2572CC620(v48);
                  long long v51 = v49;
                  __n128 v52 = v49;
                  while (v45 != v44)
                  {
                    long long v53 = *(_OWORD *)v45;
                    v45 += 16;
                    *(_OWORD *)__n128 v52 = v53;
                    v52 += 16;
                  }
                  uint64_t v176 = (uint64_t)&v49[16 * v50];
                  int64_t v62 = v52 - v49;
                  unint64_t v179 = v49;
                  long long v56 = v181;
                  uint64_t v60 = v169;
                }
                unint64_t v181 = &v60[(void)v56];
                unint64_t v172 = &v51[v62];
                uint64_t v12 = v26;
              }
              uint64_t v65 = v196[1];
              if (v12 == v183)
              {
                BOOL v66 = v196[0];
                while (v65 != v66)
                {
                  v65 -= 12;
                  sub_2572CC578(v65);
                }
                v196[1] = v66;
                char v13 = 1;
                uint64_t v12 = v183;
              }
              else
              {
                sub_2572CC578((void *)v196[1] - 12);
                v196[1] = v65 - 12;
                char v13 = 1;
              }
              break;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              break;
            case 0xFFFFFC1F:
LABEL_23:
              __n128 v20 = (char *)v196[1] - 96;
              sub_2572CC578((void *)v196[1] - 12);
              v196[1] = v20;
              break;
            case 0xFFFFFC20:
              long long v21 = *((_OWORD *)v15 - 5);
              *(_OWORD *)unint64_t v199 = *v19;
              *(_OWORD *)&v199[16] = v21;
              memset(&v199[32], 0, 24);
              sub_2572CC658(&v199[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
              memset(v200, 0, 24);
              sub_2572CC6D8((char *)v200, *((long long **)v15 - 5), *((long long **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
              uint64_t v22 = *v18;
              *(void *)((char *)&v200[1] + 13) = *(void *)((char *)v15 - 11);
              *((void *)&v200[1] + 1) = v22;
              (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*v18 + 24))(*v18, 1, v15 - 24);
              (*(void (**)(void, void, unsigned char *))(**((void **)&v200[1] + 1) + 24))(*((void *)&v200[1] + 1), 0, v199);
              long long v23 = (char *)v196[1];
              if (v196[1] >= (void *)v197)
              {
                v196[1] = sub_2572CC3B0((int64x2_t *)v196, (uint64_t)v199);
                if (*(void *)&v200[0])
                {
                  *((void *)&v200[0] + 1) = *(void *)&v200[0];
                  operator delete(*(void **)&v200[0]);
                }
              }
              else
              {
                long long v24 = *(_OWORD *)&v199[16];
                *(_OWORD *)v196[1] = *(_OWORD *)v199;
                *((_OWORD *)v23 + 1) = v24;
                *((void *)v23 + 4) = 0;
                *((void *)v23 + 5) = 0;
                *((void *)v23 + 6) = 0;
                *((void *)v23 + 7) = 0;
                *((_OWORD *)v23 + 2) = *(_OWORD *)&v199[32];
                *((void *)v23 + 6) = *(void *)&v199[48];
                memset(&v199[32], 0, 24);
                *((void *)v23 + 8) = 0;
                *((void *)v23 + 9) = 0;
                *(_OWORD *)(v23 + 56) = v200[0];
                *((void *)v23 + 9) = *(void *)&v200[1];
                memset(v200, 0, 24);
                uint64_t v25 = *((void *)&v200[1] + 1);
                *(void *)(v23 + 85) = *(void *)((char *)&v200[1] + 13);
                *((void *)v23 + 10) = v25;
                v196[1] = v23 + 96;
              }
              if (*(void *)&v199[32])
              {
                *(void *)&v199[40] = *(void *)&v199[32];
                operator delete(*(void **)&v199[32]);
              }
              break;
            default:
              sub_2572CC358();
          }
          uint64_t v15 = v196[1];
        }
        while (v196[0] != v196[1]);
        if (v13)
        {
          uint64_t v67 = v184;
          *(void *)uint64_t v184 = v7;
          *((void *)v67 + 1) = v7 + v12;
          v67[16] = 1;
          __n128 v68 = __p;
          if (v181 != __p)
          {
            int v69 = __p + 16;
            unsigned int v70 = 1;
            do
            {
              int64_t v71 = &v67[24 * v70];
              *(_OWORD *)int64_t v71 = *((_OWORD *)v69 - 1);
              char v72 = *v69;
              v69 += 24;
              v71[16] = v72;
              BOOL v16 = 0xAAAAAAAAAAAAAAABLL * ((v181 - __p) >> 3) > v70++;
            }
            while (v16);
          }
        }
        else
        {
          __n128 v68 = __p;
        }
        if (v179) {
          operator delete(v179);
        }
        if (v68) {
          operator delete(v68);
        }
        *(void *)unint64_t v199 = v196;
        sub_2572CC78C((void ***)v199);
        if (v13) {
          goto LABEL_202;
        }
      }
      else
      {
        *(void *)unint64_t v199 = v196;
        sub_2572CC78C((void ***)v199);
      }
    }
    else
    {
      long long v197 = 0u;
      int64x2_t v198 = 0u;
      *(_OWORD *)uint64_t v196 = 0u;
      uint64_t v73 = *(void *)(a2 + 40);
      if (v73)
      {
        *(_DWORD *)unint64_t v199 = 0;
        memset(&v199[8], 0, 48);
        memset(v200, 0, 37);
        sub_2572D4C98(v196, (uint64_t)v199);
        if (*(void *)&v200[0]) {
          operator delete(*(void **)&v200[0]);
        }
        if (*(void *)&v199[32]) {
          operator delete(*(void **)&v199[32]);
        }
        uint64_t v175 = v3;
        uint64_t v74 = v196[1];
        unint64_t v75 = v198.i64[1] + v198.i64[0] - 1;
        unint64_t v76 = v75 / 0x2A;
        uint64_t v77 = *((void *)v196[1] + v75 / 0x2A);
        unint64_t v78 = 3 * (v75 % 0x2A);
        uint64_t v79 = v77 + 32 * v78;
        *(_DWORD *)uint64_t v79 = 0;
        *(void *)(v79 + 8) = v7;
        uint64_t v174 = v7;
        *(void *)(v74[v76] + 32 * v78 + 16) = v7;
        *(void *)(v74[v76] + 32 * v78 + 24) = v8;
        sub_2572CC1E8((char **)(v74[v76] + 32 * v78 + 56), *(unsigned int *)(a2 + 32));
        char v177 = 0;
        unsigned int v80 = 0;
        uint64_t v173 = 0;
        uint64_t v81 = v198.i64[1];
        uint64_t v82 = v196[1];
        unint64_t v83 = v198.i64[1] + v198.i64[0] - 1;
        unint64_t v84 = v83 / 0x2A;
        unint64_t v85 = 3 * (v83 % 0x2A);
        *(void *)(*((void *)v196[1] + v84) + 32 * v85 + 80) = v73;
        uint64_t v86 = v82[v84] + 32 * v85;
        *(_DWORD *)(v86 + 88) = 4160;
        *(unsigned char *)(v86 + 92) = 1;
        while (2)
        {
          if ((++v80 & 0xFFF) == 0 && (int)(v80 >> 12) >= (int)v183) {
            sub_2572CC300();
          }
          unint64_t v88 = v81 + v198.i64[0] - 1;
          uint64_t v89 = *((void *)v196[1] + v88 / 0x2A);
          unint64_t v90 = v88 % 0x2A;
          uint64_t v91 = v89 + 96 * (v88 % 0x2A);
          __n128 v93 = (void *)(v91 + 80);
          uint64_t v92 = *(void *)(v91 + 80);
          if (v92) {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v92 + 16))(v92, v89 + 96 * v90);
          }
          switch(*(_DWORD *)v91)
          {
            case 0xFFFFFC18:
              if (*(void *)(v89 + 96 * v90 + 16) != v8) {
                goto LABEL_190;
              }
              uint64_t v94 = v173;
              if ((v177 & (v173 >= v8 - *(void *)(v89 + 96 * v90 + 8))) == 0) {
                uint64_t v94 = v8 - *(void *)(v89 + 96 * v90 + 8);
              }
              if (v94 != v183)
              {
                uint64_t v173 = v94;
                sub_2572D513C(v196);
                char v177 = 1;
                goto LABEL_191;
              }
              unint64_t v95 = (void **)v196[1];
              uint64_t v96 = (unsigned char *)v197;
              if ((void *)v197 == v196[1])
              {
                uint64_t v96 = v196[1];
              }
              else
              {
                unint64_t v97 = (char *)v196[1] + 8 * (v198.i64[0] / 0x2AuLL);
                uint64_t v98 = (void *)(*v97 + 96 * (v198.i64[0] % 0x2AuLL));
                unint64_t v99 = *((void *)v196[1] + (v198.i64[1] + v198.i64[0]) / 0x2AuLL)
                    + 96 * ((v198.i64[1] + v198.i64[0]) % 0x2AuLL);
                if (v98 != (void *)v99)
                {
                  do
                  {
                    sub_2572CC578(v98);
                    v98 += 12;
                    if ((void *)((char *)v98 - *v97) == (void *)4032)
                    {
                      uint64_t v100 = (void *)v97[1];
                      ++v97;
                      uint64_t v98 = v100;
                    }
                  }
                  while (v98 != (void *)v99);
                  unint64_t v95 = (void **)v196[1];
                  uint64_t v96 = (unsigned char *)v197;
                }
                uint64_t v8 = v182;
              }
              v198.i64[1] = 0;
              unint64_t v129 = v96 - (unsigned char *)v95;
              if (v129 >= 0x11)
              {
                do
                {
                  operator delete(*v95);
                  unint64_t v95 = (void **)((char *)v196[1] + 8);
                  v196[1] = v95;
                  unint64_t v129 = v197 - (void)v95;
                }
                while ((void)v197 - (void)v95 > 0x10uLL);
              }
              if (v129 >> 3 == 1)
              {
                uint64_t v130 = 21;
              }
              else
              {
                if (v129 >> 3 != 2) {
                  goto LABEL_178;
                }
                uint64_t v130 = 42;
              }
              v198.i64[0] = v130;
LABEL_178:
              char v177 = 1;
              uint64_t v173 = v183;
LABEL_191:
              uint64_t v81 = v198.i64[1];
              if (v198.i64[1]) {
                continue;
              }
              uint64_t v7 = v174;
              uint64_t v3 = v175;
              if ((v177 & 1) == 0) {
                goto LABEL_194;
              }
              uint64_t v138 = v184;
              *(void *)uint64_t v184 = v174;
              *((void *)v138 + 1) = v174 + v173;
              v138[16] = 1;
              sub_2572D5418((uint64_t)v196);
              break;
            case 0xFFFFFC19:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_191;
            case 0xFFFFFC1D:
              unint64_t v101 = v198.i64[0];
              uint64_t v102 = (char *)v196[1];
              long long v103 = (char *)v197;
              if (!v198.i64[0])
              {
                unint64_t v106 = (uint64_t)(v197 - (unint64_t)v196[1]) >> 3;
                uint64_t v107 = 42 * v106 - 1;
                if ((void *)v197 == v196[1]) {
                  uint64_t v107 = 0;
                }
                if ((unint64_t)(v107 - v198.i64[1]) < 0x2A)
                {
                  if (v106 >= (uint64_t)(*((void *)&v197 + 1) - (unint64_t)v196[0]) >> 3)
                  {
                    if (*((void **)&v197 + 1) == v196[0]) {
                      unint64_t v108 = 1;
                    }
                    else {
                      unint64_t v108 = (uint64_t)(*((void *)&v197 + 1) - (unint64_t)v196[0]) >> 2;
                    }
                    *(void *)&v199[32] = (char *)&v197 + 8;
                    *(void *)unint64_t v199 = sub_2572C7528(v108);
                    *(void *)&v199[8] = *(void *)v199;
                    *(void *)&v199[16] = *(void *)v199;
                    *(void *)&v199[24] = *(void *)v199 + 8 * v109;
                    *(void *)&long long v201 = operator new(0xFC0uLL);
                    sub_2572D51EC(v199, &v201);
                    BOOL v110 = (uint64_t *)v196[1];
                    for (uint64_t i = *(char **)&v199[16]; v110 != (uint64_t *)v197; *(void *)&v199[16] += 8)
                    {
                      if (i == *(char **)&v199[24])
                      {
                        uint64_t v112 = *(char **)&v199[8];
                        if (*(void *)&v199[8] <= *(void *)v199)
                        {
                          unint64_t v171 = *(void **)v199;
                          if (i == *(char **)v199) {
                            unint64_t v118 = 1;
                          }
                          else {
                            unint64_t v118 = (uint64_t)&i[-*(void *)v199] >> 2;
                          }
                          int64_t v119 = (char *)sub_2572C7528(v118);
                          uint64_t v122 = i - v112;
                          BOOL v121 = i == v112;
                          uint64_t i = &v119[8 * (v118 >> 2)];
                          if (!v121)
                          {
                            uint64_t i = &v119[8 * (v118 >> 2) + (v122 & 0xFFFFFFFFFFFFFFF8)];
                            uint64_t v123 = 8 * (v122 >> 3);
                            uint64_t v124 = &v119[8 * (v118 >> 2)];
                            do
                            {
                              uint64_t v125 = *(void *)v112;
                              v112 += 8;
                              *(void *)uint64_t v124 = v125;
                              v124 += 8;
                              v123 -= 8;
                            }
                            while (v123);
                          }
                          *(void *)unint64_t v199 = v119;
                          *(void *)&v199[8] = &v119[8 * (v118 >> 2)];
                          *(void *)&v199[16] = i;
                          *(void *)&v199[24] = &v119[8 * v120];
                          if (v171) {
                            operator delete(v171);
                          }
                        }
                        else
                        {
                          uint64_t v113 = (uint64_t)(*(void *)&v199[8] - *(void *)v199) >> 3;
                          if (v113 >= -1) {
                            uint64_t v114 = v113 + 1;
                          }
                          else {
                            uint64_t v114 = v113 + 2;
                          }
                          uint64_t v115 = *(void *)&v199[8] - 8 * (v114 >> 1);
                          uint64_t v116 = &i[-*(void *)&v199[8]];
                          if (i != *(char **)&v199[8])
                          {
                            uint64_t v170 = (void *)(*(void *)&v199[8] - 8 * (v114 >> 1));
                            memmove(v170, *(const void **)&v199[8], (size_t)&i[-*(void *)&v199[8]]);
                            uint64_t v116 = (char *)(i - v112);
                            uint64_t v115 = (uint64_t)v170;
                            uint64_t i = v112;
                          }
                          __n128 v117 = &i[-8 * (v114 >> 1)];
                          uint64_t i = &v116[v115];
                          *(void *)&v199[8] = v117;
                          *(void *)&v199[16] = &v116[v115];
                        }
                      }
                      uint64_t v126 = *v110++;
                      *(void *)uint64_t i = v126;
                      uint64_t i = (char *)(*(void *)&v199[16] + 8);
                    }
                    unint64_t v127 = v196[0];
                    *(_OWORD *)uint64_t v196 = *(_OWORD *)v199;
                    *(void *)&long long v197 = i;
                    *((void *)&v197 + 1) = *(void *)&v199[24];
                    uint64_t v128 = 21;
                    if (&i[-*(void *)&v199[8]] != (char *)8) {
                      uint64_t v128 = v198.i64[0] + 42;
                    }
                    v198.i64[0] = v128;
                    uint64_t v8 = v182;
                    if (v127) {
                      operator delete(v127);
                    }
                  }
                  else
                  {
                    if (v196[1] == v196[0])
                    {
                      *(void *)unint64_t v199 = operator new(0xFC0uLL);
                      sub_2572D51EC(v196, v199);
                      *(void *)unint64_t v199 = *(void *)(v197 - 8);
                      *(void *)&long long v197 = v197 - 8;
                    }
                    else
                    {
                      *(void *)unint64_t v199 = operator new(0xFC0uLL);
                    }
                    sub_2572D5300((uint64_t)v196, v199);
                    uint64_t v131 = 21;
                    if ((void)v197 - (unint64_t)v196[1] != 8) {
                      uint64_t v131 = v198.i64[0] + 42;
                    }
                    v198.i64[0] = v131;
                  }
                }
                else
                {
                  v198.i64[0] = 42;
                  *(void *)unint64_t v199 = *(void *)(v197 - 8);
                  *(void *)&long long v197 = v197 - 8;
                  sub_2572D5300((uint64_t)v196, v199);
                }
                unint64_t v101 = v198.i64[0];
                uint64_t v102 = (char *)v196[1];
                long long v103 = (char *)v197;
              }
              unint64_t v132 = &v102[8 * (v101 / 0x2A)];
              unint64_t v133 = *(void *)v132 + 96 * (v101 % 0x2A);
              if (v103 == v102) {
                uint64_t v134 = 0;
              }
              else {
                uint64_t v134 = v133;
              }
              if (v134 == *(void *)v132) {
                uint64_t v134 = *((void *)v132 - 1) + 4032;
              }
              long long v135 = *(_OWORD *)(v91 + 16);
              *(_OWORD *)(v134 - 96) = *(_OWORD *)v91;
              *(_OWORD *)(v134 - 80) = v135;
              uint64_t v136 = v89 + 96 * v90;
              *(void *)(v134 - 56) = 0;
              *(void *)(v134 - 48) = 0;
              *(void *)(v134 - 64) = 0;
              *(_OWORD *)(v134 - 64) = *(_OWORD *)(v136 + 32);
              *(void *)(v134 - 48) = *(void *)(v136 + 48);
              *(void *)(v136 + 32) = 0;
              *(void *)(v136 + 40) = 0;
              *(void *)(v136 + 48) = 0;
              *(void *)(v134 - 40) = 0;
              *(void *)(v134 - 32) = 0;
              *(void *)(v134 - 24) = 0;
              *(_OWORD *)(v134 - 40) = *(_OWORD *)(v136 + 56);
              *(void *)(v134 - 24) = *(void *)(v136 + 72);
              *(void *)(v136 + 56) = 0;
              *(void *)(v136 + 64) = 0;
              *(void *)(v136 + 72) = 0;
              uint64_t v137 = *v93;
              *(void *)(v134 - 11) = *(void *)(v91 + 85);
              *(void *)(v134 - 16) = v137;
              int64x2_t v198 = vaddq_s64(v198, (int64x2_t)xmmword_2572DA610);
              goto LABEL_190;
            case 0xFFFFFC1F:
LABEL_190:
              sub_2572D513C(v196);
              goto LABEL_191;
            case 0xFFFFFC20:
              long long v104 = *(_OWORD *)(v91 + 16);
              *(_OWORD *)unint64_t v199 = *(_OWORD *)v91;
              *(_OWORD *)&v199[16] = v104;
              memset(&v199[32], 0, 24);
              sub_2572CC658(&v199[32], *(long long **)(v89 + 96 * v90 + 32), *(long long **)(v89 + 96 * v90 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v89 + 96 * v90 + 40) - *(void *)(v89 + 96 * v90 + 32)) >> 3));
              memset(v200, 0, 24);
              sub_2572CC6D8((char *)v200, *(long long **)(v89 + 96 * v90 + 56), *(long long **)(v89 + 96 * v90 + 64), (uint64_t)(*(void *)(v89 + 96 * v90 + 64) - *(void *)(v89 + 96 * v90 + 56)) >> 4);
              uint64_t v105 = *v93;
              *(void *)((char *)&v200[1] + 13) = *(void *)(v91 + 85);
              *((void *)&v200[1] + 1) = v105;
              (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v93 + 24))(*v93, 1, v91);
              (*(void (**)(void, void, unsigned char *))(**((void **)&v200[1] + 1) + 24))(*((void *)&v200[1] + 1), 0, v199);
              sub_2572D4C98(v196, (uint64_t)v199);
              if (*(void *)&v200[0])
              {
                *((void *)&v200[0] + 1) = *(void *)&v200[0];
                operator delete(*(void **)&v200[0]);
              }
              if (*(void *)&v199[32])
              {
                *(void *)&v199[40] = *(void *)&v199[32];
                operator delete(*(void **)&v199[32]);
              }
              goto LABEL_191;
            default:
              sub_2572CC358();
          }
          goto LABEL_202;
        }
      }
LABEL_194:
      sub_2572D5418((uint64_t)v196);
    }
LABEL_220:
    unint64_t v145 = 0;
    unint64_t v147 = 0;
    int v158 = 1;
    unint64_t v139 = v184;
    goto LABEL_221;
  }
  if ((sub_2572CB9CC(a2, v7, v8, (uint64_t *)&v184, 4160, 1) & 1) == 0) {
    goto LABEL_220;
  }
LABEL_202:
  unint64_t v139 = v184;
  uint64_t v140 = v184 + 8;
  if (v185 == v184) {
    uint64_t v140 = (char *)&v187 + 8;
  }
  uint64_t v141 = v189;
  BOOL v193 = *(void *)v140 != *((void *)&v192 + 1);
  int64_t v142 = v185 - v184;
  if (v185 == v184)
  {
    int v158 = 0;
    unint64_t v145 = 0;
    unint64_t v147 = 0;
  }
  else
  {
    unint64_t v143 = v142 / 24;
    if ((unint64_t)(v142 / 24) > 0xAAAAAAAAAAAAAAALL) {
      sub_2570AFD0C();
    }
    unint64_t v144 = (char *)operator new(v142);
    unint64_t v145 = v144;
    uint64_t v146 = 0;
    unint64_t v147 = &v144[24 * v143];
    do
    {
      char v148 = &v144[v146];
      *(void *)char v148 = 0;
      *((void *)v148 + 1) = 0;
      v148[16] = 0;
      v146 += 24;
    }
    while (24 * v143 != v146);
    uint64_t v149 = 0;
    unint64_t v150 = 0;
    if (v143 <= 1) {
      uint64_t v151 = 1;
    }
    else {
      uint64_t v151 = v143;
    }
    do
    {
      uint64_t v152 = &v139[v149];
      if (v143 <= v150) {
        unint64_t v153 = &v187;
      }
      else {
        unint64_t v153 = (long long *)&v139[v149];
      }
      uint64_t v154 = *(void *)v153;
      unint64_t v155 = v152 + 8;
      if (v143 <= v150) {
        unint64_t v155 = (void *)&v187 + 1;
      }
      uint64_t v156 = (BOOL *)(v152 + 16);
      if (v143 <= v150) {
        uint64_t v156 = &v188;
      }
      unint64_t v157 = &v144[v149];
      *(void *)unint64_t v157 = v7 + v154 - v141;
      *((void *)v157 + 1) = v7 + *v155 - v141;
      v157[16] = *v156;
      ++v150;
      v149 += 24;
    }
    while (v151 != v150);
    int v158 = 0;
  }
LABEL_221:
  BOOL v159 = v193;
  if (v139) {
    operator delete(v139);
  }
  if (v159) {
    int v160 = v158;
  }
  else {
    int v160 = 1;
  }
  if (v160) {
    char v161 = v147;
  }
  else {
    char v161 = v145;
  }
  if (v161 - v145 != 48)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      sub_2572C6EFC(a1, *(void **)v3, *(void *)(v3 + 8));
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)v3;
      *((void *)a1 + 2) = *(void *)(v3 + 16);
    }
    goto LABEL_244;
  }
  if (v145[40])
  {
    unsigned int v162 = (char *)*((void *)v145 + 3);
    unint64_t v163 = (char *)*((void *)v145 + 4);
    unint64_t v164 = v163 - v162;
    if ((unint64_t)(v163 - v162) >= 0x7FFFFFFFFFFFFFF8) {
      sub_2570AFBB8();
    }
    if (v164 > 0x16)
    {
      uint64_t v165 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v164 | 7) != 0x17) {
        uint64_t v165 = v164 | 7;
      }
      uint64_t v166 = v165 + 1;
      unint64_t v167 = operator new(v165 + 1);
      *((void *)a1 + 1) = v164;
      *((void *)a1 + 2) = v166 | 0x8000000000000000;
      *(void *)a1 = v167;
      a1 = v167;
    }
    else
    {
      a1[23] = v164;
    }
    while (v162 != v163)
    {
      char v168 = *v162++;
      *a1++ = v168;
    }
    *a1 = 0;
LABEL_244:
    if (!v145) {
      return;
    }
    goto LABEL_245;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
LABEL_245:
  operator delete(v145);
}

void sub_2572D4ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  operator delete(v39);
  __pa = *(void **)(v40 - 224);
  if (__pa) {
    operator delete(__pa);
  }
  sub_2572D5418((uint64_t)&a39);
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

__n128 sub_2572D4C98(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  BOOL v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 42 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x2A)
    {
      long long v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v6 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        uint64_t v87 = a1 + 3;
        unint64_t v83 = (char *)sub_2572C7528(v25);
        unint64_t v84 = &v83[8 * v6];
        unint64_t v85 = v84;
        uint64_t v86 = &v83[8 * v26];
        uint64_t v82 = operator new(0xFC0uLL);
        sub_2572D51EC(&v83, &v82);
        char v28 = v83;
        unint64_t v27 = v84;
        unint64_t v29 = v85;
        unint64_t v30 = v86;
        uint64_t v31 = a1[2];
        if (v31 == a1[1])
        {
          uint64_t v47 = v84;
        }
        else
        {
          do
          {
            if (v27 == v28)
            {
              if (v29 >= v30)
              {
                if (v30 == v27) {
                  unint64_t v37 = 1;
                }
                else {
                  unint64_t v37 = (v30 - v27) >> 2;
                }
                __n128 v38 = (char *)sub_2572C7528(v37);
                char v28 = v38;
                uint64_t v32 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
                uint64_t v41 = v29 - v27;
                BOOL v40 = v29 == v27;
                unint64_t v29 = v32;
                if (!v40)
                {
                  unint64_t v29 = &v32[v41 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v42 = 8 * (v41 >> 3);
                  unint64_t v43 = v32;
                  BOOL v44 = v27;
                  do
                  {
                    uint64_t v45 = *(void *)v44;
                    v44 += 8;
                    *(void *)unint64_t v43 = v45;
                    v43 += 8;
                    v42 -= 8;
                  }
                  while (v42);
                }
                unint64_t v30 = &v38[8 * v39];
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                uint64_t v33 = (v30 - v29) >> 3;
                if (v33 >= -1) {
                  uint64_t v34 = v33 + 1;
                }
                else {
                  uint64_t v34 = v33 + 2;
                }
                uint64_t v35 = v34 >> 1;
                uint64_t v32 = &v27[8 * (v34 >> 1)];
                __n128 v36 = v27;
                if (v29 != v27)
                {
                  memmove(v32, v27, v29 - v27);
                  __n128 v36 = v29;
                }
                unint64_t v29 = &v36[8 * v35];
                char v28 = v27;
              }
            }
            else
            {
              uint64_t v32 = v27;
            }
            uint64_t v46 = *(void *)(v31 - 8);
            v31 -= 8;
            *((void *)v32 - 1) = v46;
            uint64_t v47 = v32 - 8;
            unint64_t v27 = v47;
          }
          while (v31 != a1[1]);
        }
        int64_t v62 = (char *)*a1;
        *a1 = v28;
        a1[1] = v47;
        a1[2] = v29;
        a1[3] = v30;
        if (v62) {
          operator delete(v62);
        }
        goto LABEL_54;
      }
      if (v23 != v5)
      {
        unint64_t v83 = (char *)operator new(0xFC0uLL);
        sub_2572D51EC(a1, &v83);
LABEL_54:
        uint64_t v4 = (char *)a1[1];
        unint64_t v9 = a1[5] + a1[4];
        goto LABEL_55;
      }
      unint64_t v83 = (char *)operator new(0xFC0uLL);
      sub_2572D5300((uint64_t)a1, &v83);
      uint64_t v59 = (void *)a1[1];
      BOOL v5 = (char *)a1[2];
      uint64_t v61 = *v59;
      uint64_t v60 = (char *)(v59 + 1);
      uint64_t v11 = v61;
      a1[1] = v60;
      if (v5 == (char *)a1[3])
      {
        uint64_t v67 = (uint64_t)&v60[-*a1];
        if ((unint64_t)v60 > *a1)
        {
          uint64_t v68 = v67 >> 3;
          BOOL v15 = v67 >> 3 < -1;
          uint64_t v69 = (v67 >> 3) + 2;
          if (v15) {
            uint64_t v70 = v69;
          }
          else {
            uint64_t v70 = v68 + 1;
          }
          uint64_t v71 = -(v70 >> 1);
          uint64_t v72 = v70 >> 1;
          uint64_t v73 = &v60[-8 * v72];
          int64_t v74 = v5 - v60;
          if (v5 != v60)
          {
            memmove(&v60[-8 * v72], v60, v5 - v60);
            uint64_t v60 = (char *)a1[1];
          }
          BOOL v5 = &v73[v74];
          uint64_t v22 = &v60[8 * v71];
          goto LABEL_14;
        }
        if (v5 == (char *)*a1) {
          unint64_t v75 = 1;
        }
        else {
          unint64_t v75 = (uint64_t)&v5[-*a1] >> 2;
        }
        BOOL v49 = (char *)sub_2572C7528(v75);
        uint64_t v50 = &v49[8 * (v75 >> 2)];
        __n128 v52 = &v49[8 * v76];
        uint64_t v77 = (uint64_t *)a1[1];
        BOOL v5 = v50;
        uint64_t v78 = a1[2] - (void)v77;
        if (v78)
        {
          BOOL v5 = &v50[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          unsigned int v80 = &v49[8 * (v75 >> 2)];
          do
          {
            uint64_t v81 = *v77++;
            *(void *)unsigned int v80 = v81;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
LABEL_47:
        uint64_t v58 = (char *)*a1;
        *a1 = v49;
        a1[1] = v50;
        a1[2] = v5;
        a1[3] = v52;
        if (v58)
        {
          operator delete(v58);
          BOOL v5 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 42;
      uint64_t v12 = *(void *)v4;
      uint64_t v10 = v4 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          __n128 v20 = &v10[-8 * v19];
          int64_t v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            BOOL v5 = (char *)a1[1];
          }
          uint64_t v22 = &v5[8 * v18];
          BOOL v5 = &v20[v21];
LABEL_14:
          a1[1] = v22;
          a1[2] = v5;
          goto LABEL_50;
        }
        if (v5 == (char *)*a1) {
          unint64_t v48 = 1;
        }
        else {
          unint64_t v48 = (uint64_t)&v5[-*a1] >> 2;
        }
        BOOL v49 = (char *)sub_2572C7528(v48);
        uint64_t v50 = &v49[8 * (v48 >> 2)];
        __n128 v52 = &v49[8 * v51];
        long long v53 = (uint64_t *)a1[1];
        BOOL v5 = v50;
        uint64_t v54 = a1[2] - (void)v53;
        if (v54)
        {
          BOOL v5 = &v50[v54 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = 8 * (v54 >> 3);
          long long v56 = &v49[8 * (v48 >> 2)];
          do
          {
            uint64_t v57 = *v53++;
            *(void *)long long v56 = v57;
            v56 += 8;
            v55 -= 8;
          }
          while (v55);
        }
        goto LABEL_47;
      }
    }
LABEL_50:
    *(void *)BOOL v5 = v11;
    a1[2] += 8;
    goto LABEL_54;
  }
LABEL_55:
  unint64_t v63 = *(void *)&v4[8 * (v9 / 0x2A)] + 96 * (v9 % 0x2A);
  long long v64 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v63 = *(_OWORD *)a2;
  *(_OWORD *)(v63 + 16) = v64;
  *(void *)(v63 + 40) = 0;
  *(void *)(v63 + 48) = 0;
  *(void *)(v63 + 32) = 0;
  *(_OWORD *)(v63 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v63 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v63 + 56) = 0;
  *(void *)(v63 + 64) = 0;
  *(void *)(v63 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v63 + 56) = result;
  *(void *)(v63 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v66 = *(void *)(a2 + 80);
  *(void *)(v63 + 85) = *(void *)(a2 + 85);
  *(void *)(v63 + 80) = v66;
  ++a1[5];
  return result;
}

void sub_2572D510C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(v10);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2572D513C(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  sub_2572CC578((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A)) + 96 * (v2 % 0x2A)));
  uint64_t v3 = a1[2];
  BOOL v4 = v3 == a1[1];
  uint64_t v5 = 42 * ((v3 - a1[1]) >> 3) - 1;
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  a1[5] = v6 - 1;
  if (v4) {
    uint64_t v5 = 0;
  }
  if ((unint64_t)(v5 - (v6 + v7) - 83) <= 0xFFFFFFFFFFFFFFABLL)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

void sub_2572D51EC(void *a1, void *a2)
{
  BOOL v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_2572C7528(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      __n128 v20 = (uint64_t *)a1[1];
      BOOL v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        BOOL v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        long long v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)long long v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        BOOL v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        BOOL v4 = (char *)a1[1];
      }
      BOOL v15 = &v4[8 * v11];
      BOOL v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)BOOL v4 = *a2;
  a1[2] += 8;
}

void sub_2572D5300(uint64_t a1, void *a2)
{
  BOOL v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_2572C7528(v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      BOOL v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        BOOL v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_2572D5418(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        sub_2572CC578(v6);
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          uint64_t v8 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *(void *)(a1 + 40) = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v10 = v9 >> 3;
  if (v10 == 1)
  {
    uint64_t v11 = 21;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    uint64_t v11 = 42;
LABEL_14:
    *(void *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13 != v14) {
      *(void *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_2572D5580(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  sub_2572D31A4(a1, a2, a3, a5);
  sub_2572D3810(v24, **a5, a4);
  sub_2572D3810(__p, **a5, a3);
  BOOL v10 = sub_2570B095C(v24, __p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (!v10) {
      return result;
    }
  }
  else if (!v10)
  {
    return result;
  }
  uint64_t v12 = *(void *)(a3 + 16);
  long long v13 = *(_OWORD *)a3;
  uint64_t v14 = *(void *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v14;
  *(_OWORD *)a4 = v13;
  *(void *)(a4 + 16) = v12;
  sub_2572D3810(v24, **a5, a3);
  sub_2572D3810(__p, **a5, a2);
  BOOL v15 = sub_2570B095C(v24, __p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (!v15) {
      return result;
    }
  }
  else if (!v15)
  {
    return result;
  }
  uint64_t v16 = *(void *)(a2 + 16);
  __n128 v17 = *(__n128 *)a2;
  uint64_t v18 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v18;
  *(__n128 *)a3 = v17;
  *(void *)(a3 + 16) = v16;
  sub_2572D3810(v24, **a5, a2);
  sub_2572D3810(__p, **a5, (uint64_t)a1);
  BOOL v19 = sub_2570B095C(v24, __p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v19)
  {
    unint64_t v20 = a1[1].n128_u64[0];
    __n128 result = *a1;
    unint64_t v21 = *(void *)(a2 + 16);
    *a1 = *(__n128 *)a2;
    a1[1].n128_u64[0] = v21;
    *(__n128 *)a2 = result;
    *(void *)(a2 + 16) = v20;
  }
  return result;
}

void sub_2572D5754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CMMsl::Manager::Manager(uint64_t a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 850045863;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_2706496F8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  operator new();
}

void sub_2572D5A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  sub_2570B20E4((uint64_t)va1);
  MEMORY[0x25A2B2850](v5, 0x1032C4044EE41C5);
  sub_2570B20E4((uint64_t)va);
  std::mutex::~mutex(v4);
  sub_2570B2948(v2, 0);
  sub_2572D6088(v3, 0);
  _Unwind_Resume(a1);
}

void CMMsl::Manager::~Manager(CMMsl::Manager *this)
{
  *(void *)this = &unk_2706496F8;
  if (qword_269FE5248 != -1) {
    dispatch_once(&qword_269FE5248, &unk_270649718);
  }
  unint64_t v2 = qword_269FE5240;
  if (os_log_type_enabled((os_log_t)qword_269FE5240, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_2570AE000, v2, OS_LOG_TYPE_DEFAULT, "[MSLManager] Ending.", v5, 2u);
  }
  std::mutex::lock((std::mutex *)((char *)this + 24));
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    unint64_t v4 = *(CMMsl::Writer **)(v3 + 128);
    if (v4) {
      CMMsl::Writer::sync(v4);
    }
  }
  std::mutex::unlock((std::mutex *)((char *)this + 24));
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  sub_2570B2948((uint64_t *)this + 2, 0);
  sub_2572D6088((id **)this + 1, 0);
}

{
  uint64_t vars8;

  CMMsl::Manager::~Manager(this);
  JUMPOUT(0x25A2B2850);
}

void CMMsl::Manager::log(CMMsl::Manager *this, const CMMsl::Item *a2)
{
  if (qword_269FE5248 != -1) {
    dispatch_once(&qword_269FE5248, &unk_270649718);
  }
  unint64_t v4 = qword_269FE5240;
  if (os_log_type_enabled((os_log_t)qword_269FE5240, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_log_debug_impl(&dword_2570AE000, v4, OS_LOG_TYPE_DEBUG, "[MSLManager] Logging Msl item.", v14, 2u);
  }
  if (*((void *)this + 2))
  {
    if (sub_2570B2998(*((void *)this + 1)))
    {
      uint64_t v5 = (std::mutex *)((char *)this + 24);
      std::mutex::lock((std::mutex *)((char *)this + 24));
      uint64_t v6 = *((void *)this + 2);
      uint64_t v7 = mach_continuous_time();
      double v8 = sub_2570B0EBC(v7);
      sub_2572C8634(v6, (uint64_t)a2, v8, v9);
      std::mutex::unlock(v5);
    }
    else
    {
      if (qword_269FE5248 != -1) {
        dispatch_once(&qword_269FE5248, &unk_270649718);
      }
      uint64_t v11 = qword_269FE5240;
      if (os_log_type_enabled((os_log_t)qword_269FE5240, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v12 = 0;
        _os_log_debug_impl(&dword_2570AE000, v11, OS_LOG_TYPE_DEBUG, "[MSLManager] Logging is not enabled.", v12, 2u);
      }
    }
  }
  else
  {
    if (qword_269FE5248 != -1) {
      dispatch_once(&qword_269FE5248, &unk_270649718);
    }
    uint64_t v10 = qword_269FE5240;
    if (os_log_type_enabled((os_log_t)qword_269FE5240, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2570AE000, v10, OS_LOG_TYPE_DEFAULT, "[MSLManager] Logging Msl item failed due to an invalid logger pointer.", buf, 2u);
    }
  }
}

void sub_2572D5E0C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Manager::isLoggingEnabled(CMMsl::Manager *this)
{
  return sub_2570B2998(*((void *)this + 1));
}

void CMMsl::Manager::sync(CMMsl::Manager *this)
{
  unint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  uint64_t v3 = *(CMMsl::Writer **)(*((void *)this + 2) + 128);
  if (v3) {
    CMMsl::Writer::sync(v3);
  }
  std::mutex::unlock(v2);
}

void CMMsl::Manager::open()
{
}

void *CMMsl::createConfig@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, char *a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (qword_269FE5248 != -1) {
    dispatch_once(&qword_269FE5248, &unk_270649718);
  }
  uint64_t v18 = qword_269FE5240;
  if (os_log_type_enabled((os_log_t)qword_269FE5240, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 136316930;
    unint64_t v21 = a1;
    __int16 v22 = 2080;
    char v23 = a2;
    __int16 v24 = 2080;
    char v25 = a6;
    __int16 v26 = 1024;
    int v27 = a7;
    __int16 v28 = 2048;
    uint64_t v29 = a3;
    __int16 v30 = 1024;
    int v31 = a4;
    __int16 v32 = 1024;
    int v33 = a5;
    __int16 v34 = 2048;
    uint64_t v35 = a8;
    _os_log_impl(&dword_2570AE000, v18, OS_LOG_TYPE_DEFAULT, "[CMMsl] Creating config with, file prefix, %s, file path, %s, file extension, %s, protection class, %d, file size, %lld, file time interval, %u, files to keep, %u, flush timeout, %lld", (uint8_t *)&v20, 0x46u);
  }
  *(void *)a9 = a3;
  *(_DWORD *)(a9 + 8) = a4;
  *(_DWORD *)(a9 + 12) = a5;
  sub_2570AFB04((void *)(a9 + 16), a2);
  sub_2570AFB04((void *)(a9 + 40), a1);
  __n128 result = sub_2570AFB04((void *)(a9 + 64), a6);
  *(_DWORD *)(a9 + 88) = a7;
  *(void *)(a9 + 96) = a8;
  return result;
}

void sub_2572D6008(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2572D6044()
{
  qword_269FE5240 = (uint64_t)os_log_create("com.apple.MotionSensorLogging", "MSL");
  return MEMORY[0x270F9A758]();
}

id *sub_2572D6088(id **a1, id *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2570B270C(result);
    JUMPOUT(0x25A2B2850);
  }
  return result;
}

uint64_t PBHashBytes()
{
  return MEMORY[0x270F585C8]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t PB::TextFormatter::beginObject(PB::TextFormatter *this, const char *a2)
{
  return MEMORY[0x270F587A0](this, a2);
}

uint64_t PB::TextFormatter::format()
{
  return MEMORY[0x270F587A8]();
}

{
  return MEMORY[0x270F587B0]();
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2)
{
  return MEMORY[0x270F587B8](this, a2);
}

{
  return MEMORY[0x270F587D0](this, a2);
}

{
  return MEMORY[0x270F587D8](this, a2);
}

{
  return MEMORY[0x270F587E0](this, a2);
}

{
  return MEMORY[0x270F587E8](this, a2);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, double a3)
{
  return MEMORY[0x270F587C0](this, a2, a3);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, float a3)
{
  return MEMORY[0x270F587C8](this, a2, a3);
}

void PB::Base::~Base(PB::Base *this)
{
}

uint64_t PB::Data::Data()
{
  return MEMORY[0x270F58808]();
}

uint64_t PB::Reader::recallMark()
{
  return MEMORY[0x270F58810]();
}

uint64_t PB::Reader::read()
{
  return MEMORY[0x270F58818]();
}

{
  return MEMORY[0x270F58820]();
}

uint64_t PB::Reader::skip(PB::Reader *this)
{
  return MEMORY[0x270F58828](this);
}

uint64_t PB::Reader::placeMark()
{
  return MEMORY[0x270F58830]();
}

uint64_t PB::Reader::Reader(PB::Reader *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F58838](this, a2);
}

uint64_t PB::Writer::writeVarInt(PB::Writer *this)
{
  return MEMORY[0x270F58840](this);
}

{
  return MEMORY[0x270F58848](this);
}

{
  return MEMORY[0x270F58850](this);
}

{
  return MEMORY[0x270F58858](this);
}

uint64_t PB::Writer::writeSubmessage(PB::Writer *this, const PB::Base *a2)
{
  return MEMORY[0x270F58860](this, a2);
}

uint64_t PB::Writer::write()
{
  return MEMORY[0x270F58868]();
}

{
  return MEMORY[0x270F58870]();
}

uint64_t PB::Writer::write(PB::Writer *this)
{
  return MEMORY[0x270F58878](this);
}

uint64_t PB::Writer::write(PB::Writer *this, double a2)
{
  return MEMORY[0x270F58880](this, a2);
}

uint64_t PB::Writer::write(PB::Writer *this, float a2)
{
  return MEMORY[0x270F58888](this, a2);
}

uint64_t PB::Writer::writeSInt(PB::Writer *this)
{
  return MEMORY[0x270F58890](this);
}

{
  return MEMORY[0x270F58898](this);
}

uint64_t PB::Writer::Writer(PB::Writer *this)
{
  return MEMORY[0x270F588A0](this);
}

void PB::Writer::~Writer(PB::Writer *this)
{
}

uint64_t PB::Data::operator==()
{
  return MEMORY[0x270F588B0]();
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x270F982D8](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

uint64_t std::time_put<char,std::ostreambuf_iterator<char>>::put()
{
  return MEMORY[0x270F98308]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x270F98440](this, *(void *)&__ecode);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x270F98568](this, __c);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987E0]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x270F98890](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x270F98A00](retstr, __s);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x270F98C28]();
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return MEMORY[0x270F98C30](__t);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x270ED8458]();
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x270F9C698](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x270F9C6A8](strm);
}

int deflateInit_(z_streamp strm, int level, const char *version, int stream_size)
{
  return MEMORY[0x270F9C6B8](strm, *(void *)&level, version, *(void *)&stream_size);
}

int deflateReset(z_streamp strm)
{
  return MEMORY[0x270F9C6C0](strm);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x270ED92D0](buffer, size, queue, destructor);
}

void dispatch_io_barrier(dispatch_io_t channel, dispatch_block_t barrier)
{
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  return (dispatch_io_t)MEMORY[0x270ED9390](type, *(void *)&fd, queue, cleanup_handler);
}

void dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

void free(void *a1)
{
}

int fsync(int a1)
{
  return MEMORY[0x270ED9B10](*(void *)&a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x270ED9D98](a1, a2);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x270F9C730](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x270F9C738](strm);
}

int inflateInit_(z_streamp strm, const char *version, int stream_size)
{
  return MEMORY[0x270F9C748](strm, version, *(void *)&stream_size);
}

int inflateReset(z_streamp strm)
{
  return MEMORY[0x270F9C750](strm);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x270EDA098](a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x270EDA118](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x270EDA158]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x270EDA598](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x270EDA5F8](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_enumerationMutation(id obj)
{
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

void objc_release(id a1)
{
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x270EDA830](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x270EDAD10](*(void *)&__fd, __buf, __nbyte, a4);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x270EDB0A0](*(void *)&__fd, __buf, __nbyte, a4);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}