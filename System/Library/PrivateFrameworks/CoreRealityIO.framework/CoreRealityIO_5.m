void realityio::mtlx::anonymous namespace'::_GetNodeDef(RIO_MTLX *a1, std::string **a2)
{
  std::string *v4;
  uint64_t *v5;
  std::__shared_weak_count *size;
  uint64_t v7;
  long long v8;
  RIO_MTLX *v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  std::string *v15;
  RIO_MTLX *v16;
  uint64_t v17;
  std::string::size_type v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  std::string *v22;
  RIO_MTLX *v23;
  uint64_t v24;
  std::string::size_type v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  std::string *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  std::string::size_type v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  std::string *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  std::string *v40;
  std::__shared_weak_count *v41;
  std::string *v42;
  std::__shared_weak_count *v43;
  std::string v44;

  v4 = *a2;
  v5 = RIO_MTLX::EMPTY_STRING(a1);
  RIO_MTLX::Node::getNodeDef(v4, (uint64_t)v5, 0, (RIO_MTLX::InterfaceElement **)&v44);
  size = (std::__shared_weak_count *)v44.__r_.__value_.__l.__size_;
  if (v44.__r_.__value_.__r.__words[0])
  {
    *(_OWORD *)a1 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
    return;
  }
  v7 = (*(uint64_t (**)(void))((*a2)->__r_.__value_.__r.__words[0] + 56))();
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v44.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v8;
  }
  v9 = (RIO_MTLX *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING((RIO_MTLX *)v7);
  v10 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v11 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    v11 = v44.__r_.__value_.__l.__size_;
  }
  v12 = *((unsigned __int8 *)v9 + 23);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    v12 = *((void *)v9 + 1);
  }
  if (v11 == v12)
  {
    if (v13 >= 0) {
      v14 = (unsigned __int8 *)v9;
    }
    else {
      v14 = *(unsigned __int8 **)v9;
    }
    if ((*((unsigned char *)&v44.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v9 = (RIO_MTLX *)memcmp(v44.__r_.__value_.__l.__data_, v14, v44.__r_.__value_.__l.__size_);
      if (!v9) {
        goto LABEL_76;
      }
    }
    else
    {
      if (!*((unsigned char *)&v44.__r_.__value_.__s + 23)) {
        goto LABEL_76;
      }
      v15 = &v44;
      while (v15->__r_.__value_.__s.__data_[0] == *v14)
      {
        v15 = (std::string *)((char *)v15 + 1);
        ++v14;
        if (!--v10) {
          goto LABEL_76;
        }
      }
    }
  }
  v16 = (RIO_MTLX *)RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(v9);
  v17 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v18 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    v18 = v44.__r_.__value_.__l.__size_;
  }
  v19 = *((unsigned __int8 *)v16 + 23);
  v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    v19 = *((void *)v16 + 1);
  }
  if (v18 == v19)
  {
    if (v20 >= 0) {
      v21 = (unsigned __int8 *)v16;
    }
    else {
      v21 = *(unsigned __int8 **)v16;
    }
    if ((*((unsigned char *)&v44.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v16 = (RIO_MTLX *)memcmp(v44.__r_.__value_.__l.__data_, v21, v44.__r_.__value_.__l.__size_);
      if (!v16) {
        goto LABEL_76;
      }
    }
    else
    {
      if (!*((unsigned char *)&v44.__r_.__value_.__s + 23)) {
        goto LABEL_76;
      }
      v22 = &v44;
      while (v22->__r_.__value_.__s.__data_[0] == *v21)
      {
        v22 = (std::string *)((char *)v22 + 1);
        ++v21;
        if (!--v17) {
          goto LABEL_76;
        }
      }
    }
  }
  v23 = (RIO_MTLX *)RIO_MTLX::VOLUME_SHADER_TYPE_STRING(v16);
  v24 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v25 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    v25 = v44.__r_.__value_.__l.__size_;
  }
  v26 = *((unsigned __int8 *)v23 + 23);
  v27 = (char)v26;
  if ((v26 & 0x80u) != 0) {
    v26 = *((void *)v23 + 1);
  }
  if (v25 == v26)
  {
    if (v27 >= 0) {
      v28 = (unsigned __int8 *)v23;
    }
    else {
      v28 = *(unsigned __int8 **)v23;
    }
    if ((*((unsigned char *)&v44.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v23 = (RIO_MTLX *)memcmp(v44.__r_.__value_.__l.__data_, v28, v44.__r_.__value_.__l.__size_);
      if (!v23) {
        goto LABEL_76;
      }
    }
    else
    {
      if (!*((unsigned char *)&v44.__r_.__value_.__s + 23)) {
        goto LABEL_76;
      }
      v29 = &v44;
      while (v29->__r_.__value_.__s.__data_[0] == *v28)
      {
        v29 = (std::string *)((char *)v29 + 1);
        ++v28;
        if (!--v24) {
          goto LABEL_76;
        }
      }
    }
  }
  v30 = (unsigned __int8 *)RIO_MTLX::LIGHT_SHADER_TYPE_STRING(v23);
  v31 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v32 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    v32 = v44.__r_.__value_.__l.__size_;
  }
  v33 = v30[23];
  v34 = (char)v33;
  if ((v33 & 0x80u) != 0) {
    v33 = *((void *)v30 + 1);
  }
  if (v32 != v33)
  {
LABEL_70:
    v37 = (std::__shared_weak_count *)a2[1];
    v42 = *a2;
    v43 = v37;
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    realityio::mtlx::UsdMtlxGetVersion((RIO_MTLX::InterfaceElement **)&v42, 0);
    RIO_MTLX::InterfaceElement::getTarget((RIO_MTLX::InterfaceElement *)*a2);
    v38 = (std::__shared_weak_count *)a2[1];
    v40 = *a2;
    v41 = v38;
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    goto LABEL_79;
  }
  if (v34 >= 0) {
    v35 = v30;
  }
  else {
    v35 = *(unsigned __int8 **)v30;
  }
  if ((*((unsigned char *)&v44.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (!memcmp(v44.__r_.__value_.__l.__data_, v35, v44.__r_.__value_.__l.__size_)) {
      goto LABEL_76;
    }
    goto LABEL_70;
  }
  if (*((unsigned char *)&v44.__r_.__value_.__s + 23))
  {
    v36 = &v44;
    while (v36->__r_.__value_.__s.__data_[0] == *v35)
    {
      v36 = (std::string *)((char *)v36 + 1);
      ++v35;
      if (!--v31) {
        goto LABEL_76;
      }
    }
    goto LABEL_70;
  }
LABEL_76:
  v39 = (std::__shared_weak_count *)a2[1];
  v42 = *a2;
  v43 = v39;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::mtlx::UsdMtlxGetVersion((RIO_MTLX::InterfaceElement **)&v42, 0);
  RIO_MTLX::InterfaceElement::getTarget((RIO_MTLX::InterfaceElement *)*a2);
  v40 = 0;
  v41 = 0;
LABEL_79:
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
}

void sub_23F76C024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::anonymous namespace'::_NodeGraphBuilder::_AddOutput(uint64_t a1, uint64_t a2, uint64_t a3, std::string **a4, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a5)
{
  uint64_t v120 = *MEMORY[0x263EF8340];
  v10 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(*(void *)a3 + 160), (unsigned __int8 *)&qword_268C41100);
  if (v10)
  {
    v11 = (uint64_t *)((char *)v10 + 40);
  }
  else
  {
    v10 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
    v11 = (uint64_t *)v10;
  }
  uint64_t v12 = *((unsigned __int8 *)v11 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = v11[1];
  }
  if (!v12) {
    v11 = RIO_MTLX::EMPTY_STRING(v10);
  }
  memset(&v106, 0, sizeof(v106));
  RIO_MTLX::Element::getDocument(*(RIO_MTLX::Element **)a3, &v97);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::TypeDef>((uint64_t)v97.__r_.__value_.__l.__data_, (unsigned __int8 *)v11, &v104);
  size = (realityio::mtlx::_anonymous_namespace_ *)v97.__r_.__value_.__l.__size_;
  if (v97.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v97.__r_.__value_.__l.__size_);
  }
  if (v104)
  {
    v15 = (unsigned __int8 *)v97.__r_.__value_.__r.__words[0];
    if (*(char *)(v97.__r_.__value_.__r.__words[0] + 23) < 0)
    {
      if (!*(void *)(v97.__r_.__value_.__r.__words[0] + 8)) {
        goto LABEL_31;
      }
    }
    else if (!*(unsigned char *)(v97.__r_.__value_.__r.__words[0] + 23))
    {
      goto LABEL_31;
    }
    v16 = (realityio::mtlx::_anonymous_namespace_ *)RIO_MTLX::SHADER_SEMANTIC((RIO_MTLX *)v14);
    uint64_t v17 = v15[23];
    if ((v17 & 0x80u) == 0) {
      uint64_t v18 = v15[23];
    }
    else {
      uint64_t v18 = *((void *)v15 + 1);
    }
    uint64_t v19 = *((unsigned __int8 *)v16 + 23);
    int v20 = (char)v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v19 = *((void *)v16 + 1);
    }
    if (v18 == v19)
    {
      if (v20 >= 0) {
        v21 = (unsigned __int8 *)v16;
      }
      else {
        v21 = *(unsigned __int8 **)v16;
      }
      if ((v17 & 0x80) != 0)
      {
        v16 = (realityio::mtlx::_anonymous_namespace_ *)memcmp(*(const void **)v15, v21, *((void *)v15 + 1));
        if (v16) {
          goto LABEL_31;
        }
      }
      else if (v15[23])
      {
        while (*v15 == *v21)
        {
          ++v15;
          ++v21;
          if (!--v17) {
            goto LABEL_30;
          }
        }
        goto LABEL_31;
      }
LABEL_30:
      std::string::operator=(&v106, v109);
    }
  }
LABEL_31:
  std::string::size_type v103 = 0;
  v22 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v102);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
  {
    switch(v106.__r_.__value_.__l.__size_)
    {
      case 5uLL:
        v23 = (std::string *)v106.__r_.__value_.__r.__words[0];
LABEL_36:
        int data = (int)v23->__r_.__value_.__l.__data_;
        int v28 = v23->__r_.__value_.__s.__data_[4];
        BOOL v29 = data == 1751607660;
        int v30 = 116;
        break;
      case 6uLL:
        int v28 = *(unsigned __int16 *)(v106.__r_.__value_.__r.__words[0] + 4);
        BOOL v29 = *(_DWORD *)v106.__r_.__value_.__l.__data_ == 1970040694;
        int v30 = 25965;
        break;
      case 7uLL:
        int v28 = *(_DWORD *)(v106.__r_.__value_.__r.__words[0] + 3);
        BOOL v29 = *(_DWORD *)v106.__r_.__value_.__l.__data_ == 1718777203;
        int v30 = 1701011814;
        break;
      case 0xCuLL:
        int v28 = *(_DWORD *)(v106.__r_.__value_.__r.__words[0] + 8);
        BOOL v29 = *(void *)v106.__r_.__value_.__l.__data_ == 0x6563616C70736964;
        int v30 = 1953391981;
        break;
      default:
        goto LABEL_52;
    }
    if (v29 && v28 == v30) {
      goto LABEL_121;
    }
  }
  else
  {
    v23 = &v106;
    switch(*((unsigned char *)&v106.__r_.__value_.__s + 23))
    {
      case 5:
        goto LABEL_36;
      case 6:
        int v24 = WORD2(v106.__r_.__value_.__r.__words[0]);
        BOOL v25 = LODWORD(v106.__r_.__value_.__l.__data_) == 1970040694;
        int v26 = 25965;
        break;
      case 7:
        int v24 = *(_DWORD *)((char *)v106.__r_.__value_.__r.__words + 3);
        BOOL v25 = LODWORD(v106.__r_.__value_.__l.__data_) == 1718777203;
        int v26 = 1701011814;
        break;
      case 0xC:
        int v24 = v106.__r_.__value_.__r.__words[1];
        BOOL v25 = v106.__r_.__value_.__r.__words[0] == 0x6563616C70736964;
        int v26 = 1953391981;
        break;
      default:
        goto LABEL_52;
    }
    if (v25 && v24 == v26) {
      goto LABEL_121;
    }
  }
LABEL_52:
  v33 = (RIO_MTLX *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING(v22);
  uint64_t v34 = *((unsigned __int8 *)v11 + 23);
  if ((v34 & 0x80u) == 0) {
    uint64_t v35 = *((unsigned __int8 *)v11 + 23);
  }
  else {
    uint64_t v35 = v11[1];
  }
  uint64_t v36 = *((unsigned __int8 *)v33 + 23);
  int v37 = (char)v36;
  if ((v36 & 0x80u) != 0) {
    uint64_t v36 = *((void *)v33 + 1);
  }
  if (v35 == v36)
  {
    if (v37 >= 0) {
      v38 = (unsigned __int8 *)v33;
    }
    else {
      v38 = *(unsigned __int8 **)v33;
    }
    if ((v34 & 0x80) != 0)
    {
      v33 = (RIO_MTLX *)memcmp((const void *)*v11, v38, v11[1]);
      if (!v33) {
        goto LABEL_121;
      }
    }
    else
    {
      if (!*((unsigned char *)v11 + 23)) {
        goto LABEL_121;
      }
      v39 = v11;
      while (*(unsigned __int8 *)v39 == *v38)
      {
        v39 = (uint64_t *)((char *)v39 + 1);
        ++v38;
        if (!--v34) {
          goto LABEL_121;
        }
      }
    }
  }
  v40 = (RIO_MTLX *)RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(v33);
  uint64_t v41 = *((unsigned __int8 *)v11 + 23);
  if ((v41 & 0x80u) == 0) {
    uint64_t v42 = *((unsigned __int8 *)v11 + 23);
  }
  else {
    uint64_t v42 = v11[1];
  }
  uint64_t v43 = *((unsigned __int8 *)v40 + 23);
  int v44 = (char)v43;
  if ((v43 & 0x80u) != 0) {
    uint64_t v43 = *((void *)v40 + 1);
  }
  if (v42 == v43)
  {
    if (v44 >= 0) {
      v45 = (unsigned __int8 *)v40;
    }
    else {
      v45 = *(unsigned __int8 **)v40;
    }
    if ((v41 & 0x80) != 0)
    {
      v40 = (RIO_MTLX *)memcmp((const void *)*v11, v45, v11[1]);
      if (!v40) {
        goto LABEL_121;
      }
    }
    else
    {
      if (!*((unsigned char *)v11 + 23)) {
        goto LABEL_121;
      }
      v46 = v11;
      while (*(unsigned __int8 *)v46 == *v45)
      {
        v46 = (uint64_t *)((char *)v46 + 1);
        ++v45;
        if (!--v41) {
          goto LABEL_121;
        }
      }
    }
  }
  v47 = (RIO_MTLX *)RIO_MTLX::VOLUME_SHADER_TYPE_STRING(v40);
  uint64_t v48 = *((unsigned __int8 *)v11 + 23);
  if ((v48 & 0x80u) == 0) {
    uint64_t v49 = *((unsigned __int8 *)v11 + 23);
  }
  else {
    uint64_t v49 = v11[1];
  }
  uint64_t v50 = *((unsigned __int8 *)v47 + 23);
  int v51 = (char)v50;
  if ((v50 & 0x80u) != 0) {
    uint64_t v50 = *((void *)v47 + 1);
  }
  if (v49 == v50)
  {
    if (v51 >= 0) {
      v52 = (unsigned __int8 *)v47;
    }
    else {
      v52 = *(unsigned __int8 **)v47;
    }
    if ((v48 & 0x80) != 0)
    {
      v47 = (RIO_MTLX *)memcmp((const void *)*v11, v52, v11[1]);
      if (!v47) {
        goto LABEL_121;
      }
    }
    else
    {
      if (!*((unsigned char *)v11 + 23)) {
        goto LABEL_121;
      }
      v53 = v11;
      while (*(unsigned __int8 *)v53 == *v52)
      {
        v53 = (uint64_t *)((char *)v53 + 1);
        ++v52;
        if (!--v48) {
          goto LABEL_121;
        }
      }
    }
  }
  v54 = (unsigned __int8 *)RIO_MTLX::LIGHT_SHADER_TYPE_STRING(v47);
  uint64_t v55 = *((unsigned __int8 *)v11 + 23);
  if ((v55 & 0x80u) == 0) {
    uint64_t v56 = *((unsigned __int8 *)v11 + 23);
  }
  else {
    uint64_t v56 = v11[1];
  }
  uint64_t v57 = v54[23];
  int v58 = (char)v57;
  if ((v57 & 0x80u) != 0) {
    uint64_t v57 = *((void *)v54 + 1);
  }
  if (v56 != v57) {
    goto LABEL_116;
  }
  if (v58 >= 0) {
    v59 = v54;
  }
  else {
    v59 = *(unsigned __int8 **)v54;
  }
  if ((v55 & 0x80) != 0)
  {
    if (memcmp((const void *)*v11, v59, v11[1])) {
      goto LABEL_116;
    }
LABEL_121:
    v62 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
    if (!v62) {
LABEL_122:
    }
      v62 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
LABEL_123:
    std::string::size_type v102 = *((void *)v62 + 11);
    goto LABEL_124;
  }
  if (!*((unsigned char *)v11 + 23)) {
    goto LABEL_121;
  }
  v60 = v11;
  while (*(unsigned __int8 *)v60 == *v59)
  {
    v60 = (uint64_t *)((char *)v60 + 1);
    ++v59;
    if (!--v55) {
      goto LABEL_121;
    }
  }
LABEL_116:
  std::string::size_type v61 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v61 = v106.__r_.__value_.__l.__size_;
  }
  if (v61)
  {
    v62 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
    if (!v62) {
      goto LABEL_122;
    }
    goto LABEL_123;
  }
  realityio::mtlx::UsdMtlxGetUsdType((unsigned __int8 *)v11, (uint64_t)&v97);
  std::string::size_type v102 = v97.__r_.__value_.__r.__words[0];
  if ((v97.__r_.__value_.__s.__data_[8] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v97.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v102))
  {
    v93 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
    if (!v93) {
      v93 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    std::string::size_type v102 = *((void *)v93 + 11);
    MEMORY[0x2455CF830](&v97, v11);
    if ((v103 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v103 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::string::size_type v103 = v97.__r_.__value_.__r.__words[0];
  }
LABEL_124:
  v63 = *(RIO_MTLX::Element **)a3;
  v64 = *(std::__shared_weak_count **)(a3 + 8);
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v63)
  {
    if (!v64) {
      goto LABEL_129;
    }
    goto LABEL_128;
  }
  uint64_t v101 = 0;
  if (v64) {
LABEL_128:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
LABEL_129:
  v65 = *a4;
  if (SHIBYTE((*a4)[2].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v100, v65[2].__r_.__value_.__l.__data_, v65[2].__r_.__value_.__l.__size_);
  }
  else {
    std::string v100 = v65[2];
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput(a5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v101, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v102);
  int v115 = *(_DWORD *)a1;
  uint64_t v66 = *(void *)(a1 + 8);
  uint64_t v116 = v66;
  if (v66) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v66 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v117, (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v118, (_DWORD *)(a1 + 20));
  uint64_t v67 = *(void *)(a1 + 24);
  uint64_t v119 = v67;
  if ((v67 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v119 &= 0xFFFFFFFFFFFFFFF8;
  }
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v109 = (const std::string *)&v94;
  LOBYTE(v110) = 0;
  v94 = (char *)operator new(0x20uLL);
  v95 = v94;
  v68 = v94 + 32;
  v96 = v94 + 32;
  std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>((uint64_t)v94, (uint64_t)&v115);
  v95 = v68;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v97, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
    v68 = v95;
  }
  else
  {
    std::string v97 = v100;
  }
  long long v98 = 0uLL;
  uint64_t v99 = 0;
  v69 = v94;
  v107 = &v98;
  char v108 = 0;
  uint64_t v70 = v68 - v94;
  if (v68 != v94)
  {
    if (v70 < 0) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    *(void *)&long long v98 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)&v99, v70 >> 5);
    *((void *)&v98 + 1) = v98;
    uint64_t v99 = v98 + 32 * v71;
    uint64_t v113 = v98;
    uint64_t v114 = v98;
    v109 = (const std::string *)&v99;
    v110 = &v113;
    v111 = &v114;
    uint64_t v72 = v98;
    char v112 = 0;
    do
    {
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)&v99, v72, (uint64_t)v69);
      v69 += 32;
      uint64_t v73 = v114;
      uint64_t v72 = v114 + 32;
      v114 += 32;
    }
    while (v69 != v68);
    *((void *)&v98 + 1) = v73 + 32;
  }
  v75 = (void **)(a2 + 112);
  v74 = *(char **)(a2 + 112);
  if (v74)
  {
    while (1)
    {
      while (1)
      {
        v76 = (void **)v74;
        v77 = (const void **)(v74 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](a2 + 120, (const void **)&v97.__r_.__value_.__l.__data_, (const void **)v74 + 4))break; {
        v74 = (char *)*v76;
        }
        v75 = v76;
        if (!*v76) {
          goto LABEL_155;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](a2 + 120, v77, (const void **)&v97.__r_.__value_.__l.__data_))break; {
      v75 = v76 + 1;
      }
      v74 = (char *)v76[1];
      if (!v74) {
        goto LABEL_155;
      }
    }
    v78 = (char *)*v75;
    if (*v75)
    {
      int v81 = 1;
      goto LABEL_158;
    }
  }
  else
  {
    v76 = (void **)(a2 + 112);
  }
LABEL_155:
  v78 = (char *)operator new(0x50uLL);
  *(std::string *)(v78 + 32) = v97;
  memset(&v97, 0, sizeof(v97));
  *(_OWORD *)(v78 + 56) = v98;
  *((void *)v78 + 9) = v99;
  uint64_t v99 = 0;
  long long v98 = 0uLL;
  *(void *)v78 = 0;
  *((void *)v78 + 1) = 0;
  *((void *)v78 + 2) = v76;
  *v75 = v78;
  uint64_t v79 = **(void **)(a2 + 104);
  v80 = (uint64_t *)v78;
  if (v79)
  {
    *(void *)(a2 + 104) = v79;
    v80 = (uint64_t *)*v75;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 112), v80);
  int v81 = 0;
  ++*(void *)(a2 + 120);
LABEL_158:
  v109 = (const std::string *)&v98;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  v109 = (const std::string *)&v94;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  if ((v119 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v117);
  if (v116) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v116);
  }
  if (v81)
  {
    unint64_t v82 = *((void *)v78 + 9);
    unint64_t v83 = *((void *)v78 + 8);
    if (v83 >= v82)
    {
      uint64_t v85 = *((void *)v78 + 7);
      uint64_t v86 = (uint64_t)(v83 - v85) >> 5;
      if ((unint64_t)(v86 + 1) >> 59) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v87 = v82 - v85;
      uint64_t v88 = v87 >> 4;
      if (v87 >> 4 <= (unint64_t)(v86 + 1)) {
        uint64_t v88 = v86 + 1;
      }
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v89 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v89 = v88;
      }
      *((void *)&v98 + 1) = v78 + 72;
      if (v89) {
        v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)(v78 + 72), v89);
      }
      else {
        v90 = 0;
      }
      std::string::size_type v91 = (std::string::size_type)&v90[32 * v86];
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
      v97.__r_.__value_.__l.__size_ = v91;
      *(void *)&long long v98 = &v90[32 * v89];
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>(v91, a1);
      v97.__r_.__value_.__r.__words[2] = v91 + 32;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__swap_out_circular_buffer((uint64_t *)v78 + 7, &v97);
      unint64_t v84 = *((void *)v78 + 8);
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::~__split_buffer((void **)&v97.__r_.__value_.__l.__data_);
    }
    else
    {
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>(*((void *)v78 + 8), a1);
      unint64_t v84 = v83 + 32;
      *((void *)v78 + 8) = v83 + 32;
    }
    *((void *)v78 + 8) = v84;
  }
  if (v103) {
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v103);
  }
  v92 = *(std::__shared_weak_count **)(a3 + 8);
  v97.__r_.__value_.__r.__words[0] = *(void *)a3;
  v97.__r_.__value_.__l.__size_ = (std::string::size_type)v92;
  if (v92) {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v92) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v92);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if ((v101 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v103 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v103 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v105) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v105);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
}

void sub_23F76CB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if ((a31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  if (a39 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::anonymous namespace'::_FindMatchingNodeDef(uint64_t a1, uint64_t a2, RIO_MTLX::InterfaceElement **a3)
{
  RIO_MTLX::Element::getDocument(*(RIO_MTLX::Element **)a2, &__p);
  v6 = (unsigned __int8 *)(*(void *)a2 + 24);
  v7 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)a2 + 56))();
  v8 = *(std::__shared_weak_count **)(a2 + 8);
  int v28 = *(RIO_MTLX::InterfaceElement **)a2;
  BOOL v29 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t Version = realityio::mtlx::UsdMtlxGetVersion(&v28, 0);
  int v31 = v9;
  Target = RIO_MTLX::InterfaceElement::getTarget(*(RIO_MTLX::InterfaceElement **)a2);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  v11 = (RIO_MTLX::InterfaceElement *)v26;
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v32)
  {
    uint64_t v12 = v33;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = v12;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_58, memory_order_acquire) & 1) == 0)
    {
      v11 = (RIO_MTLX::InterfaceElement *)__cxa_guard_acquire(&_MergedGlobals_58);
      if (v11)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        realityio::mtlx::UsdMtlxGetDocument((uint64_t)&__p, &qword_268C40E20);
        if (v27 < 0) {
          operator delete(__p);
        }
        __cxa_guard_release(&_MergedGlobals_58);
      }
    }
    v13 = *(RIO_MTLX::Element **)a2;
    v14 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(v11);
    if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v13 + 20, v14))goto LABEL_17; {
    uint64_t v15 = qword_268C40E20;
    }
    NodeDefString = RIO_MTLX::InterfaceElement::getNodeDefString(*(RIO_MTLX::InterfaceElement **)a2);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>(v15, (unsigned __int8 *)NodeDefString, &__p);
    uint64_t v18 = __p;
    uint64_t v17 = v26;
    __p = 0;
    int v26 = 0;
    uint64_t v19 = v33;
    v33 = v17;
    if (v19)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
    if (v18)
    {
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v17;
    }
    else
    {
LABEL_17:
      int v20 = (unsigned __int8 *)(*(void *)a2 + 24);
      v21 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)a2 + 56))();
      v22 = *(std::__shared_weak_count **)(a2 + 8);
      __p = *(void **)a2;
      int v26 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v28 = (RIO_MTLX::InterfaceElement *)realityio::mtlx::UsdMtlxGetVersion((RIO_MTLX::InterfaceElement **)&__p, 0);
      LODWORD(v29) = v23;
      int v24 = RIO_MTLX::InterfaceElement::getTarget(*(RIO_MTLX::InterfaceElement **)a2);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
    }
  }
}

void sub_23F76CF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_58);
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(a1);
}

void realityio::mtlx::anonymous namespace'::_FindMatchingNodeDef(RIO_MTLX::InterfaceElement **a1, uint64_t a2, RIO_MTLX::InterfaceElement **a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  a1[1] = 0;
  RIO_MTLX::Document::getMatchingNodeDefs(a2, a4, (uint64_t *)&v39);
  v13 = v39;
  uint64_t v12 = v40;
  if (v39 == v40) {
    goto LABEL_40;
  }
  v14 = 0;
  while (1)
  {
    Target = RIO_MTLX::InterfaceElement::getTarget(*v13);
    if ((RIO_MTLX::targetStringsMatch(a7, (uint64_t)Target) & 1) == 0) {
      goto LABEL_39;
    }
    v16 = *a3;
    if (*a3)
    {
      uint64_t v17 = (std::__shared_weak_count *)v13[1];
      int v37 = *v13;
      v38 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char hasExactInputMatch = RIO_MTLX::InterfaceElement::hasExactInputMatch(v16, &v37, 0);
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      if ((hasExactInputMatch & 1) == 0) {
        goto LABEL_39;
      }
    }
    uint64_t v19 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::InterfaceElement *))(*(void *)*v13 + 56))(*v13);
    uint64_t v20 = v19[23];
    if ((v20 & 0x80u) == 0) {
      uint64_t v21 = v19[23];
    }
    else {
      uint64_t v21 = *((void *)v19 + 1);
    }
    uint64_t v22 = a5[23];
    int v23 = (char)v22;
    if ((v22 & 0x80u) != 0) {
      uint64_t v22 = *((void *)a5 + 1);
    }
    if (v21 != v22) {
      goto LABEL_39;
    }
    if (v23 >= 0) {
      int v24 = a5;
    }
    else {
      int v24 = *(unsigned __int8 **)a5;
    }
    if ((v20 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v19, v24, *((void *)v19 + 1))) {
        goto LABEL_39;
      }
    }
    else if (v19[23])
    {
      while (*v19 == *v24)
      {
        ++v19;
        ++v24;
        if (!--v20) {
          goto LABEL_25;
        }
      }
      goto LABEL_39;
    }
LABEL_25:
    char v36 = 0;
    BOOL v25 = (std::__shared_weak_count *)v13[1];
    uint64_t v34 = (void **)*v13;
    uint64_t v35 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t Version = realityio::mtlx::UsdMtlxGetVersion((RIO_MTLX::InterfaceElement **)&v34, &v36);
    char v28 = v27;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if (!*(unsigned char *)(a6 + 8))
    {
      if (*(void *)a6 == Version) {
        break;
      }
      goto LABEL_39;
    }
    if (v36)
    {
      BOOL v29 = *v13;
      int v30 = (std::__shared_weak_count *)v13[1];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *a1 = v29;
      a1[1] = (RIO_MTLX::InterfaceElement *)v30;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      v14 = v30;
      goto LABEL_39;
    }
    if (v28) {
      break;
    }
LABEL_39:
    v13 += 2;
    if (v13 == v12) {
      goto LABEL_40;
    }
  }
  v32 = *v13;
  int v31 = (atomic_ullong *)v13[1];
  if (v31) {
    atomic_fetch_add_explicit(v31 + 1, 1uLL, memory_order_relaxed);
  }
  v33 = (std::__shared_weak_count *)a1[1];
  *a1 = v32;
  a1[1] = (RIO_MTLX::InterfaceElement *)v31;
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
LABEL_40:
  uint64_t v34 = (void **)&v39;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v34);
}

void sub_23F76D230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  a9 = (void **)&a14;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>::~pair(uint64_t a1)
{
  v3 = (void **)(a1 + 24);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    if (*v2 != *v3)
    {
      uint64_t v6 = *(void *)a1;
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

uint64_t realityio::mtlx::anonymous namespace'::_NodeGraphBuilder::_ConnectPorts<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeInput>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  RIO_MTLX::Element::asA<RIO_MTLX::Input>(a1, &v31);
  if (v31)
  {
    if (*((char *)v27 + 23) < 0)
    {
      if (!v27[1]) {
        goto LABEL_7;
      }
    }
    else if (!*((unsigned char *)v27 + 23))
    {
LABEL_7:
      if (*((char *)v27 + 23) < 0)
      {
        if (!v27[1]) {
          goto LABEL_12;
        }
      }
      else if (!*((unsigned char *)v27 + 23))
      {
        goto LABEL_12;
      }
      int v37 = "CoreRealityIO/mtlxToUsdShade.cpp";
      v38 = "_ConnectPorts";
      uint64_t v39 = 1021;
      unint64_t v40 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::Co"
                              "nstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeOutp"
                              "ut, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
      char v41 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v25);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v35);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
      goto LABEL_12;
    }
    int v37 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v38 = "_ConnectPorts";
    uint64_t v39 = 1013;
    unint64_t v40 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::Cons"
                            "tElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeOutput, "
                            "D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
    char v41 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v25);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v35);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v6 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
    goto LABEL_7;
  }
LABEL_12:
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v37);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v31);
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Getting referencedPrim for (%s) under (%s).\n", v9, Text, v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v35);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v31, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v27, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v31, (uint64_t)&v37);
  if (v37 == v27
    && v38 == v28
    && v39 == v29
    && (unint64_t v10 = v40, (v40 & 0xFFFFFFFFFFFFFFF8) == (v30 & 0xFFFFFFFFFFFFFFF8)))
  {
    int v11 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v25 = MEMORY[0x263F90760] + 16;
    if (!v26 || (*(unsigned char *)(v26 + 57) & 8) != 0) {
      int v11 = 0;
    }
    else {
      int v11 = (*(uint64_t (**)(uint64_t *))(MEMORY[0x263F90760] + 48))(&v25);
    }
    MEMORY[0x2455CF040](&v25);
    unint64_t v10 = v40;
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v38;
  if (v38) {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v38);
  }
  if (v11)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v12);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v31, (uint64_t)&v37);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37, &v25);
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
      if (v38) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v38);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v31, &v25);
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v27, &v37);
    NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v24, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, NameToken);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v14 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37, &v22);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v21);
    uint64_t v15 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, v15);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v35, (int *)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v36);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
    if ((v40 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    if (v38) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v38);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  }
  if (MEMORY[0x2455D0DD0](a3, &v35))
  {
    if (!pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>()) {
      goto LABEL_46;
    }
    uint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v37);
    uint64_t v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    + Connected <%s> -> <%s>\n", v18, v16, v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v19 = &v37;
  }
  else
  {
    int v37 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v38 = "_ConnectPorts";
    uint64_t v39 = 1054;
    unint64_t v40 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::Cons"
                            "tElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeOutput, "
                            "D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
    char v41 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v25);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v19 = (char **)&v25;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v19);
LABEL_46:
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  if (v28) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v28);
  }
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
  if (v32) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v32);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
}

void sub_23F76D9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 - 112));
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::anonymous namespace'::_NodeGraphBuilder::_ConnectPorts<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  RIO_MTLX::Element::asA<RIO_MTLX::Input>(a1, &v31);
  if (v31)
  {
    if (*((char *)v27 + 23) < 0)
    {
      if (!v27[1]) {
        goto LABEL_7;
      }
    }
    else if (!*((unsigned char *)v27 + 23))
    {
LABEL_7:
      if (*((char *)v27 + 23) < 0)
      {
        if (!v27[1]) {
          goto LABEL_12;
        }
      }
      else if (!*((unsigned char *)v27 + 23))
      {
        goto LABEL_12;
      }
      int v37 = "CoreRealityIO/mtlxToUsdShade.cpp";
      v38 = "_ConnectPorts";
      uint64_t v39 = 1021;
      unint64_t v40 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::Co"
                              "nstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeOutp"
                              "ut, D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
      char v41 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v25);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v35);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
      goto LABEL_12;
    }
    int v37 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v38 = "_ConnectPorts";
    uint64_t v39 = 1013;
    unint64_t v40 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::Cons"
                            "tElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeOutput, "
                            "D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
    char v41 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v25);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v35);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v6 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
    goto LABEL_7;
  }
LABEL_12:
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v37);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v31);
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Getting referencedPrim for (%s) under (%s).\n", v9, Text, v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v35);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v31, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v27, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v31, (uint64_t)&v37);
  if (v37 == v27
    && v38 == v28
    && v39 == v29
    && (unint64_t v10 = v40, (v40 & 0xFFFFFFFFFFFFFFF8) == (v30 & 0xFFFFFFFFFFFFFFF8)))
  {
    int v11 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v25 = MEMORY[0x263F90760] + 16;
    if (!v26 || (*(unsigned char *)(v26 + 57) & 8) != 0) {
      int v11 = 0;
    }
    else {
      int v11 = (*(uint64_t (**)(uint64_t *))(MEMORY[0x263F90760] + 48))(&v25);
    }
    MEMORY[0x2455CF040](&v25);
    unint64_t v10 = v40;
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v38;
  if (v38) {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v38);
  }
  if (v11)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v12);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v31, (uint64_t)&v37);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37, &v25);
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
      if (v38) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v38);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v31, &v25);
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v27, &v37);
    NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v24, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, NameToken);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v14 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37, &v22);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v21);
    uint64_t v15 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, v15);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v35, (int *)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v36);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
    if ((v40 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    if (v38) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v38);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  }
  if (MEMORY[0x2455D0F90](a3, &v35))
  {
    if (!pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>()) {
      goto LABEL_46;
    }
    uint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v37);
    uint64_t v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    + Connected <%s> -> <%s>\n", v18, v16, v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v19 = &v37;
  }
  else
  {
    int v37 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v38 = "_ConnectPorts";
    uint64_t v39 = 1054;
    unint64_t v40 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::Cons"
                            "tElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeOutput, "
                            "D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
    char v41 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v25);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v19 = (char **)&v25;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v19);
LABEL_46:
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  if (v28) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v28);
  }
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
  if (v32) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v32);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
}

void sub_23F76E1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 - 112));
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>>>::destroy(*((void *)a1 + 1));
    v2 = (void **)(a1 + 56);
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::Input const>,std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::shared_ptr<RIO_MTLX::Input const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::Input const>,std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::shared_ptr<RIO_MTLX::Input const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::Input const>,std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::shared_ptr<RIO_MTLX::Input const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(a1[1]);
    uint64_t v2 = a1[9];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 8));
    uint64_t v3 = a1[7];
    if (v3) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a1[5];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::map<std::string,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3) {
        break;
      }
      v7 = v3;
      if (v6)
      {
        do
        {
          uint64_t v8 = v6;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t)v7[2];
          BOOL v9 = *(void *)v8 == (void)v7;
          v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v8 + 32), v5 + 4))
      {
        if (!*v3) {
          goto LABEL_9;
        }
LABEL_11:
        uint64_t v20 = (void *)v8;
        unint64_t v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      unint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>(a1, &v20, v5 + 4);
LABEL_13:
      if (!*v10) {
        goto LABEL_14;
      }
LABEL_21:
      uint64_t v15 = (const void **)v5[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = (const void ***)v15;
          uint64_t v15 = (const void **)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (const void ***)v5[2];
          BOOL v9 = *v16 == v5;
          uint64_t v5 = (const void **)v16;
        }
        while (!v9);
      }
      uint64_t v5 = (const void **)v16;
      if (v16 == v4) {
        return a1;
      }
    }
    uint64_t v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      uint64_t v20 = v3;
      unint64_t v10 = v3;
LABEL_14:
      uint64_t v11 = (uint64_t *)operator new(0x40uLL);
      v18[0] = v11;
      v18[1] = v3;
      char v19 = 0;
      uint64_t v12 = (std::string *)(v11 + 4);
      if (*((char *)v5 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v5[4], (std::string::size_type)v5[5]);
      }
      else
      {
        long long v13 = *((_OWORD *)v5 + 2);
        v11[6] = (uint64_t)v5[6];
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      uint64_t v14 = (uint64_t)v5[7];
      v11[7] = v14;
      if ((v14 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v11[7] &= 0xFFFFFFFFFFFFFFF8;
      }
      char v19 = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v20, v10, v11);
      v18[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
      goto LABEL_21;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_23F76E6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(*v9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::anonymous namespace'::_Context::GetMaterial(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = a2 + 136;
  uint64_t v5 = *(void *)(a2 + 136);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v7 = a2 + 144;
  uint64_t v8 = a2 + 136;
  do
  {
    BOOL v9 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), a3);
    unint64_t v10 = (uint64_t *)(v5 + 8);
    if (!v9)
    {
      unint64_t v10 = (uint64_t *)v5;
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v10;
  }
  while (*v10);
  if (v8 == v4 || std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v8 + 32)))
  {
LABEL_8:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v13 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *a1 = MEMORY[0x263F90740] + 16;
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    return 0;
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *a1 = MEMORY[0x263F90740] + 16;
  }
  return result;
}

void sub_23F76E858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void RIO_MTLX::GraphElement::getNodesOfType(RIO_MTLX *a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  uint64_t v6 = RIO_MTLX::EMPTY_STRING(a1);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Node>(a2, (uint64_t)v6, (uint64_t *)&v18);
  uint64_t v7 = v18;
  uint64_t v8 = v19;
  if (v18 != v19)
  {
    while (1)
    {
      uint64_t v9 = *v7;
      uint64_t v10 = v7[1];
      *(void *)&long long v17 = *v7;
      *((void *)&v17 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
      uint64_t v12 = v11[23];
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = v11[23];
      }
      else {
        uint64_t v13 = *((void *)v11 + 1);
      }
      uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
      int v15 = (char)v14;
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(a3 + 8);
      }
      if (v13 != v14) {
        goto LABEL_20;
      }
      uint64_t v16 = v15 >= 0 ? (unsigned __int8 *)a3 : *(unsigned __int8 **)a3;
      if ((v12 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*(const void **)v11, v16, *((void *)v11 + 1))) {
        goto LABEL_19;
      }
LABEL_20:
      if (*((void *)&v17 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
      }
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_23;
      }
    }
    if (v11[23])
    {
      while (*v11 == *v16)
      {
        ++v11;
        ++v16;
        if (!--v12) {
          goto LABEL_19;
        }
      }
      goto LABEL_20;
    }
LABEL_19:
    std::vector<std::shared_ptr<RIO_MTLX::Node>>::push_back[abi:ne180100]((uint64_t *)a1, &v17);
    goto LABEL_20;
  }
LABEL_23:
  *(void *)&long long v17 = &v18;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
}

void sub_23F76E9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v5;
      uint64_t v10 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v10, a2)) {
      break;
    }
    uint64_t v7 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    uint64_t v12 = *a3;
    uint64_t v13 = (uint64_t *)operator new(0x50uLL);
    v18[0] = v13;
    v18[1] = v6;
    char v19 = 0;
    uint64_t v14 = (std::string *)(v13 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v15 = *v12;
      v13[6] = *((void *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    v13[9] = 0;
    v13[8] = 0;
    v13[7] = (uint64_t)(v13 + 8);
    char v19 = 1;
    uint64_t *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v8;
    uint64_t *v7 = v13;
    uint64_t v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      uint64_t v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    uint64_t v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_23F76EB54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void realityio::mtlx::anonymous namespace'::_TranslateShaderNodes(RIO_MTLX *a1, RIO_MTLX::InterfaceElement *a2, std::__shared_weak_count *a3, unsigned __int8 *a4)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = RIO_MTLX::EMPTY_STRING(a1);
  RIO_MTLX::getShaderNodes(&v25, a4, (uint64_t)v6, (uint64_t *)&v27);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  uint64_t v8 = v27;
  for (i = v28; v8 != i; v8 += 2)
  {
    uint64_t v10 = *v8;
    uint64_t v9 = (std::__shared_weak_count *)v8[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
    {
      uint64_t v12 = (void *)(v10 + 48);
      if (*(char *)(v10 + 71) < 0) {
        uint64_t v12 = (void *)*v12;
      }
      if ((a4[23] & 0x80u) == 0) {
        uint64_t v13 = (uint64_t *)a4;
      }
      else {
        uint64_t v13 = *(uint64_t **)a4;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding shaderNode '%s' type: '%s'\n", v11, v12, v13);
    }
    long long v17 = (void **)v10;
    uint64_t v18 = (const char *)v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v24)
    {
      if ((*(unsigned char *)(v24 + 57) & 8) == 0)
      {
        uint64_t v14 = (realityio::mtlx::_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t *))(v23 + 32))(&v23);
        if (v14) {
          goto LABEL_32;
        }
      }
    }
    if (*((char *)v22 + 23) < 0)
    {
      if (v22[1])
      {
LABEL_24:
        long long v17 = (void **)"CoreRealityIO/mtlxToUsdShade.cpp";
        uint64_t v18 = "_TranslateShaderNodes";
        uint64_t v19 = 2111;
        uint64_t v20 = "void realityio::mtlx::(anonymous namespace)::_TranslateShaderNodes(_Context &, const mx::NodePtr &, const std::string &)";
        char v21 = 0;
        goto LABEL_31;
      }
    }
    else if (*((unsigned char *)v22 + 23))
    {
      goto LABEL_24;
    }
    if ((*((char *)v16 + 23) & 0x80000000) == 0)
    {
      if (!*((unsigned char *)v16 + 23)) {
        goto LABEL_32;
      }
LABEL_30:
      long long v17 = (void **)"CoreRealityIO/mtlxToUsdShade.cpp";
      uint64_t v18 = "_TranslateShaderNodes";
      uint64_t v19 = 2116;
      uint64_t v20 = "void realityio::mtlx::(anonymous namespace)::_TranslateShaderNodes(_Context &, const mx::NodePtr &, const std::string &)";
      char v21 = 0;
LABEL_31:
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      goto LABEL_32;
    }
    if (v16[1]) {
      goto LABEL_30;
    }
LABEL_32:
    MEMORY[0x2455CECB0](&v23);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  long long v17 = (void **)&v27;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v17);
}

void sub_23F76EEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::anonymous namespace'::_Context::AddShaderNode(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1, uint64_t a2, uint64_t a3)
{
  v227[2] = *MEMORY[0x263EF8340];
  v186 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)(a2 + 272);
  uint64_t v6 = *(void *)(a2 + 280);
  if (!v6
    || (*(unsigned char *)(v6 + 57) & 8) != 0
    || (uint64_t v7 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *))(*(void *)v186 + 32))(v186),
        (v7 & 1) == 0))
  {
    *(void *)&long long v222 = "CoreRealityIO/mtlxToUsdShade.cpp";
    *((void *)&v222 + 1) = "AddShaderNode";
    uint64_t v223 = 1386;
    unint64_t v224 = (unint64_t)"UsdShadeShader realityio::mtlx::(anonymous namespace)::_Context::AddShaderNode(const mx::ConstNodePtr &)";
    LOBYTE(v225) = 0;
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
    if ((v7 & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v222);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *(void *)a1 = MEMORY[0x263F906F0] + 16;
      pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v222);
      return;
    }
  }
  v182 = (uint64_t *)a3;
  uint64_t v8 = *(RIO_MTLX::InterfaceElement **)a3;
  uint64_t v9 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v7);
  RIO_MTLX::Node::getNodeDef((std::string *)v8, (uint64_t)v9, 0, (RIO_MTLX::InterfaceElement **)&v222);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v222 + 1);
  uint64_t v10 = v222;
  long long v212 = v222;
  if (!(void)v222)
  {
    std::string::size_type v12 = *(void *)(a3 + 8);
    v204.__r_.__value_.__r.__words[0] = *(void *)a3;
    v204.__r_.__value_.__l.__size_ = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    realityio::mtlx::UsdMtlxGetVersion((RIO_MTLX::InterfaceElement **)&v204, 0);
    RIO_MTLX::InterfaceElement::getTarget(*(RIO_MTLX::InterfaceElement **)a3);
    unint64_t v218 = 0;
    v219 = 0;
    uint64_t v190 = v222;
    long long v212 = v222;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v204.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v204.__r_.__value_.__l.__size_);
    }
    uint64_t v10 = v190;
    if (!v190)
    {
      uint64_t v211 = 0;
      goto LABEL_45;
    }
  }
  uint64_t v13 = (void *)(v10 + 48);
  MEMORY[0x2455CF830](&v211, v10 + 48);
  if (!v211)
  {
LABEL_45:
    LODWORD(v222) = 1;
    *((void *)&v222 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    unint64_t v224 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(void *)a1 = MEMORY[0x263F906F0] + 16;
    if ((v224 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
    if (*((void *)&v222 + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
    }
    goto LABEL_333;
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v212 + 1);
  if (*((void *)&v212 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v212 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v209, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 48), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v210);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get();
  v187 = a1;
  uint64_t v184 = a2;
  if (!v219
    || (*((unsigned char *)v219 + 57) & 8) != 0
    || ((*(uint64_t (**)(unint64_t *))(v218 + 32))(&v218) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
    long long v15 = (std::type_info **)*((void *)&v222 + 1);
    if (*((void *)&v222 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v222 + 1) + 48), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (uint64_t)v219;
    v219 = v15;
    if (v16) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v220, &v223);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v221, (_DWORD *)&v223 + 1);
    if (!v219 || (*((unsigned char *)v219 + 57) & 8) != 0)
    {
      MEMORY[0x2455CECB0](&v222);
    }
    else
    {
      int v17 = (*(uint64_t (**)(unint64_t *))(v218 + 32))(&v218);
      MEMORY[0x2455CECB0](&v222);
      if (v17)
      {
        BOOL v18 = pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>();
        if (v18)
        {
          if (*(char *)(v10 + 71) < 0) {
            uint64_t v13 = (void *)*v13;
          }
          if ((v210 & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t EmptyString = (v210 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v18);
          }
          if (*(char *)(EmptyString + 23) < 0) {
            unint64_t EmptyString = *(void *)EmptyString;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Created shader mtlx %s, as usd %s\n", v19, v13, EmptyString);
        }
        uint64_t v103 = v211;
        if ((v211 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v211 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v103 &= 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)&long long v222 = v103;
        *((void *)&v222 + 1) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                               + 1;
        if ((v103 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v103 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)&long long v222 = v222 & 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v218, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v222);
        if ((v208 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v208 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v207);
        if (v206) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v206);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v222);
        uint64_t v104 = (unint64_t *)MEMORY[0x263F90550];
        if ((v103 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v103 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((uint64_t *)&v222, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v218);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v204, (uint64_t *)&v219, &v220);
        v105 = *(std::__shared_weak_count **)(a3 + 8);
        v202 = *(RIO_MTLX::Element **)a3;
        v203 = v105;
        if (v105) {
          atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v105) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v105);
        }
        if ((v205 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v205 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204.__r_.__value_.__r.__words[2]);
        if (v204.__r_.__value_.__l.__size_) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v204.__r_.__value_.__l.__size_);
        }
        v107 = v202;
        v189 = v203;
        if (v202 != (RIO_MTLX::Element *)v203)
        {
          do
          {
            v191 = v107;
            uint64_t v108 = *(void *)v107;
            v109 = RIO_MTLX::EMPTY_STRING(v106);
            RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v108, (uint64_t)v109, (uint64_t *)&v200);
            v111 = (RIO_MTLX::Element *)v200;
            char v112 = v201;
            while (v111 != (RIO_MTLX::Element *)v112)
            {
              uint64_t v113 = *(void *)v111;
              uint64_t v114 = (std::__shared_weak_count *)*((void *)v111 + 1);
              if (v114)
              {
                atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v115 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v113 + 160), (unsigned __int8 *)&qword_268C41100);
              if (v115)
              {
                uint64_t v116 = (uint64_t *)((char *)v115 + 40);
              }
              else
              {
                int v115 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
                uint64_t v116 = (uint64_t *)v115;
              }
              uint64_t v117 = *((unsigned __int8 *)v116 + 23);
              if ((v117 & 0x80u) != 0) {
                uint64_t v117 = v116[1];
              }
              if (!v117) {
                uint64_t v116 = RIO_MTLX::EMPTY_STRING(v115);
              }
              memset(&v204, 0, sizeof(v204));
              RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)v113, &v214);
              RIO_MTLX::Element::getChildOfType<RIO_MTLX::TypeDef>(v214, (unsigned __int8 *)v116, &v216);
              int v118 = (realityio::mtlx::_anonymous_namespace_ *)v215;
              if (v215) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v215);
              }
              if (v216)
              {
                uint64_t v120 = (unsigned __int8 *)v214;
                if (*(char *)(v214 + 23) < 0)
                {
                  if (!*(void *)(v214 + 8)) {
                    goto LABEL_397;
                  }
                }
                else if (!*(unsigned char *)(v214 + 23))
                {
                  goto LABEL_397;
                }
                v121 = (realityio::mtlx::_anonymous_namespace_ *)RIO_MTLX::SHADER_SEMANTIC((RIO_MTLX *)v119);
                uint64_t v122 = v120[23];
                if ((v122 & 0x80u) == 0) {
                  uint64_t v123 = v120[23];
                }
                else {
                  uint64_t v123 = *((void *)v120 + 1);
                }
                uint64_t v124 = *((unsigned __int8 *)v121 + 23);
                int v125 = (char)v124;
                if ((v124 & 0x80u) != 0) {
                  uint64_t v124 = *((void *)v121 + 1);
                }
                if (v123 == v124)
                {
                  if (v125 >= 0) {
                    v126 = (unsigned __int8 *)v121;
                  }
                  else {
                    v126 = *(unsigned __int8 **)v121;
                  }
                  if ((v122 & 0x80) != 0)
                  {
                    v121 = (realityio::mtlx::_anonymous_namespace_ *)memcmp(*(const void **)v120, v126, *((void *)v120 + 1));
                    if (v121) {
                      goto LABEL_397;
                    }
LABEL_396:
                    std::string::operator=(&v204, v213);
                    goto LABEL_397;
                  }
                  if (!v120[23]) {
                    goto LABEL_396;
                  }
                  while (*v120 == *v126)
                  {
                    ++v120;
                    ++v126;
                    if (!--v122) {
                      goto LABEL_396;
                    }
                  }
                }
              }
LABEL_397:
              v127 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>();
              if (v127)
              {
                v129 = (void *)(v113 + 48);
                if (*(char *)(v113 + 71) < 0) {
                  v129 = (void *)*v129;
                }
                uint64_t v130 = (uint64_t)v116;
                if (*((char *)v116 + 23) < 0) {
                  uint64_t v130 = *v116;
                }
                v127 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add shader output %s of type %s\n", v128, v129, v130);
              }
              if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v204.__r_.__value_.__l.__size_ != 7) {
                  goto LABEL_412;
                }
                v131 = (std::string *)v204.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) != 7) {
                  goto LABEL_412;
                }
                v131 = &v204;
              }
              int data = (int)v131->__r_.__value_.__l.__data_;
              int v133 = *(_DWORD *)((char *)v131->__r_.__value_.__r.__words + 3);
              if (data == 1718777203 && v133 == 1701011814)
              {
LABEL_431:
                unint64_t v143 = atomic_load(v104);
                if (!v143) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
                }
                v144 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
                if (!v144) {
                  v144 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
                }
                v145 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v143 + 208);
LABEL_524:
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput(&v196, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v222, v145, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v144 + 88));
                goto LABEL_525;
              }
LABEL_412:
              v135 = (RIO_MTLX *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING(v127);
              uint64_t v136 = *((unsigned __int8 *)v116 + 23);
              if ((v136 & 0x80u) == 0) {
                uint64_t v137 = *((unsigned __int8 *)v116 + 23);
              }
              else {
                uint64_t v137 = v116[1];
              }
              uint64_t v138 = *((unsigned __int8 *)v135 + 23);
              int v139 = (char)v138;
              if ((v138 & 0x80u) != 0) {
                uint64_t v138 = *((void *)v135 + 1);
              }
              if (v137 == v138)
              {
                if (v139 >= 0) {
                  v140 = (unsigned __int8 *)v135;
                }
                else {
                  v140 = *(unsigned __int8 **)v135;
                }
                if ((v136 & 0x80) != 0)
                {
                  v135 = (RIO_MTLX *)memcmp((const void *)*v116, v140, v116[1]);
                  if (!v135) {
                    goto LABEL_431;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v116 + 23)) {
                    goto LABEL_431;
                  }
                  v141 = v116;
                  while (*(unsigned __int8 *)v141 == *v140)
                  {
                    v141 = (uint64_t *)((char *)v141 + 1);
                    ++v140;
                    if (!--v136) {
                      goto LABEL_431;
                    }
                  }
                }
              }
              if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v204.__r_.__value_.__l.__size_ != 12) {
                  goto LABEL_441;
                }
                v142 = (std::string *)v204.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) != 12) {
                  goto LABEL_441;
                }
                v142 = &v204;
              }
              std::string::size_type v146 = v142->__r_.__value_.__r.__words[0];
              int v147 = v142->__r_.__value_.__r.__words[1];
              if (v146 == 0x6563616C70736964 && v147 == 1953391981)
              {
LABEL_460:
                unint64_t v157 = atomic_load(v104);
                if (!v157) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
                }
                v144 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
                if (!v144) {
                  v144 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
                }
                v145 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v157 + 32);
                goto LABEL_524;
              }
LABEL_441:
              v149 = (RIO_MTLX *)RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(v135);
              uint64_t v150 = *((unsigned __int8 *)v116 + 23);
              if ((v150 & 0x80u) == 0) {
                uint64_t v151 = *((unsigned __int8 *)v116 + 23);
              }
              else {
                uint64_t v151 = v116[1];
              }
              uint64_t v152 = *((unsigned __int8 *)v149 + 23);
              int v153 = (char)v152;
              if ((v152 & 0x80u) != 0) {
                uint64_t v152 = *((void *)v149 + 1);
              }
              if (v151 == v152)
              {
                if (v153 >= 0) {
                  v154 = (unsigned __int8 *)v149;
                }
                else {
                  v154 = *(unsigned __int8 **)v149;
                }
                if ((v150 & 0x80) != 0)
                {
                  v149 = (RIO_MTLX *)memcmp((const void *)*v116, v154, v116[1]);
                  if (!v149) {
                    goto LABEL_460;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v116 + 23)) {
                    goto LABEL_460;
                  }
                  v155 = v116;
                  while (*(unsigned __int8 *)v155 == *v154)
                  {
                    v155 = (uint64_t *)((char *)v155 + 1);
                    ++v154;
                    if (!--v150) {
                      goto LABEL_460;
                    }
                  }
                }
              }
              if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v204.__r_.__value_.__l.__size_ != 6) {
                  goto LABEL_470;
                }
                v156 = (std::string *)v204.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) != 6) {
                  goto LABEL_470;
                }
                v156 = &v204;
              }
              int v158 = (int)v156->__r_.__value_.__l.__data_;
              int v159 = WORD2(v156->__r_.__value_.__r.__words[0]);
              if (v158 == 1970040694 && v159 == 25965)
              {
LABEL_489:
                unint64_t v169 = atomic_load(v104);
                if (!v169) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
                }
                v144 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
                if (!v144) {
                  v144 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
                }
                v145 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v169 + 232);
                goto LABEL_524;
              }
LABEL_470:
              v161 = (RIO_MTLX *)RIO_MTLX::VOLUME_SHADER_TYPE_STRING(v149);
              uint64_t v162 = *((unsigned __int8 *)v116 + 23);
              if ((v162 & 0x80u) == 0) {
                uint64_t v163 = *((unsigned __int8 *)v116 + 23);
              }
              else {
                uint64_t v163 = v116[1];
              }
              uint64_t v164 = *((unsigned __int8 *)v161 + 23);
              int v165 = (char)v164;
              if ((v164 & 0x80u) != 0) {
                uint64_t v164 = *((void *)v161 + 1);
              }
              if (v163 == v164)
              {
                if (v165 >= 0) {
                  v166 = (unsigned __int8 *)v161;
                }
                else {
                  v166 = *(unsigned __int8 **)v161;
                }
                if ((v162 & 0x80) != 0)
                {
                  v161 = (RIO_MTLX *)memcmp((const void *)*v116, v166, v116[1]);
                  if (!v161) {
                    goto LABEL_489;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v116 + 23)) {
                    goto LABEL_489;
                  }
                  v167 = v116;
                  while (*(unsigned __int8 *)v167 == *v166)
                  {
                    v167 = (uint64_t *)((char *)v167 + 1);
                    ++v166;
                    if (!--v162) {
                      goto LABEL_489;
                    }
                  }
                }
              }
              if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v204.__r_.__value_.__l.__size_ != 5) {
                  goto LABEL_499;
                }
                v168 = (std::string *)v204.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) != 5) {
                  goto LABEL_499;
                }
                v168 = &v204;
              }
              int v170 = (int)v168->__r_.__value_.__l.__data_;
              int v171 = v168->__r_.__value_.__s.__data_[4];
              if (v170 == 1751607660 && v171 == 116)
              {
LABEL_522:
                v144 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
                if (!v144) {
                  v144 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
                }
                goto LABEL_524;
              }
LABEL_499:
              v173 = (unsigned __int8 *)RIO_MTLX::LIGHT_SHADER_TYPE_STRING(v161);
              uint64_t v174 = *((unsigned __int8 *)v116 + 23);
              if ((v174 & 0x80u) == 0) {
                uint64_t v175 = *((unsigned __int8 *)v116 + 23);
              }
              else {
                uint64_t v175 = v116[1];
              }
              uint64_t v176 = v173[23];
              int v177 = (char)v176;
              if ((v176 & 0x80u) != 0) {
                uint64_t v176 = *((void *)v173 + 1);
              }
              if (v175 == v176)
              {
                if (v177 >= 0) {
                  v178 = v173;
                }
                else {
                  v178 = *(unsigned __int8 **)v173;
                }
                if ((v174 & 0x80) != 0)
                {
                  if (!memcmp((const void *)*v116, v178, v116[1])) {
                    goto LABEL_522;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v116 + 23)) {
                    goto LABEL_522;
                  }
                  v179 = v116;
                  while (*(unsigned __int8 *)v179 == *v178)
                  {
                    v179 = (uint64_t *)((char *)v179 + 1);
                    ++v178;
                    if (!--v174) {
                      goto LABEL_522;
                    }
                  }
                }
              }
              std::string::size_type size = HIBYTE(v204.__r_.__value_.__r.__words[2]);
              if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type size = v204.__r_.__value_.__l.__size_;
              }
              if (size)
              {
                MEMORY[0x2455CF830](&v214, v116);
                v181 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
                if (!v181) {
                  v181 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
                }
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput(&v196, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v222, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v214, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v181 + 88));
                if ((v214 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v214 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
              }
              else
              {
                LODWORD(v196) = 3;
                v197 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
                uint64_t v199 = 0;
              }
LABEL_525:
              if (v217) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v217);
              }
              if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v204.__r_.__value_.__l.__data_);
              }
              if ((v199 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v199 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v198);
              v110 = v197;
              if (v197) {
                v110 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v197);
              }
              if (v114)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v114);
                std::__shared_weak_count::__release_shared[abi:ne180100](v114);
              }
              v111 = (RIO_MTLX::Element *)((char *)v111 + 16);
            }
            v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200;
            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
            v107 = (RIO_MTLX::Element *)((char *)v191 + 16);
          }
          while ((std::__shared_weak_count *)((char *)v191 + 16) != v189);
        }
        v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
        std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
        MEMORY[0x2455CF2C0](&v222);
        a1 = v187;
      }
    }
  }
  MEMORY[0x2455CECB0](&v218);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(v186, &v222);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&v213, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v222, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v210);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v204, (uint64_t *)a1 + 1, (_DWORD *)a1 + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((uint64_t *)&v222, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v204);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v218, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
  if ((v224 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
  if (*((void *)&v222 + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
  }
  if ((v205 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v205 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204.__r_.__value_.__r.__words[2]);
  if (v204.__r_.__value_.__l.__size_) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v204.__r_.__value_.__l.__size_);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v205 = 0;
  v204.__r_.__value_.__r.__words[0] = MEMORY[0x263F90790] + 16;
  *(void *)&long long v222 = *(void *)(a2 + 256) + 48;
  char v21 = std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 224), (const void **)v222, (long long **)&v222);
  uint64_t v22 = *v182;
  uint64_t v23 = *v182 + 48;
  uint64_t v24 = std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)(v21 + 7), &v202, (const void **)v23);
  unint64_t v25 = *v24;
  if (!*v24)
  {
    uint64_t v26 = (uint64_t **)v24;
    char v27 = (char *)operator new(0x58uLL);
    char v28 = v27;
    unint64_t v218 = (unint64_t)v27;
    v219 = (std::type_info **)(v21 + 8);
    LOBYTE(v220) = 0;
    if (*(char *)(v22 + 71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v27 + 32), *(const std::string::value_type **)(v22 + 48), *(void *)(v22 + 56));
    }
    else
    {
      long long v29 = *(_OWORD *)v23;
      *((void *)v27 + 6) = *(void *)(v23 + 16);
      *((_OWORD *)v27 + 2) = v29;
    }
    LODWORD(v222) = 1;
    *((void *)&v222 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    unint64_t v224 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *((void *)v28 + 10) = 0;
    *((void *)v28 + 7) = MEMORY[0x263F90790] + 16;
    if ((v224 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
    if (*((void *)&v222 + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
    }
    LOBYTE(v220) = 1;
    unint64_t v25 = v218;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)v21 + 7, (uint64_t)v202, v26, (uint64_t *)v218);
    unint64_t v218 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,void *>>>>::reset[abi:ne180100]((uint64_t)&v218);
  }
  std::string::size_type v30 = v204.__r_.__value_.__l.__size_;
  if (v204.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v204.__r_.__value_.__l.__size_ + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = *(void *)(v25 + 64);
  *(void *)(v25 + 64) = v30;
  if (v31) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v25 + 72, &v204.__r_.__value_.__r.__words[2]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v25 + 76, (_DWORD *)&v204.__r_.__value_.__r.__words[2] + 1);
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)(v25 + 80), &v205);
  MEMORY[0x2455CF2C0](&v204);
  uint64_t v33 = v202;
  v183 = v203;
  if (v202 != (RIO_MTLX::Element *)v203)
  {
LABEL_60:
    v185 = v33;
    uint64_t v34 = *(void *)v33;
    int v35 = RIO_MTLX::EMPTY_STRING(v32);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>(v34, (uint64_t)v35, (uint64_t *)&v200);
    v38 = (RIO_MTLX::Element *)v200;
    int v37 = v201;
    for (i = v201; ; int v37 = i)
    {
      if (v38 == (RIO_MTLX::Element *)v37)
      {
        *(void *)&long long v222 = &v200;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
        uint64_t v33 = (RIO_MTLX::Element *)((char *)v185 + 16);
        if ((std::__shared_weak_count *)((char *)v185 + 16) == v183) {
          break;
        }
        goto LABEL_60;
      }
      uint64_t v39 = *(std::string **)v38;
      unint64_t v40 = (std::__shared_weak_count *)*((void *)v38 + 1);
      if (v40)
      {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v41 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v39[6].__r_.__value_.__r.__words[2], (unsigned __int8 *)&qword_268C41100);
      if (v41)
      {
        uint64_t v42 = (uint64_t *)((char *)v41 + 40);
      }
      else
      {
        char v41 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
        uint64_t v42 = (uint64_t *)v41;
      }
      uint64_t v43 = *((unsigned __int8 *)v42 + 23);
      if ((v43 & 0x80u) == 0) {
        uint64_t v44 = *((unsigned __int8 *)v42 + 23);
      }
      else {
        uint64_t v44 = v42[1];
      }
      if (v44)
      {
        if ((v43 & 0x80) == 0) {
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v42 = RIO_MTLX::EMPTY_STRING(v41);
        uint64_t v43 = *((unsigned __int8 *)v42 + 23);
        if ((v43 & 0x80) == 0)
        {
LABEL_72:
          if (!v43) {
            goto LABEL_87;
          }
          goto LABEL_73;
        }
      }
      if (!v42[1])
      {
LABEL_87:
        LODWORD(v222) = 3;
        *((void *)&v222 + 1) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        Input = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        unint64_t v224 = 0;
        goto LABEL_96;
      }
LABEL_73:
      unint64_t v218 = 0;
      realityio::mtlx::UsdMtlxGetUsdType((unsigned __int8 *)v42, (uint64_t)&v204);
      uint64_t v216 = v204.__r_.__value_.__r.__words[0];
      if ((v204.__r_.__value_.__s.__data_[8] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v204.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v216))
      {
        v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
        if (!v45) {
          v45 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
        }
        uint64_t v216 = *((void *)v45 + 11);
        MEMORY[0x2455CF830](&v204, v42);
        if ((v218 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v218 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v218 = v204.__r_.__value_.__r.__words[0];
      }
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v39) {
      else
      }
        v204.__r_.__value_.__r.__words[0] = 0;
      Input = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      if ((v204.__r_.__value_.__s.__data_[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v204.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if (v218)
      {
        Input = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v222, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v218);
        if ((v218 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v218 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
LABEL_96:
      if (v40)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v47 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v39[6].__r_.__value_.__r.__words[2], (unsigned __int8 *)&qword_268C41100);
      if (v47)
      {
        uint64_t v48 = (uint64_t *)((char *)v47 + 40);
      }
      else
      {
        v47 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
        uint64_t v48 = (uint64_t *)v47;
      }
      uint64_t v49 = *((unsigned __int8 *)v48 + 23);
      if ((v49 & 0x80u) == 0) {
        uint64_t v50 = *((unsigned __int8 *)v48 + 23);
      }
      else {
        uint64_t v50 = v48[1];
      }
      if (v50)
      {
        if ((v49 & 0x80) == 0) {
          goto LABEL_106;
        }
      }
      else
      {
        uint64_t v48 = RIO_MTLX::EMPTY_STRING(v47);
        uint64_t v49 = *((unsigned __int8 *)v48 + 23);
        if ((v49 & 0x80) == 0)
        {
LABEL_106:
          if (!v49) {
            goto LABEL_121;
          }
          goto LABEL_107;
        }
      }
      if (!v48[1])
      {
LABEL_121:
        LODWORD(v204.__r_.__value_.__l.__data_) = 3;
        v204.__r_.__value_.__l.__size_ = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        uint64_t v205 = 0;
        goto LABEL_130;
      }
LABEL_107:
      uint64_t v216 = 0;
      realityio::mtlx::UsdMtlxGetUsdType((unsigned __int8 *)v48, (uint64_t)&v218);
      uint64_t v214 = v218;
      if ((v219 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v219 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v214))
      {
        int v51 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
        if (!v51) {
          int v51 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
        }
        uint64_t v214 = *((void *)v51 + 11);
        MEMORY[0x2455CF830](&v218, v48);
        if ((v216 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v216 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v216 = v218;
      }
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v39) {
      else
      }
        unint64_t v218 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateInput((uint64_t *)&v204, v186, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v218, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v214);
      if ((v218 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v218 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if (v216)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v204, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v216);
        if ((v216 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v216 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
LABEL_130:
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      MEMORY[0x2455D0DE0](&v222, &v204);
      if ((v205 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v205 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204.__r_.__value_.__r.__words[2]);
      if (v204.__r_.__value_.__l.__size_) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v204.__r_.__value_.__l.__size_);
      }
      if ((v224 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
      int v36 = (realityio::mtlx::_anonymous_namespace_ *)*((void *)&v222 + 1);
      if (*((void *)&v222 + 1)) {
        int v36 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      v38 = (RIO_MTLX::Element *)((char *)v38 + 16);
    }
  }
  *(void *)&long long v222 = &v202;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
  uint64_t v52 = *v182;
  v54 = RIO_MTLX::EMPTY_STRING(v53);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>(v52, (uint64_t)v54, (uint64_t *)&v218);
  unint64_t v56 = v218;
  uint64_t v55 = v219;
  while ((std::type_info **)v56 != v55)
  {
    int v58 = *(RIO_MTLX::Element **)v56;
    uint64_t v57 = *(std::__shared_weak_count **)(v56 + 8);
    if (v57)
    {
      atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    v204.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    unint64_t v224 = 0;
    *(void *)&long long v222 = MEMORY[0x263F90790] + 16;
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v192)
      && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
    {
      uint64_t v59 = v195;
    }
    else
    {
      if ((v195 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v195 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v194);
      if (v193) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v193);
      }
      int v192 = 3;
      uint64_t v193 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v59 = 0;
      uint64_t v195 = 0;
    }
    if ((v59 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v194);
    if (v193) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v193);
    }
    MEMORY[0x2455CF2C0](&v222);
    v60 = (realityio::mtlx::_anonymous_namespace_ *)v204.__r_.__value_.__l.__size_;
    if (v204.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v204.__r_.__value_.__l.__size_);
    }
    if (*(char *)(v214 + 23) < 0)
    {
      if (!*(void *)(v214 + 8)) {
        goto LABEL_189;
      }
    }
    else if (!*(unsigned char *)(v214 + 23))
    {
      goto LABEL_189;
    }
    RIO_MTLX::Element::getDocument(v58, &v222);
    uint64_t v62 = v222;
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeGraph>(v62, (unsigned __int8 *)v204.__r_.__value_.__l.__data_, &v202);
    if (*((void *)&v222 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v222 + 1));
    }
    v64 = v202;
    if (v202)
    {
      v65 = v203;
      unint64_t v200 = (unint64_t)v202;
      v201 = v203;
      if (v203) {
        atomic_fetch_add_explicit(&v203->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::getDocument(v64, &v204);
      if (v204.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v204.__r_.__value_.__l.__size_);
      }
      if (!v65) {
        goto LABEL_178;
      }
      uint64_t v66 = v65;
    }
    else
    {
      RIO_MTLX::Element::getDocument(v58, &v216);
      uint64_t v67 = v217;
      unint64_t v200 = v216;
      v201 = v217;
      uint64_t v216 = 0;
      v217 = 0;
      *(_OWORD *)&v204.__r_.__value_.__l.__data_ = 0uLL;
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
      uint64_t v66 = v217;
      if (!v217) {
        goto LABEL_178;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
LABEL_178:
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v222))
    {
      unint64_t v200 = (unint64_t)v58;
      v201 = v57;
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(v186, &v216);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v205 = 0;
      v204.__r_.__value_.__r.__words[0] = MEMORY[0x263F90790] + 16;
      MEMORY[0x2455CF2C0](&v204);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v216);
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v227);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(v226);
    if ((v224 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
    if (*((void *)&v222 + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
    }
    std::string::size_type v61 = (uint64_t **)v203;
    if (v203) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v203);
    }
LABEL_189:
    if (*(char *)(v216 + 23) < 0)
    {
      if (*(void *)(v216 + 8))
      {
LABEL_193:
        RIO_MTLX::Element::getDocument(v58, &v200);
        v68 = v201;
        v202 = (RIO_MTLX::Element *)v200;
        v203 = v201;
        unint64_t v200 = 0;
        v201 = 0;
        *(_OWORD *)&v204.__r_.__value_.__l.__data_ = 0uLL;
        if (v68) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v68);
        }
        if (v201) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v201);
        }
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v222))
        {
          v202 = v58;
          v203 = v57;
          if (v57) {
            atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(v186, &v200);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          uint64_t v205 = 0;
          v204.__r_.__value_.__r.__words[0] = MEMORY[0x263F90790] + 16;
          MEMORY[0x2455CF2C0](&v204);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
          if (v57) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          }
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v227);
        std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(v226);
        if ((v224 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
        if (*((void *)&v222 + 1)) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
        }
      }
    }
    else if (*(unsigned char *)(v216 + 23))
    {
      goto LABEL_193;
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    v56 += 16;
  }
  *(void *)&long long v222 = &v218;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v205 = 0;
  v204.__r_.__value_.__r.__words[0] = MEMORY[0x263F90778] + 16;
  if (v204.__r_.__value_.__l.__size_)
  {
    if ((*(unsigned char *)(v204.__r_.__value_.__l.__size_ + 57) & 8) == 0)
    {
      v69 = (realityio::mtlx::_anonymous_namespace_ *)(*(uint64_t (**)(std::string *))(MEMORY[0x263F90778]
                                                                                               + 48))(&v204);
      if (v69)
      {
        uint64_t v70 = *(uint64_t **)(*v182 + 136);
        for (j = *(uint64_t **)(*v182 + 144); v70 != j; v70 += 2)
        {
          uint64_t v73 = *v70;
          uint64_t v72 = (std::__shared_weak_count *)v70[1];
          if (v72) {
            atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v74 = *(unsigned __int8 *)(v73 + 47);
          if ((v74 & 0x80u) == 0) {
            uint64_t v75 = *(unsigned __int8 *)(v73 + 47);
          }
          else {
            uint64_t v75 = *(void *)(v73 + 32);
          }
          uint64_t v76 = byte_268C410FF;
          if (byte_268C410FF < 0) {
            uint64_t v76 = qword_268C410F0;
          }
          if (v75 == v76)
          {
            v77 = (const void **)(v73 + 24);
            if (byte_268C410FF >= 0) {
              v78 = &qword_268C410E8;
            }
            else {
              v78 = (uint64_t *)qword_268C410E8;
            }
            if ((v74 & 0x80) != 0)
            {
              v69 = (realityio::mtlx::_anonymous_namespace_ *)memcmp(*v77, v78, *(void *)(v73 + 32));
              if (!v69)
              {
LABEL_230:
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                *(void *)&v221[4] = 0;
                unint64_t v218 = MEMORY[0x263F90778] + 16;
                if (v72) {
                  atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v73) {
                else
                }
                  v202 = 0;
                uint64_t v79 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
                if (!v79) {
                  uint64_t v79 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
                }
                unint64_t v200 = 0;
                pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v218, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v202, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v79 + 80), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v200);
                if ((v200 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                if ((v202 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v202 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                if (v72) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v72);
                }
                v80 = (realityio::mtlx::_anonymous_namespace_ *)MEMORY[0x2455CF0D0](&v218);
                v219 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
                pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy();
              }
            }
            else
            {
              if (!*(unsigned char *)(v73 + 47)) {
                goto LABEL_230;
              }
              while (*(unsigned __int8 *)v77 == *(unsigned __int8 *)v78)
              {
                v77 = (const void **)((char *)v77 + 1);
                v78 = (uint64_t *)((char *)v78 + 1);
                if (!--v74) {
                  goto LABEL_230;
                }
              }
            }
          }
          if (v72) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v72);
          }
        }
      }
    }
  }
  MEMORY[0x2455CF0D0](&v204);
  int v81 = (unint64_t *)MEMORY[0x263F90550];
  unint64_t v82 = atomic_load(MEMORY[0x263F90550]);
  if (!v82) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((uint64_t *)&v222, v187, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v82 + 208));
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput((uint64_t *)&v204, v186, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v83 + 8));
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
    if ((v205 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v205 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204.__r_.__value_.__r.__words[2]);
    if (v204.__r_.__value_.__l.__size_) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v204.__r_.__value_.__l.__size_);
    }
  }
  if ((v224 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
  if (*((void *)&v222 + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
  }
  MEMORY[0x2455CF810](&v204, "out");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((uint64_t *)&v222, v187, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v204);
  if ((v204.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v204.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput((uint64_t *)&v204, v186, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v84 + 8));
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
    if ((v205 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v205 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204.__r_.__value_.__r.__words[2]);
    if (v204.__r_.__value_.__l.__size_) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v204.__r_.__value_.__l.__size_);
    }
  }
  if ((v224 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
  if (*((void *)&v222 + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
  }
  unint64_t v85 = atomic_load(v81);
  if (!v85) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((uint64_t *)&v222, v187, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v85 + 32));
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateDisplacementOutput((uint64_t *)&v204, v186, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v86 + 8));
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
    if ((v205 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v205 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204.__r_.__value_.__r.__words[2]);
    if (v204.__r_.__value_.__l.__size_) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v204.__r_.__value_.__l.__size_);
    }
  }
  if ((v224 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
  if (*((void *)&v222 + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
  }
  unint64_t v87 = atomic_load(v81);
  if (!v87) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((uint64_t *)&v222, v187, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v87 + 232));
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateVolumeOutput((uint64_t *)&v204, v186, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v88 + 8));
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
    if ((v205 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v205 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204.__r_.__value_.__r.__words[2]);
    if (v204.__r_.__value_.__l.__size_) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v204.__r_.__value_.__l.__size_);
    }
  }
  if ((v224 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
  if (*((void *)&v222 + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((uint64_t *)&v222, v187, v89);
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
  {
    std::string::size_type v91 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
    if (!v91) {
      std::string::size_type v91 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput((uint64_t *)&v204, v186, v90, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v91 + 88));
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
    if ((v205 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v205 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204.__r_.__value_.__r.__words[2]);
    if (v204.__r_.__value_.__l.__size_) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v204.__r_.__value_.__l.__size_);
    }
  }
  if ((v224 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
  if (*((void *)&v222 + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs(v187);
  v92 = v219;
  if ((std::type_info **)v218 != v219)
  {
    v93 = (char *)(v218 + 16);
    do
    {
      v94 = v93 - 16;
      LODWORD(v222) = *((_DWORD *)v93 - 4);
      uint64_t v95 = *((void *)v93 - 1);
      *((void *)&v222 + 1) = v95;
      if (v95) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v95 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v223, v93);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v223 + 1, (_DWORD *)v93 + 1);
      unint64_t v96 = *((void *)v93 + 1);
      unint64_t v224 = v96;
      if ((v96 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v224 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((uint64_t *)&v202, (pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v222);
      unint64_t v97 = atomic_load(MEMORY[0x263F90550]);
      if (!v97) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
      }
      long long v98 = v202;
      if (((unint64_t)v202 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v97 + 208) & 0xFFFFFFFFFFFFFFF8))
      {
        unint64_t v99 = atomic_load(MEMORY[0x263F90550]);
        if (!v99) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
        }
        long long v98 = v202;
        if (((unint64_t)v202 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v99 + 32) & 0xFFFFFFFFFFFFFFF8))
        {
          unint64_t v100 = atomic_load(MEMORY[0x263F90550]);
          if (!v100) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
          }
          long long v98 = v202;
          if (((unint64_t)v202 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v100 + 232) & 0xFFFFFFFFFFFFFFF8))
          {
            long long v98 = v202;
            if (((unint64_t)v202 & 0xFFFFFFFFFFFFFFF8) != (*v101 & 0xFFFFFFFFFFFFFFF8))
            {
              std::string::size_type v102 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
              if (!v102) {
                std::string::size_type v102 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
              }
              pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput((uint64_t *)&v204, v186, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v202, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v102 + 88));
              pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
              if ((v205 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v205 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204.__r_.__value_.__r.__words[2]);
              if (v204.__r_.__value_.__l.__size_) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v204.__r_.__value_.__l.__size_);
              }
              long long v98 = v202;
            }
          }
        }
      }
      if ((v98 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v224 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
      if (*((void *)&v222 + 1)) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
      }
      v93 += 32;
    }
    while (v94 + 32 != (char *)v92);
  }
  *(void *)&long long v222 = &v218;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v213);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v209);
  if ((v210 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v210 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_333:
  if ((v211 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v211 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*((void *)&v212 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v212 + 1));
  }
}

void sub_23F7711A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51)
{
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  MEMORY[0x2455CF0D0](v52 - 208);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  MEMORY[0x2455CF0D0](&__p);
  MEMORY[0x2455CECB0](a17);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v52 - 248));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a47);
  if ((a48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::anonymous namespace'::_Context::_BindNodeGraph(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a3, uint64_t a4)
{
  std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>((uint64_t)&v55, a4);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v55, &v36);
  NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v36);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v64, a2, NameToken);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
  if (v56) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v56);
  }
  if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
  {
    uint64_t v9 = (void *)(*a1 + 48);
    if (*(char *)(*a1 + 71) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
    if (*(char *)(String + 23) >= 0) {
      uint64_t v12 = String;
    }
    else {
      uint64_t v12 = *(void *)String;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_BindNodeGraph %s - %s\n", v11, v9, v12);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a4))
  {
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36))
    {
      int v55 = *(_DWORD *)a4;
      uint64_t v13 = *(void *)(a4 + 8);
      uint64_t v56 = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v57, (_DWORD *)(a4 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v58, (_DWORD *)(a4 + 20));
      uint64_t v14 = *(void *)(a4 + 24);
      uint64_t v59 = v14;
      if ((v14 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v59 &= 0xFFFFFFFFFFFFFFF8;
      }
      std::map<std::string,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100]((uint64_t)&v60, (const void ***)(a4 + 32));
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36, &v63);
    }
    else
    {
    }
    if ((v39 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
    if (v37) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v37);
    }
  }
  else
  {
  }
  IsValid = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v55);
  if (IsValid)
  {
    unint64_t v16 = v36;
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v36, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v55);
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get();
      int v17 = v37;
      if (v37 && atomic_fetch_add_explicit((atomic_uint *volatile)v37 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v17 + 8))(v17);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v43 = MEMORY[0x263F90760] + 16;
    }
    if (v44 && (v44[2].__shared_owners_ & 0x800) == 0 && (*(unsigned int (**)(uint64_t *))(v43 + 32))(&v43))
    {
      MEMORY[0x2455CF830](&v36, v16);
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(&v51, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v43, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v36);
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_63:
      MEMORY[0x2455CF040](&v43);
      IsOutput = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput();
      if (IsOutput)
      {
        long long v29 = (std::__shared_weak_count *)a1[1];
        uint64_t v43 = *a1;
        uint64_t v44 = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
        if ((v39 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
        if (v37) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v37);
        }
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        goto LABEL_105;
      }
      if (*((char *)v50 + 23) < 0)
      {
        if (v50[1])
        {
LABEL_74:
          if (*(char *)(v16 + 23) < 0)
          {
            if (*(void *)(v16 + 8)) {
              goto LABEL_76;
            }
          }
          else if (*(unsigned char *)(v16 + 23))
          {
LABEL_76:
            MEMORY[0x2455CF830](&v49, v16);
LABEL_77:
            MEMORY[0x2455CF830](&v36, v50);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v48, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v64, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v36);
            if ((v36 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>((uint64_t)&v36, a4);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v43, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v36);
            MEMORY[0x2455CF830](&v47, v50);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v41, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v64, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v47);
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
            if ((v47 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            std::string::size_type v30 = v44;
            if (v44
              && atomic_fetch_add_explicit((atomic_uint *volatile)&v44->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
            {
              ((void (*)(std::__shared_weak_count *))v30->~__shared_weak_count_0)(v30);
            }
            if ((v39 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
            if (v37) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v37);
            }
            if (v66 && (*(unsigned char *)(v66 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v65 + 32))(&v65))
            {
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput(&v43, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v65, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v49);
              if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
              {
                uint64_t v31 = (std::__shared_weak_count *)a1[1];
                uint64_t v41 = *a1;
                uint64_t v42 = v31;
                if (v31) {
                  atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
                if ((v39 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
                if (v37) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v37);
                }
                if (v42) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v42);
                }
              }
              else
              {
                unint64_t v36 = (unint64_t)"CoreRealityIO/mtlxToUsdShade.cpp";
                int v37 = "_BindNodeGraph";
                uint64_t v38 = 1763;
                unint64_t v39 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_Context::_BindNodeGraph(const mx::"
                                        "ConstInputPtr &, const SdfPath &, const UsdShadeConnectableAPI &, const _NodeGraph &)";
                char v40 = 0;
                pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
                pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
              }
              if ((v46 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
              if (v44) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v44);
              }
            }
            else
            {
              unint64_t v36 = (unint64_t)"CoreRealityIO/mtlxToUsdShade.cpp";
              int v37 = "_BindNodeGraph";
              uint64_t v38 = 1766;
              unint64_t v39 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_Context::_BindNodeGraph(const mx::Co"
                                      "nstInputPtr &, const SdfPath &, const UsdShadeConnectableAPI &, const _NodeGraph &)";
              char v40 = 0;
              pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
            }
            MEMORY[0x2455CECB0](&v65);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
            if ((v49 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            goto LABEL_105;
          }
          uint64_t v33 = (uint64_t *)atomic_load(&realityio::mtlx::UsdMtlxTokens);
          if (!v33) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::mtlx::UsdMtlxTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::mtlx::UsdMtlxTokens_StaticTokenType>>::_TryToCreateData();
          }
          uint64_t v34 = *v33;
          uint64_t v49 = v34;
          if ((v34 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v49 &= 0xFFFFFFFFFFFFFFF8;
          }
          goto LABEL_77;
        }
      }
      else if (*((unsigned char *)v50 + 23))
      {
        goto LABEL_74;
      }
      unint64_t v36 = (unint64_t)"CoreRealityIO/mtlxToUsdShade.cpp";
      int v37 = "_BindNodeGraph";
      uint64_t v38 = 1772;
      unint64_t v39 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_Context::_BindNodeGraph(const mx::ConstInput"
                              "Ptr &, const SdfPath &, const UsdShadeConnectableAPI &, const _NodeGraph &)";
      char v40 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(a3, &v43);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
LABEL_105:
      if ((v54 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
      if (v52) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v52);
      }
      goto LABEL_109;
    }
    int v35 = a1;
    BOOL v18 = a3;
    uint64_t v19 = v61;
    if (v61)
    {
      uint64_t v20 = &v61;
      do
      {
        char v21 = v20;
        uint64_t v22 = v19 + 4;
        BOOL v23 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v62, (const void **)v19 + 4, (const void **)v16);
        uint64_t v24 = v19 + 1;
        if (!v23)
        {
          uint64_t v24 = v19;
          uint64_t v20 = (void **)v19;
        }
        uint64_t v19 = (void *)*v24;
      }
      while (*v24);
      if (v20 != &v61)
      {
        unint64_t v25 = v23 ? (const void **)(v21 + 4) : (const void **)v22;
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v62, (const void **)v16, v25))
        {
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v36, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v55);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v41, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v20 + 7));
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
            uint64_t v26 = v37;
            if (v37 && atomic_fetch_add_explicit((atomic_uint *volatile)v37 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
              (*(void (**)(const char *))(*(void *)v26 + 8))(v26);
            }
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild((uint64_t *)&v36, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v55, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v20 + 7));
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            uint64_t v65 = MEMORY[0x263F906F0] + 16;
            if ((v39 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
            if (v37) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v37);
            }
          }
          if (v66 && (*(unsigned char *)(v66 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v65 + 32))(&v65))
          {
            char v27 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::mtlx::UsdMtlxTokens);
            if (!v27) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::mtlx::UsdMtlxTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::mtlx::UsdMtlxTokens_StaticTokenType>>::_TryToCreateData();
            }
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput(&v51, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v65, v27);
            MEMORY[0x2455CECB0](&v65);
            goto LABEL_62;
          }
          MEMORY[0x2455CECB0](&v65);
        }
      }
    }
    LODWORD(v51) = 3;
    uint64_t v52 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v54 = 0;
LABEL_62:
    a3 = v18;
    a1 = v35;
    goto LABEL_63;
  }
LABEL_109:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(v61);
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
  if (v56) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v56);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v64);
}

void sub_23F77246C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a13);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a20);
  MEMORY[0x2455CECB0](v33 - 112);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a25);
  if ((a26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a28);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v33 - 120));
  _Unwind_Resume(a1);
}

void sub_23F7729E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455D2BD0](v12, 0x60C40F64FA5DBLL);
      _Unwind_Resume(a1);
    }
  }
}

void realityio::mtlx::anonymous namespace'::_Context::_AddInput(realityio::mtlx::_anonymous_namespace_ *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a3)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v8 = *(std::string **)a2;
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::string **)a2;
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_23F772B34(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::anonymous namespace'::_Context::_AddNodeGraph(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v8) & 1) == 0)
  {
    if (*(void *)a3)
    {
      if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
      {
        uint64_t v9 = (void *)(*(void *)a3 + 48);
        if (*(char *)(*(void *)a3 + 71) < 0) {
          uint64_t v9 = (void *)*v9;
        }
        uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 40));
        if (*(char *)(String + 23) >= 0) {
          uint64_t v12 = String;
        }
        else {
          uint64_t v12 = *(void *)String;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add node graph: %s at path %s\n", v11, v9, v12);
      }
      unint64_t v13 = *(void *)a3;
      uint64_t v14 = *(std::__shared_weak_count **)(a3 + 8);
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = v27;
      unint64_t v26 = v13;
      char v27 = v14;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      uint64_t v16 = *(std::string **)a3;
      int v17 = *(std::__shared_weak_count **)(a3 + 8);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
      {
        uint64_t v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 40));
        if (*(char *)(v18 + 23) >= 0) {
          uint64_t v20 = v18;
        }
        else {
          uint64_t v20 = *(void *)v18;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add implicit node graph at path %s\n", v19, v20);
      }
      unint64_t v21 = *a4;
      uint64_t v22 = (std::__shared_weak_count *)a4[1];
      if (v22)
      {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v23 = v27;
      unint64_t v26 = v21;
      char v27 = v22;
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
    }
  }
}

void sub_23F772D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::mtlx::UsdMtlxTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::mtlx::UsdMtlxTokens_StaticTokenType>>::_TryToCreateData()
{
}

void sub_23F772DEC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C405399E965);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void **std::vector<std::shared_ptr<RIO_MTLX::Element>>::emplace_back<std::shared_ptr<RIO_MTLX::Element> const&>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F772F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

std::__shared_weak_count *realityio::mtlx::anonymous namespace'::_Context::_AddCollection(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *a1, uint64_t a2, uint64_t *a3, uint64_t **a4)
{
  unint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  unint64_t v11 = a4 + 1;
  uint64_t v10 = a4[1];
  if (!v10)
  {
    uint64_t v12 = a4 + 1;
LABEL_9:
    uint64_t v14 = (uint64_t *)operator new(0x30uLL);
    uint64_t v15 = v14;
    v14[4] = v8;
    v14[5] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t *v14 = 0;
    v14[1] = 0;
    v14[2] = (uint64_t)v12;
    const char *v11 = v14;
    uint64_t v16 = (uint64_t *)**a4;
    if (v16)
    {
      *a4 = v16;
      uint64_t v15 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a4[1], v15);
    a4[2] = (uint64_t *)((char *)a4[2] + 1);
    long long v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)a2);
    uint64_t v66 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(&v62, v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v66);
    if ((v66 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v18 = (std::string *)*a3;
    uint64_t v19 = (std::__shared_weak_count *)a3[1];
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v18) {
    else
    }
      uint64_t v56 = 0;
    uint64_t v54 = a1;
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply();
    uint64_t v20 = *a3;
    uint64_t v21 = *a3 + 48;
    uint64_t v22 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>(a2 + 152, v75, (const void **)v21);
    BOOL v23 = *v22;
    if (!*v22)
    {
      uint64_t v24 = v22;
      unint64_t v25 = (char *)operator new(0x58uLL);
      unint64_t v26 = v25;
      uint64_t v71 = (uint64_t *)v25;
      uint64_t v72 = (std::__shared_weak_count *)(a2 + 160);
      char v73 = 0;
      if (*(char *)(v20 + 71) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v25 + 32), *(const std::string::value_type **)(v20 + 48), *(void *)(v20 + 56));
      }
      else
      {
        long long v27 = *(_OWORD *)v21;
        *((void *)v25 + 6) = *(void *)(v21 + 16);
        *((_OWORD *)v25 + 2) = v27;
      }
      LODWORD(v66) = 1;
      uint64_t v67 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      unint64_t v69 = 0;
      v55[0] = 0;
      *pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)(v26 + 56), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v66, (const pxrInternal__aapl__pxrReserved__::TfToken *)v55) = MEMORY[0x263F90718] + 16;
      if ((v69 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
      if (v67) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v67);
      }
      char v73 = 1;
      BOOL v23 = v71;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)(a2 + 152), (uint64_t)v75[0], v24, v71);
      uint64_t v71 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>>>>::reset[abi:ne180100]((uint64_t)&v71);
    }
    uint64_t v29 = (uint64_t)v58;
    if (v58) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v58[2], 1uLL, memory_order_relaxed);
    }
    uint64_t v30 = v23[8];
    v23[8] = v29;
    uint64_t v31 = v54;
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    v32 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v23 + 7);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v23 + 9), &v59);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v23 + 76, &v60);
    uint64_t v53 = v23 + 10;
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(v23 + 10, &v61);
    MEMORY[0x2455CEEA0](&v57);
    if ((v56 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(&v66, (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v23 + 7));
    uint64_t v33 = (std::__shared_weak_count *)a3[1];
    int v57 = (unsigned __int8 *)*a3;
    int v58 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if ((v69 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
    uint64_t v34 = (realityio::mtlx::_anonymous_namespace_ *)v67;
    if (v67) {
      uint64_t v34 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v67);
    }
    unint64_t v36 = (std::string *)v75[0];
    if (*((char *)v75[0] + 23) < 0)
    {
      if (!v75[0][1]) {
        goto LABEL_70;
      }
    }
    else if (!*((unsigned char *)v75[0] + 23))
    {
      goto LABEL_70;
    }
    int v37 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS((RIO_MTLX *)v35);
    RIO_MTLX::splitString(v36, v37, (uint64_t)&v57);
    uint64_t v38 = v57;
    unint64_t v39 = (unsigned __int8 *)v58;
    if (v57 != (unsigned __int8 *)v58)
    {
      do
      {
        RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)*a3, &v66);
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Collection>(v66, v38, &v71);
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
        if (v71)
        {
          char v40 = v72;
          v55[0] = v71;
          v55[1] = (uint64_t *)v72;
          if (v72) {
            atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v40) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          if (v67
            && (v67[2].__shared_owners_ & 0x800) == 0
            && (*(unsigned int (**)(uint64_t *))(v66 + 32))(&v66))
          {
            pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath((uint64_t *)v55, (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v66);
            pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IncludePath(v32, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v55);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v55);
          }
          MEMORY[0x2455CEEA0](&v66);
        }
        if (v72) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v72);
        }
        v38 += 24;
      }
      while (v38 != v39);
    }
    uint64_t v66 = (uint64_t)&v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
    uint64_t v31 = v54;
LABEL_70:
    ActiveGeomPrefix = RIO_MTLX::Element::getActiveGeomPrefix((RIO_MTLX::Element *)*a3);
    uint64_t v43 = (std::string *)v55[0];
    if (*((char *)v55[0] + 23) < 0)
    {
      if (!v55[0][1]) {
        goto LABEL_83;
      }
    }
    else if (!*((unsigned char *)v55[0] + 23))
    {
      goto LABEL_83;
    }
    uint64_t v44 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS((RIO_MTLX *)v42);
    RIO_MTLX::splitString(v43, v44, (uint64_t)&v57);
    uint64_t v46 = (const void **)v57;
    uint64_t v45 = (const void **)&v58->__vftable;
    if (v57 != (unsigned __int8 *)v58)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(&v66, v32);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)ActiveGeomPrefix, v46, (uint64_t)&v71);
        if (v74 < 0) {
          operator delete(v71);
        }
        if ((v69 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
        if (v67) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v67);
        }
        v46 += 3;
      }
      while (v46 != v45);
    }
    uint64_t v66 = (uint64_t)&v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
LABEL_83:
    uint64_t v48 = (std::string *)v55[0];
    if (*((char *)v55[0] + 23) < 0)
    {
      if (!v55[0][1]) {
        goto LABEL_96;
      }
    }
    else if (!*((unsigned char *)v55[0] + 23))
    {
      goto LABEL_96;
    }
    uint64_t v49 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS((RIO_MTLX *)v47);
    RIO_MTLX::splitString(v48, v49, (uint64_t)&v57);
    uint64_t v51 = (const void **)v57;
    uint64_t v50 = (const void **)&v58->__vftable;
    if (v57 != (unsigned __int8 *)v58)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExcludesRel(&v66, v32);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)ActiveGeomPrefix, v51, (uint64_t)&v71);
        if (v74 < 0) {
          operator delete(v71);
        }
        if ((v69 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
        if (v67) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v67);
        }
        v51 += 3;
      }
      while (v51 != v50);
    }
    uint64_t v66 = (uint64_t)&v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
LABEL_96:
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(void *)uint64_t v31 = MEMORY[0x263F90710] + 16;
    uint64_t v52 = *v53;
    *((void *)v31 + 3) = *v53;
    if ((v52 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *((void *)v31 + 3) &= 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)uint64_t v31 = MEMORY[0x263F90718] + 16;
    if ((v65 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v64);
    uint64_t result = v63;
    if (!v63) {
      return result;
    }
    return (std::__shared_weak_count *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)result);
  }
  while (1)
  {
    while (1)
    {
      uint64_t v12 = (uint64_t **)v10;
      unint64_t v13 = v10[4];
      if (v13 <= v8) {
        break;
      }
      uint64_t v10 = *v12;
      unint64_t v11 = v12;
      if (!*v12) {
        goto LABEL_9;
      }
    }
    if (v13 >= v8) {
      break;
    }
    uint64_t v10 = v12[1];
    if (!v10)
    {
      unint64_t v11 = v12 + 1;
      goto LABEL_9;
    }
  }
  uint64_t v66 = (uint64_t)"CoreRealityIO/mtlxToUsdShade.cpp";
  uint64_t v68 = 1605;
  unint64_t v69 = (unint64_t)"UsdCollectionAPI realityio::mtlx::(anonymous namespace)::_Context::_AddCollection(const mx::Co"
                          "nstCollectionPtr &, std::set<mx::ConstCollectionPtr> *)";
  char v70 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
  LODWORD(v66) = 1;
  uint64_t v67 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  unint64_t v69 = 0;
  uint64_t v62 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v66, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v62);
  *(void *)a1 = MEMORY[0x263F90718] + 16;
  if ((v69 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
  uint64_t result = v67;
  if (v67) {
    return (std::__shared_weak_count *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)result);
  }
  return result;
}

void sub_23F7738F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>>>>::reset[abi:ne180100](v8 - 120);
  MEMORY[0x2455CEEA0]((uint64_t *)va);
  if ((a7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  _Unwind_Resume(a1);
}

void realityio::mtlx::anonymous namespace'::_Context::_AddGeom(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t a3)
{
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString())
  {
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)MEMORY[0x2455CF7A0](&v10, a3);
    uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  else
  {
    v8[0] = "CoreRealityIO/mtlxToUsdShade.cpp";
    v8[1] = "_AddGeom";
    v8[2] = 1692;
    v8[3] = "void realityio::mtlx::(anonymous namespace)::_Context::_AddGeom(const UsdRelationship &, const std::string &) const";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (SHIBYTE(v13) < 0) {
    operator delete(v11);
  }
}

void sub_23F773C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (*(char *)(v17 - 33) < 0) {
    operator delete(*(void **)(v17 - 56));
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *uint64_t result = MEMORY[0x263F90710] + 16;
  uint64_t v5 = *(void *)a3;
  result[3] = *(void *)a3;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(unint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  while (2)
  {
    uint64_t v12 = a2 - 3;
    unint64_t v101 = (unint64_t)a2;
    uint64_t v103 = a2 - 6;
    unint64_t v99 = a2 - 9;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 3);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (std::less<std::string>::operator()[abi:ne180100](a3, v12, (const void **)a1))
                {
                  long long v42 = *(_OWORD *)a1;
                  std::string v106 = *(const void **)(a1 + 16);
                  long long v105 = v42;
                  long long v43 = *(_OWORD *)v12;
                  *(void *)(a1 + 16) = v12[2];
                  *(_OWORD *)a1 = v43;
                  long long v44 = v105;
                  v12[2] = v106;
                  *(_OWORD *)uint64_t v12 = v44;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), v12, a3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)v12, a3);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a1 + 72), (long long *)v12, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v14 <= 575)
          {
            uint64_t v45 = (const void **)(a1 + 24);
            BOOL v47 = (const void **)a1 == a2 || v45 == a2;
            if (a5)
            {
              if (!v47)
              {
                uint64_t v48 = 0;
                unint64_t v49 = a1;
                do
                {
                  uint64_t v50 = (const void **)v49;
                  unint64_t v49 = (unint64_t)v45;
                  if (std::less<std::string>::operator()[abi:ne180100](a3, v45, v50))
                  {
                    long long v51 = *(_OWORD *)v49;
                    std::string v106 = *(const void **)(v49 + 16);
                    long long v105 = v51;
                    *(void *)(v49 + 8) = 0;
                    *(void *)(v49 + 16) = 0;
                    *(void *)unint64_t v49 = 0;
                    uint64_t v52 = v48;
                    do
                    {
                      uint64_t v53 = a1 + v52;
                      uint64_t v54 = (void **)(a1 + v52 + 24);
                      if (*(char *)(a1 + v52 + 47) < 0) {
                        operator delete(*v54);
                      }
                      *(_OWORD *)uint64_t v54 = *(_OWORD *)v53;
                      *(void *)(a1 + v52 + 40) = *(void *)(v53 + 16);
                      *(unsigned char *)(v53 + 23) = 0;
                      *(unsigned char *)uint64_t v53 = 0;
                      if (!v52)
                      {
                        uint64_t v56 = a1;
                        goto LABEL_90;
                      }
                      v52 -= 24;
                    }
                    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v105, (const void **)(v52 + a1)));
                    int v55 = *(char *)(a1 + v52 + 47);
                    uint64_t v56 = a1 + v52 + 24;
                    if (v55 < 0) {
                      operator delete(*(void **)v56);
                    }
LABEL_90:
                    a2 = (const void **)v101;
                    long long v57 = v105;
                    *(void *)(v56 + 16) = v106;
                    *(_OWORD *)uint64_t v56 = v57;
                  }
                  uint64_t v45 = (const void **)(v49 + 24);
                  v48 += 24;
                }
                while ((const void **)(v49 + 24) != a2);
              }
            }
            else if (!v47)
            {
              unint64_t v89 = a1 - 24;
              do
              {
                v90 = (const void **)a1;
                a1 = (unint64_t)v45;
                if (std::less<std::string>::operator()[abi:ne180100](a3, v45, v90))
                {
                  long long v91 = *(_OWORD *)a1;
                  std::string v106 = *(const void **)(a1 + 16);
                  long long v105 = v91;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v92 = v89;
                  do
                  {
                    v93 = (void **)(v92 + 48);
                    if (*(char *)(v92 + 71) < 0) {
                      operator delete(*v93);
                    }
                    *(_OWORD *)v93 = *(_OWORD *)(v92 + 24);
                    *(void *)(v92 + 64) = *(void *)(v92 + 40);
                    *(unsigned char *)(v92 + 47) = 0;
                    *(unsigned char *)(v92 + 24) = 0;
                    BOOL v94 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v105, (const void **)v92);
                    v92 -= 24;
                  }
                  while (v94);
                  int v95 = *(char *)(v92 + 71);
                  unint64_t v96 = v92 + 48;
                  if (v95 < 0) {
                    operator delete(*(void **)v96);
                  }
                  long long v97 = v105;
                  *(void *)(v96 + 16) = v106;
                  *(_OWORD *)unint64_t v96 = v97;
                }
                uint64_t v45 = (const void **)(a1 + 24);
                v89 += 24;
              }
              while ((const void **)(a1 + 24) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((const void **)a1 != a2)
            {
              int64_t v58 = (v15 - 2) >> 1;
              int64_t v104 = v58;
              do
              {
                int64_t v59 = v58;
                if (v104 >= v58)
                {
                  uint64_t v60 = (2 * v58) | 1;
                  unint64_t v61 = a1 + 24 * v60;
                  if (2 * v58 + 2 < (uint64_t)v15
                    && std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 + 24 * v60), (const void **)(v61 + 24)))
                  {
                    v61 += 24;
                    uint64_t v60 = 2 * v59 + 2;
                  }
                  unint64_t v62 = a1 + 24 * v59;
                  if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v61, (const void **)v62))
                  {
                    long long v63 = *(_OWORD *)v62;
                    std::string v106 = *(const void **)(v62 + 16);
                    long long v105 = v63;
                    *(void *)(v62 + 8) = 0;
                    *(void *)(v62 + 16) = 0;
                    *(void *)unint64_t v62 = 0;
                    while (1)
                    {
                      unint64_t v64 = v61;
                      if (*(char *)(v62 + 23) < 0) {
                        operator delete(*(void **)v62);
                      }
                      long long v65 = *(_OWORD *)v61;
                      *(void *)(v62 + 16) = *(void *)(v61 + 16);
                      *(_OWORD *)unint64_t v62 = v65;
                      *(unsigned char *)(v61 + 23) = 0;
                      *(unsigned char *)unint64_t v61 = 0;
                      if (v104 < v60) {
                        break;
                      }
                      uint64_t v66 = (2 * v60) | 1;
                      unint64_t v61 = a1 + 24 * v66;
                      uint64_t v67 = 2 * v60 + 2;
                      if (v67 < (uint64_t)v15
                        && std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 + 24 * v66), (const void **)(v61 + 24)))
                      {
                        v61 += 24;
                        uint64_t v66 = v67;
                      }
                      unint64_t v62 = v64;
                      uint64_t v60 = v66;
                      if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v61, (const void **)&v105))
                      {
                        if (*(char *)(v64 + 23) < 0) {
                          operator delete(*(void **)v64);
                        }
                        break;
                      }
                    }
                    long long v68 = v105;
                    *(void *)(v64 + 16) = v106;
                    *(_OWORD *)unint64_t v64 = v68;
                    a2 = (const void **)v101;
                  }
                }
                int64_t v58 = v59 - 1;
              }
              while (v59);
              int64_t v69 = v14 / 0x18uLL;
              do
              {
                uint64_t v70 = 0;
                long long v98 = *(const void **)a1;
                *(void *)&long long v107 = *(void *)(a1 + 8);
                *(void *)((char *)&v107 + 7) = *(void *)(a1 + 15);
                char v100 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                uint64_t v71 = v69 - 2;
                std::string::size_type v102 = a2;
                if (v69 < 2) {
                  uint64_t v71 = v69 - 1;
                }
                uint64_t v72 = v71 >> 1;
                unint64_t v73 = a1;
                do
                {
                  uint64_t v74 = v73 + 24 * v70 + 24;
                  uint64_t v75 = 2 * v70;
                  uint64_t v70 = (2 * v70) | 1;
                  uint64_t v76 = v75 + 2;
                  if (v75 + 2 < v69
                    && std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v74, (const void **)(v74 + 24)))
                  {
                    v74 += 24;
                    uint64_t v70 = v76;
                  }
                  if (*(char *)(v73 + 23) < 0) {
                    operator delete(*(void **)v73);
                  }
                  long long v77 = *(_OWORD *)v74;
                  *(void *)(v73 + 16) = *(void *)(v74 + 16);
                  *(_OWORD *)unint64_t v73 = v77;
                  *(unsigned char *)(v74 + 23) = 0;
                  *(unsigned char *)uint64_t v74 = 0;
                  unint64_t v73 = v74;
                }
                while (v70 <= v72);
                a2 = v102 - 3;
                if ((const void **)v74 == v102 - 3)
                {
                  *(void *)uint64_t v74 = v98;
                  uint64_t v87 = *(void *)((char *)&v107 + 7);
                  *(void *)(v74 + 8) = v107;
                  *(void *)(v74 + 15) = v87;
                  *(unsigned char *)(v74 + 23) = v100;
                }
                else
                {
                  long long v78 = *(_OWORD *)a2;
                  *(void *)(v74 + 16) = *(v102 - 1);
                  *(_OWORD *)uint64_t v74 = v78;
                  *(v102 - 3) = v98;
                  uint64_t v79 = (const void *)v107;
                  *(const void **)((char *)v102 - 9) = *(const void **)((char *)&v107 + 7);
                  *(v102 - 2) = v79;
                  *((unsigned char *)v102 - 1) = v100;
                  uint64_t v80 = v74 - a1 + 24;
                  if (v80 >= 25)
                  {
                    unint64_t v81 = (v80 / 0x18uLL - 2) >> 1;
                    unint64_t v82 = a1 + 24 * v81;
                    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v82, (const void **)v74))
                    {
                      long long v83 = *(_OWORD *)v74;
                      std::string v106 = *(const void **)(v74 + 16);
                      long long v105 = v83;
                      *(void *)(v74 + 8) = 0;
                      *(void *)(v74 + 16) = 0;
                      *(void *)uint64_t v74 = 0;
                      while (1)
                      {
                        uint64_t v84 = v82;
                        if (*(char *)(v74 + 23) < 0) {
                          operator delete(*(void **)v74);
                        }
                        long long v85 = *(_OWORD *)v82;
                        *(void *)(v74 + 16) = *(void *)(v82 + 16);
                        *(_OWORD *)uint64_t v74 = v85;
                        *(unsigned char *)(v82 + 23) = 0;
                        *(unsigned char *)unint64_t v82 = 0;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        unint64_t v82 = a1 + 24 * v81;
                        uint64_t v74 = v84;
                        if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v82, (const void **)&v105))
                        {
                          if (*(char *)(v84 + 23) < 0) {
                            operator delete(*(void **)v84);
                          }
                          break;
                        }
                      }
                      long long v86 = v105;
                      *(void *)(v84 + 16) = v106;
                      *(_OWORD *)uint64_t v84 = v86;
                    }
                  }
                }
              }
              while (v69-- > 2);
            }
            return;
          }
          unint64_t v16 = a1 + 24 * (v15 >> 1);
          if ((unint64_t)v14 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24 * (v15 >> 1)), v12, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 24), (const void **)(a1 + 24 * (v15 >> 1) - 24), v103, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 48), (const void **)(a1 + 24 + 24 * (v15 >> 1)), v99, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 24 * (v15 >> 1) - 24), (const void **)v16, (const void **)(a1 + 24 + 24 * (v15 >> 1)), a3);
            long long v17 = *(_OWORD *)a1;
            std::string v106 = *(const void **)(a1 + 16);
            long long v105 = v17;
            uint64_t v18 = *(void *)(v16 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(void *)(a1 + 16) = v18;
            long long v19 = v105;
            *(void *)(v16 + 16) = v106;
            *(_OWORD *)unint64_t v16 = v19;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 24 * (v15 >> 1)), (const void **)a1, v12, a3);
          }
          --a4;
          a2 = (const void **)v101;
          if ((a5 & 1) != 0
            || std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 - 24), (const void **)a1))
          {
            break;
          }
          long long v32 = *(_OWORD *)a1;
          uint64_t v108 = *(void *)(a1 + 16);
          long long v107 = v32;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v107, v12))
          {
            unint64_t v13 = a1;
            do
              v13 += 24;
            while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v107, (const void **)v13));
          }
          else
          {
            uint64_t v33 = (const void **)(a1 + 24);
            do
            {
              unint64_t v13 = (unint64_t)v33;
              if ((unint64_t)v33 >= v101) {
                break;
              }
              BOOL v34 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v107, v33);
              uint64_t v33 = (const void **)(v13 + 24);
            }
            while (!v34);
          }
          unint64_t v35 = v101;
          if (v13 < v101)
          {
            unint64_t v35 = v101;
            do
              v35 -= 24;
            while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v107, (const void **)v35));
          }
          while (v13 < v35)
          {
            long long v36 = *(_OWORD *)v13;
            std::string v106 = *(const void **)(v13 + 16);
            long long v105 = v36;
            long long v37 = *(_OWORD *)v35;
            *(void *)(v13 + 16) = *(void *)(v35 + 16);
            *(_OWORD *)unint64_t v13 = v37;
            long long v38 = v105;
            *(void *)(v35 + 16) = v106;
            *(_OWORD *)unint64_t v35 = v38;
            do
              v13 += 24;
            while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v107, (const void **)v13));
            do
              v35 -= 24;
            while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v107, (const void **)v35));
          }
          unint64_t v39 = (long long *)(v13 - 24);
          BOOL v5 = v13 - 24 >= a1;
          BOOL v6 = v13 - 24 == a1;
          if (v13 - 24 == a1)
          {
            if (*(char *)(v13 - 1) < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v40 = *v39;
            *(void *)(a1 + 16) = *(void *)(v13 - 8);
            *(_OWORD *)a1 = v40;
            *(unsigned char *)(v13 - 1) = 0;
            *(unsigned char *)(v13 - 24) = 0;
          }
          a5 = 0;
          long long v41 = v107;
          *(void *)(v13 - 8) = v108;
          long long *v39 = v41;
        }
        uint64_t v20 = 0;
        long long v21 = *(_OWORD *)a1;
        uint64_t v108 = *(void *)(a1 + 16);
        long long v107 = v21;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        do
          v20 += 24;
        while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(v20 + a1), (const void **)&v107));
        unint64_t v22 = a1 + v20;
        BOOL v23 = (const void **)v101;
        if (v20 == 24)
        {
          BOOL v23 = (const void **)v101;
          do
          {
            if (v22 >= (unint64_t)v23) {
              break;
            }
            v23 -= 3;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](a3, v23, (const void **)&v107));
        }
        else
        {
          do
            v23 -= 3;
          while (!std::less<std::string>::operator()[abi:ne180100](a3, v23, (const void **)&v107));
        }
        unint64_t v13 = a1 + v20;
        if (v22 < (unint64_t)v23)
        {
          uint64_t v24 = v23;
          do
          {
            long long v25 = *(_OWORD *)v13;
            std::string v106 = *(const void **)(v13 + 16);
            long long v105 = v25;
            long long v26 = *(_OWORD *)v24;
            *(void *)(v13 + 16) = v24[2];
            *(_OWORD *)unint64_t v13 = v26;
            long long v27 = v105;
            v24[2] = v106;
            *(_OWORD *)uint64_t v24 = v27;
            do
              v13 += 24;
            while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v13, (const void **)&v107));
            do
              v24 -= 3;
            while (!std::less<std::string>::operator()[abi:ne180100](a3, v24, (const void **)&v107));
          }
          while (v13 < (unint64_t)v24);
        }
        char v28 = (long long *)(v13 - 24);
        if (v13 - 24 == a1)
        {
          if (*(char *)(v13 - 1) < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v29 = *v28;
          *(void *)(a1 + 16) = *(void *)(v13 - 8);
          *(_OWORD *)a1 = v29;
          *(unsigned char *)(v13 - 1) = 0;
          *(unsigned char *)(v13 - 24) = 0;
        }
        long long v30 = v107;
        *(void *)(v13 - 8) = v108;
        *char v28 = v30;
        if (v22 >= (unint64_t)v23) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v13 - 24, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v13 - 24, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v13, v101, a3))
      {
        break;
      }
      if (!v31) {
        goto LABEL_35;
      }
    }
    a2 = (const void **)(v13 - 24);
    if (!v31) {
      continue;
    }
    break;
  }
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = std::less<std::string>::operator()[abi:ne180100](a4, a2, a1);
  BOOL result = std::less<std::string>::operator()[abi:ne180100](a4, a3, a2);
  if (v8)
  {
    if (result)
    {
      int v10 = a1[2];
      long long v11 = *(_OWORD *)a1;
      uint64_t v12 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v12;
    }
    else
    {
      long long v19 = a1[2];
      long long v20 = *(_OWORD *)a1;
      long long v21 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v21;
      *(_OWORD *)a2 = v20;
      a2[2] = v19;
      BOOL result = std::less<std::string>::operator()[abi:ne180100](a4, a3, a2);
      if (!result) {
        return result;
      }
      int v10 = a2[2];
      long long v11 = *(_OWORD *)a2;
      unint64_t v22 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v22;
    }
    *(_OWORD *)a3 = v11;
    a3[2] = v10;
  }
  else if (result)
  {
    unint64_t v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    unint64_t v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    BOOL result = std::less<std::string>::operator()[abi:ne180100](a4, a2, a1);
    if (result)
    {
      unint64_t v16 = a1[2];
      long long v17 = *(_OWORD *)a1;
      uint64_t v18 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v18;
      *(_OWORD *)a2 = v17;
      a2[2] = v16;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(void *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a1 + 72), (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v13, v12))
    {
      long long v22 = *(_OWORD *)v13;
      uint64_t v23 = *(void *)(v13 + 16);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(unsigned char *)(v17 + 71) = 0;
        *(unsigned char *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }
        BOOL v19 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2, a3, a5);
  if (std::less<std::string>::operator()[abi:ne180100](a5, (const void **)a4, a3))
  {
    uint64_t v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    if (std::less<std::string>::operator()[abi:ne180100](a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (std::less<std::string>::operator()[abi:ne180100](a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, long long *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4, a6);
  if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((void *)a4 + 2) = v16;
      if (std::less<std::string>::operator()[abi:ne180100](a6, a3, a2))
      {
        BOOL v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (std::less<std::string>::operator()[abi:ne180100](a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::GeomElement const> const,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void realityio::mtlx::anonymous namespace'::VariantAssignments::_Compose(uint64_t a1, const void **a2, const void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = (uint64_t **)(a1 + 96);
    uint64_t v7 = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 88);
    uint64_t v8 = (std::vector<std::pair<std::string, std::string>> *)(a1 + 72);
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v6, v4, (uint64_t)v4);
      if (v9)
      {
        unint64_t v11 = *(void *)(a1 + 80);
        unint64_t v10 = *(void *)(a1 + 88);
        if (v11 >= v10)
        {
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (unint64_t)v8->__begin_) >> 4);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0x555555555555555) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (unint64_t)v8->__begin_) >> 4);
          if (2 * v15 > v14) {
            unint64_t v14 = 2 * v15;
          }
          if (v15 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v16 = 0x555555555555555;
          }
          else {
            unint64_t v16 = v14;
          }
          __v.__end_cap_.__value_ = v7;
          if (v16) {
            long long v17 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)v7, v16);
          }
          else {
            long long v17 = 0;
          }
          __v.__first_ = v17;
          __v.__begin_ = v17 + v13;
          __v.__end_ = __v.__begin_;
          __v.__end_cap_.__value_ = &v17[v16];
          std::pair<std::string,std::string>::pair[abi:ne180100](&__v.__begin_->first, (long long *)v4);
          ++__v.__end_;
          std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(v8, &__v);
          unint64_t v12 = *(void *)(a1 + 80);
          std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
        }
        else
        {
          std::pair<std::string,std::string>::pair[abi:ne180100](*(std::string **)(a1 + 80), (long long *)v4);
          unint64_t v12 = v11 + 48;
          *(void *)(a1 + 80) = v12;
        }
        *(void *)(a1 + 80) = v12;
      }
      v4 += 6;
    }
    while (v4 != a3);
  }
}

void sub_23F774FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::pair<std::string, std::string>> *a10)
{
  *(void *)(v10 + 80) = v11;
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::anonymous namespace'::VariantAssignments::_Get(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v41 = 0;
  long long v42 = 0;
  uint64_t v43 = 0;
  uint64_t v7 = *a3;
  uint64_t v8 = *(long long **)(*a3 + 136);
  char v9 = *(long long **)(v7 + 144);
  if (v8 == v9) {
    goto LABEL_40;
  }
  do
  {
    uint64_t v10 = *(unsigned __int8 *)(*(void *)v8 + 47);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = *(unsigned __int8 *)(*(void *)v8 + 47);
    }
    else {
      uint64_t v11 = *(void *)(*(void *)v8 + 32);
    }
    uint64_t v12 = byte_268C41207;
    if (byte_268C41207 < 0) {
      uint64_t v12 = qword_268C411F8;
    }
    if (v11 == v12)
    {
      unint64_t v13 = (const void **)(*(void *)v8 + 24);
      if (byte_268C41207 >= 0) {
        unint64_t v14 = &qword_268C411F0;
      }
      else {
        unint64_t v14 = (uint64_t *)qword_268C411F0;
      }
      if ((v10 & 0x80) != 0)
      {
        uint64_t v6 = (realityio::mtlx::_anonymous_namespace_ *)memcmp(*v13, v14, *(void *)(*(void *)v8 + 32));
        if (v6) {
          goto LABEL_18;
        }
LABEL_17:
        uint64_t v6 = (realityio::mtlx::_anonymous_namespace_ *)std::vector<std::shared_ptr<RIO_MTLX::Element>>::emplace_back<std::shared_ptr<RIO_MTLX::Element> const&>((uint64_t *)&v41, v8);
        goto LABEL_18;
      }
      if (!*(unsigned char *)(*(void *)v8 + 47)) {
        goto LABEL_17;
      }
      while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v14)
      {
        unint64_t v13 = (const void **)((char *)v13 + 1);
        unint64_t v14 = (uint64_t *)((char *)v14 + 1);
        if (!--v10) {
          goto LABEL_17;
        }
      }
    }
LABEL_18:
    ++v8;
  }
  while (v8 != v9);
  unint64_t v15 = (uint64_t *)v41;
  unint64_t v16 = v42;
  if ((uint64_t *)v41 != v42)
  {
    long long v17 = v42 - 2;
    if ((unint64_t)(v42 - 2) > v41)
    {
      do
      {
        uint64_t v18 = *v15;
        uint64_t *v15 = *v17;
        *long long v17 = v18;
        uint64_t v19 = v15[1];
        v15[1] = v17[1];
        v17[1] = v19;
        v15 += 2;
        v17 -= 2;
      }
      while (v15 < v17);
      unint64_t v15 = (uint64_t *)v41;
      unint64_t v16 = v42;
    }
  }
  if (v15 != v16)
  {
    long long v20 = (uint64_t **)(a2 + 96);
    do
    {
      uint64_t v6 = (realityio::mtlx::_anonymous_namespace_ *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v20, v45, (uint64_t)v45);
      if (v22)
      {
        unint64_t v24 = a1[1];
        unint64_t v23 = a1[2];
        if (v24 >= v23)
        {
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *a1) >> 4);
          unint64_t v27 = v26 + 1;
          if (v26 + 1 > 0x555555555555555) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a1) >> 4);
          if (2 * v28 > v27) {
            unint64_t v27 = 2 * v28;
          }
          if (v28 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v29 = 0x555555555555555;
          }
          else {
            unint64_t v29 = v27;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
          if (v29) {
            long long v30 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)(a1 + 2), v29);
          }
          else {
            long long v30 = 0;
          }
          __v.__first_ = v30;
          __v.__begin_ = v30 + v26;
          __v.__end_ = __v.__begin_;
          __v.__end_cap_.__value_ = &v30[v29];
          ++__v.__end_;
          std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer((std::vector<std::pair<std::string, std::string>> *)a1, &__v);
          unint64_t v25 = a1[1];
          std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
        }
        else
        {
          unint64_t v25 = v24 + 48;
          a1[1] = v25;
        }
        a1[1] = v25;
      }
      v15 += 2;
    }
    while (v15 != v16);
  }
LABEL_40:
  BOOL v31 = (long long *)*a1;
  uint64_t v32 = a1[1];
  if (*a1 != v32)
  {
    for (unint64_t i = v32 - 48; (unint64_t)v31 < i; i -= 48)
    {
      uint64_t v34 = *((void *)v31 + 2);
      long long v35 = *v31;
      uint64_t v36 = *(void *)(i + 16);
      *BOOL v31 = *(_OWORD *)i;
      *((void *)v31 + 2) = v36;
      *(_OWORD *)unint64_t i = v35;
      *(void *)(i + 16) = v34;
      uint64_t v37 = *((void *)v31 + 5);
      long long v38 = *(long long *)((char *)v31 + 24);
      uint64_t v39 = *(void *)(i + 40);
      *(long long *)((char *)v31 + 24) = *(_OWORD *)(i + 24);
      *((void *)v31 + 5) = v39;
      *(_OWORD *)(i + 24) = v38;
      *(void *)(i + 40) = v37;
      v31 += 3;
    }
  }
  __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v41;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_23F775334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__split_buffer<std::pair<std::string, std::string>> *a13)
{
}

void std::allocator_traits<std::allocator<std::pair<std::string,std::string>>>::construct[abi:ne180100]<std::pair<std::string,std::string>,realityio::mtlx::anonymous namespace'::_Attr &,realityio::mtlx::anonymous namespace'::_Attr &,void>(std::string *this, long long *a2, long long **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  uint64_t v7 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v7, *((void *)v7 + 1));
  }
  else
  {
    long long v8 = *v7;
    this[1].__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_23F77541C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100](uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  long long v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)long long v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  return a1;
}

void std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(a1[1]);
    std::__tree<std::pair<std::string,std::string>>::destroy((void *)a1[7]);
    uint64_t v2 = (std::__shared_weak_count *)a1[5];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

void std::__tree<std::pair<std::string,std::string>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::pair<std::string,std::string>>::destroy(*a1);
    std::__tree<std::pair<std::string,std::string>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t **realityio::mtlx::anonymous namespace'::_Attr::_Attr<RIO_MTLX::MaterialAssign const>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a2 + 160), (unsigned __int8 *)&qword_268C41028);
  if (v3) {
    long long v4 = (uint64_t *)(v3 + 40);
  }
  else {
    long long v4 = RIO_MTLX::EMPTY_STRING(0);
  }
  uint64_t v5 = *((unsigned __int8 *)v4 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = v4[1];
  }
  if (!v5) {
    long long v4 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v4);
  }
  *a1 = v4;
  return a1;
}

uint64_t std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](const void **a1, const void **a2)
{
  int v4 = *((char *)a2 + 23);
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  if (v5 >= 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *a1;
  }
  if (v4 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    char v9 = a2;
  }
  else {
    char v9 = *a2;
  }
  if (v8 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = v8;
  }
  int v11 = memcmp(v7, v9, v10);
  BOOL v12 = v6 < v8;
  if (v11) {
    BOOL v12 = v11 < 0;
  }
  if (v12) {
    return 1;
  }
  int v14 = memcmp(v9, v7, v10);
  BOOL v15 = v8 < v6;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  if (v15) {
    return 0;
  }
  uint64_t v18 = (const void **)a2[3];
  long long v17 = a2 + 3;
  unint64_t v16 = v18;
  int v19 = *((char *)v17 + 23);
  char v22 = (const void **)a1[3];
  uint64_t v21 = a1 + 3;
  long long v20 = v22;
  int v23 = *((char *)v21 + 23);
  if (v23 >= 0) {
    size_t v24 = *((unsigned __int8 *)v21 + 23);
  }
  else {
    size_t v24 = (size_t)v21[1];
  }
  if (v23 >= 0) {
    unint64_t v25 = v21;
  }
  else {
    unint64_t v25 = v20;
  }
  if (v19 >= 0) {
    size_t v26 = *((unsigned __int8 *)v17 + 23);
  }
  else {
    size_t v26 = (size_t)v17[1];
  }
  if (v19 >= 0) {
    unint64_t v27 = v17;
  }
  else {
    unint64_t v27 = v16;
  }
  if (v26 >= v24) {
    size_t v28 = v24;
  }
  else {
    size_t v28 = v26;
  }
  int v29 = memcmp(v25, v27, v28);
  if (v29) {
    return v29 < 0;
  }
  else {
    return v24 < v26;
  }
}

void std::unique_ptr<std::__tree_node<std::pair<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::pair<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,realityio::mtlx::anonymous namespace'::VariantAssignments>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,realityio::mtlx::anonymous namespace'::VariantAssignments>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,realityio::mtlx::anonymous namespace'::VariantAssignments>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy((uint64_t)(a1 + 144), *((char **)a1 + 19));
    uint64_t v3 = (void **)(a1 + 120);
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(*((void **)a1 + 13));
    uint64_t v3 = (void **)(a1 + 72);
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v3 = (void **)(a1 + 48);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 5);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

uint64_t *realityio::mtlx::anonymous namespace'::VariantAssignments::GetVariantSelections(uint64_t a1, unint64_t a2)
{
  int v4 = *(void **)(a1 + 56);
  uint64_t v2 = (void *)(a1 + 56);
  uint64_t v3 = v4;
  if (v4)
  {
    int v5 = v2;
    do
    {
      unint64_t v6 = v3[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        size_t v8 = v3;
      }
      else {
        size_t v8 = v3 + 1;
      }
      if (v7) {
        int v5 = v3;
      }
      uint64_t v3 = (void *)*v8;
    }
    while (*v8);
    if (v5 != v2 && v5[4] <= a2) {
      return v5 + 6;
    }
  }
  __n128 result = &qword_268C40E60;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40E08, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_268C40E08))
    {
      qword_268C40E70 = 0;
      qword_268C40E68 = 0;
      qword_268C40E60 = (uint64_t)&qword_268C40E68;
      __cxa_guard_release(&qword_268C40E08);
    }
    return &qword_268C40E60;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t **a3)
{
  int v5 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v12, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    BOOL v7 = v5;
    size_t v8 = *a3;
    char v9 = (uint64_t *)operator new(0x30uLL);
    unint64_t v6 = v9;
    uint64_t v10 = *v8;
    v9[4] = *v8;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v9[4] &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_DWORD *)v9 + 10) = 0;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v7, v9);
  }
  return v6;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::destroy(a1[1]);
    uint64_t v2 = a1[4];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a1);
  }
}

uint64_t RIOBuilderGetTypeID()
{
  if (RIOBuilderGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderGetTypeID::onceToken, &__block_literal_global_35);
  }
  return RIOBuilderGetTypeID::typeID;
}

void __RIOBuilderGetTypeID_block_invoke()
{
  if (!RIOBuilderGetTypeID::typeID) {
    RIOBuilderGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOBuilderCreateWithBuilderInfo(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  return RIOBuilderCreateWithImplementation(a1, a2, a4, a5, a6, a7, a8);
}

uint64_t RIOBuilderCreateWithImplementation(uint64_t a1, __CFString *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  v44[4] = *MEMORY[0x263EF8340];
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  if (a1)
  {
    realityio::CFStringCopyUTF8String(a2, (uint64_t)v33);
    if (v33[0])
    {
      int v17 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v32, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
      }
      else {
        std::string v32 = v34;
      }
      uint64_t v18 = *(void *)(a3 + 16);
      int v19 = *(std::__shared_weak_count **)(a3 + 24);
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v18)
      {
        size_t v28 = (void *)MEMORY[0x2455D3180](v13);
        int v29 = (void *)MEMORY[0x2455D3180](v14);
        long long v30 = (void *)MEMORY[0x2455D3180](v15);
        long long v20 = (void *)MEMORY[0x2455D3180](v16);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24), &v31);
        uint64_t v21 = (std::__shared_weak_count *)operator new(0x170uLL);
        v21->__shared_owners_ = 0;
        v21->__shared_weak_owners_ = 0;
        v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F34A160;
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v22 = MEMORY[0x2455D3180](v28);
        v42[0] = &unk_26F34A1B0;
        v42[1] = v22;
        v42[3] = v42;
        uint64_t v23 = MEMORY[0x2455D3180](v29);
        v41[0] = &unk_26F34A230;
        v41[1] = v23;
        v41[3] = v41;
        uint64_t v24 = MEMORY[0x2455D3180](v30);
        v40[0] = &unk_26F34A2B0;
        v40[1] = v24;
        v40[3] = v40;
        uint64_t v25 = MEMORY[0x2455D3180](v20);
        v39[0] = &unk_26F34A340;
        v39[1] = v25;
        v39[3] = v39;
        std::string::basic_string[abi:ne180100]<0>(__p, "CustomBuilder");
        uint64_t v35 = v18;
        uint64_t v36 = v19;
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__value_func[abi:ne180100]((uint64_t)v44, (uint64_t)v42);
        std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)v41);
        realityio::DynamicBuilder::DynamicBuilder((realityio::Builder *)&v21[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (uint64_t)__p, (uint64_t)&v32, &v35, (uint64_t)v44, (uint64_t)v43);
        std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v43);
        std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v44);
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        if (v38 < 0) {
          operator delete(__p[0]);
        }
        v21[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26F34A3C0;
        std::__function::__value_func<void ()(realityio::Inputs *)>::__value_func[abi:ne180100]((uint64_t)&v21[12].__shared_weak_owners_, (uint64_t)v40);
        std::__function::__value_func<void ()(realityio::Inputs *)>::__value_func[abi:ne180100]((uint64_t)&v21[14], (uint64_t)v39);
        std::__function::__value_func<void ()(realityio::Inputs *)>::~__value_func[abi:ne180100](v39);
        std::__function::__value_func<void ()(realityio::Inputs *)>::~__value_func[abi:ne180100](v40);
        std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v41);
        std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v42);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
        if (RIOBuilderGetTypeID::onceToken != -1) {
          dispatch_once(&RIOBuilderGetTypeID::onceToken, &__block_literal_global_35);
        }
        uint64_t Instance = _CFRuntimeCreateInstance();
        uint64_t v18 = Instance;
        if (Instance)
        {
          *(void *)(Instance + 16) = v21 + 1;
          *(void *)(Instance + 24) = v21;
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v32.__r_.__value_.__l.__data_);
        if ((v17 & 0x80000000) == 0) {
          goto LABEL_29;
        }
      }
      else if ((v17 & 0x80000000) == 0)
      {
        goto LABEL_29;
      }
      operator delete(v34.__r_.__value_.__l.__data_);
      goto LABEL_29;
    }
  }
  uint64_t v18 = 0;
LABEL_29:

  return v18;
}

void sub_23F775E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  operator delete(__p);

  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderCopyIdentifier(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v2 + 24))(&v9);
  uint64_t v5 = v9;
  if ((v9 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t EmptyString = (v9 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    uint64_t v5 = v9;
  }
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(EmptyString + 23) < 0) {
    unint64_t EmptyString = *(void *)EmptyString;
  }
  CFStringRef v7 = CFStringCreateWithCString(0, (const char *)EmptyString, 0x8000100u);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v7;
}

void sub_23F77607C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderCopyBuildOrder()
{
  return 2;
}

uint64_t RIOBuilderCopyDirtyStageSubscription(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 32))(&v6);
  uint64_t v4 = RIOBuilderDirtyStageSubscriptionCreate<std::shared_ptr<realityio::DirtyStageSubscription const> &>(&v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

void sub_23F776154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderDirtyStageSubscriptionCreate<std::shared_ptr<realityio::DirtyStageSubscription const> &>(void *a1)
{
  if (RIOBuilderDirtyStageSubscriptionGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderDirtyStageSubscriptionGetTypeID::onceToken, &__block_literal_global_37);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result)
  {
    uint64_t v3 = a1[1];
    *(void *)(result + 16) = *a1;
    *(void *)(result + 24) = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

uint64_t RIOBuilderCopyInputsDescriptor(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 40))(&v8);
  if (RIOBuilderInputsDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderInputsDescriptorGetTypeID::onceToken, &__block_literal_global_16);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v5 = Instance;
  if (Instance)
  {
    uint64_t v6 = v9;
    *(void *)(Instance + 16) = v8;
    *(void *)(Instance + 24) = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v5;
}

void sub_23F7762FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderCopyOutputsDescriptor(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 48))(&v8);
  if (RIOBuilderOutputsDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderOutputsDescriptorGetTypeID::onceToken, &__block_literal_global_15);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v5 = Instance;
  if (Instance)
  {
    uint64_t v6 = v9;
    *(void *)(Instance + 16) = v8;
    *(void *)(Instance + 24) = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v5;
}

void sub_23F77641C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderCopyPrim(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(v2 + 168);
  if (!v3)
  {
    uint64_t v5 = 0;
    if (!v1) {
      return v5;
    }
    goto LABEL_9;
  }
  CFStringRef v7 = *(atomic_uint **)(*(void *)(*(void *)(v3 + 16) + 8) + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v7);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v7);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v7);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v7, v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 8));
  int v11 = 1;
  uint64_t v5 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v7, &v11);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  if (v1) {
LABEL_9:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  return v5;
}

void sub_23F776544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderCopyPrimPath(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 16)) != 0) {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(v1 + 8));
  }
  else {
    return 0;
  }
}

uint64_t RIOBuilderGetSwiftObject(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2) {
    return *(void *)(v1 + 32);
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v3 = *(void *)(v1 + 32);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void RIOBuilderSetSwiftObject(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
      if (v3)
      {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)(v2 + 32) = a2;
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      else
      {
        *(void *)(v2 + 32) = a2;
      }
    }
  }
}

uint64_t RIOBuilderOutputsCreate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (RIOBuilderOutputsGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderOutputsGetTypeID::onceToken, &__block_literal_global_36);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v6 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = v4;
    *(void *)(Instance + 24) = v3;
    if (!v3) {
      goto LABEL_12;
    }
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else if (!v3)
  {
    goto LABEL_12;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_12:
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return v6;
}

void sub_23F7766F8(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RIOBuilderAddComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::Builder::addComponent(v3, a2);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_23F77677C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RIOBuilderAddComponentByClass(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2;
  std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(v2 + 40), (unint64_t *)&v4, &v4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_23F7767EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void _RIOBuilderCFFinalize(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

BOOL _RIOBuilderCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilder %p>", a1);
}

CFStringRef _RIOBuilderCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilder %p>", a1);
}

void std::__shared_ptr_emplace<realityio::CustomBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F34A160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CustomBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F34A160;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::CustomBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1)
{
  unint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26F34A1B0;
  v2[1] = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F34A1B0;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
  if (v3)
  {
    uint64_t v4 = v3[3];
    *a2 = v3[2];
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    CFRelease(v3);
  }
  else
  {
    uint64_t v5 = (char *)operator new(0x40uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)uint64_t v5 = &unk_26F32FA40;
    *(_OWORD *)(v5 + 40) = 0u;
    *((_DWORD *)v5 + 14) = 1065353216;
    a2[1] = v5;
    *(_OWORD *)(v5 + 24) = 0u;
    *a2 = v5 + 24;
  }
}

void sub_23F776B60(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1)
{
  unint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26F34A230;
  v2[1] = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F34A230;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
  if (v3)
  {
    uint64_t v4 = v3[3];
    *a2 = v3[2];
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    CFRelease(v3);
  }
  else
  {
    uint64_t v5 = (char *)operator new(0x68uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)uint64_t v5 = &unk_26F32FB20;
    *(_OWORD *)(v5 + 40) = 0u;
    *((_DWORD *)v5 + 14) = 1065353216;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_DWORD *)v5 + 24) = 1065353216;
    a2[1] = v5;
    *(_OWORD *)(v5 + 24) = 0u;
    *a2 = v5 + 24;
  }
}

void sub_23F776DC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::__clone(uint64_t a1)
{
  unint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26F34A2B0;
  v2[1] = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F34A2B0;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v3 = (const void *)RIOBuilderInputsCreate<realityio::Inputs *&>(&v4);
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();

  CFRelease(v3);
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::target_type()
{
}

uint64_t RIOBuilderInputsCreate<realityio::Inputs *&>(void *a1)
{
  if (RIOBuilderInputsGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderInputsGetTypeID::onceToken, &__block_literal_global_18);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result) {
    *(void *)(result + 16) = *a1;
  }
  return result;
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::__clone(uint64_t a1)
{
  unint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26F34A340;
  v2[1] = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F34A340;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v3 = (const void *)RIOBuilderInputsCreate<realityio::Inputs *&>(&v4);
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();

  CFRelease(v3);
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::target_type()
{
}

void realityio::CustomBuilder::~CustomBuilder(realityio::CustomBuilder *this)
{
  *(void *)this = &unk_26F34A3C0;
  std::__function::__value_func<void ()(realityio::Inputs *)>::~__value_func[abi:ne180100]((void *)this + 39);
  std::__function::__value_func<void ()(realityio::Inputs *)>::~__value_func[abi:ne180100]((void *)this + 35);
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 23);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26F34A3C0;
  std::__function::__value_func<void ()(realityio::Inputs *)>::~__value_func[abi:ne180100]((void *)this + 39);
  std::__function::__value_func<void ()(realityio::Inputs *)>::~__value_func[abi:ne180100]((void *)this + 35);
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 23);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::Builder::~Builder(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::CustomBuilder::run(realityio::CustomBuilder *this, realityio::Inputs *a2)
{
  uint64_t result = *((void *)this + 38);
  if (result) {
    return std::function<void ()(realityio::Inputs *)>::operator()(result, (uint64_t)a2);
  }
  return result;
}

uint64_t realityio::CustomBuilder::clear(realityio::CustomBuilder *this, realityio::Inputs *a2)
{
  uint64_t result = *((void *)this + 42);
  if (result) {
    return std::function<void ()(realityio::Inputs *)>::operator()(result, (uint64_t)a2);
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(realityio::Inputs *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::function<void ()(realityio::Inputs *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

void *std::__function::__value_func<void ()(realityio::Inputs *)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void realityio::replication::LayerStateDelegate::New(realityio::replication::LayerStateDelegate *this)
{
}

void sub_23F77764C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x10E1C40126BA3C1);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::Receive(realityio::replication::LayerStateDelegate *this, const char *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(NSObject **)(realityio::logObjects(this) + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__sb = 134217984;
    *(void *)&__sb[4] = a3;
    _os_log_debug_impl(&dword_23F4EA000, v5, OS_LOG_TYPE_DEBUG, "Received message of size %zu", __sb, 0xCu);
  }
  v24.__vftable = (std::ios_base_vtbl *)(MEMORY[0x263F8C368] + 16);
  std::streambuf::basic_streambuf();
  int v19 = 12;
  long long v20 = a2;
  uint64_t v21 = a3;
  id v16 = a2;
  int v17 = a2;
  v18[0] = &a2[a3];
  *(void *)__sb = &unk_26F34A500;
  uint64_t v22 = &unk_26F34A600;
  uint64_t v23 = 0;
  v24.__vftable = (std::ios_base_vtbl *)&unk_26F34A628;
  std::ios_base::init(&v24, __sb);
  uint64_t v25 = 0;
  int v26 = -1;
  *(void *)__sb = &unk_26F34A500;
  uint64_t v22 = &unk_26F34A588;
  v24.__vftable = (std::ios_base_vtbl *)&unk_26F34A5B0;
  uint64_t v6 = (realityio *)std::istream::read();
  if ((*((unsigned char *)v18 + *(void *)(*(void *)__sb - 24)) & 5) != 0)
  {
    CFStringRef v7 = *(NSObject **)(realityio::logObjects(v6) + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      uint64_t v8 = "Failed to read version";
LABEL_14:
      _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, v8, buf, 2u);
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(realityio::logObjects(v6) + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v14 = 0;
      _os_log_debug_impl(&dword_23F4EA000, v9, OS_LOG_TYPE_DEBUG, "Version %llu", buf, 0xCu);
    }
    uint64_t v10 = (realityio *)std::istream::read();
    if ((*((unsigned char *)&v24.__precision_ + *(v22 - 3)) & 5) == 0)
    {
      uint64_t v11 = 1;
      goto LABEL_11;
    }
    CFStringRef v7 = *(NSObject **)(realityio::logObjects(v10) + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      uint64_t v8 = "Failed to read";
      goto LABEL_14;
    }
  }
  uint64_t v11 = 0;
LABEL_11:
  boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream((uint64_t)__sb);
  return v11;
}

void sub_23F777F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  boost::optional_detail::optional_base<realityio::replication::PopChildOperation_TfToken>::~optional_base((uint64_t)va);
  boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(uint64_t a1)
{
  return a1;
}

uint64_t realityio::replication::LayerStateDelegate::_IsDirty(realityio::replication::LayerStateDelegate *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t realityio::replication::LayerStateDelegate::_MarkCurrentStateAsClean(uint64_t this)
{
  *(unsigned char *)(this + 40) = 0;
  return this;
}

uint64_t realityio::replication::LayerStateDelegate::_MarkCurrentStateAsDirty(uint64_t this)
{
  *(unsigned char *)(this + 40) = 1;
  return this;
}

uint64_t realityio::replication::LayerStateDelegate::_OnSetField(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  v24[2] = *MEMORY[0x263EF8340];
  *(unsigned char *)(this + 40) = 1;
  if (*(unsigned char *)(this + 48))
  {
    uint64_t v7 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v22 + 1, (_DWORD *)a2 + 1);
    uint64_t v23 = *(void *)a3;
    if ((v23 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v24, a4);
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v13);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::SetFieldOperation::Serialize(&v22, (pxrInternal__aapl__pxrReserved__::TfToken *)v13);
    if ((v17 & 0x10) != 0)
    {
      unint64_t v10 = v20;
      unint64_t v11 = v15;
      if (v20 < v15)
      {
        unint64_t v20 = v15;
        unint64_t v10 = v15;
      }
      uint64_t v8 = __p;
      uint64_t v9 = v19;
      unint64_t v12 = v10 - v14;
      if (v19 - (unsigned char *)__p > v10 - v14)
      {
        uint64_t v9 = (char *)__p + v12;
        int v19 = (char *)__p + v12;
        unint64_t v11 = v14 + (int)v15 - (int)v14;
        unint64_t v15 = v11;
        unint64_t v16 = v10;
      }
      if (v10 < v11)
      {
        unint64_t v20 = v11;
        unint64_t v12 = v11 - v14;
      }
      if (v9 - (unsigned char *)__p > v12)
      {
        uint64_t v9 = (char *)__p + v12;
        int v19 = (char *)__p + v12;
        unint64_t v15 = v14 + (int)v11 - (int)v14;
        unint64_t v16 = v14 + v12;
      }
    }
    else
    {
      uint64_t v8 = __p;
      uint64_t v9 = v19;
    }
    std::function<void ()(char const*,unsigned long)>::operator()(*(void *)(v7 + 80), (uint64_t)v8, v9 - v8);
    v13[1] = &unk_26F34A828;
    if (__p)
    {
      int v19 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2455D2B30](&v21);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v24);
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  }
  return this;
}

void sub_23F778304(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::replication::LayerStateDelegate::_OnSetField(uint64_t a1, uint64_t a2, uint64_t a3, void (***a4)(void, unsigned char *))
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  (**a4)(a4, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 48))(a1, a2, a3, v7);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
}

void sub_23F778430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::_OnSetFieldDictValueByKey(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  v28[2] = *MEMORY[0x263EF8340];
  *(unsigned char *)(this + 40) = 1;
  if (*(unsigned char *)(this + 48))
  {
    uint64_t v9 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v25 + 1, (_DWORD *)a2 + 1);
    uint64_t v26 = *(void *)a3;
    if ((v26 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v27 = *(void *)a4;
    if ((v27 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v28, a5);
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v15);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::SetFieldDictValueByKeyOperation::Serialize(&v25, (pxrInternal__aapl__pxrReserved__::TfToken *)v15);
    if ((v20 & 0x10) != 0)
    {
      unint64_t v12 = v23;
      unint64_t v13 = v18;
      if (v23 < v18)
      {
        unint64_t v23 = v18;
        unint64_t v12 = v18;
      }
      unint64_t v10 = __p;
      unint64_t v11 = v22;
      unint64_t v14 = v12 - v17;
      if (v22 - (unsigned char *)__p > v12 - v17)
      {
        unint64_t v11 = (char *)__p + v14;
        uint64_t v22 = (char *)__p + v14;
        unint64_t v13 = v17 + (int)v18 - (int)v17;
        unint64_t v18 = v13;
        unint64_t v19 = v12;
      }
      if (v12 < v13)
      {
        unint64_t v23 = v13;
        unint64_t v14 = v13 - v17;
      }
      if (v11 - (unsigned char *)__p > v14)
      {
        unint64_t v11 = (char *)__p + v14;
        uint64_t v22 = (char *)__p + v14;
        unint64_t v18 = v17 + (int)v13 - (int)v17;
        unint64_t v19 = v17 + v14;
      }
    }
    else
    {
      unint64_t v10 = __p;
      unint64_t v11 = v22;
    }
    std::function<void ()(char const*,unsigned long)>::operator()(*(void *)(v9 + 80), (uint64_t)v10, v11 - v10);
    unint64_t v16 = &unk_26F34A828;
    if (__p)
    {
      uint64_t v22 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2455D2B30](&v24);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v26 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  }
  return this;
}

void sub_23F7786CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::replication::LayerStateDelegate::_OnSetFieldDictValueByKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (***a5)(void, unsigned char *))
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  (**a5)(a5, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 64))(a1, a2, a3, a4, v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
}

void sub_23F778818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::_OnSetTimeSample(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  v25[2] = *MEMORY[0x263EF8340];
  *(unsigned char *)(this + 40) = 1;
  if (*(unsigned char *)(this + 48))
  {
    uint64_t v7 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, (_DWORD *)a2 + 1);
    double v24 = a3;
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v25, a4);
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v13);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::SetTimeSampleOperation::Serialize((uint64_t)&v22, (pxrInternal__aapl__pxrReserved__::TfToken *)v13);
    if ((v17 & 0x10) != 0)
    {
      unint64_t v10 = v20;
      unint64_t v11 = v15;
      if (v20 < v15)
      {
        unint64_t v20 = v15;
        unint64_t v10 = v15;
      }
      uint64_t v8 = __p;
      uint64_t v9 = v19;
      unint64_t v12 = v10 - v14;
      if (v19 - (unsigned char *)__p > v10 - v14)
      {
        uint64_t v9 = (char *)__p + v12;
        unint64_t v19 = (char *)__p + v12;
        unint64_t v11 = v14 + (int)v15 - (int)v14;
        unint64_t v15 = v11;
        unint64_t v16 = v10;
      }
      if (v10 < v11)
      {
        unint64_t v20 = v11;
        unint64_t v12 = v11 - v14;
      }
      if (v9 - (unsigned char *)__p > v12)
      {
        uint64_t v9 = (char *)__p + v12;
        unint64_t v19 = (char *)__p + v12;
        unint64_t v15 = v14 + (int)v11 - (int)v14;
        unint64_t v16 = v14 + v12;
      }
    }
    else
    {
      uint64_t v8 = __p;
      uint64_t v9 = v19;
    }
    std::function<void ()(char const*,unsigned long)>::operator()(*(void *)(v7 + 80), (uint64_t)v8, v9 - v8);
    v13[1] = &unk_26F34A828;
    if (__p)
    {
      unint64_t v19 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2455D2B30](&v21);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  }
  return this;
}

void sub_23F778A28(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::replication::LayerStateDelegate::_OnSetTimeSample(uint64_t a1, uint64_t a2, void (***a3)(void, unsigned char *), double a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  (**a3)(a3, v7);
  (*(void (**)(uint64_t, uint64_t, unsigned char *, double))(*(void *)a1 + 80))(a1, a2, v7, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
}

void sub_23F778B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::_OnCreateSpec(uint64_t result, _DWORD *a2, int a3, char a4)
{
  *(unsigned char *)(result + 40) = 1;
  if (*(unsigned char *)(result + 48))
  {
    uint64_t v7 = result;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v14, a2 + 1);
    v14[1] = a3;
    char v15 = a4;
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v16);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::CreateSpecOperation::Serialize((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
    if ((v21 & 0x10) != 0)
    {
      unint64_t v10 = v24;
      unint64_t v11 = v19;
      if (v24 < v19)
      {
        unint64_t v24 = v19;
        unint64_t v10 = v19;
      }
      uint64_t v8 = __p;
      uint64_t v9 = v23;
      unint64_t v12 = v10 - v18;
      if (v23 - (unsigned char *)__p > v10 - v18)
      {
        uint64_t v9 = (char *)__p + v12;
        int v23 = (char *)__p + v12;
        unint64_t v11 = v18 + (int)v19 - (int)v18;
        unint64_t v19 = v11;
        unint64_t v20 = v10;
      }
      if (v10 < v11)
      {
        unint64_t v24 = v11;
        unint64_t v12 = v11 - v18;
      }
      if (v9 - (unsigned char *)__p > v12)
      {
        uint64_t v9 = (char *)__p + v12;
        int v23 = (char *)__p + v12;
        unint64_t v19 = v18 + (int)v11 - (int)v18;
        unint64_t v20 = v18 + v12;
      }
    }
    else
    {
      uint64_t v8 = __p;
      uint64_t v9 = v23;
    }
    std::function<void ()(char const*,unsigned long)>::operator()(*(void *)(v7 + 80), (uint64_t)v8, v9 - v8);
    char v17 = &unk_26F34A828;
    if (__p)
    {
      int v23 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2455D2B30](&v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  }
  return result;
}

void sub_23F778D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::replication::CreateSpecOperation::~CreateSpecOperation((realityio::replication::CreateSpecOperation *)va);
  _Unwind_Resume(a1);
}

void realityio::replication::CreateSpecOperation::~CreateSpecOperation(realityio::replication::CreateSpecOperation *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::replication::LayerStateDelegate::_OnDeleteSpec(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char a3)
{
  *(unsigned char *)(this + 40) = 1;
  if (*(unsigned char *)(this + 48))
  {
    uint64_t v5 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, (_DWORD *)a2 + 1);
    char v13 = a3;
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v14);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::DeleteSpecOperation::Serialize((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    if ((v19 & 0x10) != 0)
    {
      unint64_t v8 = v22;
      unint64_t v9 = v17;
      if (v22 < v17)
      {
        unint64_t v22 = v17;
        unint64_t v8 = v17;
      }
      uint64_t v6 = __p;
      uint64_t v7 = v21;
      unint64_t v10 = v8 - v16;
      if (v21 - (unsigned char *)__p > v8 - v16)
      {
        uint64_t v7 = (char *)__p + v10;
        char v21 = (char *)__p + v10;
        unint64_t v9 = v16 + (int)v17 - (int)v16;
        unint64_t v17 = v9;
        unint64_t v18 = v8;
      }
      if (v8 < v9)
      {
        unint64_t v22 = v9;
        unint64_t v10 = v9 - v16;
      }
      if (v7 - (unsigned char *)__p > v10)
      {
        uint64_t v7 = (char *)__p + v10;
        char v21 = (char *)__p + v10;
        unint64_t v17 = v16 + (int)v9 - (int)v16;
        unint64_t v18 = v16 + v10;
      }
    }
    else
    {
      uint64_t v6 = __p;
      uint64_t v7 = v21;
    }
    std::function<void ()(char const*,unsigned long)>::operator()(*(void *)(v5 + 80), (uint64_t)v6, v7 - v6);
    char v15 = &unk_26F34A828;
    if (__p)
    {
      char v21 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2455D2B30](&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  }
  return this;
}

void sub_23F778F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

void realityio::replication::DeleteSpecOperation::~DeleteSpecOperation(realityio::replication::DeleteSpecOperation *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::replication::LayerStateDelegate::_OnMoveSpec(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  *(unsigned char *)(this + 40) = 1;
  if (*(unsigned char *)(this + 48))
  {
    uint64_t v5 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, (_DWORD *)a3 + 1);
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v15);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::MoveSpecOperation::Serialize((uint64_t)&v11);
    if ((v20 & 0x10) != 0)
    {
      unint64_t v8 = v23;
      unint64_t v9 = v18;
      if (v23 < v18)
      {
        unint64_t v23 = v18;
        unint64_t v8 = v18;
      }
      uint64_t v6 = __p;
      uint64_t v7 = v22;
      unint64_t v10 = v8 - v17;
      if (v22 - (unsigned char *)__p > v8 - v17)
      {
        uint64_t v7 = (char *)__p + v10;
        unint64_t v22 = (char *)__p + v10;
        unint64_t v9 = v17 + (int)v18 - (int)v17;
        unint64_t v18 = v9;
        unint64_t v19 = v8;
      }
      if (v8 < v9)
      {
        unint64_t v23 = v9;
        unint64_t v10 = v9 - v17;
      }
      if (v7 - (unsigned char *)__p > v10)
      {
        uint64_t v7 = (char *)__p + v10;
        unint64_t v22 = (char *)__p + v10;
        unint64_t v18 = v17 + (int)v9 - (int)v17;
        unint64_t v19 = v17 + v10;
      }
    }
    else
    {
      uint64_t v6 = __p;
      uint64_t v7 = v22;
    }
    std::function<void ()(char const*,unsigned long)>::operator()(*(void *)(v5 + 80), (uint64_t)v6, v7 - v6);
    uint64_t v16 = &unk_26F34A828;
    if (__p)
    {
      unint64_t v22 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2455D2B30](&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  }
  return this;
}

void sub_23F779160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::replication::MoveSpecOperation::~MoveSpecOperation((realityio::replication::MoveSpecOperation *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::_OnPushChild(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  *(unsigned char *)(this + 40) = 1;
  if (*(unsigned char *)(this + 48))
  {
    uint64_t v7 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, (_DWORD *)a2 + 1);
    uint64_t v8 = *(void *)a3;
    uint64_t v17 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = *(void *)a4;
    uint64_t v18 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v19);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::PushChildOperation_TfToken::Serialize((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (pxrInternal__aapl__pxrReserved__::TfToken *)v19);
    if ((v24 & 0x10) != 0)
    {
      unint64_t v12 = v27;
      unint64_t v13 = v22;
      if (v27 < v22)
      {
        unint64_t v27 = v22;
        unint64_t v12 = v22;
      }
      unint64_t v10 = __p;
      int v11 = v26;
      unint64_t v14 = v12 - v21;
      if (v26 - (unsigned char *)__p > v12 - v21)
      {
        int v11 = (char *)__p + v14;
        uint64_t v26 = (char *)__p + v14;
        unint64_t v13 = v21 + (int)v22 - (int)v21;
        unint64_t v22 = v13;
        unint64_t v23 = v12;
      }
      if (v12 < v13)
      {
        unint64_t v27 = v13;
        unint64_t v14 = v13 - v21;
      }
      if (v11 - (unsigned char *)__p > v14)
      {
        int v11 = (char *)__p + v14;
        uint64_t v26 = (char *)__p + v14;
        unint64_t v22 = v21 + (int)v13 - (int)v21;
        unint64_t v23 = v21 + v14;
      }
    }
    else
    {
      unint64_t v10 = __p;
      int v11 = v26;
    }
    std::function<void ()(char const*,unsigned long)>::operator()(*(void *)(v7 + 80), (uint64_t)v10, v11 - v10);
    char v20 = &unk_26F34A828;
    if (__p)
    {
      uint64_t v26 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2455D2B30](&v28);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  }
  return this;
}

void sub_23F7793BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t realityio::replication::LayerStateDelegate::_OnPushChild(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  *(unsigned char *)(this + 40) = 1;
  if (*(unsigned char *)(this + 48))
  {
    uint64_t v7 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v14 + 1, (_DWORD *)a2 + 1);
    uint64_t v8 = *(void *)a3;
    uint64_t v15 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, (_DWORD *)a4 + 1);
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v18);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::PushChildOperation_SdfPath::Serialize(&v14, (pxrInternal__aapl__pxrReserved__::TfToken *)v18);
    if ((v23 & 0x10) != 0)
    {
      unint64_t v11 = v26;
      unint64_t v12 = v21;
      if (v26 < v21)
      {
        unint64_t v26 = v21;
        unint64_t v11 = v21;
      }
      uint64_t v9 = __p;
      unint64_t v10 = v25;
      unint64_t v13 = v11 - v20;
      if (v25 - (unsigned char *)__p > v11 - v20)
      {
        unint64_t v10 = (char *)__p + v13;
        uint64_t v25 = (char *)__p + v13;
        unint64_t v12 = v20 + (int)v21 - (int)v20;
        unint64_t v21 = v12;
        unint64_t v22 = v11;
      }
      if (v11 < v12)
      {
        unint64_t v26 = v12;
        unint64_t v13 = v12 - v20;
      }
      if (v10 - (unsigned char *)__p > v13)
      {
        unint64_t v10 = (char *)__p + v13;
        uint64_t v25 = (char *)__p + v13;
        unint64_t v21 = v20 + (int)v12 - (int)v20;
        unint64_t v22 = v20 + v13;
      }
    }
    else
    {
      uint64_t v9 = __p;
      unint64_t v10 = v25;
    }
    std::function<void ()(char const*,unsigned long)>::operator()(*(void *)(v7 + 80), (uint64_t)v9, v10 - v9);
    unint64_t v19 = &unk_26F34A828;
    if (__p)
    {
      uint64_t v25 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2455D2B30](&v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  }
  return this;
}

void sub_23F779610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t realityio::replication::LayerStateDelegate::_OnPopChild(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  *(unsigned char *)(this + 40) = 1;
  if (*(unsigned char *)(this + 48))
  {
    uint64_t v7 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, (_DWORD *)a2 + 1);
    uint64_t v8 = *(void *)a3;
    uint64_t v17 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = *(void *)a4;
    uint64_t v18 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v19);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::PushChildOperation_TfToken::Serialize((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (pxrInternal__aapl__pxrReserved__::TfToken *)v19);
    if ((v24 & 0x10) != 0)
    {
      unint64_t v12 = v27;
      unint64_t v13 = v22;
      if (v27 < v22)
      {
        unint64_t v27 = v22;
        unint64_t v12 = v22;
      }
      unint64_t v10 = __p;
      unint64_t v11 = v26;
      unint64_t v14 = v12 - v21;
      if (v26 - (unsigned char *)__p > v12 - v21)
      {
        unint64_t v11 = (char *)__p + v14;
        unint64_t v26 = (char *)__p + v14;
        unint64_t v13 = v21 + (int)v22 - (int)v21;
        unint64_t v22 = v13;
        unint64_t v23 = v12;
      }
      if (v12 < v13)
      {
        unint64_t v27 = v13;
        unint64_t v14 = v13 - v21;
      }
      if (v11 - (unsigned char *)__p > v14)
      {
        unint64_t v11 = (char *)__p + v14;
        unint64_t v26 = (char *)__p + v14;
        unint64_t v22 = v21 + (int)v13 - (int)v21;
        unint64_t v23 = v21 + v14;
      }
    }
    else
    {
      unint64_t v10 = __p;
      unint64_t v11 = v26;
    }
    std::function<void ()(char const*,unsigned long)>::operator()(*(void *)(v7 + 80), (uint64_t)v10, v11 - v10);
    uint64_t v20 = &unk_26F34A828;
    if (__p)
    {
      unint64_t v26 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2455D2B30](&v28);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  }
  return this;
}

void sub_23F77986C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t realityio::replication::LayerStateDelegate::_OnPopChild(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  *(unsigned char *)(this + 40) = 1;
  if (*(unsigned char *)(this + 48))
  {
    uint64_t v7 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v14 + 1, (_DWORD *)a2 + 1);
    uint64_t v8 = *(void *)a3;
    uint64_t v15 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, (_DWORD *)a4 + 1);
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v18);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::PushChildOperation_SdfPath::Serialize(&v14, (pxrInternal__aapl__pxrReserved__::TfToken *)v18);
    if ((v23 & 0x10) != 0)
    {
      unint64_t v11 = v26;
      unint64_t v12 = v21;
      if (v26 < v21)
      {
        unint64_t v26 = v21;
        unint64_t v11 = v21;
      }
      uint64_t v9 = __p;
      unint64_t v10 = v25;
      unint64_t v13 = v11 - v20;
      if (v25 - (unsigned char *)__p > v11 - v20)
      {
        unint64_t v10 = (char *)__p + v13;
        uint64_t v25 = (char *)__p + v13;
        unint64_t v12 = v20 + (int)v21 - (int)v20;
        unint64_t v21 = v12;
        unint64_t v22 = v11;
      }
      if (v11 < v12)
      {
        unint64_t v26 = v12;
        unint64_t v13 = v12 - v20;
      }
      if (v10 - (unsigned char *)__p > v13)
      {
        unint64_t v10 = (char *)__p + v13;
        uint64_t v25 = (char *)__p + v13;
        unint64_t v21 = v20 + (int)v12 - (int)v20;
        unint64_t v22 = v20 + v13;
      }
    }
    else
    {
      uint64_t v9 = __p;
      unint64_t v10 = v25;
    }
    std::function<void ()(char const*,unsigned long)>::operator()(*(void *)(v7 + 80), (uint64_t)v9, v10 - v9);
    unint64_t v19 = &unk_26F34A828;
    if (__p)
    {
      uint64_t v25 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2455D2B30](&v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  }
  return this;
}

void sub_23F779AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void realityio::replication::LayerStateDelegate::~LayerStateDelegate(realityio::replication::LayerStateDelegate *this)
{
  *(void *)this = &unk_26F34A438;
  if (*((unsigned char *)this + 48))
  {
    std::__function::__value_func<void ()(char const*,unsigned long)>::~__value_func[abi:ne180100]((void *)this + 7);
    *((unsigned char *)this + 48) = 0;
  }

  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::~SdfLayerStateDelegateBase(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F34A438;
  if (*((unsigned char *)this + 48))
  {
    std::__function::__value_func<void ()(char const*,unsigned long)>::~__value_func[abi:ne180100]((void *)this + 7);
    *((unsigned char *)this + 48) = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::~SdfLayerStateDelegateBase(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__function::__value_func<void ()(char const*,unsigned long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *boost::optional_detail::optional_base<realityio::replication::LayerStateDelegate::Sender>::emplace_assign<std::function<void ()(char const*,unsigned long)> const&>(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a1)
  {
    std::__function::__value_func<void ()(char const*,unsigned long)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
    *(unsigned char *)a1 = 0;
  }
  std::__function::__value_func<void ()(char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  std::__function::__value_func<void ()(char const*,unsigned long)>::__value_func[abi:ne180100](a1 + 8, (uint64_t)v5);
  uint64_t result = std::__function::__value_func<void ()(char const*,unsigned long)>::~__value_func[abi:ne180100](v5);
  *(unsigned char *)a1 = 1;
  return result;
}

void sub_23F779CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(char const*,unsigned long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(uint64_t a1)
{
  boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(a1);

  JUMPOUT(0x2455D2BD0);
}

double boost::interprocess::basic_bufferbuf<char,std::char_traits<char>>::seekoff@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if ((a4 & 0x18) == 0x18)
  {
    if ((a3 & 0xFFFFFFFD) != 0) {
      goto LABEL_18;
    }
  }
  else if ((a4 & 8) == 0)
  {
    if ((a4 & 0x10) == 0) {
      goto LABEL_18;
    }
    int v5 = 0;
    int v6 = *(_DWORD *)(a1 + 64);
LABEL_11:
    if ((v6 & 0x10) == 0 || a2 && !*(void *)(a1 + 48)) {
      goto LABEL_18;
    }
    int v7 = 1;
    if (a3) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
  int v6 = *(_DWORD *)(a1 + 64);
  if ((v6 & 8) == 0 || a2 && !*(void *)(a1 + 24)) {
    goto LABEL_18;
  }
  int v5 = 1;
  if ((a4 & 0x18) == 0x18) {
    goto LABEL_11;
  }
  int v7 = 0;
  if (a3)
  {
LABEL_15:
    if (a3 == 1)
    {
      if (!v5)
      {
        uint64_t v11 = *(void *)(a1 + 48) + a2 - *(void *)(a1 + 40);
        if (!v7)
        {
LABEL_35:
          uint64_t v9 = v11;
          goto LABEL_19;
        }
        goto LABEL_32;
      }
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24) + a2 - v12;
      goto LABEL_26;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *(void *)(a1 + 80);
      goto LABEL_22;
    }
LABEL_18:
    uint64_t v9 = -1;
    goto LABEL_19;
  }
LABEL_21:
  uint64_t v8 = a3;
LABEL_22:
  uint64_t v11 = v8 + a2;
  if (v5)
  {
    uint64_t v12 = *(void *)(a1 + 16);
LABEL_26:
    uint64_t v9 = -1;
    if (v11 < 0 || v11 > *(void *)(a1 + 32) - v12) {
      goto LABEL_19;
    }
    uint64_t v13 = v12 + v11;
    uint64_t v14 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v13;
    *(void *)(a1 + 32) = v14;
  }
  if (!v7) {
    goto LABEL_35;
  }
LABEL_32:
  uint64_t v9 = -1;
  if ((v11 & 0x8000000000000000) == 0)
  {
    uint64_t v15 = *(void *)(a1 + 40);
    if (v11 <= *(void *)(a1 + 56) - v15)
    {
      uint64_t v16 = *(void *)(a1 + 56);
      *(void *)(a1 + 48) = v15 + (int)v11;
      *(void *)(a1 + 56) = v16;
      goto LABEL_35;
    }
  }
LABEL_19:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 128) = v9;
  return result;
}

uint64_t boost::interprocess::basic_bufferbuf<char,std::char_traits<char>>::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)a1 + 32))(a1, *(void *)(a2 + 128), 0, a3);
}

uint64_t boost::interprocess::basic_bufferbuf<char,std::char_traits<char>>::underflow(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 24);
  if (v1 == *(unsigned __int8 **)(a1 + 32)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *v1;
  }
}

uint64_t boost::interprocess::basic_bufferbuf<char,std::char_traits<char>>::pbackfail(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 != *(void *)(a1 + 16))
  {
    if (a2 == -1)
    {
      a2 = 0;
      uint64_t v3 = (unsigned char *)(v2 - 1);
    }
    else
    {
      int v4 = *(unsigned __int8 *)(v2 - 1);
      uint64_t v3 = (unsigned char *)(v2 - 1);
      if (v4 != a2)
      {
        if ((*(unsigned char *)(a1 + 64) & 0x10) != 0)
        {
          *(void *)(a1 + 24) = v3;
          unsigned char *v3 = a2;
          return a2;
        }
        return 0xFFFFFFFFLL;
      }
    }
    *(void *)(a1 + 24) = v3;
    return a2;
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::interprocess::basic_bufferbuf<char,std::char_traits<char>>::overflow(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 64) & 0x10) == 0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 == -1) {
    return 0;
  }
  uint64_t v2 = *(unsigned char **)(a1 + 48);
  if (v2 == *(unsigned char **)(a1 + 56)) {
    return 0xFFFFFFFFLL;
  }
  unsigned char *v2 = a2;
  ++*(void *)(a1 + 48);
  return a2;
}

uint64_t non-virtual thunk to'boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(uint64_t a1)
{
  return boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(a1 - 88);
}

void non-virtual thunk to'boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(uint64_t a1)
{
  boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(a1 - 88);

  JUMPOUT(0x2455D2BD0);
}

uint64_t virtual thunk to'boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(void *a1)
{
  return boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream((uint64_t)a1 + *(void *)(*a1 - 24));
}

void virtual thunk to'boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(void *a1)
{
  boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream((uint64_t)a1 + *(void *)(*a1 - 24));

  JUMPOUT(0x2455D2BD0);
}

uint64_t boost::optional_detail::optional_base<realityio::replication::SetFieldOperation>::~optional_base(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
    uint64_t v2 = *(void *)(a1 + 16);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

uint64_t boost::optional_detail::optional_base<realityio::replication::SetFieldDictValueByKeyOperation>::~optional_base(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 32));
    uint64_t v2 = *(void *)(a1 + 24);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v3 = *(void *)(a1 + 16);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

unsigned char *boost::optional_detail::optional_base<realityio::replication::SetTimeSampleOperation>::~optional_base(unsigned char *a1)
{
  if (*a1)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 8));
    *a1 = 0;
  }
  return a1;
}

unsigned char *boost::optional_detail::optional_base<realityio::replication::CreateSpecOperation>::~optional_base(unsigned char *a1)
{
  if (*a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    *a1 = 0;
  }
  return a1;
}

unsigned char *boost::optional_detail::optional_base<realityio::replication::DeleteSpecOperation>::~optional_base(unsigned char *a1)
{
  if (*a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    *a1 = 0;
  }
  return a1;
}

unsigned char *boost::optional_detail::optional_base<realityio::replication::MoveSpecOperation>::~optional_base(unsigned char *a1)
{
  if (*a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 12));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::optional_detail::optional_base<realityio::replication::PushChildOperation_TfToken>::~optional_base(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v3 = *(void *)(a1 + 16);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

uint64_t boost::optional_detail::optional_base<realityio::replication::PushChildOperation_SdfPath>::~optional_base(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 24);
    uint64_t v2 = *(void *)(a1 + 16);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

uint64_t boost::optional_detail::optional_base<realityio::replication::PopChildOperation_TfToken>::~optional_base(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v3 = *(void *)(a1 + 16);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

uint64_t boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream(uint64_t a1)
{
  uint64_t v2 = (std::ios_base *)(a1 + 112);
  *(void *)a1 = &unk_26F34A790;
  *(void *)(a1 + 112) = &unk_26F34A7B8;
  std::ios_base::init((std::ios_base *)(a1 + 112), 0);
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  std::streambuf::basic_streambuf();
  *(_DWORD *)(a1 + 72) = 20;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)a1 = &unk_26F34A6A0;
  *(void *)(a1 + 112) = &unk_26F34A748;
  *(void *)(a1 + 8) = &unk_26F34A6C0;
  *(void *)(a1 + 152) = a1 + 8;
  std::ios_base::clear(v2, 0);
  return a1;
}

void sub_23F77A470(_Unwind_Exception *a1)
{
  boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::~basic_vectorbuf(v2);
  std::ostream::~ostream();
  MEMORY[0x2455D2B30](v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(char const*,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

void *boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::~basic_ovectorstream(void *a1)
{
  a1[1] = &unk_26F34A828;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2455D2B30](a1 + 14);
  return a1;
}

uint64_t boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::~basic_vectorbuf(void *a1)
{
  *a1 = &unk_26F34A828;
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }

  return std::streambuf::~streambuf();
}

{
  void *v2;
  uint64_t vars8;

  *a1 = &unk_26F34A828;
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }

  return std::streambuf::~streambuf();
}

void boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::~basic_ovectorstream(void *a1)
{
  a1[1] = &unk_26F34A828;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2455D2B30](a1 + 14);

  JUMPOUT(0x2455D2BD0);
}

void non-virtual thunk to'boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::~basic_ovectorstream(void *a1)
{
  *a1 = &unk_26F34A828;
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();

  JUMPOUT(0x2455D2B30);
}

{
  void *v2;
  uint64_t vars8;

  *a1 = &unk_26F34A828;
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2455D2B30](a1 + 13);

  JUMPOUT(0x2455D2BD0);
}

double boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::seekoff@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if ((a4 & 0x18) == 0 || a3 == 1 && (a4 & 0x18) == 0x18) {
    goto LABEL_24;
  }
  int v5 = *(_DWORD *)(a1 + 64);
  if ((a4 & 8) != 0 && ((v5 & 8) == 0 || a2 && !*(void *)(a1 + 24))) {
    goto LABEL_24;
  }
  if ((a4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || a2 && !*(void *)(a1 + 48)) {
      goto LABEL_24;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    int v6 = (void *)(a1 + 72);
    unint64_t v7 = *(void *)(a1 + 80);
    goto LABEL_21;
  }
  unint64_t v7 = *(void *)(a1 + 96);
  unint64_t v8 = *(void *)(a1 + 48);
  if (v7 < v8)
  {
    *(void *)(a1 + 96) = v8;
    unint64_t v7 = v8;
  }
  if ((v5 & 8) != 0 && *(void *)(a1 + 32) < v7) {
    *(void *)(a1 + 32) = v7;
  }
  int v6 = (void *)(a1 + 40);
LABEL_21:
  uint64_t v9 = v7 - *v6;
  if (a3)
  {
    if (a3 == 1)
    {
      if ((a4 & 8) != 0)
      {
        uint64_t v14 = *(void *)(a1 + 16);
        uint64_t v13 = *(void *)(a1 + 24);
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 40);
        uint64_t v13 = *(void *)(a1 + 48);
      }
      uint64_t v10 = v13 - v14;
    }
    else
    {
      uint64_t v10 = v9;
      if (a3 != 2)
      {
LABEL_24:
        uint64_t v11 = -1;
        goto LABEL_25;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = -1;
  uint64_t v15 = v10 + a2;
  if (v15 >= 0 && v15 <= v9 && ((a4 & 0x10) == 0 || (v5 & 1) == 0 || v15 == v9))
  {
    if ((a4 & 8) != 0) {
      *(void *)(a1 + 24) = *(void *)(a1 + 16) + v15;
    }
    if ((a4 & 0x10) != 0) {
      *(void *)(a1 + 48) = *(void *)(a1 + 40) + (int)v15;
    }
    uint64_t v11 = v15;
  }
LABEL_25:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 128) = v11;
  return result;
}

uint64_t boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)a1 + 32))(a1, *(void *)(a2 + 128), 0, a3);
}

uint64_t boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::underflow(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 24);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned char *)(a1 + 64) & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 96);
    unint64_t v4 = *(void *)(a1 + 48);
    if (v3 < v4)
    {
      *(void *)(a1 + 96) = v4;
      unint64_t v3 = v4;
    }
    unint64_t v2 = *(void *)(a1 + 32);
    if (v2 < v3)
    {
      *(void *)(a1 + 32) = v3;
      unint64_t v2 = v3;
    }
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 32);
  }
  if ((unint64_t)v1 < v2) {
    return *v1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::pbackfail(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 != *(void *)(a1 + 16))
  {
    if (a2 == -1)
    {
      a2 = 0;
      unint64_t v3 = (unsigned char *)(v2 - 1);
    }
    else
    {
      int v4 = *(unsigned __int8 *)(v2 - 1);
      unint64_t v3 = (unsigned char *)(v2 - 1);
      if (v4 != a2)
      {
        if ((*(unsigned char *)(a1 + 64) & 0x10) != 0)
        {
          *(void *)(a1 + 24) = v3;
          unsigned char *v3 = a2;
          return a2;
        }
        return 0xFFFFFFFFLL;
      }
    }
    *(void *)(a1 + 24) = v3;
    return a2;
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::overflow(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 64) & 0x10) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = a2;
  if (a2 == -1) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48) - v4;
  if (*(void *)(a1 + 96) - v4 <= v5) {
    uint64_t v6 = v5 + 1;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 96) - v4;
  }
  unint64_t v7 = (std::vector<char> *)(a1 + 72);
  std::vector<char>::pointer v9 = *(std::vector<char>::pointer *)(a1 + 80);
  unint64_t v8 = *(void *)(a1 + 88);
  if ((unint64_t)v9 >= v8)
  {
    std::vector<char>::pointer begin = v7->__begin_;
    int64_t v12 = v9 - v7->__begin_;
    unint64_t v13 = v12 + 1;
    if (v12 + 1 < 0) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = v8 - (void)begin;
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v13;
    }
    if (v15) {
      uint64_t v16 = operator new(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = (char *)v16 + v15;
    *((unsigned char *)v16 + v12) = v2;
    uint64_t v10 = (uint64_t)v16 + v12 + 1;
    if (v9 == begin)
    {
      uint64_t v16 = (char *)v16 + v12;
    }
    else
    {
      uint64_t v18 = &v9[~(unint64_t)begin];
      do
      {
        char v19 = *--v9;
        (v18--)[(void)v16] = v19;
      }
      while (v9 != begin);
      std::vector<char>::pointer v9 = v7->__begin_;
    }
    *(void *)(a1 + 72) = v16;
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v17;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *std::vector<char>::pointer v9 = a2;
    uint64_t v10 = (uint64_t)(v9 + 1);
  }
  *(void *)(a1 + 80) = v10;
  uint64_t v20 = *(void *)(a1 + 72);
  unint64_t v21 = *(void *)(a1 + 88) - v20;
  if (*(void *)(a1 + 88) != v10 && v21 >= v10 - v20)
  {
    std::vector<char>::__append(v7, *(void *)(a1 + 88) - v10);
    uint64_t v20 = *(void *)(a1 + 72);
    uint64_t v10 = *(void *)(a1 + 80);
  }
  else if (v21 < v10 - v20)
  {
    uint64_t v10 = *(void *)(a1 + 88);
    *(void *)(a1 + 80) = v10;
  }
  *(void *)(a1 + 40) = v20;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 96) = v20 + v6;
  if ((*(unsigned char *)(a1 + 64) & 8) != 0)
  {
    uint64_t v22 = v20 + *(void *)(a1 + 24) - *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(a1 + 24) = v22;
    *(void *)(a1 + 32) = v20 + v6;
  }
  *(void *)(a1 + 48) = v20 + (int)v5 + 1;
  return v2;
}

void virtual thunk to'boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::~basic_ovectorstream(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  v1[1] = &unk_26F34A828;
  uint64_t v2 = (void *)v1[10];
  if (v2)
  {
    v1[11] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();

  JUMPOUT(0x2455D2B30);
}

{
  void *v1;
  void *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  v1[1] = &unk_26F34A828;
  uint64_t v2 = (void *)v1[10];
  if (v2)
  {
    v1[11] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2455D2B30](v1 + 14);

  JUMPOUT(0x2455D2BD0);
}

void boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::~basic_vectorbuf(void *a1)
{
  *a1 = &unk_26F34A828;
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();

  JUMPOUT(0x2455D2BD0);
}

uint64_t RIOBuilderOutputsGetTypeID()
{
  if (RIOBuilderOutputsGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderOutputsGetTypeID::onceToken, &__block_literal_global_36);
  }
  return RIOBuilderOutputsGetTypeID::typeID;
}

void __RIOBuilderOutputsGetTypeID_block_invoke()
{
  if (!RIOBuilderOutputsGetTypeID::typeID) {
    RIOBuilderOutputsGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

BOOL RIOBuilderOutputsHasValueWithName(uint64_t a1, __CFString *this)
{
  BOOL v2 = 0;
  if (a1 && this)
  {
    realityio::CFStringCopyUTF8String(this, (uint64_t)v10);
    if (v10[0])
    {
      int v4 = SHIBYTE(v11.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v11;
      }
      uint64_t v6 = *(std::mutex **)(a1 + 16);
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v7 = v6 + 1;
      std::mutex::lock(v6 + 1);
      BOOL v2 = &v6->__m_.__opaque[40] != (char *)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v6->__m_.__opaque[32], (const void **)&__p.__r_.__value_.__l.__data_);
      std::mutex::unlock(v7);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v4 & 0x80000000) == 0) {
          return v2;
        }
      }
      else if ((v4 & 0x80000000) == 0)
      {
        return v2;
      }
      operator delete(v11.__r_.__value_.__l.__data_);
      return v2;
    }
    return 0;
  }
  return v2;
}

void sub_23F77AEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  operator delete(v17);
  _Unwind_Resume(a1);
}

std::mutex *RIOBuilderOutputsGetValueWithName(uint64_t a1, __CFString *this)
{
  BOOL v2 = 0;
  if (a1 && this)
  {
    realityio::CFStringCopyUTF8String(this, (uint64_t)v12);
    if (v12[0])
    {
      int v4 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v13;
      }
      BOOL v2 = *(std::mutex **)(a1 + 16);
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = v2 + 1;
      std::mutex::lock(v2 + 1);
      uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v2->__m_.__opaque[32], (const void **)&__p.__r_.__value_.__l.__data_);
      if (&v2->__m_.__opaque[40] == (char *)v7)
      {
LABEL_17:
        BOOL v2 = 0;
LABEL_18:
        std::mutex::unlock(v6);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v4 & 0x80000000) == 0) {
            return v2;
          }
        }
        else if ((v4 & 0x80000000) == 0)
        {
          return v2;
        }
        operator delete(v13.__r_.__value_.__l.__data_);
        return v2;
      }
      std::vector<char>::pointer v9 = *(uint64_t (****)(void))(v7 + 56);
      unint64_t v8 = *(std::__shared_weak_count **)(v7 + 64);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v9)
      {
        BOOL v2 = (std::mutex *)(**v9)(v9);
        if (!v8) {
          goto LABEL_16;
        }
      }
      else if (!v8)
      {
LABEL_16:
        if (v9) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      goto LABEL_16;
    }
    return 0;
  }
  return v2;
}

void sub_23F77B078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  operator delete(v17);
  _Unwind_Resume(a1);
}

BOOL RIOBuilderOutputsStoreValueWithName(uint64_t a1, uint64_t a2, __CFString *this)
{
  BOOL v3 = 0;
  if (a1)
  {
    if (this)
    {
      realityio::CFStringCopyUTF8String(this, (uint64_t)v14);
      BOOL v3 = v14[0] != 0;
      if (v14[0])
      {
        int v6 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v15;
        }
        uint64_t v8 = *(void *)(a1 + 16);
        uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::mutex::lock((std::mutex *)(v8 + 64));
        std::vector<char>::pointer v9 = operator new(0x28uLL);
        v9[1] = 0;
        v9[2] = 0;
        *std::vector<char>::pointer v9 = &unk_26F3441C0;
        v9[3] = &unk_26F344210;
        v9[4] = a2;
        p_p = &__p;
        uint64_t v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v8 + 40), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
        std::string v11 = (std::__shared_weak_count *)v10[8];
        v10[7] = (uint64_t)(v9 + 3);
        unsigned char v10[8] = (uint64_t)v9;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v8, (unsigned __int8 *)&__p, (uint64_t)&__p);
        std::mutex::unlock((std::mutex *)(v8 + 64));
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v6 & 0x80000000) == 0) {
            return v3;
          }
        }
        else if ((v6 & 0x80000000) == 0)
        {
          return v3;
        }
        operator delete(v15.__r_.__value_.__l.__data_);
      }
    }
  }
  return v3;
}

void sub_23F77B26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  operator delete(v17);
  _Unwind_Resume(a1);
}

BOOL RIOBuilderOutputsRemoveValueWithName(uint64_t a1, __CFString *this)
{
  BOOL v2 = 0;
  if (a1)
  {
    if (this)
    {
      realityio::CFStringCopyUTF8String(this, (uint64_t)v9);
      BOOL v2 = v9[0] != 0;
      if (v9[0])
      {
        int v4 = SHIBYTE(v10.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v10;
        }
        uint64_t v6 = *(void *)(a1 + 16);
        uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::mutex::lock((std::mutex *)(v6 + 64));
        if (v6 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v6 + 40, (const void **)&__p.__r_.__value_.__l.__data_))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v6 + 40), (const void **)&__p.__r_.__value_.__l.__data_); {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v6, (unsigned __int8 *)&__p);
        }
        std::mutex::unlock((std::mutex *)(v6 + 64));
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v4 & 0x80000000) == 0) {
            return v2;
          }
        }
        else if ((v4 & 0x80000000) == 0)
        {
          return v2;
        }
        operator delete(v10.__r_.__value_.__l.__data_);
      }
    }
  }
  return v2;
}

void sub_23F77B3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  operator delete(v17);
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderOutputsCopyAllKeys(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    int v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (uint64_t *)(v3 + 16);
    while (1)
    {
      uint64_t v5 = (uint64_t *)*v5;
      if (!v5) {
        break;
      }
      if (*((char *)v5 + 39) >= 0) {
        uint64_t v6 = (const char *)(v5 + 2);
      }
      else {
        uint64_t v6 = (const char *)v5[2];
      }
      CFStringRef v7 = CFStringCreateWithCString(0, v6, 0x8000100u);
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v7);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return Mutable;
}

void sub_23F77B4FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderOutputsGetSwiftObject(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2) {
    return *(void *)(v1 + 128);
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v3 = *(void *)(v1 + 128);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void RIOBuilderOutputsSetSwiftObject(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
      if (v3)
      {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)(v2 + 128) = a2;
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      else
      {
        *(void *)(v2 + 128) = a2;
      }
    }
  }
}

void _RIOBuilderOutputsCFFinalize(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

BOOL _RIOBuilderOutputsCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderOutputsCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderOutputsCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderOutputs %p>", a1);
}

CFStringRef _RIOBuilderOutputsCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderOutputs %p>", a1);
}

void RIO_MTLX::getEnviron(const char *a1@<X0>, std::string *a2@<X8>)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  unint64_t v3 = getenv(a1);
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, v3);
  }
  else
  {
    int v4 = RIO_MTLX::EMPTY_STRING(0);
    if (*((char *)v4 + 23) < 0)
    {
      uint64_t v6 = (const std::string::value_type *)*v4;
      std::string::size_type v7 = v4[1];
      std::string::__init_copy_ctor_external(a2, v6, v7);
    }
    else
    {
      long long v5 = *(_OWORD *)v4;
      a2->__r_.__value_.__r.__words[2] = v4[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
    }
  }
}

uint64_t realityio::PhysicsColliderAssetBuilder::kOutputName(realityio::PhysicsColliderAssetBuilder *this)
{
  {
    operator new();
  }
  return realityio::PhysicsColliderAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_23F77B784(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::PhysicsColliderAssetBuilder *realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(realityio::PhysicsColliderAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "PhysicsColliderAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kPhysicsColliderAssetBuilderIdentifier);
  realityio::generatePhysicsColliderDirtyStageSubscription(&v5);
  v12[0] = &unk_26F34A9A0;
  v12[3] = v12;
  v11[0] = &unk_26F34AA20;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F34A928;
  *((void *)this + 35) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::PhysicsColliderAssetBuilder *)((char *)this + 288));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_23F77B928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  unint64_t v26 = v25;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v26);
  realityio::DynamicBuilder::~DynamicBuilder(v24);
  _Unwind_Resume(a1);
}

uint64_t realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  void v18[4] = *MEMORY[0x263EF8340];
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  char v15 = a7;
  unsigned __int8 v14 = 0;
  uint64_t v11 = *(void *)(a2 + 48);
  int64_t v12 = operator new(0x48uLL);
  *int64_t v12 = &unk_26F34AAA0;
  v12[1] = &v14;
  v12[2] = a1;
  v12[3] = &v17;
  v12[4] = &v16;
  void v12[5] = a4;
  v12[6] = a5;
  v12[7] = a6;
  unsigned char v12[8] = &v15;
  v18[3] = v12;
  (*(void (**)(uint64_t, void *))(*(void *)v11 + 16))(v11, v18);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v18);
  return v14;
}

void sub_23F77BAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::PhysicsColliderAssetBuilder::run(realityio::PhysicsColliderAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  int v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v49, v5, v4);
  uint64_t v6 = (realityio *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  std::string::size_type v7 = *(id *)(realityio::logObjects(v6) + 24);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_INFO, "Creating and saving physics collider reference", buf, 2u);
  }

  *(void *)buf = 0;
  uint64_t v8 = *((void *)this + 35);
  if (v8)
  {
    *((void *)this + 35) = 0;
    *(void *)buf = v8;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(buf);
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  uint64_t v46 = 0;
  BOOL v47 = 0;
  uint64_t v48 = 0;
  *(_DWORD *)buf = 4;
  uint64_t v42 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v45 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v40 = 0;
  uint64_t v38 = MEMORY[0x263F907B0] + 16;
  if (v39
    && (*(unsigned char *)(v39 + 57) & 8) == 0
    && (*(unsigned int (**)(uint64_t *))(MEMORY[0x263F907B0] + 48))(&v38))
  {
    pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::GetPreliminaryPhysicsColliderConvexShapeRel((uint64_t *)&v54, (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *)&v38);
    *(_DWORD *)buf = v54;
    uint64_t v10 = *((void *)&v54 + 1);
    *((void *)&v54 + 1) = 0;
    uint64_t v11 = v42;
    uint64_t v42 = v10;
    if (v11) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v43, &v55);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v44);
    if ((v45 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v12 = atomic_load(MEMORY[0x263F90580]);
    if (!v12) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((uint64_t *)&v54, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v49, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v12 + 24));
    *(_DWORD *)buf = v54;
    uint64_t v13 = *((void *)&v54 + 1);
    *((void *)&v54 + 1) = 0;
    uint64_t v14 = v42;
    uint64_t v42 = v13;
    if (v14) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v43, &v55);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v44);
    if ((v45 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v45 = v57;
  uint64_t v57 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
  if (*((void *)&v54 + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v54 + 1));
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)buf))
  {
    long long v28 = 0uLL;
    *(void *)&long long v29 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
    *(void *)&long long v54 = &v28;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  }
  LODWORD(v54) = v49;
  *((void *)&v54 + 1) = v50;
  if (v50) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v55, &v51);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v56, &v52);
  uint64_t v57 = v53;
  if ((v53 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  char v15 = *(uint64_t (**)(uint64_t *))(MEMORY[0x263F90728] + 48);
  while ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v54) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(&v33, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v54);
    uint64_t v16 = v33;
    if (v34 != v33)
    {
      unint64_t v17 = 0;
      do
      {
        MEMORY[0x2455CF810](&v35, "PhysicsCollisionAPI");
        uint64_t v18 = *(void *)(v16 + 8 * v17);
        char v19 = (atomic_uint *)(v35 & 0xFFFFFFFFFFFFFFF8);
        if ((v35 & 7) != 0) {
          atomic_fetch_add_explicit(v19, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)(v18 & 0xFFFFFFFFFFFFFFF8) == v19)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          uint64_t v31 = MEMORY[0x263F90728] + 16;
          if (v32 && (*(unsigned char *)(v32 + 57) & 8) == 0 && (v15(&v31) & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetPurposeAttr((uint64_t *)&v35, (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&v31);
            uint64_t v30 = 0;
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
          }
          MEMORY[0x2455CEED0](&v31);
        }
        ++v17;
        uint64_t v16 = v33;
      }
      while (v17 < (v34 - v33) >> 3);
    }
    unint64_t v35 = (unint64_t)&v33;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetNextSibling((uint64_t *)&v35, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v54);
    LODWORD(v54) = v35;
    uint64_t v20 = v36;
    uint64_t v36 = 0;
    uint64_t v21 = *((void *)&v54 + 1);
    *((void *)&v54 + 1) = v20;
    if (v21) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v55, (int *)&v37);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v56);
    if ((v57 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v57 = *((void *)&v37 + 1);
    *((void *)&v37 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
    if (v36) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
    }
  }
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
  uint64_t v22 = (realityio *)*((void *)&v54 + 1);
  if (*((void *)&v54 + 1)) {
    uint64_t v22 = (realityio *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v54 + 1));
  }
  char v23 = *(id *)(realityio::logObjects(v22) + 24);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v49, &v35);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    LODWORD(v54) = 136315138;
    *(void *)((char *)&v54 + 4) = Text;
    _os_log_impl(&dword_23F4EA000, v23, OS_LOG_TYPE_DEFAULT, "No physics collider asset was created for %s", (uint8_t *)&v54, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
  }

  unint64_t v26 = v46;
  uint64_t v25 = v47;
  if (v46 != v47)
  {
    do
    {
      if (*v26) {
        RERelease();
      }
      ++v26;
    }
    while (v26 != v25);
    unint64_t v26 = v46;
  }
  BOOL v47 = v26;
  MEMORY[0x2455CF620](&v38);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v43);
  if (v42) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v42);
  }
  if (v46)
  {
    BOOL v47 = v46;
    operator delete(v46);
  }
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
  uint64_t result = v50;
  if (v50) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v50);
  }
  return result;
}

void sub_23F77C7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  MEMORY[0x2455CF620](&a39);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)(v40 - 224));
  if (v39) {
    operator delete(v39);
  }
  uint64_t v42 = *(void **)(v40 - 184);
  if (v42)
  {
    *(void *)(v40 - 176) = v42;
    operator delete(v42);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v40 - 160));
  _Unwind_Resume(a1);
}

void realityio::PhysicsColliderAssetBuilder::clear(realityio::PhysicsColliderAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v5 = (std::mutex *)*((void *)this + 2);
  int v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (const void **)realityio::PhysicsColliderAssetBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<REAsset *>(v5, v6, (uint64_t)&v14);
  int v8 = v14;
  if (!(_BYTE)v14)
  {
    std::string::size_type v7 = (realityio::PhysicsColliderAssetBuilder *)&v13;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      uint64_t v5 = (std::mutex *)v13.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      if (!(_BYTE)v14 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v13 = __p;
      uint64_t v5 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v8)
  {
    uint64_t v10 = *((void *)this + 2);
    std::vector<char>::pointer v9 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (const void **)realityio::PhysicsColliderAssetBuilder::kOutputName(v7);
    std::mutex::lock((std::mutex *)(v10 + 64));
    if (v10 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v10 + 40, v11))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v10 + 40), v11); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v10, (unsigned __int8 *)v11);
    }
    std::mutex::unlock((std::mutex *)(v10 + 64));
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    uint64_t v14 = 0;
    uint64_t v12 = *((void *)this + 35);
    if (v12)
    {
      *((void *)this + 35) = 0;
      uint64_t v14 = v12;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v14);
  }
  else if (v2 < 0)
  {
    operator delete(v5);
  }
}

void sub_23F77CB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a15 && a23 < 0) {
    operator delete(__p);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void realityio::PhysicsColliderAssetBuilder::~PhysicsColliderAssetBuilder(void **this)
{
  realityio::PhysicsColliderAssetBuilder::~PhysicsColliderAssetBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  *this = &unk_26F34A928;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 42));
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this + 35);
  *this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 27);
  char v2 = (std::__shared_weak_count *)this[26];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (unint64_t)this[24];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v4 = (unint64_t)this[23];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder((realityio::Builder *)this);
}

void std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F34A9A0;
  return result;
}

void std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F34A9A0;
}

char *std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  char v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F34AA20;
  return result;
}

void std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F34AA20;
}

void std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::PhysicsColliderAssetBuilder::kOutputName((realityio::PhysicsColliderAssetBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 136), &v7, &v8);
  uint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F77CF54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<REPoseF>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

void std::__function::__func<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x48uLL);
  *(void *)char v2 = &unk_26F34AAA0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F34AAA0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = **(void **)(a1 + 24);
  long long v4 = *(realityio **)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v71 = *(float32x2_t **)(a1 + 48);
  uint64_t v72 = **(void **)(a1 + 32);
  int v6 = **(unsigned __int8 **)(a1 + 64);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (!result)
  {
    BOOL v24 = 0;
    goto LABEL_155;
  }
  REPoseIdentity();
  *(_DWORD *)(v5 + 8) = v8;
  *(void *)uint64_t v5 = v9;
  *(_OWORD *)(v5 + 16) = v10;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v106 = MEMORY[0x263F90730] + 16;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v103, 1.0);
  if (v107 && (*(unsigned char *)(v107 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v106 + 32))(&v106))
  {
    MEMORY[0x2455CEEE0](&v77, &v106);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation();
    *(void *)&long long v102 = &v77;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v102, 1.0);
  float32x2_t v77 = vcvt_f32_f64(v104);
  float v11 = v105;
  *(float *)&uint64_t v78 = v11;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslateOnly();
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v103);
  float32x2_t v77 = v12;
  uint64_t v78 = v13;
  v79[0] = v14;
  v79[1] = v15;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v102, (const pxrInternal__aapl__pxrReserved__::GfRotation *)&v77);
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)REMakePose();
  *(_DWORD *)(v5 + 8) = v17;
  *(void *)uint64_t v5 = v18;
  *(_OWORD *)(v5 + 16) = v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(v16);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomCube *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (IsA)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v101[0] = MEMORY[0x263F906E8] + 16;
    pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetRadiusAttr((uint64_t *)&v77, (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v101);
    realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v77, (uint64_t)&v97);
    if (((uint64_t)v79[1] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v79[1] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v79);
    if (v78) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v78);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetHeightAttr((uint64_t *)&v77, (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v101);
    realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v77, (uint64_t)&v92);
    if (((uint64_t)v79[1] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v79[1] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v79);
    if (v78) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v78);
    }
    uint64_t Capsule = 0;
    if ((_BYTE)v97 && (_BYTE)v92) {
      uint64_t Capsule = REAssetManagerCollisionShapeAssetCreateCapsule();
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetAxisAttr((uint64_t *)&v77, (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v101);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v77, (uint64_t)&v89);
    if (((uint64_t)v79[1] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v79[1] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v79);
    if (v78) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v78);
    }
    if ((_BYTE)v89)
    {
      unint64_t v22 = atomic_load(MEMORY[0x263F90538]);
      if (!v22) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
      }
      if ((*((void *)&v89 + 1) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v22 + 1328) & 0xFFFFFFFFFFFFFFF8))
      {
        long long v86 = 0;
        uint64_t v87 = 0;
        v88[0] = 0x3FF0000000000000;
        goto LABEL_45;
      }
      unint64_t v23 = atomic_load(MEMORY[0x263F90538]);
      if (!v23) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
      }
      if ((*((void *)&v89 + 1) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v23 + 1352) & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_46;
      }
    }
    uint64_t v87 = 0;
    v88[0] = 0;
    long long v86 = (void *)0x3FF0000000000000;
LABEL_45:
    v88[1] = 0x4056800000000000;
LABEL_46:
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v77, 1.0);
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v77, (const pxrInternal__aapl__pxrReserved__::GfRotation *)&v86);
    MEMORY[0x2455CE5D0](&v73, &v77);
    REMakePose();
    REPoseMultiply();
    *(_DWORD *)(v5 + 8) = v32;
    *(void *)uint64_t v5 = v33;
    *(_OWORD *)(v5 + 16) = v34;
    if ((_BYTE)v89)
    {
      if ((BYTE8(v89) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v89 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else if (v91 < 0)
    {
      operator delete(*((void **)&v90 + 1));
    }
    if (!(_BYTE)v92 && v96 < 0) {
      operator delete(v95);
    }
    if (!(_BYTE)v97 && v100 < 0) {
      operator delete(*((void **)&v98 + 1));
    }
    MEMORY[0x2455CEC10](v101);
    goto LABEL_150;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(IsA);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (v25)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(void *)&long long v73 = MEMORY[0x263F90688] + 16;
    *(void *)&long long v97 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomCube::GetSizeAttr((uint64_t *)&v77, (pxrInternal__aapl__pxrReserved__::UsdGeomCube *)&v73);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(v25);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
  {
    isSceneGroundPlane = (pxrInternal__aapl__pxrReserved__ *)realityio::isSceneGroundPlane(v4, v26);
    if (!isSceneGroundPlane)
    {
      long long v86 = 0;
      uint64_t v87 = 0;
      v88[0] = 0;
      UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(isSceneGroundPlane);
      uint64_t v37 = *UsdPrimDefaultPredicate;
      uint64_t v36 = UsdPrimDefaultPredicate[1];
      uint64_t v38 = (void *)UsdPrimDefaultPredicate[2];
      if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
        && ((v37 & 0x2000) != 0 || (v36 & 0x2000) == 0))
      {
        v37 |= 0x2000uLL;
        v36 &= ~0x2000uLL;
      }
      *(void *)&long long v73 = v37;
      *((void *)&v73 + 1) = v36;
      v74[0] = v38;
      pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)v4, (uint64_t *)&v73, (uint64_t)&v77);
      *(float32x2_t *)&long long v73 = v77;
      uint64_t v70 = v1;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v73 + 2, &v78);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v73 + 3, (_DWORD *)&v78 + 1);
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v79;
      uint64_t v75 = v80;
      *(void *)&long long v97 = v81;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v97 + 2, &v82);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v97 + 3, &v83);
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      unint64_t v41 = 0;
      long long v98 = v84;
      uint64_t v99 = v85;
      while (v73 != v97 || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)v74, (uint64_t)&v98))
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v73, (uint64_t)&v92);
        v101[0] = 0;
        long long v89 = 0u;
        long long v90 = 0u;
        REPoseIdentity();
        DWORD2(v89) = v42;
        *(void *)&long long v89 = v43;
        long long v90 = v44;
        if (realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(v2, v3, v72, (uint64_t)&v92, (uint64_t)v101, (uint64_t)&v89, v6 != 0))
        {
          uint64_t v45 = v101[0];
          uint64_t v46 = v87;
          if ((unint64_t)v87 >= v88[0])
          {
            uint64_t v48 = (v87 - (unsigned char *)v86) >> 3;
            if ((unint64_t)(v48 + 1) >> 61) {
              std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v49 = (uint64_t)(v88[0] - (void)v86) >> 2;
            if (v49 <= v48 + 1) {
              unint64_t v49 = v48 + 1;
            }
            if (v88[0] - (void)v86 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v49;
            }
            if (v50) {
              int v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)v88, v50);
            }
            else {
              int v51 = 0;
            }
            int v52 = &v51[8 * v48];
            *(void *)int v52 = v45;
            BOOL v47 = v52 + 8;
            long long v54 = (char *)v86;
            uint64_t v53 = v87;
            if (v87 != v86)
            {
              do
              {
                uint64_t v55 = *((void *)v53 - 1);
                v53 -= 8;
                *((void *)v52 - 1) = v55;
                v52 -= 8;
              }
              while (v53 != v54);
              uint64_t v53 = (char *)v86;
            }
            long long v86 = v52;
            uint64_t v87 = v47;
            v88[0] = &v51[8 * v50];
            if (v53) {
              operator delete(v53);
            }
          }
          else
          {
            *(void *)uint64_t v87 = v101[0];
            BOOL v47 = v46 + 8;
          }
          uint64_t v87 = v47;
          RERetain();
          if ((unint64_t)v40 >= v41)
          {
            uint64_t v57 = (v40 - v39) >> 5;
            unint64_t v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 59) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v41 - (void)v39) >> 4 > v58) {
              unint64_t v58 = (uint64_t)(v41 - (void)v39) >> 4;
            }
            if (v41 - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v59 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59) {
              unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<REPoseF>>(v59);
            }
            else {
              uint64_t v60 = 0;
            }
            long long v61 = v90;
            unint64_t v62 = (_OWORD *)(v59 + 32 * v57);
            _OWORD *v62 = v89;
            v62[1] = v61;
            if (v40 == v39)
            {
              long long v65 = (char *)(v59 + 32 * v57);
            }
            else
            {
              unint64_t v63 = v59 + 32 * v57;
              do
              {
                long long v64 = *((_OWORD *)v40 - 1);
                long long v65 = (char *)(v63 - 32);
                *(_OWORD *)(v63 - 32) = *((_OWORD *)v40 - 2);
                *(_OWORD *)(v63 - 16) = v64;
                v40 -= 32;
                v63 -= 32;
              }
              while (v40 != v39);
            }
            unint64_t v41 = v59 + 32 * v60;
            uint64_t v40 = (char *)(v62 + 2);
            if (v39) {
              operator delete(v39);
            }
            uint64_t v39 = v65;
          }
          else
          {
            long long v56 = v90;
            *(_OWORD *)uint64_t v40 = v89;
            *((_OWORD *)v40 + 1) = v56;
            v40 += 32;
          }
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(v101);
        if ((v95 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v95 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94);
        if (v93) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v93);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v73);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v97 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73 + 8);
      if (v86 == v87 && v39 == v40) {
        uint64_t Empty = REAssetManagerCollisionShapeAssetCreateEmpty();
      }
      else {
        uint64_t Empty = REAssetManagerCollisionShapeAssetCreateCompound();
      }
      uint64_t Capsule = Empty;
      uint64_t v67 = (char *)v86;
      long long v68 = v87;
      if (v86 != v87)
      {
        do
        {
          if (*(void *)v67) {
            RERelease();
          }
          v67 += 8;
        }
        while (v67 != v68);
        uint64_t v67 = (char *)v86;
      }
      uint64_t v87 = v67;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v82);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v78);
      if (v39) {
        operator delete(v39);
      }
      if (v86)
      {
        uint64_t v87 = (char *)v86;
        operator delete(v86);
      }
      uint64_t v1 = v70;
      goto LABEL_150;
    }
    long long v28 = (unint64_t *)MEMORY[0x263F90580];
    long long v29 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90580]);
    if (!v29) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v92, v4, v29);
    unint64_t v30 = atomic_load(v28);
    if (!v30) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v89, v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v30 + 16));
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v92, (uint64_t)&v77);
    if (v77.i8[0])
    {
      BOOL v31 = 1;
    }
    else
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v92, (uint64_t)&v73);
      BOOL v31 = (_BYTE)v73 != 0;
      if (!(_BYTE)v73 && v76 < 0) {
        operator delete(v74[1]);
      }
    }
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v89, (uint64_t)&v73);
    if ((_BYTE)v73)
    {
      if (v31) {
        goto LABEL_132;
      }
    }
    else
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v89, (uint64_t)&v97);
      if ((_BYTE)v97)
      {
        if (v31)
        {
LABEL_132:
          uint64_t Capsule = REAssetManagerCollisionShapeAssetCreatePlane();
          goto LABEL_136;
        }
      }
      else if (v100 < 0)
      {
        operator delete(*((void **)&v98 + 1));
      }
    }
    uint64_t Capsule = 0;
LABEL_136:
    if (!(_BYTE)v73 && v76 < 0) {
      operator delete(v74[1]);
    }
    if (!v77.i8[0] && SHIBYTE(v81) < 0) {
      operator delete(v79[1]);
    }
    if ((BYTE8(v90) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v90 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v90);
    if (*((void *)&v89 + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v89 + 1));
    }
    if ((v95 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v95 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94);
    if (v93) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v93);
    }
    goto LABEL_150;
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *(void *)&long long v97 = MEMORY[0x263F906D8] + 16;
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr((uint64_t *)&v73, (pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)&v97);
  realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v73, (uint64_t)&v77);
  if (((uint64_t)v74[1] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v74[1] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v74);
  if (*((void *)&v73 + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v73 + 1));
  }
  if (!v77.i8[0])
  {
    uint64_t Capsule = 0;
    goto LABEL_110;
  }
  uint64_t Capsule = REAssetManagerCollisionShapeAssetCreateSphere();
  if (!v77.i8[0])
  {
LABEL_110:
    if (SHIBYTE(v81) < 0) {
      operator delete(v79[1]);
    }
  }
  MEMORY[0x2455CEA80](&v97);
LABEL_150:
  BOOL v24 = Capsule != 0;
  if (Capsule)
  {
    float32x2_t v77 = (float32x2_t)Capsule;
    RERetain();
    float32x2_t v69 = *v71;
    if (*v71 != *(void *)&v77)
    {
      *uint64_t v71 = v77;
      float32x2_t v77 = v69;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v77);
    RERelease();
  }
  uint64_t result = MEMORY[0x2455CEF00](&v106);
LABEL_155:
  **(unsigned char **)(v1 + 8) = v24;
  return result;
}

void sub_23F77DDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a55)
  {
    if ((a56 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(a56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (a63 < 0)
  {
    operator delete(__p);
  }
  if (!a65 && a72 < 0) {
    operator delete(a68);
  }
  if (!a73 && SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a74);
  }
  MEMORY[0x2455CEC10](&STACK[0x208]);
  MEMORY[0x2455CEF00](v74 - 152);
  _Unwind_Resume(a1);
}

void sub_23F77E18C()
{
}

uint64_t std::__function::__func<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0>,void ()(void)>::target_type()
{
}

realityio::tokens::SphereMeshBuilderTokens_StaticTokenType *realityio::tokens::SphereMeshBuilderTokens_StaticTokenType::SphereMeshBuilderTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(MEMORY[0x2455CF820](this, "Sphere", 0) + 8);
  MEMORY[0x2455CF820](v2, "radius", 0);
  MEMORY[0x2455CF820](this + 2, "material:binding", 0);
  uint64_t v3 = *this;
  char v15 = v3;
  if ((v3 & 7) != 0)
  {
    long long v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      char v15 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    int v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v6;
    }
  }
  int v7 = this[2];
  int v17 = v7;
  if ((v7 & 7) != 0)
  {
    int v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      int v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  uint64_t v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    float v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    uint64_t v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (realityio::tokens::SphereMeshBuilderTokens_StaticTokenType *)this;
}

void sub_23F77E444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::getSphereMeshBuilderDirtyStageDescriptor(realityio *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_23F77E7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  MEMORY[0x2455D2BD0](v25, 0x10A1C40F82F910ELL);
  *(void *)(v26 - 128) = &a24;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 128));
  MEMORY[0x2455D2BD0](v24, 0x10A1C401BF1BAA1);
  _Unwind_Resume(a1);
}

void realityio::getAnimInputControlsFromInputs(uint64_t *a1, void *a2, double *a3, void *a4, void *a5, double *a6)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C41270, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C41270))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__stage.layerData.mapper[/startTimeCode]");
    MEMORY[0x2455CF7A0](&_MergedGlobals_59, __p);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    __cxa_guard_release(&qword_268C41270);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C41280, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C41280))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__stage.layerData.mapper[/endTimeCode]");
    MEMORY[0x2455CF7A0](&qword_268C41278, __p);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    __cxa_guard_release(&qword_268C41280);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C41290, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C41290))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__stage.layerData.mapper[/framesPerSecond]");
    MEMORY[0x2455CF7A0](&qword_268C41288, __p);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    __cxa_guard_release(&qword_268C41290);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C412A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C412A0))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__stage.layerData.mapper[/timeCodesPerSecond]");
    MEMORY[0x2455CF7A0](&qword_268C41298, __p);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    __cxa_guard_release(&qword_268C412A0);
  }
  *a3 = 24.0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 24.0;
  uint64_t v12 = *a1;
  if (a1[1] == *a1)
  {
    double v16 = 24.0;
    goto LABEL_19;
  }
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    uint64_t v15 = *(void *)(v12 + 8 * v14);
    if (v15 == _MergedGlobals_59)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a2 + v13));
      *a4 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
    }
    else if (v15 == qword_268C41278)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a2 + v13));
      *a5 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
    }
    else if (v15 == qword_268C41288)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a2 + v13));
      *a3 = *(double *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
    }
    else
    {
      if (v15 != qword_268C41298) {
        goto LABEL_16;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a2 + v13));
      *a6 = *(double *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
    }
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
LABEL_16:
    ++v14;
    uint64_t v12 = *a1;
    v13 += 16;
  }
  while (v14 < (a1[1] - *a1) >> 3);
  double v16 = *a6;
LABEL_19:
  *a3 = v16;
}

void sub_23F77ED04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_268C412A0);
  _Unwind_Resume(a1);
}

void realityio::getSampledValueAtTime(uint64_t a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  v49[2] = *MEMORY[0x263EF8340];
  v49[1] = 0;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_70;
  }
  int v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24)))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if ((v7 & 4) != 0) {
      uint64_t v8 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    }
    else {
      uint64_t v8 = *(void *)v6;
    }
    uint64_t v9 = *(void *)v8;
    if (*(void *)v8)
    {
      double v10 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        LODWORD(v9) = **(_DWORD **)(v8 + 32);
      }
      else if (*(double *)(a1 + 8) > a3 {
             && (v11 = *(double *)(a1 + 16), int v12 = (int)((a3 - v10) / v11), v9 - 2 >= (unint64_t)v12))
      }
      {
        double v33 = (a3 - (v10 + (double)v12 * v11)) / v11;
        LODWORD(v9) = (int)(v33 * (double)*(int *)(*(void *)(v8 + 32) + 4 * (v12 + 1))
                          + (1.0 - v33) * (double)*(int *)(*(void *)(v8 + 32) + 4 * v12));
      }
      else
      {
        LODWORD(v9) = *(_DWORD *)(*(void *)(v8 + 32) + 4 * v9 - 4);
      }
    }
    uint64_t v43 = (char *)&unk_26F33764B;
    LODWORD(__p) = v9;
    goto LABEL_69;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>(v6))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    if ((v13 & 4) != 0) {
      uint64_t v14 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    }
    else {
      uint64_t v14 = *(void *)v6;
    }
    uint64_t v15 = *(void *)v14;
    if (*(void *)v14)
    {
      double v16 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        float v19 = **(float **)(v14 + 32);
      }
      else if (*(double *)(a1 + 8) > a3 {
             && (double v17 = *(double *)(a1 + 16), v18 = (int)((a3 - v16) / v17), v15 - 2 >= (unint64_t)v18))
      }
      {
        double v36 = (a3 - (v16 + (double)v18 * v17)) / v17;
        float v19 = v36 * *(float *)(*(void *)(v14 + 32) + 4 * (v18 + 1))
            + (1.0 - v36) * *(float *)(*(void *)(v14 + 32) + 4 * v18);
      }
      else
      {
        float v19 = *(float *)(*(void *)(v14 + 32) + 4 * v15 - 4);
      }
    }
    else
    {
      float v19 = 0.0;
    }
    uint64_t v43 = (char *)&unk_26F333A9B;
    *(float *)&std::string __p = v19;
    goto LABEL_69;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>(v6))
  {
    uint64_t v20 = *(void *)(a1 + 32);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    }
    else {
      uint64_t v21 = *(void *)v6;
    }
    uint64_t v22 = *(void *)v21;
    if (*(void *)v21)
    {
      double v23 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        double v26 = **(double **)(v21 + 32);
      }
      else if (*(double *)(a1 + 8) > a3 {
             && (double v24 = *(double *)(a1 + 16), v25 = (int)((a3 - v23) / v24), v22 - 2 >= (unint64_t)v25))
      }
      {
        double v37 = (a3 - (v23 + (double)v25 * v24)) / v24;
        double v26 = v37 * *(double *)(*(void *)(v21 + 32) + 8 * (v25 + 1))
            + (1.0 - v37) * *(double *)(*(void *)(v21 + 32) + 8 * v25);
      }
      else
      {
        double v26 = *(double *)(*(void *)(v21 + 32) + 8 * v22 - 8);
      }
    }
    else
    {
      double v26 = 0.0;
    }
    uint64_t v43 = (char *)&unk_26F33366B;
    std::string __p = *(void **)&v26;
    goto LABEL_69;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(v6))
  {
    uint64_t v27 = *(void *)(a1 + 32);
    if ((v27 & 4) != 0) {
      uint64_t v28 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v27 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    }
    else {
      uint64_t v28 = *(void *)v6;
    }
    unint64_t v29 = *(void *)v28;
    if (*(void *)v28)
    {
      double v30 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        unint64_t v29 = **(void **)(v28 + 32);
      }
      else if (*(double *)(a1 + 8) > a3 && (double v31 = *(double *)(a1 + 16), v32 = (int)((a3 - v30) / v31), v29 - 2 >= v32))
      {
        uint64_t v38 = v32;
        double v39 = (a3 - (v30 + (double)v32 * v31)) / v31;
        uint64_t v40 = *(void *)(v28 + 32);
        unint64_t v29 = ((int)(v39 * (double)*(int *)(v40 + 8 * ((int)v38 + 1)))
                           + (int)((1.0 - v39) * (double)*(int *)(v40 + 8 * v38))) | ((unint64_t)((int)(v39 * (double)*(int *)(v40 + 8 * ((int)v38 + 1) + 4)) + (int)((1.0 - v39) * (double)*(int *)(v40 + 8 * v38 + 4))) << 32);
      }
      else
      {
        unint64_t v29 = *(void *)(*(void *)(v28 + 32) + 8 * v29 - 8);
      }
    }
    std::string __p = (void *)v29;
    uint64_t v43 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>(void)::ti
        + 3;
    goto LABEL_69;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(v6))
  {
    uint64_t v43 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>(void)::ti
        + 3;
    LODWORD(__p) = TimeSampledDataT::getValueAtTime<pxrInternal__aapl__pxrReserved__::GfVec2h>(a1, a3);
LABEL_69:
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(v49, &__p);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
LABEL_70:
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a2, v49);
    goto LABEL_71;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec2f>(a1, v49, a3)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec2d>(a1)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3i>(a1)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3h>(a1, v49, a3)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3d>(a1)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4i>(a1)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4h>(a1, v49, a3)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4d>(a1)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(a1, a3)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(a1, a3)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(a1, a3)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(a1, a3)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1, a3)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1, a3)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfQuath>(a1, v49, a3)) {
    goto LABEL_70;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfQuatf>(a1)) {
    goto LABEL_70;
  }
  long long v34 = (realityio *)getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfQuatd>(a1);
  if (v34) {
    goto LABEL_70;
  }
  unint64_t v35 = *(id *)(realityio::logObjects(v34) + 24);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((uint64_t *)&__p, v6);
    unint64_t v41 = v44 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 134218242;
    double v46 = a3;
    __int16 v47 = 2080;
    uint64_t v48 = v41;
    _os_log_error_impl(&dword_23F4EA000, v35, OS_LOG_TYPE_ERROR, "unhandled getSampledValueAtTime %g %s  \n", buf, 0x16u);
    if (v44 < 0) {
      operator delete(__p);
    }
  }

  a2[1] = 0;
LABEL_71:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v49);
}

void sub_23F77F458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, void *a2, double a3)
{
  v17[2] = *MEMORY[0x263EF8340];
  int v6 = (uint64_t *)(a1 + 24);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if ((v8 & 4) != 0) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    }
    else {
      uint64_t v9 = *v6;
    }
    uint64_t v10 = *(void *)v9;
    if (*(void *)v9)
    {
      double v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        float32x2_t v14 = **(float32x2_t **)(v9 + 32);
      }
      else if (*(double *)(a1 + 8) > a3 {
             && (double v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      }
      {
        double v16 = (a3 - (v11 + (double)v13 * v12)) / v12;
        float32x2_t v14 = vadd_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(*(void *)(v9 + 32) + 8 * v13)), 1.0 - v16)), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(*(void *)(v9 + 32) + 8 * (v13 + 1))), v16)));
      }
      else
      {
        float32x2_t v14 = *(float32x2_t *)(*(void *)(v9 + 32) + 8 * v10 - 8);
      }
    }
    else
    {
      float32x2_t v14 = 0;
    }
    v17[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(void)::ti
           + 3;
    v17[0] = v14;
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v17);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if ((v4 & 4) != 0) {
      (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    operator new();
  }
  return v3;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if ((v4 & 4) != 0) {
      (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    operator new();
  }
  return v3;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, void *a2, double a3)
{
  v34[2] = *MEMORY[0x263EF8340];
  int v6 = (unint64_t **)(a1 + 24);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if ((v8 & 4) != 0) {
      uint64_t v9 = (unint64_t *)(*(uint64_t (**)(unint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    }
    else {
      uint64_t v9 = *v6;
    }
    unint64_t v10 = *v9;
    if (!*v9) {
      goto LABEL_11;
    }
    double v11 = *(double *)a1;
    if (*(double *)a1 >= a3)
    {
      double v17 = (unsigned int *)v9[4];
      uint64_t v15 = *((unsigned __int16 *)v17 + 2);
      uint64_t v16 = *v17;
    }
    else
    {
      if (*(double *)(a1 + 8) > a3)
      {
        double v12 = *(double *)(a1 + 16);
        int v13 = (int)((a3 - v11) / v12);
        if (v10 - 2 >= v13)
        {
          int v19 = (int)((a3 - v11) / v12);
          double v20 = (a3 - (v11 + (double)v13 * v12)) / v12;
          unint64_t v21 = v9[4];
          uint64_t v22 = (int *)(v21 + 6 * v13);
          int v23 = *v22;
          WORD2(v34[0]) = *((_WORD *)v22 + 2);
          LODWORD(v34[0]) = v23;
          double v24 = pxrInternal__aapl__pxrReserved__::GfVec3h::operator*=((unsigned __int16 *)v34, 1.0 - v20);
          int v25 = (int *)(v21 + 6 * (v19 + 1));
          uint64_t v26 = v24[2];
          uint64_t v27 = *(unsigned int *)v24;
          int v28 = *v25;
          WORD2(v34[0]) = *((_WORD *)v25 + 2);
          LODWORD(v34[0]) = v28;
          unint64_t v29 = pxrInternal__aapl__pxrReserved__::GfVec3h::operator*=((unsigned __int16 *)v34, v20);
          int v30 = *(_DWORD *)v29;
          unsigned __int16 v33 = v29[2];
          int v32 = v30;
          WORD2(v34[0]) = (v27 | (unint64_t)(v26 << 32)) >> 32;
          LODWORD(v34[0]) = v27;
          double v31 = pxrInternal__aapl__pxrReserved__::GfVec3h::operator+=((unsigned __int16 *)v34, (unsigned __int16 *)&v32);
          unint64_t v10 = *(unsigned int *)v31 | ((unint64_t)v31[2] << 32);
          goto LABEL_11;
        }
      }
      uint64_t v14 = v9[4] + 6 * v10;
      uint64_t v15 = *(unsigned __int16 *)(v14 - 2);
      uint64_t v16 = *(unsigned int *)(v14 - 6);
    }
    unint64_t v10 = v16 | (v15 << 32);
LABEL_11:
    v34[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>(void)::ti
           + 3;
    LODWORD(v34[0]) = v10;
    WORD2(v34[0]) = WORD2(v10);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v34);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if ((v4 & 4) != 0) {
      (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    operator new();
  }
  return v3;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if ((v4 & 4) != 0) {
      (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    operator new();
  }
  return v3;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if ((v4 & 4) != 0) {
      (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    operator new();
  }
  return v3;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, void *a2, double a3)
{
  v29[2] = *MEMORY[0x263EF8340];
  int v6 = (uint64_t *)(a1 + 24);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if ((v8 & 4) != 0) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    }
    else {
      uint64_t v9 = *v6;
    }
    unint64_t v10 = *(void *)v9;
    if (*(void *)v9)
    {
      double v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        unint64_t v10 = **(void **)(v9 + 32);
      }
      else if (*(double *)(a1 + 8) > a3 && (double v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= v13))
      {
        int v15 = (int)((a3 - v11) / v12);
        double v16 = (a3 - (v11 + (double)v13 * v12)) / v12;
        uint64_t v17 = *(void *)(v9 + 32);
        v29[0] = *(void *)(v17 + 8 * v13);
        pxrInternal__aapl__pxrReserved__::GfVec4h::operator*=((unsigned __int16 *)v29, 1.0 - v16);
        unint64_t v18 = v29[0];
        v29[0] = *(void *)(v17 + 8 * (v15 + 1));
        pxrInternal__aapl__pxrReserved__::GfVec4h::operator*=((unsigned __int16 *)v29, v16);
        unint64_t v19 = v29[0];
        uint64_t v20 = MEMORY[0x263F90640];
        float v21 = *(float *)(MEMORY[0x263F90640] + 4 * (unsigned __int16)v18)
            + *(float *)(MEMORY[0x263F90640] + 4 * LOWORD(v29[0]));
        if (v21 == 0.0)
        {
          unsigned int v22 = HIWORD(LODWORD(v21));
        }
        else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v21) >> 23)))
        {
          unsigned int v22 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v21) >> 23))
              + (((LODWORD(v21) & 0x7FFFFF) + ((LODWORD(v21) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v22) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v21));
        }
        float v23 = *(float *)(v20 + 4 * WORD1(v18)) + *(float *)(v20 + 4 * WORD1(v19));
        if (v23 == 0.0)
        {
          unsigned int v24 = HIWORD(LODWORD(v23));
        }
        else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v23) >> 23)))
        {
          unsigned int v24 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v23) >> 23))
              + (((LODWORD(v23) & 0x7FFFFF) + ((LODWORD(v23) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v24) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v23));
        }
        float v25 = *(float *)(v20 + 4 * WORD2(v18)) + *(float *)(v20 + 4 * WORD2(v19));
        if (v25 == 0.0)
        {
          unsigned int v26 = HIWORD(LODWORD(v25));
        }
        else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v25) >> 23)))
        {
          unsigned int v26 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v25) >> 23))
              + (((LODWORD(v25) & 0x7FFFFF) + ((LODWORD(v25) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v26) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v25));
        }
        float v27 = *(float *)(v20 + 4 * HIWORD(v18)) + *(float *)(v20 + 4 * HIWORD(v19));
        if (v27 == 0.0)
        {
          uint64_t v28 = HIWORD(LODWORD(v27));
        }
        else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v27) >> 23)))
        {
          uint64_t v28 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v27) >> 23))
              + (((LODWORD(v27) & 0x7FFFFF) + ((LODWORD(v27) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          uint64_t v28 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v27));
        }
        unint64_t v10 = ((unint64_t)(unsigned __int16)v26 << 32) | (v28 << 48) | ((unint64_t)(unsigned __int16)v24 << 16) | (unsigned __int16)v22;
      }
      else
      {
        unint64_t v10 = *(void *)(*(void *)(v9 + 32) + 8 * v10 - 8);
      }
    }
    v29[0] = v10;
    v29[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>(void)::ti
           + 3;
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v29);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v29);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if ((v4 & 4) != 0) {
      (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    operator new();
  }
  return v3;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if ((v4 & 4) != 0) {
      (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    operator new();
  }
  return v3;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v5 = (void **)(a1 + 24);
    if (*(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 16) == 28)
    {
      if ((v2 & 4) == 0)
      {
LABEL_4:
        int v6 = *v5;
LABEL_5:
        if (*v6
          && *(double *)a1 < a2
          && *(double *)(a1 + 8) > a2
          && *v6 - 2 >= (unint64_t)(int)((a2 - *(double *)a1) / *(double *)(a1 + 16)))
        {
          pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator*=();
          pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator*=();
          pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator+=();
        }
        operator new();
      }
LABEL_13:
      int v6 = (void *)(*(uint64_t (**)(void **))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      goto LABEL_5;
    }
    if ((v2 & 4) != 0
    {
      uint64_t v2 = *(void *)(a1 + 32);
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  return 0;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, double a2)
{
  uint64_t v4 = (void **)(a1 + 24);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if ((v6 & 4) != 0) {
      uint64_t v7 = (void *)(*(uint64_t (**)(void **))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v7 = *v4;
    }
    if (*v7
      && *(double *)a1 < a2
      && *(double *)(a1 + 8) > a2
      && *v7 - 2 >= (unint64_t)(int)((a2 - *(double *)a1) / *(double *)(a1 + 16)))
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=();
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=();
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=();
    }
    operator new();
  }
  return v5;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v5 = (void **)(a1 + 24);
    if (*(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 16) == 27) {
      goto LABEL_6;
    }
    if ((v2 & 4) != 0
    {
      uint64_t v2 = *(void *)(a1 + 32);
LABEL_6:
      if ((v2 & 4) != 0) {
        uint64_t v6 = (void *)(*(uint64_t (**)(void **))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      else {
        uint64_t v6 = *v5;
      }
      if (*v6
        && *(double *)a1 < a2
        && *(double *)(a1 + 8) > a2
        && *v6 - 2 >= (unint64_t)(int)((a2 - *(double *)a1) / *(double *)(a1 + 16)))
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
        pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
        pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator+=();
      }
      operator new();
    }
  }
  return 0;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, double a2)
{
  uint64_t v4 = (void **)(a1 + 24);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if ((v6 & 4) != 0) {
      uint64_t v7 = (void *)(*(uint64_t (**)(void **))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v7 = *v4;
    }
    if (*v7
      && *(double *)a1 < a2
      && *(double *)(a1 + 8) > a2
      && *v7 - 2 >= (unint64_t)(int)((a2 - *(double *)a1) / *(double *)(a1 + 16)))
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=();
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=();
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=();
    }
    operator new();
  }
  return v5;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v5 = (void **)(a1 + 24);
    if (*(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 16) == 26) {
      goto LABEL_6;
    }
    if ((v2 & 4) != 0
    {
      uint64_t v2 = *(void *)(a1 + 32);
LABEL_6:
      if ((v2 & 4) != 0) {
        uint64_t v6 = (void *)(*(uint64_t (**)(void **))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      else {
        uint64_t v6 = *v5;
      }
      if (*v6
        && *(double *)a1 < a2
        && *(double *)(a1 + 8) > a2
        && *v6 - 2 >= (unint64_t)(int)((a2 - *(double *)a1) / *(double *)(a1 + 16)))
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator+=();
      }
      operator new();
    }
  }
  return 0;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, double a2)
{
  uint64_t v4 = (void **)(a1 + 24);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if ((v6 & 4) != 0) {
      uint64_t v7 = (void *)(*(uint64_t (**)(void **))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v7 = *v4;
    }
    if (*v7
      && *(double *)a1 < a2
      && *(double *)(a1 + 8) > a2
      && *v7 - 2 >= (unint64_t)(int)((a2 - *(double *)a1) / *(double *)(a1 + 16)))
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=();
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=();
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=();
    }
    operator new();
  }
  return v5;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, void *a2, double a3)
{
  v26[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (uint64_t *)(a1 + 24);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if ((v8 & 4) != 0) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    }
    else {
      uint64_t v9 = *v6;
    }
    uint64_t v10 = *(void *)v9;
    if (*(void *)v9)
    {
      double v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        uint64_t v10 = **(void **)(v9 + 32);
      }
      else if (*(double *)(a1 + 8) > a3 {
             && (double v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      }
      {
        uint64_t v15 = v13;
        double v16 = (a3 - (v11 + (double)v13 * v12)) / v12;
        uint64_t v17 = *(void *)(v9 + 32);
        float v18 = 1.0 - v16;
        if (v18 == 0.0)
        {
          unsigned int v19 = HIWORD(LODWORD(v18));
        }
        else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v18) >> 23)))
        {
          unsigned int v19 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v18) >> 23))
              + (((LODWORD(v18) & 0x7FFFFF) + ((LODWORD(v18) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v19) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v18));
        }
        v26[0] = *(void *)(v17 + 8 * v15);
        pxrInternal__aapl__pxrReserved__::GfQuath::operator*=((unsigned __int16 *)v26, v19);
        unint64_t v20 = v26[0];
        float v21 = v16;
        if (v21 == 0.0)
        {
          unsigned int v22 = HIWORD(LODWORD(v21));
        }
        else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v21) >> 23)))
        {
          unsigned int v22 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v21) >> 23))
              + (((LODWORD(v21) & 0x7FFFFF) + ((LODWORD(v21) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v22) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v21));
        }
        v26[0] = *(void *)(v17 + 8 * ((int)v15 + 1));
        pxrInternal__aapl__pxrReserved__::GfQuath::operator*=((unsigned __int16 *)v26, v22);
        unint64_t v25 = v26[0];
        v26[0] = v20;
        float v23 = *(float *)(MEMORY[0x263F90640] + ((v20 >> 46) & 0x3FFFC))
            + *(float *)(MEMORY[0x263F90640] + ((v25 >> 46) & 0x3FFFC));
        if (v23 == 0.0)
        {
          unsigned int v24 = HIWORD(LODWORD(v23));
        }
        else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v23) >> 23)))
        {
          unsigned int v24 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v23) >> 23))
              + (((LODWORD(v23) & 0x7FFFFF) + ((LODWORD(v23) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v24) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v23));
        }
        HIWORD(v26[0]) = v24;
        pxrInternal__aapl__pxrReserved__::GfVec3h::operator+=((unsigned __int16 *)v26, (unsigned __int16 *)&v25);
        uint64_t v10 = v26[0];
      }
      else
      {
        uint64_t v10 = *(void *)(*(void *)(v9 + 32) + 8 * v10 - 8);
      }
    }
    v26[0] = v10;
    v26[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>(void)::ti
           + 1;
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v26);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v26);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if ((v4 & 4) != 0) {
      (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    operator new();
  }
  return v3;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if ((v4 & 4) != 0) {
      (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    operator new();
  }
  return v3;
}

uint64_t TimeSampledDataT::getValueAtTime<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, double a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
  }
  else {
    uint64_t v6 = *v4;
  }
  uint64_t v7 = *(void *)v6;
  if (!*(void *)v6) {
    return 0;
  }
  double v8 = *(double *)a1;
  if (*(double *)a1 >= a2) {
    return **(unsigned int **)(v6 + 32);
  }
  if (*(double *)(a1 + 8) <= a2) {
    return *(unsigned int *)(*(void *)(v6 + 32) + 4 * v7 - 4);
  }
  double v9 = *(double *)(a1 + 16);
  int v10 = (int)((a2 - v8) / v9);
  if (v7 - 2 < (unint64_t)v10) {
    return *(unsigned int *)(*(void *)(v6 + 32) + 4 * v7 - 4);
  }
  double v13 = (a2 - (v8 + (double)v10 * v9)) / v9;
  uint64_t v14 = *(void *)(v6 + 32);
  int v15 = v10 + 1;
  unsigned int v25 = *(_DWORD *)(v14 + 4 * v10);
  pxrInternal__aapl__pxrReserved__::GfVec2h::operator*=((unsigned __int16 *)&v25, 1.0 - v13);
  unint64_t v16 = v25;
  unsigned int v26 = *(_DWORD *)(v14 + 4 * v15);
  pxrInternal__aapl__pxrReserved__::GfVec2h::operator*=((unsigned __int16 *)&v26, v13);
  unint64_t v17 = (unint64_t)v26 >> 16;
  unint64_t v18 = v16 >> 16;
  uint64_t v19 = (unsigned __int16)v16;
  uint64_t v20 = MEMORY[0x263F90640];
  float v21 = *(float *)(MEMORY[0x263F90640] + 4 * v19) + *(float *)(MEMORY[0x263F90640] + 4 * (unsigned __int16)v26);
  if (v21 == 0.0)
  {
    unsigned int v22 = HIWORD(LODWORD(v21));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v21) >> 23)))
  {
    unsigned int v22 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v21) >> 23))
        + (((LODWORD(v21) & 0x7FFFFF) + ((LODWORD(v21) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v22) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v21));
  }
  float v23 = *(float *)(v20 + 4 * v18) + *(float *)(v20 + 4 * v17);
  if (v23 == 0.0)
  {
    unsigned int v24 = HIWORD(LODWORD(v23));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v23) >> 23)))
  {
    unsigned int v24 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v23) >> 23))
        + (((LODWORD(v23) & 0x7FFFFF) + ((LODWORD(v23) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v24) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v23));
  }
  return (unsigned __int16)v22 | ((unsigned __int16)v24 << 16);
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfVec2h::operator*=(unsigned __int16 *a1, double a2)
{
  float v3 = a2;
  uint64_t v4 = MEMORY[0x263F90640];
  float v5 = *(float *)(MEMORY[0x263F90640] + 4 * *a1) * v3;
  if (v5 == 0.0)
  {
    unsigned int v6 = HIWORD(LODWORD(v5));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v5) >> 23)))
  {
    unsigned int v6 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v5) >> 23))
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  *a1 = v6;
  float v7 = *(float *)(v4 + 4 * a1[1]) * v3;
  if (v7 == 0.0)
  {
    unsigned int v8 = HIWORD(LODWORD(v7));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v7) >> 23)))
  {
    unsigned int v8 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v7) >> 23))
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  a1[1] = v8;
  return a1;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfVec4h::operator*=(unsigned __int16 *a1, double a2)
{
  float v3 = a2;
  uint64_t v4 = MEMORY[0x263F90640];
  float v5 = *(float *)(MEMORY[0x263F90640] + 4 * *a1) * v3;
  if (v5 == 0.0)
  {
    unsigned int v6 = HIWORD(LODWORD(v5));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v5) >> 23)))
  {
    unsigned int v6 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v5) >> 23))
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  *a1 = v6;
  float v7 = *(float *)(v4 + 4 * a1[1]) * v3;
  if (v7 == 0.0)
  {
    unsigned int v8 = HIWORD(LODWORD(v7));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v7) >> 23)))
  {
    unsigned int v8 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v7) >> 23))
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  a1[1] = v8;
  float v9 = *(float *)(v4 + 4 * a1[2]) * v3;
  if (v9 == 0.0)
  {
    unsigned int v10 = HIWORD(LODWORD(v9));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v9) >> 23)))
  {
    unsigned int v10 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v9) >> 23))
        + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
  }
  a1[2] = v10;
  float v11 = *(float *)(v4 + 4 * a1[3]) * v3;
  if (v11 == 0.0)
  {
    unsigned int v12 = HIWORD(LODWORD(v11));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v11) >> 23)))
  {
    unsigned int v12 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v11) >> 23))
        + (((LODWORD(v11) & 0x7FFFFF) + ((LODWORD(v11) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v12) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v11));
  }
  a1[3] = v12;
  return a1;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfQuath::operator*=(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t v3 = MEMORY[0x263F90640];
  uint64_t v4 = a2;
  float v5 = *(float *)(MEMORY[0x263F90640] + 4 * a1[3]) * *(float *)(MEMORY[0x263F90640] + 4 * a2);
  if (v5 == 0.0)
  {
    unsigned int v6 = HIWORD(LODWORD(v5));
  }
  else if (*(_WORD *)(MEMORY[0x263F90638] + 2 * (LODWORD(v5) >> 23)))
  {
    unsigned int v6 = *(unsigned __int16 *)(MEMORY[0x263F90638] + 2 * (LODWORD(v5) >> 23))
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  a1[3] = v6;
  pxrInternal__aapl__pxrReserved__::GfVec3h::operator*=(a1, *(float *)(v3 + 4 * v4));
  return a1;
}

void *RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(RIO_MTLX::PortElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v, "nodename");
  }
  return RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v;
}

void sub_23F782144(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(RIO_MTLX::PortElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v, "nodegraph");
  }
  return RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v;
}

void sub_23F7821C4(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(RIO_MTLX::PortElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(void)::v, "output");
  }
  return RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(void)::v;
}

void sub_23F782244(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(RIO_MTLX::PortElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(void)::v, "channels");
  }
  return RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(void)::v;
}

void sub_23F7822C4(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(RIO_MTLX::InterfaceElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(void)::v, "nodedef");
  }
  return RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(void)::v;
}

void sub_23F782344(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE(RIO_MTLX::InterfaceElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE(void)::v, "target");
  }
  return RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE(void)::v;
}

void sub_23F7823C4(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(RIO_MTLX::InterfaceElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(void)::v, "version");
  }
  return RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(void)::v;
}

void sub_23F782444(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::InterfaceElement::DEFAULT_VERSION_ATTRIBUTE(RIO_MTLX::InterfaceElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::InterfaceElement::DEFAULT_VERSION_ATTRIBUTE(void)::v, "isdefaultversion");
  }
  return RIO_MTLX::InterfaceElement::DEFAULT_VERSION_ATTRIBUTE(void)::v;
}

void sub_23F7824C4(_Unwind_Exception *a1)
{
}

void RIO_MTLX::Input::DEFAULT_GEOM_PROP_ATTRIBUTE(RIO_MTLX::Input *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_60))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C412C0, "defaultgeomprop");
    __cxa_guard_release(&_MergedGlobals_60);
  }
}

void sub_23F782550(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Output::DEFAULT_INPUT_ATTRIBUTE(RIO_MTLX::Output *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Output::DEFAULT_INPUT_ATTRIBUTE(void)::v, "defaultinput");
  }
  return RIO_MTLX::Output::DEFAULT_INPUT_ATTRIBUTE(void)::v;
}

void sub_23F7825D0(_Unwind_Exception *a1)
{
}

long long *RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(RIO_MTLX::PortElement *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "float");
    int v23 = 2020749616;
    std::set<char>::set[abi:ne180100](v24, (char *)&v23, 4);
    std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(v27, (long long *)v25, v24);
    std::string::basic_string[abi:ne180100]<0>(v21, "color3");
    qmemcpy(v19, "01rgb", 5);
    std::set<char>::set[abi:ne180100](v20, (char *)v19, 5);
    std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(v28, (long long *)v21, v20);
    std::string::basic_string[abi:ne180100]<0>(v17, "color4");
    qmemcpy(v15, "01rgba", 6);
    std::set<char>::set[abi:ne180100](v16, (char *)v15, 6);
    std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(v29, (long long *)v17, v16);
    std::string::basic_string[abi:ne180100]<0>(v13, "vector2");
    int v11 = 2037920048;
    std::set<char>::set[abi:ne180100](v12, (char *)&v11, 4);
    std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(v30, (long long *)v13, v12);
    std::string::basic_string[abi:ne180100]<0>(v9, "vector3");
    qmemcpy(v7, "01xyz", 5);
    std::set<char>::set[abi:ne180100](v8, (char *)v7, 5);
    std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(v31, (long long *)v9, v8);
    std::string::basic_string[abi:ne180100]<0>(__p, "vector4");
    qmemcpy(v3, "01xyzw", 6);
    std::set<char>::set[abi:ne180100](v4, (char *)v3, 6);
    std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(v32, (long long *)__p, v4);
    std::unordered_map<std::string,std::set<char>>::unordered_map((uint64_t)v27, 6);
    for (unint64_t i = 240; i != -48; i -= 48)
      std::pair<std::string const,std::set<char>>::~pair((uint64_t)&v27[i / 0x18]);
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((void *)v4[1]);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((void *)v8[1]);
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((void *)v12[1]);
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((void *)v16[1]);
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((void *)v20[1]);
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((void *)v24[1]);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }
  return &RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v;
}

void sub_23F7828E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  for (uint64_t i = 240; i != -48; i -= 48)
    std::pair<std::string const,std::set<char>>::~pair(v71 + i);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a14);
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a24);
  if (a31 < 0) {
    operator delete(a26);
  }
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a34);
  if (a41 < 0) {
    operator delete(a36);
  }
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a44);
  if (a51 < 0) {
    operator delete(a46);
  }
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a54);
  if (a61 < 0) {
    operator delete(a56);
  }
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a64);
  if (a71 < 0) {
    operator delete(a66);
  }
  _Unwind_Resume(a1);
}

void sub_23F782A4C()
{
}

void sub_23F782A58()
{
}

void sub_23F782A64()
{
}

void sub_23F782A74()
{
}

void sub_23F782A84()
{
}

uint64_t std::pair<std::string const,std::set<char>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

long long *RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(RIO_MTLX::PortElement *this)
{
  void v8[4] = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(v3, "float");
    v3[3] = 1;
    std::string::basic_string[abi:ne180100]<0>(v4, "color3");
    uint64_t v4[3] = 3;
    std::string::basic_string[abi:ne180100]<0>(v5, "color4");
    v5[3] = 4;
    std::string::basic_string[abi:ne180100]<0>(v6, "vector2");
    v6[3] = 2;
    std::string::basic_string[abi:ne180100]<0>(v7, "vector3");
    v7[3] = 3;
    std::string::basic_string[abi:ne180100]<0>(v8, "vector4");
    uint64_t v8[3] = 4;
    std::unordered_map<std::string,unsigned long>::unordered_map((uint64_t)v3, 6);
    for (uint64_t i = 0; i != -24; i -= 4)
    {
      if (SHIBYTE(v8[i + 2]) < 0) {
        operator delete((void *)v8[i]);
      }
    }
  }
  return &RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv;
}

void sub_23F782C3C(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 183) < 0) {
      operator delete(*(void **)(v1 + v3 + 160));
    }
    v3 -= 32;
    if (v3 == -192)
    {
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F782CB0()
{
}

void RIO_MTLX::PortElement::setConnectedNode(RIO_MTLX::PortElement *a1, const std::string **a2)
{
  if (*a2)
  {
    uint64_t v3 = *a2 + 2;
    RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(a1);
    RIO_MTLX::Element::setAttribute((uint64_t *)a1, (long long *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v, v3);
  }
  else
  {
    RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(a1);
    RIO_MTLX::Element::removeAttribute(a1, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v);
  }
}

void RIO_MTLX::PortElement::getConnectedNode(RIO_MTLX::PortElement *this@<X0>, void *a2@<X8>)
{
  RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::GraphElement>((uint64_t)this, &v6);
  uint64_t v4 = v6;
  if (v6)
  {
    NodeName = RIO_MTLX::PortElement::getNodeName(this);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Node>(v4, (unsigned __int8 *)NodeName, a2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_23F782DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL RIO_MTLX::PortElement::validate(RIO_MTLX::PortElement *a1, std::string *a2)
{
  unsigned __int8 v104 = 1;
  uint64_t v4 = (RIO_MTLX::PortElement *)(*(void *(**)(std::string **__return_ptr))(*(void *)a1 + 64))(&v102);
  RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(v4);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v)|| (RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(0), std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(void)::v)))
  {
    NodeName = (std::string *)RIO_MTLX::PortElement::getNodeName(a1);
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeGraph>((uint64_t)a1, NodeName, &v100);
    if (!v100)
    {
      uint64_t v6 = v102;
      std::string::basic_string[abi:ne180100]<0>(v98, "Invalid port connection");
      RIO_MTLX::Element::validateRequire((uint64_t)a1, v6 != 0, &v104, a2, v98);
      if (v99 < 0) {
        operator delete((void *)v98[0]);
      }
    }
    if (v101) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v101);
    }
  }
  if (v102)
  {
    Outputuint64_t String = RIO_MTLX::PortElement::getOutputString(a1);
    unsigned int v8 = (unsigned __int8 *)OutputString;
    uint64_t v9 = *((unsigned __int8 *)OutputString + 23);
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = OutputString[1];
    }
    if (v9)
    {
      RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)OutputString);
      char v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v);
      if (v10)
      {
        int v11 = v102;
        unsigned int v12 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v10);
        RIO_MTLX::Node::getNodeDef(v11, (uint64_t)v12, 0, &v100);
        if (v100)
        {
          RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>((uint64_t)v100, v8, &v96);
          char v14 = v96;
          double v13 = v97;
          if (v96)
          {
            int v15 = (size_t *)(*(uint64_t (**)(std::string *))(v102->__r_.__value_.__r.__words[0] + 56))(v102);
            unint64_t v16 = RIO_MTLX::MULTI_OUTPUT_TYPE_STRING((RIO_MTLX *)v15);
            uint64_t v17 = *((unsigned __int8 *)v15 + 23);
            if ((v17 & 0x80u) == 0) {
              size_t v18 = *((unsigned __int8 *)v15 + 23);
            }
            else {
              size_t v18 = v15[1];
            }
            uint64_t v19 = *((unsigned __int8 *)v16 + 23);
            int v20 = (char)v19;
            if ((v19 & 0x80u) != 0) {
              uint64_t v19 = v16[1];
            }
            if (v18 == v19)
            {
              float v21 = v20 >= 0 ? (unsigned __int8 *)v16 : (unsigned __int8 *)*v16;
              if ((v17 & 0x80) != 0)
              {
                char v29 = memcmp((const void *)*v15, v21, v15[1]) == 0;
              }
              else if (*((unsigned char *)v15 + 23))
              {
                uint64_t v22 = v17 - 1;
                do
                {
                  int v24 = *(unsigned __int8 *)v15;
                  int v15 = (size_t *)((char *)v15 + 1);
                  int v23 = v24;
                  int v26 = *v21++;
                  int v25 = v26;
                  BOOL v27 = v22-- != 0;
                  char v28 = v27;
                  char v29 = v23 == v25;
                }
                while (v23 == v25 && (v28 & 1) != 0);
              }
              else
              {
                char v29 = 1;
              }
            }
            else
            {
              char v29 = 0;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "Multi-output type expected in port connection");
            RIO_MTLX::Element::validateRequire((uint64_t)a1, v29, &v104, a2, (const void **)__p);
            if (v95 < 0)
            {
              double v37 = __p[0];
              goto LABEL_86;
            }
          }
          goto LABEL_87;
        }
      }
      else
      {
        RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(0);
        if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v))
        {
          RIO_MTLX::Element::getDocument(a1, &v96);
          RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>((uint64_t)v96, v8, &v100);
          char v14 = v100;
          double v13 = v101;
          char v100 = 0;
          unint64_t v101 = 0;
          uint64_t v45 = v97;
          if (!v97)
          {
LABEL_89:
            std::string::basic_string[abi:ne180100]<0>(v90, "No output found for port connection");
            RIO_MTLX::Element::validateRequire((uint64_t)a1, v14 != 0, &v104, a2, (const void **)v90);
            if (v91 < 0)
            {
              operator delete(v90[0]);
              if (!v14) {
                goto LABEL_120;
              }
            }
            else if (!v14)
            {
              goto LABEL_120;
            }
            RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(v60);
            if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(void)::v))
            {
              Channels = RIO_MTLX::PortElement::getChannels(a1);
              unint64_t v62 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::InterfaceElement *))(*(void *)v14 + 56))(v14);
              unint64_t v63 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::PortElement *))(*(void *)a1 + 56))(a1);
              LOBYTE(Channels) = RIO_MTLX::PortElement::validChannelsString((uint64_t)Channels, v62, v63);
              std::string::basic_string[abi:ne180100]<0>(v88, "Invalid channels string in port connection");
              RIO_MTLX::Element::validateRequire((uint64_t)a1, (char)Channels, &v104, a2, v88);
              if ((v89 & 0x80000000) == 0) {
                goto LABEL_120;
              }
              long long v64 = v88;
            }
            else
            {
              long long v65 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::PortElement *))(*(void *)a1 + 56))(a1);
              uint64_t v66 = (*(uint64_t (**)(RIO_MTLX::InterfaceElement *))(*(void *)v14 + 56))(v14);
              uint64_t v67 = v65[23];
              if ((v67 & 0x80u) == 0) {
                uint64_t v68 = v65[23];
              }
              else {
                uint64_t v68 = *((void *)v65 + 1);
              }
              uint64_t v69 = *(unsigned __int8 *)(v66 + 23);
              int v70 = (char)v69;
              if ((v69 & 0x80u) != 0) {
                uint64_t v69 = *(void *)(v66 + 8);
              }
              if (v68 == v69)
              {
                if (v70 >= 0) {
                  uint64_t v71 = (unsigned __int8 *)v66;
                }
                else {
                  uint64_t v71 = *(unsigned __int8 **)v66;
                }
                if ((v67 & 0x80) != 0)
                {
                  char v78 = memcmp(*(const void **)v65, v71, *((void *)v65 + 1)) == 0;
                }
                else if (v65[23])
                {
                  uint64_t v72 = v67 - 1;
                  do
                  {
                    int v74 = *v65++;
                    int v73 = v74;
                    int v76 = *v71++;
                    int v75 = v76;
                    BOOL v27 = v72-- != 0;
                    char v77 = v27;
                    char v78 = v73 == v75;
                  }
                  while (v73 == v75 && (v77 & 1) != 0);
                }
                else
                {
                  char v78 = 1;
                }
              }
              else
              {
                char v78 = 0;
              }
              std::string::basic_string[abi:ne180100]<0>(v86, "Mismatched types in port connection");
              RIO_MTLX::Element::validateRequire((uint64_t)a1, v78, &v104, a2, v86);
              if ((v87 & 0x80000000) == 0) {
                goto LABEL_120;
              }
              long long v64 = v86;
            }
            operator delete((void *)*v64);
LABEL_120:
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            goto LABEL_126;
          }
LABEL_88:
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
          goto LABEL_89;
        }
        NodeGraph = (std::string *)RIO_MTLX::Implementation::getNodeGraph(a1);
        RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeGraph>((uint64_t)a1, NodeGraph, &v100);
        if (v100)
        {
          RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>((uint64_t)v100, v8, &v96);
          char v14 = v96;
          double v13 = v97;
          RIO_MTLX::NodeGraph::getNodeDef(v100, &v96);
          uint64_t v35 = (uint64_t)v96;
          if (v97) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v97);
          }
          if (v35)
          {
            unint64_t v36 = *((void *)v100 + 33);
            std::string::basic_string[abi:ne180100]<0>(v92, "Multi-output type expected in port connection");
            RIO_MTLX::Element::validateRequire((uint64_t)a1, v36 > 1, &v104, a2, v92);
            if (v93 < 0)
            {
              double v37 = (void *)v92[0];
LABEL_86:
              operator delete(v37);
            }
          }
LABEL_87:
          uint64_t v45 = v101;
          if (!v101) {
            goto LABEL_89;
          }
          goto LABEL_88;
        }
      }
      char v14 = 0;
      double v13 = 0;
      goto LABEL_87;
    }
    RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE((RIO_MTLX::PortElement *)OutputString);
    if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(void)::v))
    {
      int v30 = RIO_MTLX::PortElement::getChannels(a1);
      double v31 = (unsigned __int8 *)(*(uint64_t (**)(std::string *))(v102->__r_.__value_.__r.__words[0] + 56))(v102);
      int v32 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::PortElement *))(*(void *)a1 + 56))(a1);
      LOBYTE(v30) = RIO_MTLX::PortElement::validChannelsString((uint64_t)v30, v31, v32);
      std::string::basic_string[abi:ne180100]<0>(v84, "Invalid channels string in port connection");
      RIO_MTLX::Element::validateRequire((uint64_t)a1, (char)v30, &v104, a2, v84);
      if ((v85 & 0x80000000) == 0) {
        goto LABEL_126;
      }
      uint64_t v33 = (void *)v84[0];
      goto LABEL_125;
    }
    uint64_t v38 = (size_t *)(*(uint64_t (**)(std::string *))(v102->__r_.__value_.__r.__words[0] + 56))(v102);
    double v39 = (unsigned __int8 *)RIO_MTLX::MULTI_OUTPUT_TYPE_STRING((RIO_MTLX *)v38);
    uint64_t v40 = *((unsigned __int8 *)v38 + 23);
    if ((v40 & 0x80u) == 0) {
      size_t v41 = *((unsigned __int8 *)v38 + 23);
    }
    else {
      size_t v41 = v38[1];
    }
    uint64_t v42 = v39[23];
    int v43 = (char)v42;
    if ((v42 & 0x80u) != 0) {
      uint64_t v42 = *((void *)v39 + 1);
    }
    if (v41 == v42)
    {
      if (v43 >= 0) {
        char v44 = v39;
      }
      else {
        char v44 = *(unsigned __int8 **)v39;
      }
      if ((v40 & 0x80) != 0)
      {
        if (!memcmp((const void *)*v38, v44, v38[1])) {
          goto LABEL_126;
        }
      }
      else
      {
        if (!*((unsigned char *)v38 + 23)) {
          goto LABEL_126;
        }
        while (*(unsigned __int8 *)v38 == *v44)
        {
          uint64_t v38 = (size_t *)((char *)v38 + 1);
          ++v44;
          if (!--v40) {
            goto LABEL_126;
          }
        }
      }
    }
    double v46 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::PortElement *))(*(void *)a1 + 56))(a1);
    uint64_t v47 = (*(uint64_t (**)(std::string *))(v102->__r_.__value_.__r.__words[0] + 56))(v102);
    uint64_t v48 = v46[23];
    if ((v48 & 0x80u) == 0) {
      uint64_t v49 = v46[23];
    }
    else {
      uint64_t v49 = *((void *)v46 + 1);
    }
    uint64_t v50 = *(unsigned __int8 *)(v47 + 23);
    int v51 = (char)v50;
    if ((v50 & 0x80u) != 0) {
      uint64_t v50 = *(void *)(v47 + 8);
    }
    if (v49 == v50)
    {
      if (v51 >= 0) {
        int v52 = (unsigned __int8 *)v47;
      }
      else {
        int v52 = *(unsigned __int8 **)v47;
      }
      if ((v48 & 0x80) != 0)
      {
        char v59 = memcmp(*(const void **)v46, v52, *((void *)v46 + 1)) == 0;
      }
      else if (v46[23])
      {
        uint64_t v53 = v48 - 1;
        do
        {
          int v55 = *v46++;
          int v54 = v55;
          int v57 = *v52++;
          int v56 = v57;
          BOOL v27 = v53-- != 0;
          char v58 = v27;
          char v59 = v54 == v56;
        }
        while (v54 == v56 && (v58 & 1) != 0);
      }
      else
      {
        char v59 = 1;
      }
    }
    else
    {
      char v59 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v82, "Mismatched types in port connection");
    RIO_MTLX::Element::validateRequire((uint64_t)a1, v59, &v104, a2, (const void **)v82);
    if (v83 < 0)
    {
      uint64_t v33 = v82[0];
LABEL_125:
      operator delete(v33);
    }
  }
LABEL_126:
  BOOL v79 = RIO_MTLX::ValueElement::validate((uint64_t)a1, a2);
  int v80 = v104;
  if (v103) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v103);
  }
  return v80 && v79;
}

void sub_23F783620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  int v54 = *(std::__shared_weak_count **)(v52 - 96);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  int v55 = *(std::__shared_weak_count **)(v52 - 80);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  _Unwind_Resume(exception_object);
}

RIO_MTLX::PortElement *RIO_MTLX::PortElement::validChannelsString(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result = (RIO_MTLX::PortElement *)RIO_MTLX::PortElement::validChannelsCharacters((RIO_MTLX::PortElement *)a1, a2);
  if (result)
  {
    RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(result);
    uint64_t result = (RIO_MTLX::PortElement *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv, a3);
    if (result)
    {
      RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(result);
      uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv, a3);
      if (!v6) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(a1 + 8);
      }
      return (RIO_MTLX::PortElement *)(*((void *)v6 + 5) == v7);
    }
  }
  return result;
}

uint64_t RIO_MTLX::PortElement::validChannelsCharacters(RIO_MTLX::PortElement *a1, unsigned __int8 *a2)
{
  RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(a1);
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v, a2);
  if (result)
  {
    RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET((RIO_MTLX::PortElement *)result);
    float v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v, a2);
    if (!v5) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    int v6 = *((char *)a1 + 23);
    BOOL v7 = v6 < 0;
    if (v6 >= 0) {
      unsigned int v8 = a1;
    }
    else {
      unsigned int v8 = *(RIO_MTLX::PortElement **)a1;
    }
    if (v7) {
      uint64_t v9 = *((void *)a1 + 1);
    }
    else {
      uint64_t v9 = *((unsigned __int8 *)a1 + 23);
    }
    if (v9)
    {
      char v10 = (uint64_t **)*((void *)v5 + 6);
      if (!v10) {
        return 0;
      }
      int v11 = (char *)v8 + v9;
      uint64_t result = 1;
      while (1)
      {
        int v12 = *(char *)v8;
        double v13 = v10;
        while (1)
        {
          int v14 = *((char *)v13 + 25);
          if (v12 >= v14) {
            break;
          }
LABEL_16:
          double v13 = (uint64_t **)*v13;
          if (!v13) {
            return 0;
          }
        }
        if (v14 < v12) {
          break;
        }
        unsigned int v8 = (RIO_MTLX::PortElement *)((char *)v8 + 1);
        if (v8 == (RIO_MTLX::PortElement *)v11) {
          return result;
        }
      }
      ++v13;
      goto LABEL_16;
    }
    return 1;
  }
  return result;
}

void RIO_MTLX::Input::getConnectedNode(RIO_MTLX::Input *this@<X0>, void *a2@<X8>)
{
  RIO_MTLX::Input::getInterfaceInput(this, &v18);
  uint64_t v5 = v18;
  if (v18)
  {
    RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(v4);
    if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v5 + 160), (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v)|| (uint64_t v6 = v18, RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(0), std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v6 + 160), (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v)))
    {
      (*(void (**)(uint64_t))(*(void *)v18 + 64))(v18);
      goto LABEL_25;
    }
  }
  BOOL v7 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v7)
  {
    BOOL v7 = std::__shared_weak_count::lock(v7);
    unsigned int v8 = v7;
    if (v7) {
      uint64_t v9 = *((void *)this + 28);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    unsigned int v8 = 0;
  }
  char v10 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v7);
  BOOL v11 = RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(v9, (unsigned __int8 *)v10);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (!v11)
  {
LABEL_18:
    (*(void (**)(uint64_t *__return_ptr, RIO_MTLX::Input *))(*(void *)this + 72))(&v16, this);
    if (v16)
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 64))(v16);
      if (*a2) {
        goto LABEL_23;
      }
      int v15 = (std::__shared_weak_count *)a2[1];
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    RIO_MTLX::PortElement::getConnectedNode(this, a2);
LABEL_23:
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    goto LABEL_25;
  }
  RIO_MTLX::Element::getDocument(this, &v16);
  uint64_t v12 = v16;
  NodeName = RIO_MTLX::PortElement::getNodeName(this);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Node>(v12, (unsigned __int8 *)NodeName, a2);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (!*a2)
  {
    int v14 = (std::__shared_weak_count *)a2[1];
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    goto LABEL_18;
  }
LABEL_25:
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_23F783A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Input::getInterfaceInput(RIO_MTLX::Input *this@<X0>, void *a2@<X8>)
{
  InterfaceName = RIO_MTLX::ValueElement::getInterfaceName(this);
  uint64_t v5 = *((unsigned __int8 *)InterfaceName + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = InterfaceName[1];
  }
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = (unsigned __int8 *)InterfaceName;
  RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::NodeGraph>((uint64_t)this, &v7);
  if (!v7)
  {
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
LABEL_9:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(v7, v6, a2);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_23F783B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Input::setConnectedOutput(RIO_MTLX::PortElement *a1, const std::string **a2)
{
  if (*a2)
  {
    uint64_t v4 = *a2 + 2;
    RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(a1);
    RIO_MTLX::Element::setAttribute((uint64_t *)a1, (long long *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(void)::v, v4);
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)(*a2)[9].__r_.__value_.__r.__words[2];
    if (v6)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v6);
      uint64_t v7 = v6;
      if (v6) {
        std::string::size_type size = (const std::string *)v5[9].__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = 0;
      }
    }
    else
    {
      std::string::size_type size = 0;
      uint64_t v7 = 0;
    }
    char v10 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v6);
    BOOL v11 = RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>((uint64_t)size, (unsigned __int8 *)v10);
    if (v11)
    {
      RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE((RIO_MTLX::PortElement *)v11);
      RIO_MTLX::Element::setAttribute((uint64_t *)a1, (long long *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v, size + 2);
    }
    else
    {
      RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE((RIO_MTLX::PortElement *)v11);
      RIO_MTLX::Element::removeAttribute(a1, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v);
    }
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(a1);
    RIO_MTLX::Element::removeAttribute(a1, (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(void)::v);
    RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(v9);
    RIO_MTLX::Element::removeAttribute(a1, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v);
  }
}

void sub_23F783CC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Input::getConnectedOutput(RIO_MTLX::Input *this@<X0>, uint64_t *a2@<X8>)
{
  Outputuint64_t String = RIO_MTLX::PortElement::getOutputString(this);
  *a2 = 0;
  a2[1] = 0;
  RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE((RIO_MTLX::PortElement *)OutputString);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v))
  {
    RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(0);
    if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v))
    {
      NodeName = RIO_MTLX::PortElement::getNodeName(this);
      uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 29);
      if (v12)
      {
        double v13 = (RIO_MTLX *)std::__shared_weak_count::lock(v12);
        if (v13)
        {
          int v14 = (std::__shared_weak_count *)v13;
          uint64_t v15 = *((void *)this + 28);
          if (!v15) {
            goto LABEL_47;
          }
          uint64_t v16 = RIO_MTLX::EMPTY_STRING(v13);
          if (!RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(v15, (unsigned __int8 *)v16))
          {
LABEL_16:
            RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::GraphElement>(v15, &v32);
            if (v32)
            {
              RIO_MTLX::Element::getChildOfType<RIO_MTLX::Node>(v32, (unsigned __int8 *)NodeName, &v30);
              uint64_t v21 = v30;
              if ((void)v30)
              {
                uint64_t v22 = RIO_MTLX::EMPTY_STRING(v20);
                RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v21, (uint64_t)v22, (uint64_t *)v31);
                if (*(void *)&v31[0] != *((void *)&v31[0] + 1))
                {
                  uint64_t v23 = *((unsigned __int8 *)OutputString + 23);
                  if ((v23 & 0x80u) != 0) {
                    uint64_t v23 = OutputString[1];
                  }
                  if (v23)
                  {
                    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(v30, (unsigned __int8 *)OutputString, &v29);
                    *(_OWORD *)a2 = v29;
                  }
                  else
                  {
                    uint64_t v28 = **(void **)&v31[0];
                    uint64_t v27 = *(void *)(*(void *)&v31[0] + 8);
                    if (v27) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
                    }
                    *a2 = v28;
                    a2[1] = v27;
                  }
                }
                *(void *)&long long v29 = v31;
                std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
              }
            }
            else
            {
              long long v30 = 0uLL;
            }
            if (*((void *)&v30 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
            }
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
LABEL_47:
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            if (*a2) {
              return;
            }
            goto LABEL_31;
          }
          uint64_t v17 = *(std::__shared_weak_count **)(v15 + 232);
          if (v17)
          {
            uint64_t v18 = std::__shared_weak_count::lock(v17);
            if (v18)
            {
              uint64_t v19 = v18;
              uint64_t v15 = *(void *)(v15 + 224);
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
              int v14 = v19;
              if (!v15) {
                goto LABEL_47;
              }
              goto LABEL_16;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
    }
LABEL_31:
    RIO_MTLX::Element::getDocument(this, &v32);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(v32, (unsigned __int8 *)OutputString, v31);
    long long v25 = v31[0];
    v31[0] = 0uLL;
    int v26 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v25;
    if (v26)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      if (*((void *)&v31[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31[0] + 1));
      }
    }
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    return;
  }
  NodeGraph = (std::string *)RIO_MTLX::Implementation::getNodeGraph(this);
  RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeGraph>((uint64_t)this, NodeGraph, &v32);
  uint64_t v7 = v32;
  if (v32)
  {
    unsigned int v8 = RIO_MTLX::EMPTY_STRING(v6);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v7, (uint64_t)v8, (uint64_t *)v31);
    if (*(void *)&v31[0] == *((void *)&v31[0] + 1))
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v9 = *((unsigned __int8 *)OutputString + 23);
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = OutputString[1];
      }
      if (v9)
      {
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(v32, (unsigned __int8 *)OutputString, &v30);
        uint64_t v10 = v30;
        *(_OWORD *)a2 = v30;
        uint64_t v7 = v10;
      }
      else
      {
        uint64_t v7 = **(void **)&v31[0];
        uint64_t v24 = *(void *)(*(void *)&v31[0] + 8);
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        *a2 = v7;
        a2[1] = v24;
      }
    }
    *(void *)&long long v30 = v31;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (!v7) {
    goto LABEL_31;
  }
}

void sub_23F783FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  a9 = (void **)&a13;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  uint64_t v21 = *(std::__shared_weak_count **)(v18 + 8);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::Input::validate(RIO_MTLX::Input *a1, std::string *a2)
{
  char v53 = 1;
  RIO_MTLX::Input::DEFAULT_GEOM_PROP_ATTRIBUTE(a1);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)qword_268C412C0);
  if (!v4) {
    goto LABEL_22;
  }
  RIO_MTLX::Input::DEFAULT_GEOM_PROP_ATTRIBUTE((RIO_MTLX::Input *)v4);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)qword_268C412C0);
  if (v5) {
    uint64_t v6 = (uint64_t *)(v5 + 40);
  }
  else {
    uint64_t v6 = RIO_MTLX::EMPTY_STRING(0);
  }
  if (*((char *)v6 + 23) < 0)
  {
    if (v6[1])
    {
LABEL_7:
      RIO_MTLX::Element::getDocument(a1, &v54);
      uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v54 + 12, (unsigned __int8 *)v6);
      unsigned int v8 = v7;
      if (v7)
      {
        uint64_t v9 = *((void *)v7 + 5);
        uint64_t v10 = (std::__shared_weak_count *)*((void *)v8 + 6);
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v9)
        {
          RIO_MTLX::Element::asA<RIO_MTLX::GeomPropDef>(v9, &v51);
          if (!v10)
          {
LABEL_13:
            if (v55) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v55);
            }
            BOOL v11 = v51;
            goto LABEL_18;
          }
LABEL_12:
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      int v51 = 0;
      uint64_t v52 = 0;
      if (!v10) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)v6 + 23))
  {
    goto LABEL_7;
  }
  BOOL v11 = 0;
  int v51 = 0;
  uint64_t v52 = 0;
LABEL_18:
  std::string::basic_string[abi:ne180100]<0>(v49, "Invalid defaultgeomprop string");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, v11 != 0, &v53, a2, v49);
  if (v50 < 0) {
    operator delete((void *)v49[0]);
  }
  uint64_t v4 = (unsigned __int8 *)v52;
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
LABEL_22:
  uint64_t v12 = (unsigned __int8 *)RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE((RIO_MTLX::ValueElement *)v4);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, v12))goto LABEL_68; {
  RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::NodeGraph>((uint64_t)a1, &v54);
  }
  if (!v54)
  {
    int v51 = 0;
    uint64_t v52 = 0;
LABEL_32:
    RIO_MTLX::Input::getInterfaceInput(a1, &v47);
    uint64_t v21 = v47;
    std::string::basic_string[abi:ne180100]<0>(v39, "Interface name not found in containing NodeGraph");
    RIO_MTLX::Element::validateRequire((uint64_t)a1, v21 != 0, &v53, a2, v39);
    if (v40 < 0)
    {
      uint64_t v22 = (void *)v39[0];
LABEL_61:
      operator delete(v22);
      goto LABEL_62;
    }
    goto LABEL_62;
  }
  RIO_MTLX::NodeGraph::getNodeDef(v54, &v51);
  double v13 = v51;
  if (!v51) {
    goto LABEL_32;
  }
  InterfaceName = RIO_MTLX::ValueElement::getInterfaceName(a1);
  RIO_MTLX::InterfaceElement::getActiveInput(v13, (unsigned __int8 *)InterfaceName, &v47);
  uint64_t v15 = v47;
  std::string::basic_string[abi:ne180100]<0>(__p, "Interface name not found in referenced NodeDef");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, v15 != 0, &v53, a2, (const void **)__p);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (!v47) {
    goto LABEL_62;
  }
  RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(v16);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(void)::v))
  {
    uint64_t v23 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::Input *))(*(void *)a1 + 56))(a1);
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 56))(v47);
    uint64_t v25 = v23[23];
    if ((v25 & 0x80u) == 0) {
      uint64_t v26 = v23[23];
    }
    else {
      uint64_t v26 = *((void *)v23 + 1);
    }
    uint64_t v27 = *(unsigned __int8 *)(v24 + 23);
    int v28 = (char)v27;
    if ((v27 & 0x80u) != 0) {
      uint64_t v27 = *(void *)(v24 + 8);
    }
    if (v26 == v27)
    {
      if (v28 >= 0) {
        long long v29 = (unsigned __int8 *)v24;
      }
      else {
        long long v29 = *(unsigned __int8 **)v24;
      }
      if ((v25 & 0x80) != 0)
      {
        char v37 = memcmp(*(const void **)v23, v29, *((void *)v23 + 1)) == 0;
      }
      else if (v23[23])
      {
        uint64_t v30 = v25 - 1;
        do
        {
          int v32 = *v23++;
          int v31 = v32;
          int v34 = *v29++;
          int v33 = v34;
          BOOL v36 = v30-- != 0;
          char v37 = v31 == v33;
        }
        while (v31 == v33 && v36);
      }
      else
      {
        char v37 = 1;
      }
    }
    else
    {
      char v37 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v41, "Interface name refers to input of a different type");
    RIO_MTLX::Element::validateRequire((uint64_t)a1, v37, &v53, a2, v41);
    if ((v42 & 0x80000000) == 0) {
      goto LABEL_62;
    }
    int v20 = v41;
    goto LABEL_60;
  }
  Channels = RIO_MTLX::PortElement::getChannels(a1);
  uint64_t v18 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v47 + 56))(v47);
  uint64_t v19 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::Input *))(*(void *)a1 + 56))(a1);
  LOBYTE(Channels) = RIO_MTLX::PortElement::validChannelsString((uint64_t)Channels, v18, v19);
  std::string::basic_string[abi:ne180100]<0>(v43, "Invalid channels string for interface name");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, (char)Channels, &v53, a2, v43);
  if (v44 < 0)
  {
    int v20 = v43;
LABEL_60:
    uint64_t v22 = (void *)*v20;
    goto LABEL_61;
  }
LABEL_62:
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
LABEL_68:
  LODWORD(result) = RIO_MTLX::PortElement::validate(a1, a2);
  if (v53) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_23F7844AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  BOOL v36 = *(std::__shared_weak_count **)(v34 - 64);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  char v37 = *(std::__shared_weak_count **)(v34 - 40);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::InterfaceElement::getActiveInput(RIO_MTLX::Element *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  RIO_MTLX::Element::traverseInheritance(a1, (uint64_t)&v16);
  uint64_t v19 = 0;
  uint64_t v13 = v16;
  int v14 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v15, (uint64_t)&v18);
  v15[3] = v19;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v5);
  v11[0] = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v11[1] = *(void *)algn_268C3FE38;
  if (*(void *)algn_268C3FE38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C3FE38 + 8), 1uLL, memory_order_relaxed);
  }
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v12, (uint64_t)&unk_268C3FE40);
  uint64_t v12[3] = qword_268C3FE58;
  while (1)
  {
    uint64_t v6 = v13;
    if (v13 == v11[0])
    {
      RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)v11);
      RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v13);
      RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v16);
      *a3 = 0;
      a3[1] = 0;
      return;
    }
    uint64_t v7 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(v6, &v9);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(v9, a2, a3);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (*a3) {
      break;
    }
    unsigned int v8 = (std::__shared_weak_count *)a3[1];
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v13);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)v11);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v13);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v16);
}

void sub_23F7846F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)va);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)(v9 - 80));
  _Unwind_Resume(a1);
}

void RIO_MTLX::Output::getUpstreamEdge(RIO_MTLX::Output *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (RIO_MTLX *)(*(uint64_t (**)(RIO_MTLX::Output *))(*(void *)this + 24))(this);
  if ((unint64_t)v6 <= a2)
  {
    uint64_t v10 = RIO_MTLX::NULL_EDGE(v6);
    uint64_t v11 = *((void *)v10 + 1);
    *a3 = *(void *)v10;
    a3[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *((void *)v10 + 3);
    a3[2] = *((void *)v10 + 2);
    a3[3] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *((void *)v10 + 5);
    a3[4] = *((void *)v10 + 4);
    a3[5] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    RIO_MTLX::Element::getSelfNonConst(this, &v16);
    (*(void (**)(uint64_t *__return_ptr, RIO_MTLX::Output *))(*(void *)this + 64))(&v14, this);
    uint64_t v8 = v14;
    uint64_t v7 = v15;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v9 = v17;
    *a3 = v16;
    a3[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    a3[2] = 0;
    a3[3] = 0;
    a3[4] = v8;
    a3[5] = v7;
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
}

void sub_23F7848B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIO_MTLX::Output::validate(RIO_MTLX::Element *a1, std::string *a2)
{
  char v8 = 1;
  RIO_MTLX::Element::traverseGraph(a1, (uint64_t)&v19);
  if (v22 == v23) {
    RIO_MTLX::GraphIterator::operator++(&v19);
  }
  *((void *)&v24 + 1) = 0;
  v14.__vftable = v19.__vftable;
  v14.__shared_owners_ = v19.__shared_owners_;
  if (v19.__shared_owners_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
  }
  v14.__shared_weak_owners_ = v19.__shared_weak_owners_;
  uint64_t v15 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  std::set<std::shared_ptr<RIO_MTLX::Element>>::set[abi:ne180100](v16, (uint64_t)&v21);
  memset(v17, 0, sizeof(v17));
  uint64_t v4 = (RIO_MTLX *)std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(v17, v22, v23, 0xAAAAAAAAAAAAAAABLL * (v23 - v22));
  long long v18 = v24;
  RIO_MTLX::NULL_GRAPH_ITERATOR(v4);
  v10[0] = RIO_MTLX::NULL_GRAPH_ITERATOR(void)::v;
  v10[1] = unk_268C3FDD0;
  if (unk_268C3FDD0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C3FDD0 + 8), 1uLL, memory_order_relaxed);
  }
  v10[2] = qword_268C3FDD8;
  v10[3] = unk_268C3FDE0;
  if (unk_268C3FDE0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C3FDE0 + 8), 1uLL, memory_order_relaxed);
  }
  std::set<std::shared_ptr<RIO_MTLX::Element>>::set[abi:ne180100](v11, (uint64_t)&qword_268C3FDE8);
  memset(v12, 0, sizeof(v12));
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(v12, (void *)qword_268C3FE00, *(void **)algn_268C3FE08, 0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_268C3FE08 - qword_268C3FE00) >> 3));
  long long v13 = xmmword_268C3FE18;
  while (!RIO_MTLX::GraphIterator::operator==((uint64_t)&v14, (uint64_t)v10))
  {
    RIO_MTLX::GraphIterator::operator*((uint64_t *)&v14, v9);
    RIO_MTLX::Edge::~Edge((RIO_MTLX::Edge *)v9);
    RIO_MTLX::GraphIterator::operator++(&v14);
  }
  RIO_MTLX::GraphIterator::~GraphIterator((RIO_MTLX::GraphIterator *)v10);
  RIO_MTLX::GraphIterator::~GraphIterator((RIO_MTLX::GraphIterator *)&v14);
  RIO_MTLX::GraphIterator::~GraphIterator((RIO_MTLX::GraphIterator *)&v19);
  std::string::basic_string[abi:ne180100]<0>(__p, "Cycle in upstream path");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, 1, &v8, a2, (const void **)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(result) = RIO_MTLX::PortElement::validate(a1, a2);
  if (v8) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_23F784ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  RIO_MTLX::GraphIterator::~GraphIterator((RIO_MTLX::GraphIterator *)(v39 - 144));
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::getActiveInputs(RIO_MTLX::InterfaceElement *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v25[0] = 0;
  v25[1] = 0;
  long long v24 = v25;
  RIO_MTLX::Element::traverseInheritance(this, (uint64_t)&v20);
  uint64_t v23 = 0;
  uint64_t v17 = v20;
  long long v18 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v19, (uint64_t)&v22);
  v19[3] = v23;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v3);
  v15[0] = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v15[1] = *(void *)algn_268C3FE38;
  if (*(void *)algn_268C3FE38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C3FE38 + 8), 1uLL, memory_order_relaxed);
  }
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v16, (uint64_t)&unk_268C3FE40);
  uint64_t v16[3] = qword_268C3FE58;
  while (1)
  {
    uint64_t v4 = v17;
    if (v17 == v15[0]) {
      break;
    }
    uint64_t v5 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(v4, &v12);
    uint64_t v6 = v12;
    char v8 = RIO_MTLX::EMPTY_STRING(v7);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>((uint64_t)v6, (uint64_t)v8, v14);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    uint64_t v9 = (long long *)v14[0];
    uint64_t v10 = v14[1];
    while (v9 != (long long *)v10)
    {
      if (*(void *)v9)
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v24, (const void **)(*(void *)v9 + 48), *(void *)v9 + 48);
        if (v11) {
          std::vector<std::shared_ptr<RIO_MTLX::Input>>::push_back[abi:ne180100](a2, v9);
        }
      }
      ++v9;
    }
    uint64_t v12 = (void **)v14;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v12);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v17);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)v15);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v17);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v20);
  std::__tree<std::string>::destroy((uint64_t)&v24, v25[0]);
}

void sub_23F784D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&a20);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&a26);
  std::__tree<std::string>::destroy(v26 - 88, *(char **)(v26 - 80));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::getActiveOutputs(RIO_MTLX::InterfaceElement *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v25[0] = 0;
  v25[1] = 0;
  long long v24 = v25;
  RIO_MTLX::Element::traverseInheritance(this, (uint64_t)&v20);
  uint64_t v23 = 0;
  uint64_t v17 = v20;
  long long v18 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v19, (uint64_t)&v22);
  v19[3] = v23;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v3);
  v15[0] = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v15[1] = *(void *)algn_268C3FE38;
  if (*(void *)algn_268C3FE38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C3FE38 + 8), 1uLL, memory_order_relaxed);
  }
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v16, (uint64_t)&unk_268C3FE40);
  uint64_t v16[3] = qword_268C3FE58;
  while (1)
  {
    uint64_t v4 = v17;
    if (v17 == v15[0]) {
      break;
    }
    uint64_t v5 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(v4, &v12);
    uint64_t v6 = v12;
    char v8 = RIO_MTLX::EMPTY_STRING(v7);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>((uint64_t)v6, (uint64_t)v8, v14);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    uint64_t v9 = (long long *)v14[0];
    uint64_t v10 = v14[1];
    while (v9 != (long long *)v10)
    {
      if (*(void *)v9)
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v24, (const void **)(*(void *)v9 + 48), *(void *)v9 + 48);
        if (v11) {
          std::vector<std::shared_ptr<RIO_MTLX::Output>>::push_back[abi:ne180100](a2, v9);
        }
      }
      ++v9;
    }
    uint64_t v12 = (void **)v14;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v12);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v17);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)v15);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v17);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v20);
  std::__tree<std::string>::destroy((uint64_t)&v24, v25[0]);
}

void sub_23F784FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&a20);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&a26);
  std::__tree<std::string>::destroy(v26 - 88, *(char **)(v26 - 80));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::getActiveTokens(RIO_MTLX::InterfaceElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  RIO_MTLX::Element::traverseInheritance(this, (uint64_t)&v60);
  uint64_t v63 = 0;
  uint64_t v57 = v60;
  char v58 = v61;
  if (v61) {
    atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v59, (uint64_t)&v62);
  v59[3] = v63;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v3);
  v55[0] = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v55[1] = *(void *)algn_268C3FE38;
  if (*(void *)algn_268C3FE38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C3FE38 + 8), 1uLL, memory_order_relaxed);
  }
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v56, (uint64_t)&unk_268C3FE40);
  uint64_t v4 = v2 + 2;
  v56[3] = qword_268C3FE58;
  while (1)
  {
    uint64_t v5 = v57;
    if (v57 == v55[0]) {
      break;
    }
    uint64_t v6 = v58;
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v52 = v6;
    RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(v5, &v64);
    char v7 = v64;
    uint64_t v9 = RIO_MTLX::EMPTY_STRING(v8);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Token>((uint64_t)v7, (uint64_t)v9, (uint64_t *)&v53);
    if ((void)v65) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v65);
    }
    char v11 = v53;
    uint64_t v10 = v54;
    if ((char *)v54 - (char *)v53 >= 1)
    {
      uint64_t v12 = ((char *)v54 - (char *)v53) >> 4;
      uint64_t v14 = *v2;
      long long v13 = (char *)v2[1];
      uint64_t v15 = (uint64_t)&v13[-*v2];
      uint64_t v16 = v15 >> 4;
      uint64_t v17 = (char *)(*v2 + (v15 & 0xFFFFFFFFFFFFFFF0));
      if (v12 > (*v4 - (uint64_t)v13) >> 4)
      {
        unint64_t v18 = v16 + v12;
        if ((unint64_t)(v16 + v12) >> 60) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = *v4 - v14;
        if (v19 >> 3 > v18) {
          unint64_t v18 = v19 >> 3;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        uint64_t v67 = v4;
        if (v20) {
          uint64_t v21 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)v4, v20);
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v41 = (uint64_t)&v21[2 * v16];
        long long v64 = v21;
        *(void *)&long long v65 = v41;
        uint64_t v66 = &v21[2 * v20];
        char v42 = (void *)v41;
        do
        {
          *char v42 = *v11;
          uint64_t v43 = v11[1];
          v42[1] = v43;
          if (v43) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
          }
          v42 += 2;
          v11 += 2;
        }
        while (v42 != (void *)(v41 + 16 * v12));
        *((void *)&v65 + 1) = v41 + 16 * v12;
        std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Token>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Token>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Token>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Token>*>>((uint64_t)v4, (uint64_t)v17, v17, *v2, (void *)*v2, v41, v41);
        *(void *)&long long v65 = v44;
        uint64_t v45 = (char *)v2[1];
        char v46 = (_OWORD *)*((void *)&v65 + 1);
        uint64_t v70 = *((void *)&v65 + 1);
        v71[0] = *((void *)&v65 + 1);
        v68[0] = v4;
        v68[1] = &v70;
        v68[2] = v71;
        if (v45 != v17)
        {
          do
          {
            *v46++ = *(_OWORD *)v17;
            *(void *)uint64_t v17 = 0;
            *((void *)v17 + 1) = 0;
            v17 += 16;
          }
          while (v17 != v45);
          v71[0] = v46;
        }
        char v69 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::shared_ptr<RIO_MTLX::InterfaceElement>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v68);
        long long v47 = *(_OWORD *)v2;
        uint64_t v48 = (uint64_t)v66;
        uint64_t *v2 = v65;
        v2[1] = (uint64_t)v46;
        long long v65 = v47;
        uint64_t v49 = v2[2];
        v2[2] = v48;
        uint64_t v66 = (uint64_t *)v49;
        long long v64 = (uint64_t *)v47;
        std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)&v64);
        goto LABEL_55;
      }
      uint64_t v51 = v15 >> 4;
      uint64_t v22 = (v13 - v17) >> 4;
      if (v22 >= v12)
      {
        uint64_t v23 = &v53[2 * v12];
        long long v24 = (char *)v2[1];
        uint64_t v2 = a2;
LABEL_31:
        int v28 = &v24[-16 * v12];
        long long v29 = v24;
        while (v28 < v13)
        {
          *(_OWORD *)long long v29 = *(_OWORD *)v28;
          v29 += 16;
          *(void *)int v28 = 0;
          *((void *)v28 + 1) = 0;
          v28 += 16;
        }
        uint64_t v30 = &v17[16 * v12];
        v2[1] = (uint64_t)v29;
        if (v24 != v30)
        {
          uint64_t v31 = (v24 - v30) >> 4;
          int v32 = (std::__shared_weak_count **)(v24 - 8);
          uint64_t v33 = v14 + 16 * v51 - 16;
          uint64_t v34 = 16 * v31;
          do
          {
            uint64_t v35 = (void *)(v33 + v34);
            long long v36 = *(_OWORD *)(v33 + v34);
            *uint64_t v35 = 0;
            v35[1] = 0;
            char v37 = *v32;
            *(_OWORD *)(v32 - 1) = v36;
            if (v37) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v37);
            }
            v32 -= 2;
            v34 -= 16;
          }
          while (v34);
        }
        for (; v11 != v23; v17 += 16)
        {
          uint64_t v39 = *v11;
          uint64_t v38 = v11[1];
          if (v38) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
          }
          char v40 = (std::__shared_weak_count *)*((void *)v17 + 1);
          *(void *)uint64_t v17 = v39;
          *((void *)v17 + 1) = v38;
          if (v40) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          v11 += 2;
        }
        goto LABEL_55;
      }
      v68[0] = v2[1];
      v71[0] = v13;
      uint64_t v23 = &v53[2 * v22];
      long long v64 = v4;
      *(void *)&long long v65 = v71;
      *((void *)&v65 + 1) = v68;
      long long v24 = v13;
      if (v23 != v54)
      {
        uint64_t v25 = v13;
        uint64_t v26 = v23;
        do
        {
          *(void *)uint64_t v25 = *v26;
          uint64_t v27 = v26[1];
          *((void *)v25 + 1) = v27;
          if (v27) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
          }
          v25 += 16;
          v24 += 16;
          v26 += 2;
        }
        while (v26 != v10);
        v68[0] = v25;
      }
      LOBYTE(v66) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::shared_ptr<RIO_MTLX::InterfaceElement>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v64);
      a2[1] = (uint64_t)v24;
      uint64_t v2 = a2;
      if (v13 - v17 >= 1) {
        goto LABEL_31;
      }
    }
LABEL_55:
    long long v64 = (uint64_t *)&v53;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v57);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)v55);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v57);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v60);
}

void sub_23F78549C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&a21);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&a27);
  a21 = a9;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::getActiveValueElement(RIO_MTLX::Element *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  RIO_MTLX::Element::traverseInheritance(a1, (uint64_t)&v14);
  uint64_t v17 = 0;
  uint64_t v11 = v14;
  uint64_t v12 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v13, (uint64_t)&v16);
  v13[3] = v17;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v5);
  v9[0] = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v9[1] = *(void *)algn_268C3FE38;
  if (*(void *)algn_268C3FE38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C3FE38 + 8), 1uLL, memory_order_relaxed);
  }
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v10, (uint64_t)&unk_268C3FE40);
  v10[3] = qword_268C3FE58;
  while (1)
  {
    uint64_t v6 = v11;
    if (v11 == v9[0])
    {
      RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)v9);
      RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v11);
      RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v14);
      *a3 = 0;
      a3[1] = 0;
      return;
    }
    char v7 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::ValueElement>(v6, a2, a3);
    if (*a3) {
      break;
    }
    char v8 = (std::__shared_weak_count *)a3[1];
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v11);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)v9);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v11);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v14);
}

void sub_23F7856B4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)va);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)(v7 - 80));
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::getActiveValueElements(RIO_MTLX::InterfaceElement *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v21 = v22;
  RIO_MTLX::Element::traverseInheritance(this, (uint64_t)&v17);
  uint64_t v20 = 0;
  uint64_t v14 = v17;
  uint64_t v15 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v16, (uint64_t)&v19);
  uint64_t v16[3] = v20;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v3);
  v12[0] = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v12[1] = *(void *)algn_268C3FE38;
  if (*(void *)algn_268C3FE38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C3FE38 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (RIO_MTLX *)std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v13, (uint64_t)&unk_268C3FE40);
  v13[3] = qword_268C3FE58;
  while (1)
  {
    uint64_t v5 = v14;
    if (v14 == v12[0]) {
      break;
    }
    uint64_t v6 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = RIO_MTLX::EMPTY_STRING(v4);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::ValueElement>(v5, (uint64_t)v7, v11);
    char v8 = (long long *)v11[0];
    uint64_t v9 = v11[1];
    while (v8 != (long long *)v9)
    {
      if (*(void *)v8)
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v21, (const void **)(*(void *)v8 + 48), *(void *)v8 + 48);
        if (v10) {
          std::vector<std::shared_ptr<RIO_MTLX::ValueElement>>::push_back[abi:ne180100](a2, v8);
        }
      }
      ++v8;
    }
    uint64_t v23 = (void **)v11;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v23);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    uint64_t v4 = (RIO_MTLX *)RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v14);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)v12);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v14);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&v17);
  std::__tree<std::string>::destroy((uint64_t)&v21, v22[0]);
}

void sub_23F7858B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  long long v13 = va_arg(va1, void **);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)va);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)va1);
  std::__tree<std::string>::destroy(v11 - 96, *(char **)(v11 - 88));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::setVersionIntegers(RIO_MTLX::InterfaceElement *this, int __val, int a3)
{
  std::to_string(&v12, __val);
  uint64_t v5 = std::string::append(&v12, ".");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v9 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v9);
  RIO_MTLX::Element::setAttribute((uint64_t *)this, (long long *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(void)::v, &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_23F785A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

unint64_t RIO_MTLX::InterfaceElement::getVersionIntegers(RIO_MTLX::InterfaceElement *this)
{
  Versionuint64_t String = (std::string *)RIO_MTLX::InterfaceElement::getVersionString(this);
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  RIO_MTLX::splitString(VersionString, (unsigned __int8 **)__p, (uint64_t)v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8[1] - (char *)v8[0]) >> 3);
  if (v2 == 1)
  {
    unsigned int v3 = std::stoi(v8[0], 0, 10);
LABEL_8:
    uint64_t v4 = 0;
    goto LABEL_9;
  }
  if (v2 != 2)
  {
    unsigned int v3 = 0;
    goto LABEL_8;
  }
  unsigned int v3 = std::stoi(v8[0], 0, 10);
  uint64_t v4 = std::stoi(v8[0] + 1, 0, 10);
LABEL_9:
  __p[0] = v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v3 | (unint64_t)(v4 << 32);
}

void sub_23F785BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL RIO_MTLX::InterfaceElement::registerChildElement(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  *(void *)&long long v12 = *a2;
  *((void *)&v12 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Element::registerChildElement(a1, &v12);
  uint64_t v5 = (RIO_MTLX *)*((void *)&v12 + 1);
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  uint64_t v6 = *a2;
  char v7 = RIO_MTLX::EMPTY_STRING(v5);
  BOOL result = RIO_MTLX::Element::isA<RIO_MTLX::Input>(v6, (unsigned __int8 *)v7);
  if (result)
  {
    uint64_t v9 = a1 + 32;
  }
  else
  {
    uint64_t v10 = *a2;
    uint64_t v11 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)result);
    BOOL result = RIO_MTLX::Element::isA<RIO_MTLX::Output>(v10, (unsigned __int8 *)v11);
    if (!result) {
      return result;
    }
    uint64_t v9 = a1 + 33;
  }
  ++*v9;
  return result;
}

void sub_23F785C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL RIO_MTLX::InterfaceElement::unregisterChildElement(RIO_MTLX::Element *a1, uint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RIO_MTLX::Element::unregisterChildElement(a1, (uint64_t)v12);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v6 = *a2;
  char v7 = RIO_MTLX::EMPTY_STRING(v5);
  BOOL result = RIO_MTLX::Element::isA<RIO_MTLX::Input>(v6, (unsigned __int8 *)v7);
  if (result)
  {
    uint64_t v9 = (void *)((char *)a1 + 256);
  }
  else
  {
    uint64_t v10 = *a2;
    uint64_t v11 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)result);
    BOOL result = RIO_MTLX::Element::isA<RIO_MTLX::Output>(v10, (unsigned __int8 *)v11);
    if (!result) {
      return result;
    }
    uint64_t v9 = (void *)((char *)a1 + 264);
  }
  --*v9;
  return result;
}

void sub_23F785D54(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::InterfaceElement::getDeclaration(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t RIO_MTLX::InterfaceElement::hasExactInputMatch(RIO_MTLX::InterfaceElement *a1, RIO_MTLX::Element **a2, std::string *a3)
{
  RIO_MTLX::InterfaceElement::getActiveInputs(a1, &v26);
  uint64_t v5 = v26;
  uint64_t v6 = v27;
  if (v26 == v27)
  {
LABEL_25:
    uint64_t v7 = 1;
  }
  else
  {
    while (1)
    {
      char v8 = *(unsigned __int8 **)v5;
      uint64_t v7 = *(void *)(v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::InterfaceElement::getActiveInput(*a2, v8 + 48, &v24);
      if (!v24) {
        break;
      }
      uint64_t v9 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 56))(v24);
      uint64_t v10 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v8 + 56))(v8);
      uint64_t v11 = v9[23];
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = v9[23];
      }
      else {
        uint64_t v12 = *((void *)v9 + 1);
      }
      uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(v10 + 8);
      }
      if (v12 != v13) {
        break;
      }
      if (v14 >= 0) {
        uint64_t v15 = (unsigned __int8 *)v10;
      }
      else {
        uint64_t v15 = *(unsigned __int8 **)v10;
      }
      if ((v11 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v9, v15, *((void *)v9 + 1))) {
          break;
        }
      }
      else if (v9[23])
      {
        while (*v9 == *v15)
        {
          ++v9;
          ++v15;
          if (!--v11) {
            goto LABEL_20;
          }
        }
        break;
      }
LABEL_20:
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
      }
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_25;
      }
    }
    if (a3)
    {
      std::operator+<char>();
      uint64_t v16 = std::string::append(&v21, "' doesn't match declaration");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      int64_t v23 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (v23 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      if (v23 >= 0) {
        std::string::size_type v19 = HIBYTE(v23);
      }
      else {
        std::string::size_type v19 = (std::string::size_type)__p[1];
      }
      std::string::append(a3, (const std::string::value_type *)v18, v19);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
      uint64_t v7 = 0;
    }
  }
  __p[0] = &v26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v7;
}

void sub_23F785FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,char a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::string __p = &a24;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void RIO_MTLX::PortElement::~PortElement(RIO_MTLX::PortElement *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

void RIO_MTLX::Input::~Input(RIO_MTLX::Input *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

void RIO_MTLX::Output::~Output(RIO_MTLX::Output *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t RIO_MTLX::Output::getUpstreamEdgeCount(RIO_MTLX::Output *this)
{
  return 1;
}

void RIO_MTLX::InterfaceElement::~InterfaceElement(RIO_MTLX::InterfaceElement *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

std::string *std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, void *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::set<char>::set[abi:ne180100]((uint64_t *)&this[1], a3);
  return this;
}

void sub_23F786170(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<char>::set[abi:ne180100](uint64_t *a1, void *a2)
{
  a1[1] = 0;
  unsigned int v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  uint64_t v4 = a2 + 1;
  long long v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<char>::__emplace_hint_unique_key_args<char,char const&>(a1, v3, *((unsigned char *)v5 + 25), *((unsigned char *)v5 + 25));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          long long v5 = v7;
        }
        while (!v8);
      }
      long long v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_23F786224(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<char>::__emplace_hint_unique_key_args<char,char const&>(uint64_t *result, uint64_t *a2, char a3, char a4)
{
  long long v5 = a2;
  uint64_t v6 = result;
  uint64_t v7 = (uint64_t **)(result + 1);
  if (result + 1 != a2)
  {
    int v8 = *((char *)a2 + 25);
    if (v8 <= a3)
    {
      if (v8 >= a3) {
        return result;
      }
      uint64_t v13 = a2 + 1;
      uint64_t v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
          long long v5 = v13;
          int v14 = v13;
        }
        while (v12);
      }
      else
      {
        int v14 = a2;
        do
        {
          uint64_t v20 = v14;
          int v14 = (uint64_t *)v14[2];
        }
        while ((uint64_t *)*v14 != v20);
      }
      if (v14 == (uint64_t *)v7) {
        goto LABEL_42;
      }
      if (*((char *)v14 + 25) > a3) {
        goto LABEL_42;
      }
      std::string v21 = *v7;
      uint64_t v13 = result + 1;
      long long v5 = result + 1;
      if (!*v7) {
        goto LABEL_42;
      }
      while (1)
      {
        while (1)
        {
          long long v5 = v21;
          int v22 = *((char *)v21 + 25);
          if (v22 <= a3) {
            break;
          }
          std::string v21 = (uint64_t *)*v21;
          uint64_t v13 = v5;
          if (!*v5) {
            goto LABEL_42;
          }
        }
        if (v22 >= a3) {
          return result;
        }
        std::string v21 = (uint64_t *)v21[1];
        if (!v21)
        {
LABEL_30:
          uint64_t v13 = v5 + 1;
          goto LABEL_42;
        }
      }
    }
  }
  uint64_t v9 = *a2;
  if ((uint64_t *)*result == a2)
  {
    uint64_t v11 = a2;
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (uint64_t *)*a2;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      uint64_t v15 = a2;
      do
      {
        uint64_t v11 = (uint64_t *)v15[2];
        BOOL v16 = *v11 == (void)v15;
        uint64_t v15 = v11;
      }
      while (v16);
    }
    if (*((char *)v11 + 25) >= a3)
    {
      uint64_t v18 = *v7;
      uint64_t v13 = result + 1;
      long long v5 = result + 1;
      if (!*v7) {
        goto LABEL_42;
      }
      while (1)
      {
        while (1)
        {
          long long v5 = v18;
          int v19 = *((char *)v18 + 25);
          if (v19 <= a3) {
            break;
          }
          uint64_t v18 = (uint64_t *)*v18;
          uint64_t v13 = v5;
          if (!*v5) {
            goto LABEL_42;
          }
        }
        if (v19 >= a3) {
          return result;
        }
        uint64_t v18 = (uint64_t *)v18[1];
        if (!v18) {
          goto LABEL_30;
        }
      }
    }
  }
  if (v9) {
    long long v17 = v11;
  }
  else {
    long long v17 = a2;
  }
  if (v9) {
    uint64_t v13 = v11 + 1;
  }
  else {
    uint64_t v13 = a2;
  }
  if (!*v13)
  {
    long long v5 = v17;
LABEL_42:
    int64_t v23 = operator new(0x20uLL);
    v23[25] = a4;
    *(void *)int64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v5;
    uint64_t *v13 = (uint64_t)v23;
    uint64_t v24 = *(void *)*v6;
    if (v24)
    {
      uint64_t *v6 = v24;
      uint64_t v25 = (uint64_t *)*v13;
    }
    else
    {
      uint64_t v25 = (uint64_t *)v23;
    }
    BOOL result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], v25);
    ++v6[2];
  }
  return result;
}

uint64_t *std::set<char>::set[abi:ne180100](uint64_t *a1, char *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      std::__tree<char>::__emplace_hint_unique_key_args<char,char const&>(a1, v4, *a2, *a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_23F78647C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::unordered_map<std::string,std::set<char>>::unordered_map(uint64_t a1, uint64_t a2)
{
  RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v = 0u;
  *(_OWORD *)&qword_268C3FFD0 = 0u;
  dword_268C3FFE0 = 1065353216;
  if (a2)
  {
    uint64_t v2 = a1;
    uint64_t v35 = a1 + 48 * a2;
    while (1)
    {
      unint64_t v3 = (unint64_t)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8;
      unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_268C3FFD8, v2);
      unint64_t v5 = v4;
      unint64_t v6 = *((void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1);
      if (*((void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8));
        v7.i16[0] = vaddlv_u8(v7);
        unint64_t v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v3 = v4;
          if (v4 >= *((void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1)) {
            unint64_t v3 = v4 % *((void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1);
          }
        }
        else
        {
          unint64_t v3 = (*((void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1) - 1) & v4;
        }
        uint64_t v9 = *(unsigned __int8 ***)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v3);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v11 = *((void *)i + 1);
            if (v11 == v5)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_268C3FFE0, i + 16, (unsigned __int8 *)v2))goto LABEL_78; {
            }
              }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6) {
                  v11 %= v6;
                }
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v3) {
                break;
              }
            }
          }
        }
      }
      uint64_t v12 = (char *)operator new(0x40uLL);
      uint64_t v13 = (uint64_t *)v12;
      v36[0] = v12;
      v36[1] = &qword_268C3FFD0;
      char v37 = 0;
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = v5;
      if (*(char *)(v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v12 + 16), *(const std::string::value_type **)v2, *(void *)(v2 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v2;
        *((void *)v12 + 4) = *(void *)(v2 + 16);
        *((_OWORD *)v12 + 1) = v14;
      }
      std::set<char>::set[abi:ne180100](v13 + 5, (void *)(v2 + 24));
      char v37 = 1;
      float v15 = (float)(unint64_t)(qword_268C3FFD8 + 1);
      if (!v6 || (float)(*(float *)&dword_268C3FFE0 * (float)v6) < v15) {
        break;
      }
LABEL_68:
      uint64_t v31 = *(uint64_t **)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v3);
      uint64_t v32 = v36[0];
      if (v31)
      {
        *(void *)v36[0] = *v31;
      }
      else
      {
        *(void *)v36[0] = qword_268C3FFD0;
        qword_268C3FFD0 = v32;
        *(void *)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v3) = &qword_268C3FFD0;
        if (!*(void *)v32) {
          goto LABEL_77;
        }
        unint64_t v33 = *(void *)(*(void *)v32 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6) {
            v33 %= v6;
          }
        }
        else
        {
          v33 &= v6 - 1;
        }
        uint64_t v31 = (uint64_t *)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v33);
      }
      *uint64_t v31 = v32;
LABEL_77:
      v36[0] = 0;
      ++qword_268C3FFD8;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<char>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<char>>,void *>>>>::reset[abi:ne180100]((uint64_t)v36);
LABEL_78:
      v2 += 48;
      if (v2 == v35) {
        return;
      }
    }
    BOOL v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_268C3FFE0);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v6 = *((void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1);
    if (*(void *)&prime > *((void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1)) {
      goto LABEL_34;
    }
    if (*(void *)&prime < *((void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1))
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_268C3FFD8 / *(float *)&dword_268C3FFE0);
      if (*((void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1) < 3uLL
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          std::string v21 = (void *)RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v;
          *(void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1) = prime;
          do
            *(void *)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          int64_t v23 = (void **)qword_268C3FFD0;
          if (qword_268C3FFD0)
          {
            unint64_t v24 = *(void *)(qword_268C3FFD0 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v24) = &qword_268C3FFD0;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(void *)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v30))
                {
                  *(void *)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v30) = v23;
                  goto LABEL_59;
                }
                unsigned char *v23 = (void *)*j;
                void *j = **(void **)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v30);
                **(void **)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v30) = j;
                j = v23;
              }
              unint64_t v30 = v24;
LABEL_59:
              int64_t v23 = (void **)j;
              j = (void *)*j;
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        uint64_t v34 = (void *)RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v;
        *(void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v6 = 0;
        *((void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_23F78695C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<char>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<char>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::set<char>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<char>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<char>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<char>>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<char>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<char>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<char>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<char>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::set<char>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<char>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<char>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<char>>>>::~__hash_table()
{
  v0 = (void *)qword_268C3FFD0;
  if (qword_268C3FFD0)
  {
    do
    {
      uint64_t v1 = (void *)*v0;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<char>>,0>((uint64_t)(v0 + 2));
      operator delete(v0);
      v0 = v1;
    }
    while (v1);
  }
  uint64_t v2 = (void *)RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v;
  *(void *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

void std::unordered_map<std::string,unsigned long>::unordered_map(uint64_t a1, uint64_t a2)
{
  RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv = 0u;
  *(_OWORD *)&qword_268C3FFF8 = 0u;
  dword_268C40008 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v35 = a1 + 32 * a2;
    while (1)
    {
      unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_268C40000, v3);
      unint64_t v5 = v4;
      unint64_t v6 = *((void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1);
      if (*((void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8));
        v7.i16[0] = vaddlv_u8(v7);
        unint64_t v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v2 = v4;
          if (v4 >= *((void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1)) {
            unint64_t v2 = v4 % *((void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1);
          }
        }
        else
        {
          unint64_t v2 = (*((void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1) - 1) & v4;
        }
        uint64_t v9 = *(unsigned __int8 ***)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v2);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v11 = *((void *)i + 1);
            if (v11 == v5)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_268C40008, i + 16, (unsigned __int8 *)v3))goto LABEL_78; {
            }
              }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6) {
                  v11 %= v6;
                }
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v12 = operator new(0x30uLL);
      *uint64_t v12 = 0;
      v12[1] = v5;
      uint64_t v13 = (std::string *)(v12 + 2);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v3;
        uint64_t v12[4] = *(void *)(v3 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      void v12[5] = *(void *)(v3 + 24);
      float v15 = (float)(unint64_t)(qword_268C40000 + 1);
      if (!v6 || (float)(*(float *)&dword_268C40008 * (float)v6) < v15) {
        break;
      }
LABEL_68:
      uint64_t v31 = RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv;
      uint64_t v32 = *(void **)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v2);
      if (v32)
      {
        *uint64_t v12 = *v32;
      }
      else
      {
        *uint64_t v12 = qword_268C3FFF8;
        qword_268C3FFF8 = (uint64_t)v12;
        *(void *)(v31 + 8 * v2) = &qword_268C3FFF8;
        if (!*v12) {
          goto LABEL_77;
        }
        unint64_t v33 = *(void *)(*v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6) {
            v33 %= v6;
          }
        }
        else
        {
          v33 &= v6 - 1;
        }
        uint64_t v32 = (void *)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v33);
      }
      void *v32 = v12;
LABEL_77:
      ++qword_268C40000;
LABEL_78:
      v3 += 32;
      if (v3 == v35) {
        return;
      }
    }
    BOOL v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_268C40008);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v6 = *((void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1);
    if (*(void *)&prime > *((void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1)) {
      goto LABEL_34;
    }
    if (*(void *)&prime < *((void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1))
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_268C40000 / *(float *)&dword_268C40008);
      if (*((void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1) < 3uLL
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          std::string v21 = (void *)RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv;
          *(void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1) = prime;
          do
            *(void *)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          int64_t v23 = (void **)qword_268C3FFF8;
          if (qword_268C3FFF8)
          {
            unint64_t v24 = *(void *)(qword_268C3FFF8 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v24) = &qword_268C3FFF8;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(void *)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v30))
                {
                  *(void *)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v30) = v23;
                  goto LABEL_59;
                }
                unsigned char *v23 = (void *)*j;
                void *j = **(void **)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v30);
                **(void **)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v30) = j;
                j = v23;
              }
              unint64_t v30 = v24;
LABEL_59:
              int64_t v23 = (void **)j;
              j = (void *)*j;
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        uint64_t v34 = (void *)RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv;
        *(void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v6 = 0;
        *((void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v2 = v5 % v6;
      }
      else {
        unint64_t v2 = v5;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_23F786F44(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table()
{
  v0 = (void **)qword_268C3FFF8;
  if (qword_268C3FFF8)
  {
    do
    {
      uint64_t v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0) {
        operator delete(v0[2]);
      }
      operator delete(v0);
      v0 = v1;
    }
    while (v1);
  }
  unint64_t v2 = (void *)RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv;
  *(void *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

realityio::StageSceneLibraryAssetBuilder *realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(realityio::StageSceneLibraryAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[9] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "StageSceneLibraryAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kStageSceneLibraryAssetBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C412E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C412E8))
  {
    operator new();
  }
  uint64_t v5 = _MergedGlobals_61;
  unint64_t v6 = (std::__shared_weak_count *)unk_268C412E0;
  if (unk_268C412E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C412E0 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F34ADB0;
  void v12[3] = v12;
  v11[0] = &unk_26F34AE30;
  uint64_t v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F34AD38;
  *((void *)this + 35) = 850045863;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((void *)this + 42) = 0;
  realityio::ImportedScene::ImportedScene((realityio::StageSceneLibraryAssetBuilder *)((char *)this + 344));
  return this;
}

void sub_23F787380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  MEMORY[0x2455D2BD0](v36, 0x1060C40E5A1EACFLL);
  MEMORY[0x2455D2BD0](v35, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v34, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C412E8);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void realityio::StageSceneLibraryAssetBuilder::getImportedScene(realityio::StageSceneLibraryAssetBuilder *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4 = (std::mutex *)((char *)this + 280);
  std::mutex::lock((std::mutex *)((char *)this + 280));
  realityio::ImportedScene::ImportedScene(a2, (uint64_t)this + 344);

  std::mutex::unlock(v4);
}

void sub_23F787578(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::StageSceneLibraryAssetBuilder::run(realityio::StageSceneLibraryAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  unint64_t v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v39, v5, v4);
  IsPseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v39);
  if (IsPseudoRoot)
  {
    UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(IsPseudoRoot);
    uint64_t v9 = *UsdPrimDefaultPredicate;
    uint64_t v8 = UsdPrimDefaultPredicate[1];
    uint64_t v10 = UsdPrimDefaultPredicate[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v9 & 0x2000) != 0 || (v8 & 0x2000) == 0))
    {
      v9 |= 0x2000uLL;
      v8 &= ~0x2000uLL;
    }
    *(void *)buf = v9;
    uint64_t v44 = v8;
    *(void *)&long long v45 = v10;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v39, (uint64_t *)buf, (uint64_t)&v30);
    std::string v21 = a2;
    *(void *)buf = v30;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v44, &v31);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v44 + 1, (_DWORD *)&v31 + 1);
    long long v45 = v32;
    uint64_t v46 = v33;
    unint64_t v26 = v34;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v27, &v35);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v27 + 1, &v36);
    long long v28 = v37;
    uint64_t v29 = v38;
    while (*(realityio **)buf != v26
         || v44 != v27
         || (pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v45, (uint64_t)&v28) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)buf, (uint64_t)&v22);
      char isSceneLibrary = realityio::isSceneLibrary((realityio *)&v22, v11);
      if ((v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
      if (v23) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
      }
      if (isSceneLibrary)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
        goto LABEL_17;
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)buf);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    long long v14 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    uint64_t v15 = realityio::EntityBuilder::kInputName(v14);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)v21, v15, (uint64_t)&v30);
    if ((_BYTE)v30)
    {
      BOOL v16 = v31;
      unint64_t v26 = v31;
      if (v31)
      {
        BOOL v16 = (realityio *)RERetain();
        if (v26)
        {
          uint64_t ServiceLocator = REEngineGetServiceLocator();
          uint64_t v22 = MEMORY[0x2455CDC30](ServiceLocator);
          uint64_t v18 = *((void *)v21 + 6);
          int v19 = operator new(0x20uLL);
          void *v19 = &unk_26F34AEB0;
          v19[1] = this;
          _DWORD v19[2] = &v26;
          v19[3] = &v22;
          *((void *)&v45 + 1) = v19;
          (*(void (**)(uint64_t, uint8_t *))(*(void *)v18 + 16))(v18, buf);
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
LABEL_29:
          realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v26);
          realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v30);
          goto LABEL_17;
        }
      }
    }
    else
    {
      unint64_t v26 = 0;
    }
    uint64_t v20 = *(NSObject **)(realityio::logObjects(v16) + 24);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_23F4EA000, v20, OS_LOG_TYPE_DEFAULT, "Stopping operation to export single USD scene for root without a scene library.", buf, 2u);
    }
    goto LABEL_29;
  }
LABEL_17:
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
  uint64_t result = v40;
  if (v40) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v40);
  }
  return result;
}

void sub_23F787974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v12 - 144));
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v12 - 176));
  _Unwind_Resume(a1);
}

void realityio::StageSceneLibraryAssetBuilder::clear(realityio::StageSceneLibraryAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v3 = (std::mutex *)((char *)this + 280);
  std::mutex::lock((std::mutex *)((char *)this + 280));
  realityio::ImportedScene::ImportedScene((realityio::ImportedScene *)v9);
  *((unsigned char *)this + 344) = v9[0];
  uint64_t v4 = *((void *)this + 44);
  if (v4 != v10)
  {
    *((void *)this + 44) = v10;
    uint64_t v10 = v4;
  }
  uint64_t v5 = *((void *)this + 45);
  if (v5 != v11)
  {
    *((void *)this + 45) = v11;
    uint64_t v11 = v5;
  }
  unint64_t v6 = (void **)((char *)this + 368);
  if (*((char *)this + 391) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unint64_t v6 = __p;
  *((void *)this + 48) = v13;
  HIBYTE(v13) = 0;
  LOBYTE(__p) = 0;
  uint8x8_t v7 = (_OWORD *)((char *)this + 392);
  if (*((char *)this + 415) < 0)
  {
    operator delete(*((void **)this + 49));
    int v8 = SHIBYTE(v13);
    _OWORD *v7 = v14;
    *((void *)this + 51) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    *((unsigned char *)this + 416) = v16;
    if (v8 < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    _OWORD *v7 = v14;
    *((void *)this + 51) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    *((unsigned char *)this + 416) = v16;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v11);
  realityio::WrappedRERef<void *>::~WrappedRERef(&v10);
  std::mutex::unlock(v3);
}

void sub_23F787B84(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::StageSceneLibraryAssetBuilder::~StageSceneLibraryAssetBuilder(realityio::StageSceneLibraryAssetBuilder *this)
{
  realityio::StageSceneLibraryAssetBuilder::~StageSceneLibraryAssetBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26F34AD38;
  if (*((char *)this + 415) < 0) {
    operator delete(*((void **)this + 49));
  }
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)this + 45);
  realityio::WrappedRERef<void *>::~WrappedRERef((void *)this + 44);
  std::mutex::~mutex((std::mutex *)((char *)this + 280));
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 23);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

realityio::ImportedScene *realityio::ImportedScene::ImportedScene(realityio::ImportedScene *this)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 3, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 6, "");
  *((unsigned char *)this + 72) = 0;
  return this;
}

void sub_23F787C38(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v3);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(v1 + 16));
  realityio::WrappedRERef<void *>::~WrappedRERef(v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F34ADB0;
  return result;
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F34ADB0;
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v9[0]) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)v9, __p);
  unint64_t v6 = (std::__shared_weak_count *)__p[1];
  uint64_t v11 = __p[0];
  uint64_t v12 = (std::__shared_weak_count *)__p[1];
  if (__p[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "end_of_update");
  unint64_t v7 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v8 = (std::__shared_weak_count *)operator new(0x48uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330630;
  *(_OWORD *)long long __p = *(_OWORD *)v9;
  uint64_t v14 = v10;
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  realityio::CurrentPrimInputDescriptor::CurrentPrimInputDescriptor(&v8[1].__vftable, (uint64_t)__p, (uint64_t *)(v7 + 56), 0);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  __p[0] = &v8[1];
  __p[1] = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::InputsDescriptor::addInputDescriptor(v3, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F787FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F34AE30;
  return result;
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F34AE30;
}

char *std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26F34AEB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F34AEB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = (std::mutex *)(v1 + 280);
  std::mutex::lock((std::mutex *)(v1 + 280));
  realityio::ImportedScene::ImportedScene((realityio::ImportedScene *)&buf);
  *(unsigned char *)(v1 + 344) = buf.__r_.__value_.__s.__data_[0];
  std::string::size_type v3 = *(void *)(v1 + 352);
  if (v3 != buf.__r_.__value_.__l.__size_)
  {
    *(void *)(v1 + 352) = buf.__r_.__value_.__l.__size_;
    buf.__r_.__value_.__l.__size_ = v3;
  }
  std::string::size_type v4 = *(void *)(v1 + 360);
  if (v4 != buf.__r_.__value_.__r.__words[2])
  {
    *(void *)(v1 + 360) = *((void *)&buf.__r_.__value_.__l + 2);
    buf.__r_.__value_.__r.__words[2] = v4;
  }
  unint64_t v5 = (void **)(v1 + 368);
  if (*(char *)(v1 + 391) < 0) {
    operator delete(*v5);
  }
  char v6 = 0;
  *(_OWORD *)unint64_t v5 = __p;
  *(void *)(v1 + 384) = v24;
  HIBYTE(v24) = 0;
  LOBYTE(__p) = 0;
  unint64_t v7 = (void **)(v1 + 392);
  if (*(char *)(v1 + 415) < 0)
  {
    operator delete(*v7);
    char v6 = HIBYTE(v24);
  }
  *(_OWORD *)unint64_t v7 = v25;
  *(void *)(v1 + 408) = v26;
  HIBYTE(v26) = 0;
  LOBYTE(v25) = 0;
  *(unsigned char *)(v1 + 416) = v27;
  if (v6 < 0) {
    operator delete((void *)__p);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&buf.__r_.__value_.__r.__words[2]);
  realityio::WrappedRERef<void *>::~WrappedRERef(&buf.__r_.__value_.__l.__size_);
  std::string::size_type v8 = RESceneCreate();
  REEntityGetParent();
  RESceneAddEntity();
  uint64_t v9 = REAssetManagerSceneAssetCreate();
  if (v9)
  {
    realityio::Builder::addAsset((uint64_t *)v1, v9, 0);
    std::string::basic_string[abi:ne180100]<0>(v20, "RootScene");
    std::string::basic_string[abi:ne180100]<0>(v18, "memory:RootScene.rescene");
    realityio::ImportedScene::ImportedScene(&buf, 1, v8, v9, (long long *)v20, (long long *)v18, 1);
    *(unsigned char *)(v1 + 344) = buf.__r_.__value_.__s.__data_[0];
    std::string::size_type v10 = *(void *)(v1 + 352);
    if (v10 != buf.__r_.__value_.__l.__size_)
    {
      *(void *)(v1 + 352) = buf.__r_.__value_.__l.__size_;
      buf.__r_.__value_.__l.__size_ = v10;
    }
    std::string::size_type v11 = *(void *)(v1 + 360);
    if (v11 != buf.__r_.__value_.__r.__words[2])
    {
      *(void *)(v1 + 360) = *((void *)&buf.__r_.__value_.__l + 2);
      buf.__r_.__value_.__r.__words[2] = v11;
    }
    if (*(char *)(v1 + 391) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)unint64_t v5 = __p;
    *(void *)(v1 + 384) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(__p) = 0;
    if (*(char *)(v1 + 415) < 0)
    {
      operator delete(*(void **)(v1 + 392));
      int v14 = SHIBYTE(v24);
      *(_OWORD *)unint64_t v7 = v25;
      *(void *)(v1 + 408) = v26;
      HIBYTE(v26) = 0;
      LOBYTE(v25) = 0;
      *(unsigned char *)(v1 + 416) = v27;
      if (v14 < 0) {
        operator delete((void *)__p);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v7 = v25;
      *(void *)(v1 + 408) = v26;
      HIBYTE(v26) = 0;
      LOBYTE(v25) = 0;
      *(unsigned char *)(v1 + 416) = v27;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&buf.__r_.__value_.__r.__words[2]);
    realityio::WrappedRERef<void *>::~WrappedRERef(&buf.__r_.__value_.__l.__size_);
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    unint64_t v2 = (std::mutex *)(v1 + 280);
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    RERelease();
  }
  else
  {
    realityio::ImportedScene::ImportedScene((realityio::ImportedScene *)&buf);
    *(unsigned char *)(v1 + 344) = buf.__r_.__value_.__s.__data_[0];
    std::string::size_type v12 = *(void *)(v1 + 352);
    if (v12 != buf.__r_.__value_.__l.__size_)
    {
      *(void *)(v1 + 352) = buf.__r_.__value_.__l.__size_;
      buf.__r_.__value_.__l.__size_ = v12;
    }
    std::string::size_type v13 = *(void *)(v1 + 360);
    if (v13 != buf.__r_.__value_.__r.__words[2])
    {
      *(void *)(v1 + 360) = *((void *)&buf.__r_.__value_.__l + 2);
      buf.__r_.__value_.__r.__words[2] = v13;
    }
    if (*(char *)(v1 + 391) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)unint64_t v5 = __p;
    *(void *)(v1 + 384) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(__p) = 0;
    if (*(char *)(v1 + 415) < 0)
    {
      operator delete(*(void **)(v1 + 392));
      int v15 = SHIBYTE(v24);
      *(_OWORD *)unint64_t v7 = v25;
      *(void *)(v1 + 408) = v26;
      HIBYTE(v26) = 0;
      LOBYTE(v25) = 0;
      *(unsigned char *)(v1 + 416) = v27;
      if (v15 < 0) {
        operator delete((void *)__p);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v7 = v25;
      *(void *)(v1 + 408) = v26;
      HIBYTE(v26) = 0;
      LOBYTE(v25) = 0;
      *(unsigned char *)(v1 + 416) = v27;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&buf.__r_.__value_.__r.__words[2]);
    char v16 = (realityio *)realityio::WrappedRERef<void *>::~WrappedRERef(&buf.__r_.__value_.__l.__size_);
    uint64_t v17 = *(NSObject **)(realityio::logObjects(v16) + 24);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_23F4EA000, v17, OS_LOG_TYPE_DEFAULT, "Unable to create root scene asset from USD", (uint8_t *)&buf, 2u);
    }
  }
  if (v8) {
    RERelease();
  }
  REEntitySetParent();
  std::mutex::unlock(v2);
}

void sub_23F7886AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::mutex::unlock(v22);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t RIOBuilderDirtyStageSubscriptionGetTypeID()
{
  if (RIOBuilderDirtyStageSubscriptionGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderDirtyStageSubscriptionGetTypeID::onceToken, &__block_literal_global_37);
  }
  return RIOBuilderDirtyStageSubscriptionGetTypeID::typeID;
}

void __RIOBuilderDirtyStageSubscriptionGetTypeID_block_invoke()
{
  if (!RIOBuilderDirtyStageSubscriptionGetTypeID::typeID) {
    RIOBuilderDirtyStageSubscriptionGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOBuilderDirtyStageSubscriptionCreateWithDirtyStageDescriptors(const __CFArray *a1)
{
  long long v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      long long v5 = *((_OWORD *)ValueAtIndex + 1);
      char v6 = (std::__shared_weak_count *)*((void *)ValueAtIndex + 3);
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v7 = v29;
        std::string::size_type v8 = v30;
        if (v29 >= v30) {
          goto LABEL_9;
        }
        *(_OWORD *)uint64_t v29 = v5;
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        unint64_t v7 = v29;
        std::string::size_type v8 = v30;
        if (v29 >= v30)
        {
LABEL_9:
          long long v25 = v5;
          uint64_t v10 = (v7 - v28) >> 4;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 60) {
            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = v8 - v28;
          if (v12 >> 3 > v11) {
            unint64_t v11 = v12 >> 3;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v30, v13);
          char v16 = &v14[16 * v10];
          *(_OWORD *)char v16 = v25;
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v9 = v16 + 16;
          uint64_t v17 = v28;
          uint64_t v18 = v29;
          if (v29 == v28)
          {
            long long v28 = v16;
            uint64_t v29 = v16 + 16;
            uint64_t v30 = &v14[16 * v15];
          }
          else
          {
            do
            {
              long long v19 = *((_OWORD *)v18 - 1);
              v18 -= 16;
              *((_OWORD *)v16 - 1) = v19;
              v16 -= 16;
              *(void *)uint64_t v18 = 0;
              *((void *)v18 + 1) = 0;
            }
            while (v18 != v17);
            uint64_t v18 = v28;
            uint64_t v20 = v29;
            long long v28 = v16;
            uint64_t v29 = v9;
            uint64_t v30 = &v14[16 * v15];
            while (v20 != v18)
            {
              char v21 = (std::__shared_weak_count *)*((void *)v20 - 1);
              if (v21) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v21);
              }
              v20 -= 16;
            }
          }
          if (v18) {
            operator delete(v18);
          }
          goto LABEL_27;
        }
        *(void *)uint64_t v29 = v5;
        *((void *)v7 + 1) = 0;
      }
      uint64_t v9 = v7 + 16;
LABEL_27:
      uint64_t v29 = v9;
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  uint64_t v22 = (std::__shared_weak_count *)operator new(0x40uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F34AFB0;
  uint64_t v26 = (void **)realityio::DirtyStageSubscription::DirtyStageSubscription((uint64_t)&v22[1], (void **)&v28);
  char v27 = v22;
  uint64_t v23 = RIOBuilderDirtyStageSubscriptionCreate<std::shared_ptr<realityio::DirtyStageSubscription const> &>(&v26);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v26 = (void **)&v28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v26);
  return v23;
}

void sub_23F7889E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, std::__shared_weak_count *a13, char a14)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  a12 = (void **)&a14;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderDirtyStageSubscriptionCopyDirtyStageDescriptors(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    std::string::size_type v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v3)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyStageDescriptor const>*,std::shared_ptr<realityio::DirtyStageDescriptor const>*>(&v12, *(void **)(v3 + 8), *(void **)(v3 + 16), (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 4);
      uint64_t v5 = v12;
      for (uint64_t i = v13; v5 != i; v5 += 16)
      {
        uint64_t v10 = *(void ***)v5;
        unint64_t v7 = *(std::__shared_weak_count **)(v5 + 8);
        unint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::size_type v8 = (const void *)RIOBuilderDirtyStageDescriptorCreate<std::shared_ptr<realityio::DirtyStageDescriptor const> &>(&v10);
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      uint64_t v10 = (void **)&v12;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v10);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return Mutable;
}

void sub_23F788B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void _RIOBuilderDirtyStageSubscriptionCFFinalize(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

BOOL _RIOBuilderDirtyStageSubscriptionCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderDirtyStageSubscriptionCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderDirtyStageSubscriptionCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderDirtyStageSubscription %p>", a1);
}

CFStringRef _RIOBuilderDirtyStageSubscriptionCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderDirtyStageSubscription %p>", a1);
}

void std::__shared_ptr_emplace<realityio::DirtyStageSubscription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F34AFB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::DirtyStageSubscription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F34AFB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::DirtyStageSubscription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void realityio::tokens::OutputIdentifiers_StaticTokenType::~OutputIdentifiers_StaticTokenType(realityio::tokens::OutputIdentifiers_StaticTokenType *this)
{
  long long v45 = (void **)((char *)this + 352);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v45);
  uint64_t v2 = *((void *)this + 43);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 42);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 41);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 40);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 39);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 38);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 37);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 36);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 35);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 34);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 33);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 32);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 31);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 30);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 29);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 28);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 27);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 26);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 25);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 24);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *((void *)this + 23);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *((void *)this + 22);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *((void *)this + 21);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *((void *)this + 20);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *((void *)this + 19);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *((void *)this + 18);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *((void *)this + 17);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *((void *)this + 16);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *((void *)this + 15);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *((void *)this + 14);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *((void *)this + 13);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *((void *)this + 12);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *((void *)this + 11);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *((void *)this + 10);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *((void *)this + 9);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *((void *)this + 8);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *((void *)this + 7);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v39 = *((void *)this + 6);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = *((void *)this + 5);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v41 = *((void *)this + 4);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v42 = *((void *)this + 3);
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v43 = *((void *)this + 2);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v44 = *((void *)this + 1);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::OutputIdentifiers_StaticTokenType *realityio::tokens::OutputIdentifiers_StaticTokenType::OutputIdentifiers_StaticTokenType(realityio::tokens::OutputIdentifiers_StaticTokenType *this)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v52 = (uint64_t *)(MEMORY[0x2455CF820](this, "audioFileAsset", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 280, "textEntity", 0);
  MEMORY[0x2455CF820]((char *)this + 288, "textMeshAsset", 0);
  MEMORY[0x2455CF820]((char *)this + 296, "textureAsset", 0);
  MEMORY[0x2455CF820]((char *)this + 304, "transform", 0);
  MEMORY[0x2455CF820]((char *)this + 312, "transformAnimationAsset", 0);
  MEMORY[0x2455CF820]((char *)this + 320, "transformAnimationLibraryAsset", 0);
  MEMORY[0x2455CF820]((char *)this + 328, "transformAnimationSceneData", 0);
  MEMORY[0x2455CF820]((char *)this + 336, "audioAnimationSceneData", 0);
  MEMORY[0x2455CF820]((char *)this + 344, "acousticMeshSceneData", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v53 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v52;
  uint64_t v54 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v55 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v56 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v57 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v58 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v59 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v60 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v61 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v62 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v63 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v64 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v65 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v66 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v67 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v68 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v69 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v70 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v71 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v72 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v73 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v74 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v75 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v76 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v77 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v78 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v79 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v80 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v81 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v82 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v83 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v84 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v85 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = *((void *)this + 33);
  uint64_t v86 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v36 = *((void *)this + 34);
  uint64_t v87 = v36;
  if ((v36 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v37 = *((void *)this + 35);
  uint64_t v88 = v37;
  if ((v37 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v38 = *((void *)this + 36);
  uint64_t v89 = v38;
  if ((v38 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v39 = *((void *)this + 37);
  uint64_t v90 = v39;
  if ((v39 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v90 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v40 = *((void *)this + 38);
  uint64_t v91 = v40;
  if ((v40 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v91 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v41 = *((void *)this + 39);
  uint64_t v92 = v41;
  if ((v41 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v42 = *((void *)this + 40);
  uint64_t v93 = v42;
  if ((v42 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v93 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v43 = *((void *)this + 41);
  uint64_t v94 = v43;
  if ((v43 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v94 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v44 = *((void *)this + 42);
  uint64_t v95 = v44;
  if ((v44 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v95 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v45 = *((void *)this + 43);
  uint64_t v96 = v45;
  if ((v45 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v96 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  uint64_t v46 = (char *)operator new(0x160uLL);
  uint64_t v47 = 0;
  *((void *)this + 44) = v46;
  *((void *)this + 45) = v46;
  *((void *)this + 46) = v46 + 352;
  do
  {
    uint64_t v48 = *(uint64_t *)((char *)&v53 + v47);
    *(void *)&v46[v47] = v48;
    if ((v48 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v46[v47] &= 0xFFFFFFFFFFFFFFF8;
    }
    v47 += 8;
  }
  while (v47 != 352);
  *((void *)this + 45) = v46 + 352;
  for (uint64_t i = 344; i != -8; i -= 8)
  {
    uint64_t v50 = *(uint64_t *)((char *)&v53 + i);
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F789E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void **a45,uint64_t a46,char a47)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a45);
  uint64_t v57 = 344;
  while (1)
  {
    uint64_t v58 = *(void *)(&a47 + v57);
    if ((v58 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v57 -= 8;
    if (v57 == -8)
    {
      if ((*v54 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v56 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F78A3B8()
{
}

void sub_23F78A3C0()
{
}

void sub_23F78A3C8()
{
}

void sub_23F78A3D0()
{
}

void sub_23F78A3D8()
{
}

void sub_23F78A3E0()
{
}

void sub_23F78A3E8()
{
}

void sub_23F78A3F0()
{
}

void sub_23F78A3F8()
{
}

void sub_23F78A400()
{
}

void sub_23F78A408()
{
}

void sub_23F78A410()
{
}

void sub_23F78A418()
{
}

void sub_23F78A420()
{
}

void sub_23F78A428()
{
}

void sub_23F78A430()
{
}

void sub_23F78A438()
{
}

void sub_23F78A440()
{
}

void sub_23F78A448()
{
}

void sub_23F78A450()
{
}

void sub_23F78A458()
{
}

void sub_23F78A460()
{
}

void sub_23F78A468()
{
}

void sub_23F78A470()
{
}

void sub_23F78A478()
{
}

void sub_23F78A480()
{
}

void sub_23F78A488()
{
}

void sub_23F78A490()
{
}

void sub_23F78A498()
{
}

void sub_23F78A4A0()
{
}

void sub_23F78A4A8()
{
}

void sub_23F78A4B0()
{
}

void sub_23F78A4B8()
{
}

void sub_23F78A4C0()
{
}

void sub_23F78A4C8()
{
}

uint64_t TgECS::TgECS(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = 850045863;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26F34B000;
  *(void *)(a1 + 88) = *a3;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(a1 + 88));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(unsigned char *)(a1 + 104) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(void *)(a1 + 120) = 850045863;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  MEMORY[0x2455CE910](a1 + 184);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 296) = a1 + 304;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = a1 + 328;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = a1 + 392;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)(a1 + 408));
  *(void *)(a1 + 456) = a1 + 464;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = a1 + 488;
  return a1;
}

void sub_23F78A680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, pxrInternal__aapl__pxrReserved__::SdfPath *a13, pxrInternal__aapl__pxrReserved__::SdfPath *a14, atomic_uint **a15, std::mutex *a16)
{
  uint64_t v28 = v22;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v18, *(void **)(v16 + 392));
  pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::~SdfPathTable(v17);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v20, *(void **)(v16 + 328));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v24, *(void **)(v16 + 304));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(v25, *(void **)(v16 + 280));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(v19, *(void **)(v16 + 256));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v23, *(void **)(v16 + 232));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v28, *(void **)(v16 + 208));
  uint64_t v27 = *(std::__shared_weak_count **)(v16 + 192);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::mutex::~mutex(v21);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a13);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a14);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(a15);
  *(void *)uint64_t v16 = &unk_26F341FD0;
  std::mutex::~mutex(a16);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtValue *TgECS::eval@<X0>(TgECS *this@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = (TgECS *)((char *)this + 96);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/__root");
    MEMORY[0x2455CF7A0](&p_p, &__p);
    unint64_t v5 = atomic_load(&realityio::tokens::EcsTokens);
    if (!v5) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&p_p);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "/__root.__entity");
    MEMORY[0x2455CF7A0](&p_p, &__p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v4, (int *)&p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 100);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&p_p);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, &v21);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, &v22);
    long long __p = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    p_p = &__p;
    char v15 = 0;
    long long __p = operator new(8uLL);
    uint64_t v19 = __p;
    uint64_t v20 = (char *)__p + 8;
    uint64_t v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v20, &v23, &v25, __p);
    unint64_t v6 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v6) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v7 = *(void *)(v6 + 152) & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      uint64_t v8 = (char *)(v7 + 16);
      if (*(char *)(v7 + 39) < 0) {
        uint64_t v8 = *(char **)v8;
      }
    }
    else
    {
      uint64_t v8 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&p_p, v8);
    MEMORY[0x2455CF7A0](v17, &p_p);
    TgBase::emitTarget((uint64_t)this, v4, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v17);
    if (v16 < 0) {
      operator delete(p_p);
    }
    p_p = &__p;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
    long long __p = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    unint64_t v9 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v9) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v10 = *(void *)(v9 + 144) & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      uint64_t v11 = (char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        uint64_t v11 = *(char **)v11;
      }
    }
    else
    {
      uint64_t v11 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&p_p, v11);
    MEMORY[0x2455CF7A0](&v23, &p_p);
    TgBase::emitTarget((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
    if (v16 < 0) {
      operator delete(p_p);
    }
    p_p = &__p;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  }
  uint64_t v12 = *((void *)this + 1);
  *(unsigned char *)(v12 + 193) = 0;
  Exec::execGraphSerial((std::chrono::steady_clock::time_point *)v12, v4);
  ++*(void *)(v12 + 280);
  return Exec::getValue((Exec *)v12, v4, a2);
}

void sub_23F78AAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::genECSPath(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, a2);
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, (_DWORD *)a2 + 1);
  if (*(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5))
  {
    unint64_t v6 = atomic_load(&realityio::tokens::StageTokens);
    if (!v6) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v7 = *(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      uint64_t v8 = (char *)(v7 + 16);
      if (*(char *)(v7 + 39) < 0) {
        uint64_t v8 = *(char **)v8;
      }
    }
    else
    {
      uint64_t v8 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v8);
    MEMORY[0x2455CF7A0](&v12, __p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v13, &v12);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
}

void sub_23F78ACE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
}

uint64_t TgECS::update(TgECS *this)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v66, "/__root.__entity");
  MEMORY[0x2455CF7A0](&v60, &v66);
  uint64_t v29 = (TgECS *)((char *)this + 96);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 96, (int *)&v60);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 100);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 272, *((void **)this + 35));
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 34) = (char *)this + 280;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 200, *((void **)this + 26));
  *((void *)this + 25) = (char *)this + 208;
  *((void *)this + 26) = 0;
  uint64_t v2 = (void *)*((void *)this + 29);
  *((void *)this + 27) = 0;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 224, v2);
  *((void *)this + 28) = (char *)this + 232;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 248, *((void **)this + 32));
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 31) = (char *)this + 256;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 384, *((void **)this + 49));
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 48) = (char *)this + 392;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 320, *((void **)this + 41));
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *((void *)this + 40) = (char *)this + 328;
  uint64_t v3 = (TgECS **)((char *)this + 296);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 296, *((void **)this + 38));
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 37) = (char *)this + 304;
  MEMORY[0x2455CEFD0]((char *)this + 408);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 456, *((void **)this + 58));
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((void *)this + 57) = (char *)this + 464;
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 480, *((void **)this + 61));
  *((void *)this + 61) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 60) = (char *)this + 488;
  uint64_t v28 = (uint64_t *)((char *)this + 88);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)this + 11);
  if (pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
  {
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v28);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::SetTime();
  }
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v28);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(&v56, v6);
  TgECS::preTraversalSkeletonConnections((uint64_t **)this, (uint64_t)&v56);
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
  if (v57) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v57);
  }
  unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v28);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(&v51, v7);
  TgECS::buildECSTopologyInfo((_anonymous_namespace_ *)v55, (uint64_t)this, (uint64_t)&v51);
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
  if (v52) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v52);
  }
  memset(v50, 0, sizeof(v50));
  uint64_t v8 = *v3;
  if (*v3 != (TgECS *)((char *)this + 304))
  {
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v28);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v45, v9, (TgECS *)((char *)v8 + 36));
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45))
    {
      char v11 = v46;
      if (!v46 || (uint64_t v12 = *((void *)v46 + 7), (v12 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v46, v10);
        uint64_t v12 = *((void *)v11 + 7);
      }
      if ((v12 & 0x40) != 0)
      {
        int v40 = v45;
        uint64_t v41 = v46;
        if (v46) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v46 + 6, 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v42, &v47);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v43, &v48);
        uint64_t v44 = v49;
        if ((v49 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v44 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v38, (_DWORD *)v8 + 7);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v39, (_DWORD *)v8 + 8);
        TgECS::ecsEntitySubTree((_anonymous_namespace_ *)&v66, (uint64_t)this, (uint64_t)&v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
      }
    }
    uint64_t v36 = (atomic_uint *)*v28;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v36);
    getDefaultPrimPathOrFirst(&v37, (uint64_t *)&v36);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v36);
    long long v34 = 0uLL;
    uint64_t v35 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v66, v29);
    unint64_t v13 = atomic_load(&realityio::tokens::EcsTokens);
    if (v13)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
      unint64_t v14 = atomic_load(&realityio::tokens::EcsTokens);
      if (v14)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v66, v29);
        MEMORY[0x2455CF810](&v60, "__childEntities");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v30, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v66, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v60);
        if ((v60 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v63, &v31);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v64, &v32);
        memset(&v66, 0, sizeof(v66));
        uint64_t v60 = &v66;
        char v61 = 0;
        v66.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(8uLL);
        v66.__r_.__value_.__l.__size_ = v66.__r_.__value_.__r.__words[0];
        v66.__r_.__value_.__r.__words[2] = v66.__r_.__value_.__r.__words[0] + 8;
        v66.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v66.__r_.__value_.__r.__words[2], &v63, &v65, v66.__r_.__value_.__l.__data_);
        TgBase::emitArray((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
      }
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  char v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90538]);
  if (!v15) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
  }
  if ((*((void *)v15 + 148) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (*((void *)v15 + 148) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  }
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v17 = *(_OWORD *)EmptyString;
    v66.__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v17;
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  memset(&v66, 0, sizeof(v66));
  unint64_t v18 = atomic_load(&realityio::tokens::ActionTokens);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v19 = *(void *)(v18 + 160) & 0xFFFFFFFFFFFFFFF8;
  if (v19)
  {
    uint64_t v20 = (char *)(v19 + 16);
    if (*(char *)(v19 + 39) < 0) {
      uint64_t v20 = *(char **)v20;
    }
  }
  else
  {
    uint64_t v20 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, v20);
  MEMORY[0x2455CF7A0](&v63, &v60);
  TgBase::emitTarget((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v63);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
  if (v62 < 0) {
    operator delete(v60);
  }
  uint64_t v60 = &v66;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
  int v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90538]);
  if (!v21) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
  }
  if ((*((void *)v21 + 70) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v22 = (*((void *)v21 + 70) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v22 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
  }
  if (*(char *)(v22 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v22, *(void *)(v22 + 8));
  }
  else
  {
    long long v23 = *(_OWORD *)v22;
    v66.__r_.__value_.__r.__words[2] = *(void *)(v22 + 16);
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v23;
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  memset(&v66, 0, sizeof(v66));
  unint64_t v24 = atomic_load(&realityio::tokens::ActionTokens);
  if (!v24) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v25 = *(void *)(v24 + 160) & 0xFFFFFFFFFFFFFFF8;
  if (v25)
  {
    uint64_t v26 = (char *)(v25 + 16);
    if (*(char *)(v25 + 39) < 0) {
      uint64_t v26 = *(char **)v26;
    }
  }
  else
  {
    uint64_t v26 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, v26);
  MEMORY[0x2455CF7A0](&v63, &v60);
  TgBase::emitTarget((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v63);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
  if (v62 < 0) {
    operator delete(v60);
  }
  uint64_t v60 = &v66;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v55);
}

void sub_23F78C11C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t TgECS::preTraversalSkeletonConnections(uint64_t **a1, uint64_t a2)
{
  int8x16_t v80 = 0uLL;
  LOBYTE(v81) = 0;
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v80, 0);
  *(void *)&long long v66 = *(void *)(v4 + 16);
  int8x16_t v65 = *(int8x16_t *)v4;
  int8x16_t v80 = v65;
  LOBYTE(v81) = v66;
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v80, 1);
  *(void *)&long long v63 = *(void *)(v5 + 16);
  int8x16_t v62 = *(int8x16_t *)v5;
  int8x16_t v80 = v62;
  LOBYTE(v81) = v63;
  unint64_t v6 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v80, 0x100000005);
  uint64_t v7 = v6[1].i64[0];
  v8.i64[0] = -8193;
  v8.i64[0] = vandq_s8(*v6, v8).u64[0];
  v8.i64[1] = vorrq_s8(*v6, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  int8x16_t v80 = v8;
  *(void *)&long long v81 = v7;
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdPrimRange *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v102, a2, &v80);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin(v9, (uint64_t)&v97);
  uint64_t v53 = a1 + 31;
  uint64_t v52 = a1 + 34;
  uint64_t v10 = (uint64_t)(a1 + 25);
  uint64_t v11 = (uint64_t)(a1 + 28);
  v12.i64[0] = -8193;
  int8x16_t v50 = v12;
  int8x16_t v48 = v12;
  int8x16_t v49 = (int8x16_t)vdupq_n_s64(0x2000uLL);
  while (1)
  {
    v80.i64[0] = v103;
    v80.i64[1] = (uint64_t)v102;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    DWORD2(v81) = 0;
    WORD6(v81) = 0;
    if (v97 == *(_OWORD *)&v80)
    {
      BOOL v13 = 1;
      if (v98 == (void)v81 && !v99 && !v100) {
        BOOL v13 = v101 != 0;
      }
    }
    else
    {
      BOOL v13 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v81);
    if (!v13) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v97, (uint64_t)&v92);
    unint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v91[0] = MEMORY[0x263F906A0] + 16;
    pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if (IsA)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v97);
      char v16 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v58 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(MEMORY[0x263F906A0] + 16);
      UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v16);
      uint64_t v18 = UsdPrimDefaultPredicate[1].i64[0];
      *(void *)&long long v19 = vandq_s8(*UsdPrimDefaultPredicate, v50).u64[0];
      *((void *)&v19 + 1) = vorrq_s8(*UsdPrimDefaultPredicate, v49).i64[1];
      long long v89 = v19;
      uint64_t v90 = v18;
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate();
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      int v21 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v20);
      uint64_t v22 = v21[1].i64[0];
      *(void *)&long long v23 = vandq_s8(*v21, v48).u64[0];
      *((void *)&v23 + 1) = vorrq_s8(*v21, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
      long long v87 = v23;
      uint64_t v88 = v22;
      pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings();
      unint64_t v25 = v54;
      uint64_t v24 = v55;
      for (i = v55; ; uint64_t v24 = i)
      {
        if (v25 == (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v24)
        {
          v80.i64[0] = (uint64_t)&v54;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
          MEMORY[0x2455CE7D0](&v58);
          goto LABEL_130;
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery(v80.i64, (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)(a1 + 23), v25);
        uint64_t v26 = *((void *)v25 + 3);
        if (v26)
        {
          uint64_t v27 = (uint64_t *)*((void *)v25 + 7);
          uint64_t v28 = (int *)&v27[50 * v26];
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim(v65.i64, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&v80);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65, &v62);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v27, &v79);
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v10, &v62, &v79);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v27, &v62);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65, &v79);
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v11, &v62, &v79);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            int v74 = *(_DWORD *)v27;
            uint64_t v29 = v27[1];
            uint64_t v75 = v29;
            if (v29) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 48), 1uLL, memory_order_relaxed);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v76, (_DWORD *)v27 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v77, (_DWORD *)v27 + 5);
            uint64_t v30 = v27[3];
            uint64_t v78 = v30;
            if ((v30 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v78 &= 0xFFFFFFFFFFFFFFF8;
            }
            int HasSkelAnimationSource = boundPrimHasSkelAnimationSource((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v74);
            if ((v78 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v76);
            if (v75) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v75);
            }
            if (HasSkelAnimationSource)
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65, &v62);
              std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v53, &v62, &v62);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v65, (uint64_t)&v62);
              char IsPseudoRoot = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v62);
              if ((BYTE8(v63) & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v63 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
              if (v62.i64[1]) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62.i64[1]);
              }
              if (IsPseudoRoot)
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65, &v62);
                std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v52, &v62, &v62);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v65, (uint64_t)&v62);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v62, &v73);
                std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v52, &v73, &v73);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
                if ((BYTE8(v63) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v63 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
                if (v62.i64[1]) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62.i64[1]);
                }
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
            if ((BYTE8(v66) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v66 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
            if (v65.i64[1]) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v65.i64[1]);
            }
            v27 += 50;
          }
          while (v27 != (uint64_t *)v28);
        }
        uint64_t v33 = *(atomic_uint **)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&v80);
        uint64_t v79 = v33;
        if (v33)
        {
          atomic_uint v34 = v33[2];
          if (v34 < 0)
          {
            if (v34 == -1
              || (atomic_uint v36 = v33[2],
                  atomic_compare_exchange_strong_explicit(v33 + 2, (unsigned int *)&v36, v34 - 1, memory_order_relaxed, memory_order_relaxed), v36 != v34))
            {
              pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
              if (!v79) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            atomic_fetch_add_explicit(v33 + 2, 1u, memory_order_relaxed);
          }
          if ((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::JointTransformsMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)&v79) & 1) != 0
            || pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::BlendShapeWeightsMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)&v79))
          {
            pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim(v65.i64, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&v80);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65, &v62);
            std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v53, &v62, &v62);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v65, (uint64_t)&v62);
            char v35 = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v62);
            if ((BYTE8(v63) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v63 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
            if (v62.i64[1]) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62.i64[1]);
            }
            if (v35)
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65, &v62);
              std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v52, &v62, &v62);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v65, (uint64_t)&v62);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v62, &v73);
              std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v52, &v73, &v73);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
              if ((BYTE8(v63) & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v63 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
              if (v62.i64[1]) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62.i64[1]);
              }
            }
            if ((BYTE8(v66) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v66 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
            if (v65.i64[1]) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v65.i64[1]);
            }
          }
        }
LABEL_54:
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr(&v79);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v82);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr((atomic_uint **)&v80.i64[1]);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr((atomic_uint **)&v80);
        unint64_t v25 = (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)((char *)v25 + 64);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(IsA);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    int v37 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if (v37)
    {
      MEMORY[0x2455CF810](&v65, "skel:skeleton");
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(v80.i64, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v92, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v65);
      if ((v65.i8[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v65.i64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v80))
      {
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets() && v59 != v58)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath(v65.i64, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v92, v58);
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65))
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65, &v62);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v92, &v54);
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v10, &v62, &v54);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v92, &v62);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65, &v54);
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v11, &v62, &v54);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            int v68 = v92;
            uint64_t v69 = v93;
            if (v93) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 48), 1uLL, memory_order_relaxed);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v70, &v94);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v71, &v95);
            uint64_t v72 = v96;
            if ((v96 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v72 &= 0xFFFFFFFFFFFFFFF8;
            }
            int v38 = boundPrimHasSkelAnimationSource((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v68);
            if ((v72 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v70);
            if (v69) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v69);
            }
            if (v38)
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65, &v62);
              std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v53, &v62, &v62);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v65, (uint64_t)&v62);
              char v39 = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v62);
              if ((BYTE8(v63) & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v63 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
              if (v62.i64[1]) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62.i64[1]);
              }
              if (v39)
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65, &v62);
                std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v52, &v62, &v62);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v65, (uint64_t)&v62);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v62, &v79);
                std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v52, &v79, &v79);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
                if ((BYTE8(v63) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v63 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
                if (v62.i64[1]) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62.i64[1]);
                }
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
          }
          if ((BYTE8(v66) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v66 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
          if (v65.i64[1]) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v65.i64[1]);
          }
        }
        v65.i64[0] = (uint64_t)&v58;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      }
      if ((BYTE8(v81) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v81 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v81);
      if (v80.i64[1]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v80.i64[1]);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(v37);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      int v40 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if (v40)
      {
        uint64_t v41 = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v40);
        uint64_t v43 = *v41;
        uint64_t v42 = v41[1];
        uint64_t v44 = v41[2];
        if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
          && ((v43 & 0x2000) != 0 || (v42 & 0x2000) == 0))
        {
          v43 |= 0x2000uLL;
          v42 &= ~0x2000uLL;
        }
        v65.i64[0] = v43;
        v65.i64[1] = v42;
        *(void *)&long long v66 = v44;
        pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v92, v65.i64, (uint64_t)&v80);
        v65.i64[0] = v80.i64[0];
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v65.i32[2], &v80.i32[2]);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v65.i32[3], &v80.i32[3]);
        long long v66 = v81;
        uint64_t v67 = v82[0];
        v62.i64[0] = v82[1];
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v62.i32[2], &v83);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v62.i32[3], &v84);
        long long v63 = v85;
        uint64_t v64 = v86;
        while (*(_OWORD *)&v65 != *(_OWORD *)&v62
             || (pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v66, (uint64_t)&v63) & 1) == 0)
        {
          uint64_t v45 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v65, (uint64_t)&v58);
          pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(v45);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v92, &v54);
            std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v53, &v54, &v54);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v92, (uint64_t)&v54);
            char v46 = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v54);
            if ((v57 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
            if (v55) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v55);
            }
            if (v46)
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v92, &v54);
              std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v52, &v54, &v54);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v92, (uint64_t)&v54);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v54, &v79);
              std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v52, &v79, &v79);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
              if ((v57 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
              if (v55) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v55);
              }
            }
            if ((v61 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
            if (v59) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v59);
            }
            break;
          }
          if ((v61 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
          if (v59) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v59);
          }
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v65);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62.i64[1]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v65.i64[1]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v80.i64[1]);
      }
    }
LABEL_130:
    MEMORY[0x2455CE7D0](v91);
    if ((v96 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94);
    if (v93) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v93);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v97);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v104);
}

void sub_23F78D518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x218]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a55);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a47);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a61);
  a55 = (void **)&a51;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a55);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&STACK[0x220]);
  MEMORY[0x2455CE7D0](v61 - 232);
  uint64_t v63 = *(void *)(v61 - 184);
  if ((v63 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a31);
  uint64_t v64 = *(void *)(v61 - 200);
  if (v64) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v64);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v61 - 128);
  _Unwind_Resume(a1);
}

uint64_t TgECS::buildECSTopologyInfo(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::concurrent_unordered_base((uint64_t)v151, 8uLL, v150);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::concurrent_unordered_base((uint64_t)v150, 8uLL, &v147);
  long long v152 = 0uLL;
  LOBYTE(v153) = 0;
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v152, 0);
  long long v144 = *(_OWORD *)v5;
  *(void *)&long long v145 = *(void *)(v5 + 16);
  long long v152 = v144;
  LOBYTE(v153) = v145;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v152, 1);
  long long v138 = *(_OWORD *)v6;
  *(void *)&long long v139 = *(void *)(v6 + 16);
  long long v152 = v138;
  LOBYTE(v153) = v139;
  uint64_t v7 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v152, 0x100000005);
  uint64_t v8 = v7[1].i64[0];
  v9.i64[0] = -8193;
  v9.i64[0] = vandq_s8(*v7, v9).u64[0];
  v9.i64[1] = vorrq_s8(*v7, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  int8x16_t v141 = v9;
  *(void *)&long long v142 = v8;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)&v147, a3, &v141);
  v149[36] = 1;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  int8x16_t v141 = 0u;
  long long v142 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  memset(v136, 0, sizeof(v136));
  long long v134 = 0u;
  long long v135 = 0u;
  long long v133 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v152, "/");
  MEMORY[0x2455CF7A0](&v127, &v152);
  std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(&v138, &v127);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
  if (SHIBYTE(v153) < 0) {
    operator delete((void *)v152);
  }
  std::string::basic_string[abi:ne180100]<0>(&v152, "/");
  MEMORY[0x2455CF7A0](&v127, &v152);
  std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(v136, &v127);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
  if (SHIBYTE(v153) < 0) {
    operator delete((void *)v152);
  }
  long long v102 = a1;
  LOBYTE(v152) = 0;
  std::deque<BOOL>::push_back(&v133, &v152);
  uint64_t v10 = (uint64_t **)(a2 + 304);
  uint64_t v103 = (uint64_t **)(a2 + 296);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a2 + 296, *(void **)(a2 + 304));
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 312) = 0;
  *(void *)(a2 + 296) = a2 + 304;
  uint64_t v11 = (uint64_t **)(a2 + 320);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a2 + 320, *(void **)(a2 + 328));
  *(void *)(a2 + 328) = 0;
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 320) = a2 + 328;
  if (!*(unsigned char *)(a2 + 104))
  {
    unint64_t v14 = (uint64_t **)(a2 + 320);
    unint64_t v15 = atomic_load(&realityio::tokens::StageTokens);
    if (!v15) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v16 = *(void *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      long long v17 = (char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0) {
        long long v17 = *(char **)v17;
      }
    }
    else
    {
      long long v17 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "/");
    MEMORY[0x2455CF7A0](&v117, &__p);
    __s = v17;
    LODWORD(v120) = v117;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
    HIDWORD(v120) = HIDWORD(v117);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
    int v21 = operator new(0x30uLL);
    *(void *)&long long v127 = v21;
    *((void *)&v127 + 1) = a2 + 304;
    LOBYTE(v128) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v152, __s);
    MEMORY[0x2455CF7A0](v21 + 7, &v152);
    if (SHIBYTE(v153) < 0) {
      operator delete((void *)v152);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v21 + 9, &v120);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v21 + 10, (_DWORD *)&v120 + 1);
    LOBYTE(v128) = 1;
    uint64_t v22 = *v10;
    if (*v10)
    {
      long long v23 = (void *)(v127 + 28);
      while (1)
      {
        while (1)
        {
          uint64_t v24 = (uint64_t **)v22;
          unint64_t v25 = (uint64_t *)((char *)v22 + 28);
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v23, (uint64_t *)((char *)v22 + 28))) {
            break;
          }
          uint64_t v22 = *v24;
          uint64_t v10 = v24;
          if (!*v24) {
            goto LABEL_29;
          }
        }
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v25, v23)) {
          break;
        }
        uint64_t v10 = v24 + 1;
        uint64_t v22 = v24[1];
        if (!v22) {
          goto LABEL_29;
        }
      }
      if (*v10) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v24 = (uint64_t **)(a2 + 304);
    }
LABEL_29:
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v103, (uint64_t)v24, v10, (uint64_t *)v127);
    *(void *)&long long v127 = 0;
LABEL_30:
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)&v127, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v120);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v117);
    if (SHIBYTE(v125) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "/");
    MEMORY[0x2455CF7A0](&v115, &__p);
    unint64_t v26 = atomic_load(&realityio::tokens::StageTokens);
    uint64_t v11 = (uint64_t **)(a2 + 320);
    if (!v26) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v27 = *(void *)(v26 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v27)
    {
      uint64_t v28 = (char *)(v27 + 16);
      if (*(char *)(v27 + 39) < 0) {
        uint64_t v28 = *(char **)v28;
      }
    }
    else
    {
      uint64_t v28 = "";
    }
    LODWORD(__s) = v115;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
    HIDWORD(__s) = HIDWORD(v115);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
    uint64_t v120 = v28;
    uint64_t v29 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v14, &v117, &__s);
    if (!*v29)
    {
      uint64_t v30 = operator new(0x30uLL);
      *(void *)&long long v127 = v30;
      *((void *)&v127 + 1) = a2 + 328;
      LOBYTE(v128) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v30 + 7, &__s);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v30 + 8, (_DWORD *)&__s + 1);
      std::string::basic_string[abi:ne180100]<0>(&v152, v120);
      MEMORY[0x2455CF7A0](v30 + 9, &v152);
      if (SHIBYTE(v153) < 0) {
        operator delete((void *)v152);
      }
      LOBYTE(v128) = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v14, v117, v29, (uint64_t *)v127);
      *(void *)&long long v127 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)&v127, 0);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__s);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
    if (SHIBYTE(v125) < 0) {
      operator delete(__p);
    }
    goto LABEL_43;
  }
  std::string::basic_string[abi:ne180100]<0>(&v152, "/");
  MEMORY[0x2455CF7A0](&v127, &v152);
  if (SHIBYTE(v153) < 0) {
    operator delete((void *)v152);
  }
  long long __p = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  int8x16_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::StageTokens);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*((void *)v12 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (*((void *)v12 + 1) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  }
  MEMORY[0x2455CF7A0](&__s, EmptyString);
  v132 = *(atomic_uint **)(a2 + 88);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v132);
  getDefaultPrimPathOrFirst(&v117, (uint64_t *)&v132);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v132);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(&v152, &__s, &__p);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(v103, &v152, &v152);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v18 = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(v18, &__p, &__s);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t **)(a2 + 320), &v152, &v152);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  long long v19 = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(v19, &v117, &v127);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(v103, &v152, &v152);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v20 = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(v20, &v127, &v117);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t **)(a2 + 320), &v152, &v152);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v117);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__s);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
LABEL_43:
  LOBYTE(v152) = 0;
  std::deque<BOOL>::push_back(&v144, &v152);
  LOBYTE(v152) = 1;
  std::deque<BOOL>::push_back(&v141, &v152);
  char v101 = v11;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&v147, (uint64_t)&v127);
  int v31 = &v153;
  int v32 = (char *)&v153 + 4;
  uint64_t v33 = (uint64_t **)(a2 + 272);
  atomic_uint v34 = (_DWORD *)&v152 + 1;
  uint64_t v35 = a2 + 344;
  uint64_t v104 = *(unsigned int (**)(char **))(MEMORY[0x263F90730] + 48);
  atomic_uint v36 = (uint64_t *)(a2 + 232);
  uint64_t v107 = (uint64_t **)(a2 + 232);
  while (1)
  {
    *(void *)&long long v152 = v148;
    *((void *)&v152 + 1) = &v147;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    LODWORD(v154) = 0;
    WORD2(v154) = 0;
    if (v127 == v152)
    {
      BOOL v37 = 1;
      if (v128 == v153 && !v129 && !v130) {
        BOOL v37 = v131 != 0;
      }
    }
    else
    {
      BOOL v37 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v31);
    if (!v37) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v127, (uint64_t)&__p);
    if (v131)
    {
      long long v38 = v135;
      --*((void *)&v135 + 1);
      uint64_t v39 = (((void)v134 - *((void *)&v133 + 1)) << 9) - 1;
      if ((void)v134 == *((void *)&v133 + 1)) {
        uint64_t v39 = 0;
      }
      if ((unint64_t)(v39 - (*((void *)&v38 + 1) + v38) - 0x1FFF) <= 0xFFFFFFFFFFFFDFFFLL)
      {
        operator delete(*(void **)(v134 - 8));
        *(void *)&long long v134 = v134 - 8;
      }
      std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::pop_back(&v138);
      std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::pop_back(v136);
      uint64_t v40 = *((void *)&v146 + 1) - 1;
      uint64_t v41 = v146;
      uint64_t v42 = *((void *)&v144 + 1);
      unint64_t v43 = *((void *)&v146 + 1) - 1 + v146;
      if (*(unsigned char *)(*(void *)(*((void *)&v144 + 1) + ((v43 >> 9) & 0x7FFFFFFFFFFFF8)) + (v43 & 0xFFF)))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v152);
        std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v33, &v152, &v152);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
        *(unsigned char *)pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::operator[](v35, (_DWORD *)(*(void *)(*((void *)&v136[0] + 1)+ (((unint64_t)(*((void *)&v137 + 1) + v137 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((void *)&v137 + 1) + v137 - 1) & 0x1FF))) = 1;
        uint64_t v41 = v146;
        uint64_t v42 = *((void *)&v144 + 1);
        uint64_t v40 = *((void *)&v146 + 1) - 1;
        unint64_t v43 = *((void *)&v146 + 1) - 1 + v146;
        char v44 = *(unsigned char *)(*(void *)(*((void *)&v144 + 1) + ((v43 >> 9) & 0x7FFFFFFFFFFFF8)) + (v43 & 0xFFF));
      }
      else
      {
        char v44 = 0;
      }
      uint64_t v52 = (((void)v145 - v42) << 9) - 1;
      *((void *)&v146 + 1) = v40;
      if ((void)v145 == v42) {
        uint64_t v52 = 0;
      }
      if (v52 - v43 >= 0x2000)
      {
        operator delete(*(void **)(v145 - 8));
        uint64_t v42 = *((void *)&v144 + 1);
        *(void *)&long long v145 = v145 - 8;
        uint64_t v40 = *((void *)&v146 + 1);
        uint64_t v41 = v146;
      }
      uint64_t v53 = v142;
      unint64_t v54 = v40 + v41 - 1;
      uint64_t v55 = *(void *)(v42 + ((v54 >> 9) & 0x7FFFFFFFFFFFF8));
      unint64_t v56 = v54 & 0xFFF;
      if ((void)v142 == v141.i64[1]) {
        uint64_t v57 = 0;
      }
      else {
        uint64_t v57 = (((void)v142 - v141.i64[1]) << 9) - 1;
      }
      *(unsigned char *)(v55 + v56) |= v44;
      uint64_t v58 = (*((void *)&v143 + 1))--;
      if ((unint64_t)(v57 - (v58 + v143) - 0x1FFF) <= 0xFFFFFFFFFFFFDFFFLL)
      {
        operator delete(*(void **)(v53 - 8));
        *(void *)&long long v142 = v142 - 8;
      }
    }
    else
    {
      LOBYTE(v152) = 0;
      std::deque<BOOL>::push_back(&v144, &v152);
      uint64_t v45 = v141.i64[1];
      uint64_t v46 = (((void)v142 - v141.i64[1]) << 9) - 1;
      uint64_t v47 = *((void *)&v143 + 1);
      unint64_t v48 = v143 + *((void *)&v143 + 1);
      if ((void)v142 == v141.i64[1]) {
        uint64_t v46 = 0;
      }
      __int16 v49 = v48 - 1;
      uint64_t v50 = *(void *)(v141.i64[1] + (((v48 - 1) >> 9) & 0x7FFFFFFFFFFFF8));
      if (v46 == v48)
      {
        std::deque<BOOL>::__add_back_capacity(&v141);
        uint64_t v47 = *((void *)&v143 + 1);
        uint64_t v45 = v141.i64[1];
        unint64_t v48 = v143 + *((void *)&v143 + 1);
      }
      *(unsigned char *)(*(void *)(v45 + ((v48 >> 9) & 0x7FFFFFFFFFFFF8)) + (v48 & 0xFFF)) = *(unsigned char *)(v50 + (v49 & 0xFFF));
      *((void *)&v143 + 1) = v47 + 1;
      MEMORY[0x2455CF810](&v117, "visibility");
      MEMORY[0x2455CF810](&v115, "inherited");
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v127, (uint64_t)&__s);
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__s, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v117, (uint64_t)&v152);
      if ((_BYTE)v152) {
        unint64_t v51 = *((void *)&v152 + 1);
      }
      else {
        unint64_t v51 = v115;
      }
      if ((v51 & 7) == 0
        || (unint64_t v106 = v51 & 0xFFFFFFFFFFFFFFF8,
            (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) != 0))
      {
        unint64_t v106 = v51;
      }
      if ((_BYTE)v152)
      {
        if ((BYTE8(v152) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v152 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else if (v155 < 0)
      {
        operator delete((void *)v154);
      }
      if ((v122 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v122 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v121);
      if (v120) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v120);
      }
      if ((v115 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v115 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v117 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v117 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v152, "invisible");
      if ((v152 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      char PrimEntityProvidingSetting = realityio::getPrimEntityProvidingSetting((realityio *)&__p, v59);
      LOBYTE(v152) = *(unsigned char *)(*(void *)(*((void *)&v133 + 1)
                                          + (((unint64_t)(*((void *)&v135 + 1) + v135 - 1) >> 9) & 0x7FFFFFFFFFFFF8))
                              + ((*((void *)&v135 + 1) + v135 - 1) & 0xFFF)) | PrimEntityProvidingSetting;
      std::deque<BOOL>::push_back(&v133, &v152);
      int v62 = *(unsigned __int8 *)(*(void *)(*((void *)&v133 + 1)
                                           + (((unint64_t)(*((void *)&v135 + 1) + v135 - 1) >> 9) & 0x7FFFFFFFFFFFF8))
                               + ((*((void *)&v135 + 1) + v135 - 1) & 0xFFF));
      uint64_t v63 = v124;
      if (!v124 || (uint64_t v64 = *((void *)v124 + 7), (v64 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v124, v61);
        uint64_t v64 = *((void *)v63 + 7);
      }
      unint64_t v65 = *((void *)&v143 + 1) + v143 - 1;
      unint64_t v66 = v65 >> 12;
      if ((v64 & 0x40) != 0)
      {
        int v67 = *(unsigned __int8 *)(*(void *)(v141.i64[1] + 8 * v66) + (v65 & 0xFFF));
      }
      else
      {
        int v67 = 0;
        *(unsigned char *)(*(void *)(v141.i64[1] + 8 * v66) + (v65 & 0xFFF)) = 0;
      }
      if (*(unsigned char *)(a2 + 104)
        || !realityio::isEntityProviding((realityio *)&__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(v62 != 0)))
      {
        goto LABEL_109;
      }
      char IsPseudoRoot = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p);
      char v70 = v67 ? IsPseudoRoot : 1;
      if (v70) {
        goto LABEL_109;
      }
      int v71 = v124;
      if (!v124 || (uint64_t v72 = *((void *)v124 + 7), (v72 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v124, v69);
        uint64_t v72 = *((void *)v71 + 7);
      }
      if ((v72 & 0x40) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v152);
        std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(&v138, &v152);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &__s);
        *(unsigned char *)pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::operator[](v35, &__s) = 0;
        std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(v136, &__s);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v117);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v152, &__s);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v34, (_DWORD *)&__s + 1);
        DWORD2(v152) = v117;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
        HIDWORD(v152) = HIDWORD(v117);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(v103, &v152, &v152);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v117);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v117);
        LODWORD(v152) = v117;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
        DWORD1(v152) = HIDWORD(v117);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v152 + 2, &__s);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v152 + 3, (_DWORD *)&__s + 1);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(v101, &v152, &v152);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v117);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__s);
      }
      else
      {
LABEL_109:
        std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(&v138, (_DWORD *)(*(void *)(*((void *)&v138 + 1)+ (((unint64_t)(*((void *)&v140 + 1) + v140 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((void *)&v140 + 1) + v140 - 1) & 0x1FF)));
        std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(v136, (_DWORD *)(*(void *)(*((void *)&v136[0] + 1)+ (((unint64_t)(*((void *)&v137 + 1) + v137 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((void *)&v137 + 1) + v137 - 1) & 0x1FF)));
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      __s = (char *)(MEMORY[0x263F90730] + 16);
      if (v120
        && (v120[57] & 8) == 0
        && v104(&__s)
        && pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&__s))
      {
        *(unsigned char *)(*(void *)(*((void *)&v144 + 1)
                             + (((unint64_t)(*((void *)&v146 + 1) + v146 - 1) >> 9) & 0x7FFFFFFFFFFFF8))
                 + ((*((void *)&v146 + 1) + v146 - 1) & 0xFFF)) = 1;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v152);
      uint64_t v73 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v33, &v152);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
      unint64_t v74 = *((void *)&v146 + 1) + v146 - 1;
      unint64_t v75 = v74 >> 12;
      if (v73)
      {
        char v76 = 1;
        *(unsigned char *)(*(void *)(*((void *)&v144 + 1) + 8 * v75) + (v74 & 0xFFF)) = 1;
      }
      else
      {
        char v76 = *(unsigned char *)(*(void *)(*((void *)&v144 + 1) + 8 * v75) + (v74 & 0xFFF));
      }
      *(unsigned char *)pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::operator[](v35, (_DWORD *)(*(void *)(*((void *)&v136[0] + 1)+ (((unint64_t)(*((void *)&v137 + 1) + v137 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((void *)&v137 + 1) + v137 - 1) & 0x1FF))) = v76;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v152);
      int v77 = (uint64_t *)*v36;
      uint64_t v78 = v36;
      if (!*v36) {
        goto LABEL_124;
      }
      do
      {
        int v79 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((uint64_t *)((char *)v77 + 28), &v152);
        int8x16_t v80 = (uint64_t **)(v77 + 1);
        if (!v79)
        {
          int8x16_t v80 = (uint64_t **)v77;
          atomic_uint v36 = v77;
        }
        int v77 = *v80;
      }
      while (*v80);
      uint64_t v78 = (uint64_t *)(a2 + 232);
      if (v36 == (uint64_t *)v107
        || (int v81 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v152, (uint64_t *)((char *)v36 + 28)),
            uint64_t v78 = (uint64_t *)(a2 + 232),
            v81))
      {
LABEL_124:
        atomic_uint v36 = v78;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
      if (v107 != (uint64_t **)v36)
      {
        uint64_t v82 = v32;
        int v83 = v31;
        uint64_t v84 = v35;
        long long v85 = v34;
        uint64_t v86 = v33;
        unint64_t v87 = *((void *)&v137 + 1) + v137 - 1;
        uint64_t v88 = *(void *)(*((void *)&v136[0] + 1) + ((v87 >> 6) & 0x3FFFFFFFFFFFFF8));
        long long v89 = operator new(0x30uLL);
        uint64_t v90 = (_DWORD *)(v88 + 8 * (v87 & 0x1FF));
        uint64_t v91 = (uint64_t **)(a2 + 232);
        *(void *)&long long v152 = v89;
        *((void *)&v152 + 1) = a2 + 232;
        int v92 = v89 + 7;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v89 + 7, v90);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v89 + 8, v90 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v89 + 9, (_DWORD *)v36 + 9);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v89 + 10, (_DWORD *)v36 + 10);
        LOBYTE(v153) = 1;
        uint64_t v93 = *v107;
        int v94 = (uint64_t **)(a2 + 232);
        uint64_t v33 = v86;
        atomic_uint v34 = v85;
        uint64_t v35 = v84;
        int v31 = v83;
        int v32 = v82;
        if (*v107)
        {
          do
          {
            while (1)
            {
              int v94 = (uint64_t **)v93;
              if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v92, (uint64_t *)((char *)v93 + 28)))break; {
              uint64_t v93 = *v94;
              }
              uint64_t v91 = v94;
              if (!*v94) {
                goto LABEL_132;
              }
            }
            uint64_t v93 = v94[1];
          }
          while (v93);
          uint64_t v91 = v94 + 1;
        }
LABEL_132:
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)(a2 + 224), (uint64_t)v94, v91, (uint64_t *)v152);
        *(void *)&long long v152 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)&v152, 0);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v117 = MEMORY[0x263F90720] + 16;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      atomic_uint v36 = (uint64_t *)(a2 + 232);
      uint64_t v115 = MEMORY[0x263F906E0] + 16;
      if (v118
        && (*(unsigned char *)(v118 + 57) & 8) == 0
        && ((*(uint64_t (**)(uint64_t *))(v117 + 32))(&v117) & 1) != 0
        || v116 && (*(unsigned char *)(v116 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v115 + 32))(&v115))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        unint64_t v154 = 0;
        *(void *)&long long v152 = MEMORY[0x263F907A0] + 16;
        if (!atomic_load(MEMORY[0x263F90550])) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
        MEMORY[0x2455CF4B0](&v152);
        if (v113 && (*(unsigned char *)(v113 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v112 + 32))(&v112))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, v109);
          uint64_t v96 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v152, &v113, &v114);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v96, v108);
          LODWORD(v110) = v109[0];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
          HIDWORD(v110) = v109[1];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
          v111[0] = v108[0];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
          v111[1] = v108[1];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t **)(a2 + 384), &v110, &v110);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v111);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v108);
          if ((v154 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v31);
          if (*((void *)&v152 + 1)) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v152 + 1));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v109);
        }
        MEMORY[0x2455CEF40](&v112);
      }
      MEMORY[0x2455CEAB0](&v115);
      MEMORY[0x2455CEEB0](&v117);
      MEMORY[0x2455CEF00](&__s);
      if ((v106 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v126 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v126 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v125);
    if (v124) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v124);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v127);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v128);
  unint64_t v97 = atomic_load(&realityio::tokens::EcsTokens);
  if (!v97) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  std::deque<BOOL>::~deque[abi:ne180100]((uint64_t)&v133);
  std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::~deque[abi:ne180100](v136);
  std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::~deque[abi:ne180100](&v138);
  std::deque<BOOL>::~deque[abi:ne180100]((uint64_t)&v141);
  std::deque<BOOL>::~deque[abi:ne180100]((uint64_t)&v144);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v149);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base((uint64_t)v150, v98);
  return tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base((uint64_t)v151, v99);
}

void sub_23F78EFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a42);
  if (a57 < 0) {
    operator delete(__p);
  }
  std::deque<BOOL>::~deque[abi:ne180100]((uint64_t)&a64);
  std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::~deque[abi:ne180100](&a70);
  std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::~deque[abi:ne180100](&STACK[0x200]);
  std::deque<BOOL>::~deque[abi:ne180100]((uint64_t)&STACK[0x230]);
  std::deque<BOOL>::~deque[abi:ne180100]((uint64_t)&STACK[0x260]);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&STACK[0x298]);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base((uint64_t)&STACK[0x2D0], v71);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base((uint64_t)&STACK[0x500], v72);
  _Unwind_Resume(a1);
}

void TgECS::ecsEntitySubTree(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t v464 = *MEMORY[0x263EF8340];
  unint64_t v6 = atomic_load(&realityio::tokens::EcsTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  v326 = a1;
  unint64_t v7 = atomic_load(&realityio::tokens::EcsTokens);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  int64x2_t v414 = 0uLL;
  v415 = 0;
  unint64_t v412 = 0;
  uint64_t v411 = 0;
  unint64_t v413 = 0;
  v409 = 0;
  uint64_t v408 = 0;
  unint64_t v410 = 0;
  v406 = 0;
  uint64_t v405 = 0;
  unint64_t v407 = 0;
  v403 = 0;
  uint64_t v402 = 0;
  unint64_t v404 = 0;
  memset(v447, 0, 17);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v447, 0);
  long long __p = *(_OWORD *)v8;
  *(void *)&long long v444 = *(void *)(v8 + 16);
  *(_OWORD *)v447 = __p;
  v447[16] = v444;
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v447, 1);
  int64x2_t v424 = *(int64x2_t *)v9;
  v425 = *(char **)(v9 + 16);
  *(int64x2_t *)v447 = v424;
  v447[16] = (_BYTE)v425;
  uint64_t v10 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v447, 0x100000005);
  uint64_t v11 = v10[1].i64[0];
  v12.i64[0] = -8193;
  v12.i64[0] = vandq_s8(*v10, v12).u64[0];
  v12.i64[1] = vorrq_s8(*v10, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  int8x16_t v453 = v12;
  *(void *)&long long v454 = v11;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v400, a3, &v453);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)v400, (uint64_t)v447);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v447);
  v328 = a4;
  long long __p = *(_OWORD *)v447;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v444, &v447[16]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v444 + 1, &v447[20]);
  DWORD2(v444) = *(_DWORD *)&v447[24];
  WORD6(v444) = *(_WORD *)&v447[28];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v447[16]);
  char v13 = 0;
  while (1)
  {
    *(void *)v447 = v401;
    *(void *)&v447[8] = v400;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(_DWORD *)&v447[24] = 0;
    *(_WORD *)&v447[28] = 0;
    if (__p == *(_OWORD *)v447)
    {
      BOOL v14 = 1;
      if ((void)v444 == *(void *)&v447[16] && !DWORD2(v444) && !BYTE12(v444)) {
        BOOL v14 = BYTE13(v444) != 0;
      }
    }
    else
    {
      BOOL v14 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v447[16]);
    if (!v14) {
      break;
    }
    unint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)v447);
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(v15);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    int IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((v447[24] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v447[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v447[16]);
    if (*(void *)&v447[8]) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v447[8]);
    }
    if (IsA)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&__p, (uint64_t)&v453);
      unint64_t v17 = v412;
      if (v412 >= v413)
      {
        uint64_t v19 = (uint64_t)(v412 - v411) >> 5;
        if ((unint64_t)(v19 + 1) >> 59) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = (uint64_t)(v413 - v411) >> 4;
        if (v20 <= v19 + 1) {
          unint64_t v20 = v19 + 1;
        }
        if (v413 - v411 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        v448[0] = &v413;
        if (v21) {
          uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)&v413, v21);
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v23 = (uint64_t)&v22[32 * v19];
        *(void *)v447 = v22;
        *(void *)&v447[8] = v23;
        *(void *)&v447[24] = &v22[32 * v21];
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput>((uint64_t)&v413, v23, (uint64_t)&v453);
        *(void *)&v447[16] = v23 + 32;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__swap_out_circular_buffer(&v411, v447);
        unint64_t v18 = v412;
        std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdPrim>::~__split_buffer((void **)v447);
      }
      else
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput>((uint64_t)&v413, v412, (uint64_t)&v453);
        unint64_t v18 = v17 + 32;
      }
      unint64_t v412 = v18;
      if ((BYTE8(v454) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v454 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v454);
      if (v453.i64[1]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v453.i64[1]);
      }
      char v13 = 1;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)v447);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v447, &v453);
    uint64_t v24 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(*(void **)(a2 + 328), &v453);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v453);
    if ((v447[24] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v447[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v447[16]);
    if (*(void *)&v447[8]) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v447[8]);
    }
    if (v24)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&__p, (uint64_t)v447);
      if (realityio::isScene((realityio *)v447, v25))
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v453);
        uint64_t v27 = v453.i64[1];
        if (!v453.i64[1] || (unint64_t v28 = *(void *)(v453.i64[1] + 56), (v28 & 0x800) != 0))
        {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v453.i64[1], v26);
          unint64_t v28 = *(void *)(v27 + 56);
        }
        if ((BYTE8(v454) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v454 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v454);
        if (v453.i64[1]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v453.i64[1]);
        }
        uint64_t v29 = (v28 >> 6) & 1;
      }
      else
      {
        LODWORD(v29) = 1;
      }
      if ((v447[24] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v447[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v447[16]);
      if (*(void *)&v447[8]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v447[8]);
      }
      if (v29)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&__p, (uint64_t)v447);
        unint64_t v30 = atomic_load(&realityio::tokens::EcsTokens);
        if (!v30) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
        }
        TgECS::genECSPath((TgECS *)&v453, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v447, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v30 + 152));
        int v31 = v409;
        if ((unint64_t)v409 >= v410)
        {
          int v32 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(&v408, &v453);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v409, &v453);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v31 + 1, &v453.i32[1]);
          int v32 = v31 + 2;
        }
        v409 = v32;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v453);
        if ((v447[24] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v447[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v447[16]);
        if (*(void *)&v447[8]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v447[8]);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&__p);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v444);
  v398 = 0;
  v397 = 0;
  unint64_t v399 = 0;
  memset(v447, 0, 17);
  uint64_t v33 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v447, 0);
  long long __p = *(_OWORD *)v33;
  *(void *)&long long v444 = *(void *)(v33 + 16);
  *(_OWORD *)v447 = __p;
  v447[16] = v444;
  uint64_t v34 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v447, 1);
  int64x2_t v424 = *(int64x2_t *)v34;
  v425 = *(char **)(v34 + 16);
  *(int64x2_t *)v447 = v424;
  v447[16] = (_BYTE)v425;
  uint64_t v35 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v447, 0x100000005);
  uint64_t v36 = v35[1].i64[0];
  v37.i64[0] = -8193;
  v37.i64[0] = vandq_s8(*v35, v37).u64[0];
  v37.i64[1] = vorrq_s8(*v35, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  int8x16_t v453 = v37;
  *(void *)&long long v454 = v36;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v395, a3, &v453);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)v395, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&__p);
  *(_OWORD *)v447 = __p;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v447[16], &v444);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v447[20], (_DWORD *)&v444 + 1);
  *(_DWORD *)&v447[24] = DWORD2(v444);
  *(_WORD *)&v447[28] = WORD6(v444);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v444);
  uint64_t v329 = a2 + 272;
  while (1)
  {
    *(void *)&long long __p = v396;
    *((void *)&__p + 1) = v395;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    DWORD2(v444) = 0;
    WORD6(v444) = 0;
    if (*(_OWORD *)v447 == __p)
    {
      BOOL v38 = 1;
      if (*(void *)&v447[16] == (void)v444 && !*(_DWORD *)&v447[24] && !v447[28]) {
        BOOL v38 = v447[29] != 0;
      }
    }
    else
    {
      BOOL v38 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v444);
    if (!v38) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)v447, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&__p);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v424);
    if (std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(*(void **)(a2 + 328), &v424))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)v447, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v453);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v453, &v457);
      BOOL v39 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(v329, &v457) != 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v457);
      if ((BYTE8(v454) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v454 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v454);
      if (v453.i64[1]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v453.i64[1]);
      }
    }
    else
    {
      BOOL v39 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v424);
    if ((BYTE8(v444) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v444 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v444);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
    if (v39)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v447, (uint64_t)&__p);
      unint64_t v40 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v40) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      TgECS::genECSPath((TgECS *)&v453, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v40 + 152));
      uint64_t v41 = v398;
      if ((unint64_t)v398 >= v399)
      {
        uint64_t v42 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v397, &v453);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v398, &v453);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v41 + 1, &v453.i32[1]);
        uint64_t v42 = v41 + 2;
      }
      v398 = v42;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v453);
      if ((BYTE8(v444) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v444 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v444);
      if (*((void *)&__p + 1)) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v447);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v447[16]);
  v393 = 0;
  uint64_t v392 = 0;
  unint64_t v394 = 0;
  if (!*(unsigned char *)(a2 + 104)
    || (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)a3) & 1) == 0)
  {
    __int32 v387 = *(_DWORD *)a3;
    uint64_t v43 = *(void *)(a3 + 8);
    uint64_t v388 = v43;
    if (v43) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v389, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v390, (_DWORD *)(a3 + 20));
    uint64_t v44 = *(void *)(a3 + 24);
    uint64_t v391 = v44;
    if ((v44 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v391 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v45 = atomic_load(&realityio::tokens::EcsTokens);
    if (!v45) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
    }
    TgECS::genECSPath((TgECS *)&v435, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v387, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v45 + 400));
    int64x2_t v424 = 0uLL;
    v425 = 0;
    v453.i32[0] = v387;
    v453.i64[1] = v388;
    if (v388) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v388 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v454, &v389);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v454 + 1, &v390);
    *((void *)&v454 + 1) = v391;
    if ((v391 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v391 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *((void *)&v454 + 1) &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((BYTE8(v454) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v454 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v454);
    if (v453.i64[1]) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v453.i64[1]);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v387)
      && !*(unsigned char *)(a2 + 104))
    {
      uint64_t v46 = (unint64_t *)MEMORY[0x263F90538];
      uint64_t v47 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90538]);
      if (!v47) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
      }
      if ((*((void *)v47 + 148) & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (*((void *)v47 + 148) & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v47);
      }
      if (*(char *)(EmptyString + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v447, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
      }
      else
      {
        long long v49 = *(_OWORD *)EmptyString;
        *(void *)&v447[16] = *(void *)(EmptyString + 16);
        *(_OWORD *)v447 = v49;
      }
      if ((v447[23] & 0x80000000) != 0) {
        operator delete(*(void **)v447);
      }
      *((void *)&__p + 1) = 0;
      long long v444 = 0uLL;
      unint64_t v50 = atomic_load(&realityio::tokens::ActionTokens);
      if (!v50) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
      }
      unint64_t v51 = *(void *)(v50 + 160) & 0xFFFFFFFFFFFFFFF8;
      if (v51)
      {
        uint64_t v52 = (char *)(v51 + 16);
        if (*(char *)(v51 + 39) < 0) {
          uint64_t v52 = *(char **)v52;
        }
      }
      else
      {
        uint64_t v52 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v457, v52);
      MEMORY[0x2455CF7A0](v445, &v457);
      uint64_t v53 = v424.i64[1];
      if (v424.i64[1] >= (unint64_t)v425)
      {
        unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((v424.i64[1] - v424.i64[0]) >> 3);
        if (v55 + 1 > 0x666666666666666) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v56 = 0x999999999999999ALL * ((uint64_t)&v425[-v424.i64[0]] >> 3);
        if (v56 <= v55 + 1) {
          unint64_t v56 = v55 + 1;
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v425[-v424.i64[0]] >> 3) >= 0x333333333333333) {
          unint64_t v57 = 0x666666666666666;
        }
        else {
          unint64_t v57 = v56;
        }
        v448[0] = &v425;
        if (v57)
        {
          if (v57 > 0x666666666666666) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v58 = (char *)operator new(40 * v57);
        }
        else
        {
          uint64_t v58 = 0;
        }
        uint64_t v59 = (uint64_t)&v58[40 * v55];
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v59, (uint64_t)&__p);
        uint64_t v60 = v424.i64[1];
        uint64_t v61 = v424.i64[0];
        if (v424.i64[1] == v424.i64[0])
        {
          int64x2_t v63 = vdupq_n_s64(v424.u64[1]);
          uint64_t v62 = v59;
        }
        else
        {
          uint64_t v62 = v59;
          do
          {
            v62 -= 40;
            v60 -= 40;
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v62, v60);
          }
          while (v60 != v61);
          int64x2_t v63 = v424;
        }
        uint64_t v54 = v59 + 40;
        v424.i64[0] = v62;
        v424.i64[1] = v54;
        *(int64x2_t *)&v447[8] = v63;
        uint64_t v64 = v425;
        v425 = &v58[40 * v57];
        *(void *)&v447[24] = v64;
        *(void *)v447 = v63.i64[0];
        std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v447);
        uint64_t v46 = (unint64_t *)MEMORY[0x263F90538];
      }
      else
      {
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v424.i64[1], (uint64_t)&__p);
        uint64_t v54 = v53 + 40;
      }
      v424.i64[1] = v54;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v445);
      *(void *)v447 = (char *)&__p + 8;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      if (SHIBYTE(v459) < 0) {
        operator delete(v457);
      }
      unint64_t v65 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v46);
      if (!v65) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
      }
      if ((*((void *)v65 + 70) & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v66 = (*((void *)v65 + 70) & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t v66 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v65);
      }
      if (*(char *)(v66 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v447, *(const std::string::value_type **)v66, *(void *)(v66 + 8));
      }
      else
      {
        long long v67 = *(_OWORD *)v66;
        *(void *)&v447[16] = *(void *)(v66 + 16);
        *(_OWORD *)v447 = v67;
      }
      if ((v447[23] & 0x80000000) != 0) {
        operator delete(*(void **)v447);
      }
      *((void *)&__p + 1) = 0;
      long long v444 = 0uLL;
      unint64_t v68 = atomic_load(&realityio::tokens::ActionTokens);
      if (!v68) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
      }
      unint64_t v69 = *(void *)(v68 + 160) & 0xFFFFFFFFFFFFFFF8;
      if (v69)
      {
        char v70 = (char *)(v69 + 16);
        if (*(char *)(v69 + 39) < 0) {
          char v70 = *(char **)v70;
        }
      }
      else
      {
        char v70 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v457, v70);
      MEMORY[0x2455CF7A0](v445, &v457);
      uint64_t v71 = v424.i64[1];
      if (v424.i64[1] >= (unint64_t)v425)
      {
        unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * ((v424.i64[1] - v424.i64[0]) >> 3);
        if (v73 + 1 > 0x666666666666666) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v74 = 0x999999999999999ALL * ((uint64_t)&v425[-v424.i64[0]] >> 3);
        if (v74 <= v73 + 1) {
          unint64_t v74 = v73 + 1;
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v425[-v424.i64[0]] >> 3) >= 0x333333333333333) {
          unint64_t v75 = 0x666666666666666;
        }
        else {
          unint64_t v75 = v74;
        }
        v448[0] = &v425;
        if (v75)
        {
          if (v75 > 0x666666666666666) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v76 = (char *)operator new(40 * v75);
        }
        else
        {
          char v76 = 0;
        }
        uint64_t v77 = (uint64_t)&v76[40 * v73];
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v77, (uint64_t)&__p);
        uint64_t v78 = v424.i64[1];
        uint64_t v79 = v424.i64[0];
        if (v424.i64[1] == v424.i64[0])
        {
          int64x2_t v81 = vdupq_n_s64(v424.u64[1]);
          uint64_t v80 = v77;
        }
        else
        {
          uint64_t v80 = v77;
          do
          {
            v80 -= 40;
            v78 -= 40;
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v80, v78);
          }
          while (v78 != v79);
          int64x2_t v81 = v424;
        }
        uint64_t v72 = v77 + 40;
        v424.i64[0] = v80;
        v424.i64[1] = v72;
        *(int64x2_t *)&v447[8] = v81;
        uint64_t v82 = v425;
        v425 = &v76[40 * v75];
        *(void *)&v447[24] = v82;
        *(void *)v447 = v81.i64[0];
        std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v447);
      }
      else
      {
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v424.i64[1], (uint64_t)&__p);
        uint64_t v72 = v71 + 40;
      }
      v424.i64[1] = v72;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v445);
      *(void *)v447 = (char *)&__p + 8;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      if (SHIBYTE(v459) < 0) {
        operator delete(v457);
      }
    }
    TgBase::emitTargets(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v424);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(v447, 0xCCCCCCCCCCCCCCCDLL * ((v424.i64[1] - v424.i64[0]) >> 3));
    uint64_t v84 = (_DWORD *)v424.i64[1];
    int v83 = (_DWORD *)v424.i64[0];
    if (v424.i64[0] != v424.i64[1])
    {
      uint64_t v85 = *(void *)v447;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v83);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, v83 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v85, (int *)&__p);
        uint64_t v86 = v85 + 4;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v86);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
        v83 += 10;
        uint64_t v85 = v86 + 4;
      }
      while (v83 != v84);
    }
    unint64_t v87 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v87) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v88 = *(void *)(v87 + 376) & 0xFFFFFFFFFFFFFFF8;
    if (v88)
    {
      long long v89 = (char *)(v88 + 16);
      if (*(char *)(v88 + 39) < 0) {
        long long v89 = *(char **)v89;
      }
    }
    else
    {
      long long v89 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v89);
    MEMORY[0x2455CF7A0](&v457, &__p);
    TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v435, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v447, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v457);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v457);
    if (SBYTE7(v444) < 0) {
      operator delete((void *)__p);
    }
    *(void *)&long long __p = v447;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    *(void *)v447 = &v424;
    std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
    if ((v391 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v391 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v389);
    if (v388) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v388);
    }
    uint64_t v90 = v393;
    if ((unint64_t)v393 >= v394)
    {
      uint64_t v91 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v392, &v435);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v393, &v435);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v90 + 1, (_DWORD *)&v435 + 1);
      uint64_t v91 = v90 + 2;
    }
    v393 = v91;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v435);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)v447, (pxrInternal__aapl__pxrReserved__::UsdObject *)a3);
  uint64_t v92 = *(void *)&v447[8];
  if (*(void *)&v447[8])
  {
    if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&v447[8])
                  + 14))
      uint64_t v92 = *(void *)v447;
    else {
      uint64_t v92 = 0;
    }
  }
  *(void *)&long long __p = v92;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&__p);
  unint64_t v93 = atomic_load(&realityio::tokens::TransformBuilderTokens);
  if (!v93) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  v453.i8[0] = 0;
  BOOL RealityKitStage = realityio::getRealityKitStageMetadata<BOOL>((uint64_t *)&__p, (void *)(v93 + 56), (pxrInternal__aapl__pxrReserved__::VtValue *)&v453);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&__p);
  uint64_t v95 = *(void *)&v447[8];
  if (*(void *)&v447[8]
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v447[8] + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
  }
  if (!RealityKitStage)
  {
    __int32 v381 = *(_DWORD *)a3;
    uint64_t v96 = *(void *)(a3 + 8);
    uint64_t v382 = v96;
    if (v96) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v96 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v383, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v384, (_DWORD *)(a3 + 20));
    uint64_t v97 = *(void *)(a3 + 24);
    uint64_t v385 = v97;
    if ((v97 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v385 &= 0xFFFFFFFFFFFFFFF8;
    }
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v381))
    {
      uint64_t v386 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    else
    {
      unint64_t v98 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v98) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      TgECS::genECSPath((TgECS *)&v439, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v381, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v98 + 8));
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)v447, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v439);
      MEMORY[0x2455CF810](&__p, "__anchoringInputs");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v446, (pxrInternal__aapl__pxrReserved__::SdfPath *)v447, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
      if ((__p & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
      unint64_t v99 = atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v99) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v435, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v381, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v99 + 64));
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v435))
      {
        int64x2_t v433 = 0uLL;
        v434 = 0;
        v431 = 0;
        v430 = 0;
        unint64_t v432 = 0;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v435, &__p);
        long long v444 = 0uLL;
        *((void *)&__p + 1) = 0;
        unint64_t v100 = atomic_load(&realityio::tokens::ActionTokens);
        if (v100)
        {
          unint64_t v101 = *(void *)(v100 + 160) & 0xFFFFFFFFFFFFFFF8;
          if (v101)
          {
            long long v102 = (char *)(v101 + 16);
            if (*(char *)(v101 + 39) < 0) {
              long long v102 = *(char **)v102;
            }
          }
          else
          {
            long long v102 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&v453, v102);
          MEMORY[0x2455CF7A0](v445, &v453);
          uint64_t v103 = v433.i64[1];
          if (v433.i64[1] >= (unint64_t)v434)
          {
            unint64_t v105 = 0xCCCCCCCCCCCCCCCDLL * ((v433.i64[1] - v433.i64[0]) >> 3);
            if (v105 + 1 > 0x666666666666666) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v106 = 0x999999999999999ALL * ((uint64_t)&v434[-v433.i64[0]] >> 3);
            if (v106 <= v105 + 1) {
              unint64_t v106 = v105 + 1;
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v434[-v433.i64[0]] >> 3) >= 0x333333333333333) {
              unint64_t v107 = 0x666666666666666;
            }
            else {
              unint64_t v107 = v106;
            }
            v448[0] = &v434;
            if (v107)
            {
              if (v107 > 0x666666666666666) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v108 = (char *)operator new(40 * v107);
            }
            else
            {
              uint64_t v108 = 0;
            }
            uint64_t v109 = (uint64_t)&v108[40 * v105];
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v109, (uint64_t)&__p);
            uint64_t v110 = v433.i64[1];
            uint64_t v111 = v433.i64[0];
            if (v433.i64[1] == v433.i64[0])
            {
              int64x2_t v113 = vdupq_n_s64(v433.u64[1]);
              uint64_t v112 = v109;
            }
            else
            {
              uint64_t v112 = v109;
              do
              {
                v112 -= 40;
                v110 -= 40;
                std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v112, v110);
              }
              while (v110 != v111);
              int64x2_t v113 = v433;
            }
            uint64_t v104 = v109 + 40;
            v433.i64[0] = v112;
            v433.i64[1] = v104;
            *(int64x2_t *)&v447[8] = v113;
            int v114 = v434;
            v434 = &v108[40 * v107];
            *(void *)&v447[24] = v114;
            *(void *)v447 = v113.i64[0];
            std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v447);
          }
          else
          {
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v433.i64[1], (uint64_t)&__p);
            uint64_t v104 = v103 + 40;
          }
          v433.i64[1] = v104;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v445);
          *(void *)v447 = (char *)&__p + 8;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          if (SBYTE7(v454) < 0) {
            operator delete((void *)v453.i64[0]);
          }
          unint64_t v115 = atomic_load(&realityio::tokens::TransformBuilderTokens);
          if (v115)
          {
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(v429, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v381, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v115 + 72));
            if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v429))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v429, &__p);
              long long v444 = 0uLL;
              *((void *)&__p + 1) = 0;
              unint64_t v116 = atomic_load(&realityio::tokens::ActionTokens);
              if (!v116) {
                pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
              }
              unint64_t v117 = *(void *)(v116 + 160) & 0xFFFFFFFFFFFFFFF8;
              if (v117)
              {
                uint64_t v118 = (char *)(v117 + 16);
                if (*(char *)(v117 + 39) < 0) {
                  uint64_t v118 = *(char **)v118;
                }
              }
              else
              {
                uint64_t v118 = "";
              }
              std::string::basic_string[abi:ne180100]<0>(&v453, v118);
              MEMORY[0x2455CF7A0](v445, &v453);
              uint64_t v119 = v433.i64[1];
              if (v433.i64[1] >= (unint64_t)v434)
              {
                unint64_t v121 = 0xCCCCCCCCCCCCCCCDLL * ((v433.i64[1] - v433.i64[0]) >> 3);
                if (v121 + 1 > 0x666666666666666) {
                  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v122 = 0x999999999999999ALL * ((uint64_t)&v434[-v433.i64[0]] >> 3);
                if (v122 <= v121 + 1) {
                  unint64_t v122 = v121 + 1;
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v434[-v433.i64[0]] >> 3) >= 0x333333333333333) {
                  unint64_t v123 = 0x666666666666666;
                }
                else {
                  unint64_t v123 = v122;
                }
                v448[0] = &v434;
                if (v123)
                {
                  if (v123 > 0x666666666666666) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  uint64_t v124 = (char *)operator new(40 * v123);
                }
                else
                {
                  uint64_t v124 = 0;
                }
                uint64_t v125 = (uint64_t)&v124[40 * v121];
                std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v125, (uint64_t)&__p);
                uint64_t v126 = v433.i64[1];
                uint64_t v127 = v433.i64[0];
                if (v433.i64[1] == v433.i64[0])
                {
                  int64x2_t v129 = vdupq_n_s64(v433.u64[1]);
                  uint64_t v128 = v125;
                }
                else
                {
                  uint64_t v128 = v125;
                  do
                  {
                    v128 -= 40;
                    v126 -= 40;
                    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v128, v126);
                  }
                  while (v126 != v127);
                  int64x2_t v129 = v433;
                }
                uint64_t v120 = v125 + 40;
                v433.i64[0] = v128;
                v433.i64[1] = v120;
                *(int64x2_t *)&v447[8] = v129;
                char v130 = v434;
                v434 = &v124[40 * v123];
                *(void *)&v447[24] = v130;
                *(void *)v447 = v129.i64[0];
                std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v447);
              }
              else
              {
                std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v433.i64[1], (uint64_t)&__p);
                uint64_t v120 = v119 + 40;
              }
              v433.i64[1] = v120;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v445);
              *(void *)v447 = (char *)&__p + 8;
              std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
              if (SBYTE7(v454) < 0) {
                operator delete((void *)v453.i64[0]);
              }
            }
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v427 = (void **)(MEMORY[0x263F90730] + 16);
            pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&__p, 1.0);
            if (v428 && (*(unsigned char *)(v428 + 57) & 8) == 0 && ((unsigned int (*)(void ***))v427[4])(&v427))
            {
              MEMORY[0x2455CEEE0](v447, &v427);
              pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation();
              v453.i64[0] = (uint64_t)v447;
              std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100]((void ***)&v453);
            }
            MEMORY[0x2455CE5D0](&v424, &__p);
            int v423 = 0;
            uint64_t v422 = 0;
            int v420 = 0;
            uint64_t v419 = 0;
            REDecomposeMatrix();
            pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)v447, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v381);
            pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
            uint64_t v131 = *(void *)&v447[8];
            if (*(void *)&v447[8]
              && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v447[8] + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v131 + 8))(v131);
            }
            pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)&v457);
            long long v455 = 0u;
            long long v456 = 0u;
            int8x16_t v453 = 0u;
            long long v454 = 0u;
            pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform();
            MEMORY[0x2455CE5D0](&v453, v447);
            *(_DWORD *)&v447[8] = 0;
            *(void *)v447 = 0;
            int v442 = 0;
            uint64_t v441 = 0;
            REDecomposeMatrix();
            std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::~__hash_table((uint64_t)&v457);
            unint64_t v132 = atomic_load(&realityio::tokens::EcsTokens);
            if (v132)
            {
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v460, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v446, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v132 + 16));
              unint64_t v133 = atomic_load(&realityio::tokens::EcsTokens);
              if (v133)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v441, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v446, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v133 + 24));
                unint64_t v134 = atomic_load(&realityio::tokens::EcsTokens);
                if (v134)
                {
                  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v418, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v446, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v134 + 32));
                  unint64_t v135 = atomic_load(&realityio::tokens::EcsTokens);
                  if (v135)
                  {
                    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v417, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v446, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v135 + 40));
                    uint64_t v136 = v431;
                    if ((unint64_t)v431 >= v432)
                    {
                      long long v137 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v430, &v460);
                    }
                    else
                    {
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v431, &v460);
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v136 + 1, (_DWORD *)&v460 + 1);
                      long long v137 = v136 + 8;
                    }
                    v431 = v137;
                    *(void *)&v447[8] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
                                        + 2;
                    operator new();
                  }
                  pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
                }
                pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
              }
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
            }
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
          }
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
      }
      uint64_t v386 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      if ((v438 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v438 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
      if (v436) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v436);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v446);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v439);
    }
    if ((v385 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v385 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v383);
    if (v382) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v382);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      long long v138 = v393;
      if ((unint64_t)v393 >= v394)
      {
        long long v139 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v392, &v386);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v393, &v386);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v138 + 1, (_DWORD *)&v386 + 1);
        long long v139 = v138 + 2;
      }
      v393 = v139;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v386);
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)a3) & 1) == 0)
  {
    __int32 v376 = *(_DWORD *)a3;
    uint64_t v140 = *(void *)(a3 + 8);
    uint64_t v377 = v140;
    if (v140) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v140 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v378, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v379, (_DWORD *)(a3 + 20));
    uint64_t v141 = *(void *)(a3 + 24);
    uint64_t v380 = v141;
    if ((v141 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v380 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v142 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v453.i64[0] = MEMORY[0x263F90728] + 16;
    if (!v453.i64[1]
      || (*(unsigned char *)(v453.i64[1] + 57) & 8) != 0
      || !(*(unsigned int (**)(uint64_t))(MEMORY[0x263F90728] + 48))(v142))
    {
      goto LABEL_316;
    }
    *(void *)&long long __p = 0x7FF8000000000000;
    pxrInternal__aapl__pxrReserved__::UsdGeomImageable::ComputeVisibility((uint64_t *)v447, (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&v453, (const pxrInternal__aapl__pxrReserved__::UsdTimeCode *)&__p);
    MEMORY[0x2455CF810](&v424, "invisible");
    uint64_t v143 = *(void *)v447;
    long long v144 = (atomic_uint *)(v424.i64[0] & 0xFFFFFFFFFFFFFFF8);
    if ((v424.i8[0] & 7) != 0) {
      atomic_fetch_add_explicit(v144, 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v145 = v143 & 0xFFFFFFFFFFFFFFF8;
    if ((v447[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v447 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)v145 == v144)
    {
      unint64_t v181 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v181) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      TgECS::genECSPath((TgECS *)&v433, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v376, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v181 + 328));
      int64x2_t v424 = 0uLL;
      v425 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v376, &v435);
      MEMORY[0x2455CF810](v429, "visibility");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v435, (const pxrInternal__aapl__pxrReserved__::TfToken *)v429);
      long long v444 = 0uLL;
      *((void *)&__p + 1) = 0;
      unint64_t v182 = atomic_load(&realityio::tokens::ActionTokens);
      if (!v182) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
      }
      unint64_t v183 = *(void *)(v182 + 160) & 0xFFFFFFFFFFFFFFF8;
      if (v183)
      {
        uint64_t v184 = (char *)(v183 + 16);
        if (*(char *)(v183 + 39) < 0) {
          uint64_t v184 = *(char **)v184;
        }
      }
      else
      {
        uint64_t v184 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v457, v184);
      MEMORY[0x2455CF7A0](v445, &v457);
      uint64_t v185 = v424.i64[1];
      if (v424.i64[1] >= (unint64_t)v425)
      {
        unint64_t v187 = 0xCCCCCCCCCCCCCCCDLL * ((v424.i64[1] - v424.i64[0]) >> 3);
        if (v187 + 1 > 0x666666666666666) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v188 = 0x999999999999999ALL * ((uint64_t)&v425[-v424.i64[0]] >> 3);
        if (v188 <= v187 + 1) {
          unint64_t v188 = v187 + 1;
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v425[-v424.i64[0]] >> 3) >= 0x333333333333333) {
          unint64_t v189 = 0x666666666666666;
        }
        else {
          unint64_t v189 = v188;
        }
        v448[0] = &v425;
        if (v189)
        {
          if (v189 > 0x666666666666666) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v190 = (char *)operator new(40 * v189);
        }
        else
        {
          uint64_t v190 = 0;
        }
        uint64_t v194 = (uint64_t)&v190[40 * v187];
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v194, (uint64_t)&__p);
        uint64_t v195 = v424.i64[1];
        uint64_t v196 = v424.i64[0];
        if (v424.i64[1] == v424.i64[0])
        {
          int64x2_t v198 = vdupq_n_s64(v424.u64[1]);
          uint64_t v197 = v194;
        }
        else
        {
          uint64_t v197 = v194;
          do
          {
            v197 -= 40;
            v195 -= 40;
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v197, v195);
          }
          while (v195 != v196);
          int64x2_t v198 = v424;
        }
        uint64_t v186 = v194 + 40;
        v424.i64[0] = v197;
        v424.i64[1] = v186;
        *(int64x2_t *)&v447[8] = v198;
        uint64_t v199 = v425;
        v425 = &v190[40 * v189];
        *(void *)&v447[24] = v199;
        *(void *)v447 = v198.i64[0];
        std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v447);
      }
      else
      {
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v424.i64[1], (uint64_t)&__p);
        uint64_t v186 = v185 + 40;
      }
      v424.i64[1] = v186;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v445);
      *(void *)v447 = (char *)&__p + 8;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      if (SHIBYTE(v459) < 0) {
        operator delete(v457);
      }
      if ((v429[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v429[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v435);
      TgBase::emitTargets(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v424);
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(v447, 0xCCCCCCCCCCCCCCCDLL * ((v424.i64[1] - v424.i64[0]) >> 3));
      v201 = (_DWORD *)v424.i64[1];
      unint64_t v200 = (_DWORD *)v424.i64[0];
      if (v424.i64[0] != v424.i64[1])
      {
        uint64_t v202 = *(void *)v447;
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v200);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, v200 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v202, (int *)&__p);
          uint64_t v203 = v202 + 4;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v203);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          v200 += 10;
          uint64_t v202 = v203 + 4;
        }
        while (v200 != v201);
      }
      unint64_t v204 = atomic_load(&realityio::tokens::ActionTokens);
      if (!v204) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
      }
      unint64_t v205 = *(void *)(v204 + 256) & 0xFFFFFFFFFFFFFFF8;
      if (v205)
      {
        uint64_t v206 = (char *)(v205 + 16);
        if (*(char *)(v205 + 39) < 0) {
          uint64_t v206 = *(char **)v206;
        }
      }
      else
      {
        uint64_t v206 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v206);
      MEMORY[0x2455CF7A0](&v457, &__p);
      TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v433, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v447, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v457);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v457);
      if (SBYTE7(v444) < 0) {
        operator delete((void *)__p);
      }
      *(void *)&long long __p = v447;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      *(void *)v447 = &v424;
      std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
    }
    else
    {
LABEL_316:
      v433.i64[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    MEMORY[0x2455CEED0](&v453);
    if ((v380 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v380 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v378);
    if (v377) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v377);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      long long v146 = v393;
      if ((unint64_t)v393 >= v394)
      {
        __int16 v147 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v392, &v433);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v393, &v433);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v146 + 1, &v433.i32[1]);
        __int16 v147 = v146 + 2;
      }
      v393 = v147;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v433);
  }
  memset(v429, 0, sizeof(v429));
  int64x2_t v433 = 0uLL;
  v434 = 0;
  if (v13)
  {
    int v371 = *(_DWORD *)a3;
    uint64_t v148 = *(void *)(a3 + 8);
    uint64_t v372 = v148;
    if (v148) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v148 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v373, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v374, (_DWORD *)(a3 + 20));
    uint64_t v149 = *(void *)(a3 + 24);
    uint64_t v375 = v149;
    if ((v149 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v375 &= 0xFFFFFFFFFFFFFFF8;
    }
    TgECS::gatherBoundMeshes((TgECS *)v447, (Exec **)a2, &v371, (uint64_t)v326, &v392, v433.i64, &v411, v429);
    if ((v375 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v375 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v373);
    if (v372) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v372);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      uint64_t v150 = v403;
      if ((unint64_t)v403 >= v404)
      {
        uint64_t v151 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v402, v447);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v403, v447);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v150 + 1, &v447[4]);
        uint64_t v151 = v150 + 2;
      }
      v403 = v151;
    }
    v173 = v397;
    for (uint64_t i = v398; v173 != i; v173 += 2)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v173);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, v173 + 1);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v424.i64, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      unint64_t v175 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v175) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      uint64_t v176 = v433.i64[1];
      if (v433.i64[1] >= (unint64_t)v434)
      {
        uint64_t v177 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(v433.i64, &v453);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v433.i64[1], &v453);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v176 + 4), &v453.i32[1]);
        uint64_t v177 = v176 + 8;
      }
      v433.i64[1] = v177;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v453);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v424);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v424.i64, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      unint64_t v178 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v178) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      uint64_t v179 = v433.i64[1];
      if (v433.i64[1] >= (unint64_t)v434)
      {
        uint64_t v180 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(v433.i64, &v453);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v433.i64[1], &v453);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v179 + 4), &v453.i32[1]);
        uint64_t v180 = v179 + 8;
      }
      v433.i64[1] = v180;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v453);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v424);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
  }
  else
  {
    long long __p = 0uLL;
    *(void *)&long long v444 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, v447);
    long long v152 = (pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(v329, v447);
    if (v152)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(v152);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      char v153 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
      if ((v153 & 1) == 0)
      {
        unint64_t v154 = v397;
        for (j = v398; v154 != j; v154 += 2)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v447, v154);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v447[4], v154 + 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v424.i64, (pxrInternal__aapl__pxrReserved__::SdfPath *)v447);
          unint64_t v156 = atomic_load(&realityio::tokens::EcsTokens);
          if (!v156) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
          }
          uint64_t v157 = v433.i64[1];
          if (v433.i64[1] >= (unint64_t)v434)
          {
            uint64_t v158 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(v433.i64, &v453);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v433.i64[1], &v453);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v157 + 4), &v453.i32[1]);
            uint64_t v158 = v157 + 8;
          }
          v433.i64[1] = v158;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v453);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v424);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v424.i64, (pxrInternal__aapl__pxrReserved__::SdfPath *)v447);
          unint64_t v159 = atomic_load(&realityio::tokens::EcsTokens);
          if (!v159) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
          }
          uint64_t v160 = v433.i64[1];
          if (v433.i64[1] >= (unint64_t)v434)
          {
            uint64_t v161 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(v433.i64, &v453);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v433.i64[1], &v453);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v160 + 4), &v453.i32[1]);
            uint64_t v161 = v160 + 8;
          }
          v433.i64[1] = v161;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v453);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v424);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
        }
        uint64_t v162 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v453.i64[0] = MEMORY[0x263F90730] + 16;
        if (v453.i64[1]
          && (*(unsigned char *)(v453.i64[1] + 57) & 8) == 0
          && (*(unsigned int (**)(uint64_t))(MEMORY[0x263F90730] + 48))(v162)
          && pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v453))
        {
          int64x2_t v424 = 0uLL;
          v425 = 0;
          __int32 v366 = *(_DWORD *)a3;
          uint64_t v163 = *(void *)(a3 + 8);
          uint64_t v367 = v163;
          if (v163) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v163 + 48), 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v368, (_DWORD *)(a3 + 16));
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v369, (_DWORD *)(a3 + 20));
          uint64_t v164 = *(void *)(a3 + 24);
          uint64_t v370 = v164;
          if ((v164 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v164 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v370 &= 0xFFFFFFFFFFFFFFF8;
          }
          if ((v370 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v370 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v368);
          if (v367) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v367);
          }
          TgBase::emitTargets(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v424);
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&v457, 0xCCCCCCCCCCCCCCCDLL * ((v424.i64[1] - v424.i64[0]) >> 3));
          v166 = (_DWORD *)v424.i64[1];
          int v165 = (_DWORD *)v424.i64[0];
          if (v424.i64[0] != v424.i64[1])
          {
            uint64_t v167 = (uint64_t)v457;
            do
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v447, v165);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v447[4], v165 + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v167, (int *)v447);
              uint64_t v168 = v167 + 4;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v168);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
              v165 += 10;
              uint64_t v167 = v168 + 4;
            }
            while (v165 != v166);
          }
          PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3);
          unint64_t v170 = atomic_load(&realityio::tokens::EcsTokens);
          if (!v170) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
          }
          uint64_t v171 = v433.i64[1];
          if (v433.i64[1] >= (unint64_t)v434)
          {
            uint64_t v172 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v433.i64, &v427);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v433.i64[1], &v427);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v171 + 4), (_DWORD *)&v427 + 1);
            uint64_t v172 = v171 + 8;
          }
          v433.i64[1] = v172;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v447, &v427);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v447[4], (_DWORD *)&v427 + 1);
          memset(&v447[8], 0, 24);
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(&v447[8], v457, v458, (v458 - v457) >> 3);
          unint64_t v191 = atomic_load(&realityio::tokens::ActionTokens);
          if (!v191) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
          }
          unint64_t v192 = *(void *)(v191 + 368) & 0xFFFFFFFFFFFFFFF8;
          if (v192)
          {
            uint64_t v193 = (char *)(v192 + 16);
            if (*(char *)(v192 + 39) < 0) {
              uint64_t v193 = *(char **)v193;
            }
          }
          else
          {
            uint64_t v193 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&v435, v193);
          MEMORY[0x2455CF7A0](v448, &v435);
          uint64_t v207 = v414.i64[1];
          if (v414.i64[1] >= (unint64_t)v415)
          {
            uint64_t v208 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(v414.i64, (uint64_t)v447);
          }
          else
          {
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v414.i64[1], (uint64_t)v447);
            uint64_t v208 = v207 + 40;
          }
          v414.i64[1] = v208;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v448);
          v430 = &v447[8];
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v430);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
          if (SHIBYTE(v437) < 0) {
            operator delete(v435);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v427);
          *(void *)v447 = &v457;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
          *(void *)v447 = &v424;
          std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
        }
        MEMORY[0x2455CEF00](&v453);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
    }
    *(void *)v447 = &__p;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, v447);
  uint64_t v209 = (void *)(a2 + 232);
  for (k = *(void **)(a2 + 232); k; k = (void *)*k)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v447, (void *)((char *)k + 28)))
    {
      uint64_t v209 = k;
    }
    else
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)((char *)k + 28), v447))
      {
        long long v212 = (void *)*k;
        v213 = k;
        if (*k)
        {
          v213 = k;
          do
          {
            int v214 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)((char *)v212 + 28), v447);
            v215 = v212 + 1;
            if (!v214)
            {
              v215 = v212;
              v213 = v212;
            }
            long long v212 = (void *)*v215;
          }
          while (*v215);
        }
        uint64_t v216 = (void *)k[1];
        if (v216)
        {
          do
          {
            int v217 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v447, (void *)((char *)v216 + 28));
            unint64_t v218 = v216 + 1;
            if (v217)
            {
              unint64_t v218 = v216;
              uint64_t v209 = v216;
            }
            uint64_t v216 = (void *)*v218;
          }
          while (*v218);
        }
        BOOL v211 = v213 == v209;
LABEL_461:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v219 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
        if (v211)
        {
          LOBYTE(v418) = 0;
          __int32 v361 = *(_DWORD *)a3;
          uint64_t v220 = *(void *)(a3 + 8);
          uint64_t v362 = v220;
          if (v220) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v220 + 48), 1uLL, memory_order_relaxed);
          }
          v221 = (_DWORD *)(a3 + 16);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v363, (_DWORD *)(a3 + 16));
          long long v222 = (_DWORD *)(a3 + 20);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v364, (_DWORD *)(a3 + 20));
          uint64_t v223 = *(void *)(a3 + 24);
          uint64_t v365 = v223;
          if ((v223 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v223 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v365 &= 0xFFFFFFFFFFFFFFF8;
          }
          TgECS::meshesUnderAndIncluding(v453.i64, a2, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v361, &v418);
          if ((v365 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v365 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v363);
          if (v362) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v362);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          LOBYTE(v417) = 0;
          LODWORD(v356) = *(_DWORD *)a3;
          uint64_t v224 = *(void *)(a3 + 8);
          uint64_t v357 = v224;
          if (v224) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v224 + 48), 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v358, v221);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v359, v222);
          uint64_t v225 = *(void *)(a3 + 24);
          uint64_t v360 = v225;
          if ((v225 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v225 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v360 &= 0xFFFFFFFFFFFFFFF8;
          }
          *(_OWORD *)&v447[8] = 0uLL;
          *(void *)v447 = &v447[8];
          TgECS::ecsMeshes((TgECS *)&v441, (Exec **)a2, &v356, (uint64_t)v326, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v453, (uint64_t)v447, &v427, v429, (uint64_t)&v460, &v417);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)v447, *(void **)&v447[8]);
          if ((v360 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v360 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v358);
          if (v357) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v357);
          }
          if ((_BYTE)v417)
          {
            unint64_t v226 = atomic_load(&realityio::tokens::EcsTokens);
            if (!v226) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
            }
            uint64_t v227 = *(void *)(v226 + 408);
            uint64_t v422 = v227;
            if ((v227 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v227 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v422 &= 0xFFFFFFFFFFFFFFF8;
            }
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)v447, v328, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v422);
            unint64_t v228 = atomic_load(&realityio::tokens::EcsTokens);
            if (!v228) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)v447, v328, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v422);
            unint64_t v229 = atomic_load(&realityio::tokens::EcsTokens);
            if (!v229) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)v447, v328, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v422);
            unint64_t v230 = atomic_load(&realityio::tokens::EcsTokens);
            if (!v230) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
            v231 = v409;
            if ((unint64_t)v409 >= v410)
            {
              v232 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v408, &v419);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v409, &v419);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v231 + 1, (_DWORD *)&v419 + 1);
              v232 = v231 + 2;
            }
            v409 = v232;
            int64x2_t v424 = 0uLL;
            v425 = 0;
            v457 = 0;
            v458 = 0;
            unint64_t v459 = 0;
            v436 = 0;
            v435 = 0;
            v437 = 0;
            v458 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v457, v421);
            if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
            {
              v233 = v458;
              if ((unint64_t)v458 >= v459)
              {
                v234 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v457, &v441);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v458, &v441);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v233 + 1, (_DWORD *)&v441 + 1);
                v234 = v233 + 8;
              }
              v458 = v234;
            }
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&__p, v328);
            *(void *)&v447[8] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
                                + 1;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v447, &__p);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v447[4], (_DWORD *)&__p + 1);
            TgBase::emitConstant((Exec **)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v439, (const pxrInternal__aapl__pxrReserved__::VtValue *)v447);
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v447);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v421);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, (_DWORD *)v421 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v446, &v439);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v446 + 1, &v440);
            long long v444 = 0uLL;
            *((void *)&__p + 1) = 0;
            *(void *)v447 = (char *)&__p + 8;
            v447[8] = 0;
            *((void *)&__p + 1) = operator new(8uLL);
            *(void *)&long long v444 = *((void *)&__p + 1);
            *((void *)&v444 + 1) = *((void *)&__p + 1) + 8;
            *(void *)&long long v444 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v444 + 8, &v446, v447, *((_DWORD **)&__p + 1));
            unint64_t v235 = atomic_load(&realityio::tokens::ActionTokens);
            if (!v235) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
            }
            unint64_t v236 = *(void *)(v235 + 144) & 0xFFFFFFFFFFFFFFF8;
            if (v236)
            {
              v237 = (char *)(v236 + 16);
              if (*(char *)(v236 + 39) < 0) {
                v237 = *(char **)v237;
              }
            }
            else
            {
              v237 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(&v430, v237);
            MEMORY[0x2455CF7A0](v445, &v430);
            uint64_t v238 = v414.i64[1];
            if (v414.i64[1] >= (unint64_t)v415)
            {
              unint64_t v240 = 0xCCCCCCCCCCCCCCCDLL * ((v414.i64[1] - v414.i64[0]) >> 3);
              if (v240 + 1 > 0x666666666666666) {
                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v241 = 0x999999999999999ALL * ((uint64_t)&v415[-v414.i64[0]] >> 3);
              if (v241 <= v240 + 1) {
                unint64_t v241 = v240 + 1;
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v415[-v414.i64[0]] >> 3) >= 0x333333333333333) {
                unint64_t v242 = 0x666666666666666;
              }
              else {
                unint64_t v242 = v241;
              }
              v448[0] = &v415;
              if (v242)
              {
                if (v242 > 0x666666666666666) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v243 = (char *)operator new(40 * v242);
              }
              else
              {
                v243 = 0;
              }
              uint64_t v244 = (uint64_t)&v243[40 * v240];
              std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v244, (uint64_t)&__p);
              uint64_t v245 = v414.i64[1];
              uint64_t v246 = v414.i64[0];
              if (v414.i64[1] == v414.i64[0])
              {
                int64x2_t v248 = vdupq_n_s64(v414.u64[1]);
                uint64_t v247 = (uint64_t)&v243[40 * v240];
              }
              else
              {
                uint64_t v247 = (uint64_t)&v243[40 * v240];
                do
                {
                  v247 -= 40;
                  v245 -= 40;
                  std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v247, v245);
                }
                while (v245 != v246);
                int64x2_t v248 = v414;
              }
              uint64_t v239 = v244 + 40;
              v414.i64[0] = v247;
              v414.i64[1] = v244 + 40;
              *(int64x2_t *)&v447[8] = v248;
              v249 = v415;
              v415 = &v243[40 * v242];
              *(void *)&v447[24] = v249;
              *(void *)v447 = v248.i64[0];
              std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v447);
              v221 = (_DWORD *)(a3 + 16);
            }
            else
            {
              std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v414.i64[1], (uint64_t)&__p);
              uint64_t v239 = v238 + 40;
            }
            v414.i64[1] = v239;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v445);
            *(void *)v447 = (char *)&__p + 8;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
            if (SHIBYTE(v432) < 0) {
              operator delete(v430);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v446);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, &v419);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, (_DWORD *)&v419 + 1);
            long long v444 = 0uLL;
            *((void *)&__p + 1) = 0;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((void *)&__p + 1, v457, v458, (v458 - v457) >> 3);
            unint64_t v250 = atomic_load(&realityio::tokens::ActionTokens);
            if (!v250) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
            }
            unint64_t v251 = *(void *)(v250 + 152) & 0xFFFFFFFFFFFFFFF8;
            if (v251)
            {
              v252 = (char *)(v251 + 16);
              if (*(char *)(v251 + 39) < 0) {
                v252 = *(char **)v252;
              }
            }
            else
            {
              v252 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(&v430, v252);
            MEMORY[0x2455CF7A0](v445, &v430);
            uint64_t v253 = v414.i64[1];
            if (v414.i64[1] >= (unint64_t)v415)
            {
              unint64_t v255 = 0xCCCCCCCCCCCCCCCDLL * ((v414.i64[1] - v414.i64[0]) >> 3);
              if (v255 + 1 > 0x666666666666666) {
                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v256 = 0x999999999999999ALL * ((uint64_t)&v415[-v414.i64[0]] >> 3);
              if (v256 <= v255 + 1) {
                unint64_t v256 = v255 + 1;
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v415[-v414.i64[0]] >> 3) >= 0x333333333333333) {
                unint64_t v257 = 0x666666666666666;
              }
              else {
                unint64_t v257 = v256;
              }
              v448[0] = &v415;
              if (v257)
              {
                if (v257 > 0x666666666666666) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v258 = (char *)operator new(40 * v257);
              }
              else
              {
                v258 = 0;
              }
              uint64_t v259 = (uint64_t)&v258[40 * v255];
              std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v259, (uint64_t)&__p);
              uint64_t v260 = v414.i64[1];
              uint64_t v261 = v414.i64[0];
              if (v414.i64[1] == v414.i64[0])
              {
                int64x2_t v263 = vdupq_n_s64(v414.u64[1]);
                uint64_t v262 = (uint64_t)&v258[40 * v255];
              }
              else
              {
                uint64_t v262 = (uint64_t)&v258[40 * v255];
                do
                {
                  v262 -= 40;
                  v260 -= 40;
                  std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v262, v260);
                }
                while (v260 != v261);
                int64x2_t v263 = v414;
              }
              uint64_t v254 = v259 + 40;
              v414.i64[0] = v262;
              v414.i64[1] = v254;
              *(int64x2_t *)&v447[8] = v263;
              v264 = v415;
              v415 = &v258[40 * v257];
              *(void *)&v447[24] = v264;
              *(void *)v447 = v263.i64[0];
              std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v447);
              v221 = (_DWORD *)(a3 + 16);
            }
            else
            {
              std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v414.i64[1], (uint64_t)&__p);
              uint64_t v254 = v253 + 40;
            }
            v414.i64[1] = v254;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v445);
            *(void *)v447 = (char *)&__p + 8;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
            if (SHIBYTE(v432) < 0) {
              operator delete(v430);
            }
            *(void *)v447 = &v435;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
            *(void *)v447 = &v457;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
            *(void *)v447 = &v424;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v439);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v419);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v421);
            if ((v422 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v422 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          int v265 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
          if ((_BYTE)v417) {
            int v266 = 0;
          }
          else {
            int v266 = v265;
          }
          if (v266 == 1)
          {
            v267 = v403;
            if ((unint64_t)v403 >= v404)
            {
              v268 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v402, &v441);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v403, &v441);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v267 + 1, (_DWORD *)&v441 + 1);
              v268 = v267 + 2;
            }
            v403 = v268;
          }
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
          {
            v269 = v393;
            if ((unint64_t)v393 >= v394)
            {
              v270 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v392, &v460);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v393, &v460);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v269 + 1, (_DWORD *)&v460 + 1);
              v270 = v269 + 2;
            }
            v393 = v270;
          }
          int v351 = *(_DWORD *)a3;
          uint64_t v271 = *(void *)(a3 + 8);
          uint64_t v352 = v271;
          if (v271) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 48), 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v353, v221);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v354, v222);
          uint64_t v272 = *(void *)(a3 + 24);
          uint64_t v355 = v272;
          if ((v272 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v272 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v355 &= 0xFFFFFFFFFFFFFFF8;
          }
          memset(v447, 0, 24);
          TgECS::ecsMeshDeformation((TgECS *)&v424, a2, &v351, (uint64_t)v447, v418);
          *(void *)&long long __p = v447;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          if ((v355 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v355 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v353);
          if (v352) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v352);
          }
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
          {
            v273 = v393;
            if ((unint64_t)v393 >= v394)
            {
              v274 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v392, &v424);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v393, &v424);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v273 + 1, &v424.i32[1]);
              v274 = v273 + 2;
            }
            v393 = v274;
          }
          __int32 v346 = *(_DWORD *)a3;
          uint64_t v275 = *(void *)(a3 + 8);
          uint64_t v347 = v275;
          if (v275) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v275 + 48), 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v348, v221);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v349, v222);
          uint64_t v276 = *(void *)(a3 + 24);
          uint64_t v350 = v276;
          if ((v276 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v276 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v350 &= 0xFFFFFFFFFFFFFFF8;
          }
          TgECS::ecsBlendShapeWeights(v447, a2, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v346, (uint64_t)&v453);
          if ((v350 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v350 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v348);
          if (v347) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v347);
          }
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
          {
            v277 = v393;
            if ((unint64_t)v393 >= v394)
            {
              v278 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v392, v447);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v393, v447);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v277 + 1, &v447[4]);
              v278 = v277 + 2;
            }
            v393 = v278;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v424);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v441);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v460);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v427);
          *(void *)v447 = &v453;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v447);
        }
        if (v433.i64[0] != v433.i64[1])
        {
          __int32 v341 = *(_DWORD *)a3;
          uint64_t v279 = *(void *)(a3 + 8);
          uint64_t v342 = v279;
          if (v279) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v279 + 48), 1uLL, memory_order_relaxed);
          }
          v280 = (_DWORD *)(a3 + 16);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v343, (_DWORD *)(a3 + 16));
          v281 = (_DWORD *)(a3 + 20);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v344, (_DWORD *)(a3 + 20));
          uint64_t v282 = *(void *)(a3 + 24);
          uint64_t v345 = v282;
          if ((v282 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v282 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v345 &= 0xFFFFFFFFFFFFFFF8;
          }
          if (v433.i64[0] == v433.i64[1])
          {
            v435 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          }
          else
          {
            unint64_t v283 = atomic_load(&realityio::tokens::EcsTokens);
            if (!v283) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
            }
            TgECS::genAssetPath((TgECS *)&v435, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v341, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v283 + 72));
            memset(v447, 0, 24);
            v285 = *(_DWORD **)&v447[8];
            v284 = *(_DWORD **)v447;
            if (*(void *)v447 != *(void *)&v447[8])
            {
              do
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v424, v284);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v424.i32[1], v284 + 1);
                long long __p = 0uLL;
                *(void *)&long long v444 = 0;
                unint64_t v286 = atomic_load(&realityio::tokens::ActionTokens);
                if (!v286) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
                }
                unint64_t v287 = *(void *)(v286 + 160) & 0xFFFFFFFFFFFFFFF8;
                if (v287)
                {
                  v288 = (char *)(v287 + 16);
                  if (*(char *)(v287 + 39) < 0) {
                    v288 = *(char **)v288;
                  }
                }
                else
                {
                  v288 = "";
                }
                std::string::basic_string[abi:ne180100]<0>(&v453, v288);
                MEMORY[0x2455CF7A0](&v457, &v453);
                TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v424, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v457);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v457);
                if (SBYTE7(v454) < 0) {
                  operator delete((void *)v453.i64[0]);
                }
                v453.i64[0] = (uint64_t)&__p;
                std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v453);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v424);
                v284 += 2;
              }
              while (v284 != v285);
              v284 = *(_DWORD **)&v447[8];
            }
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>((uint64_t *)v447, v284, v433.i64[0], (_DWORD *)v433.i64[1], (v433.i64[1] - v433.i64[0]) >> 3);
            unint64_t v289 = atomic_load(&realityio::tokens::ActionTokens);
            if (!v289) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
            }
            unint64_t v290 = *(void *)(v289 + 24) & 0xFFFFFFFFFFFFFFF8;
            if (v290)
            {
              v291 = (char *)(v290 + 16);
              if (*(char *)(v290 + 39) < 0) {
                v291 = *(char **)v291;
              }
            }
            else
            {
              v291 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, v291);
            MEMORY[0x2455CF7A0](&v453, &__p);
            TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v435, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v447, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v453);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v453);
            if (SBYTE7(v444) < 0) {
              operator delete((void *)__p);
            }
            *(void *)&long long __p = v447;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          }
          if ((v345 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v345 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v343);
          if (v342) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v342);
          }
          __int32 v336 = *(_DWORD *)a3;
          uint64_t v292 = *(void *)(a3 + 8);
          uint64_t v337 = v292;
          if (v292) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v292 + 48), 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v338, v280);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v339, v281);
          uint64_t v293 = *(void *)(a3 + 24);
          uint64_t v340 = v293;
          if ((v293 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v293 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v340 &= 0xFFFFFFFFFFFFFFF8;
          }
          unint64_t v294 = atomic_load(&realityio::tokens::EcsTokens);
          if (!v294) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
          }
          TgECS::genECSPath((TgECS *)&v457, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v336, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v294 + 80));
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v453, &v435);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v453.i32[1], (_DWORD *)&v435 + 1);
          memset(v447, 0, 24);
          *(void *)&long long __p = v447;
          BYTE8(__p) = 0;
          *(void *)v447 = operator new(8uLL);
          *(void *)&v447[8] = *(void *)v447;
          *(void *)&v447[16] = *(void *)v447 + 8;
          *(void *)&v447[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v447[16], &v453, &v453.i32[2], *(_DWORD **)v447);
          unint64_t v295 = atomic_load(&realityio::tokens::ActionTokens);
          if (!v295) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
          }
          unint64_t v296 = *(void *)(v295 + 32) & 0xFFFFFFFFFFFFFFF8;
          if (v296)
          {
            v297 = (char *)(v296 + 16);
            if (*(char *)(v296 + 39) < 0) {
              v297 = *(char **)v297;
            }
          }
          else
          {
            v297 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v297);
          MEMORY[0x2455CF7A0](&v424, &__p);
          TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v457, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v447, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v424);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v424);
          if (SBYTE7(v444) < 0) {
            operator delete((void *)__p);
          }
          *(void *)&long long __p = v447;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v453);
          if ((v340 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v340 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v338);
          if (v337) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v337);
          }
          v298 = v393;
          if ((unint64_t)v393 >= v394)
          {
            v299 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v392, &v457);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v393, &v457);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v298 + 1, (_DWORD *)&v457 + 1);
            v299 = v298 + 2;
          }
          v393 = v299;
          __int32 v331 = *(_DWORD *)a3;
          uint64_t v300 = *(void *)(a3 + 8);
          uint64_t v332 = v300;
          if (v300) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v300 + 48), 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v333, v280);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v334, v281);
          uint64_t v301 = *(void *)(a3 + 24);
          uint64_t v335 = v301;
          if ((v301 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v301 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v335 &= 0xFFFFFFFFFFFFFFF8;
          }
          unint64_t v302 = atomic_load(&realityio::tokens::EcsTokens);
          if (!v302) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
          }
          TgECS::genECSPath((TgECS *)&v430, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v331, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v302 + 64));
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v453, &v435);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v453.i32[1], (_DWORD *)&v435 + 1);
          memset(v447, 0, 24);
          *(void *)&long long __p = v447;
          BYTE8(__p) = 0;
          *(void *)v447 = operator new(8uLL);
          *(void *)&v447[8] = *(void *)v447;
          *(void *)&v447[16] = *(void *)v447 + 8;
          *(void *)&v447[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v447[16], &v453, &v453.i32[2], *(_DWORD **)v447);
          unint64_t v303 = atomic_load(&realityio::tokens::ActionTokens);
          if (!v303) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
          }
          unint64_t v304 = *(void *)(v303 + 16) & 0xFFFFFFFFFFFFFFF8;
          if (v304)
          {
            v305 = (char *)(v304 + 16);
            if (*(char *)(v304 + 39) < 0) {
              v305 = *(char **)v305;
            }
          }
          else
          {
            v305 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v305);
          MEMORY[0x2455CF7A0](&v424, &__p);
          TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v430, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v447, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v424);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v424);
          if (SBYTE7(v444) < 0) {
            operator delete((void *)__p);
          }
          *(void *)&long long __p = v447;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v453);
          if ((v335 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v335 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v333);
          if (v332) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v332);
          }
          v306 = v393;
          if ((unint64_t)v393 >= v394)
          {
            v307 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v392, &v430);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v393, &v430);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v306 + 1, (_DWORD *)&v430 + 1);
            v307 = v306 + 2;
          }
          v393 = v307;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v430);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v457);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v219 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v435);
        }
        v431 = 0;
        v430 = 0;
        unint64_t v432 = 0;
        UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v219);
        uint64_t v310 = *UsdPrimDefaultPredicate;
        uint64_t v309 = UsdPrimDefaultPredicate[1];
        uint64_t v311 = UsdPrimDefaultPredicate[2];
        if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
          && ((v310 & 0x2000) != 0 || (v309 & 0x2000) == 0))
        {
          v310 |= 0x2000uLL;
          v309 &= ~0x2000uLL;
        }
        *(void *)&long long __p = v310;
        *((void *)&__p + 1) = v309;
        *(void *)&long long v444 = v311;
        pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(a3, (uint64_t *)&__p, (uint64_t)v447);
        *(void *)&long long __p = *(void *)v447;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 2, &v447[8]);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 3, &v447[12]);
        long long v444 = *(_OWORD *)&v447[16];
        v445[0] = v448[0];
        v453.i64[0] = v448[1];
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v453.i32[2], &v449);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v453.i32[3], &v450);
        long long v454 = v451;
        *(void *)&long long v455 = v452;
        while (__p != *(_OWORD *)&v453
             || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v444, (uint64_t)&v454))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&__p, (uint64_t)&v424);
          uint64_t v313 = v424.i64[1];
          if (!v424.i64[1] || (*(unsigned char *)(v424.i64[1] + 57) & 8) != 0) {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v424.i64[1], v312);
          }
          v314 = (void *)atomic_load(&realityio::tokens::RealityKitTokens);
          if (!v314) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((**(void **)(v313 + 24) & 0xFFFFFFFFFFFFFFF8) == (*v314 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_680;
          }
          uint64_t v315 = v424.i64[1];
          if (!v424.i64[1] || (*(unsigned char *)(v424.i64[1] + 57) & 8) != 0) {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v424.i64[1], v312);
          }
          unint64_t v316 = atomic_load(&realityio::tokens::RealityKitTokens);
          if (!v316) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((**(void **)(v315 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v316 + 16) & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_680:
            v457 = 0;
            v458 = 0;
            unint64_t v459 = 0;
            componentInputs((uint64_t)&v441, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v424, (uint64_t *)&v457);
            if (v457 != v458) {
              TgBase::emitGroup(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v457);
            }
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v424, &v435);
            unint64_t v317 = atomic_load(&realityio::tokens::EcsTokens);
            if (!v317) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
            }
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v421, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v435, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v317 + 136));
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v435);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v424, &v435);
            unint64_t v318 = atomic_load(MEMORY[0x263F90550]);
            if (!v318) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
            }
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v422, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v435, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v318 + 64));
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v435);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v460, &v441);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v460 + 1, (_DWORD *)&v441 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v461, &v422);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v462, (_DWORD *)&v422 + 1);
            v436 = 0;
            v435 = 0;
            v437 = 0;
            v427 = &v435;
            LOBYTE(v428) = 0;
            v435 = operator new(0x10uLL);
            v436 = v435;
            v437 = (char *)v435 + 16;
            v436 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v437, &v460, &v463, v435);
            v319 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::ActionTokens);
            if (!v319) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
            }
            if ((*((void *)v319 + 14) & 0xFFFFFFFFFFFFFFF8) != 0) {
              unint64_t v320 = (*((void *)v319 + 14) & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else {
              unint64_t v320 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v319);
            }
            MEMORY[0x2455CF7A0](&v427, v320);
            TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v421, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v435, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v427);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v427);
            v427 = &v435;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v427);
            uint64_t v321 = 16;
            do
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              v321 -= 8;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v460 + v321);
            }
            while (v321);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v422);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v441);
            v435 = &v457;
            std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v435);
            if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
            {
              v322 = v431;
              if ((unint64_t)v431 >= v432)
              {
                v323 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v430, v421);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v431, v421);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v322 + 1, (_DWORD *)v421 + 1);
                v323 = v322 + 8;
              }
              v431 = v323;
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v421);
          }
          if ((v426 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v426 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v425);
          if (v424.i64[1]) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v424.i64[1]);
          }
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&__p);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v453.i64[1]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v449);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v447[8]);
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>(&v405, v406, v430, v431, (v431 - (unsigned char *)v430) >> 3);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)v447, v326);
        MEMORY[0x2455CF810](&__p, "__childEntities");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v424.i64, (pxrInternal__aapl__pxrReserved__::SdfPath *)v447, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        if ((__p & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v447);
        v324 = v406;
        if ((unint64_t)v406 >= v407)
        {
          v325 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v405, &v424);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v406, &v424);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v324 + 1, &v424.i32[1]);
          v325 = v324 + 2;
        }
        v406 = v325;
        TgBase::emitArray(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v424);
      }
      ++k;
    }
  }
  BOOL v211 = 1;
  goto LABEL_461;
}

void sub_23F794B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, pxrInternal__aapl__pxrReserved__::SdfPath *a19)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x480]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 - 144));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x3F0]);
  STACK[0x490] = v19 - 256;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x490]);
  *(void *)(v19 - 256) = &STACK[0x440];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 256));
  *(void *)(v19 - 256) = &STACK[0x408];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 256));
  STACK[0x458] = (unint64_t)&STACK[0x240];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x458]);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&STACK[0x258]);
  STACK[0x258] = (unint64_t)&STACK[0x290];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x258]);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&STACK[0x2A8]);
  STACK[0x2A8] = (unint64_t)&STACK[0x2E0];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  STACK[0x2A8] = (unint64_t)&STACK[0x2F8];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  STACK[0x2A8] = (unint64_t)&STACK[0x310];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  STACK[0x2A8] = (unint64_t)&STACK[0x328];
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  STACK[0x2A8] = (unint64_t)&STACK[0x340];
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x358]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a19);
  _Unwind_Resume(a1);
}

void getDefaultPrimPathOrFirst(_DWORD *a1, uint64_t *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  if (pxrInternal__aapl__pxrReserved__::UsdStage::HasDefaultPrim(v4))
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetDefaultPrim((uint64_t *)&__p, v5);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v15);
    if (v14) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
    }
  }
  else
  {
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot((uint64_t *)&__p, v6);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenNames((uint64_t *)v12, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v15);
    if (v14) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
    }
    if (v12[1] == v12[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/model");
      MEMORY[0x2455CF7A0](a1, &__p);
      if ((v15[7] & 0x80000000) != 0) {
        operator delete(__p);
      }
    }
    else
    {
      unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(&v8, v7);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, v12[0]);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v15);
      if (v14) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
      }
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
      if (v9) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
      }
    }
    long long __p = v12;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
}

void sub_23F79607C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  long long __p = &a14;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void TgBase::TargetInfoT::~TargetInfoT(TgBase::TargetInfoT *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 32);
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void TgECS::ecsMeshAsset(_DWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdObject *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  uint64_t v138 = *MEMORY[0x263EF8340];
  int64x2_t v108 = 0uLL;
  uint64_t v109 = 0;
  unint64_t v106 = 0;
  unint64_t v105 = 0;
  unint64_t v107 = 0;
  uint64_t v103 = 0;
  long long v102 = 0;
  uint64_t v104 = 0;
  v101[1] = 0;
  v101[0] = 0;
  unint64_t v100 = v101;
  *a8 = 0;
  memset(v99, 0, sizeof(v99));
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform();
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((uint64_t *)v99, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&__p, 0, 0.0);
  uint64_t v8 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)a4;
  if (*(void *)(a4 + 8) != *(void *)a4)
  {
    uint64_t v71 = (uint64_t **)(a2 + 480);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&__p, a3);
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&__p);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v94, v9, v8);
    uint64_t v10 = __p_8[0];
    if (__p_8[0]
      && atomic_fetch_add_explicit((atomic_uint *volatile)__p_8[0] + 2, 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(void *))(*(void *)v10 + 8))(v10);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimInPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v94, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v93);
      if ((v134 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v134 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p_8[1]);
      if (__p_8[0]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p_8[0]);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v94, &v93);
    }
    if (!std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v71, &v93))std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v71, &v93, &v93); {
    MEMORY[0x2455CF810](&__p, "__meshDescriptor");
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v92, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v93, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
    if ((__p & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v94, &__p);
    unint64_t v11 = atomic_load(&realityio::tokens::EcsTokens);
    if (v11)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v91, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 264));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v94, &__p);
      unint64_t v12 = atomic_load(&realityio::tokens::EcsTokens);
      if (v12)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v90, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v12 + 272));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        MEMORY[0x2455CF810](v110, "xform");
        unint64_t __p = (unint64_t)v110[0];
        v110[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p_8, &v90);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)__p_8 + 1, (_DWORD *)&v90 + 1);
        MEMORY[0x2455CF810](v126, "descriptor");
        __p_8[1] = v126[0];
        v126[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v134, &v92);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v134 + 1, (_DWORD *)&v92 + 1);
        MEMORY[0x2455CF810](&v80, "providingPrim");
        unint64_t v135 = v80;
        uint64_t v80 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v136, &v93);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v137, (_DWORD *)&v93 + 1);
        uint64_t v13 = 0;
        v89[0] = 0;
        v89[1] = 0;
        unint64_t v88 = v89;
        do
        {
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath> const&>(&v88, v89, (uint64_t *)&__p_8[v13 - 1], (uint64_t *)&__p_8[v13 - 1]);
          v13 += 2;
        }
        while (v13 != 6);
        uint64_t v14 = 0;
        while (1)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v136 + v14 * 8);
          unint64_t v15 = (unint64_t)(&v135)[v14];
          if ((v15 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          v14 -= 2;
          if (v14 == -6)
          {
            if ((v80 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (((uint64_t)v126[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v126[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (((uint64_t)v110[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v110[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            int v83 = v94;
            uint64_t v84 = v95;
            if (v95) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)v95 + 6, 1uLL, memory_order_relaxed);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v85, &v96);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v86, &v97);
            uint64_t v87 = v98;
            if ((v98 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v87 &= 0xFFFFFFFFFFFFFFF8;
            }
          }
        }
      }
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  uint64_t v16 = v100;
  if (v100 != v101)
  {
    unint64_t v17 = &v118;
    unint64_t v18 = &v130;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v117, (_DWORD *)v16 + 7);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v17, (_DWORD *)v16 + 8);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&__p, a3);
      uint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&__p);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)v129, v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v117);
      unint64_t v20 = __p_8[0];
      if (__p_8[0]
        && atomic_fetch_add_explicit((atomic_uint *volatile)__p_8[0] + 2, 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(void *))(*(void *)v20 + 8))(v20);
      }
      int v75 = (int)v129[0];
      char v76 = v129[1];
      if (v129[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v129[1] + 6, 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v77, v18);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v78, (_DWORD *)&v130 + 1);
      uint64_t v79 = v131;
      if ((v131 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v131 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v79 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v21 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v21) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      TgECS::genECSPath((TgECS *)&v115, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v75, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v21 + 184));
      long long v113 = 0uLL;
      *(void *)&long long v114 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v122 = MEMORY[0x263F90708] + 16;
      MEMORY[0x2455CE910](&v120);
      pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v120, (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v122);
      if (__p)
      {
        *(void *)&long long v112 = 0;
        long long v111 = 0u;
        *(_OWORD *)uint64_t v110 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder((uint64_t *)v126, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&__p);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v110);
        *(_OWORD *)uint64_t v110 = *(_OWORD *)v126;
        long long v111 = v127;
        *(_OWORD *)uint64_t v126 = 0u;
        long long v127 = 0u;
        *(void *)&long long v112 = v128;
        *(void *)&long long v128 = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v126);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr((uint64_t *)v126, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v122);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v126, &v80);
        uint64_t v22 = *((void *)&v113 + 1);
        if (*((void *)&v113 + 1) >= (unint64_t)v114)
        {
          uint64_t v23 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v113, &v80);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v113 + 1), &v80);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v22 + 4), (_DWORD *)&v80 + 1);
          uint64_t v23 = v22 + 8;
        }
        *((void *)&v113 + 1) = v23;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v80);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr((uint64_t *)&v80, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v122);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v80, &v123);
        uint64_t v24 = *((void *)&v113 + 1);
        if (*((void *)&v113 + 1) >= (unint64_t)v114)
        {
          uint64_t v25 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v113, &v123);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v113 + 1), &v123);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v24 + 4), (_DWORD *)&v123 + 1);
          uint64_t v25 = v24 + 8;
        }
        *((void *)&v113 + 1) = v25;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v123);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr(&v123, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v122);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v123, &v119);
        uint64_t v26 = *((void *)&v113 + 1);
        if (*((void *)&v113 + 1) >= (unint64_t)v114)
        {
          uint64_t v27 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v113, &v119);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v113 + 1), &v119);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v26 + 4), (_DWORD *)&v119 + 1);
          uint64_t v27 = v26 + 8;
        }
        *((void *)&v113 + 1) = v27;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v119);
        if ((BYTE8(v125) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v125 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v125);
        if (v124) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v124);
        }
        if ((BYTE8(v82) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v82 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v82);
        if (v81) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v81);
        }
        if ((BYTE8(v127) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v127 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
        if (v126[1]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v126[1]);
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v110);
      }
      uint64_t v28 = (uint64_t)v18;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v135);
      uint64_t v29 = v17;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr((atomic_uint **)__p_8);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr((atomic_uint **)&__p);
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      unint64_t v30 = (_DWORD *)*((void *)&v113 + 1);
      for (uint64_t i = (_DWORD *)v113; i != v30; i += 2)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v126, i);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v126 + 1, i + 1);
        *(_OWORD *)__p_8 = 0uLL;
        unint64_t __p = 0;
        unint64_t v32 = atomic_load(&realityio::tokens::ActionTokens);
        if (!v32) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
        }
        unint64_t v33 = *(void *)(v32 + 160) & 0xFFFFFFFFFFFFFFF8;
        if (v33)
        {
          uint64_t v34 = (char *)(v33 + 16);
          if (*(char *)(v33 + 39) < 0) {
            uint64_t v34 = *(char **)v34;
          }
        }
        else
        {
          uint64_t v34 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(v110, v34);
        MEMORY[0x2455CF7A0](&v80, v110);
        TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v126, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v80);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v80);
        if (SBYTE7(v111) < 0) {
          operator delete(v110[0]);
        }
        v110[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v126);
      }
      unint64_t v35 = atomic_load(&realityio::tokens::ActionTokens);
      if (!v35) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
      }
      unint64_t v36 = *(void *)(v35 + 296) & 0xFFFFFFFFFFFFFFF8;
      if (v36)
      {
        int8x16_t v37 = (char *)(v36 + 16);
        if (*(char *)(v36 + 39) < 0) {
          int8x16_t v37 = *(char **)v37;
        }
      }
      else
      {
        int8x16_t v37 = "";
      }
      unint64_t v17 = v29;
      std::string::basic_string[abi:ne180100]<0>(&__p, v37);
      MEMORY[0x2455CF7A0](v110, &__p);
      TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v115, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v113, (pxrInternal__aapl__pxrReserved__::SdfPath *)v110);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v110);
      if (SHIBYTE(__p_8[1]) < 0) {
        operator delete((void *)__p);
      }
      MEMORY[0x2455CEDD0](&v122);
      unint64_t __p = (unint64_t)&v113;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      BOOL v38 = v106;
      if ((unint64_t)v106 >= v107)
      {
        BOOL v39 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v105, &v115);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v106, &v115);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v38 + 1, &v116);
        BOOL v39 = v38 + 8;
      }
      unint64_t v18 = (uint64_t *)v28;
      unint64_t v106 = v39;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
      if ((v79 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v77);
      if (v76) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v76);
      }
      if ((v131 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v131 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v28);
      if (v129[1]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v129[1]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v117);
      unint64_t v40 = v16[1];
      if (v40)
      {
        do
        {
          uint64_t v41 = (void **)v40;
          unint64_t v40 = (void *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          uint64_t v41 = (void **)v16[2];
          BOOL v42 = *v41 == v16;
          uint64_t v16 = v41;
        }
        while (!v42);
      }
      uint64_t v16 = v41;
    }
    while (v41 != v101);
  }
  uint64_t v43 = v102;
  for (j = v103; v43 != j; v43 += 2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v43);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, v43 + 1);
    unint64_t v45 = v106;
    if ((unint64_t)v106 >= v107)
    {
      uint64_t v46 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v105, &__p);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v106, &__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v45 + 1, (_DWORD *)&__p + 1);
      uint64_t v46 = v45 + 8;
    }
    unint64_t v106 = v46;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  }
  unint64_t v47 = atomic_load(&realityio::tokens::EcsTokens);
  if (!v47) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  TgECS::genECSPath((TgECS *)&__p, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v47 + 208));
  unint64_t v48 = v106;
  if ((unint64_t)v106 >= v107)
  {
    long long v49 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v105, &__p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v106, &__p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v48 + 1, (_DWORD *)&__p + 1);
    long long v49 = v48 + 8;
  }
  unint64_t v106 = v49;
  unint64_t v50 = atomic_load(&realityio::tokens::EcsTokens);
  if (!v50) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  TgECS::genECSPath((TgECS *)v110, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v50 + 216));
  unint64_t v51 = v106;
  if ((unint64_t)v106 >= v107)
  {
    uint64_t v52 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v105, v110);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v106, v110);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v51 + 1, (_DWORD *)v110 + 1);
    uint64_t v52 = v51 + 8;
  }
  unint64_t v106 = v52;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v110);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v110, a5);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v110 + 1, a5 + 1);
  long long v111 = 0uLL;
  v110[1] = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(&v110[1], v105, v106, (v106 - v105) >> 3);
  unint64_t v53 = atomic_load(&realityio::tokens::ActionTokens);
  if (!v53) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v54 = *(void *)(v53 + 200) & 0xFFFFFFFFFFFFFFF8;
  if (v54)
  {
    unint64_t v55 = (char *)(v54 + 16);
    if (*(char *)(v54 + 39) < 0) {
      unint64_t v55 = *(char **)v55;
    }
  }
  else
  {
    unint64_t v55 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(v126, v55);
  MEMORY[0x2455CF7A0](&v112, v126);
  uint64_t v56 = v108.i64[1];
  if (v108.i64[1] >= (unint64_t)v109)
  {
    unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * ((v108.i64[1] - v108.i64[0]) >> 3);
    if (v58 + 1 > 0x666666666666666) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v59 = 0x999999999999999ALL * ((uint64_t)&v109[-v108.i64[0]] >> 3);
    if (v59 <= v58 + 1) {
      unint64_t v59 = v58 + 1;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v109[-v108.i64[0]] >> 3) >= 0x333333333333333) {
      unint64_t v60 = 0x666666666666666;
    }
    else {
      unint64_t v60 = v59;
    }
    unint64_t v135 = &v109;
    if (v60)
    {
      if (v60 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v61 = (char *)operator new(40 * v60);
    }
    else
    {
      uint64_t v61 = 0;
    }
    uint64_t v62 = (uint64_t)&v61[40 * v58];
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v62, (uint64_t)v110);
    uint64_t v63 = v108.i64[1];
    uint64_t v64 = v108.i64[0];
    if (v108.i64[1] == v108.i64[0])
    {
      int64x2_t v66 = vdupq_n_s64(v108.u64[1]);
      uint64_t v65 = v62;
    }
    else
    {
      uint64_t v65 = v62;
      do
      {
        v65 -= 40;
        v63 -= 40;
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v65, v63);
      }
      while (v63 != v64);
      int64x2_t v66 = v108;
    }
    uint64_t v57 = v62 + 40;
    v108.i64[0] = v65;
    v108.i64[1] = v57;
    *(int64x2_t *)__p_8 = v66;
    long long v67 = v109;
    uint64_t v109 = &v61[40 * v60];
    unint64_t v134 = v67;
    unint64_t __p = v66.i64[0];
    std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v108.i64[1], (uint64_t)v110);
    uint64_t v57 = v56 + 40;
  }
  v108.i64[1] = v57;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v112);
  unint64_t __p = (unint64_t)&v110[1];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v110);
  if (SBYTE7(v127) < 0) {
    operator delete(v126[0]);
  }
  TgBase::emitTargets(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v108);
  unint64_t v68 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a5);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v68 + 1, a5 + 1);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v100, v101[0]);
  unint64_t __p = (unint64_t)&v102;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  unint64_t __p = (unint64_t)&v105;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  unint64_t __p = (unint64_t)&v108;
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_23F79A2F4(_Unwind_Exception *a1)
{
  STACK[0xA50] = (unint64_t)&STACK[0x548];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA50]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&STACK[0x5E8], (void *)STACK[0x5F0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&STACK[0x600]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&STACK[0x608]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&STACK[0x610]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&STACK[0x618]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&STACK[0x620]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&STACK[0x628]);
  if ((STACK[0x648] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x648] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(STACK[0x230]);
  if (STACK[0x638]) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(STACK[0x638]);
  }
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&STACK[0x6D8], (void *)STACK[0x6E0]);
  STACK[0x650] = (unint64_t)&STACK[0x6F0];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x650]);
  STACK[0x650] = (unint64_t)&STACK[0x708];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x650]);
  STACK[0x650] = (unint64_t)&STACK[0x720];
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x650]);
  _Unwind_Resume(a1);
}

void anonymous namespace'::getBlendShapeNameAndTargetPaths(pxrInternal__aapl__pxrReserved__::UsdPrim *a1)
{
  MEMORY[0x2455CF810](v2, "skel:blendShapes");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v8, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)v2);
  if ((v2[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v2[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](v2, "skel:blendShapeTargets");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(&v7, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)v2);
  if ((v2[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v2[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
}

void sub_23F79B880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void ***)va);
  va_copy((va_list)v5, va1);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v3 - 64));
  _Unwind_Resume(a1);
}

void anonymous namespace'::metaDataPath(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  std::operator+<char>();
  MEMORY[0x2455CF7A0](v6, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(a1, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v6);
  if (v5 < 0) {
    operator delete(__p);
  }
}

void sub_23F79B9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t gatherTextShapeInputs(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6 || (*((unsigned char *)v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  }
  uint64_t v7 = (void *)*((void *)v6 + 3);
  uint64_t result = MEMORY[0x2455CF810](&v40, "Preliminary_Text");
  unint64_t v9 = *v7 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (atomic_uint *)(v40 & 0xFFFFFFFFFFFFFFF8);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit(v10, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v9 == v10)
  {
    unint64_t v11 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v11) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(a2, (void *)(v11 + 352));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v39);
    unint64_t v12 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v12) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v40, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v12 + 8));
    unint64_t v13 = a3[1];
    if (v13 >= a3[2])
    {
      uint64_t v14 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v40);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v40);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v13 + 4), (_DWORD *)&v40 + 1);
      uint64_t v14 = v13 + 8;
    }
    a3[1] = v14;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v39);
    unint64_t v15 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v15) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v40, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v15 + 32));
    unint64_t v16 = a3[1];
    if (v16 >= a3[2])
    {
      uint64_t v17 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v40);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v40);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v16 + 4), (_DWORD *)&v40 + 1);
      uint64_t v17 = v16 + 8;
    }
    a3[1] = v17;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v39);
    unint64_t v18 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v18) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v40, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v18 + 64));
    unint64_t v19 = a3[1];
    if (v19 >= a3[2])
    {
      uint64_t v20 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v40);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v40);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v19 + 4), (_DWORD *)&v40 + 1);
      uint64_t v20 = v19 + 8;
    }
    a3[1] = v20;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v39);
    unint64_t v21 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v21) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v40, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v21 + 96));
    unint64_t v22 = a3[1];
    if (v22 >= a3[2])
    {
      uint64_t v23 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v40);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v40);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v22 + 4), (_DWORD *)&v40 + 1);
      uint64_t v23 = v22 + 8;
    }
    a3[1] = v23;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v39);
    unint64_t v24 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v24) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v40, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v24 + 40));
    unint64_t v25 = a3[1];
    if (v25 >= a3[2])
    {
      uint64_t v26 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v40);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v40);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v25 + 4), (_DWORD *)&v40 + 1);
      uint64_t v26 = v25 + 8;
    }
    a3[1] = v26;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v39);
    unint64_t v27 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v27) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v40, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v27 + 24));
    unint64_t v28 = a3[1];
    if (v28 >= a3[2])
    {
      uint64_t v29 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v40);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v40);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v28 + 4), (_DWORD *)&v40 + 1);
      uint64_t v29 = v28 + 8;
    }
    a3[1] = v29;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v39);
    unint64_t v30 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v30) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v40, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v30 + 104));
    unint64_t v31 = a3[1];
    if (v31 >= a3[2])
    {
      uint64_t v32 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v40);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v40);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v31 + 4), (_DWORD *)&v40 + 1);
      uint64_t v32 = v31 + 8;
    }
    a3[1] = v32;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v39);
    unint64_t v33 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v33) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v40, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v33 + 48));
    unint64_t v34 = a3[1];
    if (v34 >= a3[2])
    {
      uint64_t v35 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v40);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v40);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v34 + 4), (_DWORD *)&v40 + 1);
      uint64_t v35 = v34 + 8;
    }
    a3[1] = v35;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v39);
    unint64_t v36 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v36) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v40, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v36 + 88));
    unint64_t v37 = a3[1];
    if (v37 >= a3[2])
    {
      uint64_t v38 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v40);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v40);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v37 + 4), (_DWORD *)&v40 + 1);
      uint64_t v38 = v37 + 8;
    }
    a3[1] = v38;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
  }
  return result;
}

void sub_23F79BFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t gatherPrimitiveShapeInputs(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *a1, void *a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  int IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (IsA)
  {
    unint64_t v7 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v7) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(a2, (void *)(v7 + 328));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, &v38);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath(&v45, a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v44[0] = MEMORY[0x263F906D8] + 16;
    pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr(&v38, (pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)v44);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v38, &v42);
    unint64_t v8 = a3[1];
    if (v8 >= a3[2])
    {
      uint64_t v9 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v42);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v42);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v8 + 4), &v43);
      uint64_t v9 = v8 + 8;
    }
    a3[1] = v9;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
    if ((v41 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    if (v39) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
    }
    MEMORY[0x2455CEA80](v44);
    if ((v48 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
    uint64_t result = v46;
    if (v46) {
      return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(IsA);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomCone *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if (v10)
    {
      unint64_t v11 = atomic_load(&realityio::tokens::ActionTokens);
      if (!v11) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::TfToken::operator=(a2, (void *)(v11 + 64));
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v38 = MEMORY[0x263F906E8] + 16;
      pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetHeightAttr(&v45, (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)&v38);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45, v44);
      unint64_t v12 = a3[1];
      if (v12 >= a3[2])
      {
        uint64_t v13 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v44);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v44);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v12 + 4), (_DWORD *)v44 + 1);
        uint64_t v13 = v12 + 8;
      }
      a3[1] = v13;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
      if ((v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
      if (v46) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetRadiusAttr(&v45, (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)&v38);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45, v44);
      unint64_t v23 = a3[1];
      if (v23 >= a3[2])
      {
        uint64_t v24 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v44);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v44);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v23 + 4), (_DWORD *)v44 + 1);
        uint64_t v24 = v23 + 8;
      }
      a3[1] = v24;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
      if ((v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
      if (v46) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetAxisAttr(&v45, (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)&v38);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45, v44);
      unint64_t v25 = a3[1];
      if (v25 >= a3[2])
      {
        uint64_t v26 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v44);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v44);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v25 + 4), (_DWORD *)v44 + 1);
        uint64_t v26 = v25 + 8;
      }
      a3[1] = v26;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
      if ((v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
      if (v46) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
      }
      return MEMORY[0x2455CEC10](&v38);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(v10);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomCube *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if (v14)
      {
        unint64_t v15 = atomic_load(&realityio::tokens::ActionTokens);
        if (!v15) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(a2, (void *)(v15 + 80));
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        uint64_t v38 = MEMORY[0x263F90680] + 16;
        pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetHeightAttr(&v45, (pxrInternal__aapl__pxrReserved__::UsdGeomCone *)&v38);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45, v44);
        unint64_t v16 = a3[1];
        if (v16 >= a3[2])
        {
          uint64_t v17 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v44);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v44);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v16 + 4), (_DWORD *)v44 + 1);
          uint64_t v17 = v16 + 8;
        }
        a3[1] = v17;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
        if ((v48 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
        if (v46) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
        }
        pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetRadiusAttr(&v45, (pxrInternal__aapl__pxrReserved__::UsdGeomCone *)&v38);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45, v44);
        unint64_t v30 = a3[1];
        if (v30 >= a3[2])
        {
          uint64_t v31 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v44);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v44);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v30 + 4), (_DWORD *)v44 + 1);
          uint64_t v31 = v30 + 8;
        }
        a3[1] = v31;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
        if ((v48 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
        if (v46) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
        }
        pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetAxisAttr(&v45, (pxrInternal__aapl__pxrReserved__::UsdGeomCone *)&v38);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45, v44);
        unint64_t v32 = a3[1];
        if (v32 >= a3[2])
        {
          uint64_t v33 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v44);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v44);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v32 + 4), (_DWORD *)v44 + 1);
          uint64_t v33 = v32 + 8;
        }
        a3[1] = v33;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
        if ((v48 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
        if (v46) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
        }
        return MEMORY[0x2455CE740](&v38);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(v14);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        unint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
        if (v19)
        {
          unint64_t v20 = atomic_load(&realityio::tokens::ActionTokens);
          if (!v20) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
          }
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(a2, (void *)(v20 + 104));
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          uint64_t v38 = MEMORY[0x263F90688] + 16;
          pxrInternal__aapl__pxrReserved__::UsdGeomCube::GetSizeAttr(&v45, (pxrInternal__aapl__pxrReserved__::UsdGeomCube *)&v38);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45, v44);
          unint64_t v21 = a3[1];
          if (v21 >= a3[2])
          {
            uint64_t v22 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v44);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v44);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v21 + 4), (_DWORD *)v44 + 1);
            uint64_t v22 = v21 + 8;
          }
          a3[1] = v22;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
          if ((v48 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
          if (v46) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
          }
          return MEMORY[0x2455CE760](&v38);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType(v19);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if (result)
          {
            unint64_t v27 = atomic_load(&realityio::tokens::ActionTokens);
            if (!v27) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
            }
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(a2, (void *)(v27 + 128));
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            uint64_t v38 = MEMORY[0x263F90700] + 16;
            pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetHeightAttr(&v45, (pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)&v38);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45, v44);
            unint64_t v28 = a3[1];
            if (v28 >= a3[2])
            {
              uint64_t v29 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v44);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v44);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v28 + 4), (_DWORD *)v44 + 1);
              uint64_t v29 = v28 + 8;
            }
            a3[1] = v29;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
            if ((v48 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
            if (v46) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
            }
            pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetRadiusAttr(&v45, (pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)&v38);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45, v44);
            unint64_t v34 = a3[1];
            if (v34 >= a3[2])
            {
              uint64_t v35 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v44);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v44);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v34 + 4), (_DWORD *)v44 + 1);
              uint64_t v35 = v34 + 8;
            }
            a3[1] = v35;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
            if ((v48 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
            if (v46) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
            }
            pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetAxisAttr(&v45, (pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)&v38);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45, v44);
            unint64_t v36 = a3[1];
            if (v36 >= a3[2])
            {
              uint64_t v37 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v44);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v44);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v36 + 4), (_DWORD *)v44 + 1);
              uint64_t v37 = v36 + 8;
            }
            a3[1] = v37;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
            if ((v48 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
            if (v46) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
            }
            return MEMORY[0x2455CEDB0](&v38);
          }
        }
      }
    }
  }
  return result;
}

void sub_23F79CA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t TgECS::genECSPath(TgECS *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
}

void sub_23F79CCB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t TgECS::meshesUnderAndIncluding(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdPrim *a3, unsigned char *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(a3);
  long long v59 = 0uLL;
  LOBYTE(v60) = 0;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v59, 0);
  long long v51 = *(_OWORD *)v6;
  uint64_t v52 = *(void *)(v6 + 16);
  long long v59 = v51;
  LOBYTE(v60) = v52;
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v59, 1);
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v7;
  uint64_t v47 = *(void *)(v7 + 16);
  long long v59 = *(_OWORD *)v46;
  LOBYTE(v60) = v47;
  unint64_t v8 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v59, 0x100000005);
  uint64_t v9 = v8[1].i64[0];
  v10.i64[0] = -8193;
  v10.i64[0] = vandq_s8(*v8, v10).u64[0];
  v10.i64[1] = vorrq_s8(*v8, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  *(int8x16_t *)long long v49 = v10;
  *(void *)&v49[16] = v9;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v56, (uint64_t)a3, v49);
  uint64_t v40 = a1;
  uint64_t v41 = a3;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)v56, (uint64_t)&v51);
  while (1)
  {
    *(void *)&long long v59 = v57;
    *((void *)&v59 + 1) = v56;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    LODWORD(v61) = 0;
    WORD2(v61) = 0;
    if (v51 == v59)
    {
      BOOL v11 = 1;
      if (v52 == v60 && !v53 && !v54) {
        BOOL v11 = v55 != 0;
      }
    }
    else
    {
      BOOL v11 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
    if (!v11) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v51, (uint64_t)&v59);
    if (realityio::calculateIsEntityProviding((realityio *)&v59, v12))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v51, (uint64_t)v49);
      BOOL v13 = *(_DWORD *)v49 != *(_DWORD *)v41
         || *(_OWORD *)&v49[8] != *(_OWORD *)((char *)v41 + 8)
         || (v50 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v41 + 3) & 0xFFFFFFFFFFFFFFF8);
      if ((v50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49[16]);
      if (*(void *)&v49[8]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v49[8]);
      }
    }
    else
    {
      BOOL v13 = 0;
    }
    if ((v61 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
    if (*((void *)&v59 + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v59 + 1));
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v59);
    uint64_t v15 = *((void *)&v59 + 1);
    if (!*((void *)&v59 + 1) || (uint64_t v16 = *(void *)(*((void *)&v59 + 1) + 56), (v16 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v59 + 1), v14);
      uint64_t v16 = *(void *)(v15 + 56);
    }
    if ((v61 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
    if (*((void *)&v59 + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v59 + 1));
    }
    if ((v16 & 0x40) == 0) {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v51);
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v59);
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(v17);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    char IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((IsA & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)v46);
      unint64_t v20 = v46[1];
      if (!v46[1] || (*((unsigned char *)v46[1] + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v46[1], v19);
      }
      unint64_t v21 = (void *)*((void *)v20 + 3);
      MEMORY[0x2455CF810](&v45, "Preliminary_Text");
      uint64_t v22 = v45;
      if ((*v21 & 0xFFFFFFFFFFFFFFF8) != (v45 & 0xFFFFFFFFFFFFFFF8))
      {
        int v23 = 0;
LABEL_40:
        if ((v22 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v48 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
        if (v46[1]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v46[1]);
        }
        goto LABEL_46;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v51, (uint64_t)v49);
    BOOL isGuide = realityio::isGuide((realityio *)v49, v24);
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49[16]);
    if (*(void *)&v49[8]) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v49[8]);
    }
    int v23 = !isGuide && !v13;
    if ((IsA & 1) == 0)
    {
      uint64_t v22 = v45;
      goto LABEL_40;
    }
LABEL_46:
    if ((v61 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
    if (*((void *)&v59 + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v59 + 1));
    }
    if (v23)
    {
      MEMORY[0x2455CF810](v43, "visibility");
      MEMORY[0x2455CF810](&v44, "inherited");
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v51, (uint64_t)v49);
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)v49, (const pxrInternal__aapl__pxrReserved__::TfToken *)v43, (uint64_t)&v59);
      if ((_BYTE)v59) {
        unint64_t v26 = *((void *)&v59 + 1);
      }
      else {
        unint64_t v26 = v44;
      }
      if ((v26 & 7) == 0
        || (unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFF8,
            (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) != 0))
      {
        unint64_t v27 = v26;
      }
      if ((_BYTE)v59)
      {
        if ((BYTE8(v59) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v59 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else if (v62 < 0)
      {
        operator delete((void *)v61);
      }
      if ((v50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49[16]);
      if (*(void *)&v49[8]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v49[8]);
      }
      if ((v44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v43[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v43[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v59, "invisible");
      if ((v59 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v51, (uint64_t)&v59);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *(void *)long long v49 = MEMORY[0x263F90728] + 16;
      if ((v61 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
      if (*((void *)&v59 + 1)) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v59 + 1));
      }
      if (*(void *)&v49[8]
        && (*(unsigned char *)(*(void *)&v49[8] + 57) & 8) == 0
        && ((*(uint64_t (**)(unsigned char *))(*(void *)v49 + 32))(v49) & 1) != 0)
      {
        goto LABEL_89;
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v59);
      uint64_t v29 = *((void *)&v59 + 1);
      if (!*((void *)&v59 + 1) || (*(unsigned char *)(*((void *)&v59 + 1) + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v59 + 1), v28);
      }
      unint64_t v30 = *(uint64_t **)(v29 + 24);
      MEMORY[0x2455CF810](v43, "Preliminary_Text");
      uint64_t v31 = *v30;
      unint64_t v32 = (atomic_uint *)(v43[0] & 0xFFFFFFFFFFFFFFF8);
      if ((v43[0] & 7) != 0) {
        atomic_fetch_add_explicit(v32, 0xFFFFFFFE, memory_order_release);
      }
      if ((v61 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
      if (*((void *)&v59 + 1)) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v59 + 1));
      }
      if ((atomic_uint *)(v31 & 0xFFFFFFFFFFFFFFF8) == v32)
      {
LABEL_89:
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v59);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v59, v43);
        unint64_t v33 = v40[1];
        if (v33 >= v40[2])
        {
          uint64_t v34 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(v40, v43);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v40[1], v43);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v33 + 4), (_DWORD *)v43 + 1);
          uint64_t v34 = v33 + 8;
        }
        v40[1] = v34;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v43);
        if ((v61 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
        if (*((void *)&v59 + 1)) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v59 + 1));
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v51, (uint64_t)&v59);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v43[0] = MEMORY[0x263F90690] + 16;
        BOOL isCatmullClarkSurface = realityio::isCatmullClarkSurface((realityio *)v43, v35);
        MEMORY[0x2455CE7A0](v43);
        if ((v61 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
        if (*((void *)&v59 + 1)) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v59 + 1));
        }
        if (isCatmullClarkSurface) {
          *a4 = 1;
        }
      }
      MEMORY[0x2455CEED0](v49);
      if ((v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if (*(unsigned char *)(a2 + 104)) {
      BOOL v37 = 0;
    }
    else {
      BOOL v37 = v13;
    }
    if (v37) {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v51);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v51);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
}

void sub_23F79D528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34)
{
  a34 = a11;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a34);
  _Unwind_Resume(a1);
}

uint64_t TgECS::genAssetPath(TgECS *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimInPrototype(a2, (uint64_t)v7);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v7, &v11);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
    if (v8) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v11);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
}

void sub_23F79D7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::genAssetPath(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a2);
  ValidIdentifier = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier();
  if (*(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(ValidIdentifier))
  {
    unint64_t v7 = atomic_load(&realityio::tokens::StageTokens);
    if (!v7) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v8 = *(void *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      uint64_t v9 = (char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0) {
        uint64_t v9 = *(char **)v9;
      }
    }
    else
    {
      uint64_t v9 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v9);
    MEMORY[0x2455CF7A0](v12, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::SdfPath *)v12, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)this, a2, a3);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
}

void sub_23F79D91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TgECS::ecsMeshes(TgECS *a1, Exec **a2, void *a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::SdfPath **a5, uint64_t a6, void *a7, uint64_t *a8, uint64_t a9, unsigned char *a10)
{
  uint64_t v190 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a5;
  uint64_t v103 = a5[1];
  if (*a5 != v103)
  {
    v149[1] = 0;
    v149[0] = 0;
    uint64_t v148 = v149;
    char v11 = a3 + 2;
    unint64_t v12 = (_DWORD *)a3 + 5;
    uint64_t v13 = (uint64_t)(a2 + 48);
    do
    {
      uint64_t v172 = 0;
      unint64_t __p = 0;
      uint64_t v173 = 0;
      *(_OWORD *)&__sz.__r_.__value_.__r.__words[1] = 0uLL;
      __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&__sz.__r_.__value_.__l.__size_;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&p_p, (pxrInternal__aapl__pxrReserved__::UsdObject *)a3);
      char v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&p_p);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v186, v14, v10);
      int64x2_t v108 = v10;
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__ *)v178;
      if (v178 && atomic_fetch_add_explicit(v178 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        uint64_t v15 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))(*(void *)v15 + 8))(v15);
      }
      UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v15);
      uint64_t v17 = UsdPrimDefaultPredicate[1];
      uint64_t v104 = *UsdPrimDefaultPredicate;
      uint64_t v105 = UsdPrimDefaultPredicate[2];
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        uint64_t v18 = v104;
      }
      else
      {
        uint64_t v18 = v104;
        if ((v104 & 0x2000) != 0 || (v17 & 0x2000) == 0)
        {
          uint64_t v18 = v104 | 0x2000;
          v17 &= ~0x2000uLL;
        }
      }
      *(void *)&long long v145 = v18;
      *((void *)&v145 + 1) = v17;
      *(void *)&long long v146 = v105;
      pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v186, (uint64_t *)&v145, (uint64_t)&p_p);
      *(void *)&long long v145 = p_p;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v145 + 2, &v178);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v145 + 3, (_DWORD *)&v178 + 1);
      long long v146 = v179;
      uint64_t v147 = v180;
      *(void *)&long long v174 = v181;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v174 + 2, &v182);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v174 + 3, &v183);
      char v19 = 0;
      long long v175 = v184;
      uint64_t v176 = v185;
      while (v145 != v174
           || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v146, (uint64_t)&v175))
      {
        unint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v145, (uint64_t)v154);
        pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v20);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
        {
          int v140 = *(_DWORD *)a3;
          uint64_t v21 = a3[1];
          uint64_t v141 = v21;
          if (v21) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 48), 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v142, v11);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v143, v12);
          uint64_t v22 = a3[3];
          uint64_t v144 = v22;
          if ((v22 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v144 &= 0xFFFFFFFFFFFFFFF8;
          }
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v154, &v139);
          gatherMaterialsByIndex((pxrInternal__aapl__pxrReserved__::UsdObject *)&v140, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v139, v13, (uint64_t)&v148, a8, (uint64_t *)&__p);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v139);
          if ((v144 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v142);
          if (v141) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v141);
          }
          char v19 = 1;
        }
        if ((v157 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v156);
        if (v155) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v155);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v145);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v145 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v182);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v178);
      if ((v19 & 1) == 0)
      {
        int v134 = *(_DWORD *)a3;
        uint64_t v23 = a3[1];
        uint64_t v135 = v23;
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v136, v11);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v137, v12);
        uint64_t v24 = a3[3];
        uint64_t v138 = v24;
        if ((v24 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v138 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v132, v108);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v133, (_DWORD *)v108 + 1);
        gatherMaterialsByIndex((pxrInternal__aapl__pxrReserved__::UsdObject *)&v134, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v132, v13, (uint64_t)&v148, a8, (uint64_t *)&__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v132);
        if ((v138 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v138 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v136);
        if (v135) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v135);
        }
      }
      unint64_t v25 = (std::string::__raw *)__sz.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)__sz.__r_.__value_.__l.__data_ != &__sz.__r_.__value_.__r.__words[1])
      {
        do
        {
          TgBase::emitConstant(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25[1].__words[1], (const pxrInternal__aapl__pxrReserved__::VtValue *)&v25[1].__words[2]);
          unint64_t v26 = (std::string *)v25->__words[1];
          if (v26)
          {
            do
            {
              unint64_t v27 = v26;
              unint64_t v26 = (std::string *)v26->__r_.__value_.__r.__words[0];
            }
            while (v26);
          }
          else
          {
            do
            {
              unint64_t v27 = (std::string *)v25->__words[2];
              BOOL v52 = v27->__r_.__value_.__r.__words[0] == (void)v25;
              unint64_t v25 = (std::string::__raw *)v27;
            }
            while (!v52);
          }
          unint64_t v25 = (std::string::__raw *)v27;
        }
        while (v27 != (std::string *)&__sz.__r_.__value_.__r.__words[1]);
      }
      TgBase::emitTargets((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&__p);
      if ((v189 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v188);
      if (v187) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v187);
      }
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&__sz, (void *)__sz.__r_.__value_.__l.__size_);
      p_p = &__p;
      std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100](&p_p);
      uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v108 + 8);
    }
    while ((const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v108 + 8) != v103);
    unint64_t v28 = atomic_load(&realityio::tokens::EcsTokens);
    uint64_t v29 = a2;
    if (!v28) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
    }
    TgECS::genECSPath(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v28 + 248));
    unint64_t v30 = atomic_load(&realityio::tokens::EcsTokens);
    if (!v30) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
    }
    TgECS::genAssetPath((TgECS *)&p_p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v30 + 240));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a7, (int *)&p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a7 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&p_p);
    unint64_t v107 = (uint64_t **)(a2 + 57);
    if (std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)(a2 + 57), a7))
    {
      char v131 = 0;
      *a10 = 0;
    }
    else
    {
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v107, a7, a7);
      char v131 = 0;
      *a10 = 0;
      int v125 = *(_DWORD *)a3;
      uint64_t v32 = a3[1];
      uint64_t v126 = v32;
      if (v32) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v127, v11);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v128, v12);
      uint64_t v33 = a3[3];
      uint64_t v129 = v33;
      if ((v33 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v129 &= 0xFFFFFFFFFFFFFFF8;
      }
      TgECS::ecsMeshAsset(v130, (uint64_t)a2, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v125, (uint64_t)a5, a7, a6, (uint64_t)&v148, &v131);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v130);
      if ((v129 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v129 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
      if (v126) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v126);
      }
    }
    uint64_t v122 = 0;
    uint64_t v123 = 0;
    uint64_t v124 = 0;
    uint64_t v123 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v122, a7);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&p_p, a1);
    unint64_t v34 = atomic_load(&realityio::tokens::EcsTokens);
    if (!v34) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v121, (pxrInternal__aapl__pxrReserved__::SdfPath *)&p_p, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v34 + 208));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&p_p);
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    unint64_t v120 = 0;
    uint64_t v35 = (_DWORD *)*a8;
    long long v111 = (_DWORD *)a8[1];
    if ((_DWORD *)*a8 == v111) {
LABEL_265:
    }
      TgBase::emitArray((uint64_t)v29, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v121);
    unint64_t v36 = &v115;
    uint64_t v109 = (uint64_t *)(a2 + 11);
    unint64_t v106 = *(unsigned int (**)(void **))(MEMORY[0x263F90740] + 48);
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v116, v35);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v117, v35 + 1);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v165, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v116);
      uint64_t v163 = 0;
      uint64_t v162 = 0;
      unint64_t v164 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v161, &v116);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v161 + 1, &v117);
      std::string::basic_string[abi:ne180100]<0>(&p_p, "/__builtin/standardVertexColorMaterial");
      BOOL v37 = v36;
      MEMORY[0x2455CF7A0](&v174, &p_p);
      uint64_t v38 = v165;
      uint64_t v39 = v174;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
      if (SBYTE7(v179) < 0) {
        operator delete(p_p);
      }
      BOOL v52 = v38 == v39;
      unint64_t v36 = v37;
      if (v52) {
        goto LABEL_78;
      }
      std::string::basic_string[abi:ne180100]<0>(&p_p, "/__builtin/standardConstColorMaterial");
      MEMORY[0x2455CF7A0](&v174, &p_p);
      uint64_t v40 = v165;
      uint64_t v41 = v174;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
      if (SBYTE7(v179) < 0) {
        operator delete(p_p);
      }
      BOOL v52 = v40 == v41;
      unint64_t v36 = v37;
      if (v52) {
        goto LABEL_78;
      }
      NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v165);
      MEMORY[0x2455CF810](&p_p, "__materialAssetWithMeshVertexColors");
      uint64_t v69 = *NameToken;
      char v70 = (atomic_uint *)((unint64_t)p_p & 0xFFFFFFFFFFFFFFF8);
      if ((p_p & 7) != 0) {
        atomic_fetch_add_explicit(v70, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v69 & 0xFFFFFFFFFFFFFFF8) == v70)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v114, &v116);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v37, &v117);
        goto LABEL_140;
      }
      uint64_t v71 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v109);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&p_p, v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v165);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_p))
      {
        int v72 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
        if (v72)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimInPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)&p_p, (uint64_t)&v145);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v145, &v174);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_p, &v174);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v161, (int *)&v174);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v161 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
        if (v72)
        {
          if ((BYTE8(v146) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v146 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v146);
          if (*((void *)&v145 + 1)) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v145 + 1));
          }
        }
        unint64_t v73 = atomic_load(&realityio::tokens::EcsTokens);
        if (!v73) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v174, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v161, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v73 + 200));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v161, (int *)&v174);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v161 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
      }
      uint64_t v74 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v107, &v161);
      if (!v74) {
        std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v107, &v161, &v161);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      unint64_t __p = (void *)(MEMORY[0x263F90740] + 16);
      if (!v74) {
        break;
      }
      MEMORY[0x2455CEF40](&__p);
      if ((BYTE8(v179) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v179 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v179);
      if (v178) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v178);
      }
LABEL_139:
      int v114 = v161;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
      int v115 = HIDWORD(v161);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
LABEL_140:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v161);
      p_p = (void **)&v162;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&p_p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v165);
      int64x2_t v66 = v119;
      if ((unint64_t)v119 >= v120)
      {
        long long v67 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(&v118, &v114);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v119, &v114);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v66 + 1, v36);
        long long v67 = v66 + 2;
      }
      uint64_t v119 = v67;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v114);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v116);
      v35 += 2;
      if (v35 == v111) {
        goto LABEL_265;
      }
    }
    if (v172 && (*(unsigned char *)(v172 + 57) & 8) == 0 && v106(&__p))
    {
      unint64_t v75 = atomic_load(MEMORY[0x263F90550]);
      if (!v75) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
      }
      uint64_t v76 = *(void *)(v75 + 216);
      if ((v76 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v76 &= 0xFFFFFFFFFFFFFFF8;
      }
      long long v174 = 0uLL;
      *(void *)&long long v175 = 0;
      unint64_t v186 = (unint64_t)&v174;
      LOBYTE(v187) = 0;
      int v77 = operator new(8uLL);
      *(void *)&long long v174 = v77;
      *((void *)&v174 + 1) = v77;
      *int v77 = v76;
      *(void *)&long long v175 = v77 + 1;
      if ((v76 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v77 &= 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)&v174 + 1) = v77 + 1;
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
      unint64_t v186 = (unint64_t)&v174;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
      if ((v76 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v174, "__defaultUV");
      unint64_t v36 = v37;
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v169, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v165, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v174);
      if ((v174 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF830](&v186, &v166);
      *(void *)&long long v174 = v186;
      *((void *)&v174 + 1) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                             + 1;
      if ((v186 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v186 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&long long v174 = v174 & 0xFFFFFFFFFFFFFFF8;
      }
      TgBase::emitConstant(v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v169, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v174);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v174);
      if ((v186 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v186 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      int v78 = v163;
      if ((unint64_t)v163 >= v164)
      {
        uint64_t v79 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v162, &v169);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v163, &v169);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v78 + 1, (_DWORD *)&v169 + 1);
        uint64_t v79 = v78 + 2;
      }
      uint64_t v163 = v79;
      MEMORY[0x2455CF810](&v174, "__shaderPrimPath");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v167, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v165, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v174);
      if ((v174 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v80 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v174, (uint64_t *)&__sz.__r_.__value_.__l.__size_, &__sz.__r_.__value_.__r.__words[2]);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v80, &v158);
      std::string::size_type v187 = (std::string::size_type)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
           + 1;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v186, &v158);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v186 + 1, (_DWORD *)&v158 + 1);
      TgBase::emitConstant(v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v167, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v186);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v186);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v158);
      if ((BYTE8(v175) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v175 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v175);
      if (*((void *)&v174 + 1)) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v174 + 1));
      }
      uint64_t v81 = v163;
      if ((unint64_t)v163 >= v164)
      {
        long long v82 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v162, &v167);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v163, &v167);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v81 + 1, (_DWORD *)&v167 + 1);
        long long v82 = v81 + 2;
      }
      uint64_t v163 = v82;
      MEMORY[0x2455CF810](&v186, "mtlx");
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput((uint64_t *)&v174, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v186);
      if ((v186 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v186 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
      {
        MEMORY[0x2455CF810](&v158, "mtlx");
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
        std::string::size_type v83 = v187;
        if (v187) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v187 + 48), 1uLL, memory_order_relaxed);
        }
        std::string::size_type size = __sz.__r_.__value_.__l.__size_;
        __sz.__r_.__value_.__l.__size_ = v83;
        if (size) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(size);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&__sz.__r_.__value_.__r.__words[2], &v188);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&__sz.__r_.__value_.__r.__words[2] + 4, (_DWORD *)&v188 + 1);
        uint64_t v85 = MEMORY[0x2455CECB0](&v186);
        if ((v158 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v158 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        int v86 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(v85, (uint64_t *)&__sz.__r_.__value_.__l.__size_, &__sz.__r_.__value_.__r.__words[2]);
        char hasInputsLoop = realityio::hasInputsLoop(v86, v87);
        if ((v189 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v188);
        if (v187) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v187);
        }
        if ((hasInputsLoop & 1) == 0)
        {
          unint64_t v159 = 0;
          uint64_t v160 = 0;
          uint64_t v158 = &v159;
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v154, (uint64_t *)&__sz.__r_.__value_.__l.__size_, &__sz.__r_.__value_.__r.__words[2]);
          unint64_t v170 = 0;
          unint64_t v186 = 0;
          std::string::size_type v187 = 0;
          uint64_t v188 = 0;
          TgECS::emitShaderTree((uint64_t)v29, (uint64_t)v154, (unint64_t *)&v170, (pxrInternal__aapl__pxrReserved__::UsdShadeInput **)&v186, (uint64_t **)&v158);
          v151[0] = &v186;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)v151);
          if ((v157 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v156);
          if (v155) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v155);
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((uint64_t *)&v186, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&__sz);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v186, &v170);
          if ((v189 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v188);
          if (v187) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v187);
          }
          long long v89 = v163;
          if ((unint64_t)v163 >= v164)
          {
            uint64_t v90 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v162, &v170);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v163, &v170);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v89 + 1, (_DWORD *)&v170 + 1);
            uint64_t v90 = v89 + 2;
          }
          uint64_t v163 = v90;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__sz, v151);
          MEMORY[0x2455CF810](&v153, "__sgNode");
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v186, (pxrInternal__aapl__pxrReserved__::SdfPath *)v151, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v153);
          uint64_t v94 = v163;
          if ((unint64_t)v163 >= v164)
          {
            uint64_t v95 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v162, &v186);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v163, &v186);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v94 + 1, (_DWORD *)&v186 + 1);
            uint64_t v95 = v94 + 2;
          }
          uint64_t v163 = v95;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v186);
          if ((v153 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v153 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v151);
          unint64_t v186 = 0;
          std::string::size_type v187 = 0;
          uint64_t v188 = 0;
          unint64_t v96 = atomic_load(&realityio::tokens::ActionTokens);
          if (!v96) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
          }
          unint64_t v97 = *(void *)(v96 + 160) & 0xFFFFFFFFFFFFFFF8;
          if (v97)
          {
            uint64_t v98 = (char *)(v97 + 16);
            if (*(char *)(v97 + 39) < 0) {
              uint64_t v98 = *(char **)v98;
            }
          }
          else
          {
            uint64_t v98 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(v151, v98);
          MEMORY[0x2455CF7A0](&v153, v151);
          TgBase::emitTarget((uint64_t)v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v170, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v186, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v153);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v153);
          if (SHIBYTE(v152) < 0) {
            operator delete(v151[0]);
          }
          v151[0] = &v186;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v151);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v170);
          std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v158, v159);
        }
      }
      else if (__sz.__r_.__value_.__l.__size_ {
             && (*(unsigned char *)(__sz.__r_.__value_.__l.__size_ + 57) & 8) == 0
      }
             && (*(unsigned int (**)(std::string *))(__sz.__r_.__value_.__r.__words[0] + 32))(&__sz))
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((uint64_t *)&v186, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&__sz);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v186, &v153);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v186);
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back[abi:ne180100]((uint64_t *)&v162, &v153);
        unint64_t v186 = 0;
        std::string::size_type v187 = 0;
        uint64_t v188 = 0;
        unint64_t v91 = atomic_load(&realityio::tokens::ActionTokens);
        if (!v91) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
        }
        unint64_t v92 = *(void *)(v91 + 160) & 0xFFFFFFFFFFFFFFF8;
        if (v92)
        {
          uint64_t v93 = (char *)(v92 + 16);
          if (*(char *)(v92 + 39) < 0) {
            uint64_t v93 = *(char **)v93;
          }
        }
        else
        {
          uint64_t v93 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(&v158, v93);
        MEMORY[0x2455CF7A0](v151, &v158);
        TgBase::emitTarget((uint64_t)v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v153, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v186, (pxrInternal__aapl__pxrReserved__::SdfPath *)v151);
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v151);
        if (SHIBYTE(v160) < 0) {
          operator delete(v158);
        }
        uint64_t v158 = &v186;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
        unint64_t v159 = 0;
        uint64_t v160 = 0;
        uint64_t v158 = &v159;
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v186, (uint64_t *)&__sz.__r_.__value_.__l.__size_, &__sz.__r_.__value_.__r.__words[2]);
        unint64_t v150 = 0;
        v151[1] = 0;
        v151[0] = 0;
        uint64_t v152 = 0;
        TgECS::emitShaderTree((uint64_t)v29, (uint64_t)&v186, &v150, (pxrInternal__aapl__pxrReserved__::UsdShadeInput **)v151, (uint64_t **)&v158);
        unint64_t v170 = v151;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v170);
        pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v186);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__sz, &v170);
        MEMORY[0x2455CF810](&v150, "__sgNode");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)v151, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v170, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v150);
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back[abi:ne180100]((uint64_t *)&v162, v151);
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v151);
        if ((v150 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v170);
        std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v158, v159);
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v153);
      }
      if ((BYTE8(v175) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v175 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v175);
      if (*((void *)&v174 + 1)) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v174 + 1));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v167);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v169);
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v166.__r_.__value_.__l.__data_);
      }
      MEMORY[0x2455CECB0](&__sz);
    }
    MEMORY[0x2455CEF40](&__p);
    if ((BYTE8(v179) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v179 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v179);
    if (v178) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v178);
    }
LABEL_78:
    int v42 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v109);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&p_p, v42);
    int v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&p_p);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData((uint64_t *)&v170, v43);
    uint64_t v44 = (uint64_t)v178;
    if (v178 && atomic_fetch_add_explicit(v178 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
    }
    std::string::basic_string[abi:ne180100]<0>(&p_p, "realityio:functionConstants");
    uint64_t ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
    uint64_t v46 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
    if (SBYTE7(v179) < 0)
    {
      operator delete(p_p);
      if (!v46)
      {
LABEL_132:
        std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)&v170, 0);
        unint64_t v63 = atomic_load(&realityio::tokens::ActionTokens);
        if (!v63) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
        }
        unint64_t v64 = *(void *)(v63 + 184) & 0xFFFFFFFFFFFFFFF8;
        if (v64)
        {
          uint64_t v65 = (char *)(v64 + 16);
          if (*(char *)(v64 + 39) < 0) {
            uint64_t v65 = *(char **)v65;
          }
        }
        else
        {
          uint64_t v65 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(&p_p, v65);
        MEMORY[0x2455CF7A0](&v174, &p_p);
        TgBase::emitTarget((uint64_t)v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v161, &v162, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v174);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
        if (SBYTE7(v179) < 0) {
          operator delete(p_p);
        }
        goto LABEL_139;
      }
    }
    else if (!ValueAtPath)
    {
      goto LABEL_132;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>(v46))
    {
      uint64_t v47 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtDictionary>(v46);
      MEMORY[0x2455CE980](&v169, v47);
      uint64_t v158 = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v169);
      unint64_t v159 = v48;
      long long v49 = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v169);
      long long v51 = v50;
      while (1)
      {
        BOOL v52 = !v51 || v158 == v49;
        BOOL v53 = v52;
        if (v159 == v51 && v53) {
          break;
        }
        std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]((std::string *)&p_p, (long long *)v158 + 2);
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)((char *)&v179 + 8)))
        {
          std::operator+<char>();
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v166, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          }
          else {
            std::string v166 = __sz;
          }
          std::operator+<char>();
          char v55 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF830](v151, &__p);
          if (((unint64_t)v151[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t EmptyString = ((unint64_t)v151[0] & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v55);
          }
          if (*(char *)(EmptyString + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v174, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
          }
          else
          {
            long long v57 = *(_OWORD *)EmptyString;
            *(void *)&long long v175 = *(void *)(EmptyString + 16);
            long long v174 = v57;
          }
          if (SBYTE7(v175) < 0) {
            operator delete((void *)v174);
          }
          if (((uint64_t)v151[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v151[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (SHIBYTE(v173) < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v166.__r_.__value_.__l.__data_);
          }
          long long v174 = 0uLL;
          *(void *)&long long v175 = 0;
          unint64_t v58 = atomic_load(&realityio::tokens::ActionTokens);
          if (!v58) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
          }
          unint64_t v59 = *(void *)(v58 + 160) & 0xFFFFFFFFFFFFFFF8;
          if (v59)
          {
            uint64_t v60 = (char *)(v59 + 16);
            if (*(char *)(v59 + 39) < 0) {
              uint64_t v60 = *(char **)v60;
            }
          }
          else
          {
            uint64_t v60 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v60);
          MEMORY[0x2455CF7A0](v151, &__p);
          TgBase::emitTarget((uint64_t)v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v167, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v174, (pxrInternal__aapl__pxrReserved__::SdfPath *)v151);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v151);
          if (SHIBYTE(v173) < 0) {
            operator delete(__p);
          }
          unint64_t __p = &v174;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          unint64_t v61 = v163;
          if ((unint64_t)v163 >= v164)
          {
            char v62 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v162, &v167);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v163, &v167);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v61 + 1, (_DWORD *)&v167 + 1);
            char v62 = v61 + 2;
          }
          uint64_t v29 = a2;
          uint64_t v163 = v62;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v167);
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__sz.__r_.__value_.__l.__data_);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)((char *)&v179 + 8));
        if (SBYTE7(v179) < 0) {
          operator delete(p_p);
        }
        pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> *,std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(&v158);
      }
      std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v169, 0);
      unint64_t v36 = v37;
    }
    goto LABEL_132;
  }
  *(void *)a1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();

  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
}

void sub_23F7A003C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,pxrInternal__aapl__pxrReserved__::SdfPath *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,__int16 a55,uint64_t a56,uint64_t a57,char a58,int a59,__int16 a60)
{
  STACK[0x310] = (unint64_t)&a55;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a58);
  STACK[0x310] = (unint64_t)&a60;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a23);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&STACK[0x250], (void *)STACK[0x258]);
  _Unwind_Resume(a1);
}

uint64_t gatherMaterialsByIndex(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  v72[2] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v68, "/__builtin/standardPbrMaterial.__materialAsset");
  MEMORY[0x2455CF7A0](v61, &v68);
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)v68);
  }
  std::string::basic_string[abi:ne180100]<0>(&v68, "/__builtin/standardConstColorMaterial.__materialAsset");
  MEMORY[0x2455CF7A0](v60, &v68);
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)v68);
  }
  std::string::basic_string[abi:ne180100]<0>(&v68, "/__builtin/standardVertexColorMaterial.__materialAsset");
  MEMORY[0x2455CF7A0](v59, &v68);
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)v68);
  }
  std::string::basic_string[abi:ne180100]<0>(&v68, "/__builtin/standardNoMaterial.__materialAsset");
  MEMORY[0x2455CF7A0](v58, &v68);
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)v68);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v68, a1);
  char v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v68);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v52, v11, a2);
  unint64_t v12 = v69;
  if (v69 && atomic_fetch_add_explicit(v69 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v51 = 0;
  uint64_t v49 = MEMORY[0x263F90778] + 16;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v46 = 0;
  memset(v45, 0, sizeof(v45));
  if (v50 && (*(unsigned char *)(v50 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v49 + 32))(&v49))
  {
    MEMORY[0x2455CF810](&v68, "displayColor");
    int HasPossiblyInheritedPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPossiblyInheritedPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v49, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v68);
    if ((v68 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (HasPossiblyInheritedPrimvar)
    {
      MEMORY[0x2455CF810](&v41, "displayColor");
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance((uint64_t *)&v68, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v49, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v41);
      if ((v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v68, &v41);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v47, (int *)&v41);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v48);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v68)) {
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(&v41, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v68);
      }
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
    }
  }
  char v14 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, a2);
  if ((void *)(a3 + 8) != v14)
  {
    if (*(void *)&v45[0])
    {
      unint64_t v15 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v15) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
    }
    else
    {
      unint64_t v15 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v15) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v68, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v14 + 36), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v15 + 200));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v56, (int *)&v68);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v57);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
    goto LABEL_68;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v68, a1);
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v68);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v41, v16, a2);
  uint64_t v17 = v69;
  if (v69 && atomic_fetch_add_explicit(v69 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v40[3] = 0;
  v40[0] = MEMORY[0x263F90778] + 16;
  if (*(void *)&v45[0])
  {
    if (*(void *)&v45[0] == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v68, "/__builtin/standardConstColorMaterial");
      MEMORY[0x2455CF7A0](&v65, &v68);
      if (SHIBYTE(v70) < 0) {
        operator delete((void *)v68);
      }
      unint64_t v18 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v18) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v68, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v65, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v18 + 200));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v56, (int *)&v68);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v57);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    }
    else
    {
      unint64_t v21 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v21) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v65, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v21 + 416));
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((uint64_t *)&v68, (pxrInternal__aapl__pxrReserved__::SdfPath *)v59, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v65);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v56, (int *)&v68);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v57);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v65);
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()) {
      goto LABEL_64;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v68, &v47);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v68 + 1, &v48);
    uint64_t v69 = 0;
    char v70 = 0;
    uint64_t v71 = 0;
    unint64_t v22 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v22) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v23 = *(void *)(v22 + 160) & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      uint64_t v24 = (char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0) {
        uint64_t v24 = *(char **)v24;
      }
    }
    else
    {
      uint64_t v24 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, v24);
    MEMORY[0x2455CF7A0](v72, &v65);
    unint64_t v25 = a6[1];
    if (v25 >= a6[2])
    {
      uint64_t v26 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a6, (uint64_t)&v68);
    }
    else
    {
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a6[1], (uint64_t)&v68);
      uint64_t v26 = v25 + 40;
    }
    a6[1] = v26;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v72);
    char v62 = (void **)&v69;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v62);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
    if (v67 < 0) {
      operator delete(v65);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v68, &v56);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v68 + 1, &v57);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v63, &v47);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v64, &v48);
    uint64_t v69 = 0;
    char v70 = 0;
    uint64_t v71 = 0;
    uint64_t v65 = &v69;
    LOBYTE(v66) = 0;
    uint64_t v69 = operator new(8uLL);
    char v70 = v69;
    uint64_t v71 = v69 + 2;
    char v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v71, &v63, &v65, v69);
    unint64_t v27 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v27) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v28 = *(void *)(v27 + 184) & 0xFFFFFFFFFFFFFFF8;
    if (v28)
    {
      uint64_t v29 = (char *)(v28 + 16);
      if (*(char *)(v28 + 39) < 0) {
        uint64_t v29 = *(char **)v29;
      }
    }
    else
    {
      uint64_t v29 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, v29);
    MEMORY[0x2455CF7A0](v72, &v65);
    unint64_t v30 = a6[1];
    if (v30 >= a6[2])
    {
      uint64_t v31 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a6, (uint64_t)&v68);
    }
    else
    {
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a6[1], (uint64_t)&v68);
      uint64_t v31 = v30 + 40;
    }
    a6[1] = v31;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v72);
    char v62 = (void **)&v69;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v62);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
    if (v67 < 0) {
      operator delete(v65);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    unint64_t v20 = (void **)&v63;
  }
  else
  {
    unint64_t v19 = atomic_load(&realityio::tokens::EcsTokens);
    if (!v19) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v65, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v19 + 288));
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((uint64_t *)&v68, (pxrInternal__aapl__pxrReserved__::SdfPath *)v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v65);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v56, (int *)&v68);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v57);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    unint64_t v20 = (void **)&v65;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
LABEL_64:
  MEMORY[0x2455CF0D0](v40);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
  if (v42) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v42);
  }
LABEL_68:
  uint64_t v33 = *a5;
  uint64_t v32 = a5[1];
  unint64_t v34 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a4, &v41, a2);
  uint64_t v35 = *v34;
  if (!*v34)
  {
    uint64_t v35 = (uint64_t *)operator new(0x30uLL);
    uint64_t v69 = (_DWORD *)(a4 + 8);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v35 + 8, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v35 + 9, (_DWORD *)a2 + 1);
    v35[5] = 0;
    LOBYTE(v70) = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a4, v41, v34, v35);
    unint64_t v68 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)&v68, 0);
  }
  v35[5] = (v32 - v33) >> 3;
  unint64_t v36 = a5[1];
  if (v36 >= a5[2])
  {
    uint64_t v37 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, &v56);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a5[1], &v56);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v36 + 4), &v57);
    uint64_t v37 = v36 + 8;
  }
  a5[1] = v37;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v45);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
  MEMORY[0x2455CF0D0](&v49);
  if ((v55 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v58);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v59);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v60);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v61);
}

void sub_23F7A17EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,char a38)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(v38 - 144));
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a26);
  MEMORY[0x2455CF0D0](&a28);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a32);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a36);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a38);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v38 - 208));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v38 - 200));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v38 - 192));
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::getInputsForTransform(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t *a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v56 = MEMORY[0x263F90730] + 16;
  if (v57
    && (*(unsigned char *)(v57 + 57) & 8) == 0
    && (*(unsigned int (**)(uint64_t *))(MEMORY[0x263F90730] + 48))(&v56))
  {
    v74[0] = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps((uint64_t *)&v66, (pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v56, v74);
    if (v66 != v67)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, v60);
      MEMORY[0x2455CF810](v58, "xformOpOrder");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v69, (pxrInternal__aapl__pxrReserved__::SdfPath *)v60, (const pxrInternal__aapl__pxrReserved__::TfToken *)v58);
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      unint64_t v4 = atomic_load(&realityio::tokens::ActionTokens);
      if (!v4) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
      }
      unint64_t v5 = *(void *)(v4 + 160) & 0xFFFFFFFFFFFFFFF8;
      if (v5)
      {
        uint64_t v6 = (char *)(v5 + 16);
        if (*(char *)(v5 + 39) < 0) {
          uint64_t v6 = *(char **)v6;
        }
      }
      else
      {
        uint64_t v6 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v6);
      MEMORY[0x2455CF7A0](&v73, __p);
      unint64_t v7 = a2[1];
      if (v7 >= a2[2])
      {
        uint64_t v8 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v69);
      }
      else
      {
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v69);
        uint64_t v8 = v7 + 40;
      }
      a2[1] = v8;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
      v62[0] = &v70;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
      if (v65 < 0) {
        operator delete(__p[0]);
      }
      if (((uint64_t)v58[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v58[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v60);
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v66;
      uint64_t v9 = v67;
      if (v66 != v67)
      {
        do
        {
          OpName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName((uint64_t *)&v69, v10);
          if (((unint64_t)v69 & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t EmptyString = ((unint64_t)v69 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(OpName);
          }
          if ((*(void *)v13 & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v14 = (*(void *)v13 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
          }
          if (*(char *)(v14 + 23) >= 0) {
            unint64_t v15 = (const char *)v14;
          }
          else {
            unint64_t v15 = *(const char **)v14;
          }
          int v16 = *(char *)(EmptyString + 23);
          if (v16 >= 0) {
            size_t v17 = *(unsigned __int8 *)(EmptyString + 23);
          }
          else {
            size_t v17 = *(void *)(EmptyString + 8);
          }
          size_t v18 = strlen(v15);
          if (v17 >= v18)
          {
            size_t v20 = v18;
            if (v16 >= 0) {
              unint64_t v21 = (const char *)EmptyString;
            }
            else {
              unint64_t v21 = *(const char **)EmptyString;
            }
            BOOL v19 = strncmp(v21, v15, v20) == 0;
          }
          else
          {
            BOOL v19 = 0;
          }
          if ((v69 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (!v19)
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, &v69);
            pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName((uint64_t *)__p, v10);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)v60, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v69, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
            if (((uint64_t)__p[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            unint64_t v22 = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v22, v60);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v69 + 1, (_DWORD *)v60 + 1);
            uint64_t v70 = 0;
            uint64_t v71 = 0;
            uint64_t v72 = 0;
            unint64_t v23 = atomic_load(&realityio::tokens::ActionTokens);
            if (!v23) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
            }
            unint64_t v24 = *(void *)(v23 + 160) & 0xFFFFFFFFFFFFFFF8;
            if (v24)
            {
              unint64_t v25 = (char *)(v24 + 16);
              if (*(char *)(v24 + 39) < 0) {
                unint64_t v25 = *(char **)v25;
              }
            }
            else
            {
              unint64_t v25 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v25);
            MEMORY[0x2455CF7A0](&v73, __p);
            unint64_t v26 = a2[1];
            if (v26 >= a2[2])
            {
              uint64_t v27 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v69);
            }
            else
            {
              std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v69);
              uint64_t v27 = v26 + 40;
            }
            a2[1] = v27;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
            v62[0] = &v70;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
            if (v65 < 0) {
              operator delete(__p[0]);
            }
            if (a3)
            {
              uint64_t v70 = 0;
              uint64_t v71 = 0;
              uint64_t v72 = 0;
              unint64_t v28 = atomic_load(&realityio::tokens::ActionTokens);
              if (!v28) {
                pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
              }
              unint64_t v29 = *(void *)(v28 + 264) & 0xFFFFFFFFFFFFFFF8;
              if (v29)
              {
                unint64_t v30 = (char *)(v29 + 16);
                if (*(char *)(v29 + 39) < 0) {
                  unint64_t v30 = *(char **)v30;
                }
              }
              else
              {
                unint64_t v30 = "";
              }
              std::string::basic_string[abi:ne180100]<0>(__p, v30);
              MEMORY[0x2455CF7A0](&v73, __p);
              unint64_t v31 = a2[1];
              if (v31 >= a2[2])
              {
                uint64_t v32 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v69);
              }
              else
              {
                std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v69);
                uint64_t v32 = v31 + 40;
              }
              a2[1] = v32;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
              v62[0] = &v70;
              std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
              if (v65 < 0) {
                operator delete(__p[0]);
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v60);
          }
          uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)((char *)v10 + 136);
        }
        while (v10 != v9);
      }
    }
    uint64_t v69 = &v66;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](&v69);
  }
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v66, "framesPerSecond");
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    unint64_t v33 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v33) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v34 = *(void *)(v33 + 160) & 0xFFFFFFFFFFFFFFF8;
    if (v34)
    {
      uint64_t v35 = (char *)(v34 + 16);
      if (*(char *)(v34 + 39) < 0) {
        uint64_t v35 = *(char **)v35;
      }
    }
    else
    {
      uint64_t v35 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v35);
    MEMORY[0x2455CF7A0](&v73, __p);
    unint64_t v36 = a2[1];
    if (v36 >= a2[2])
    {
      uint64_t v37 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v69);
    }
    else
    {
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v69);
      uint64_t v37 = v36 + 40;
    }
    a2[1] = v37;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
    v62[0] = &v70;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
    if (v65 < 0) {
      operator delete(__p[0]);
    }
    if (v68 < 0) {
      operator delete(v66);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "startTimeCode");
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    unint64_t v38 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v38) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v39 = *(void *)(v38 + 160) & 0xFFFFFFFFFFFFFFF8;
    if (v39)
    {
      uint64_t v40 = (char *)(v39 + 16);
      if (*(char *)(v39 + 39) < 0) {
        uint64_t v40 = *(char **)v40;
      }
    }
    else
    {
      uint64_t v40 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(v62, v40);
    MEMORY[0x2455CF7A0](&v73, v62);
    unint64_t v41 = a2[1];
    if (v41 >= a2[2])
    {
      uint64_t v42 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v69);
    }
    else
    {
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v69);
      uint64_t v42 = v41 + 40;
    }
    a2[1] = v42;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
    v60[0] = &v70;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
    if (v63 < 0) {
      operator delete(v62[0]);
    }
    if (v65 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v62, "endTimeCode");
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    unint64_t v43 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v43) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v44 = *(void *)(v43 + 160) & 0xFFFFFFFFFFFFFFF8;
    if (v44)
    {
      uint64_t v45 = (char *)(v44 + 16);
      if (*(char *)(v44 + 39) < 0) {
        uint64_t v45 = *(char **)v45;
      }
    }
    else
    {
      uint64_t v45 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(v60, v45);
    MEMORY[0x2455CF7A0](&v73, v60);
    unint64_t v46 = a2[1];
    if (v46 >= a2[2])
    {
      uint64_t v47 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v69);
    }
    else
    {
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v69);
      uint64_t v47 = v46 + 40;
    }
    a2[1] = v47;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
    v58[0] = &v70;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
    if (v61 < 0) {
      operator delete(v60[0]);
    }
    if (v63 < 0) {
      operator delete(v62[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v60, "timeCodesPerSecond");
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    unint64_t v48 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v48) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v49 = *(void *)(v48 + 160) & 0xFFFFFFFFFFFFFFF8;
    if (v49)
    {
      uint64_t v50 = (char *)(v49 + 16);
      if (*(char *)(v49 + 39) < 0) {
        uint64_t v50 = *(char **)v50;
      }
    }
    else
    {
      uint64_t v50 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(v58, v50);
    MEMORY[0x2455CF7A0](&v73, v58);
    unint64_t v51 = a2[1];
    if (v51 >= a2[2])
    {
      uint64_t v52 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v69);
    }
    else
    {
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v69);
      uint64_t v52 = v51 + 40;
    }
    a2[1] = v52;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
    *(void *)uint64_t v74 = &v70;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
    if (v59 < 0) {
      operator delete(v58[0]);
    }
    if (v61 < 0) {
      operator delete(v60[0]);
    }
  }
  return MEMORY[0x2455CEF00](&v56);
}

void sub_23F7A253C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  TgBase::TargetInfoT::~TargetInfoT((TgBase::TargetInfoT *)(v46 - 136));
  if (a40 < 0) {
    operator delete(__p);
  }
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a23);
  *(void *)(v46 - 136) = &a41;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 136));
  MEMORY[0x2455CEF00](&a14);
  _Unwind_Resume(a1);
}

uint64_t TgECS::ecsBlendShapeWeights(void *a1, int a2, pxrInternal__aapl__pxrReserved__::UsdPrim *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v7 = atomic_load(&realityio::tokens::EcsTokens);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  TgECS::genECSPath((TgECS *)v21, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 88));
  memset(v20, 0, sizeof(v20));
  uint64_t v8 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)a4;
  if (*(void *)a4 != *(void *)(a4 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath((uint64_t *)&v15, a3, v8);
    int v10 = (int)v15;
    uint64_t v11 = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, &v17);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, &v18);
    uint64_t v14 = v19;
    if ((v19 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  *a1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  unint64_t v15 = (void **)v20;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v21);
}

void sub_23F7A3318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pxrInternal__aapl__pxrReserved__::SdfPath *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  unint64_t __p = (void *)(v50 - 208);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v50 - 128));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a9);
  *(void *)(v50 - 208) = v50 - 160;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 208));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v50 - 136));
  _Unwind_Resume(a1);
}

uint64_t TgECS::ecsMeshDeformation(TgECS *a1, uint64_t a2, int *a3, uint64_t a4, char a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v26[0] = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(MEMORY[0x263F90690] + 16);
  char v10 = realityio::isCatmullClarkSurface((realityio *)v26, v9) | a5;
  MEMORY[0x2455CE7A0](v26);
  if ((v10 & 1) == 0)
  {
    int v21 = *a3;
    uint64_t v11 = *((void *)a3 + 1);
    uint64_t v22 = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, a3 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, a3 + 5);
    uint64_t v12 = *((void *)a3 + 3);
    uint64_t v25 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v25 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  unint64_t v13 = atomic_load(&realityio::tokens::EcsTokens);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  TgECS::genECSPath(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v13 + 256));
  memset(v26, 0, sizeof(v26));
  unint64_t v14 = atomic_load(&realityio::tokens::ActionTokens);
  if (!v14) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v15 = *(void *)(v14 + 216) & 0xFFFFFFFFFFFFFFF8;
  if (v15)
  {
    uint64_t v16 = (char *)(v15 + 16);
    if (*(char *)(v15 + 39) < 0) {
      uint64_t v16 = *(char **)v16;
    }
  }
  else
  {
    uint64_t v16 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  MEMORY[0x2455CF7A0](v20, __p);
  TgBase::emitTarget(a2, a1, v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v26;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v28);
}

void sub_23F7A388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a18);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v24 - 80));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v24 - 72));
  _Unwind_Resume(a1);
}

void anonymous namespace'::appendAnimControls(uint64_t *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v16, "framesPerSecond");
  unint64_t v2 = a1[1];
  if (v2 >= a1[2])
  {
    uint64_t v3 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, &v18);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1[1], &v18);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v2 + 4), (_DWORD *)&v18 + 1);
    uint64_t v3 = v2 + 8;
  }
  a1[1] = v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "startTimeCode");
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t v5 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, &v18);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1[1], &v18);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v4 + 4), (_DWORD *)&v18 + 1);
    uint64_t v5 = v4 + 8;
  }
  a1[1] = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "endTimeCode");
  unint64_t v6 = a1[1];
  if (v6 >= a1[2])
  {
    uint64_t v7 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, &v18);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1[1], &v18);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v6 + 4), (_DWORD *)&v18 + 1);
    uint64_t v7 = v6 + 8;
  }
  a1[1] = v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "timeCodesPerSecond");
  unint64_t v8 = a1[1];
  if (v8 >= a1[2])
  {
    uint64_t v9 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, &v18);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1[1], &v18);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v8 + 4), (_DWORD *)&v18 + 1);
    uint64_t v9 = v8 + 8;
  }
  a1[1] = v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_23F7A3B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 - 40));
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t boundPrimHasSkelAnimationSource(pxrInternal__aapl__pxrReserved__::UsdPrim *a1)
{
  unint64_t v2 = atomic_load(MEMORY[0x263F90540]);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(&v6, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v2 + 136));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6))
  {
    memset(v5, 0, sizeof(v5));
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
    unint64_t v4 = v5;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  return 0;
}

void sub_23F7A3DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a12);
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  a12 = (void **)&a16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)(v16 - 64));
  _Unwind_Resume(a1);
}

void TgECS::gatherBoundMeshes(TgECS *a1, Exec **a2, int *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v264 = *MEMORY[0x263EF8340];
  int64x2_t v257 = 0uLL;
  v258 = 0;
  uint64_t v254 = 0;
  unint64_t v255 = 0;
  unint64_t v256 = 0;
  unint64_t v251 = 0;
  v252 = 0;
  unint64_t v253 = 0;
  int64x2_t v248 = 0;
  v249 = 0;
  unint64_t v250 = 0;
  uint64_t v246 = 0;
  uint64_t v247 = 0;
  uint64_t v245 = &v246;
  uint64_t v8 = *a7;
  uint64_t v159 = a7[1];
  if (*a7 != v159)
  {
    uint64_t v160 = (uint64_t)(a2 + 25);
    unint64_t v164 = (uint64_t *)(a2 + 11);
    uint64_t v158 = (uint64_t)(a2 + 31);
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, v231);
      uint64_t v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__equal_range_multi<pxrInternal__aapl__pxrReserved__::SdfPath>(v160, v231);
      char v11 = v10;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v231);
      if (v9 != v11)
      {
        do
        {
          uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v164);
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)v231, v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 36));
          if (!realityio::isGuide((realityio *)v231, v13))
          {
            unint64_t v14 = v255;
            if ((unint64_t)v255 >= v256)
            {
              char v15 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v254, (_DWORD *)v9 + 9);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v255, (_DWORD *)v9 + 9);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v14 + 1, (_DWORD *)v9 + 10);
              char v15 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v14 + 8);
            }
            unint64_t v255 = v15;
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, &v238);
            uint64_t v16 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v245, &__p, (void *)((char *)v9 + 36));
            char v17 = (char *)*v16;
            if (!*v16)
            {
              char v17 = (char *)operator new(0x30uLL);
              unint64_t v228 = &v246;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v17 + 7, (_DWORD *)v9 + 9);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v17 + 8, (_DWORD *)v9 + 10);
              *(void *)(v17 + 36) = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
              LOBYTE(v229) = 1;
              uint64_t v18 = __p;
              *(void *)char v17 = 0;
              *((void *)v17 + 1) = 0;
              *((void *)v17 + 2) = v18;
              char *v16 = v17;
              char v19 = (uint64_t *)v17;
              if (*v245)
              {
                uint64_t v245 = (uint64_t **)*v245;
                char v19 = (uint64_t *)*v16;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v246, v19);
              ++v247;
              uint64_t v227 = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)&v227, 0);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v17 + 36), (int *)&v238);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v17 + 40));
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v238);
          }
          if ((v231[24] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v231[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v231[16]);
          if (*(void *)&v231[8]) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v231[8]);
          }
          size_t v20 = (void *)v9[1];
          if (v20)
          {
            do
            {
              int v21 = v20;
              size_t v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              int v21 = (void *)v9[2];
              BOOL v22 = *v21 == (void)v9;
              uint64_t v9 = v21;
            }
            while (!v22);
          }
          uint64_t v9 = v21;
        }
        while (v21 != v11);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v242 = MEMORY[0x263F90708] + 16;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, v231);
      uint64_t v23 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(v158, v231);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v231);
      if (v23)
      {
        *(_DWORD *)v231 = *(_DWORD *)v8;
        uint64_t v24 = *(void *)(v8 + 8);
        *(void *)&v231[8] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v231[16], (_DWORD *)(v8 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v231[20], (_DWORD *)(v8 + 20));
        uint64_t v25 = *(void *)(v8 + 24);
        *(void *)&v231[24] = v25;
        if ((v25 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)&v231[24] &= 0xFFFFFFFFFFFFFFF8;
        }
        while ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)v231) & 1) == 0)
        {
          unint64_t v26 = atomic_load(MEMORY[0x263F90540]);
          if (!v26) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
          }
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((uint64_t *)&v238, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v231, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v26 + 136));
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v238)
            && (pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v238) & 1) != 0)
          {
            goto LABEL_45;
          }
          if ((v241 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v241 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v240);
          if (v239) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v239);
          }
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)v231, (uint64_t)&v227);
          *(_DWORD *)v231 = v227;
          uint64_t v27 = (uint64_t)v228;
          unint64_t v228 = 0;
          uint64_t v28 = *(void *)&v231[8];
          *(void *)&v231[8] = v27;
          if (v28) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v231[16], (int *)&v229);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v231[20]);
          if ((v231[24] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v231[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *(void *)&v231[24] = *((void *)&v229 + 1);
          *((void *)&v229 + 1) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v229);
          if (v228) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v228);
          }
        }
        LODWORD(v238) = 4;
        uint64_t v239 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        uint64_t v241 = 0;
LABEL_45:
        if ((v231[24] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v231[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v231[16]);
        if (*(void *)&v231[8]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v231[8]);
        }
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v238))
        {
          memset(v231, 0, 24);
          pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
          uint64_t v29 = *(void *)v231;
          if (*(void *)v231 != *(void *)&v231[8])
          {
            unint64_t v30 = v252;
            if ((unint64_t)v252 >= v253)
            {
              unint64_t v31 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v251, *(_DWORD **)v231);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v252, *(_DWORD **)v231);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v30 + 1, (_DWORD *)(v29 + 4));
              unint64_t v31 = v30 + 2;
            }
            v252 = v31;
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, &v227);
            uint64_t v54 = v249;
            if ((unint64_t)v249 >= v250)
            {
              uint64_t v55 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v248, &v227);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v249, &v227);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v54 + 1, (_DWORD *)&v227 + 1);
              uint64_t v55 = v54 + 2;
            }
            v249 = v55;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v227);
          }
          uint64_t v227 = v231;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v227);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, v231);
          uint64_t v32 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__equal_range_multi<pxrInternal__aapl__pxrReserved__::SdfPath>(v160, v231);
          unint64_t v34 = v33;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          uint64_t v35 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v231);
          if (v32 != v34)
          {
            do
            {
              unint64_t v36 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v164);
              pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)v231, v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v32 + 36));
              unint64_t v37 = atomic_load(MEMORY[0x263F90540]);
              if (!v37) {
                pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
              }
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((uint64_t *)&v227, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v231, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v37 + 136));
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v227))
              {
                uint64_t v224 = 0;
                unint64_t __p = 0;
                *(void *)&long long v225 = 0;
                pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
                unint64_t v38 = __p;
                if (__p != v224)
                {
                  unint64_t v39 = v252;
                  if ((unint64_t)v252 >= v253)
                  {
                    uint64_t v40 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v251, __p);
                  }
                  else
                  {
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v252, __p);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v39 + 1, v38 + 1);
                    uint64_t v40 = v39 + 2;
                  }
                  v252 = v40;
                  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, &p_p);
                  unint64_t v41 = v249;
                  if ((unint64_t)v249 >= v250)
                  {
                    uint64_t v42 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v248, &p_p);
                  }
                  else
                  {
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v249, &p_p);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v41 + 1, (_DWORD *)&p_p + 1);
                    uint64_t v42 = v41 + 2;
                  }
                  v249 = v42;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&p_p);
                }
                p_p = &__p;
                std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&p_p);
              }
              if ((BYTE8(v229) & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v229 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v229);
              if (v228) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v228);
              }
              if ((v231[24] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v231[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v231[16]);
              uint64_t v35 = *(pxrInternal__aapl__pxrReserved__ **)&v231[8];
              if (*(void *)&v231[8]) {
                uint64_t v35 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v231[8]);
              }
              unint64_t v43 = (void *)v32[1];
              if (v43)
              {
                do
                {
                  unint64_t v44 = v43;
                  unint64_t v43 = (void *)*v43;
                }
                while (v43);
              }
              else
              {
                do
                {
                  unint64_t v44 = (void *)v32[2];
                  BOOL v22 = *v44 == (void)v32;
                  uint64_t v32 = v44;
                }
                while (!v22);
              }
              uint64_t v32 = v44;
            }
            while (v44 != v34);
          }
          uint64_t UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v35);
          unint64_t v47 = *(void *)UsdPrimDefaultPredicate;
          uint64_t v46 = *(void *)(UsdPrimDefaultPredicate + 8);
          uint64_t v48 = *(void *)(UsdPrimDefaultPredicate + 16);
          if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
            && ((v47 & 0x2000) != 0 || (v46 & 0x2000) == 0))
          {
            v47 |= 0x2000uLL;
            v46 &= ~0x2000uLL;
          }
          uint64_t v227 = (void *)v47;
          unint64_t v228 = (uint64_t **)v46;
          *(void *)&long long v229 = v48;
          pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(v8, (uint64_t *)&v227, (uint64_t)v231);
          uint64_t v227 = *(void **)v231;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v228, &v231[8]);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v228 + 1, &v231[12]);
          long long v229 = *(_OWORD *)&v231[16];
          unint64_t v230 = v232;
          unint64_t __p = v233;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v224, &v234);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v224 + 1, &v235);
          long long v225 = v236;
          uint64_t v226 = v237;
          while (v227 != __p
               || v228 != v224
               || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v229, (uint64_t)&v225))
          {
            unint64_t v49 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v227, (uint64_t)&p_p);
            pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(v49);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_p, v195);
              uint64_t v50 = v252;
              if ((unint64_t)v252 >= v253)
              {
                unint64_t v51 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v251, v195);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v252, v195);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v50 + 1, (_DWORD *)v195 + 1);
                unint64_t v51 = v50 + 2;
              }
              v252 = v51;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v195);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, v195);
              uint64_t v52 = v249;
              if ((unint64_t)v249 >= v250)
              {
                uint64_t v53 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v248, v195);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v249, v195);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v52 + 1, (_DWORD *)v195 + 1);
                uint64_t v53 = v52 + 2;
              }
              v249 = v53;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v195);
            }
            if ((v222 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v222 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v221);
            if (v220) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v220);
            }
            pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v227);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v224);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v228);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v234);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v231[8]);
        }
        if ((v241 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v241 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v240);
        if (v239) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v239);
        }
      }
      MEMORY[0x2455CEDD0](&v242);
      v8 += 32;
    }
    while (v8 != v159);
  }
  char v218 = 0;
  int v213 = *a3;
  uint64_t v56 = *((void *)a3 + 1);
  uint64_t v214 = v56;
  if (v56) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v57 = a3 + 4;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v215, a3 + 4);
  unint64_t v58 = a3 + 5;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v216, a3 + 5);
  uint64_t v59 = *((void *)a3 + 3);
  uint64_t v217 = v59;
  if ((v59 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v217 &= 0xFFFFFFFFFFFFFFF8;
  }
  TgECS::meshesUnderAndIncluding((uint64_t *)&v238, (uint64_t)a2, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v213, &v218);
  if ((v217 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v217 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v215);
  if (v214) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v214);
  }
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>((uint64_t *)&v254, v255, v238, v239, (v239 - v238) >> 3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  char v209 = 0;
  LODWORD(v204) = *a3;
  uint64_t v60 = *((void *)a3 + 1);
  uint64_t v205 = v60;
  if (v60) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v206, v57);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v207, v58);
  uint64_t v61 = *((void *)a3 + 3);
  uint64_t v208 = v61;
  if ((v61 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v208 &= 0xFFFFFFFFFFFFFFF8;
  }
  TgECS::ecsMeshes(a1, a2, &v204, a4, &v254, (uint64_t)&v245, &v212, a8, (uint64_t)&v210, &v209);
  if ((v208 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v208 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v206);
  if (v205) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v205);
  }
  int v198 = *a3;
  uint64_t v62 = *((void *)a3 + 1);
  uint64_t v199 = v62;
  if (v62) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v200, v57);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v201, v58);
  uint64_t v63 = *((void *)a3 + 3);
  uint64_t v202 = v63;
  if ((v63 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v202 &= 0xFFFFFFFFFFFFFFF8;
  }
  TgECS::ecsBlendShapeWeights(&v203, (int)a2, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v198, (uint64_t)&v254);
  if ((v202 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v202 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
  if (v199) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v199);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    unint64_t v64 = a5[1];
    if (v64 >= a5[2])
    {
      uint64_t v65 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, &v203);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a5[1], &v203);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v64 + 4), (_DWORD *)&v203 + 1);
      uint64_t v65 = v64 + 8;
    }
    a5[1] = v65;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    unint64_t v66 = a5[1];
    if (v66 >= a5[2])
    {
      uint64_t v67 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, &v210);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a5[1], &v210);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v66 + 4), &v211);
      uint64_t v67 = v66 + 8;
    }
    a5[1] = v67;
  }
  uint64_t v220 = 0;
  p_p = 0;
  unint64_t v221 = 0;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, v231);
  unint64_t v68 = atomic_load(&realityio::tokens::EcsTokens);
  if (!v68) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  uint64_t v163 = a3 + 4;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v231);
  v243 = 0;
  uint64_t v242 = 0;
  uint64_t v244 = 0;
  memset(v195, 0, sizeof(v195));
  if (v252 != v251)
  {
    uint64_t v69 = v251 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v261, v251);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v261 + 1, v69);
    uint64_t v70 = v248 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v180, v248);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v180 + 1, v70);
    unint64_t v71 = atomic_load(&realityio::tokens::EcsTokens);
    if (v71)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v260, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v180, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v71 + 352));
      *(void *)&v231[8] = 0;
      *(void *)&v231[16] = 0;
      *(void *)v231 = &v231[8];
      MEMORY[0x2455CF810](&v227, "anim");
      unint64_t __p = &v227;
      uint64_t v72 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v231, (uint64_t *)&v227, (uint64_t **)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v72 + 5), &v261);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v72 + 44, (_DWORD *)&v261 + 1);
      if ((v227 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v227 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v227, "joints");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v259, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v180, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v227);
      if ((v227 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v227 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v227, "joints");
      unint64_t __p = &v227;
      uint64_t v73 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v231, (uint64_t *)&v227, (uint64_t **)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v73 + 5), &v259);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v73 + 44, (_DWORD *)&v259 + 1);
      if ((v227 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v227 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v227, "restTransforms");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v194, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v180, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v227);
      if ((v227 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v227 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v227, "restTransforms");
      unint64_t __p = &v227;
      uint64_t v74 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v231, (uint64_t *)&v227, (uint64_t **)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v74 + 5), &v194);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v74 + 44, (_DWORD *)&v194 + 1);
      if ((v227 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v227 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v227, "joints");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v193, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v261, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v227);
      if ((v227 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v227 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v227, "animJoints");
      unint64_t __p = &v227;
      unint64_t v75 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v231, (uint64_t *)&v227, (uint64_t **)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v75 + 5), &v193);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v75 + 44, (_DWORD *)&v193 + 1);
      if ((v227 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v227 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v228 = 0;
      uint64_t v227 = 0;
      *(void *)&long long v229 = 0;
      unint64_t v76 = atomic_load(&realityio::tokens::ActionTokens);
      if (v76)
      {
        unint64_t v77 = *(void *)(v76 + 160) & 0xFFFFFFFFFFFFFFF8;
        if (v77)
        {
          int v78 = (char *)(v77 + 16);
          if (*(char *)(v77 + 39) < 0) {
            int v78 = *(char **)v78;
          }
        }
        else
        {
          int v78 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, v78);
        MEMORY[0x2455CF7A0](&v191, &__p);
        TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v261, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v227, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v191);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v191);
        if (SBYTE7(v225) < 0) {
          operator delete(__p);
        }
        unint64_t __p = &v227;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        unint64_t v228 = 0;
        uint64_t v227 = 0;
        *(void *)&long long v229 = 0;
        unint64_t v79 = atomic_load(&realityio::tokens::ActionTokens);
        if (v79)
        {
          unint64_t v80 = *(void *)(v79 + 160) & 0xFFFFFFFFFFFFFFF8;
          if (v80)
          {
            uint64_t v81 = (char *)(v80 + 16);
            if (*(char *)(v80 + 39) < 0) {
              uint64_t v81 = *(char **)v81;
            }
          }
          else
          {
            uint64_t v81 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v81);
          MEMORY[0x2455CF7A0](&v191, &__p);
          TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v259, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v227, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v191);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v191);
          if (SBYTE7(v225) < 0) {
            operator delete(__p);
          }
          unint64_t __p = &v227;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          unint64_t v228 = 0;
          uint64_t v227 = 0;
          *(void *)&long long v229 = 0;
          unint64_t v82 = atomic_load(&realityio::tokens::ActionTokens);
          if (v82)
          {
            unint64_t v83 = *(void *)(v82 + 160) & 0xFFFFFFFFFFFFFFF8;
            if (v83)
            {
              uint64_t v84 = (char *)(v83 + 16);
              if (*(char *)(v83 + 39) < 0) {
                uint64_t v84 = *(char **)v84;
              }
            }
            else
            {
              uint64_t v84 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, v84);
            MEMORY[0x2455CF7A0](&v191, &__p);
            TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v194, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v227, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v191);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v191);
            if (SBYTE7(v225) < 0) {
              operator delete(__p);
            }
            unint64_t __p = &v227;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            unint64_t v228 = 0;
            uint64_t v227 = 0;
            *(void *)&long long v229 = 0;
            unint64_t v85 = atomic_load(&realityio::tokens::ActionTokens);
            if (v85)
            {
              unint64_t v86 = *(void *)(v85 + 160) & 0xFFFFFFFFFFFFFFF8;
              if (v86)
              {
                uint64_t v87 = (char *)(v86 + 16);
                if (*(char *)(v86 + 39) < 0) {
                  uint64_t v87 = *(char **)v87;
                }
              }
              else
              {
                uint64_t v87 = "";
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, v87);
              MEMORY[0x2455CF7A0](&v191, &__p);
              TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v193, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v227, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v191);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v191);
              if (SBYTE7(v225) < 0) {
                operator delete(__p);
              }
              unint64_t __p = &v227;
              std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              MEMORY[0x2455CF810](&__p, "rotations");
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v227, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v261, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v227);
              if ((__p & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              MEMORY[0x2455CF810](&__p, "scales");
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v227, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v261, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v227);
              if ((__p & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              MEMORY[0x2455CF810](&__p, "translations");
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v227, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v261, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v227);
              if ((__p & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              MEMORY[0x2455CF810](&v227, "rotations_samples");
              unint64_t __p = &v227;
              unint64_t v88 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v231, (uint64_t *)&v227, (uint64_t **)&__p);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v88 + 5), &v191);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v88 + 44, &v192);
              if ((v227 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v227 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              MEMORY[0x2455CF810](&v227, "scales_samples");
              unint64_t __p = &v227;
              long long v89 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v231, (uint64_t *)&v227, (uint64_t **)&__p);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v89 + 5), &v189);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v89 + 44, &v190);
              if ((v227 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v227 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              MEMORY[0x2455CF810](&v227, "translations_samples");
              unint64_t __p = &v227;
              uint64_t v90 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v231, (uint64_t *)&v227, (uint64_t **)&__p);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v90 + 5), &v187);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v90 + 44, &v188);
              if ((v227 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v227 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              unint64_t v228 = 0;
              uint64_t v227 = 0;
              *(void *)&long long v229 = 0;
              unint64_t v91 = atomic_load(&realityio::tokens::ActionTokens);
              if (v91)
              {
                unint64_t v92 = *(void *)(v91 + 264) & 0xFFFFFFFFFFFFFFF8;
                if (v92)
                {
                  uint64_t v93 = (char *)(v92 + 16);
                  if (*(char *)(v92 + 39) < 0) {
                    uint64_t v93 = *(char **)v93;
                  }
                }
                else
                {
                  uint64_t v93 = "";
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, v93);
                MEMORY[0x2455CF7A0](v186, &__p);
                TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v191, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v227, (pxrInternal__aapl__pxrReserved__::SdfPath *)v186);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v186);
                if (SBYTE7(v225) < 0) {
                  operator delete(__p);
                }
                unint64_t __p = &v227;
                std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                unint64_t v228 = 0;
                uint64_t v227 = 0;
                *(void *)&long long v229 = 0;
                unint64_t v94 = atomic_load(&realityio::tokens::ActionTokens);
                if (v94)
                {
                  unint64_t v95 = *(void *)(v94 + 264) & 0xFFFFFFFFFFFFFFF8;
                  if (v95)
                  {
                    unint64_t v96 = (char *)(v95 + 16);
                    if (*(char *)(v95 + 39) < 0) {
                      unint64_t v96 = *(char **)v96;
                    }
                  }
                  else
                  {
                    unint64_t v96 = "";
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__p, v96);
                  MEMORY[0x2455CF7A0](v186, &__p);
                  TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v189, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v227, (pxrInternal__aapl__pxrReserved__::SdfPath *)v186);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v186);
                  if (SBYTE7(v225) < 0) {
                    operator delete(__p);
                  }
                  unint64_t __p = &v227;
                  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  unint64_t v228 = 0;
                  uint64_t v227 = 0;
                  *(void *)&long long v229 = 0;
                  unint64_t v97 = atomic_load(&realityio::tokens::ActionTokens);
                  if (v97)
                  {
                    unint64_t v98 = *(void *)(v97 + 264) & 0xFFFFFFFFFFFFFFF8;
                    if (v98)
                    {
                      unint64_t v99 = (char *)(v98 + 16);
                      if (*(char *)(v98 + 39) < 0) {
                        unint64_t v99 = *(char **)v99;
                      }
                    }
                    else
                    {
                      unint64_t v99 = "";
                    }
                    std::string::basic_string[abi:ne180100]<0>(&__p, v99);
                    MEMORY[0x2455CF7A0](v186, &__p);
                    TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v187, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v227, (pxrInternal__aapl__pxrReserved__::SdfPath *)v186);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v186);
                    if (SBYTE7(v225) < 0) {
                      operator delete(__p);
                    }
                    unint64_t __p = &v227;
                    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                    TgBase::emitGroup((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v260);
                  }
                  pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
                }
                pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
              }
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
            }
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
          }
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v100 = p_p;
  for (uint64_t i = v220; v100 != (void **)i; ++v100)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v100);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, (_DWORD *)v100 + 1);
    memset(v231, 0, 24);
    unint64_t v102 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v102) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v103 = *(void *)(v102 + 160) & 0xFFFFFFFFFFFFFFF8;
    if (v103)
    {
      uint64_t v104 = (char *)(v103 + 16);
      if (*(char *)(v103 + 39) < 0) {
        uint64_t v104 = *(char **)v104;
      }
    }
    else
    {
      uint64_t v104 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v227, v104);
    MEMORY[0x2455CF7A0](&v261, &v227);
    TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v231, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v261);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v261);
    if (SBYTE7(v229) < 0) {
      operator delete(v227);
    }
    uint64_t v227 = v231;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v227);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  }
  uint64_t v105 = (_DWORD *)v242;
  for (j = v243; v105 != j; v105 += 2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v231, v105);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v231[4], v105 + 1);
    unint64_t v107 = v220;
    if ((unint64_t)v220 >= v221)
    {
      int64x2_t v108 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&p_p, v231);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v220, v231);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v107 + 1, &v231[4]);
      int64x2_t v108 = v107 + 8;
    }
    uint64_t v220 = v108;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v231);
  }
  if (v254 != v255)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath((uint64_t *)&v227, (pxrInternal__aapl__pxrReserved__::UsdPrim *)a3, v254);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    int v181 = (int)v227;
    uint64_t v182 = (uint64_t)v228;
    if (v228) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v228 + 6, 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v183, &v229);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v184, (_DWORD *)&v229 + 1);
    uint64_t v185 = *((void *)&v229 + 1);
    if ((BYTE8(v229) & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v229 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v185 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v227, &v196);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v227 + 1, &v197);
  long long v229 = 0uLL;
  unint64_t v228 = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(&v228, p_p, v220, (v220 - (char *)p_p) >> 3);
  unint64_t v109 = atomic_load(&realityio::tokens::ActionTokens);
  if (!v109) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v110 = *(void *)(v109 + 288) & 0xFFFFFFFFFFFFFFF8;
  if (v110)
  {
    long long v111 = (char *)(v110 + 16);
    if (*(char *)(v110 + 39) < 0) {
      long long v111 = *(char **)v111;
    }
  }
  else
  {
    long long v111 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v111);
  MEMORY[0x2455CF7A0](&v230, &__p);
  uint64_t v112 = v257.i64[1];
  if (v257.i64[1] >= (unint64_t)v258)
  {
    unint64_t v114 = 0xCCCCCCCCCCCCCCCDLL * ((v257.i64[1] - v257.i64[0]) >> 3);
    if (v114 + 1 > 0x666666666666666) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v115 = 0x999999999999999ALL * ((uint64_t)&v258[-v257.i64[0]] >> 3);
    if (v115 <= v114 + 1) {
      unint64_t v115 = v114 + 1;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v258[-v257.i64[0]] >> 3) >= 0x333333333333333) {
      unint64_t v116 = 0x666666666666666;
    }
    else {
      unint64_t v116 = v115;
    }
    v232 = &v258;
    if (v116)
    {
      if (v116 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v117 = (char *)operator new(40 * v116);
    }
    else
    {
      int v117 = 0;
    }
    uint64_t v118 = (uint64_t)&v117[40 * v114];
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v118, (uint64_t)&v227);
    uint64_t v119 = v257.i64[1];
    uint64_t v120 = v257.i64[0];
    if (v257.i64[1] == v257.i64[0])
    {
      int64x2_t v122 = vdupq_n_s64(v257.u64[1]);
      uint64_t v121 = v118;
    }
    else
    {
      uint64_t v121 = v118;
      do
      {
        v121 -= 40;
        v119 -= 40;
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v121, v119);
      }
      while (v119 != v120);
      int64x2_t v122 = v257;
    }
    uint64_t v113 = v118 + 40;
    v257.i64[0] = v121;
    v257.i64[1] = v113;
    *(int64x2_t *)&v231[8] = v122;
    uint64_t v123 = v258;
    v258 = &v117[40 * v116];
    *(void *)&v231[24] = v123;
    *(void *)v231 = v122.i64[0];
    std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v231);
  }
  else
  {
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v257.i64[1], (uint64_t)&v227);
    uint64_t v113 = v112 + 40;
  }
  v257.i64[1] = v113;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v230);
  *(void *)v231 = &v228;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v231);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v227);
  uint64_t v124 = (uint64_t)a2;
  if (SBYTE7(v225) < 0) {
    operator delete(__p);
  }
  unint64_t v125 = a6[1];
  if (v125 >= a6[2])
  {
    uint64_t v126 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a6, &v196);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a6[1], &v196);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v125 + 4), &v197);
    uint64_t v126 = v125 + 8;
  }
  a6[1] = v126;
  if (a7[1] != *a7)
  {
    int v175 = *a3;
    uint64_t v127 = *((void *)a3 + 1);
    uint64_t v176 = v127;
    if (v127) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v127 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v177, v163);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v178, v58);
    uint64_t v128 = *((void *)a3 + 3);
    uint64_t v179 = v128;
    if ((v128 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v128 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v179 &= 0xFFFFFFFFFFFFFFF8;
    }
    TgECS::ecsMeshDeformation((TgECS *)&v194, (uint64_t)a2, &v175, (uint64_t)a7, v218);
    if ((v179 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v177);
    if (v176) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v176);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      unint64_t v129 = a5[1];
      if (v129 >= a5[2])
      {
        uint64_t v130 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, &v194);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a5[1], &v194);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v129 + 4), (_DWORD *)&v194 + 1);
        uint64_t v130 = v129 + 8;
      }
      a5[1] = v130;
    }
    int v170 = *a3;
    uint64_t v131 = *((void *)a3 + 1);
    uint64_t v171 = v131;
    if (v131) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v131 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v172, v163);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v173, v58);
    uint64_t v132 = *((void *)a3 + 3);
    uint64_t v174 = v132;
    if ((v132 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v132 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v174 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v133 = atomic_load(&realityio::tokens::EcsTokens);
    if (!v133) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
    }
    TgECS::genECSPath((TgECS *)&v260, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v170, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v133 + 368));
    *(_DWORD *)v231 = v170;
    *(void *)&v231[8] = v171;
    if (v171) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v171 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v231[16], &v172);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v231[20], &v173);
    *(void *)&v231[24] = v174;
    if ((v174 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v231[24] &= 0xFFFFFFFFFFFFFFF8;
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      unint64_t v134 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v134) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      TgECS::genECSPath((TgECS *)&v259, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v231, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v134 + 376));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v261, &v212);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v261 + 1, (_DWORD *)&v212 + 1);
      unint64_t v228 = 0;
      uint64_t v227 = 0;
      *(void *)&long long v229 = 0;
      unint64_t __p = &v227;
      LOBYTE(v224) = 0;
      uint64_t v227 = operator new(8uLL);
      unint64_t v228 = (uint64_t **)v227;
      *(void *)&long long v229 = (char *)v227 + 8;
      unint64_t v228 = (uint64_t **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v229, &v261, &v262, v227);
      unint64_t v135 = atomic_load(&realityio::tokens::ActionTokens);
      if (!v135) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
      }
      unint64_t v136 = *(void *)(v135 + 312) & 0xFFFFFFFFFFFFFFF8;
      if (v136)
      {
        int v137 = (char *)(v136 + 16);
        if (*(char *)(v136 + 39) < 0) {
          int v137 = *(char **)v137;
        }
      }
      else
      {
        int v137 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v137);
      MEMORY[0x2455CF7A0](&v180, &__p);
      TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v259, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v227, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v180);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v180);
      if (SBYTE7(v225) < 0) {
        operator delete(__p);
      }
      unint64_t __p = &v227;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v261);
    }
    else
    {
      uint64_t v259 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    if ((v231[24] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v231[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v231[16]);
    if (*(void *)&v231[8]) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v231[8]);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v261, &v212);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v261 + 1, (_DWORD *)&v212 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v262, &v259);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v262 + 1, (_DWORD *)&v259 + 1);
      unint64_t v228 = 0;
      uint64_t v227 = 0;
      *(void *)&long long v229 = 0;
      unint64_t __p = &v227;
      LOBYTE(v224) = 0;
      uint64_t v227 = operator new(0x10uLL);
      unint64_t v228 = (uint64_t **)v227;
      *(void *)&long long v229 = (char *)v227 + 16;
      unint64_t v228 = (uint64_t **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v229, &v261, &v263, v227);
      unint64_t v138 = atomic_load(&realityio::tokens::ActionTokens);
      if (!v138) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
      }
      unint64_t v139 = *(void *)(v138 + 304) & 0xFFFFFFFFFFFFFFF8;
      if (v139)
      {
        int v140 = (char *)(v139 + 16);
        if (*(char *)(v139 + 39) < 0) {
          int v140 = *(char **)v140;
        }
      }
      else
      {
        int v140 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v140);
      MEMORY[0x2455CF7A0](&v180, &__p);
      TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v260, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v227, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v180);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v180);
      if (SBYTE7(v225) < 0) {
        operator delete(__p);
      }
      unint64_t __p = &v227;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      uint64_t v141 = 16;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v141 -= 8;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v261 + v141);
      }
      while (v141);
      LODWORD(v193) = v260;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
      HIDWORD(v193) = HIDWORD(v260);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
    }
    else
    {
      uint64_t v193 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v259);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v260);
    if ((v174 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v172);
    if (v171) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v171);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      unint64_t v142 = a5[1];
      if (v142 >= a5[2])
      {
        uint64_t v143 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, &v193);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a5[1], &v193);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v142 + 4), (_DWORD *)&v193 + 1);
        uint64_t v143 = v142 + 8;
      }
      a5[1] = v143;
    }
    int v165 = *a3;
    uint64_t v144 = *((void *)a3 + 1);
    uint64_t v166 = v144;
    if (v144) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v144 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v167, v163);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v168, v58);
    uint64_t v145 = *((void *)a3 + 3);
    uint64_t v169 = v145;
    if ((v145 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v145 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v169 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v146 = atomic_load(&realityio::tokens::EcsTokens);
    if (!v146) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
    }
    TgECS::genECSPath((TgECS *)&v261, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v165, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v146 + 312));
    memset(v231, 0, 24);
    unint64_t v147 = atomic_load(&realityio::tokens::ActionTokens);
    if (!v147) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v148 = *(void *)(v147 + 240) & 0xFFFFFFFFFFFFFFF8;
    if (v148)
    {
      uint64_t v149 = (char *)(v148 + 16);
      if (*(char *)(v148 + 39) < 0) {
        uint64_t v149 = *(char **)v149;
      }
    }
    else
    {
      uint64_t v149 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v227, v149);
    MEMORY[0x2455CF7A0](&__p, &v227);
    TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v261, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v231, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
    uint64_t v124 = (uint64_t)a2;
    if (SBYTE7(v229) < 0) {
      operator delete(v227);
    }
    uint64_t v227 = v231;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v227);
    if ((v169 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v169 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v167);
    if (v166) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v166);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      unint64_t v150 = a5[1];
      if (v150 >= a5[2])
      {
        uint64_t v151 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, &v261);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a5[1], &v261);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v150 + 4), (_DWORD *)&v261 + 1);
        uint64_t v151 = v150 + 8;
      }
      a5[1] = v151;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v261);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v193);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v194);
  }
  TgBase::emitTargets(v124, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v257);
  *(void *)v231 = v195;
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)v231);
  *(void *)v231 = &v242;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v231);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v196);
  *(void *)v231 = &p_p;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v231);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v210);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v212);
  *(void *)v231 = &v238;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v231);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v245, v246);
  *(void *)v231 = &v248;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v231);
  *(void *)v231 = &v251;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v231);
  *(void *)v231 = &v254;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v231);
  *(void *)v231 = &v257;
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)v231);
}

void sub_23F7A67A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, pxrInternal__aapl__pxrReserved__::SdfPath *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v72 - 120));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a66);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a68);
  STACK[0x2C8] = (unint64_t)&a70;
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C8]);
  STACK[0x2C8] = (unint64_t)&STACK[0x368];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C8]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a72);
  STACK[0x2C8] = (unint64_t)&STACK[0x280];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C8]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x218]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a13);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x248]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x250]);
  STACK[0x2C8] = (unint64_t)&STACK[0x348];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C8]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v72 - 256, *(void **)(v72 - 248));
  STACK[0x348] = v72 - 232;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x348]);
  STACK[0x348] = v72 - 208;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x348]);
  STACK[0x348] = v72 - 184;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x348]);
  STACK[0x348] = v72 - 160;
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x348]);
  _Unwind_Resume(a1);
}

void anonymous namespace'::timeSamplesPath(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t v4 = (void *)atomic_load(&realityio::tokens::SamplingTokens);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SamplingTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SamplingTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v5 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    uint64_t v6 = (char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0) {
      uint64_t v6 = *(char **)v6;
    }
  }
  else
  {
    uint64_t v6 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  MEMORY[0x2455CF7A0](v9, __p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((uint64_t *)this, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F7A71D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t TgECS::emitShaderTree(uint64_t a1, uint64_t a2, unint64_t *a3, pxrInternal__aapl__pxrReserved__::UsdShadeInput **a4, uint64_t **a5)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v97 = MEMORY[0x263F906F0] + 16;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v107);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(a5, &v107, &v107);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107);
  if (v98 && (*(unsigned char *)(v98 + 57) & 8) == 0 && ((*(uint64_t (**)(uint64_t *))(v97 + 32))(&v97) & 1) != 0)
  {
    unint64_t v96 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v97, (pxrInternal__aapl__pxrReserved__::TfToken *)&v96);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v107);
    MEMORY[0x2455CF810](&v79, "__nodeInputs");
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v95, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v107, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v79);
    if ((v79 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107);
    v94[0] = 0;
    v94[1] = 0;
    uint64_t v93 = v94;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v107);
    MEMORY[0x2455CF810](&v79, "__sgNode");
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v92, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v107, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v79);
    if ((v79 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v97);
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&v107, "UsdUVTexture");
    char v10 = (atomic_uint *)(v96 & 0xFFFFFFFFFFFFFFF8);
    if ((v96 & 0xFFFFFFFFFFFFFFF8) == (v107 & 0xFFFFFFFFFFFFFFF8))
    {
      if ((v107 & 7) != 0) {
        atomic_fetch_add_explicit(v10, 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v10) {
        uint64_t EmptyString = (uint64_t)(v10 + 4);
      }
      else {
        uint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      }
      unint64_t v12 = *(unsigned __int8 *)(EmptyString + 23);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        unint64_t v12 = *(void *)(EmptyString + 8);
      }
      if (v12 >= 9)
      {
        if (v13 < 0) {
          uint64_t EmptyString = *(void *)EmptyString;
        }
        BOOL v14 = strncmp((const char *)EmptyString, "ND_image_", 9uLL) == 0;
      }
      else
      {
        BOOL v14 = 0;
      }
      if ((v107 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (!v14) {
        goto LABEL_53;
      }
    }
    unint64_t v79 = 0;
    unint64_t v80 = 0;
    v81[0] = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    unint64_t v88 = v96;
    v89[0] = MEMORY[0x263F906F0] + 16;
    if ((v96 & 7) != 0)
    {
      unint64_t v15 = v96 & 0xFFFFFFFFFFFFFFF8;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v88 = v15;
      }
    }
    unint64_t v16 = *a3;
    unint64_t v87 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      unint64_t v87 = v16 & 0xFFFFFFFFFFFFFFF8;
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v17 = *a3;
    unint64_t v86 = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      unint64_t v86 = v17 & 0xFFFFFFFFFFFFFFF8;
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    TgECS::ecsTextureAsset((uint64_t *)&v99, a1, a4, (uint64_t)v89, &v88, &v87, (uint64_t *)&v79, (uint64_t *)&v86);
    if ((v17 & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      unint64_t v16 = v87;
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v88 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    MEMORY[0x2455CECB0](v89);
    TgBase::emitTargets(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v79);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      MEMORY[0x2455CF810](&v103, "__value");
      unint64_t v107 = v103;
      unint64_t v103 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v108, &v99);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v108 + 1, (_DWORD *)&v99 + 1);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v93, (uint64_t *)&v107, (uint64_t)&v107);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
      if ((v107 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v103 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v103 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&__p, "__sourcePrimPath");
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v107, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v18, &v83);
      unint64_t v103 = (unint64_t)__p;
      unint64_t __p = 0;
      LODWORD(v104) = v83;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
      HIDWORD(v104) = HIDWORD(v83);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v93, (uint64_t *)&v103, (uint64_t)&v103);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v104);
      if ((v103 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v103 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
      if ((v110 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v109);
      if (v108) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v108);
      }
      if ((__p & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v99);
    unint64_t v107 = (unint64_t)&v79;
    std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
LABEL_53:
    char v19 = v90;
    uint64_t v60 = v91;
    uint64_t v61 = (pxrInternal__aapl__pxrReserved__::UsdObject *)a2;
    if (v90 == v91) {
LABEL_204:
    }
      TgBase::emitGroup(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v95);
    uint64_t v59 = (Exec **)a1;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes();
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v61, &v79);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v19, &v103);
      NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v103);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v85, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v79, NameToken);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v103);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
      v84[0] = 0;
      v84[1] = 0;
      unint64_t v83 = (uint64_t *)v84;
      if (!v111)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v19, &v103);
        unint64_t v31 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v103);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v19, &v99);
        std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)&v79, *v31, &v99);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v93, (uint64_t *)&v79, (uint64_t)&v79);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v80);
        if ((v79 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v99);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        uint64_t v32 = (void ***)&v103;
        goto LABEL_200;
      }
      unsigned int v21 = v112;
      unint64_t v22 = v107;
      if (v112 >= 2) {
        uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v107;
      }
      else {
        uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdObject *)&v107;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      if (*(_DWORD *)v23 == *(_DWORD *)v19
        && (v21 >= 2 ? (uint64_t v24 = (unint64_t *)v22) : (uint64_t v24 = &v107),
            v24[1] == *((void *)v19 + 1)
         && (v21 >= 2 ? (uint64_t v25 = (unint64_t *)v22) : (uint64_t v25 = &v107),
             v25[2] == *((void *)v19 + 2)
          && (v21 >= 2 ? (unint64_t v26 = (unint64_t *)v22) : (unint64_t v26 = &v107),
              (v26[3] & 0xFFFFFFFFFFFFFFF8) == (*((void *)v19 + 3) & 0xFFFFFFFFFFFFFFF8)))))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v19, &v79);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v82, (int *)&v79);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v82 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v23, &v103);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v103);
        pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v103);
        if ((const pxrInternal__aapl__pxrReserved__::SdfPath **)v79 == v80
          || !pxrInternal__aapl__pxrReserved__::TfToken::operator==())
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v23, &__p);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v99, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
          MEMORY[0x2455CF810](&v75, "__sgNode");
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v103, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v99, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v75);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v82, (int *)&v103);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v82 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v103);
          if ((v75 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v99);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          p_p = &__p;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v23, &v103);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v82, (int *)&v103);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v82 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          p_p = (void **)&v103;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)p_p);
        unint64_t v103 = (unint64_t)&v79;
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
      }
      LODWORD(v103) = 1;
      uint64_t v104 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v106 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v81[1] = 0;
      unint64_t v79 = MEMORY[0x263F90790] + 16;
      if ((v106 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105);
      if (v104) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v104);
      }
      uint64_t v78 = 0;
      int v77 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v103, (uint64_t *)&v80, v81);
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v99, (uint64_t *)&v80, v81);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v75 = MEMORY[0x263F906F0] + 16;
      if ((v102 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
      if (v100) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v100);
      }
      unint64_t v74 = 0;
      if (v76 && (*(unsigned char *)(v76 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v75 + 32))(&v75)) {
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v75, (pxrInternal__aapl__pxrReserved__::TfToken *)&v74);
      }
      uint64_t v28 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&v99, "UsdUVTexture");
      unint64_t v29 = v74;
      unint64_t v30 = (atomic_uint *)(v99 & 0xFFFFFFFFFFFFFFF8);
      if ((v99 & 7) != 0) {
        atomic_fetch_add_explicit(v30, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v29 & 0xFFFFFFFFFFFFFFF8) != v30 && v74 < 8) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v28);
      }
      if (v85 != v82)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v23, &__p);
        unint64_t v37 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>((uint64_t)&v99, v37, &v82);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v83, (uint64_t *)&v99, (uint64_t)&v99);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v100);
        if ((v99 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
        TgBase::emitGroup(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v85);
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v19, &__p);
      unint64_t v33 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v19, &v72);
      std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)&v99, *v33, &v72);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v93, (uint64_t *)&v99, (uint64_t)&v99);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v100);
      if ((v99 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v19, &v72);
      unint64_t v99 = 0;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      unint64_t v34 = atomic_load(&realityio::tokens::ActionTokens);
      if (!v34) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
      }
      unint64_t v35 = *(void *)(v34 + 160) & 0xFFFFFFFFFFFFFFF8;
      if (v35)
      {
        unint64_t v36 = (char *)(v35 + 16);
        if (*(char *)(v35 + 39) < 0) {
          unint64_t v36 = *(char **)v36;
        }
      }
      else
      {
        unint64_t v36 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v36);
      MEMORY[0x2455CF7A0](&v71, &__p);
      TgBase::emitTarget(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v72, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v99, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v71);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
      if ((v69[7] & 0x80000000) != 0) {
        operator delete(__p);
      }
      unint64_t __p = &v99;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::GetRoleName((uint64_t *)&v99, v19);
      MEMORY[0x2455CF810](&__p, "Color");
      unint64_t v38 = v99;
      if ((v99 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)__p & 0xFFFFFFFFFFFFFFF8))
      {
        int HasColorSpace = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasColorSpace(v19);
        if ((__p & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v99 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!HasColorSpace) {
          goto LABEL_159;
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v19, &v72);
        uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v72);
        unint64_t v41 = (char *)Name;
        if (*(char *)(Name + 23) >= 0) {
          size_t v42 = *(unsigned __int8 *)(Name + 23);
        }
        else {
          size_t v42 = *(void *)(Name + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v99, v42 + 12);
        if (v101 >= 0) {
          unint64_t v43 = &v99;
        }
        else {
          unint64_t v43 = (unint64_t *)v99;
        }
        if (v42)
        {
          if (v41[23] >= 0) {
            unint64_t v44 = v41;
          }
          else {
            unint64_t v44 = *(char **)v41;
          }
          memmove(v43, v44, v42);
        }
        strcpy((char *)v43 + v42, "__colorSpace");
        MEMORY[0x2455CF830](&__p, &v99);
        if (SHIBYTE(v101) < 0) {
          operator delete((void *)v99);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v19, &v71);
        uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71);
        uint64_t v46 = (char *)String;
        if (*(char *)(String + 23) >= 0) {
          size_t v47 = *(unsigned __int8 *)(String + 23);
        }
        else {
          size_t v47 = *(void *)(String + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v99, v47 + 12);
        if (v101 >= 0) {
          uint64_t v48 = &v99;
        }
        else {
          uint64_t v48 = (unint64_t *)v99;
        }
        if (v47)
        {
          if (v46[23] >= 0) {
            unint64_t v49 = v46;
          }
          else {
            unint64_t v49 = *(char **)v46;
          }
          memmove(v48, v49, v47);
        }
        strcpy((char *)v48 + v47, "__colorSpace");
        MEMORY[0x2455CF7A0](&v72, &v99);
        a1 = (uint64_t)v59;
        if (SHIBYTE(v101) < 0) {
          operator delete((void *)v99);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace((uint64_t *)&v71, v19);
        unint64_t v99 = v71;
        uint64_t v100 = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
             + 1;
        if ((v71 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v99 &= 0xFFFFFFFFFFFFFFF8;
        }
        TgBase::emitConstant(v59, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v72, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v99);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v99);
        if ((v71 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v99 = (unint64_t)__p;
        if ((__p & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v99 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v100, &v72);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v100 + 1, &v73);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v93, (uint64_t *)&v99, (uint64_t)&v99);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v100);
        if ((v99 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
        unint64_t v38 = (unint64_t)__p;
      }
      else if ((__p & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        unint64_t v38 = v99;
      }
      if ((v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_159:
      if (v21 >= 2) {
        uint64_t v50 = (uint64_t *)(v22 + 8);
      }
      else {
        uint64_t v50 = &v108;
      }
      if (v21 >= 2) {
        unint64_t v51 = (uint64_t *)(v22 + 16);
      }
      else {
        unint64_t v51 = &v109;
      }
      uint64_t v52 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v99, v50, v51);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v52, &__p);
      uint64_t v53 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a5, &__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      if ((v102 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
      if (v100) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v100);
      }
      if (!v53)
      {
        uint64_t v54 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v99, v50, v51);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v54);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
        {
          int IsA = 1;
        }
        else
        {
          uint64_t v56 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&__p, v50, v51);
          pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType(v56);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          int IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if ((v70 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v69);
          if (v68) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v68);
          }
        }
        if ((v102 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
        if (v100) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v100);
        }
        if (IsA)
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v63, v50, v51);
          pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((uint64_t *)&v99, v19);
          TgECS::emitShaderTree(a1, v63, &v99, &v90, a5);
          if ((v99 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v66 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v65);
          if (v64) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v64);
          }
        }
      }
      if (v85 != v82)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v19, &__p);
        uint64_t v57 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>((uint64_t)&v99, v57, &v85);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v93, (uint64_t *)&v99, (uint64_t)&v99);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v100);
        if ((v99 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      }
      if ((v74 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CECB0](&v75);
      if ((v106 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105);
      if (v104) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v104);
      }
      if ((v78 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF2C0](&v79);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      uint64_t v32 = (void ***)&v82;
LABEL_200:
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v32);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v83, v84[0]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v85);
      pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)&v107);
      char v19 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v19 + 32);
      if (v19 == v60) {
        goto LABEL_204;
      }
    }
  }
  return MEMORY[0x2455CECB0](&v97);
}

void sub_23F7A8648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v75 = *(void *)(v73 - 136);
  if ((v75 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)(v73 - 136) = &a67;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 136));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a70);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&a72, (void *)a73);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v73 - 248));
  uint64_t v76 = *(void *)(v73 - 240);
  if ((v76 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CECB0](v73 - 232);
  _Unwind_Resume(a1);
}

void sub_23F7A8C94()
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v0 - 168));
  JUMPOUT(0x23F7A8C1CLL);
}

void sub_23F7A8CA4()
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v0 - 168));
  JUMPOUT(0x23F7A8CB0);
}

void TgECS::ecsTextureAsset(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdShadeInput **a3, uint64_t a4, void *a5, void *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v183 = *MEMORY[0x263EF8340];
  char v10 = (uint64_t *)(a4 + 8);
  uint64_t v9 = *(void *)(a4 + 8);
  if (v9 && (*(unsigned char *)(v9 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4))
  {
    uint64_t v135 = 0;
    unint64_t v136 = 0;
    unint64_t v137 = 0;
    MEMORY[0x2455CF810](&v176, "file");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v176);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v134);
    int64x2_t v122 = a7;
    if ((v174 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v174 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v173);
    if (v172) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v172);
    }
    if ((v176 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v176 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      unint64_t v133 = 0;
      uint64_t EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&__p, "UsdPreviewSurface");
      unint64_t v16 = *a5 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v17 = (atomic_uint *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
      if ((__p & 7) != 0) {
        atomic_fetch_add_explicit(v17, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)v16 == v17)
      {
        if ((*a8 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          size_t v20 = (pxrInternal__aapl__pxrReserved__::TfToken *)((*a8 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else
        {
          uint64_t EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          size_t v20 = EmptyString;
        }
        if ((*a6 & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v46 = (uint64_t **)((*a6 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v46 = (uint64_t **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        }
        semanticForPreviewSurfaceInputAndSource((atomic_uint **)&__p, (void **)v20, v46);
        unint64_t v133 = (unint64_t)__p;
      }
      else
      {
        unint64_t __p = 0;
        ShaderId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, (pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        if (((unint64_t)__p & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v19 = ((unint64_t)__p & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v19 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ShaderId);
        }
        unsigned int v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::TextureBuilderTokens);
        if (!v21) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        if ((*((void *)v21 + 22) & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v22 = (*((void *)v21 + 22) & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v22 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
        }
        if (*(char *)(v22 + 23) >= 0) {
          uint64_t v23 = (const char *)v22;
        }
        else {
          uint64_t v23 = *(const char **)v22;
        }
        int v24 = *(char *)(v19 + 23);
        if (v24 >= 0) {
          unint64_t v25 = *(unsigned __int8 *)(v19 + 23);
        }
        else {
          unint64_t v25 = *(void *)(v19 + 8);
        }
        size_t v26 = strlen(v23);
        if (v25 >= v26)
        {
          unint64_t v27 = *(void *)v19;
          if (v24 >= 0) {
            unint64_t v27 = v19;
          }
          size_t v26 = strcmp((const char *)(v27 + v25 - v26), v23);
          if (!v26) {
            goto LABEL_52;
          }
        }
        if (((unint64_t)__p & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v28 = ((unint64_t)__p & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v28 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v26);
        }
        unint64_t v29 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::TextureBuilderTokens);
        if (!v29) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        unint64_t v30 = (*((void *)v29 + 23) & 0xFFFFFFFFFFFFFFF8) != 0
            ? (*((void *)v29 + 23) & 0xFFFFFFFFFFFFFFF8) + 16
            : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
        unint64_t v31 = *(char *)(v30 + 23) >= 0 ? (const char *)v30 : *(const char **)v30;
        int v32 = *(char *)(v28 + 23);
        size_t v33 = v32 >= 0 ? *(unsigned __int8 *)(v28 + 23) : *(void *)(v28 + 8);
        size_t v34 = strlen(v31);
        if (v33 < v34) {
          goto LABEL_50;
        }
        unint64_t v35 = *(void *)v28;
        if (v32 >= 0) {
          unint64_t v35 = v28;
        }
        size_t v34 = strcmp((const char *)(v35 + v33 - v34), v31);
        if (v34)
        {
LABEL_50:
          if (((unint64_t)__p & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v36 = ((unint64_t)__p & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v36 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v34);
          }
          unint64_t v38 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::TextureBuilderTokens);
          if (!v38) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*((void *)v38 + 24) & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v39 = (*((void *)v38 + 24) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v39 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
          }
          if (*(char *)(v39 + 23) >= 0) {
            uint64_t v40 = (const char *)v39;
          }
          else {
            uint64_t v40 = *(const char **)v39;
          }
          int v41 = *(char *)(v36 + 23);
          if (v41 >= 0) {
            size_t v42 = *(unsigned __int8 *)(v36 + 23);
          }
          else {
            size_t v42 = *(void *)(v36 + 8);
          }
          size_t v43 = strlen(v40);
          if (v42 < v43) {
            goto LABEL_68;
          }
          unint64_t v44 = *(void *)v36;
          if (v41 >= 0) {
            unint64_t v44 = v36;
          }
          size_t v43 = strcmp((const char *)(v44 + v42 - v43), v40);
          if (v43)
          {
LABEL_68:
            if (((unint64_t)__p & 0xFFFFFFFFFFFFFFF8) != 0) {
              unint64_t v45 = ((unint64_t)__p & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else {
              unint64_t v45 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v43);
            }
            size_t v47 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::TextureBuilderTokens);
            if (!v47) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
            if ((*((void *)v47 + 25) & 0xFFFFFFFFFFFFFFF8) != 0) {
              unint64_t v48 = (*((void *)v47 + 25) & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else {
              unint64_t v48 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v47);
            }
            if (*(char *)(v48 + 23) >= 0) {
              unint64_t v49 = (const char *)v48;
            }
            else {
              unint64_t v49 = *(const char **)v48;
            }
            int v50 = *(char *)(v45 + 23);
            if (v50 >= 0) {
              unint64_t v51 = *(unsigned __int8 *)(v45 + 23);
            }
            else {
              unint64_t v51 = *(void *)(v45 + 8);
            }
            size_t v52 = strlen(v49);
            if (v51 >= v52)
            {
              unint64_t v53 = *(void *)v45;
              if (v50 >= 0) {
                unint64_t v53 = v45;
              }
              size_t v52 = strcmp((const char *)(v53 + v51 - v52), v49);
              if (!v52) {
                goto LABEL_125;
              }
            }
            if (((unint64_t)__p & 0xFFFFFFFFFFFFFFF8) != 0) {
              unint64_t v54 = ((unint64_t)__p & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else {
              unint64_t v54 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v52);
            }
            uint64_t v55 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::TextureBuilderTokens);
            if (!v55) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
            unint64_t v56 = (*((void *)v55 + 26) & 0xFFFFFFFFFFFFFFF8) != 0
                ? (*((void *)v55 + 26) & 0xFFFFFFFFFFFFFFF8) + 16
                : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v55);
            uint64_t v57 = *(char *)(v56 + 23) >= 0 ? (const char *)v56 : *(const char **)v56;
            int v58 = *(char *)(v54 + 23);
            unint64_t v59 = v58 >= 0 ? *(unsigned __int8 *)(v54 + 23) : *(void *)(v54 + 8);
            size_t v60 = strlen(v57);
            if (v59 >= v60)
            {
              unint64_t v61 = *(void *)v54;
              if (v58 >= 0) {
                unint64_t v61 = v54;
              }
              size_t v60 = strcmp((const char *)(v61 + v59 - v60), v57);
              if (!v60) {
                goto LABEL_125;
              }
            }
            if (((unint64_t)__p & 0xFFFFFFFFFFFFFFF8) != 0) {
              unint64_t v62 = ((unint64_t)__p & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else {
              unint64_t v62 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v60);
            }
            uint64_t v63 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::TextureBuilderTokens);
            if (!v63) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
            unint64_t v64 = (*((void *)v63 + 27) & 0xFFFFFFFFFFFFFFF8) != 0
                ? (*((void *)v63 + 27) & 0xFFFFFFFFFFFFFFF8) + 16
                : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v63);
            uint64_t v65 = *(char *)(v64 + 23) >= 0 ? (const char *)v64 : *(const char **)v64;
            int v66 = *(char *)(v62 + 23);
            size_t v67 = v66 >= 0 ? *(unsigned __int8 *)(v62 + 23) : *(void *)(v62 + 8);
            size_t v68 = strlen(v65);
            if (v67 < v68) {
              goto LABEL_124;
            }
            unint64_t v69 = *(void *)v62;
            if (v66 >= 0) {
              unint64_t v69 = v62;
            }
            if (strcmp((const char *)(v69 + v67 - v68), v65)) {
LABEL_124:
            }
                              + 48);
            else {
LABEL_125:
            }
                              + 40);
          }
          else
          {
                            + 32);
          }
        }
        else
        {
LABEL_52:
                          + 24);
        }
        if ((v37 & 7) == 0
          || (unint64_t v70 = v37 & 0xFFFFFFFFFFFFFFF8,
              (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) != 0))
        {
          unint64_t v70 = v37;
        }
        unint64_t v133 = v70;
        if ((__p & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v164, v10, (_DWORD *)(a4 + 16));
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v164, &v139);
      unint64_t v132 = 0;
      int v72 = *a3;
      unint64_t v71 = a3[1];
      if (*a3 == v71)
      {
        char v108 = 0;
        goto LABEL_282;
      }
      char v121 = 0;
      while (1)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes();
        if (v175[0]) {
          break;
        }
LABEL_267:
        pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)&__p);
        int v72 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)((char *)v72 + 32);
        if (v72 == v71)
        {
          char v108 = v121;
          if (!v132)
          {
LABEL_282:
            MEMORY[0x2455CF810](&__p, "rgb");
            if ((v132 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v132 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            unint64_t v132 = (unint64_t)__p;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v139);
          if ((v167 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v167 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v166);
          if (v165) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v165);
          }
          unint64_t v131 = v132;
          if ((v132 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v132 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v131 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v170 = 0;
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, (pxrInternal__aapl__pxrReserved__::TfToken *)&v170);
          std::string::basic_string[abi:ne180100]<0>(&__p, "/__textures");
          MEMORY[0x2455CF7A0](v169, &__p);
          if (SHIBYTE(v173) < 0) {
            operator delete(__p);
          }
          if (v131)
          {
            pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v164);
            MEMORY[0x2455CF810](&__p, "file");
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v159, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
            if ((__p & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v159)
              && (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) != 0)
            {
              pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes();
              LODWORD(v154) = 3;
              uint64_t v155 = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
              uint64_t v158 = 0;
              LODWORD(v144) = v159;
              uint64_t v145 = v160;
              if (v160) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v160 + 48), 1uLL, memory_order_relaxed);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v146, &v161);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v147, &v162);
              uint64_t v148 = v163;
              if ((v163 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v163 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v148 &= 0xFFFFFFFFFFFFFFF8;
              }
              if ((v148 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v146);
              if (v145) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v145);
              }
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v149))
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v149, &__p);
                LODWORD(v154) = v149;
                uint64_t v109 = v150;
                if (v150) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v150 + 48), 1uLL, memory_order_relaxed);
                }
                uint64_t v110 = v155;
                uint64_t v155 = v109;
                if (v110) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v110);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v156, &v151);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v157, &v152);
                pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v158, &v153);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
              }
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v154)) {
                pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
              }
              MEMORY[0x2455CF810](&v176, "Invalid");
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)v169, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v176);
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v131);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
              if ((v176 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v176 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((v153 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v153 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v151);
              if (v150) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v150);
              }
              if ((v158 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v158 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v156);
              if (v155) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v155);
              }
              pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)&v181);
            }
            else
            {
              MEMORY[0x2455CF810](&v176, "Invalid");
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)v169, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v176);
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v131);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
              if ((v176 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v176 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
            if ((v163 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v163 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v161);
            if (v160) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v160);
            }
            if (v168 < 0) {
              operator delete(v167);
            }
            if ((v166[7] & 0x80000000) != 0) {
              operator delete(v164);
            }
          }
          else
          {
            MEMORY[0x2455CF810](&v176, "Invalid");
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)v169, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v176);
            MEMORY[0x2455CF810](&v140, "EmptySource");
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v140);
            if ((v140 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
            if ((v176 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v176 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v169);
          if ((v170 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v170 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v131 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v131 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          MEMORY[0x2455CF810](&__p, "file");
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v127, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
          if ((v130 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v130 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v129);
          if (v128) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v128);
          }
          if ((__p & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v140, &__p);
          int v111 = v136;
          if ((unint64_t)v136 >= v137)
          {
            unsigned int v112 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(&v135, &__p);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v136, &__p);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v111 + 1, (_DWORD *)&__p + 1);
            unsigned int v112 = v111 + 2;
          }
          unint64_t v136 = v112;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v140, &__p);
          uint64_t v173 = 0;
          uint64_t v172 = 0;
          uint64_t v174 = 0;
          unint64_t v113 = atomic_load(&realityio::tokens::ActionTokens);
          if (v113)
          {
            unint64_t v114 = *(void *)(v113 + 160) & 0xFFFFFFFFFFFFFFF8;
            if (v114)
            {
              unint64_t v115 = (char *)(v114 + 16);
              if (*(char *)(v114 + 39) < 0) {
                unint64_t v115 = *(char **)v115;
              }
            }
            else
            {
              unint64_t v115 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(&v176, v115);
            MEMORY[0x2455CF7A0](v175, &v176);
            unint64_t v116 = v122[1];
            if (v116 >= v122[2])
            {
              uint64_t v117 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(v122, (uint64_t)&__p);
            }
            else
            {
              std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v122[1], (uint64_t)&__p);
              uint64_t v117 = v116 + 40;
            }
            v122[1] = v117;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v175);
            unint64_t v164 = &v172;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
            if (v179 < 0) {
              operator delete((void *)v176);
            }
            unint64_t v126 = v132;
            if ((v132 & 7) != 0)
            {
              unint64_t v118 = v132 & 0xFFFFFFFFFFFFFFF8;
              if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v132 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)unint64_t v126 = v118; {
            }
              }
            uint64_t v119 = *a8;
            if ((*a8 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v119 &= 0xFFFFFFFFFFFFFFF8;
            }
            unint64_t v120 = v133;
            unint64_t v125 = v133;
            if ((v133 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v133 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              unint64_t v125 = v120 & 0xFFFFFFFFFFFFFFF8;
              v120 &= 0xFFFFFFFFFFFFFFF8;
            }
            makeImportSettingsForUsdPreviewSurface((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, &v126, &v125, v108 != 0);
            if ((v120 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v119 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v126 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v126 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v176, (pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
            MEMORY[0x2455CF810](&v164, "__textureImportSettings");
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&v159, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v176, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v164);
            if ((v164 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v164 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v176);
            int v177 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>(void)::ti;
            pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>::_PlaceCopy();
          }
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData();
        }
      }
      LODWORD(v140) = 1;
      uint64_t v141 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v143 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v180 = 0;
      unint64_t v176 = MEMORY[0x263F90790] + 16;
      if ((v143 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v142);
      if (v141) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v141);
      }
      uint64_t v154 = 0;
      LODWORD(v138) = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v140, (uint64_t *)&v177, &v178);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v181 = MEMORY[0x263F906F0] + 16;
      if ((v143 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v142);
      if (v141) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v141);
      }
      uint64_t v149 = 0;
      if (v182 && (*(unsigned char *)(v182 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v181 + 32))(&v181)) {
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v181, (pxrInternal__aapl__pxrReserved__::TfToken *)&v149);
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v140, (uint64_t *)&v177, &v178);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v140, &v159);
      if (v159 == v139)
      {
        uint64_t v73 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&v144, "UsdUVTexture");
        unint64_t v74 = v149 & 0xFFFFFFFFFFFFFFF8;
        if ((v149 & 0xFFFFFFFFFFFFFFF8) == (v144 & 0xFFFFFFFFFFFFFFF8))
        {
          BOOL v76 = 1;
        }
        else
        {
          if (v74) {
            uint64_t v75 = v74 + 16;
          }
          else {
            uint64_t v75 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v73);
          }
          unint64_t v77 = *(unsigned __int8 *)(v75 + 23);
          int v78 = (char)v77;
          if ((v77 & 0x80u) != 0) {
            unint64_t v77 = *(void *)(v75 + 8);
          }
          if (v77 >= 9)
          {
            if (v78 < 0) {
              uint64_t v75 = *(void *)v75;
            }
            BOOL v76 = strncmp((const char *)v75, "ND_image_", 9uLL) == 0;
          }
          else
          {
            BOOL v76 = 0;
          }
        }
        if ((v144 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        BOOL v76 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v159);
      if ((v143 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v142);
      if (v141) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v141);
      }
      if (!v76)
      {
LABEL_262:
        if ((v149 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CECB0](&v181);
        if ((v154 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CF2C0](&v176);
        goto LABEL_267;
      }
      Baseuint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((uint64_t *)&v140, v72);
      if (((unint64_t)v140 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        unint64_t v80 = (pxrInternal__aapl__pxrReserved__::TfToken *)(((unint64_t)v140 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else
      {
        Baseuint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
        unint64_t v80 = BaseName;
      }
      if ((v154 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v81 = (uint64_t **)((v154 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v81 = (uint64_t **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
      }
      semanticForPreviewSurfaceInputAndSource((atomic_uint **)&v144, (void **)v80, v81);
      if ((v140 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v82 = v144;
      int v140 = (void *)v144;
      if ((v144 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        int v140 = (void *)(v82 & 0xFFFFFFFFFFFFFFF8);
        v82 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t SemanticPriority = getSemanticPriority(&v140);
      unint64_t v84 = v133;
      uint64_t v159 = (void *)v133;
      if ((v133 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v133 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        uint64_t v159 = (void *)(v84 & 0xFFFFFFFFFFFFFFF8);
        v84 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v85 = getSemanticPriority(&v159);
      if ((v84 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        unint64_t v82 = (unint64_t)v140;
      }
      if ((v82 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (SemanticPriority <= v85)
      {
LABEL_254:
        unint64_t v106 = v132;
        if (!v132)
        {
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v132, &v154);
          unint64_t v106 = v132;
        }
        if ((v106 & 0xFFFFFFFFFFFFFFF8) != (v154 & 0xFFFFFFFFFFFFFFF8))
        {
          MEMORY[0x2455CF810](&v140, "rgba");
          if ((v132 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v132 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          unint64_t v132 = (unint64_t)v140;
        }
        if ((v144 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_262;
      }
      unint64_t v86 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v133, &v144);
      if ((v154 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v87 = (void *)((v154 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v87 = (void *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v86);
      }
      unint64_t v88 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((uint64_t *)&v140, v72);
      if (((unint64_t)v140 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v89 = ((unint64_t)v140 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t v89 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v88);
      }
      int v90 = *(char *)(v89 + 23);
      if (v90 < 0)
      {
        if (*(void *)(v89 + 8) != 1) {
          goto LABEL_251;
        }
        unint64_t v89 = *(void *)v89;
      }
      else if (v90 != 1)
      {
        goto LABEL_251;
      }
      if (*(unsigned char *)v89 != 114) {
        goto LABEL_251;
      }
      if (*((char *)v87 + 23) < 0)
      {
        char v121 = 0;
        uint64_t v95 = v87[1];
        if (v95 <= 12)
        {
          if (v95 == 8)
          {
            uint64_t v104 = *(void **)*v87;
            goto LABEL_270;
          }
          if (v95 != 9) {
            goto LABEL_252;
          }
          unint64_t v96 = (void *)*v87;
          if (*(void *)*v87 == 0x73656E6867756F72 && *(unsigned char *)(*v87 + 8) == 115) {
            goto LABEL_271;
          }
          if (*v96 == 0x6F6973756C63636FLL && *((unsigned char *)v96 + 8) == 110) {
            goto LABEL_271;
          }
          uint64_t v99 = *v96;
          int v100 = *((unsigned __int8 *)v96 + 8);
          BOOL v101 = v99 == 0x616F637261656C63 && v100 == 116;
LABEL_243:
          char v103 = v101;
          goto LABEL_272;
        }
        if (v95 == 13)
        {
          if (*(void *)*v87 != 0x72616C7563657073 || *(void *)(*v87 + 5) != 0x726F6C6F4372616CLL) {
            goto LABEL_251;
          }
          goto LABEL_271;
        }
        if (v95 != 18) {
          goto LABEL_252;
        }
        unint64_t v87 = (void *)*v87;
      }
      else
      {
        char v121 = 0;
        unsigned int v91 = *((unsigned __int8 *)v87 + 23);
        if (v91 <= 0xC)
        {
          if (v91 != 8)
          {
            if (v91 != 9) {
              goto LABEL_252;
            }
            if ((*v87 != 0x73656E6867756F72 || *((unsigned char *)v87 + 8) != 115)
              && (*v87 != 0x6F6973756C63636FLL || *((unsigned char *)v87 + 8) != 110)
              && (*v87 != 0x616F637261656C63 || *((unsigned char *)v87 + 8) != 116))
            {
              goto LABEL_251;
            }
            goto LABEL_271;
          }
          uint64_t v104 = (void *)*v87;
LABEL_270:
          if (v104 == (void *)0x63696C6C6174656DLL)
          {
LABEL_271:
            char v103 = 1;
LABEL_272:
            char v121 = v103;
            goto LABEL_252;
          }
LABEL_251:
          char v121 = 0;
          goto LABEL_252;
        }
        if (v91 == 13)
        {
          if (*v87 != 0x72616C7563657073 || *(void *)((char *)v87 + 5) != 0x726F6C6F4372616CLL) {
            goto LABEL_251;
          }
          goto LABEL_271;
        }
        if (v91 != 18)
        {
LABEL_252:
          if ((v140 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          goto LABEL_254;
        }
      }
      BOOL v101 = *v87 == 0x616F637261656C63 && v87[1] == 0x656E6867756F5274 && *((_WORD *)v87 + 8) == 29555;
      goto LABEL_243;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v134);
    unint64_t __p = &v135;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  *a1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
}

void sub_23F7AAA4C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23F7AB188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void anonymous namespace'::findFirstUVMeshAttributeNameFromShader(std::string *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  unint64_t v84 = 0;
  uint64_t v85 = 0;
  unint64_t v83 = (uint64_t *)&v84;
  memset(&v82, 0, sizeof(v82));
  uint64_t v3 = *((void *)a2 + 1);
  if (v3
    && (*(unsigned char *)(v3 + 57) & 8) == 0
    && ((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::UsdShadeShader *))(*(void *)a2 + 32))(a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(a2);
    uint64_t v5 = v81;
    if (v80 != v81)
    {
      uint64_t v6 = v80 + 16;
      while (1)
      {
        uint64_t v7 = v6 - 16;
        int v75 = *(_DWORD *)(v6 - 16);
        uint64_t v8 = *(void *)(v6 - 8);
        uint64_t v76 = v8;
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v77, (_DWORD *)v6);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v78, (_DWORD *)(v6 + 4));
        uint64_t v9 = *(void *)(v6 + 8);
        uint64_t v79 = v9;
        if ((v9 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v79 &= 0xFFFFFFFFFFFFFFF8;
        }
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v75)
          && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
        {
          realityio::findOriginalSourceAttribute((realityio *)&v75, (uint64_t)&v38);
          int IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v38);
          if (IsValid) {
            char v11 = &v39;
          }
          else {
            char v11 = &v76;
          }
          if (IsValid) {
            p_p = &__p;
          }
          else {
            p_p = (void **)&v77;
          }
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v71, v11, p_p);
          if ((v41 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          if (v39) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
          }
        }
        else
        {
          int v71 = 1;
          uint64_t v72 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          uint64_t v74 = 0;
        }
        if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v71)) {
          goto LABEL_125;
        }
        int v13 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if ((v38 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!v13) {
          goto LABEL_125;
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        unint64_t v38 = (void *)(MEMORY[0x263F906F0] + 16);
        MEMORY[0x2455CF810](&v63, "st");
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v67, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v63);
        if ((v63 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CECB0](&v38);
        if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v67)
          || (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) == 0)
        {
          if ((v70 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          goto LABEL_123;
        }
        realityio::findOriginalSourceAttribute((realityio *)&v67, (uint64_t)&v63);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v63))
        {
          if (v63 != v67
            || v64 != v68
            || v65 != v69
            || (v66 & 0xFFFFFFFFFFFFFFF8) != (v70 & 0xFFFFFFFFFFFFFFF8))
          {
            break;
          }
        }
LABEL_117:
        if ((v66 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v65);
        if (v64) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v64);
        }
        if ((v70 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_123:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
        if (v68) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v68);
        }
LABEL_125:
        if ((v74 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
        if (v72) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v72);
        }
        if ((v79 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v77);
        if (v76) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v76);
        }
        v6 += 32;
        if (v7 + 32 == v5) {
          goto LABEL_139;
        }
      }
      int v58 = 1;
      uint64_t v59 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v62 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v53, &v64, &v65);
      MEMORY[0x2455CF810](&v38, "UsdPrimvarReader_float2");
      uint64_t v14 = v52;
      unint64_t v15 = (atomic_uint *)((unint64_t)v38 & 0xFFFFFFFFFFFFFFF8);
      if ((v38 & 7) != 0) {
        atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v14 & 0xFFFFFFFFFFFFFFF8) == v15)
      {
        int v58 = v53;
        uint64_t v20 = v54;
        if (v54) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 48), 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = v59;
        uint64_t v59 = v20;
        if (v21) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v60, &v55);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v61, &v56);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v62, &v57);
      }
      else
      {
        MEMORY[0x2455CF810](&v38, "UsdTransform2d");
        uint64_t v16 = v52;
        unint64_t v17 = (atomic_uint *)((unint64_t)v38 & 0xFFFFFFFFFFFFFFF8);
        if ((v38 & 7) != 0) {
          atomic_fetch_add_explicit(v17, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)(v16 & 0xFFFFFFFFFFFFFFF8) == v17)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          uint64_t v48 = MEMORY[0x263F906F0] + 16;
          MEMORY[0x2455CF810](&v44, "in");
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v38, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v48, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44);
          if ((v44 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          MEMORY[0x2455CECB0](&v48);
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v38)
            && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
          {
            realityio::findOriginalSourceAttribute((realityio *)&v38, (uint64_t)&v48);
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v48)
              && (v48 != v38
               || v49 != v39
               || v50 != __p
               || (v51 & 0xFFFFFFFFFFFFFFF8) != (v41 & 0xFFFFFFFFFFFFFFF8)))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v44, &v49, &v50);
              MEMORY[0x2455CF810](&v43, "UsdPrimvarReader_float2");
              uint64_t v18 = v86;
              unint64_t v19 = (atomic_uint *)(v43 & 0xFFFFFFFFFFFFFFF8);
              if ((v43 & 7) != 0) {
                atomic_fetch_add_explicit(v19, 0xFFFFFFFE, memory_order_release);
              }
              if ((v86 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((atomic_uint *)(v18 & 0xFFFFFFFFFFFFFFF8) == v19) {
                pxrInternal__aapl__pxrReserved__::UsdPrim::operator=((uint64_t)&v58, (uint64_t)&v44);
              }
              if ((v47 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
              if (v45) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v45);
              }
            }
            if ((v51 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
            if (v49) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v49);
            }
          }
          if ((v41 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          if (v39) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
          }
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v58))
      {
LABEL_107:
        if ((v52 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v57 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
        if (v54) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
        }
        if ((v62 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v60);
        if (v59) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v59);
        }
        goto LABEL_117;
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      unint64_t v38 = (void *)(MEMORY[0x263F906F0] + 16);
      MEMORY[0x2455CF810](&v44, "varname");
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v48, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44);
      if ((v44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CECB0](&v38);
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v48)
        || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
      {
LABEL_103:
        if ((v51 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
        if (v49) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v49);
        }
        goto LABEL_107;
      }
      realityio::findOriginalSourceAttribute((realityio *)&v48, (uint64_t)&v44);
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v44))
      {
LABEL_99:
        if ((v47 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
        if (v45) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v45);
        }
        goto LABEL_103;
      }
      uint64_t v87 = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
      if (!v87)
      {
LABEL_98:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v86);
        goto LABEL_99;
      }
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v86) & 1) == 0)
      {
        Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v86);
        {
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((uint64_t *)&v38, (pxrInternal__aapl__pxrReserved__::VtValue *)&v86);
          size_t v26 = &v38;
          if (SHIBYTE(__p) < 0) {
            size_t v26 = v38;
          }
          NSLog(&cfstr_WarningInvalid.isa, v26);
          if (SHIBYTE(__p) < 0) {
            operator delete(v38);
          }
          goto LABEL_89;
        }
        int v24 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v86);
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v86, v24);
      }
      unint64_t v25 = (const std::string *)pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v86);
      std::string::operator=(&v82, v25);
LABEL_89:
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v37, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
      }
      else {
        std::string v37 = v82;
      }
      realityio::TexcoordID::TexcoordID((uint64_t)&v38, (uint64_t)&v37, -1, 0);
      std::__tree<realityio::TexcoordID>::__emplace_unique_key_args<realityio::TexcoordID,realityio::TexcoordID>(&v83, (realityio::TexcoordID *)&v38, (uint64_t)&v38);
      if (v42 < 0) {
        operator delete(__p);
      }
      if ((v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      goto LABEL_98;
    }
LABEL_139:
    unint64_t v38 = &v80;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    int v27 = v85;
    if ((int)v85 >= 8) {
      int v27 = 8;
    }
    uint64_t v28 = v27;
    std::vector<realityio::TexcoordID>::reserve(&v34, v27);
    unint64_t v38 = v83;
    std::__advance[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>>((void **)&v38, v28);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::back_insert_iterator<std::vector<realityio::TexcoordID>>>((uint64_t)&v71, v83, v38, &v34);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  std::__tree<realityio::TexcoordID>::destroy((uint64_t)&v83, v84);
  if (v34 == v35)
  {
    this->__r_.__value_.__r.__words[0] = 0;
    this->__r_.__value_.__l.__size_ = 0;
    this->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    uint64_t v30 = *(void *)(v34 + 8);
    if ((v30 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v31 = (atomic_uint *)(v30 & 0xFFFFFFFFFFFFFFF8);
    if ((v30 & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t EmptyString = (uint64_t)(v31 + 4);
    }
    else {
      uint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
    }
    if (*(char *)(EmptyString + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
    }
    else
    {
      long long v33 = *(_OWORD *)EmptyString;
      this->__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v33;
    }
    if ((v30 & 7) != 0) {
      atomic_fetch_add_explicit(v31, 0xFFFFFFFE, memory_order_release);
    }
  }
  unint64_t v38 = &v34;
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
}

void sub_23F7ABD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v67 - 112));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a46);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a50);
  if ((a54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a55);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a59);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a63);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a67);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v67 - 248));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v67 - 216));
  *(void *)(v67 - 216) = v67 - 184;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](v69);
  if (*(char *)(v67 - 137) < 0) {
    operator delete(*(void **)(v67 - 160));
  }
  std::__tree<realityio::TexcoordID>::destroy(v67 - 136, *(void **)(v67 - 128));
  *(void *)(v67 - 216) = &a30;
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)(v67 - 216));
  _Unwind_Resume(a1);
}

void *semanticForPreviewSurfaceInputAndSource(atomic_uint **a1, void **a2, uint64_t **a3)
{
  int v5 = *((unsigned __int8 *)a2 + 23);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (v5 != 6)
    {
      uint64_t v6 = a2;
      if (v5 != 12)
      {
        if (v5 != 13) {
          goto LABEL_37;
        }
        if (*a2 != (void *)0x6576697373696D65 || *(void **)((char *)a2 + 5) != (void *)0x726F6C6F43657669) {
          goto LABEL_37;
        }
LABEL_19:
        char v11 = (atomic_uint *)result[2];
        goto LABEL_95;
      }
      goto LABEL_33;
    }
    if (*(_DWORD *)a2 != 1836216174 || *((_WORD *)a2 + 2) != 27745) {
      goto LABEL_37;
    }
LABEL_31:
    char v11 = (atomic_uint *)result[1];
    goto LABEL_95;
  }
  uint64_t v8 = a2[1];
  if (v8 == (void *)6)
  {
    if (*(_DWORD *)*a2 != 1836216174 || *((_WORD *)*a2 + 2) != 27745) {
      goto LABEL_37;
    }
    goto LABEL_31;
  }
  if (v8 == (void *)12)
  {
    uint64_t v6 = (void **)*a2;
LABEL_33:
    uint64_t v14 = (uint64_t)*v6;
    int v15 = *((_DWORD *)v6 + 2);
    if (v14 == 0x4365737566666964 && v15 == 1919904879)
    {
      char v11 = (atomic_uint *)result[3];
      goto LABEL_95;
    }
    goto LABEL_37;
  }
  if (v8 == (void *)13 && **a2 == 0x6576697373696D65 && *(void *)((char *)*a2 + 5) == 0x726F6C6F43657669) {
    goto LABEL_19;
  }
LABEL_37:
  int v17 = *((char *)a3 + 23);
  if (v17 < 0)
  {
    if (a3[1] != (uint64_t *)1) {
      goto LABEL_94;
    }
    a3 = (uint64_t **)*a3;
  }
  else if (v17 != 1)
  {
    goto LABEL_94;
  }
  if (*(unsigned char *)a3 == 114)
  {
    if ((v5 & 0x80) != 0)
    {
      unint64_t v19 = a2[1];
      if (v19 != (void *)8)
      {
        if (v19 == (void *)9 && **a2 == 0x73656E6867756F72 && *((unsigned char *)*a2 + 8) == 115) {
          goto LABEL_93;
        }
        if (v19 == (void *)13)
        {
          if (**a2 == 0x72616C7563657073 && *(void *)((char *)*a2 + 5) == 0x726F6C6F4372616CLL) {
            goto LABEL_93;
          }
          unint64_t v19 = a2[1];
        }
        if (v19 != (void *)9) {
          goto LABEL_91;
        }
        if (**a2 == 0x6F6973756C63636FLL && *((unsigned char *)*a2 + 8) == 110) {
          goto LABEL_93;
        }
        if (a2[1] != (void *)9)
        {
LABEL_91:
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "clearcoatRoughness")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "opacity"))
          {
            goto LABEL_94;
          }
LABEL_93:
          char v11 = (atomic_uint *)result[4];
          goto LABEL_95;
        }
        size_t v26 = *a2;
LABEL_87:
        uint64_t v27 = *v26;
        int v28 = *((unsigned __int8 *)v26 + 8);
        if (v27 == 0x616F637261656C63 && v28 == 116) {
          goto LABEL_93;
        }
        goto LABEL_91;
      }
      uint64_t v23 = (void *)**a2;
    }
    else
    {
      if (v5 != 8)
      {
        if (v5 != 9)
        {
          if (v5 == 13
            && *a2 == (void *)0x72616C7563657073
            && *(void **)((char *)a2 + 5) == (void *)0x726F6C6F4372616CLL)
          {
            goto LABEL_93;
          }
          goto LABEL_91;
        }
        if (*a2 == (void *)0x73656E6867756F72 && *((unsigned char *)a2 + 8) == 115) {
          goto LABEL_93;
        }
        if (*a2 == (void *)0x6F6973756C63636FLL && *((unsigned char *)a2 + 8) == 110) {
          goto LABEL_93;
        }
        size_t v26 = (uint64_t *)a2;
        goto LABEL_87;
      }
      uint64_t v23 = *a2;
    }
    if (v23 == (void *)0x63696C6C6174656DLL) {
      goto LABEL_93;
    }
    goto LABEL_91;
  }
LABEL_94:
  char v11 = (atomic_uint *)result[6];
LABEL_95:
  *a1 = v11;
  if ((v11 & 7) != 0)
  {
    uint64_t v30 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v30, 2u, memory_order_relaxed) & 1) == 0) {
      *a1 = v30;
    }
  }
  return result;
}

_DWORD *anonymous namespace'::findSourceInput(uint64_t a1, uint64_t a2)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a2)
    || (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) == 0
    || !MEMORY[0x2455D0E10](a2))
  {
    goto LABEL_129;
  }
  LODWORD(v59) = 1;
  size_t v60 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v62 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v52[3] = 0;
  v52[0] = MEMORY[0x263F90790] + 16;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
  uint64_t v51 = 0;
  int v50 = 0;
  long long v33 = (_DWORD *)(a2 + 16);
  uint64_t v34 = (_DWORD *)(a2 + 20);
  unint64_t v31 = (_DWORD *)(a1 + 16);
  int v32 = (_DWORD *)(a1 + 20);
  while (1)
  {
    int ConnectedSource = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
    char v5 = ConnectedSource;
    if (!ConnectedSource) {
      break;
    }
    switch(v50)
    {
      case 1:
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(&v59, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v52, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v51);
        *(_DWORD *)a2 = v59;
        uint64_t v6 = (uint64_t)v60;
        size_t v60 = 0;
        uint64_t v7 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v6;
        if (v7) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v33, &v61);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v34);
        if (&v59 == (uint64_t *)a2)
        {
          uint64_t v9 = v62;
        }
        else
        {
          uint64_t v8 = *(void *)(a2 + 24);
          if ((v8 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v9 = 0;
          *(void *)(a2 + 24) = v62;
          uint64_t v62 = 0;
        }
        if ((v9 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
        if (v60) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v60);
        }
        if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a2) & 1) == 0)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v31, v33);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v32, v34);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a2 + 24) = 0;
          goto LABEL_125;
        }
        break;
      case 2:
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(&v45, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v52, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v51);
        int v35 = v45;
        uint64_t v36 = v46;
        if (v46) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v37, &v47);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v38, &v48);
        uint64_t v39 = v49;
        if ((v49 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v39 &= 0xFFFFFFFFFFFFFFF8;
        }
        int v40 = 3;
        uint64_t v41 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        uint64_t v44 = 0;
        if ((pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput() & 1) == 0) {
          goto LABEL_102;
        }
        if (MEMORY[0x2455D0FB0](&v35))
        {
          LODWORD(v55) = 1;
          uint64_t v56 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          uint64_t v58 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          uint64_t v62 = 0;
          uint64_t v59 = MEMORY[0x263F90790] + 16;
          if ((v58 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
          if (v56) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v56);
          }
          uint64_t v54 = 0;
          LODWORD(v53) = 0;
          while (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
          {
            switch(v53)
            {
              case 2:
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(&v55, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v59, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v54);
                int v35 = v55;
                uint64_t v10 = v56;
                uint64_t v56 = 0;
                uint64_t v11 = v36;
                uint64_t v36 = v10;
                if (v11) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v37, &v57);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v38);
                if ((v39 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                uint64_t v39 = v58;
                uint64_t v58 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
                if (v56) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v56);
                }
                break;
              case 0:
                goto LABEL_99;
              case 1:
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(&v55, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v59, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v54);
                int v40 = v55;
                uint64_t v23 = v56;
                uint64_t v56 = 0;
                uint64_t v24 = v41;
                uint64_t v41 = v23;
                if (v24) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v42, &v57);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v43);
                if ((v44 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                uint64_t v44 = v58;
                uint64_t v58 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
                if (v56) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v56);
                }
LABEL_99:
                if ((v54 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                MEMORY[0x2455CF2C0](&v59);
                goto LABEL_102;
            }
          }
          if ((v54 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          MEMORY[0x2455CF2C0](&v59);
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v59, &v36, &v37);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        uint64_t v55 = MEMORY[0x263F906F0] + 16;
        if ((v62 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
        if (v60) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v60);
        }
        uint64_t v54 = 0;
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(&v59, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v55);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v59)) {
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
        }
        if ((v62 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
        unint64_t v12 = v60;
        if (v60) {
          unint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v60);
        }
        if ((v54 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t EmptyString = (v54 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
        }
        unint64_t v14 = *(unsigned __int8 *)(EmptyString + 23);
        int v15 = (char)v14;
        if ((v14 & 0x80u) != 0) {
          unint64_t v14 = *(void *)(EmptyString + 8);
        }
        if (v14 < 0xB) {
          goto LABEL_68;
        }
        if (v15 < 0) {
          unint64_t EmptyString = *(void *)EmptyString;
        }
        unint64_t EmptyString = strncmp((const char *)EmptyString, "ND_constant", 0xBuLL);
        if (EmptyString)
        {
LABEL_68:
          if ((v54 & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v16 = (v54 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          }
          unint64_t v17 = *(unsigned __int8 *)(v16 + 23);
          int v18 = (char)v17;
          if ((v17 & 0x80u) != 0) {
            unint64_t v17 = *(void *)(v16 + 8);
          }
          if (v17 < 6) {
            goto LABEL_90;
          }
          if (v18 < 0) {
            unint64_t v16 = *(void *)v16;
          }
          if (strncmp((const char *)v16, "ND_dot", 6uLL)) {
            goto LABEL_90;
          }
          MEMORY[0x2455CF810](&v53, "in");
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v59, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v55, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v53);
          int v40 = v59;
          uint64_t v19 = (uint64_t)v60;
          size_t v60 = 0;
          uint64_t v20 = v41;
          uint64_t v41 = v19;
          if (v20) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v42, &v61);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v43);
          if ((v44 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          MEMORY[0x2455CF810](&v53, "value");
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v59, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v55, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v53);
          int v40 = v59;
          uint64_t v21 = (uint64_t)v60;
          size_t v60 = 0;
          uint64_t v22 = v41;
          uint64_t v41 = v21;
          if (v22) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v42, &v61);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v43);
          if ((v44 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        uint64_t v44 = v62;
        uint64_t v62 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
        if (v60) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v60);
        }
        if ((v53 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_90:
        if ((v54 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CECB0](&v55);
LABEL_102:
        *(_DWORD *)a2 = v40;
        uint64_t v25 = v41;
        uint64_t v41 = 0;
        uint64_t v26 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v25;
        if (v26) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v33, &v42);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v34);
        if (&v40 == (int *)a2)
        {
          uint64_t v28 = v44;
        }
        else
        {
          uint64_t v27 = *(void *)(a2 + 24);
          if ((v27 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v28 = 0;
          *(void *)(a2 + 24) = v44;
          uint64_t v44 = 0;
        }
        if ((v28 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
        if (v41) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
        }
        if ((v39 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
        if (v36) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
        }
        char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a2);
        if ((IsValid & 1) == 0)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v31, v33);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v32, v34);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a2 + 24) = 0;
        }
        if ((v49 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
        if (v46) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
        }
        if ((IsValid & 1) == 0) {
          goto LABEL_126;
        }
        break;
      case 0:
        *(_DWORD *)a1 = 3;
        *(void *)(a1 + 8) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *(void *)(a1 + 24) = 0;
LABEL_125:
        char v5 = 1;
        goto LABEL_126;
    }
  }
LABEL_126:
  if ((v51 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t result = (_DWORD *)MEMORY[0x2455CF2C0](v52);
  if ((v5 & 1) == 0)
  {
LABEL_129:
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

void sub_23F7ACE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v34 = *(void *)(v32 - 160);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF2C0](v32 - 120);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a22);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a18);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a26);
  if ((a31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF2C0](&a32);
  _Unwind_Resume(a1);
}

uint64_t makeImportSettingsForUsdPreviewSurface(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2, void *a3, void *a4, char a5)
{
  uint64_t v10 = (std::string *)(std::string::basic_string[abi:ne180100]<0>((void *)a1, "") + 3);
  std::string::basic_string[abi:ne180100]<0>(v10, "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 48), "rgba");
  *(_DWORD *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 76) = 0;
  MEMORY[0x2455CF810](&__p, "file");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v26, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v26)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    ColorSpace = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(&v25, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v26);
    if ((v25 & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t EmptyString = (const std::string *)((v25 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      unint64_t EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ColorSpace);
    }
    std::string::operator=((std::string *)a1, EmptyString);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData(&v24, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v26);
    std::string::basic_string[abi:ne180100]<0>(&__p, "downsampleFactor");
    uint64_t ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
    unint64_t v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
    if ((v22[7] & 0x80000000) != 0)
    {
      operator delete(__p);
      if (!v14) {
        goto LABEL_13;
      }
    }
    else if (!ValueAtPath)
    {
LABEL_13:
      std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v24, 0);
      if ((v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_15;
    }
    *(_DWORD *)(a1 + 72) = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(v14);
    goto LABEL_13;
  }
LABEL_15:
  MEMORY[0x2455D2770](v10, "none");
  MEMORY[0x2455CF810](&v25, "inputs:sourceColorSpace");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&__p, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v25);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  char IsValid = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p);
  if (IsValid)
  {
    char IsValid = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput();
    if (IsValid)
    {
      if (*(char *)(a1 + 23) < 0)
      {
        if (!*(void *)(a1 + 8)) {
          goto LABEL_23;
        }
      }
      else if (!*(unsigned char *)(a1 + 23))
      {
LABEL_23:
        uint64_t v25 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      }
    }
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v16 = (const std::string *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t v16 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(IsValid);
  }
  unint64_t v17 = std::string::operator=((std::string *)(a1 + 48), v16);
  *(unsigned char *)(a1 + 76) = a5;
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v18 = (const std::string *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v18 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v17);
  }
  std::string::operator=(v10, v18);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v22);
  if (v21) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
  }
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  uint64_t result = v27;
  if (v27) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v27);
  }
  return result;
}

void sub_23F7AD2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&__p);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a18);
  _Unwind_Resume(a1);
}

void componentInputs(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  v62[0] = 0;
  v62[1] = 0;
  int v61 = (uint64_t *)v62;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes((uint64_t *)&v52, a2);
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v52;
  uint64_t v5 = (uint64_t)v53;
  if (v52 != v53)
  {
    do
    {
      uint64_t Name = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v4);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v4, &v44);
      std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)&v48, *Name, &v44);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v61, (uint64_t *)&v48, (uint64_t)&v48);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
      if ((v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44);
      unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v4 + 32);
    }
    while (v4 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v5);
  }
  unint64_t v48 = (unint64_t)&v52;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  uint64_t UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v7);
  unint64_t v10 = *(void *)UsdPrimDefaultPredicate;
  uint64_t v9 = *(void *)(UsdPrimDefaultPredicate + 8);
  uint64_t v11 = *(void *)(UsdPrimDefaultPredicate + 16);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v10 & 0x2000) != 0 || (v9 & 0x2000) == 0))
  {
    v10 |= 0x2000uLL;
    v9 &= ~0x2000uLL;
  }
  unint64_t v48 = v10;
  uint64_t v49 = v9;
  *(void *)&long long v50 = v11;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)a2, (uint64_t *)&v48, (uint64_t)&v52);
  unint64_t v48 = (unint64_t)v52;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, &v53);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v49 + 1, (_DWORD *)&v53 + 1);
  long long v50 = v54;
  uint64_t v51 = v55;
  uint64_t v44 = v56;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v45, &v57);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v45 + 1, &v58);
  long long v46 = v59;
  uint64_t v47 = v60;
  while ((void **)v48 != v44
       || v49 != v45
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v50, (uint64_t)&v46))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v48, (uint64_t)v40);
    int v13 = v41;
    if (!v41 || (*((unsigned char *)v41 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v41, v12);
    }
    unint64_t v14 = (void *)*((void *)v13 + 3);
    unint64_t v15 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v15) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*v14 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v15 + 80) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_23;
    }
    unint64_t v16 = v41;
    if (!v41 || (*((unsigned char *)v41 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v41, v12);
    }
    unint64_t v17 = (void *)*((void *)v16 + 3);
    unint64_t v18 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v18) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*v17 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v18 + 16) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_23:
      uint64_t v19 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v40);
      componentInputs(&v37, v40, a3);
      std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)&v38, *v19, &v37);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v61, &v38, (uint64_t)&v38);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
      if ((v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
    }
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
    if (v41) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v41);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v48);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v52);
  unint64_t v20 = atomic_load(&realityio::tokens::EcsTokens);
  if (!v20) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v20 + 120));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v21 = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v21, (_DWORD *)a1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v52 + 1, (_DWORD *)(a1 + 4));
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::map[abi:ne180100]((uint64_t *)&v53, (uint64_t)&v61);
  unint64_t v22 = a3[1];
  unint64_t v23 = a3[2];
  if (v22 >= v23)
  {
    uint64_t v25 = (uint64_t)(v22 - *a3) >> 5;
    if ((unint64_t)(v25 + 1) >> 59) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v23 - *a3;
    uint64_t v27 = v26 >> 4;
    if (v26 >> 4 <= (unint64_t)(v25 + 1)) {
      uint64_t v27 = v25 + 1;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28)
    {
      if (v28 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v29 = (char *)operator new(32 * v28);
    }
    else
    {
      uint64_t v29 = 0;
    }
    uint64_t v30 = &v29[32 * v28];
    uint64_t v31 = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::pair[abi:ne180100]((uint64_t)&v29[32 * v25], (uint64_t)&v52);
    uint64_t v24 = v31 + 32;
    long long v33 = (char *)*a3;
    uint64_t v32 = (char *)a3[1];
    if (v32 == (char *)*a3)
    {
      *a3 = v31;
      a3[1] = v24;
      a3[2] = (uint64_t)v30;
    }
    else
    {
      do
      {
        v32 -= 32;
        uint64_t v31 = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::pair[abi:ne180100](v31 - 32, (uint64_t)v32);
      }
      while (v32 != v33);
      uint64_t v32 = (char *)*a3;
      uint64_t v34 = a3[1];
      *a3 = v31;
      a3[1] = v24;
      a3[2] = (uint64_t)v30;
      while ((char *)v34 != v32)
      {
        v34 -= 32;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy[abi:ne180100](v34);
      }
    }
    if (v32) {
      operator delete(v32);
    }
  }
  else
  {
    uint64_t v24 = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::pair[abi:ne180100](v22, (uint64_t)&v52)+ 32;
  }
  a3[1] = v24;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v53, (void *)v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v61, v62[0]);
}

void sub_23F7AD928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, pxrInternal__aapl__pxrReserved__::SdfPath *a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v35 - 192));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a17);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v35 - 112, *(void **)(v35 - 104));
  _Unwind_Resume(a1);
}

uint64_t std::pair<char const*,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair(uint64_t a1)
{
  return a1;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,char const*>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::operator[](uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v6, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, a2 + 1);
  char v8 = 0;
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::insert(a1, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  return v4 + 1;
}

void sub_23F7ADB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
}

void anonymous namespace'::stageMetaDataPath(uint64_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v4 = *(unsigned char **)a2;
    uint64_t v3 = *(void *)(a2 + 8);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
    unint64_t v4 = (unsigned char *)a2;
    if (!*(unsigned char *)(a2 + 23)) {
      goto LABEL_8;
    }
  }
  do
  {
    if (*v4 == 58) {
      *unint64_t v4 = 47;
    }
    ++v4;
    --v3;
  }
  while (v3);
LABEL_8:
  uint64_t v5 = (void *)atomic_load(&realityio::tokens::StageTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v6 = *v5 & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    int v7 = (char *)(v6 + 16);
    if (*(char *)(v6 + 39) < 0) {
      int v7 = *(char **)v7;
    }
  }
  else
  {
    int v7 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(v11, v7);
  MEMORY[0x2455CF7A0](v13, v11);
  std::operator+<char>();
  MEMORY[0x2455CF7A0](v10, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v10);
  if (v9 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v13);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_23F7ADC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 24));
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::findFirstUVAttributeNameForMeshNode(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0::operator()(void *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v15[3] = 0;
  v15[0] = MEMORY[0x263F907A0] + 16;
  unint64_t v2 = (unint64_t *)MEMORY[0x263F90550];
  uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)v15, v3, 0);
  unint64_t v4 = atomic_load(v2);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  uint64_t v5 = *(void *)(v4 + 216);
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  char v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v16 = (void **)&v9;
  char v17 = 0;
  unint64_t v6 = operator new(8uLL);
  char v9 = v6;
  unint64_t v10 = v6;
  void *v6 = v5;
  uint64_t v11 = v6 + 1;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v10 = v6 + 1;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
  MEMORY[0x2455CECB0](v12);
  unint64_t v16 = (void **)&v9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v16);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size) {
    std::operator+<char>();
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  MEMORY[0x2455CEF40](v14);
  return MEMORY[0x2455CF4B0](v15);
}

void sub_23F7ADEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  MEMORY[0x2455CEF40](&a21);
  MEMORY[0x2455CF4B0](v21 - 80);
  _Unwind_Resume(a1);
}

void sub_23F7AE2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v19 = 48;
  while (1)
  {
    uint64_t v20 = *(void *)(&a11 + v19);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v19 -= 8;
    if (v19 == -8)
    {
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455D2BD0](v11, 0x60C400003D80CLL);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SamplingTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SamplingTokens_StaticTokenType>>::_TryToCreateData()
{
}

void sub_23F7AE4C8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C405399E965);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath,0>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)a1 = a2;
  if ((a2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a3 + 1);
  return a1;
}

uint64_t anonymous namespace'::getShaderType(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  MEMORY[0x2455CF810]();
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v8 = MEMORY[0x263F906F0] + 16;
    if (v9
      && (*(unsigned char *)(v9 + 57) & 8) == 0
      && (*(unsigned int (**)(uint64_t *))(MEMORY[0x263F906F0] + 48))(&v8))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(&v4, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v8);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v4)) {
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      }
      if ((v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
      if (v5) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
      }
    }
    return MEMORY[0x2455CECB0](&v8);
  }
  return result;
}

void sub_23F7AE66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MEMORY[0x2455CECB0](va);
  if ((*v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t getSemanticPriority(void *a1)
{
                                                  + 48) & 0xFFFFFFFFFFFFFFF8))
    return 0;
                                                  + 32) & 0xFFFFFFFFFFFFFFF8))
    return 1;
                                                  + 16) & 0xFFFFFFFFFFFFFFF8))
    return 2;
                                                  + 24) & 0xFFFFFFFFFFFFFFF8))
    return 3;
                                                  + 8) & 0xFFFFFFFFFFFFFFF8))
    return 4;
  MEMORY[0x2455CF810](&v5, "");
  unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v3 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit(v3, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v2 == v3) {
    return 5;
  }
                                                  + 40) & 0xFFFFFFFFFFFFFFF8))
    return 6;
  return 0;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v5 = (void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a1 + 16;
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *(void *)(a2 + 8) = v5;
    *uint64_t v5 = 0;
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    *(void *)(a1 + 8) = v7;
  }
  return a1;
}

uint64_t std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::deque<BOOL>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 4096;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v3;
  }
  uint64_t v19 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[40 * v2];
  std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v8, a2);
  uint64_t v10 = *a1;
  unint64_t v9 = a1[1];
  if (v9 == *a1)
  {
    int64x2_t v12 = vdupq_n_s64(v9);
    uint64_t v11 = v8;
  }
  else
  {
    uint64_t v11 = v8;
    do
    {
      v11 -= 40;
      v9 -= 40;
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v11, v9);
    }
    while (v9 != v10);
    int64x2_t v12 = *(int64x2_t *)a1;
  }
  uint64_t v13 = v8 + 40;
  *a1 = v11;
  a1[1] = v13;
  int64x2_t v17 = v12;
  uint64_t v14 = a1[2];
  a1[2] = (uint64_t)&v7[40 * v6];
  uint64_t v18 = v14;
  uint64_t v16 = v12.i64[0];
  std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)&v16);
  return v13;
}

_DWORD *std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 32), (_DWORD *)(a2 + 32));

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 36), (_DWORD *)(a2 + 36));
}

uint64_t std::allocator<TgBase::TargetInfoT>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  unint64_t v3 = (void **)(a1 + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::allocator<TgBase::TargetInfoT>::destroy[abi:ne180100](i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<TgBase::TargetInfoT>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData()
{
}

void sub_23F7AED3C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C405FAED287);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_Hash(void **a1)
{
  uint64_t v1 = (uint64_t)(*a1 + 1);
  uint64_t v2 = (void *)**a1;
  if (v2 == (void *)v1)
  {
    unint64_t v12 = 0;
  }
  else
  {
    int v3 = 0;
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = (void *)v2[1];
      unint64_t v6 = v2;
      if (v5)
      {
        do
        {
          uint64_t v7 = v5;
          unint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          unint64_t v6 = v7;
        }
        while (!v8);
      }
      uint64_t v9 = *((unsigned int *)v2 + 8);
      if (v3) {
        v9 += (v4 + v9 + (v4 + v9) * (v4 + v9)) >> 1;
      }
      else {
        int v3 = 1;
      }
      uint64_t v10 = *((unsigned int *)v2 + 9);
      unint64_t v11 = v9 + v10 + (v9 + v10) * (v9 + v10);
      unint64_t v4 = (v2[5] & 0xFFFFFFFFFFFFFFF8)
         + (((v2[5] & 0xFFFFFFFFFFFFFFF8)
           + v10
           + (v11 >> 1)
           + ((v2[5] & 0xFFFFFFFFFFFFFFF8) + v10 + (v11 >> 1)) * ((v2[5] & 0xFFFFFFFFFFFFFFF8) + v10 + (v11 >> 1))) >> 1);
      uint64_t v2 = v7;
    }
    while (v7 != (void *)v1);
    unint64_t v12 = 0x9E3779B97F4A7C55 * v4;
  }
  return bswap64(v12);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_Equal(void **a1, void ***a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void>::Equal(*a1, **a2, (uint64_t)(*a2)[2]);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void>::Equal(*a1, *(void **)a2, *(void *)(a2 + 16));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 24));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F7AEEFC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__13mapIN32pxrInternal__aapl__pxrReserved__7SdfPathENS1_7TfTokenENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(v2, *(void **)(v2 + 8));
    MEMORY[0x2455D2BD0](v2, 0x1020C401C4E69EBLL);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void>::Equal(void *a1, void *a2, uint64_t a3)
{
  if (a1[2] != a3) {
    return 0;
  }
  unint64_t v5 = (void *)*a1;
  int v3 = a1 + 1;
  unint64_t v4 = v5;
  while (v4 != v3)
  {
    if (v4[4] != a2[4] || (v4[5] & 0xFFFFFFFFFFFFFFF8) != (a2[5] & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    unint64_t v6 = (void *)v4[1];
    uint64_t v7 = v4;
    if (v6)
    {
      do
      {
        unint64_t v4 = v6;
        unint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        unint64_t v4 = (void *)v7[2];
        BOOL v8 = *v4 == (void)v7;
        uint64_t v7 = v4;
      }
      while (!v8);
    }
    uint64_t v9 = (void *)a2[1];
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v10 = (void *)a2[2];
        BOOL v8 = *v10 == (void)a2;
        a2 = v10;
      }
      while (!v8);
    }
    a2 = v10;
  }
  return 1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy()
{
}

void sub_23F7AF174(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelBinding>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v4 - 1);
        if (v6)
        {
          BOOL v8 = v4 - 16;
          uint64_t v7 = (atomic_ullong *)*((void *)v4 - 2);
          if (v7)
          {
            if (atomic_fetch_add_explicit(v7, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
            {
              __dmb(9u);
              uint64_t v13 = *(void (**)(void))(*(void *)v8 + 8);
              if (v13) {
                v13();
              }
            }
          }
          else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
          {
            __dmb(9u);
            uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)*((void *)v4 - 1);
            uint64_t v10 = *((void *)v4 - 5);
            if (v10)
            {
              uint64_t v11 = 400 * v10;
              do
              {
                pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery(v9);
                uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)(v12 + 400);
                v11 -= 400;
              }
              while (v11);
              uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)*((void *)v4 - 1);
            }
            operator delete((char *)v9 - 16);
          }
          *(void *)BOOL v8 = 0;
          *((void *)v4 - 1) = 0;
        }
        v4 -= 64;
        MEMORY[0x2455CEDD0](v4);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 8);
  v9[0] = (uint64_t *)operator new(0x30uLL);
  v9[1] = v6;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9[0] + 7, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9[0] + 8, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9[0] + 9, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9[0] + 10, a3 + 1);
  char v10 = 1;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t *)v7;
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((uint64_t *)((char *)v9[0] + 28), (void *)(v7 + 28)))break; {
        uint64_t v7 = *v6;
        }
        BOOL v8 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = v6[1];
    }
    while (v7);
    BOOL v8 = (uint64_t **)(v6 + 1);
  }
  else
  {
    BOOL v8 = (uint64_t **)v6;
  }
LABEL_8:
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v6, v8, v9[0]);
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
}

void sub_23F7AF3B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__equal_range_multi<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  int v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (void *)((char *)v3 + 28)) & 1) != 0)
  {
    uint64_t v2 = v3;
LABEL_6:
    int v3 = (void *)*v3;
    if (!v3) {
      return v2;
    }
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)((char *)v3 + 28), a2))
  {
    ++v3;
    goto LABEL_6;
  }
  uint64_t v7 = (void *)*v3;
  unint64_t v5 = v3;
  if (*v3)
  {
    unint64_t v5 = v3;
    do
    {
      int v8 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)((char *)v7 + 28), a2);
      uint64_t v9 = v7 + 1;
      if (!v8)
      {
        uint64_t v9 = v7;
        unint64_t v5 = v7;
      }
      uint64_t v7 = (void *)*v9;
    }
    while (*v9);
  }
  char v10 = (void *)v3[1];
  if (v10)
  {
    do
    {
      int v11 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (void *)((char *)v10 + 28));
      uint64_t v12 = v10 + 1;
      if (v11) {
        uint64_t v12 = v10;
      }
      char v10 = (void *)*v12;
    }
    while (*v12);
  }
  return v5;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t **a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v12, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    int v8 = *a3;
    uint64_t v6 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    void v6[4] = *v8;
    uint64_t *v8 = 0;
    v6[5] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    char v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v7, v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v6;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 80), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_Equal(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return realityio::TextureAssetAction::ImportOperationSettings::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_EqualPtr(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return realityio::TextureAssetAction::ImportOperationSettings::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 80));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F7AF65C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C407185A532);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio18TextureAssetAction23ImportOperationSettingsE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 80), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    if (*(char *)(v2 + 71) < 0) {
      operator delete(*(void **)(v2 + 48));
    }
    if (*(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x2455D2BD0](v2, 0x1012C407185A532);
  }
  return a1;
}

BOOL realityio::TextureAssetAction::ImportOperationSettings::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  size_t v3 = *((void *)a2 + 1);
  if ((v2 & 0x80u) == 0) {
    uint64_t v4 = a2[23];
  }
  else {
    uint64_t v4 = *((void *)a2 + 1);
  }
  uint64_t v5 = a1[23];
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a1 + 1);
  }
  if (v4 != v5) {
    return 0;
  }
  if (v6 >= 0) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)a1;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v9, v3)) {
      return 0;
    }
  }
  else if (v2)
  {
    char v10 = a2;
    while (*v10 == *v9)
    {
      ++v10;
      ++v9;
      if (!--v2) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v11 = a2[47];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = a2[47];
  }
  else {
    uint64_t v12 = *((void *)a2 + 4);
  }
  uint64_t v13 = a1[47];
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)a1 + 4);
  }
  if (v12 != v13) {
    return 0;
  }
  unint64_t v15 = (const void **)(a2 + 24);
  if (v14 >= 0) {
    uint64_t v16 = a1 + 24;
  }
  else {
    uint64_t v16 = (unsigned __int8 *)*((void *)a1 + 3);
  }
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*v15, v16, *((void *)a2 + 4))) {
      return 0;
    }
  }
  else if (a2[47])
  {
    while (*(unsigned __int8 *)v15 == *v16)
    {
      unint64_t v15 = (const void **)((char *)v15 + 1);
      ++v16;
      if (!--v11) {
        goto LABEL_32;
      }
    }
    return 0;
  }
LABEL_32:
  uint64_t v17 = a2[71];
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = a2[71];
  }
  else {
    uint64_t v18 = *((void *)a2 + 7);
  }
  uint64_t v19 = a1[71];
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *((void *)a1 + 7);
  }
  if (v18 != v19) {
    return 0;
  }
  uint64_t v21 = (const void **)(a2 + 48);
  if (v20 >= 0) {
    unint64_t v22 = a1 + 48;
  }
  else {
    unint64_t v22 = (unsigned __int8 *)*((void *)a1 + 6);
  }
  if ((v17 & 0x80) != 0)
  {
    if (memcmp(*v21, v22, *((void *)a2 + 7))) {
      return 0;
    }
  }
  else if (a2[71])
  {
    while (*(unsigned __int8 *)v21 == *v22)
    {
      uint64_t v21 = (const void **)((char *)v21 + 1);
      ++v22;
      if (!--v17) {
        goto LABEL_47;
      }
    }
    return 0;
  }
LABEL_47:
  if (*((_DWORD *)a2 + 18) == *((_DWORD *)a1 + 18)) {
    return a2[76] == a1[76];
  }
  return 0;
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>::_Counted(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  int v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  int v8 = *((_DWORD *)a2 + 18);
  this[3].__r_.__value_.__s.__data_[4] = *((unsigned char *)a2 + 76);
  LODWORD(this[3].__r_.__value_.__l.__data_) = v8;
  atomic_store(0, (unsigned int *)&this[3].__r_.__value_.__r.__words[1]);
  return this;
}

void sub_23F7AFA68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>::_PlaceCopy()
{
}

void sub_23F7AFAFC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C407185A532);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(void *a1, void *a2)
{
  if (a1)
  {
    size_t v3 = a1;
    uint64_t v4 = 1;
    do
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (void *)((char *)v3 + 28)) & 1) == 0)
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)((char *)v3 + 28), a2)) {
          return v4;
        }
        ++v3;
      }
      size_t v3 = (void *)*v3;
    }
    while (v3);
  }
  return 0;
}

void std::deque<BOOL>::push_back(void *a1, unsigned char *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 9) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<BOOL>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(unsigned char *)(*(void *)(v5 + ((v8 >> 9) & 0x7FFFFFFFFFFFF8)) + (v8 & 0xFFF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<BOOL>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1000;
  unint64_t v4 = v2 - 4096;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v38);
      int v40 = &v39[8 * (v38 >> 2)];
      uint64_t v42 = &v39[8 * v41];
      uint64_t v43 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        long long v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)long long v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  int v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  uint64_t v21 = (char *)*a1;
  unint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    uint64_t v25 = operator new(0x1000uLL);
    uint64_t v26 = v25;
    if (v19 != v20)
    {
      *(void *)int v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v49);
      unint64_t v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v53 = (uint64_t *)a1[1];
      long long v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        long long v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        int v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)int v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      long long v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        unint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v82);
      int v40 = &v39[8 * (v82 >> 2)];
      uint64_t v42 = &v39[8 * v83];
      unint64_t v84 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        uint64_t v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        uint64_t v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)uint64_t v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      unint64_t v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v28);
  uint64_t v31 = v30;
  uint64_t v32 = operator new(0x1000uLL);
  long long v33 = &v29[8 * v23];
  uint64_t v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v61);
      long long v33 = &v62[8 * (v61 >> 2)];
      uint64_t v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      uint64_t v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)long long v33 = v32;
  uint64_t v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        int v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v70);
        uint64_t v73 = v71;
        long long v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        uint64_t v64 = v33;
        if (!v74)
        {
          uint64_t v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          int v77 = v33;
          int v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)int v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        uint64_t v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        long long v33 = &v29[8 * (v67 >> 1)];
        uint64_t v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          uint64_t v69 = v64;
        }
        uint64_t v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  uint64_t v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_23F7B0170(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::insert(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::_Grow((void **)a1);
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = (void *)(*(void *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v4));
  if (!*v5)
  {
LABEL_7:
    if (*(void *)(a1 + 24) > (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3)) {
      pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::_Grow((void **)a1);
    }
    operator new();
  }
  uint64_t v6 = (void *)*v5;
  while (*v6 != *(void *)a2)
  {
    uint64_t v6 = (void *)v6[2];
    if (!v6) {
      goto LABEL_7;
    }
  }
  return v6;
}

void sub_23F7B0384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::_Grow(void **a1)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v17);
  unsigned __int8 v2 = atomic_load(MEMORY[0x263F90520]);
  BOOL v3 = (v2 & 1) != 0 && pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin() != 0;
  if (((2 * (void)a1[4]) | 1uLL) <= 7) {
    uint64_t v4 = 7;
  }
  else {
    uint64_t v4 = (2 * (void)a1[4]) | 1;
  }
  a1[4] = (void *)v4;
  unint64_t v5 = v4 + 1;
  if (v4 == -1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    size_t v9 = 8 * v5;
    uint64_t v6 = (char *)operator new(8 * v5);
    uint64_t v8 = &v6[8 * v5];
    bzero(v6, v9);
    uint64_t v7 = &v6[v9];
  }
  uint64_t v10 = a1[1];
  if (v10 != *a1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (v10 - (unsigned char *)*a1) >> 3;
    do
    {
      uint64_t v13 = (unsigned int *)*((void *)*a1 + v11);
      if (v13)
      {
        do
        {
          uint64_t v14 = (unsigned int *)*((void *)v13 + 2);
          unint64_t v15 = bswap64(0x9E3779B97F4A7C55* (v13[1]+ ((v13[1]+ (unint64_t)*v13+ (v13[1] + (unint64_t)*v13) * (v13[1] + (unint64_t)*v13)) >> 1))) & v4;
          *((void *)v13 + 2) = *(void *)&v6[8 * v15];
          *(void *)&v6[8 * v15] = v13;
          uint64_t v13 = v14;
        }
        while (v14);
      }
      ++v11;
    }
    while (v11 != v12);
    uint64_t v10 = *a1;
  }
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  if (v10) {
    operator delete(v10);
  }
  if (!v3) {
    goto LABEL_21;
  }
  do
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
LABEL_21:
    ;
  }
  while (v18--);
}

void sub_23F7B0570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)va);
  _Unwind_Resume(a1);
}

void std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::pop_back(void *a1)
{
  unsigned __int8 v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)(a1 + 5), *(void *)(a1[1] + ((v3 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v3 & 0x1FF));
  uint64_t v5 = *(v2 - 4);
  uint64_t v4 = *(v2 - 3);
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  BOOL v7 = v4 == v5;
  uint64_t v8 = *v2;
  if (v7) {
    uint64_t v6 = 0;
  }
  uint64_t *v2 = v8 - 1;
  if ((unint64_t)(v6 - (v8 + *(v2 - 1)) - 1023) <= 0xFFFFFFFFFFFFFBFFLL)
  {
    operator delete(*(void **)(v4 - 8));
    a1[2] -= 8;
  }
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x270ED7B30](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x270ED7B38](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x270ED7B40](c, data, *(void *)&len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x270EE4440](arg);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x270EE47F0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x270EE49A0](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x270EE49C0](allocator, domain, code, userInfo);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x270EE49C8](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x270EE49D0](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x270EE4F70](theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5048](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x270EE5090](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x270EE50F0](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x270EE5178](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x270EE51E0](length, *(void *)&encoding);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE53F0](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x270EE5400](allocator, URLString, baseURL);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x270EE59E8](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x270EE59F8](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x270EE5B50](space, components);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CA8](name);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F38](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x270EF4F48](idst);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5030](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5040](url, options);
}

void NSLog(NSString *format, ...)
{
}

uint64_t REAcousticMeshComponentGetComponentType()
{
  return MEMORY[0x270F1BEC8]();
}

uint64_t REAmbientLightComponentGetComponentType()
{
  return MEMORY[0x270F1BF28]();
}

uint64_t REAmbientLightComponentSetIntensity()
{
  return MEMORY[0x270F1BF40]();
}

uint64_t REAnchoringComponentGetComponentType()
{
  return MEMORY[0x270F1BFE0]();
}

uint64_t REAnchoringComponentSetDescriptorAlignment()
{
  return MEMORY[0x270F1C0A0]();
}

uint64_t REAnchoringComponentSetDescriptorResourceGroup()
{
  return MEMORY[0x270F1C0D0]();
}

uint64_t REAnchoringComponentSetDescriptorResourceName()
{
  return MEMORY[0x270F1C0D8]();
}

uint64_t REAnchoringComponentSetDescriptorType()
{
  return MEMORY[0x270F1C0F0]();
}

uint64_t REAnchoringComponentSetScaleFactor()
{
  return MEMORY[0x270F1C110]();
}

uint64_t REAnimationComponentActiveAnimationCount()
{
  return MEMORY[0x270F1C140]();
}

uint64_t REAnimationComponentGetComponentType()
{
  return MEMORY[0x270F1C170]();
}

uint64_t REAnimationComponentPlay()
{
  return MEMORY[0x270F1C1C0]();
}

uint64_t REAnimationHandoffDefaultDescEx()
{
  return MEMORY[0x270F1C208]();
}

uint64_t REAnimationLibraryAssetGetEntryByKey()
{
  return MEMORY[0x270F1C220]();
}

uint64_t REAnimationLibraryAssetGetKeyCount()
{
  return MEMORY[0x270F1C238]();
}

uint64_t REAnimationLibraryAssetGetKeys()
{
  return MEMORY[0x270F1C240]();
}

uint64_t REAnimationLibraryComponentAssignAnimationLibraryAsset()
{
  return MEMORY[0x270F1C248]();
}

uint64_t REAnimationLibraryComponentDefaultLocalSubtreeSceneName()
{
  return MEMORY[0x270F1C280]();
}

uint64_t REAnimationLibraryComponentGetAnimationLibraryAsset()
{
  return MEMORY[0x270F1C288]();
}

uint64_t REAnimationLibraryComponentGetComponentType()
{
  return MEMORY[0x270F1C290]();
}

uint64_t REAnimationLibraryDefinitionAddEntryAsset()
{
  return MEMORY[0x270F1C2C0]();
}

uint64_t REAnimationLibraryDefinitionAddKeyedEntryIndex()
{
  return MEMORY[0x270F1C2C8]();
}

uint64_t REAnimationLibraryDefinitionClearEntries()
{
  return MEMORY[0x270F1C2D0]();
}

uint64_t REAnimationLibraryDefinitionCreate()
{
  return MEMORY[0x270F1C2D8]();
}

uint64_t REAnimationLibraryDefinitionCreateAnimationLibraryAsset()
{
  return MEMORY[0x270F1C2E0]();
}

uint64_t REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset()
{
  return MEMORY[0x270F1C2E8]();
}

uint64_t REAnimationLibraryDefinitionGetDefaultEntry()
{
  return MEMORY[0x270F1C2F0]();
}

uint64_t REAnimationLibraryDefinitionGetEntryAsset()
{
  return MEMORY[0x270F1C2F8]();
}

uint64_t REAnimationLibraryDefinitionGetEntryAssetByKey()
{
  return MEMORY[0x270F1C300]();
}

uint64_t REAnimationLibraryDefinitionGetEntryCount()
{
  return MEMORY[0x270F1C308]();
}

uint64_t REAnimationLibraryDefinitionInsertEntryAsset()
{
  return MEMORY[0x270F1C310]();
}

uint64_t REAnimationLibraryDefinitionSetDefaultEntryKey()
{
  return MEMORY[0x270F1C318]();
}

uint64_t REAnimationSceneAssetCreateWithTimeline()
{
  return MEMORY[0x270F1C320]();
}

uint64_t REAnimationSceneAssetCreateWithTimelineAndEntityDefinition()
{
  return MEMORY[0x270F1C328]();
}

uint64_t REAnimationSceneAssetGetRootTimeline()
{
  return MEMORY[0x270F1C330]();
}

uint64_t REAnimationSceneEntityDefinitionCreate()
{
  return MEMORY[0x270F1C338]();
}

uint64_t REAnimationSceneEntityDefinitionSetHasTransformAnimations()
{
  return MEMORY[0x270F1C340]();
}

uint64_t REAnimationSceneEntityDefinitionSetSkeletalPoseDefinitionAsset()
{
  return MEMORY[0x270F1C348]();
}

uint64_t REArrayAccessorGetElementAt()
{
  return MEMORY[0x270F1C360]();
}

uint64_t REArrayAccessorGetSize()
{
  return MEMORY[0x270F1C368]();
}

uint64_t REArrayAccessorReset()
{
  return MEMORY[0x270F1C370]();
}

uint64_t REAssetCopyDependencyArray()
{
  return MEMORY[0x270F1C380]();
}

uint64_t REAssetCopyMetadataString()
{
  return MEMORY[0x270F1C390]();
}

uint64_t REAssetCreateCompiledStreamAndRemap()
{
  return MEMORY[0x270F1C398]();
}

uint64_t REAssetDescriptorCopyData()
{
  return MEMORY[0x270F1C3A0]();
}

uint64_t REAssetDisableNetworkSyncing()
{
  return MEMORY[0x270F1C3A8]();
}

uint64_t REAssetDynamicArrayGetAsset()
{
  return MEMORY[0x270F1C3B0]();
}

uint64_t REAssetDynamicArrayGetSize()
{
  return MEMORY[0x270F1C3B8]();
}

uint64_t REAssetGetAssetId()
{
  return MEMORY[0x270F1C3C0]();
}

uint64_t REAssetGetAssetManager()
{
  return MEMORY[0x270F1C3C8]();
}

uint64_t REAssetGetType()
{
  return MEMORY[0x270F1C3D8]();
}

uint64_t REAssetHandleArrayAdd()
{
  return MEMORY[0x270F1C3E0]();
}

uint64_t REAssetHandleArrayClear()
{
  return MEMORY[0x270F1C3E8]();
}

uint64_t REAssetHandleCreateFromAssetRegistrationOptions()
{
  return MEMORY[0x270F1C418]();
}

uint64_t REAssetHandleSet()
{
  return MEMORY[0x270F1C468]();
}

uint64_t REAssetIsAvailableForMajorVersion()
{
  return MEMORY[0x270F1C470]();
}

uint64_t REAssetLoadRequestAddAsset()
{
  return MEMORY[0x270F1C478]();
}

uint64_t REAssetLoadRequestSetCompletionHandler()
{
  return MEMORY[0x270F1C4A8]();
}

uint64_t REAssetLoadRequestSetLoadAndWaitForResourceSharingClients()
{
  return MEMORY[0x270F1C4B0]();
}

uint64_t REAssetLoadRequestWaitForCompletion()
{
  return MEMORY[0x270F1C4C8]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateBox()
{
  return MEMORY[0x270F1C500]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateCapsule()
{
  return MEMORY[0x270F1C508]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateCompound()
{
  return MEMORY[0x270F1C518]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateEmpty()
{
  return MEMORY[0x270F1C538]();
}

uint64_t REAssetManagerCollisionShapeAssetCreatePlane()
{
  return MEMORY[0x270F1C548]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateSphere()
{
  return MEMORY[0x270F1C550]();
}

uint64_t REAssetManagerCreateAssetHandle()
{
  return MEMORY[0x270F1C560]();
}

uint64_t REAssetManagerCreateAssetRequest()
{
  return MEMORY[0x270F1C570]();
}

uint64_t REAssetManagerCreateTextureAssetFromDataAsync()
{
  return MEMORY[0x270F1C588]();
}

uint64_t REAssetManagerCreateTextureAssetFromDataWithParameters()
{
  return MEMORY[0x270F1C590]();
}

uint64_t REAssetManagerGetEngineQueue()
{
  return MEMORY[0x270F1C5A0]();
}

uint64_t REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMapNullable()
{
  return MEMORY[0x270F1C5B8]();
}

uint64_t REAssetManagerMaterialAssetBuilderBuild()
{
  return MEMORY[0x270F1C5C8]();
}

uint64_t REAssetManagerMaterialAssetBuilderBuildAsync()
{
  return MEMORY[0x270F1C5D0]();
}

uint64_t REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsAsyncRegistration()
{
  return MEMORY[0x270F1C5F8]();
}

uint64_t REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsWithParameters()
{
  return MEMORY[0x270F1C600]();
}

uint64_t REAssetManagerMeshMemoryAssetCreate3DTextWithOptions()
{
  return MEMORY[0x270F1C628]();
}

uint64_t REAssetManagerMeshMemoryAssetCreateBox()
{
  return MEMORY[0x270F1C638]();
}

uint64_t REAssetManagerPhysicsMaterialAssetCreate2()
{
  return MEMORY[0x270F1C640]();
}

uint64_t REAssetManagerRegisterAssetProviderBuilder()
{
  return MEMORY[0x270F1C660]();
}

uint64_t REAssetManagerReplaceAssetRefDataWith()
{
  return MEMORY[0x270F1C670]();
}

uint64_t REAssetManagerSceneAssetCreate()
{
  return MEMORY[0x270F1C680]();
}

uint64_t REAssetManagerShaderGraphMemoryAssetCreate()
{
  return MEMORY[0x270F1C690]();
}

uint64_t REAssetManagerTextureMemoryAssetCreateWithCGImage()
{
  return MEMORY[0x270F1C6A0]();
}

uint64_t REAssetManagerUpdate()
{
  return MEMORY[0x270F1C6E0]();
}

uint64_t REAssetProviderBuilderCreate()
{
  return MEMORY[0x270F1C6F8]();
}

uint64_t REAssetProviderBuilderSetREAssetRefLoadCallback()
{
  return MEMORY[0x270F1C700]();
}

uint64_t REAssetProviderBuilderSetUserData()
{
  return MEMORY[0x270F1C708]();
}

uint64_t REAssetProviderCompiledDataLoadContextGetDescriptor()
{
  return MEMORY[0x270F1C710]();
}

uint64_t REAssetRegistrationOptionsCreate()
{
  return MEMORY[0x270F1C718]();
}

uint64_t REAssetSerializeToJSON()
{
  return MEMORY[0x270F1C728]();
}

uint64_t REAssetSetDebugName()
{
  return MEMORY[0x270F1C740]();
}

uint64_t REAssetSetMetadataString()
{
  return MEMORY[0x270F1C748]();
}

uint64_t REAssetWithMetadataCreate()
{
  return MEMORY[0x270F1C778]();
}

uint64_t REAudioAnimationComponentGetComponentType()
{
  return MEMORY[0x270F1C7A0]();
}

uint64_t REAudioAnimationComponentSetAudioAsset()
{
  return MEMORY[0x270F1C7B0]();
}

uint64_t REAudioAnimationComponentSetMediaOffset()
{
  return MEMORY[0x270F1C7C0]();
}

uint64_t REAudioFileAssetCompleteLoadWithService()
{
  return MEMORY[0x270F1C7E0]();
}

uint64_t REAudioFileAssetCreateWithMappedDataNullable()
{
  return MEMORY[0x270F1C898]();
}

uint64_t REAudioFileAssetGetLengthInSeconds()
{
  return MEMORY[0x270F1C8D8]();
}

uint64_t REAudioFileAssetMakeMutableAndReplaceWithData()
{
  return MEMORY[0x270F1C920]();
}

uint64_t REAudioFileAssetSetInputMode()
{
  return MEMORY[0x270F1C928]();
}

uint64_t REAudioFileAssetSetLoopCount()
{
  return MEMORY[0x270F1C938]();
}

uint64_t REAudioPlayerComponentGetComponentType()
{
  return MEMORY[0x270F1CA60]();
}

uint64_t REBlendShapeWeightsComponentGetComponentType()
{
  return MEMORY[0x270F1CDF0]();
}

uint64_t REBlendShapeWeightsComponentSetBlendShapeWeightsCount()
{
  return MEMORY[0x270F1CDF8]();
}

uint64_t REBlendShapeWeightsComponentSetBlendShapeWeightsDefinition()
{
  return MEMORY[0x270F1CE00]();
}

uint64_t REBlendShapeWeightsComponentSetBlendWeight()
{
  return MEMORY[0x270F1CE08]();
}

uint64_t REBlendShapeWeightsComponentSetBlendWeightCount()
{
  return MEMORY[0x270F1CE10]();
}

uint64_t REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitions()
{
  return MEMORY[0x270F1CE20]();
}

uint64_t REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitionsAndWeightNames()
{
  return MEMORY[0x270F1CE28]();
}

uint64_t RECGColorToColorGamut()
{
  return MEMORY[0x270F1CEB0]();
}

uint64_t RECIntrospectionAlloc()
{
  return MEMORY[0x270F1CEB8]();
}

uint64_t RECIntrospectionFree()
{
  return MEMORY[0x270F1CED0]();
}

uint64_t RECIntrospectionStructRegister()
{
  return MEMORY[0x270F1CED8]();
}

uint64_t RECameraMovementComponentGetComponentType()
{
  return MEMORY[0x270F1CEE8]();
}

uint64_t REColliderComponentGetComponentType()
{
  return MEMORY[0x270F1D110]();
}

uint64_t REColliderComponentSetGroup()
{
  return MEMORY[0x270F1D138]();
}

uint64_t REColliderComponentSetInteractionType()
{
  return MEMORY[0x270F1D140]();
}

uint64_t REColliderComponentSetMask()
{
  return MEMORY[0x270F1D148]();
}

uint64_t REColliderComponentSetShape()
{
  return MEMORY[0x270F1D150]();
}

uint64_t RECollisionShapeAssetGetCollisionShape()
{
  return MEMORY[0x270F1D268]();
}

uint64_t RECollisionShapeAssetGetType()
{
  return MEMORY[0x270F1D270]();
}

uint64_t REComponentClassFromName()
{
  return MEMORY[0x270F1D2A8]();
}

uint64_t REComponentClassFromTypeInfo()
{
  return MEMORY[0x270F1D2B8]();
}

uint64_t REComponentClassGetName()
{
  return MEMORY[0x270F1D2C0]();
}

uint64_t REComponentCopy()
{
  return MEMORY[0x270F1D2C8]();
}

uint64_t REComponentCreateByClass()
{
  return MEMORY[0x270F1D2D0]();
}

uint64_t REComponentDeserializeFromOPACKData()
{
  return MEMORY[0x270F1D2E0]();
}

uint64_t REComponentGetClass()
{
  return MEMORY[0x270F1D2E8]();
}

uint64_t REComponentGetEntity()
{
  return MEMORY[0x270F1D2F0]();
}

uint64_t REComponentIsAvailableForMajorVersion()
{
  return MEMORY[0x270F1D2F8]();
}

uint64_t REComponentMarkDirty()
{
  return MEMORY[0x270F1D300]();
}

uint64_t REComponentSerializeCopyToOPACKData()
{
  return MEMORY[0x270F1D310]();
}

uint64_t RECreateCubeTextureDataFromLatLong()
{
  return MEMORY[0x270F1D450]();
}

uint64_t RECustomComponentGetObject()
{
  return MEMORY[0x270F1D4D8]();
}

uint64_t RECustomComponentTypeCreate()
{
  return MEMORY[0x270F1D4E8]();
}

uint64_t RECustomComponentTypeDestroy()
{
  return MEMORY[0x270F1D4F8]();
}

uint64_t REDecomposeMatrix()
{
  return MEMORY[0x270F1D678]();
}

uint64_t REDictionaryAddEntry()
{
  return MEMORY[0x270F1D688]();
}

uint64_t REDictionaryIteratorCreate()
{
  return MEMORY[0x270F1D690]();
}

uint64_t REDictionaryIteratorDestroy()
{
  return MEMORY[0x270F1D698]();
}

uint64_t REDictionaryIteratorGetCurrentKey()
{
  return MEMORY[0x270F1D6A0]();
}

uint64_t REDictionaryIteratorGetCurrentValue()
{
  return MEMORY[0x270F1D6A8]();
}

uint64_t REDictionaryIteratorMoveNext()
{
  return MEMORY[0x270F1D6B0]();
}

uint64_t REDirectionalLightComponentGetComponentType()
{
  return MEMORY[0x270F1D728]();
}

uint64_t REDirectionalLightComponentSetIntensity()
{
  return MEMORY[0x270F1D748]();
}

uint64_t REDirectionalLightShadowMapComponentGetComponentType()
{
  return MEMORY[0x270F1D760]();
}

uint64_t REDynamicStringGetValue()
{
  return MEMORY[0x270F1D820]();
}

uint64_t REDynamicStringSet()
{
  return MEMORY[0x270F1D828]();
}

uint64_t REECSOPACKDeserializerCreate()
{
  return MEMORY[0x270F1D8A8]();
}

uint64_t REECSOPACKSerializerCreate()
{
  return MEMORY[0x270F1D8B0]();
}

uint64_t REEngineConfigurationCreateFromEngine()
{
  return MEMORY[0x270F1D978]();
}

uint64_t REEngineConfigurationGetEngineQueue()
{
  return MEMORY[0x270F1D9A0]();
}

uint64_t REEngineGetServiceLocator()
{
  return MEMORY[0x270F1DAB8]();
}

uint64_t REEntityAddComponentByClass()
{
  return MEMORY[0x270F1DB68]();
}

uint64_t REEntityAddExistingComponent()
{
  return MEMORY[0x270F1DB80]();
}

uint64_t REEntityCreate()
{
  return MEMORY[0x270F1DBD0]();
}

uint64_t REEntityGetChild()
{
  return MEMORY[0x270F1DBE8]();
}

uint64_t REEntityGetChildCount()
{
  return MEMORY[0x270F1DBF0]();
}

uint64_t REEntityGetChildren()
{
  return MEMORY[0x270F1DBF8]();
}

uint64_t REEntityGetComponentAtIndex()
{
  return MEMORY[0x270F1DC08]();
}

uint64_t REEntityGetComponentByClass()
{
  return MEMORY[0x270F1DC10]();
}

uint64_t REEntityGetComponentCount()
{
  return MEMORY[0x270F1DC18]();
}

uint64_t REEntityGetCustomComponent()
{
  return MEMORY[0x270F1DC20]();
}

uint64_t REEntityGetName()
{
  return MEMORY[0x270F1DC30]();
}

uint64_t REEntityGetOrAddComponentByClass()
{
  return MEMORY[0x270F1DC40]();
}

uint64_t REEntityGetOrAddCustomComponent()
{
  return MEMORY[0x270F1DC48]();
}

uint64_t REEntityGetParent()
{
  return MEMORY[0x270F1DC50]();
}

uint64_t REEntityGetSceneNullable()
{
  return MEMORY[0x270F1DC60]();
}

uint64_t REEntityGetSelfEnabled()
{
  return MEMORY[0x270F1DC68]();
}

uint64_t REEntityHandleSet()
{
  return MEMORY[0x270F1DC78]();
}

uint64_t REEntityInsertChild()
{
  return MEMORY[0x270F1DC80]();
}

uint64_t REEntityRemoveComponentByClass()
{
  return MEMORY[0x270F1DCC8]();
}

uint64_t REEntityRemoveFromSceneOrParent()
{
  return MEMORY[0x270F1DCD8]();
}

uint64_t REEntitySetName()
{
  return MEMORY[0x270F1DCE8]();
}

uint64_t REEntitySetParent()
{
  return MEMORY[0x270F1DCF0]();
}

uint64_t REEntitySetSelfEnabled()
{
  return MEMORY[0x270F1DCF8]();
}

uint64_t REFilterMapComponentGetComponentType()
{
  return MEMORY[0x270F1DD98]();
}

uint64_t REFilterMapComponentSetMaterial()
{
  return MEMORY[0x270F1DDA0]();
}

uint64_t REGeomBuildBoxDefaultOptions()
{
  return MEMORY[0x270F1DF30]();
}

uint64_t REGeomBuildCapsuleDefaultOptions()
{
  return MEMORY[0x270F1DF40]();
}

uint64_t REGeomBuildConeDefaultOptions()
{
  return MEMORY[0x270F1DF48]();
}

uint64_t REGeomBuildCylinderDefaultOptions()
{
  return MEMORY[0x270F1DF50]();
}

uint64_t REGeomBuildSphereDefaultOptions()
{
  return MEMORY[0x270F1DF68]();
}

uint64_t REGeomInstanceCreate()
{
  return MEMORY[0x270F1DF70]();
}

uint64_t REGeomModelDescriptorAddAttributeAlias()
{
  return MEMORY[0x270F1DF80]();
}

uint64_t REGeomModelDescriptorAddAttributeDouble()
{
  return MEMORY[0x270F1DF88]();
}

uint64_t REGeomModelDescriptorAddAttributeFloat()
{
  return MEMORY[0x270F1DF90]();
}

uint64_t REGeomModelDescriptorAddAttributeInt32()
{
  return MEMORY[0x270F1DFA0]();
}

uint64_t REGeomModelDescriptorAddAttributeInt8()
{
  return MEMORY[0x270F1DFA8]();
}

uint64_t REGeomModelDescriptorAddAttributeUInt16()
{
  return MEMORY[0x270F1DFB0]();
}

uint64_t REGeomModelDescriptorAddAttributeUInt32()
{
  return MEMORY[0x270F1DFB8]();
}

uint64_t REGeomModelDescriptorAddAttributeUInt8()
{
  return MEMORY[0x270F1DFC0]();
}

uint64_t REGeomModelDescriptorAddAttributeVector2F()
{
  return MEMORY[0x270F1DFC8]();
}

uint64_t REGeomModelDescriptorAddAttributeVector3F()
{
  return MEMORY[0x270F1DFD0]();
}

uint64_t REGeomModelDescriptorAddAttributeVector4F()
{
  return MEMORY[0x270F1DFD8]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeDouble()
{
  return MEMORY[0x270F1DFE0]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeFloat()
{
  return MEMORY[0x270F1DFE8]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeInt32()
{
  return MEMORY[0x270F1DFF8]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeUInt32()
{
  return MEMORY[0x270F1E010]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeUInt8()
{
  return MEMORY[0x270F1E018]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeVector2F()
{
  return MEMORY[0x270F1E020]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeVector3F()
{
  return MEMORY[0x270F1E028]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeVector4F()
{
  return MEMORY[0x270F1E030]();
}

uint64_t REGeomModelDescriptorAddSkinningData()
{
  return MEMORY[0x270F1E038]();
}

uint64_t REGeomModelDescriptorClearMaterialAssignments()
{
  return MEMORY[0x270F1E040]();
}

uint64_t REGeomModelDescriptorCreateFromBoxOptions()
{
  return MEMORY[0x270F1E050]();
}

uint64_t REGeomModelDescriptorCreateFromCapsuleOptions()
{
  return MEMORY[0x270F1E058]();
}

uint64_t REGeomModelDescriptorCreateFromConeOptions()
{
  return MEMORY[0x270F1E060]();
}

uint64_t REGeomModelDescriptorCreateFromCylinderOptions()
{
  return MEMORY[0x270F1E068]();
}

uint64_t REGeomModelDescriptorCreateFromSphereOptions()
{
  return MEMORY[0x270F1E070]();
}

uint64_t REGeomModelDescriptorCreateHighVertexPerPolygon()
{
  return MEMORY[0x270F1E078]();
}

uint64_t REGeomModelDescriptorGetAttributeCount()
{
  return MEMORY[0x270F1E080]();
}

uint64_t REGeomModelDescriptorGetAttributeIndex()
{
  return MEMORY[0x270F1E088]();
}

uint64_t REGeomModelDescriptorGetAttributeIndexCount()
{
  return MEMORY[0x270F1E090]();
}

uint64_t REGeomModelDescriptorGetAttributeIndices()
{
  return MEMORY[0x270F1E098]();
}

uint64_t REGeomModelDescriptorGetAttributeType()
{
  return MEMORY[0x270F1E0A0]();
}

uint64_t REGeomModelDescriptorGetAttributeValueCount()
{
  return MEMORY[0x270F1E0A8]();
}

uint64_t REGeomModelDescriptorGetAttributeValuesFloat()
{
  return MEMORY[0x270F1E0B0]();
}

uint64_t REGeomModelDescriptorGetAttributeValuesVector3F()
{
  return MEMORY[0x270F1E0B8]();
}

uint64_t REGeomModelDescriptorGetFaceCount()
{
  return MEMORY[0x270F1E0C0]();
}

uint64_t REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon()
{
  return MEMORY[0x270F1E0C8]();
}

uint64_t REGeomModelDescriptorGetIndexCount()
{
  return MEMORY[0x270F1E0D0]();
}

uint64_t REGeomModelDescriptorGetIndices()
{
  return MEMORY[0x270F1E0D8]();
}

uint64_t REGeomModelDescriptorGetVertexCount()
{
  return MEMORY[0x270F1E0E0]();
}

uint64_t REGeomModelDescriptorIsAttributeIndexed()
{
  return MEMORY[0x270F1E0E8]();
}

uint64_t REGeomModelDescriptorSetMaterialAssignmentForModel()
{
  return MEMORY[0x270F1E0F0]();
}

uint64_t REGeomModelDescriptorSetMaterialAssignmentsPerFace()
{
  return MEMORY[0x270F1E0F8]();
}

uint64_t REGeomModelDescriptorSetName()
{
  return MEMORY[0x270F1E100]();
}

uint64_t REGeomModelDescriptorSetSurfaceType()
{
  return MEMORY[0x270F1E108]();
}

uint64_t REGeomModelDescriptorSetWindingOrder()
{
  return MEMORY[0x270F1E110]();
}

uint64_t REGlobalTypeRegistryWithReadLock()
{
  return MEMORY[0x270F1E130]();
}

uint64_t REGroundPlaneComponentGetComponentType()
{
  return MEMORY[0x270F1E138]();
}

uint64_t REGroundingShadowComponentGetComponentType()
{
  return MEMORY[0x270F1E150]();
}

uint64_t REImageBasedLightComponentGetComponentType()
{
  return MEMORY[0x270F1E318]();
}

uint64_t REImageBasedLightComponentGetIBL()
{
  return MEMORY[0x270F1E328]();
}

uint64_t REImageBasedLightComponentSetIBL()
{
  return MEMORY[0x270F1E370]();
}

uint64_t REImageBasedLightComponentSetIntensityExponent()
{
  return MEMORY[0x270F1E388]();
}

uint64_t REImageBasedLightReceiverComponentGetComponentType()
{
  return MEMORY[0x270F1E3A8]();
}

uint64_t RELinkedOnOrAfterFall2024OSVersions()
{
  return MEMORY[0x270F1E478]();
}

uint64_t REListAccessorReset()
{
  return MEMORY[0x270F1E480]();
}

uint64_t REListIteratorCreate()
{
  return MEMORY[0x270F1E488]();
}

uint64_t REListIteratorDestroy()
{
  return MEMORY[0x270F1E490]();
}

uint64_t REListIteratorNextElement()
{
  return MEMORY[0x270F1E498]();
}

uint64_t REMakeMassFrameFromShapeAndMass()
{
  return MEMORY[0x270F1E4C0]();
}

uint64_t REMakePose()
{
  return MEMORY[0x270F1E4C8]();
}

uint64_t REMaterialAssetBuilderAddFunctionLink()
{
  return MEMORY[0x270F1E4E0]();
}

uint64_t REMaterialAssetBuilderBindTextureToSampler()
{
  return MEMORY[0x270F1E4F0]();
}

uint64_t REMaterialAssetBuilderCreate()
{
  return MEMORY[0x270F1E4F8]();
}

uint64_t REMaterialAssetBuilderSetBool()
{
  return MEMORY[0x270F1E500]();
}

uint64_t REMaterialAssetBuilderSetBufferFromBinding()
{
  return MEMORY[0x270F1E508]();
}

uint64_t REMaterialAssetBuilderSetColor3F()
{
  return MEMORY[0x270F1E510]();
}

uint64_t REMaterialAssetBuilderSetColor4F()
{
  return MEMORY[0x270F1E518]();
}

uint64_t REMaterialAssetBuilderSetFloat()
{
  return MEMORY[0x270F1E520]();
}

uint64_t REMaterialAssetBuilderSetFloat2()
{
  return MEMORY[0x270F1E528]();
}

uint64_t REMaterialAssetBuilderSetFloat2x2()
{
  return MEMORY[0x270F1E530]();
}

uint64_t REMaterialAssetBuilderSetFloat3()
{
  return MEMORY[0x270F1E538]();
}

uint64_t REMaterialAssetBuilderSetFloat3x3()
{
  return MEMORY[0x270F1E540]();
}

uint64_t REMaterialAssetBuilderSetFloat4()
{
  return MEMORY[0x270F1E548]();
}

uint64_t REMaterialAssetBuilderSetFloat4x4()
{
  return MEMORY[0x270F1E550]();
}

uint64_t REMaterialAssetBuilderSetFunctionConstant()
{
  return MEMORY[0x270F1E558]();
}

uint64_t REMaterialAssetBuilderSetInt()
{
  return MEMORY[0x270F1E560]();
}

uint64_t REMaterialAssetBuilderSetInt2()
{
  return MEMORY[0x270F1E568]();
}

uint64_t REMaterialAssetBuilderSetInt3()
{
  return MEMORY[0x270F1E570]();
}

uint64_t REMaterialAssetBuilderSetInt4()
{
  return MEMORY[0x270F1E578]();
}

uint64_t REMaterialAssetBuilderSetMTLCullMode()
{
  return MEMORY[0x270F1E580]();
}

uint64_t REMaterialAssetBuilderSetMaterialDefinition()
{
  return MEMORY[0x270F1E588]();
}

uint64_t REMaterialAssetBuilderSetName()
{
  return MEMORY[0x270F1E590]();
}

uint64_t REMaterialAssetBuilderSetNeedsVCABlur()
{
  return MEMORY[0x270F1E5A0]();
}

uint64_t REMaterialAssetBuilderSetSampler()
{
  return MEMORY[0x270F1E5A8]();
}

uint64_t REMaterialAssetBuilderSetTextureFromAsset()
{
  return MEMORY[0x270F1E5B0]();
}

uint64_t REMaterialAssetBuilderSetTextureFromBinding()
{
  return MEMORY[0x270F1E5B8]();
}

uint64_t REMaterialAssetBuilderSetUInt()
{
  return MEMORY[0x270F1E5C0]();
}

uint64_t REMaterialAssetBuilderSetUVIndexForTexture()
{
  return MEMORY[0x270F1E5E0]();
}

uint64_t REMaterialCreateDefaultSamplerDescriptor()
{
  return MEMORY[0x270F1E748]();
}

uint64_t REMemoryAssetParametersCreate()
{
  return MEMORY[0x270F1EB48]();
}

uint64_t REMemoryAssetParametersSetAssetName()
{
  return MEMORY[0x270F1EB50]();
}

uint64_t REMemoryAssetParametersSetAsyncRegistration()
{
  return MEMORY[0x270F1EB58]();
}

uint64_t REMeshAssetCreateBoxDescriptor()
{
  return MEMORY[0x270F1EB78]();
}

uint64_t REMeshAssetCreateCapsuleDescriptor()
{
  return MEMORY[0x270F1EB88]();
}

uint64_t REMeshAssetCreateConeDescriptor()
{
  return MEMORY[0x270F1EB90]();
}

uint64_t REMeshAssetCreateCylinderDescriptor()
{
  return MEMORY[0x270F1EB98]();
}

uint64_t REMeshAssetCreateSphereDescriptor()
{
  return MEMORY[0x270F1EBB0]();
}

uint64_t REMeshAssetDescriptorAddInstance()
{
  return MEMORY[0x270F1EBB8]();
}

uint64_t REMeshAssetDescriptorAddModel()
{
  return MEMORY[0x270F1EBC0]();
}

uint64_t REMeshAssetDescriptorAddSkeleton()
{
  return MEMORY[0x270F1EBC8]();
}

uint64_t REMeshAssetDescriptorCreate()
{
  return MEMORY[0x270F1EBD0]();
}

uint64_t REMeshAssetDescriptorGetModelCount()
{
  return MEMORY[0x270F1EBD8]();
}

uint64_t REMeshAssetGetModelCount()
{
  return MEMORY[0x270F1EC40]();
}

uint64_t REMeshAssetGetModelPartBufferCount()
{
  return MEMORY[0x270F1EC70]();
}

uint64_t REMeshAssetGetModelPartBufferName()
{
  return MEMORY[0x270F1EC78]();
}

uint64_t REMeshAssetGetModelPartCount()
{
  return MEMORY[0x270F1EC80]();
}

uint64_t REMeshAssetGetModelPartMaterial()
{
  return MEMORY[0x270F1EC88]();
}

uint64_t REMeshAssetGetSkeletonAtIndex()
{
  return MEMORY[0x270F1ECB0]();
}

uint64_t REMeshCompileOptionsCreate()
{
  return MEMORY[0x270F1EDA8]();
}

uint64_t REMeshCompileOptionsSetGenerateDecimatedMesh()
{
  return MEMORY[0x270F1EDF8]();
}

uint64_t REMeshCompileOptionsSetPreserveSubdivisonSurfaceData()
{
  return MEMORY[0x270F1EE18]();
}

uint64_t REMeshComponentAddMaterial()
{
  return MEMORY[0x270F1EE30]();
}

uint64_t REMeshComponentGetComponentType()
{
  return MEMORY[0x270F1EE50]();
}

uint64_t REMeshComponentGetMaterialAtIndex()
{
  return MEMORY[0x270F1EE58]();
}

uint64_t REMeshComponentGetMaterialCount()
{
  return MEMORY[0x270F1EE60]();
}

uint64_t REMeshComponentRemoveAllMaterials()
{
  return MEMORY[0x270F1EE78]();
}

uint64_t REMeshComponentSetMesh()
{
  return MEMORY[0x270F1EE98]();
}

uint64_t REMeshDeformationComponentGetComponentType()
{
  return MEMORY[0x270F1EEE8]();
}

uint64_t REMeshSortingComponentGetComponentType()
{
  return MEMORY[0x270F1EF40]();
}

uint64_t RENetworkComponentGetComponentType()
{
  return MEMORY[0x270F1EFE0]();
}

uint64_t RENetworkMarkComponentDirty()
{
  return MEMORY[0x270F1F038]();
}

uint64_t RENullTerminatedStringSet()
{
  return MEMORY[0x270F1F088]();
}

uint64_t REOptionalAccessorSetValue()
{
  return MEMORY[0x270F1F098]();
}

uint64_t REOrthographicCameraComponentGetComponentType()
{
  return MEMORY[0x270F1F0A0]();
}

uint64_t REOrthographicCameraComponentSetNear()
{
  return MEMORY[0x270F1F0D0]();
}

uint64_t REPerspectiveCameraComponentGetComponentType()
{
  return MEMORY[0x270F1F178]();
}

uint64_t REPerspectiveCameraComponentSetFar()
{
  return MEMORY[0x270F1F1A0]();
}

uint64_t REPerspectiveCameraComponentSetNear()
{
  return MEMORY[0x270F1F1B8]();
}

uint64_t REPhysicsOriginComponentGetComponentType()
{
  return MEMORY[0x270F1F2B0]();
}

uint64_t REPointLightComponentGetComponentType()
{
  return MEMORY[0x270F1F3C0]();
}

uint64_t REPointLightComponentSetColorGamut3F()
{
  return MEMORY[0x270F1F3E0]();
}

uint64_t REPointLightComponentSetIntensity()
{
  return MEMORY[0x270F1F3E8]();
}

uint64_t REPoseIdentity()
{
  return MEMORY[0x270F1F4E0]();
}

uint64_t REPoseMultiply()
{
  return MEMORY[0x270F1F4E8]();
}

uint64_t RERealityFileAssetWriteReportCreate()
{
  return MEMORY[0x270F1F638]();
}

uint64_t RERealityFileAssetWriteReportGetError()
{
  return MEMORY[0x270F1F640]();
}

uint64_t RERealityFileWriterClose()
{
  return MEMORY[0x270F1F720]();
}

uint64_t RERealityFileWriterCreateWithParameters()
{
  return MEMORY[0x270F1F728]();
}

uint64_t RERealityFileWriterOpen()
{
  return MEMORY[0x270F1F748]();
}

uint64_t RERealityFileWriterSetMetadataString()
{
  return MEMORY[0x270F1F768]();
}

uint64_t RERealityFileWriterWriteAssetArrayAndDependencies()
{
  return MEMORY[0x270F1F778]();
}

uint64_t RERealityFileWritingParametersCreate()
{
  return MEMORY[0x270F1F788]();
}

uint64_t RERealityFileWritingParametersSetMajorVersion()
{
  return MEMORY[0x270F1F798]();
}

uint64_t RERectAreaLightComponentGetComponentType()
{
  return MEMORY[0x270F1F7B8]();
}

uint64_t RERectAreaLightComponentSetColorGamut3F()
{
  return MEMORY[0x270F1F7C0]();
}

uint64_t RERectAreaLightComponentSetIntensity()
{
  return MEMORY[0x270F1F7D0]();
}

uint64_t RERelease()
{
  return MEMORY[0x270F1F850]();
}

uint64_t RERenderManagerGetRenderDevice()
{
  return MEMORY[0x270F1F9D0]();
}

uint64_t RERenderOptionsComponentGetComponentType()
{
  return MEMORY[0x270F1FA40]();
}

uint64_t RERenderOptionsComponentSetVisibilityMode()
{
  return MEMORY[0x270F1FA50]();
}

uint64_t RERetain()
{
  return MEMORY[0x270F1FA58]();
}

uint64_t RERigComponentGetComponentType()
{
  return MEMORY[0x270F1FA90]();
}

uint64_t RERigidBodyComponentGetComponentType()
{
  return MEMORY[0x270F1FAE0]();
}

uint64_t RERigidBodyComponentSetMassFrame()
{
  return MEMORY[0x270F1FBB0]();
}

uint64_t RERigidBodyComponentSetMaterial()
{
  return MEMORY[0x270F1FBB8]();
}

uint64_t RERigidBodyComponentSetMotionType()
{
  return MEMORY[0x270F1FBC0]();
}

uint64_t RESceneAddEntity()
{
  return MEMORY[0x270F1FC28]();
}

uint64_t RESceneCreate()
{
  return MEMORY[0x270F1FC50]();
}

uint64_t RESceneGetMainIBLComponent()
{
  return MEMORY[0x270F1FCF0]();
}

uint64_t REServiceLocatorGetAssetManager()
{
  return MEMORY[0x270F1FED0]();
}

uint64_t REServiceLocatorGetAudioService()
{
  return MEMORY[0x270F1FEE0]();
}

uint64_t REServiceLocatorGetECSService()
{
  return MEMORY[0x270F1FEF8]();
}

uint64_t REServiceLocatorGetRenderManager()
{
  return MEMORY[0x270F1FF38]();
}

uint64_t REShadowMapComponentGetComponentType()
{
  return MEMORY[0x270F1FFA0]();
}

uint64_t REShadowMapComponentSetDepthBias()
{
  return MEMORY[0x270F1FFA8]();
}

uint64_t REShadowMapComponentSetDistance()
{
  return MEMORY[0x270F1FFB0]();
}

uint64_t RESkeletalPoseComponentGetComponentType()
{
  return MEMORY[0x270F1FFE0]();
}

uint64_t RESkeletalPoseComponentSetSkeletalPoseDefinition()
{
  return MEMORY[0x270F20068]();
}

uint64_t RESkeletonDefinitionCreate()
{
  return MEMORY[0x270F200F8]();
}

uint64_t RESkeletonDefinitionCreateGeomSkeleton()
{
  return MEMORY[0x270F20100]();
}

uint64_t RESkeletonDefinitionSetInverseBindPoses()
{
  return MEMORY[0x270F20128]();
}

uint64_t RESkeletonDefinitionSetJointNames()
{
  return MEMORY[0x270F20140]();
}

uint64_t RESkeletonDefinitionSetLocalRestPoses()
{
  return MEMORY[0x270F20148]();
}

uint64_t RESkeletonDefinitionSetName()
{
  return MEMORY[0x270F20150]();
}

uint64_t RESpotLightComponentGetComponentType()
{
  return MEMORY[0x270F20228]();
}

uint64_t RESpotLightComponentSetColorGamut3F()
{
  return MEMORY[0x270F20258]();
}

uint64_t RESpotLightComponentSetInnerAngle()
{
  return MEMORY[0x270F20260]();
}

uint64_t RESpotLightComponentSetIntensity()
{
  return MEMORY[0x270F20268]();
}

uint64_t RESpotLightComponentSetOuterAngle()
{
  return MEMORY[0x270F20270]();
}

uint64_t RESpotLightShadowMapComponentGetComponentType()
{
  return MEMORY[0x270F20278]();
}

uint64_t REStatic3DTextComponentGetComponentType()
{
  return MEMORY[0x270F204C8]();
}

uint64_t REStatic3DTextComponentSetExtrusionDepth()
{
  return MEMORY[0x270F20520]();
}

uint64_t REStatic3DTextComponentSetFont()
{
  return MEMORY[0x270F20528]();
}

uint64_t REStatic3DTextComponentSetFontSize()
{
  return MEMORY[0x270F20530]();
}

uint64_t REStatic3DTextComponentSetLineBreakMode()
{
  return MEMORY[0x270F20538]();
}

uint64_t REStatic3DTextComponentSetText()
{
  return MEMORY[0x270F20540]();
}

uint64_t REStatic3DTextComponentSetTextAlignment()
{
  return MEMORY[0x270F20548]();
}

uint64_t REStatic3DTextComponentSetTextFrameSize()
{
  return MEMORY[0x270F20550]();
}

uint64_t REStatic3DTextDefaultOptions()
{
  return MEMORY[0x270F20560]();
}

uint64_t REStringIDGet()
{
  return MEMORY[0x270F20568]();
}

uint64_t REStringIDSet()
{
  return MEMORY[0x270F20570]();
}

uint64_t REStructBuilderAddMemberDataTypeWithTag()
{
  return MEMORY[0x270F20588]();
}

uint64_t REStructBuilderCreate()
{
  return MEMORY[0x270F20598]();
}

uint64_t REStructBuilderDestroy()
{
  return MEMORY[0x270F205A0]();
}

uint64_t REStructBuilderInit()
{
  return MEMORY[0x270F205A8]();
}

uint64_t RETextureAssetMakeMutableAndReplaceWithData()
{
  return MEMORY[0x270F20678]();
}

uint64_t RETextureImportGetCGColorSpaceFromOCIOString()
{
  return MEMORY[0x270F20730]();
}

uint64_t RETextureImportOperationCopyTextureDescriptorTemplate()
{
  return MEMORY[0x270F20748]();
}

uint64_t RETextureImportOperationCreateAssetData()
{
  return MEMORY[0x270F20758]();
}

uint64_t RETextureImportOperationCreateWithData()
{
  return MEMORY[0x270F20778]();
}

uint64_t RETextureImportOperationSetAssetResourceName()
{
  return MEMORY[0x270F207A0]();
}

uint64_t RETextureImportOperationSetColorSpaceName()
{
  return MEMORY[0x270F207A8]();
}

uint64_t RETextureImportOperationSetCompressionType()
{
  return MEMORY[0x270F207B0]();
}

uint64_t RETextureImportOperationSetDimensionsMode()
{
  return MEMORY[0x270F207B8]();
}

uint64_t RETextureImportOperationSetDoneWithSourceCallback()
{
  return MEMORY[0x270F207C0]();
}

uint64_t RETextureImportOperationSetDownsampleFactor()
{
  return MEMORY[0x270F207C8]();
}

uint64_t RETextureImportOperationSetPixelFormatMode()
{
  return MEMORY[0x270F207D8]();
}

uint64_t RETextureImportOperationSetSemantic()
{
  return MEMORY[0x270F207E0]();
}

uint64_t RETextureImportOperationSetTextureDescriptorTemplate()
{
  return MEMORY[0x270F207E8]();
}

uint64_t RETimelineDefinitionAddChildTimeline()
{
  return MEMORY[0x270F20808]();
}

uint64_t RETimelineDefinitionCreateAudioAnimation()
{
  return MEMORY[0x270F20880]();
}

uint64_t RETimelineDefinitionCreateFromTimeline()
{
  return MEMORY[0x270F208A8]();
}

uint64_t RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation()
{
  return MEMORY[0x270F20900]();
}

uint64_t RETimelineDefinitionCreateSampledFloatAnimation()
{
  return MEMORY[0x270F20908]();
}

uint64_t RETimelineDefinitionCreateSampledSRTAnimation()
{
  return MEMORY[0x270F20910]();
}

uint64_t RETimelineDefinitionCreateSampledSkeletalPoseAnimation()
{
  return MEMORY[0x270F20918]();
}

uint64_t RETimelineDefinitionCreateTimelineAsset()
{
  return MEMORY[0x270F20920]();
}

uint64_t RETimelineDefinitionCreateTimelineClip()
{
  return MEMORY[0x270F20928]();
}

uint64_t RETimelineDefinitionCreateTimelineGroup()
{
  return MEMORY[0x270F20930]();
}

uint64_t RETimelineDefinitionGetEndTime()
{
  return MEMORY[0x270F20A88]();
}

uint64_t RETimelineDefinitionGetStartTime()
{
  return MEMORY[0x270F20BF0]();
}

uint64_t RETimelineDefinitionGetTimelineType()
{
  return MEMORY[0x270F20C08]();
}

uint64_t RETimelineDefinitionSetAdditive()
{
  return MEMORY[0x270F20C20]();
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsData()
{
  return MEMORY[0x270F20C48]();
}

uint64_t RETimelineDefinitionSetClipDelay()
{
  return MEMORY[0x270F20C90]();
}

uint64_t RETimelineDefinitionSetClipDuration()
{
  return MEMORY[0x270F20C98]();
}

uint64_t RETimelineDefinitionSetClipEnd()
{
  return MEMORY[0x270F20CA0]();
}

uint64_t RETimelineDefinitionSetClipLoopBehavior()
{
  return MEMORY[0x270F20CA8]();
}

uint64_t RETimelineDefinitionSetClipStart()
{
  return MEMORY[0x270F20CC0]();
}

uint64_t RETimelineDefinitionSetEndTime()
{
  return MEMORY[0x270F20CF0]();
}

uint64_t RETimelineDefinitionSetFillMode()
{
  return MEMORY[0x270F20CF8]();
}

uint64_t RETimelineDefinitionSetFloatValues()
{
  return MEMORY[0x270F20D60]();
}

uint64_t RETimelineDefinitionSetFrameInterval()
{
  return MEMORY[0x270F20D68]();
}

uint64_t RETimelineDefinitionSetInterpolationEnabled()
{
  return MEMORY[0x270F20D70]();
}

uint64_t RETimelineDefinitionSetSRTValues()
{
  return MEMORY[0x270F20DC0]();
}

uint64_t RETimelineDefinitionSetSkeletalPoses()
{
  return MEMORY[0x270F20E30]();
}

uint64_t RETimelineDefinitionSetSkeleton()
{
  return MEMORY[0x270F20E38]();
}

uint64_t RETimelineDefinitionSetStartTime()
{
  return MEMORY[0x270F20E48]();
}

uint64_t RETimelineDefinitionSetTargetPath()
{
  return MEMORY[0x270F20E58]();
}

uint64_t RETransformComponentGetComponentType()
{
  return MEMORY[0x270F20F50]();
}

uint64_t RETransformComponentSetLocalOrientation()
{
  return MEMORY[0x270F20FB8]();
}

uint64_t RETransformComponentSetLocalSRT()
{
  return MEMORY[0x270F20FC0]();
}

uint64_t RETypeInfoCreateInstance()
{
  return MEMORY[0x270F20FF8]();
}

uint64_t RETypeInfoDereferencePointer()
{
  return MEMORY[0x270F21000]();
}

uint64_t RETypeInfoDestroyInstance()
{
  return MEMORY[0x270F21008]();
}

uint64_t RETypeInfoGetArrayElementType()
{
  return MEMORY[0x270F21010]();
}

uint64_t RETypeInfoGetCategory()
{
  return MEMORY[0x270F21018]();
}

uint64_t RETypeInfoGetDictionaryKeyType()
{
  return MEMORY[0x270F21020]();
}

uint64_t RETypeInfoGetDictionaryValueType()
{
  return MEMORY[0x270F21028]();
}

uint64_t RETypeInfoGetEnumConstantCount()
{
  return MEMORY[0x270F21030]();
}

uint64_t RETypeInfoGetEnumConstantName()
{
  return MEMORY[0x270F21038]();
}

uint64_t RETypeInfoGetEnumConstantValue()
{
  return MEMORY[0x270F21040]();
}

uint64_t RETypeInfoGetListElementType()
{
  return MEMORY[0x270F21050]();
}

uint64_t RETypeInfoGetName()
{
  return MEMORY[0x270F21058]();
}

uint64_t RETypeInfoGetObjectMemberByIndex()
{
  return MEMORY[0x270F21060]();
}

uint64_t RETypeInfoGetObjectMemberCount()
{
  return MEMORY[0x270F21068]();
}

uint64_t RETypeInfoGetOptionalValueType()
{
  return MEMORY[0x270F21070]();
}

uint64_t RETypeInfoGetReferencedType()
{
  return MEMORY[0x270F21078]();
}

uint64_t RETypeInfoGetSize()
{
  return MEMORY[0x270F21080]();
}

uint64_t RETypeInfoGetSubClass()
{
  return MEMORY[0x270F21088]();
}

uint64_t RETypeInfoGetSubClassCount()
{
  return MEMORY[0x270F21090]();
}

uint64_t RETypeInfoIsArray()
{
  return MEMORY[0x270F21098]();
}

uint64_t RETypeInfoIsDictionary()
{
  return MEMORY[0x270F210A0]();
}

uint64_t RETypeInfoIsFixedSizeArray()
{
  return MEMORY[0x270F210A8]();
}

uint64_t RETypeInfoIsList()
{
  return MEMORY[0x270F210B0]();
}

uint64_t RETypeInfoIsObject()
{
  return MEMORY[0x270F210B8]();
}

uint64_t RETypeInfoIsOptional()
{
  return MEMORY[0x270F210C0]();
}

uint64_t RETypeInfoIsPointer()
{
  return MEMORY[0x270F210C8]();
}

uint64_t RETypeMemberInfoGetMemberType()
{
  return MEMORY[0x270F210D0]();
}

uint64_t RETypeMemberInfoGetName()
{
  return MEMORY[0x270F210D8]();
}

uint64_t RETypeMemberInfoGetOffset()
{
  return MEMORY[0x270F210E0]();
}

uint64_t RETypeRegistryGetTypeInfoByTypeName()
{
  return MEMORY[0x270F210E8]();
}

uint64_t REVirtualEnvironmentProbeComponentGetComponentType()
{
  return MEMORY[0x270F21A30]();
}

uint64_t REZipArchiveGetDefaultLayerMTime()
{
  return MEMORY[0x270F21A90]();
}

CFArrayRef UTTypeCreateAllIdentifiersForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  return (CFArrayRef)MEMORY[0x270EE8578](inTagClass, inTag, inConformingToUTI);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x270EE56F0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x270EE5700]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=()
{
  return MEMORY[0x270FA2FE0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=()
{
  return MEMORY[0x270FA2FE8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::GfMatrix2f()
{
  return MEMORY[0x270FA2FF0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator*=()
{
  return MEMORY[0x270FA2FF8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator+=()
{
  return MEMORY[0x270FA3000]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, double a2)
{
  return MEMORY[0x270FA3008](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, const pxrInternal__aapl__pxrReserved__::GfRotation *a2)
{
  return MEMORY[0x270FA3010](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=()
{
  return MEMORY[0x270FA3018]();
}

{
  return MEMORY[0x270FA3020]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=()
{
  return MEMORY[0x270FA3028]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, float a2)
{
  return MEMORY[0x270FA3030](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetScale()
{
  return MEMORY[0x270FA3038]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3d *a2)
{
  return MEMORY[0x270FA3040](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=()
{
  return MEMORY[0x270FA3048]();
}

{
  return MEMORY[0x270FA3050]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator+=()
{
  return MEMORY[0x270FA3058]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, double a2)
{
  return MEMORY[0x270FA3060](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate()
{
  return MEMORY[0x270FA3068]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale()
{
  return MEMORY[0x270FA3070]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3d *a2)
{
  return MEMORY[0x270FA3078](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, const pxrInternal__aapl__pxrReserved__::GfRotation *a2)
{
  return MEMORY[0x270FA3080](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d()
{
  return MEMORY[0x270FA3088]();
}

{
  return MEMORY[0x270FA3090]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=()
{
  return MEMORY[0x270FA3098]();
}

{
  return MEMORY[0x270FA30A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=()
{
  return MEMORY[0x270FA30A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, float a2)
{
  return MEMORY[0x270FA30B0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, const pxrInternal__aapl__pxrReserved__::GfRotation *a2)
{
  return MEMORY[0x270FA30C0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly()
{
  return MEMORY[0x270FA30C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslateOnly()
{
  return MEMORY[0x270FA30D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale()
{
  return MEMORY[0x270FA30D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, const pxrInternal__aapl__pxrReserved__::GfRotation *a2)
{
  return MEMORY[0x270FA30E0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  return MEMORY[0x270FA30E8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=()
{
  return MEMORY[0x270FA30F0]();
}

{
  return MEMORY[0x270FA30F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator+=()
{
  return MEMORY[0x270FA3100]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat()
{
  return MEMORY[0x270FA3108]();
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion()
{
  return MEMORY[0x270FA3110]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload()
{
  return MEMORY[0x270FA3118]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMakeDirs()
{
  return MEMORY[0x270FA3120]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNormPath()
{
  return MEMORY[0x270FA3128]();
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByFamily()
{
  return MEMORY[0x270FA3130]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfCopySpec()
{
  return MEMORY[0x270FA3138]();
}

{
  return MEMORY[0x270FA3140]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrRegistry::GetInstance(pxrInternal__aapl__pxrReserved__::SdrRegistry *this)
{
  return MEMORY[0x270FA3148](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByName()
{
  return MEMORY[0x270FA3150]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark(pxrInternal__aapl__pxrReserved__::TfErrorMark *this)
{
  return MEMORY[0x270FA3158](this);
}

void pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark(pxrInternal__aapl__pxrReserved__::TfErrorMark *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_End()
{
  return MEMORY[0x270FA3168]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin()
{
  return MEMORY[0x270FA3170]();
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  return MEMORY[0x270FA3180](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCone::~UsdGeomCone(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCube *this)
{
  return MEMORY[0x270FA3190](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCube::~UsdGeomCube(pxrInternal__aapl__pxrReserved__::UsdGeomCube *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::ValidateTopology()
{
  return MEMORY[0x270FA31A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA31A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define()
{
  return MEMORY[0x270FA31B0]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  return MEMORY[0x270FA31C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Find()
{
  return MEMORY[0x270FA31D0]();
}

void pxrInternal__aapl__pxrReserved__::UsdSkelRoot::~UsdSkelRoot(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchNormPath()
{
  return MEMORY[0x270FA3200]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath()
{
  return MEMORY[0x270FA3208]();
}

{
  return MEMORY[0x270FA3210]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(pxrInternal__aapl__pxrReserved__::SdfAssetPath *this)
{
  return MEMORY[0x270FA3218](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference()
{
  return MEMORY[0x270FA3220]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetenvBool()
{
  return MEMORY[0x270FA3230]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfPathExists()
{
  return MEMORY[0x270FA3238]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringJoin()
{
  return MEMORY[0x270FA3240]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringTrim()
{
  return MEMORY[0x270FA3248]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, const char *a2)
{
  return MEMORY[0x270FA3250](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x270FA3258](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *this)
{
  return MEMORY[0x270FA3298](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *this)
{
  return MEMORY[0x270FA32A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::UsdSkelCache(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this)
{
  return MEMORY[0x270FA32A8](this);
}

void pxrInternal__aapl__pxrReserved__::Usd_PrimData::~Usd_PrimData(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath()
{
  return MEMORY[0x270FA32B8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath()
{
  return MEMORY[0x270FA32C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::end(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  return MEMORY[0x270FA32C8](this);
}

{
  return MEMORY[0x270FA43A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::begin(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  return MEMORY[0x270FA32D0](this);
}

{
  return MEMORY[0x270FA43B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::erase()
{
  return MEMORY[0x270FA32D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(pxrInternal__aapl__pxrReserved__::VtDictionary *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  return MEMORY[0x270FA32E0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::operator=()
{
  return MEMORY[0x270FA32E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]()
{
  return MEMORY[0x270FA32F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArGetResolver(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x270FA32F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetTmpDir(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x270FA3300](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindAllFileFormatExtensions(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return MEMORY[0x270FA3308](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetBaseName()
{
  return MEMORY[0x270FA3310]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetPathName()
{
  return MEMORY[0x270FA3318]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringSplit()
{
  return MEMORY[0x270FA3320]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::UpdateTraceTrees(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return MEMORY[0x270FA3328](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return MEMORY[0x270FA3330](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget()
{
  return MEMORY[0x270FA3338]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this)
{
  return MEMORY[0x270FA3340](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  return MEMORY[0x270FA3348](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCamera::~UsdGeomCamera(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  return MEMORY[0x270FA3388](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::~UsdGeomSphere(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets()
{
  return MEMORY[0x270FA3398]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return MEMORY[0x270FA33A0](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference()
{
  return MEMORY[0x270FA33C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::SetReferences()
{
  return MEMORY[0x270FA33D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::RemoveReference()
{
  return MEMORY[0x270FA33E0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference()
{
  return MEMORY[0x270FA33E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase()
{
  return MEMORY[0x270FA33F0]();
}

{
  return MEMORY[0x270FA33F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
{
  return MEMORY[0x270FA3400]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput()
{
  return MEMORY[0x270FA3408]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes()
{
  return MEMORY[0x270FA3410]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant()
{
  return MEMORY[0x270FA3420]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection()
{
  return MEMORY[0x270FA3428]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection(pxrInternal__aapl__pxrReserved__::UsdVariantSet *this)
{
  return MEMORY[0x270FA3430](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_HashDetail::_IssueUnimplementedHashError(pxrInternal__aapl__pxrReserved__::Vt_HashDetail *this, const std::type_info *a2)
{
  return MEMORY[0x270FA3438](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this, double a2, double a3)
{
  return MEMORY[0x270FA3440](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetExtension()
{
  return MEMORY[0x270FA3448]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringPrintf(pxrInternal__aapl__pxrReserved__ *this, const char *a2, ...)
{
  return MEMORY[0x270FA3450](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::SetEnabled(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  return MEMORY[0x270FA3458](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::Clear(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  return MEMORY[0x270FA3460](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext()
{
  return MEMORY[0x270FA3468]();
}

void pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext(pxrInternal__aapl__pxrReserved__::UsdEditContext *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  return MEMORY[0x270FA3478](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::~UsdGeomCapsule(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
{
  return MEMORY[0x270FA3490]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar()
{
  return MEMORY[0x270FA3498]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=()
{
  return MEMORY[0x270FA34A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput()
{
  return MEMORY[0x270FA34A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput()
{
  return MEMORY[0x270FA34B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput()
{
  return MEMORY[0x270FA34B8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x270FA34C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get()
{
  return MEMORY[0x270FA34D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define()
{
  return MEMORY[0x270FA34D8]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSpecializes::AddSpecialize()
{
  return MEMORY[0x270FA34F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSpecializes::SetSpecializes()
{
  return MEMORY[0x270FA34F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSpecializes::ClearSpecializes(pxrInternal__aapl__pxrReserved__::UsdSpecializes *this)
{
  return MEMORY[0x270FA3500](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::SetSelection()
{
  return MEMORY[0x270FA3508]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::AddVariantSet()
{
  return MEMORY[0x270FA3510]();
}

uint64_t pxrInternal__aapl__pxrReserved__::usd_initialize()
{
  return MEMORY[0x270FA3518]();
}

void pxrInternal__aapl__pxrReserved__::TfBaseException::~TfBaseException(pxrInternal__aapl__pxrReserved__::TfBaseException *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange()
{
  return MEMORY[0x270FA3528]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::RemoveDelegate()
{
  return MEMORY[0x270FA3538]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringReplace()
{
  return MEMORY[0x270FA3548]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringToLower()
{
  return MEMORY[0x270FA3550]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringToUpper()
{
  return MEMORY[0x270FA3558]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  return MEMORY[0x270FA3560](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::~UsdGeomCylinder(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return MEMORY[0x270FA3570](this);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetDemangled(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  return MEMORY[0x270FA3580](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::SetAllowedTokens()
{
  return MEMORY[0x270FA3588]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA3590](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode::~Sdf_PrimPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsRelativePath()
{
  return MEMORY[0x270FA35A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Replace()
{
  return MEMORY[0x270FA35A8]();
}

void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile(pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringCatPaths()
{
  return MEMORY[0x270FA35B8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringContains()
{
  return MEMORY[0x270FA35C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringTokenize()
{
  return MEMORY[0x270FA35C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection()
{
  return MEMORY[0x270FA35D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply()
{
  return MEMORY[0x270FA35D8]();
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *this)
{
  return MEMORY[0x270FA3608](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::XformQuery()
{
  return MEMORY[0x270FA3618]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  return MEMORY[0x270FA3620](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::~UsdLuxShapingAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  return MEMORY[0x270FA3638](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define()
{
  return MEMORY[0x270FA3640]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  return MEMORY[0x270FA3650](this);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtStreamOutArray()
{
  return MEMORY[0x270FA3660]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchMakeTmpSubdir()
{
  return MEMORY[0x270FA3668]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringGetSuffix()
{
  return MEMORY[0x270FA3670]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::Invoke2(pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier *this, const void *a2)
{
  return MEMORY[0x270FA3678](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomTokensType::UsdGeomTokensType(pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *this)
{
  return MEMORY[0x270FA36B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform()
{
  return MEMORY[0x270FA36B8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::Clear(pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *this)
{
  return MEMORY[0x270FA36C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::SetTime()
{
  return MEMORY[0x270FA36C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache(pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *this)
{
  return MEMORY[0x270FA36D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo()
{
  return MEMORY[0x270FA36D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return MEMORY[0x270FA36E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get()
{
  return MEMORY[0x270FA36F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Define()
{
  return MEMORY[0x270FA36F8]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelTokensType::UsdSkelTokensType(pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *this)
{
  return MEMORY[0x270FA3728](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin(pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin *this)
{
  return MEMORY[0x270FA3730](this);
}

void pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin *this)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode::~Sdf_MapperPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode *this)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode::~Sdf_TargetPathNode(pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper()
{
  return MEMORY[0x270FA3750]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMediaTokensType::UsdMediaTokensType(pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *this)
{
  return MEMORY[0x270FA3760](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeTokensType::UsdShadeTokensType(pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *this)
{
  return MEMORY[0x270FA3768](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchMakeTmpFileName()
{
  return MEMORY[0x270FA3770]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames()
{
  return MEMORY[0x270FA3780]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  return MEMORY[0x270FA3790](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue()
{
  return MEMORY[0x270FA3798]();
}

{
  return MEMORY[0x270FA37A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *this)
{
  return MEMORY[0x270FA37A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper()
{
  return MEMORY[0x270FA37C0]();
}

{
  return MEMORY[0x270FA37C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery()
{
  return MEMORY[0x270FA37D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  return MEMORY[0x270FA37D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit()
{
  return MEMORY[0x270FA37E0]();
}

void pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit(pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *this)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode::~Sdf_MapperArgPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier()
{
  return MEMORY[0x270FA37F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper()
{
  return MEMORY[0x270FA3800]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat(pxrInternal__aapl__pxrReserved__ *this, const char *a2, ...)
{
  return MEMORY[0x270FA3808](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis()
{
  return MEMORY[0x270FA3810]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSetStageUpAxis()
{
  return MEMORY[0x270FA3818]();
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::~UsdUINodeGraphNodeAPI(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver()
{
  return MEMORY[0x270FA3828]();
}

void pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode::~Sdf_ExpressionPathNode(pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init::New(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *this)
{
  return MEMORY[0x270FA3838](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource()
{
  return MEMORY[0x270FA3858]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource()
{
  return MEMORY[0x270FA3860]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::UsdSkelBlendShapeQuery(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this, const pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a2)
{
  return MEMORY[0x270FA3878](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::UsdStagePopulationMask()
{
  return MEMORY[0x270FA3880]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath()
{
  return MEMORY[0x270FA3888]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix()
{
  return MEMORY[0x270FA3890]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringGetCommonPrefix()
{
  return MEMORY[0x270FA3898]();
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType::AaplUsdPhysicsTokensType(pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *this)
{
  return MEMORY[0x270FA38A0](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode::~Sdf_PrimPropertyPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGetFallbackUpAxis(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x270FA38B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsModifyAssetPaths()
{
  return MEMORY[0x270FA38B8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath()
{
  return MEMORY[0x270FA38C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverFiles()
{
  return MEMORY[0x270FA38C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::CreateSpec()
{
  return MEMORY[0x270FA38D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::DeleteSpec()
{
  return MEMORY[0x270FA38D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetTimeSample()
{
  return MEMORY[0x270FA38E0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetFieldDictValueByKey()
{
  return MEMORY[0x270FA38E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::MoveSpec()
{
  return MEMORY[0x270FA38F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PopChild()
{
  return MEMORY[0x270FA38F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetField()
{
  return MEMORY[0x270FA3900]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PushChild()
{
  return MEMORY[0x270FA3908]();
}

{
  return MEMORY[0x270FA3910]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SdfLayerStateDelegateBase(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this)
{
  return MEMORY[0x270FA3918](this);
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::~SdfLayerStateDelegateBase(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x270FA3928](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::IsCollectionBindingRel()
{
  return MEMORY[0x270FA3950]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding()
{
  return MEMORY[0x270FA3958]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterials()
{
  return MEMORY[0x270FA3960]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  return MEMORY[0x270FA3968](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength()
{
  return MEMORY[0x270FA3978]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength()
{
  return MEMORY[0x270FA3980]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Apply()
{
  return MEMORY[0x270FA3988]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x270FA3998](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
  return MEMORY[0x270FA39B0](this);
}

void pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::~SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::~Sdf_PrimVariantSelectionNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit()
{
  return MEMORY[0x270FA39C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSetStageMetersPerUnit()
{
  return MEMORY[0x270FA39D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewUsdzPackage()
{
  return MEMORY[0x270FA39D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType::SdfPathTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *this)
{
  return MEMORY[0x270FA39E0](this);
}

void pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType::~SdfPathTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::AddRefIfNonzero()
{
  return MEMORY[0x270FA39F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked()
{
  return MEMORY[0x270FA39F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked()
{
  return MEMORY[0x270FA3A00]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsComputeAllDependencies()
{
  return MEMORY[0x270FA3A08]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner()
{
  return MEMORY[0x270FA3A10]();
}

void pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode::~Sdf_RelationalAttributePathNode(pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  return MEMORY[0x270FA3A28](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType::SdrPropertyTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *this)
{
  return MEMORY[0x270FA3A30](this);
}

void pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType::~SdrPropertyTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage()
{
  return MEMORY[0x270FA3A40]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType::UsdGeomXformOpTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *this)
{
  return MEMORY[0x270FA3A50](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType::~UsdGeomXformOpTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError()
{
  return MEMORY[0x270FA3A70]();
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::~UsdPhysicsPreliminary_PhysicsColliderAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfEnum::GetName()
{
  return MEMORY[0x270FA3AA8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfEnum::_AddName()
{
  return MEMORY[0x270FA3AB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::FindByName()
{
  return MEMORY[0x270FA3AB8]();
}

void pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2)
{
  return MEMORY[0x270FA3AC8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2)
{
  return MEMORY[0x270FA3AD8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::Declare()
{
  return MEMORY[0x270FA3AE0]();
}

{
  return MEMORY[0x270FA3AE8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::TfType(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return MEMORY[0x270FA3AF0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace()
{
  return MEMORY[0x270FA3AF8]();
}

{
  return MEMORY[0x270FA3B00]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA3B08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier()
{
  return MEMORY[0x270FA3B10]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString()
{
  return MEMORY[0x270FA3B18]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA3B30](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetConciseRelativePaths()
{
  return MEMORY[0x270FA3B40]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens()
{
  return MEMORY[0x270FA3B48]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier()
{
  return MEMORY[0x270FA3B50]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA3B58](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath()
{
  return MEMORY[0x270FA3B60]();
}

void pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode()
{
  return MEMORY[0x270FA3B78]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl()
{
  return MEMORY[0x270FA3B80]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg(pxrInternal__aapl__pxrReserved__::TfDebug::Helper *this, const char *a2, ...)
{
  return MEMORY[0x270FA3B88](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsDir()
{
  return MEMORY[0x270FA3B90]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(pxrInternal__aapl__pxrReserved__::TfToken *this)
{
  return MEMORY[0x270FA3B98](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::TfToken(pxrInternal__aapl__pxrReserved__::TfToken *this, const char *a2)
{
  return MEMORY[0x270FA3BA0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::TfToken()
{
  return MEMORY[0x270FA3BA8]();
}

{
  return MEMORY[0x270FA3BB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA3BB8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsPathInPrototype(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA3BC0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x270FA3BD8](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, const std::type_info *a3)
{
  return MEMORY[0x270FA3BE0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3BE8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen()
{
  return MEMORY[0x270FA3BF0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetComment()
{
  return MEMORY[0x270FA3BF8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA3C00](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier()
{
  return MEMORY[0x270FA3C08]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetDefaultPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA3C10](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  return MEMORY[0x270FA3C18](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous()
{
  return MEMORY[0x270FA3C20]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetLoadedLayers(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3C28](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetSessionOwner()
{
  return MEMORY[0x270FA3C38]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent()
{
  return MEMORY[0x270FA3C40]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearDefaultPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3C48](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3C50](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateIdentifier()
{
  return MEMORY[0x270FA3C58]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ImportFromString()
{
  return MEMORY[0x270FA3C60]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetDocumentation()
{
  return MEMORY[0x270FA3C68]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  return MEMORY[0x270FA3C70](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetStateDelegate()
{
  return MEMORY[0x270FA3C78]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerPaths()
{
  return MEMORY[0x270FA3C80]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearSessionOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3C88](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA3C90](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetFramePrecision(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3C98](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3CA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::InsertSubLayerPath()
{
  return MEMORY[0x270FA3CB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  return MEMORY[0x270FA3CB8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  return MEMORY[0x270FA3CC0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearFramePrecision(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3CC8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::FindRelativeToLayer()
{
  return MEMORY[0x270FA3CD0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3CD8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3CE0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetHasOwnedSubLayers(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3CE8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  return MEMORY[0x270FA3CF0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  return MEMORY[0x270FA3CF8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3D00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3D08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA3D10](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3D18](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::RemovePropertyIfHasOnlyRequiredFields()
{
  return MEMORY[0x270FA3D20]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Apply(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *a2)
{
  return MEMORY[0x270FA3D28](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3D30](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Reload(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA3D38](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x270FA3D40](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetOwner()
{
  return MEMORY[0x270FA3D48]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew()
{
  return MEMORY[0x270FA3D50]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap()
{
  return MEMORY[0x270FA3D58]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle()
{
  return MEMORY[0x270FA3D60]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=()
{
  return MEMORY[0x270FA3D68]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap()
{
  return MEMORY[0x270FA3D70]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle()
{
  return MEMORY[0x270FA3D78]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=()
{
  return MEMORY[0x270FA3D80]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetenv()
{
  return MEMORY[0x270FA3D88]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsFile()
{
  return MEMORY[0x270FA3D90]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery()
{
  return MEMORY[0x270FA3D98]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_BeginDelivery()
{
  return MEMORY[0x270FA3DA0]();
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::Revoke()
{
  return MEMORY[0x270FA3DB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_Register(pxrInternal__aapl__pxrReserved__::TfNotice *this, pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *a2)
{
  return MEMORY[0x270FA3DB8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x270FA3DC0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked()
{
  return MEMORY[0x270FA3DC8]();
}

{
  return MEMORY[0x270FA3DD0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::RemovePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA3DD8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::TraverseAll(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA3DE0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA3DE8](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::LoadAndUnload()
{
  return MEMORY[0x270FA3DF0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2)
{
  return MEMORY[0x270FA3DF8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory()
{
  return MEMORY[0x270FA3E00]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  return MEMORY[0x270FA3E08](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetEndTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  return MEMORY[0x270FA3E10](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateClassPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA3E18](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile()
{
  return MEMORY[0x270FA3E20]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetStartTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  return MEMORY[0x270FA3E30](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Open()
{
  return MEMORY[0x270FA3E38]();
}

{
  return MEMORY[0x270FA3E40]();
}

{
  return MEMORY[0x270FA3E48]();
}

{
  return MEMORY[0x270FA3E50]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Reload(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA3E60](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Traverse(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA3E70](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(pxrInternal__aapl__pxrReserved__::pxr_half::half *this)
{
  return MEMORY[0x270FA3E80](this);
}

void pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex(pxrInternal__aapl__pxrReserved__::ArchRegex *this)
{
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAddedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetOrderedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ClearAndMakeExplicit()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAddedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetOrderedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ClearAndMakeExplicit()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAddedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetOrderedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ClearAndMakeExplicit()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAddedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::CreateExplicit()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetOrderedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ClearAndMakeExplicit()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAddedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ClearAndMakeExplicit()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ClearAndMakeExplicit()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAddedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetOrderedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ClearAndMakeExplicit()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAddedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetOrderedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ClearAndMakeExplicit()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAddedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetOrderedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ClearAndMakeExplicit()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAddedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetOrderedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ClearAndMakeExplicit()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<()
{
  return MEMORY[0x270FA3F00]();
}

{
  return MEMORY[0x270FA3F80]();
}

{
  return MEMORY[0x270FA3F90]();
}

void pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPayload>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfReference>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPath>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::TfToken>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::operator<<<std::string>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::operator<<<int>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::operator<<<unsigned int>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::operator<<<long long>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::operator<<<unsigned long long>()
{
  while (1)
    ;
}

uint64_t tbb::internal::thread_get_id_v3(tbb::internal *this)
{
  return MEMORY[0x270FA3F98](this);
}

uint64_t tbb::internal::allocate_via_handler_v3(tbb::internal *this)
{
  return MEMORY[0x270FA3FA0](this);
}

uint64_t tbb::internal::deallocate_via_handler_v3(tbb::internal *this, void *a2)
{
  return MEMORY[0x270FA3FA8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension()
{
  return MEMORY[0x270FA4090]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier()
{
  return MEMORY[0x270FA4098]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset()
{
  return MEMORY[0x270FA40A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset()
{
  return MEMORY[0x270FA40A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==()
{
  return MEMORY[0x270FA40B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==()
{
  return MEMORY[0x270FA40C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, double *a2, double a3)
{
  return MEMORY[0x270FA40D0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this)
{
  return MEMORY[0x270FA40D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==()
{
  return MEMORY[0x270FA40E0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakBase::GetUniqueIdentifier(pxrInternal__aapl__pxrReserved__::TfWeakBase *this)
{
  return MEMORY[0x270FA40F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetTypeName(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this)
{
  return MEMORY[0x270FA4100](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this)
{
  return MEMORY[0x270FA4108](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this)
{
  return MEMORY[0x270FA4110](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributeAtPath(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4118](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this)
{
  return MEMORY[0x270FA4120](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl()
{
  return MEMORY[0x270FA4128]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  return MEMORY[0x270FA4130](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  return MEMORY[0x270FA4138](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  return MEMORY[0x270FA4140](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCube::GetSizeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCube *this)
{
  return MEMORY[0x270FA4148](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceCount()
{
  return MEMORY[0x270FA4150]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA4158](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA4160](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseLengthsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA4168](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA4188](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerSharpnessesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA4190](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseSharpnessesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA4198](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA41A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSubdivisionSchemeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA41A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexCountsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA41B0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA41C8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  return MEMORY[0x270FA41E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  return MEMORY[0x270FA41F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::SetDisplayGroup()
{
  return MEMORY[0x270FA4200]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack()
{
  return MEMORY[0x270FA4208]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  return MEMORY[0x270FA4210](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdTimeCode::_IssueGetValueOnDefaultError(pxrInternal__aapl__pxrReserved__::UsdTimeCode *this)
{
  return MEMORY[0x270FA4218](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<()
{
  return MEMORY[0x270FA4220]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  return MEMORY[0x270FA4238](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return MEMORY[0x270FA4240](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetUniqueIdentifier(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return MEMORY[0x270FA4248](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return MEMORY[0x270FA4250](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator BOOL()
{
  return MEMORY[0x270FA4258]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator==()
{
  return MEMORY[0x270FA4260]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetRoleName(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA4268](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA4270](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection()
{
  return MEMORY[0x270FA4278]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA4280](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA4288](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::SetColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4290](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections()
{
  return MEMORY[0x270FA4298]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples()
{
  return MEMORY[0x270FA42A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetVariability(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA42A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections()
{
  return MEMORY[0x270FA42B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA42B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA42C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA42C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::RemoveConnection(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA42D0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetNumTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA42D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA42E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
{
  return MEMORY[0x270FA42F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Set()
{
  return MEMORY[0x270FA4300]();
}

{
  return MEMORY[0x270FA4308]();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfQuatf>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3d>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3h>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3d>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<double>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Block(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA4310](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA4318](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA4320](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetOrientationAttr(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x270FA4330](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorAttr(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x270FA4338](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x270FA4340](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayOpacityPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x270FA4348](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetAnimQuery(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  return MEMORY[0x270FA4350](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2)
{
  return MEMORY[0x270FA4358](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkinningQuery(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  return MEMORY[0x270FA4360](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings()
{
  return MEMORY[0x270FA4368]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate()
{
  return MEMORY[0x270FA4370]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrototype(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x270FA4378](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSpecifier(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x270FA4380](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4388](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x270FA4390](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath()
{
  return MEMORY[0x270FA4398]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::find()
{
  return MEMORY[0x270FA43A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::size(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  return MEMORY[0x270FA43B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::empty(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  return MEMORY[0x270FA43C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, const char *a2)
{
  return MEMORY[0x270FA43C8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetMetadataFields()
{
  return MEMORY[0x270FA43D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA43F8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderOutput(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4400](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetCounters(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return MEMORY[0x270FA4408](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPrimSpecForScenePath(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4418](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPropertySpecForScenePath(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4420](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::operator==()
{
  return MEMORY[0x270FA4428]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetCamera(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this, const pxrInternal__aapl__pxrReserved__::UsdTimeCode *a2)
{
  return MEMORY[0x270FA44C0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  return MEMORY[0x270FA44E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return MEMORY[0x270FA44E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  return MEMORY[0x270FA4500](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  return MEMORY[0x270FA4508](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4510](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4528](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  return MEMORY[0x270FA4530](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetDocumentation()
{
  return MEMORY[0x270FA4538]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetConnectedSource()
{
  return MEMORY[0x270FA4540]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::HasConnectedSource(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  return MEMORY[0x270FA4548](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetConnectedSources()
{
  return MEMORY[0x270FA4550]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetRawConnectedSourcePaths()
{
  return MEMORY[0x270FA4558]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetValueProducingAttributes(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  return MEMORY[0x270FA4560](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get()
{
  return MEMORY[0x270FA4568]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::Set()
{
  return MEMORY[0x270FA4570]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantNames(pxrInternal__aapl__pxrReserved__::UsdVariantSet *this)
{
  return MEMORY[0x270FA4578](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::HasAuthoredVariant()
{
  return MEMORY[0x270FA4580]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantSelection(pxrInternal__aapl__pxrReserved__::UsdVariantSet *this)
{
  return MEMORY[0x270FA4588](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditTarget()
{
  return MEMORY[0x270FA4590]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext()
{
  return MEMORY[0x270FA4598]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::HasAuthoredVariantSelection()
{
  return MEMORY[0x270FA45A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this)
{
  return MEMORY[0x270FA45A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==()
{
  return MEMORY[0x270FA45B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  return MEMORY[0x270FA45B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  return MEMORY[0x270FA45C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  return MEMORY[0x270FA45C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices()
{
  return MEMORY[0x270FA45D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  return MEMORY[0x270FA45E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  return MEMORY[0x270FA45E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this)
{
  return MEMORY[0x270FA4608](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  return MEMORY[0x270FA4610](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  return MEMORY[0x270FA4618](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetRenderType(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4620](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4630](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetConnectedSource()
{
  return MEMORY[0x270FA4640]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::HasConnectedSource(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  return MEMORY[0x270FA4648](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetRawConnectedSourcePaths()
{
  return MEMORY[0x270FA4650]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetValueProducingAttributes(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  return MEMORY[0x270FA4658](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x270FA4660](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4668](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4670](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x270FA4678](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4680](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x270FA4688](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x270FA4690](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4698](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSet()
{
  return MEMORY[0x270FA46A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::HasVariantSet()
{
  return MEMORY[0x270FA46A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSelection()
{
  return MEMORY[0x270FA46B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetAllVariantSelections(pxrInternal__aapl__pxrReserved__::UsdVariantSets *this)
{
  return MEMORY[0x270FA46B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetNames(pxrInternal__aapl__pxrReserved__::UsdVariantSets *this)
{
  return MEMORY[0x270FA46C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDefaultValue(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this)
{
  return MEMORY[0x270FA46E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  return MEMORY[0x270FA46E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  return MEMORY[0x270FA46F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  return MEMORY[0x270FA46F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets()
{
  return MEMORY[0x270FA4708]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets()
{
  return MEMORY[0x270FA4710]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets(pxrInternal__aapl__pxrReserved__::UsdRelationship *this)
{
  return MEMORY[0x270FA4718](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets(pxrInternal__aapl__pxrReserved__::UsdRelationship *this)
{
  return MEMORY[0x270FA4720](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget()
{
  return MEMORY[0x270FA4730]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return MEMORY[0x270FA4738](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return MEMORY[0x270FA4740](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return MEMORY[0x270FA4748](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA4758](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA4760](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA4768](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetCPPTypeName(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA4770](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetHash(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA4778](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA4780](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA4788](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA4790](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA4798](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()
{
  return MEMORY[0x270FA47A0]();
}

{
  return MEMORY[0x270FA47A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IncludePath(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA47B0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExcludesRel(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  return MEMORY[0x270FA47B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  return MEMORY[0x270FA47C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  return MEMORY[0x270FA47C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::CreateExtentAttr(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA47D8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetPurposeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *this)
{
  return MEMORY[0x270FA47E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomImageable::ComputeVisibility(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *this, const pxrInternal__aapl__pxrReserved__::UsdTimeCode *a2)
{
  return MEMORY[0x270FA47E8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetTimeSamples()
{
  return MEMORY[0x270FA47F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation()
{
  return MEMORY[0x270FA4800]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTranslateOp()
{
  return MEMORY[0x270FA4810]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples()
{
  return MEMORY[0x270FA4818]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this, BOOL *a2)
{
  return MEMORY[0x270FA4820](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation()
{
  return MEMORY[0x270FA4828]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  return MEMORY[0x270FA4830](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingIesFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  return MEMORY[0x270FA4838](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  return MEMORY[0x270FA4840](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4848](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateVolumeOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4850](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4858](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource()
{
  return MEMORY[0x270FA4860]();
}

{
  return MEMORY[0x270FA4868]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateDisplacementOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4870](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointOrder(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this)
{
  return MEMORY[0x270FA4878](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeOrder(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this)
{
  return MEMORY[0x270FA4880](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeBlendShapeWeights()
{
  return MEMORY[0x270FA4888]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamples()
{
  return MEMORY[0x270FA4890]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamples()
{
  return MEMORY[0x270FA4898]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::JointTransformsMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this)
{
  return MEMORY[0x270FA48A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::BlendShapeWeightsMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this)
{
  return MEMORY[0x270FA48A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransformComponents()
{
  return MEMORY[0x270FA48B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  return MEMORY[0x270FA4948](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  return MEMORY[0x270FA4950](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreatePointsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4958](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  return MEMORY[0x270FA4968](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::ListMetadataFields(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this)
{
  return MEMORY[0x270FA4970](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return MEMORY[0x270FA4980](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateInput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3)
{
  return MEMORY[0x270FA4988](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3)
{
  return MEMORY[0x270FA4990](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return MEMORY[0x270FA4998](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA49A0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return MEMORY[0x270FA49A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA49B0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsIdentity(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return MEMORY[0x270FA49B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_IsOrdered(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return MEMORY[0x270FA49C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return MEMORY[0x270FA49C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA49D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSource(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  return MEMORY[0x270FA49D8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA49E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA49E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA49F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA49F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA4A10](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetInbetweens(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  return MEMORY[0x270FA4A18](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  return MEMORY[0x270FA4A20](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetPointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  return MEMORY[0x270FA4A28](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4A30](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4A38](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  return MEMORY[0x270FA4A40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  return MEMORY[0x270FA4A48](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4A50](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPossiblyInheritedPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4A58](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  return MEMORY[0x270FA4A60](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, const char *a2, ...)
{
  return MEMORY[0x270FA4A68](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, const char *a2, ...)
{
  return MEMORY[0x270FA4A70](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError()
{
  return MEMORY[0x270FA4A78]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==()
{
  return MEMORY[0x270FA4A80]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl()
{
  return MEMORY[0x270FA4A88]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  return MEMORY[0x270FA4A90](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  return MEMORY[0x270FA4A98](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  return MEMORY[0x270FA4AA0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::HasJointInfluences(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  return MEMORY[0x270FA4AA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform()
{
  return MEMORY[0x270FA4AB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreatePosAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4AC8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateDisplayColorAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4AD0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3)
{
  return MEMORY[0x270FA4AE0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3)
{
  return MEMORY[0x270FA4AE8](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4AF0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  return MEMORY[0x270FA4AF8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4B00](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetBlendShape(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this)
{
  return MEMORY[0x270FA4B08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::GetUnion(pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4B10](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator!()
{
  return MEMORY[0x270FA4B20]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator!()
{
  return MEMORY[0x270FA4B28]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4B78](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *this)
{
  return MEMORY[0x270FA4B80](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4B88](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindDirectBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4B90](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial()
{
  return MEMORY[0x270FA4B98]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdRelationship *a3)
{
  return MEMORY[0x270FA4BA0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x270FA4BA8](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindCollectionBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x270FA4BB0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRels(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4BB8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *a2, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, const pxrInternal__aapl__pxrReserved__::TfToken *a6)
{
  return MEMORY[0x270FA4BC0](this, a2, a3, a4, a5, a6);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  return MEMORY[0x270FA4BC8](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::GetPreliminaryPhysicsColliderConvexShapeRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  return MEMORY[0x270FA4BF8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::SetFactory()
{
  return MEMORY[0x270FA4C00]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return MEMORY[0x270FA4C08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2)
{
  return MEMORY[0x270FA4C10](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2, void *(*a3)(void *, BOOL))
{
  return MEMORY[0x270FA4C18](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::IsA()
{
  return MEMORY[0x270FA4C20]();
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrNode::GetInputNames(pxrInternal__aapl__pxrReserved__::NdrNode *this)
{
  return MEMORY[0x270FA4C38](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrNode::GetOutputNames(pxrInternal__aapl__pxrReserved__::NdrNode *this)
{
  return MEMORY[0x270FA4C40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4C48](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4C50](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4C58](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4C60](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4C68](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4C70](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4C78](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4C80](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4C88](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4C90](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4CA0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4CA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return MEMORY[0x270FA4CB0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4CB8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4CC0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4CC8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4CD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4CD8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4CE0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4CF8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetElementString(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4D00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4D10](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4D18](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4D20](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4D28](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4D38](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4D40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::RemoveCommonSuffix(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4D48](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementString()
{
  return MEMORY[0x270FA4D50]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4D60](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection()
{
  return MEMORY[0x270FA4D68]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4D80](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4D88](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4D98](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively()
{
  return MEMORY[0x270FA4DB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimOrPrimVariantSelectionPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4DC0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetName(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4DC8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetText(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4DD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetString(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4DE0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4DE8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  return MEMORY[0x270FA4E00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  return MEMORY[0x270FA4E08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  return MEMORY[0x270FA4E10](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::operator==()
{
  return MEMORY[0x270FA4E18]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::operator==()
{
  return MEMORY[0x270FA4E20]();
}

{
  return MEMORY[0x270FA4E28]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4E30](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4E38](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4E40](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetInstances(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4E48](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimStack(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4E50](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4E58](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4E60](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4E68](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4E70](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4E78](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties()
{
  return MEMORY[0x270FA4E80]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4E88](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet()
{
  return MEMORY[0x270FA4E90]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetNextSibling(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4E98](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4EA0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4EA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute()
{
  return MEMORY[0x270FA4EB8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4EC0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4EC8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4ED0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenNames(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4ED8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyNames()
{
  return MEMORY[0x270FA4EE0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyOrder(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4EE8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4EF0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4EF8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4F00](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributeAtPath(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4F08](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenReorder(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4F10](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAllChildrenNames(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4F18](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4F20](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4F28](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationshipAtPath(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4F38](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredReferences(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4F40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertyNames()
{
  return MEMORY[0x270FA4F48]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace()
{
  return MEMORY[0x270FA4F50]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()
{
  return MEMORY[0x270FA4F60]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return MEMORY[0x270FA4F78](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4F80](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4F88](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2)
{
  return MEMORY[0x270FA4F90](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4F98](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4FA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetHash(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4FB8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetType(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4FC0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_FailGet()
{
  return MEMORY[0x270FA4FC8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4FD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GetProjection(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return MEMORY[0x270FA4FD8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GetFieldOfView()
{
  return MEMORY[0x270FA4FE0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GetClippingRange(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return MEMORY[0x270FA4FE8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetComment(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA4FF0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA4FF8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetAssetName(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5008](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5010](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString()
{
  return MEMORY[0x270FA5018]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5020](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetDisplayName(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5028](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5040](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSessionOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5048](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetDocumentation(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5058](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileExtension(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5060](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetStateDelegate(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5070](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5078](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5090](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA50A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ComputeAbsolutePath()
{
  return MEMORY[0x270FA50C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA50E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5100](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Save(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5110](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Export()
{
  return MEMORY[0x270FA5118]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CanApply()
{
  return MEMORY[0x270FA5128]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x270FA5130](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5138](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()
{
  return MEMORY[0x270FA5148]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()
{
  return MEMORY[0x270FA5150]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==()
{
  return MEMORY[0x270FA5158]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr()
{
  return MEMORY[0x270FA5160]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL()
{
  return MEMORY[0x270FA5168]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x270FA5170](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA5178](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x270FA5180](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA5188](this);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_GetMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA5190](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA5198](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetPrototypes(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetDefaultPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasDefaultPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA51D0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetAttributeAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA51E8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetFramesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  return MEMORY[0x270FA51F8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA5200](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x270FA5208](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetColorConfiguration(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA5218](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA5220](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetColorConfiguration(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  return MEMORY[0x270FA5228](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  return MEMORY[0x270FA5230](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetColorManagementSystem(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA5238](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA5240](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetColorManagementSystem(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA5248](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::ResolveIdentifierToEditTarget()
{
  return MEMORY[0x270FA5250]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata()
{
  return MEMORY[0x270FA5258]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Export()
{
  return MEMORY[0x270FA5260]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA5268](this);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA5270](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResyncedPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  return MEMORY[0x270FA5278](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::HasChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA5280](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedInfoOnlyPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  return MEMORY[0x270FA5288](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x270FA5290](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA5298](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA52A8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x270FA52B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x270FA52B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetDisplayName()
{
  return MEMORY[0x270FA52C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomDataKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA52C8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetDocumentation()
{
  return MEMORY[0x270FA52D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomDataByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA52E0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x270FA52E8](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetCustomDataByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x270FA52F0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x270FA5300](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x270FA5308](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x270FA5310](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x270FA5318](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetAllAuthoredMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x270FA5320](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x270FA5328](this);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x270F98210](retstr, this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98238](this, __c, __pos);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98240](this, __c, __pos);
}

int std::string::compare(const std::string *this, std::string::size_type __pos1, std::string::size_type __n1, const std::string::value_type *__s)
{
  return MEMORY[0x270F98250](this, __pos1, __n1, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x270F982D8](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x270F98440](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984C8](this, __str, __pos, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984E0](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98500](this, __pos, __n1, __s);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x270F98508](this, __pos, __n1, __s, __n2);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x270F98568](this, __c);
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x270F98688]();
}

{
  return MEMORY[0x270F98690]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x270F98698]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x270F986E0]();
}

{
  return MEMORY[0x270F986E8]();
}

{
  return MEMORY[0x270F986F0]();
}

{
  return MEMORY[0x270F98700]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x270F98750]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98778]();
}

{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987B8]();
}

{
  return MEMORY[0x270F987C0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

void std::error_category::~error_category(std::error_category *this)
{
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x270F98890](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x270F98900](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x270F98910]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x270F98A00](retstr, __s);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x270F98B78](__str, __idx, *(void *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x270F98C18]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x270F98DF8](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E18](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void __cxa_bad_typeid(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x270F98F00](a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x270ED8070]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

float acosf(float a1)
{
  MEMORY[0x270ED8598](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

double atof(const char *a1)
{
  MEMORY[0x270ED86E0](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x270ED9468](label, attr, target);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

float exp2f(float a1)
{
  MEMORY[0x270ED9868](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x270ED9A18](*(void *)&a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x270ED9AC0](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x270ED9B18](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x270ED9BD0](a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x270ED9F50]();
}

float log2f(float a1)
{
  MEMORY[0x270EDA0E0](a1);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_enumerationMutation(id obj)
{
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x270F9AA18](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x270F9AA20](obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t os_log_with_args()
{
  return MEMORY[0x270EDA9E0]();
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x270EDAA58](log);
}

int raise(int a1)
{
  return MEMORY[0x270EDB0D0](*(void *)&a1);
}

int rand(void)
{
  return MEMORY[0x270EDB0D8]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x270EDB5C0](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB6A0](__s1, __s2);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x270EDB7D0](a1, *(void *)&a2, a3, a4, a5, a6);
}