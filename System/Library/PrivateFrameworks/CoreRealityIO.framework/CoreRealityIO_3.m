void sub_23F661D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48,void *a49,void *a50,void *a51,void *a52,void *a53,void *a54,void **a55,uint64_t a56,char a57)
{
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a55);
  v67 = 424;
  while (1)
  {
    v68 = *(void *)(&a57 + v67);
    if ((v68 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v67 -= 8;
    if (v67 == -8)
    {
      if ((*v65 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v64 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v63 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v62 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v61 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v60 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v59 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v58 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v66 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a54 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v57 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F6623A0()
{
}

void sub_23F6623A8()
{
}

void sub_23F6623B0()
{
}

void sub_23F6623B8()
{
}

void sub_23F6623C0()
{
}

void sub_23F6623C8()
{
}

void sub_23F6623D0()
{
}

void sub_23F6623D8()
{
}

void sub_23F6623E0()
{
}

void sub_23F6623E8()
{
}

void sub_23F6623F0()
{
}

void sub_23F6623F8()
{
}

void sub_23F662400()
{
}

void sub_23F662408()
{
}

void sub_23F662410()
{
}

void sub_23F662418()
{
}

void sub_23F662420()
{
}

void sub_23F662428()
{
}

void sub_23F662430()
{
}

void sub_23F662438()
{
}

void sub_23F662440()
{
}

void sub_23F662448()
{
}

void sub_23F662450()
{
}

void sub_23F662458()
{
}

void sub_23F662460()
{
}

void sub_23F662468()
{
}

void sub_23F662470()
{
}

void sub_23F662478()
{
}

void sub_23F662480()
{
}

void sub_23F662488()
{
}

void sub_23F662490()
{
}

void sub_23F662498()
{
}

void sub_23F6624A0()
{
}

void sub_23F6624A8()
{
}

void sub_23F6624B0()
{
}

void sub_23F6624B8()
{
}

void sub_23F6624C0()
{
}

void sub_23F6624C8()
{
}

void sub_23F6624D0()
{
}

void sub_23F6624D8()
{
}

void sub_23F6624E0()
{
}

void sub_23F6624E8()
{
}

void sub_23F6624F0()
{
}

void sub_23F6624F8()
{
}

void sub_23F662500()
{
}

realityio::Builder *realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(realityio::Builder *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v11[4] = *MEMORY[0x263EF8340];
  v6 = (std::__shared_weak_count *)a5[1];
  uint64_t v8 = *a5;
  v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v11[0] = &unk_26F340980;
  v11[3] = v11;
  v10[0] = &unk_26F340A00;
  v10[3] = v10;
  realityio::DynamicBuilder::DynamicBuilder(a1, a2, a3, a4, &v8, (uint64_t)v11, (uint64_t)v10);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(void *)a1 = &unk_26F340920;
  return a1;
}

void sub_23F66260C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26F340980;
  return result;
}

void std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F340980;
}

void std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v12) = 0;
  std::allocate_shared[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)&v12, &v14);
  v6 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v14);
  uint64_t v7 = (realityio::EntityBuilder *)v15;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v8 = realityio::EntityBuilder::kPrimPathOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v11 = 0;
  std::allocate_shared[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v8, (uint64_t *)(v9 + 160), &v11, &v12);
  v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F66282C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26F340A00;
  return result;
}

void std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F340A00;
}

char *std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t realityio::TextureBuilder::kOutputName(realityio::TextureBuilder *this)
{
  {
    operator new();
  }
  return realityio::TextureBuilder::kOutputName(void)::kOutputName;
}

void sub_23F662A88(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::TextureBuilder *realityio::TextureBuilder::TextureBuilder(realityio::TextureBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "TextureBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTextureBuilderIdentifier);
  realityio::generateTextureDirtyStageSubscription(&v5);
  v12[0] = &unk_26F340D38;
  v12[3] = v12;
  v11[0] = &unk_26F340DB8;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F340A80;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 37) = (char *)this + 304;
  *((void *)this + 38) = 0;
  *((void *)this + 36) = 0;
  return this;
}

void sub_23F662C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

std::string *maybeSelectCachedImportOperationIfSemanticUnspecified(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6 = (void *)(a4 + 8);
  uint64_t v7 = *(void **)(a4 + 8);
  if (!v7) {
    goto LABEL_8;
  }
  char v8 = (void *)(a4 + 8);
  do
  {
    int v9 = pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<();
    char v10 = v7 + 1;
    if (!v9)
    {
      char v10 = v7;
      char v8 = v7;
    }
    uint64_t v7 = (void *)*v10;
  }
  while (*v10);
  if (v8 == v6 || pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<()) {
LABEL_8:
  }
    char v8 = v6;
  int v11 = *(_DWORD *)(a2 + 72);
  BOOL v13 = v11 != 6 && v11 != 0 || v6 == v8;
  if (v13 || v8[12] != 1) {
    goto LABEL_41;
  }
  uint64_t v14 = v8[10];
  uint64_t v15 = *(unsigned __int8 *)(v14 + 103);
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = *(unsigned __int8 *)(v14 + 103);
  }
  else {
    uint64_t v16 = *(void *)(v14 + 88);
  }
  uint64_t v17 = *(unsigned __int8 *)(a2 + 71);
  int v18 = (char)v17;
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(a2 + 56);
  }
  if (v16 != v17) {
    goto LABEL_41;
  }
  v19 = (const void **)(v14 + 80);
  if (v18 >= 0) {
    v20 = (unsigned __int8 *)(a2 + 48);
  }
  else {
    v20 = *(unsigned __int8 **)(a2 + 48);
  }
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*v19, v20, *(void *)(v14 + 88))) {
      goto LABEL_41;
    }
    goto LABEL_32;
  }
  if (!*(unsigned char *)(v14 + 103))
  {
LABEL_32:
    if (*(unsigned __int8 *)(v14 + 121) == *(unsigned __int8 *)(a2 + 89)
      && *(unsigned __int8 *)(v14 + 108) == *(unsigned __int8 *)(a2 + 76)
      && *(unsigned __int8 *)(v14 + 109) == *(unsigned __int8 *)(a2 + 77)
      && *(unsigned __int8 *)(v14 + 110) == *(unsigned __int8 *)(a2 + 78)
      && *(unsigned __int8 *)(v14 + 111) == *(unsigned __int8 *)(a2 + 79)
      && *(unsigned __int8 *)(v14 + 112) == *(unsigned __int8 *)(a2 + 80)
      && *(_DWORD *)(v14 + 116) == *(_DWORD *)(a2 + 84)
      && *(unsigned __int8 *)(v14 + 120) == *(unsigned __int8 *)(a2 + 88))
    {
      a2 = v14 + 32;
    }
    goto LABEL_41;
  }
  while (*(unsigned __int8 *)v19 == *v20)
  {
    v19 = (const void **)((char *)v19 + 1);
    ++v20;
    if (!--v15) {
      goto LABEL_32;
    }
  }
LABEL_41:

  return realityio::TextureImportOperationSettings::TextureImportOperationSettings(a1, (const realityio::TextureImportOperationSettings *)a2);
}

uint64_t realityio::TextureBuilder::TextureDataT::operator=(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 4);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4 != v5)
  {
    *(void *)(a1 + 8) = v5;
    *(void *)(a2 + 8) = v4;
  }
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__move_assign(a1 + 16, (void *)(a2 + 16));
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v7 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v6;

  return a1;
}

void anonymous namespace'::UsdUVTextureProcess::process(_anonymous_namespace_::UsdUVTextureProcess *this)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)*((void *)this + 18);
  unint64_t v3 = atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v30, v2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 40));
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&buf);
  realityio::TextureBuilder::getUniformInputValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(&__str, (int *)&v30, (uint64_t)&buf);
  if (v44 < 0) {
    operator delete((void *)v43);
  }
  if (v42 < 0) {
    operator delete((void *)buf);
  }
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
  if (v31) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&buf);
  uint64_t v4 = (realityio *)pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==((unsigned __int8 *)&__str, (unsigned __int8 *)&buf);
  int v5 = (int)v4;
  if (v44 < 0) {
    operator delete((void *)v43);
  }
  if (v42 < 0) {
    operator delete((void *)buf);
  }
  if (v5)
  {
    uint64_t v6 = *(id *)(realityio::logObjects(v4) + 24);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(*((pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)this + 18), v36);
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v36);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = Text;
      _os_log_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_DEFAULT, "Shader input \"file\" is not set on \"%s\"", (uint8_t *)&buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v36);
    }
  }
  else
  {
    v22 = (void **)((char *)this + 8);
    std::string::operator=((std::string *)((char *)this + 8), &__str);
    v23 = (void **)((char *)this + 32);
    std::string::operator=((std::string *)((char *)this + 32), &v35);
    char v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)this + 19);
    int v9 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&buf, (uint64_t *)(*((void *)this + 18) + 8), (_DWORD *)(*((void *)this + 18) + 16));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v9, v36);
    realityio::internal::TexturePrimToMaterialPrimMap::materialPathsUsingTexture((realityio::internal::TexturePrimToMaterialPrimMap *)&v28, v8, v36);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v36);
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v41);
    if (*((void *)&buf + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_29, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&_MergedGlobals_29))
    {
      qword_268C40810 = 0;
      unk_268C40818 = 0;
      qword_268C40820 = 0;
      __cxa_guard_release(&_MergedGlobals_29);
    }
    if (v29 == v28)
    {
      int v18 = (void **)((char *)this + 104);
      if ((_BYTE)buf)
      {
        maybeSelectCachedImportOperationIfSemanticUnspecified(v36, (uint64_t)&buf + 8, (uint64_t)&__str, *((void *)this + 16));
        if (*((char *)this + 31) < 0) {
          operator delete(*v22);
        }
        *(_OWORD *)v22 = *(_OWORD *)&v36[0].__r_.__value_.__l.__data_;
        *((void *)this + 3) = *((void *)&v36[0].__r_.__value_.__l + 2);
        *((unsigned char *)&v36[0].__r_.__value_.__s + 23) = 0;
        v36[0].__r_.__value_.__s.__data_[0] = 0;
        if (*((char *)this + 55) < 0) {
          operator delete(*v23);
        }
        *(_OWORD *)v23 = *(_OWORD *)&v36[1].__r_.__value_.__l.__data_;
        *((void *)this + 6) = *((void *)&v36[1].__r_.__value_.__l + 2);
        *((unsigned char *)&v36[1].__r_.__value_.__s + 23) = 0;
        v36[1].__r_.__value_.__s.__data_[0] = 0;
        v19 = (void **)((char *)this + 56);
        if (*((char *)this + 79) < 0) {
          operator delete(*v19);
        }
        *(_OWORD *)v19 = __p[0];
        *((void *)this + 9) = *(void *)&__p[1];
        BYTE7(__p[1]) = 0;
        LOBYTE(__p[0]) = 0;
        *((_OWORD *)this + 5) = *(_OWORD *)((char *)&__p[1] + 8);
        *((_WORD *)this + 48) = WORD4(__p[2]);
        if (*((char *)this + 127) < 0)
        {
          operator delete(*v18);
          int v20 = SBYTE7(__p[1]);
          *(_OWORD *)int v18 = v38;
          *((void *)this + 15) = v39;
          HIBYTE(v39) = 0;
          LOBYTE(v38) = 0;
          if (v20 < 0) {
            operator delete(*(void **)&__p[0]);
          }
        }
        else
        {
          *(_OWORD *)int v18 = v38;
          *((void *)this + 15) = v39;
          HIBYTE(v39) = 0;
          LOBYTE(v38) = 0;
        }
        if (SHIBYTE(v36[1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36[1].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v36[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36[0].__r_.__value_.__l.__data_);
        }
        (*(void (**)(_anonymous_namespace_::UsdUVTextureProcess *))(*(void *)this + 24))(this);
      }
      realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result((uint64_t)&buf);
    }
    else
    {
      (**(void (***)(_anonymous_namespace_::UsdUVTextureProcess *))this)(this);
      char v10 = v28;
      v21 = v29;
      if (v28 != v29)
      {
        int v11 = (void **)((char *)this + 104);
        uint64_t v12 = (void **)((char *)this + 56);
        do
        {
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v24, *((pxrInternal__aapl__pxrReserved__::UsdStage **)this + 17), v10);
          BOOL v13 = (realityio::internal::TexturePrimToMaterialPrimMap *)*((void *)this + 19);
          uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&buf, (uint64_t *)(*((void *)this + 18) + 8), (_DWORD *)(*((void *)this + 18) + 16));
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v14, v36);
          uint64_t v15 = (unsigned __int8 **)realityio::internal::TexturePrimToMaterialPrimMap::connectionsBetweenTextureAndMaterial(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v36, v10);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v36);
          if ((v43 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v41);
          if (*((void *)&buf + 1)) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
          }
          if (v15) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = (unsigned __int8 **)&qword_268C40810;
          }
          *((void *)this + 20) = v16;
          if ((_BYTE)buf)
          {
            maybeSelectCachedImportOperationIfSemanticUnspecified(v36, (uint64_t)&buf + 8, (uint64_t)&__str, *((void *)this + 16));
          }
          else
          {
            uint64_t v39 = 0;
            long long v38 = 0u;
            memset(__p, 0, sizeof(__p));
            memset(v36, 0, sizeof(v36));
            pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v36);
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            DWORD2(__p[1]) = 0;
            HIDWORD(__p[1]) = realityio::TextureSwizzleChannels::kDefault;
            LOBYTE(__p[2]) = 2;
            DWORD1(__p[2]) = 0;
            WORD4(__p[2]) = 512;
            std::string::basic_string[abi:ne180100]<0>(&v38, "");
          }
          if (*((char *)this + 31) < 0) {
            operator delete(*v22);
          }
          *(_OWORD *)v22 = *(_OWORD *)&v36[0].__r_.__value_.__l.__data_;
          *((void *)this + 3) = *((void *)&v36[0].__r_.__value_.__l + 2);
          *((unsigned char *)&v36[0].__r_.__value_.__s + 23) = 0;
          v36[0].__r_.__value_.__s.__data_[0] = 0;
          if (*((char *)this + 55) < 0) {
            operator delete(*v23);
          }
          *(_OWORD *)v23 = *(_OWORD *)&v36[1].__r_.__value_.__l.__data_;
          *((void *)this + 6) = *((void *)&v36[1].__r_.__value_.__l + 2);
          *((unsigned char *)&v36[1].__r_.__value_.__s + 23) = 0;
          v36[1].__r_.__value_.__s.__data_[0] = 0;
          if (*((char *)this + 79) < 0) {
            operator delete(*v12);
          }
          *(_OWORD *)uint64_t v12 = __p[0];
          *((void *)this + 9) = *(void *)&__p[1];
          BYTE7(__p[1]) = 0;
          LOBYTE(__p[0]) = 0;
          *((_OWORD *)this + 5) = *(_OWORD *)((char *)&__p[1] + 8);
          *((_WORD *)this + 48) = WORD4(__p[2]);
          if (*((char *)this + 127) < 0)
          {
            operator delete(*v11);
            int v17 = SBYTE7(__p[1]);
            *(_OWORD *)int v11 = v38;
            *((void *)this + 15) = v39;
            HIBYTE(v39) = 0;
            LOBYTE(v38) = 0;
            if (v17 < 0) {
              operator delete(*(void **)&__p[0]);
            }
          }
          else
          {
            *(_OWORD *)int v11 = v38;
            *((void *)this + 15) = v39;
            HIBYTE(v39) = 0;
            LOBYTE(v38) = 0;
          }
          if (SHIBYTE(v36[1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36[1].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v36[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36[0].__r_.__value_.__l.__data_);
          }
          (*(void (**)(_anonymous_namespace_::UsdUVTextureProcess *))(*(void *)this + 8))(this);
          realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result((uint64_t)&buf);
          if ((v27 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
          if (v25) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
          }
          char v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
        }
        while (v10 != v21);
      }
      (*(void (**)(_anonymous_namespace_::UsdUVTextureProcess *))(*(void *)this + 16))(this);
    }
    *(void *)&long long buf = &v28;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_23F6636A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result(v54 - 240);
  *(void *)(v54 - 240) = &a24;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 240));
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a31);
  _Unwind_Resume(a1);
}

void anonymous namespace'::UsdUVTextureOutput::~UsdUVTextureOutput(_anonymous_namespace_::UsdUVTextureOutput *this)
{
  *(void *)this = &unk_26F340B60;
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void realityio::TextureBuilder::setOutput(uint64_t *a1, _anonymous_namespace_ *a2, void *a3)
{
  if (a3[2])
  {
    uint64_t v6 = (long long *)(a3 + 1);
    uint64_t v7 = (long long *)*a3;
    if ((void *)*a3 != a3 + 1)
    {
      do
      {
        std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100](&__p, v7 + 2);
        uint64_t v19 = v18[0];
        if (v18[0]) {
          RERetain();
        }
        realityio::Builder::addAsset(a1, &v19, 0);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v19);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(v18);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        char v8 = (long long *)*((void *)v7 + 1);
        if (v8)
        {
          do
          {
            int v9 = v8;
            char v8 = *(long long **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            int v9 = (long long *)*((void *)v7 + 2);
            BOOL v10 = *(void *)v9 == (void)v7;
            uint64_t v7 = v9;
          }
          while (!v10);
        }
        uint64_t v7 = v9;
      }
      while (v9 != v6);
    int v11 = };
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(a2, &v16);
    realityio::TextureBuilder::TextureDataT::TextureDataT((uint64_t)&__p, &v16, a3, v11);
    realityio::TextureBuilder::TextureDataT::operator=((uint64_t)(a1 + 35), (uint64_t)&__p);
    realityio::TextureBuilder::TextureDataT::~TextureDataT((id *)&__p.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v12 = (realityio::TextureBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
    uint64_t v14 = a1[2];
    BOOL v13 = (std::__shared_weak_count *)a1[3];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (long long *)realityio::TextureBuilder::kOutputName(v12);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(a1 + 35);
    realityio::Outputs::storeValue<realityio::TextureBuilder::TextureDataT *>(v14, v15, (uint64_t *)&__p);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
}

void sub_23F663A0C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

id anonymous namespace'::samplerForTextureAttribute(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2)
{
  unint64_t v3 = REMaterialCreateDefaultSamplerDescriptor();
  unint64_t v4 = atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  uint64_t v5 = v28;
  if ((v28 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v7 = atomic_load(&realityio::tokens::TextureBuilderTokens);
    if (!v7) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v18, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 48));
    int v23 = v18;
    uint64_t v24 = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, &v20);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v26, &v21);
    uint64_t v27 = v22;
    if ((v22 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
    if (v19) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
    }
    unint64_t v8 = atomic_load(&realityio::tokens::TextureBuilderTokens);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v13, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 56));
    LODWORD(v18) = v13;
    uint64_t v19 = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, &v15);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, &v16);
    uint64_t v22 = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
    if (v14) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v23)) {
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v18))
    }
    id v11 = v3;
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
    if (v19) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
    }
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
    if (v24) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
    }
    uint64_t v5 = v28;
  }
  else
  {
    id v6 = v3;
  }
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  return v3;
}

void sub_23F663DD8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 - 72);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<realityio::TextureBuilder::TextureDataT *>(uint64_t a1, long long *a2, uint64_t *a3)
{
  id v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  unint64_t v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *unint64_t v7 = &unk_26F340E38;
  uint64_t v8 = *a3;
  v7[3] = &unk_26F340E88;
  v7[4] = v8;
  id v11 = a2;
  int v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  BOOL v10 = (std::__shared_weak_count *)v9[8];
  v9[7] = (uint64_t)(v7 + 3);
  v9[8] = (uint64_t)v7;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F663F24(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::getShaderID(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2)
{
  *(void *)this = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(&v3, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v3)) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  uint64_t result = v4;
  if (v4) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
  }
  return result;
}

void sub_23F663FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

_DWORD *realityio::TextureBuilder::findSourceInput@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a1)
    || (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) == 0
    || !MEMORY[0x2455D0E10](a1))
  {
    goto LABEL_125;
  }
  LODWORD(v61) = 1;
  uint64_t v62 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v64 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v54[3] = 0;
  v54[0] = MEMORY[0x263F90790] + 16;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
  uint64_t v53 = 0;
  int v52 = 0;
  std::string v35 = (_DWORD *)(a1 + 20);
  v36 = (_DWORD *)(a1 + 16);
  uint64_t v33 = (_DWORD *)(a2 + 16);
  v34 = (_DWORD *)(a2 + 20);
  while (1)
  {
    int ConnectedSource = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
    char v5 = ConnectedSource;
    if (!ConnectedSource) {
      break;
    }
    switch(v52)
    {
      case 1:
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(&v61, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v54, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v53);
        *(_DWORD *)a1 = v61;
        uint64_t v6 = v62;
        uint64_t v62 = 0;
        uint64_t v7 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v6;
        if (v7) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v36, &v63);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v35);
        if (&v61 == (uint64_t *)a1)
        {
          uint64_t v9 = v64;
        }
        else
        {
          uint64_t v8 = *(void *)(a1 + 24);
          if ((v8 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v9 = 0;
          *(void *)(a1 + 24) = v64;
          uint64_t v64 = 0;
        }
        if ((v9 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
        if (v62) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62);
        }
        if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a1) & 1) == 0)
        {
          *(_DWORD *)a2 = *(_DWORD *)a1;
          *(void *)(a2 + 8) = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v33, v36);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v34, v35);
          *(void *)(a2 + 24) = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = 0;
          goto LABEL_121;
        }
        break;
      case 2:
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(&v47, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v54, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v53);
        int v37 = v47;
        uint64_t v38 = v48;
        if (v48) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v39, &v49);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v40, &v50);
        uint64_t v41 = v51;
        if ((v51 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v41 &= 0xFFFFFFFFFFFFFFF8;
        }
        int v42 = 3;
        uint64_t v43 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        uint64_t v46 = 0;
        if ((pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput() & 1) == 0) {
          goto LABEL_96;
        }
        if (MEMORY[0x2455D0FB0](&v37))
        {
          LODWORD(v57) = 1;
          uint64_t v58 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          uint64_t v60 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          uint64_t v64 = 0;
          uint64_t v61 = MEMORY[0x263F90790] + 16;
          if ((v60 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
          if (v58) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v58);
          }
          uint64_t v56 = 0;
          int v55 = 0;
          while (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
          {
            switch(v55)
            {
              case 2:
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(&v57, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v61, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v56);
                int v37 = v57;
                uint64_t v10 = v58;
                uint64_t v58 = 0;
                uint64_t v11 = v38;
                uint64_t v38 = v10;
                if (v11) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v39, &v59);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v40);
                if ((v41 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                uint64_t v41 = v60;
                uint64_t v60 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
                if (v58) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v58);
                }
                break;
              case 0:
                goto LABEL_93;
              case 1:
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(&v57, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v61, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v56);
                int v42 = v57;
                uint64_t v25 = v58;
                uint64_t v58 = 0;
                uint64_t v26 = v43;
                uint64_t v43 = v25;
                if (v26) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v44, &v59);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v45);
                if ((v46 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                uint64_t v46 = v60;
                uint64_t v60 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
                if (v58) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v58);
                }
LABEL_93:
                if ((v56 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                MEMORY[0x2455CF2C0](&v61);
                goto LABEL_96;
            }
          }
          if ((v56 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          MEMORY[0x2455CF2C0](&v61);
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v61, &v38, &v39);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        uint64_t v57 = MEMORY[0x263F906F0] + 16;
        if ((v64 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
        if (v62) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62);
        }
        if ((v56 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t EmptyString = (v56 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ShaderID);
        }
        unint64_t v14 = *(unsigned __int8 *)(EmptyString + 23);
        int v15 = (char)v14;
        if ((v14 & 0x80u) != 0) {
          unint64_t v14 = *(void *)(EmptyString + 8);
        }
        if (v14 < 0xB) {
          goto LABEL_62;
        }
        if (v15 < 0) {
          unint64_t EmptyString = *(void *)EmptyString;
        }
        unint64_t EmptyString = strncmp((const char *)EmptyString, "ND_constant", 0xBuLL);
        if (EmptyString)
        {
LABEL_62:
          if ((v56 & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v16 = (v56 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          }
          unint64_t v17 = *(unsigned __int8 *)(v16 + 23);
          int v18 = (char)v17;
          if ((v17 & 0x80u) != 0) {
            unint64_t v17 = *(void *)(v16 + 8);
          }
          if (v17 < 6) {
            goto LABEL_84;
          }
          if (v18 < 0) {
            unint64_t v16 = *(void *)v16;
          }
          if (strncmp((const char *)v16, "ND_dot", 6uLL)) {
            goto LABEL_84;
          }
          unint64_t v19 = atomic_load(&realityio::tokens::TextureBuilderTokens);
          if (!v19) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v61, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v57, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v19 + 168));
          int v42 = v61;
          uint64_t v20 = v62;
          uint64_t v62 = 0;
          uint64_t v21 = v43;
          uint64_t v43 = v20;
          if (v21) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v44, &v63);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v45);
          if ((v46 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          unint64_t v22 = atomic_load(&realityio::tokens::TextureBuilderTokens);
          if (!v22) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v61, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v57, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v22 + 160));
          int v42 = v61;
          uint64_t v23 = v62;
          uint64_t v62 = 0;
          uint64_t v24 = v43;
          uint64_t v43 = v23;
          if (v24) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v44, &v63);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v45);
          if ((v46 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        uint64_t v46 = v64;
        uint64_t v64 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
        if (v62) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62);
        }
LABEL_84:
        if ((v56 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CECB0](&v57);
LABEL_96:
        *(_DWORD *)a1 = v42;
        uint64_t v27 = v43;
        uint64_t v43 = 0;
        uint64_t v28 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v27;
        if (v28) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v36, &v44);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v35);
        if (&v42 == (int *)a1)
        {
          uint64_t v30 = v46;
        }
        else
        {
          uint64_t v29 = *(void *)(a1 + 24);
          if ((v29 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v30 = 0;
          *(void *)(a1 + 24) = v46;
          uint64_t v46 = 0;
        }
        if ((v30 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44);
        if (v43) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v43);
        }
        if ((v41 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
        if (v38) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v38);
        }
        char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a1);
        if ((IsValid & 1) == 0)
        {
          *(_DWORD *)a2 = *(_DWORD *)a1;
          *(void *)(a2 + 8) = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v33, v36);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v34, v35);
          *(void *)(a2 + 24) = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = 0;
        }
        if ((v51 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
        if (v48) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
        }
        if ((IsValid & 1) == 0) {
          goto LABEL_122;
        }
        break;
      case 0:
        *(_DWORD *)a2 = 3;
        *(void *)(a2 + 8) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *(void *)(a2 + 24) = 0;
LABEL_121:
        char v5 = 1;
        goto LABEL_122;
    }
  }
LABEL_122:
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t result = (_DWORD *)MEMORY[0x2455CF2C0](v54);
  if ((v5 & 1) == 0)
  {
LABEL_125:
    *(_DWORD *)a2 = *(_DWORD *)a1;
    *(void *)(a2 + 8) = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 16), (_DWORD *)(a1 + 16));
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 20), (_DWORD *)(a1 + 20));
    *(void *)(a2 + 24) = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

void sub_23F6649EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v34 = *(void *)(v32 - 160);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CECB0](v32 - 152);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a22);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a18);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a26);
  if ((a31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF2C0](&a32);
  _Unwind_Resume(a1);
}

void MtlxImageShaderProcess::process(MtlxImageShaderProcess *this)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  Inputs = (realityio *)pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(*((pxrInternal__aapl__pxrReserved__::UsdShadeShader **)this
                                                                                    + 17));
  if (v46 != v47)
  {
    uint64_t v4 = v46;
    uint64_t v5 = v47;
    uint64_t v6 = (void **)((char *)this + 8);
    uint64_t v7 = (void **)((char *)this + 104);
    uint64_t v8 = (void **)((char *)this + 32);
    uint64_t v9 = (void **)((char *)this + 56);
    uint64_t v10 = (_OWORD *)((char *)this + 80);
    while (1)
    {
      *(void *)long long buf = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v4);
      if (!atomic_load(&realityio::tokens::TextureBuilderTokens)) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0) {
        goto LABEL_58;
      }
      uint64_t IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v4);
      if (!IsValid
        || (uint64_t IsValid = pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput(), (IsValid & 1) == 0))
      {
        int v15 = *(id *)(realityio::logObjects((realityio *)IsValid) + 24);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(*((pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)this + 17), &__dst);
          uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst);
          *(_DWORD *)long long buf = 136315138;
          *(void *)&buf[4] = Text;
          _os_log_impl(&dword_23F4EA000, v15, OS_LOG_TYPE_DEFAULT, "Shader input \"file\" is not set on \"%s\"", buf, 0xCu);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__dst);
        }

        goto LABEL_58;
      }
      memset(v45, 0, sizeof(v45));
      if (buf[0])
      {
        if ((unint64_t)SHIBYTE(v52) > 2)
        {
          size_t v13 = 6;
          unint64_t v14 = "NotSet";
        }
        else
        {
          size_t v13 = qword_23F7CB1C8[SHIBYTE(v52)];
          unint64_t v14 = off_265071C08[SHIBYTE(v52)];
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
        memcpy(&__dst, v14, v13);
        __dst.__r_.__value_.__s.__data_[v13] = 0;
        std::string::operator=((std::string *)((char *)this + 8), (const std::string *)&buf[8]);
        std::string::operator=((std::string *)((char *)this + 32), &v49);
        std::string::operator=((std::string *)((char *)this + 56), &v50);
        _OWORD *v10 = v51;
        *((_WORD *)this + 48) = v52;
        std::string::operator=((std::string *)((char *)this + 104), &v53);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      int v38 = *(_DWORD *)v4;
      uint64_t v17 = *(void *)(v4 + 8);
      uint64_t v39 = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v40, (_DWORD *)(v4 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v41, (_DWORD *)(v4 + 20));
      uint64_t v18 = *(void *)(v4 + 24);
      uint64_t v42 = v18;
      if ((v18 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v42 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&__dst);
      realityio::TextureBuilder::getUniformInputValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(&v43, &v38, (uint64_t)&__dst);
      if (SHIBYTE(v30) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if ((v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
      if (v39) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
      }
      std::string::operator=((std::string *)((char *)this + 8), &v43);
      std::string::operator=((std::string *)((char *)this + 32), &v44);
      ColorSpace = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace((uint64_t *)&__dst, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v4);
      if ((__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (const std::string *)((__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ColorSpace);
      }
      std::string::operator=((std::string *)((char *)this + 56), EmptyString);
      if ((__dst.__r_.__value_.__s.__data_[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(_DWORD *)uint64_t v10 = TextureSemanticFromInfoID;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData(&v37, (pxrInternal__aapl__pxrReserved__::UsdObject *)v4);
      std::string::basic_string[abi:ne180100]<0>(&__dst, "downsampleFactor");
      uint64_t ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      unint64_t v22 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        break;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (v22) {
        goto LABEL_38;
      }
LABEL_39:
      maybeSelectCachedImportOperationIfSemanticUnspecified(&__dst, (uint64_t)this + 8, (uint64_t)&v43, *((void *)this + 16));
      if (*((char *)this + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *((void *)this + 3) = *((void *)&__dst.__r_.__value_.__l + 2);
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      __dst.__r_.__value_.__s.__data_[0] = 0;
      if (*((char *)this + 55) < 0) {
        operator delete(*v8);
      }
      *(_OWORD *)uint64_t v8 = __p;
      *((void *)this + 6) = v30;
      HIBYTE(v30) = 0;
      LOBYTE(__p) = 0;
      if (*((char *)this + 79) < 0) {
        operator delete(*v9);
      }
      *(_OWORD *)uint64_t v9 = v31;
      *((void *)this + 9) = v32;
      HIBYTE(v32) = 0;
      LOBYTE(v31) = 0;
      _OWORD *v10 = v33;
      *((_WORD *)this + 48) = v34;
      if (*((char *)this + 127) < 0)
      {
        operator delete(*v7);
        int v23 = SHIBYTE(v32);
        *(_OWORD *)uint64_t v7 = v35;
        *((void *)this + 15) = v36;
        HIBYTE(v36) = 0;
        LOBYTE(v35) = 0;
        if (v23 < 0) {
          operator delete((void *)v31);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v7 = v35;
        *((void *)this + 15) = v36;
        HIBYTE(v36) = 0;
        LOBYTE(v35) = 0;
      }
      if (SHIBYTE(v30) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      (**(void (***)(MtlxImageShaderProcess *, uint64_t))this)(this, v4);
      std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v37, 0);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      uint64_t v24 = (void ***)realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result((uint64_t)buf);
      *(void *)long long buf = v45;
      std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v24);
LABEL_58:
      v4 += 32;
      if (v4 == v5) {
        goto LABEL_64;
      }
    }
    if (!ValueAtPath) {
      goto LABEL_39;
    }
LABEL_38:
    *((_DWORD *)this + 23) = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(v22);
    goto LABEL_39;
  }
  uint64_t v25 = *(id *)(realityio::logObjects(Inputs) + 24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(*((pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)this + 17), &__dst);
    uint64_t v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&buf[4] = v26;
    _os_log_impl(&dword_23F4EA000, v25, OS_LOG_TYPE_DEFAULT, "Shader input \"file\" is not set on \"%s\"", buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__dst);
  }

LABEL_64:
  *(void *)long long buf = &v46;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_23F665190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::getTextureSemanticFromInfoID(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*((void *)v4 + 22) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v5 = (*((void *)v4 + 22) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v5 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  if (*(char *)(v5 + 23) >= 0) {
    uint64_t v6 = (const char *)v5;
  }
  else {
    uint64_t v6 = *(const char **)v5;
  }
  int v7 = *(char *)(EmptyString + 23);
  if (v7 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(EmptyString + 23);
  }
  else {
    unint64_t v8 = *(void *)(EmptyString + 8);
  }
  size_t v9 = strlen(v6);
  if (v8 >= v9)
  {
    unint64_t v10 = *(void *)EmptyString;
    if (v7 >= 0) {
      unint64_t v10 = EmptyString;
    }
    size_t v9 = strcmp((const char *)(v10 + v8 - v9), v6);
    if (!v9) {
      return 3;
    }
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v11 = (*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v11 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v13 = (*((void *)v12 + 23) & 0xFFFFFFFFFFFFFFF8) != 0
      ? (*((void *)v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 16
      : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  unint64_t v14 = *(char *)(v13 + 23) >= 0 ? (const char *)v13 : *(const char **)v13;
  int v15 = *(char *)(v11 + 23);
  unint64_t v16 = v15 >= 0 ? *(unsigned __int8 *)(v11 + 23) : *(void *)(v11 + 8);
  size_t v17 = strlen(v14);
  if (v16 >= v17)
  {
    unint64_t v18 = *(void *)v11;
    if (v15 >= 0) {
      unint64_t v18 = v11;
    }
    size_t v17 = strcmp((const char *)(v18 + v16 - v17), v14);
    if (!v17) {
      return 3;
    }
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v19 = (*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v19 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v17);
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v21) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*((void *)v21 + 24) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v22 = (*((void *)v21 + 24) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v22 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
  }
  if (*(char *)(v22 + 23) >= 0) {
    int v23 = (const char *)v22;
  }
  else {
    int v23 = *(const char **)v22;
  }
  int v24 = *(char *)(v19 + 23);
  if (v24 >= 0) {
    unint64_t v25 = *(unsigned __int8 *)(v19 + 23);
  }
  else {
    unint64_t v25 = *(void *)(v19 + 8);
  }
  size_t v26 = strlen(v23);
  if (v25 >= v26)
  {
    unint64_t v27 = *(void *)v19;
    if (v24 >= 0) {
      unint64_t v27 = v19;
    }
    size_t v26 = strcmp((const char *)(v27 + v25 - v26), v23);
    if (!v26) {
      return 2;
    }
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v28 = (*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v28 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v26);
  }
  uint64_t v29 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v29) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*((void *)v29 + 25) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v30 = (*((void *)v29 + 25) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v30 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
  }
  if (*(char *)(v30 + 23) >= 0) {
    long long v31 = (const char *)v30;
  }
  else {
    long long v31 = *(const char **)v30;
  }
  int v32 = *(char *)(v28 + 23);
  if (v32 >= 0) {
    unint64_t v33 = *(unsigned __int8 *)(v28 + 23);
  }
  else {
    unint64_t v33 = *(void *)(v28 + 8);
  }
  size_t v34 = strlen(v31);
  if (v33 >= v34)
  {
    unint64_t v35 = *(void *)v28;
    if (v32 >= 0) {
      unint64_t v35 = v28;
    }
    size_t v34 = strcmp((const char *)(v35 + v33 - v34), v31);
    if (!v34) {
      return 1;
    }
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v36 = (*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v36 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v34);
  }
  uint64_t v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v37) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v38 = (*((void *)v37 + 26) & 0xFFFFFFFFFFFFFFF8) != 0
      ? (*((void *)v37 + 26) & 0xFFFFFFFFFFFFFFF8) + 16
      : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
  uint64_t v39 = *(char *)(v38 + 23) >= 0 ? (const char *)v38 : *(const char **)v38;
  int v40 = *(char *)(v36 + 23);
  unint64_t v41 = v40 >= 0 ? *(unsigned __int8 *)(v36 + 23) : *(void *)(v36 + 8);
  size_t v42 = strlen(v39);
  if (v41 >= v42)
  {
    unint64_t v43 = *(void *)v36;
    if (v40 >= 0) {
      unint64_t v43 = v36;
    }
    size_t v42 = strcmp((const char *)(v43 + v41 - v42), v39);
    if (!v42) {
      return 1;
    }
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v44 = (*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v44 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v42);
  }
  uint64_t v45 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v45) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*((void *)v45 + 27) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v46 = (*((void *)v45 + 27) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v46 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v45);
  }
  if (*(char *)(v46 + 23) >= 0) {
    uint64_t v47 = (const char *)v46;
  }
  else {
    uint64_t v47 = *(const char **)v46;
  }
  int v48 = *(char *)(v44 + 23);
  if (v48 >= 0) {
    size_t v49 = *(unsigned __int8 *)(v44 + 23);
  }
  else {
    size_t v49 = *(void *)(v44 + 8);
  }
  size_t v50 = strlen(v47);
  if (v49 < v50) {
    return 0;
  }
  unint64_t v51 = *(void *)v44;
  if (v48 >= 0) {
    unint64_t v51 = v44;
  }
  return strcmp((const char *)(v51 + v49 - v50), v47) == 0;
}

void anonymous namespace'::makeImportSettingsForUsdPreviewSurface(uint64_t a1, const std::string *a2, pxrInternal__aapl__pxrReserved__::UsdShadeShader *a3, unsigned __int8 **a4)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v48);
  std::string::basic_string[abi:ne180100]<0>(&v50, "");
  LODWORD(v51) = 0;
  DWORD1(v51) = realityio::TextureSwizzleChannels::kDefault;
  BYTE8(v51) = 2;
  HIDWORD(v51) = 0;
  __int16 v52 = 512;
  std::string::basic_string[abi:ne180100]<0>(&v53, "");
  unint64_t v8 = atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v44, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 40));
  unint64_t v9 = atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v40, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v9 + 24));
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v28);
  if (v31 < 0) {
    operator delete(__p);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v32[0])
  {
    std::string::operator=(&v48, (const std::string *)&v33);
    std::string::operator=(&v49, (const std::string *)((char *)&v34 + 8));
    std::string::operator=(&v50, &v36);
    long long v51 = v37;
    __int16 v52 = v38;
    std::string::operator=(&v53, &v39);
    unint64_t v10 = atomic_load(&realityio::tokens::TextureBuilderTokens);
    if (!v10) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v24, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 40));
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v56);
    realityio::TextureBuilder::getUniformInputValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(&v60, (int *)&v24, (uint64_t)v56);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    std::string v48 = v60;
    *((unsigned char *)&v60.__r_.__value_.__s + 23) = 0;
    v60.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v49.__r_.__value_.__l.__data_);
      std::string v49 = v61;
      *((unsigned char *)&v61.__r_.__value_.__s + 23) = 0;
      v61.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v49 = v61;
      *((unsigned char *)&v61.__r_.__value_.__s + 23) = 0;
      v61.__r_.__value_.__s.__data_[0] = 0;
    }
    if (v59 < 0) {
      operator delete(v58);
    }
    if (v57 < 0) {
      operator delete(*(void **)v56);
    }
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
    if (v25) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
    }
    v60.__r_.__value_.__r.__words[0] = v48.__r_.__value_.__l.__size_;
    std::string::size_type v11 = v48.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 7);
    char v12 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    memset(&v48, 0, sizeof(v48));
    *(void *)uint64_t v56 = v49.__r_.__value_.__l.__size_;
    std::string::size_type v13 = v49.__r_.__value_.__r.__words[0];
    *(void *)&v56[7] = *(std::string::size_type *)((char *)&v49.__r_.__value_.__r.__words[1] + 7);
    char v14 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    memset(&v49, 0, sizeof(v49));
    std::string::size_type v15 = v50.__r_.__value_.__r.__words[0];
    *(void *)((char *)v55 + 7) = *(std::string::size_type *)((char *)&v50.__r_.__value_.__r.__words[1] + 7);
    v55[0] = v50.__r_.__value_.__l.__size_;
    char v16 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    memset(&v50, 0, sizeof(v50));
    long long v17 = v51;
    *(_WORD *)(a1 + 96) = v52;
    *(_OWORD *)(a1 + 80) = v17;
    std::string::size_type v18 = v53.__r_.__value_.__r.__words[0];
    *(void *)((char *)v54 + 7) = *(std::string::size_type *)((char *)&v53.__r_.__value_.__r.__words[1] + 7);
    v54[0] = v53.__r_.__value_.__l.__size_;
    char v19 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    memset(&v53, 0, sizeof(v53));
    *(unsigned char *)a1 = 1;
    std::string::size_type v20 = v60.__r_.__value_.__r.__words[0];
    *(void *)(a1 + 23) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = v20;
    *(unsigned char *)(a1 + 31) = v12;
    uint64_t v21 = *(void *)v56;
    *(void *)(a1 + 47) = *(void *)&v56[7];
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v21;
    *(unsigned char *)(a1 + 55) = v14;
    uint64_t v22 = v55[0];
    *(void *)(a1 + 71) = *(void *)((char *)v55 + 7);
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v22;
    *(unsigned char *)(a1 + 79) = v16;
    uint64_t v23 = v54[0];
    *(void *)(a1 + 119) = *(void *)((char *)v54 + 7);
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v23;
    *(unsigned char *)(a1 + 127) = v19;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v33;
    *(_OWORD *)(a1 + 24) = v34;
    *(void *)(a1 + 40) = v35;
    long long v34 = 0uLL;
    uint64_t v35 = 0;
  }
  realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result((uint64_t)v32);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
  if (v41) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
  }
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
  if (v45) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v45);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
}

void sub_23F665B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::TextureBuilder::getUniformInputValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(std::string *a1, int *a2, uint64_t a3)
{
  int v20 = *a2;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v21 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, a2 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, a2 + 5);
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v24 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  realityio::TextureBuilder::findSourceInput((uint64_t)&v20, (uint64_t)&v15);
  *a2 = v15;
  uint64_t v8 = v16;
  *(void *)&long long v16 = 0;
  uint64_t v9 = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  if (v9) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(a2 + 4), (int *)&v16 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(a2 + 5));
  if (&v15 == a2)
  {
    std::string::size_type v11 = v17;
  }
  else
  {
    uint64_t v10 = *((void *)a2 + 3);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::string::size_type v11 = 0;
    *((void *)a2 + 3) = v17;
    std::string::size_type v17 = 0;
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16 + 8);
  if ((void)v16) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
  }
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  if (v21) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, (uint64_t)&v15);
  if (!(_BYTE)v15)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a1->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
    }
    char v12 = a1 + 1;
    if (*(char *)(a3 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
      return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&v15);
    }
    std::string::size_type v13 = (const std::string::value_type **)(a3 + 24);
    goto LABEL_33;
  }
  if (SHIBYTE(v17) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v16, *((std::string::size_type *)&v16 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v16;
    a1->__r_.__value_.__r.__words[2] = v17;
  }
  char v12 = a1 + 1;
  if ((v19 & 0x80000000) == 0)
  {
    std::string::size_type v13 = v18;
LABEL_33:
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)v13;
    v12->__r_.__value_.__r.__words[2] = (std::string::size_type)v13[2];
    return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&v15);
  }
  std::string::__init_copy_ctor_external(v12, v18[0], (std::string::size_type)v18[1]);
  return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&v15);
}

void sub_23F665ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

void MtlxImageShaderOutput::~MtlxImageShaderOutput(MtlxImageShaderOutput *this)
{
  *(void *)this = &unk_26F340AF8;
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 160, *((void **)this + 21));
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t MtlxImageShaderOutput::instance(MtlxImageShaderOutput *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  std::string::size_type v4 = *((void *)this + 19);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26F340BD0;
  __p.__r_.__value_.__l.__size_ = v4;
  if (v11[0].__r_.__value_.__s.__data_[0])
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &__p);
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    if (*(char *)(String + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)String, *(void *)(String + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)String;
      v10.__r_.__value_.__r.__words[2] = *(void *)(String + 16);
      *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v6;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v10;
    }
    std::string::size_type size = v11[0].__r_.__value_.__l.__size_;
    if (v11[0].__r_.__value_.__l.__size_) {
      RERetain();
    }
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::WrappedRERef<REAsset *>>>((uint64_t **)this + 20, (const void **)&__p.__r_.__value_.__l.__data_, (long long *)&__p);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  return realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)v11);
}

void sub_23F6660D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void realityio::TextureBuilder::run(realityio::TextureBuilder *this, realityio::Inputs *a2)
{
  v40[3] = *MEMORY[0x263EF8340];
  realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v24, 2038, (uint64_t)this);
  std::string::size_type v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v20, v4, (realityio::Inputs *)((char *)a2 + 32));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v19[0] = MEMORY[0x263F906F0] + 16;
  long long v6 = (realityio *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((v18 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    std::string::size_type v13 = *(id *)(realityio::logObjects(v6) + 24);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v20);
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&buf[4] = Text;
      _os_log_impl(&dword_23F4EA000, v13, OS_LOG_TYPE_INFO, "TextureBuilder starts processing (Prim \"%s\")", buf, 0xCu);
    }

    long long v26 = 0u;
    *(_OWORD *)uint64_t v27 = 0u;
    *(_OWORD *)long long buf = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v27[0] = 0;
    v27[1] = 0;
    long long v26 = (unint64_t)&v26 + 8;
    *(void *)&buf[8] = 0;
    realityio::TextureBuilder::TextureDataT::operator=((uint64_t)this + 280, (uint64_t)buf);
    realityio::TextureBuilder::TextureDataT::~TextureDataT((id *)buf);
    uint64_t v16 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
    uint64_t v17 = *(void *)a2;
    long long v33 = (void *)v16;
    long long v34 = v19;
    uint64_t v35 = (realityio::Inputs *)(v17 + 112);
    *(void *)long long buf = &unk_26F340B60;
    long long v37 = this;
    __int16 v38 = a2;
    v40[0] = 0;
    v40[1] = 0;
    std::string v39 = v40;
    char v12 = (realityio::TextureBuilder ***)&v39;
    *(void *)long long buf = &unk_26F340B60;
    std::string::size_type v11 = (realityio::TextureBuilder *)v40[0];
  }
  else
  {
    isMtlxImageShader = (realityio *)realityio::TextureBuilder::isMtlxImageShader((realityio::TextureBuilder *)&v20, v5);
    if (!isMtlxImageShader) {
      goto LABEL_18;
    }
    uint64_t v8 = *(id *)(realityio::logObjects(isMtlxImageShader) + 24);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v20);
      uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&buf[4] = v10;
      _os_log_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_INFO, "TextureBuilder starts processing (Prim \"%s\")", buf, 0xCu);
    }

    long long v26 = 0u;
    *(_OWORD *)uint64_t v27 = 0u;
    *(_OWORD *)long long buf = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v27[0] = 0;
    v27[1] = 0;
    long long v26 = (unint64_t)&v26 + 8;
    *(void *)&buf[8] = 0;
    realityio::TextureBuilder::TextureDataT::operator=((uint64_t)this + 280, (uint64_t)buf);
    realityio::TextureBuilder::TextureDataT::~TextureDataT((id *)buf);
    long long v33 = v19;
    long long v34 = &v18;
    *(void *)long long buf = &unk_26F340AF8;
    long long v37 = 0;
    __int16 v38 = 0;
    uint64_t v35 = a2;
    std::string v36 = &v37;
    MtlxImageShaderProcess::process((MtlxImageShaderProcess *)buf);
    realityio::TextureBuilder::setOutput((uint64_t *)this, (_anonymous_namespace_ *)v19, &v36);
    *(void *)long long buf = &unk_26F340AF8;
    std::string::size_type v11 = v37;
    char v12 = &v36;
  }
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)v12, v11);
  if (v32 < 0) {
    operator delete(__p);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(*(void **)&buf[8]);
  }
LABEL_18:
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CECB0](v19);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  if (v21) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
  }
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v24);
}

void sub_23F666560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  realityio::TextureBuilder::TextureDataT::~TextureDataT((id *)va3);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CECB0]((uint64_t *)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)va2);
  _Unwind_Resume(a1);
}

void sub_23F666618()
{
}

uint64_t realityio::TextureBuilder::isMtlxImageShader(realityio::TextureBuilder *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v3 = (void *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((**(void **)(v2 + 24) & 0xFFFFFFFFFFFFFFF8) != (*v3 & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v19[0] = MEMORY[0x263F906F0] + 16;
  if ((v18 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (v18 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ShaderID);
  }
  unint64_t v7 = *(unsigned __int8 *)(EmptyString + 23);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    unint64_t v7 = *(void *)(EmptyString + 8);
  }
  if (v7 < 3) {
    goto LABEL_16;
  }
  if (v8 < 0) {
    unint64_t EmptyString = *(void *)EmptyString;
  }
  if (strncmp((const char *)EmptyString, "ND_", 3uLL)) {
    goto LABEL_16;
  }
  unint64_t v10 = atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((v18 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v10 + 152) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_16;
  }
  unint64_t v11 = atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((v18 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v11 + 144) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_16:
    uint64_t v4 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v19);
    uint64_t v12 = v16;
    if (v16 == v17)
    {
      uint64_t v4 = 0;
    }
    else
    {
      do
      {
        TypeName = (pxrInternal__aapl__pxrReserved__::UsdAttribute **)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v12);
        if (!atomic_load(&realityio::tokens::TextureBuilderTokens)) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
        uint64_t v4 = v14;
        uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)((char *)v12 + 32);
        if (v12 == v17) {
          char v15 = 1;
        }
        else {
          char v15 = v14;
        }
      }
      while ((v15 & 1) == 0);
    }
    TypeName = &v16;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&TypeName);
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CECB0](v19);
  return v4;
}

void sub_23F666838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if ((a5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CECB0](va);
  _Unwind_Resume(a1);
}

void realityio::TextureBuilder::clear(realityio::TextureBuilder *this, realityio::Inputs *a2)
{
  uint64_t v5 = (std::mutex *)*((void *)this + 2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (const void **)realityio::TextureBuilder::kOutputName(this);
  unint64_t v7 = v5 + 1;
  std::mutex::lock(v5 + 1);
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v5->__m_.__opaque[32], v6);
  uint64_t v9 = &v5->__m_.__opaque[40];
  if (&v5->__m_.__opaque[40] == (char *)v8)
  {
    std::operator+<char>();
    unint64_t v11 = std::string::append(&v22, "\" does not exist in the builder outputs");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v19, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    long long v18 = v19;
    std::string::size_type v13 = *((void *)&v20 + 1);
    uint64_t v6 = (const void **)v20;
    int v2 = SBYTE7(v21);
    *(void *)&long long v21 = 0;
    long long v20 = 0uLL;
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    std::mutex::unlock(v7);
    long long v19 = v18;
    if (v2 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v20, (const std::string::value_type *)v6, v13);
      uint64_t v14 = (const void **)v20;
      LOBYTE(v2) = BYTE7(v21);
      operator delete(v6);
      uint64_t v6 = v14;
    }
  }
  else
  {
    std::mutex::unlock(v5 + 1);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v9 == (char *)v8)
  {
    if ((v2 & 0x80) != 0) {
      operator delete(v6);
    }
  }
  else
  {
    uint64_t v16 = *((void *)this + 2);
    char v15 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = (const void **)realityio::TextureBuilder::kOutputName(v10);
    std::mutex::lock((std::mutex *)(v16 + 64));
    if (v16 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v16 + 40, v17))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v16 + 40), v17); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v16, (unsigned __int8 *)v17);
    }
    std::mutex::unlock((std::mutex *)(v16 + 64));
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    long long v21 = 0uLL;
    long long v20 = (unint64_t)&v20 + 8;
    *((void *)&v19 + 1) = 0;
    realityio::TextureBuilder::TextureDataT::operator=((uint64_t)this + 280, (uint64_t)&v19);
    realityio::TextureBuilder::TextureDataT::~TextureDataT((id *)&v19);
  }
}

void sub_23F666AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  operator delete(v24);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void *realityio::TextureBuilder::gatherTextureInfo(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::__value_func[abi:ne180100]((uint64_t)v80, a5);
  std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::__value_func[abi:ne180100]((uint64_t)v81, (uint64_t)v80);
  v83[0] = 0;
  v83[1] = 0;
  v81[4] = a2;
  v82 = v83;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  v84 = 0;
  std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::~__value_func[abi:ne180100](v80);
  v78 = (atomic_uint *)*a1;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v78);
  realityio::internal::TexturePrimToMaterialPrimMap::makeTexturePrimToMaterialMap((uint64_t *)&v78, v79);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v78);
  v76 = (atomic_uint *)*a1;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v76);
  realityio::makeSdfAssetPathToTextureImportSettingsMapWithSpecifiedSemantics((const std::string *)a4, (uint64_t *)&v76, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v79, v77);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v76);
  v74[0] = (uint64_t)v81;
  v74[1] = (uint64_t)a1;
  v74[2] = (uint64_t)v79;
  v74[3] = (uint64_t)v77;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  if (a3)
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::Traverse((uint64_t *)&v70, v9);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&v70, (uint64_t)v65);
    uint64_t v60 = v71;
    std::string v61 = &v70;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    int v63 = 0;
    __int16 v64 = 0;
    unint64_t v10 = (char *)&v58 + 4;
    unint64_t v11 = &v58;
    while ((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v65[1] != v61
         || v65[0] != v60
         || v66 != v62
         || v67 != v63
         || v68 != v64
         || v69 != HIBYTE(v64))
    {
      long long v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v65, (uint64_t)v56);
      pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(v12);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if ((IsA & 1) != 0
        || (pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)IsA),
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
            pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v55[3] = 0;
        v55[0] = MEMORY[0x263F907A0] + 16;
        uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
        if (!v14) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)v55, v14, 0);
        if (v53 && (*(unsigned char *)(v53 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v52 + 32))(&v52))
        {
          char v15 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v38, &v53, &v54);
          UsdPrimAllPrimsPredicate = (unint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v15);
          uint64_t v17 = v10;
          long long v18 = v11;
          unint64_t v19 = *UsdPrimAllPrimsPredicate;
          uint64_t v20 = UsdPrimAllPrimsPredicate[1];
          unint64_t v21 = UsdPrimAllPrimsPredicate[2];
          if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
            && ((v19 & 0x2000) != 0 || (v20 & 0x2000) == 0))
          {
            v19 |= 0x2000uLL;
            v20 &= ~0x2000uLL;
          }
          long long v34 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v19;
          uint64_t v35 = v20;
          *(void *)&long long v36 = v21;
          unint64_t v11 = v18;
          unint64_t v10 = v17;
          pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v38, (uint64_t *)&v34, (uint64_t)&v42);
          if ((BYTE8(v40) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v40 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
          if (v39) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
          }
          __int16 v38 = v42;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v39, &v43);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v39 + 1, &v44);
          long long v40 = v45;
          uint64_t v41 = v46;
          long long v34 = v47;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v35, &v48);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v35 + 1, &v49);
          long long v36 = v50;
          uint64_t v37 = v51;
          while (v38 != v34
               || v39 != v35
               || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v40, (uint64_t)&v36))
          {
            pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v38, (uint64_t)v30);
            realityio::TextureBuilder::gatherTextureInfo(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&,REServiceLocator *,BOOL,std::string const&,std::function<void ()(RETextureImportOperation0 *,char const*,char const*)>)::$_0::operator()(v74, (pxrInternal__aapl__pxrReserved__::UsdObject *)v30);
            if ((v33 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
            if (v31) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
            }
            pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v38);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
        }
        MEMORY[0x2455CEF40](&v52);
        MEMORY[0x2455CF4B0](v55);
      }
      if ((v59 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v11);
      if (v57) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v57);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v65);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    char v28 = &v72;
  }
  else
  {
    std::string v22 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
    PseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot((uint64_t *)&v70, v22);
    uint64_t v24 = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(PseudoRoot);
    unint64_t v26 = *(void *)v24;
    uint64_t v25 = *(void *)(v24 + 8);
    uint64_t v27 = *(void *)(v24 + 16);
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v26 & 0x2000) != 0 || (v25 & 0x2000) == 0))
    {
      v26 |= 0x2000uLL;
      v25 &= ~0x2000uLL;
    }
    __int16 v38 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v26;
    uint64_t v39 = v25;
    *(void *)&long long v40 = v27;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v70, (uint64_t *)&v38, (uint64_t)&v42);
    if ((BYTE8(v72) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v72 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
    if (v71) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v71);
    }
    v70 = v42;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v71, &v43);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v71 + 1, &v44);
    long long v72 = v45;
    uint64_t v73 = v46;
    __int16 v38 = v47;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v39, &v48);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v39 + 1, &v49);
    long long v40 = v50;
    uint64_t v41 = v51;
    while (v70 != v38
         || v71 != v39
         || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v72, (uint64_t)&v40))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v70, (uint64_t)&v34);
      realityio::TextureBuilder::gatherTextureInfo(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&,REServiceLocator *,BOOL,std::string const&,std::function<void ()(RETextureImportOperation0 *,char const*,char const*)>)::$_0::operator()(v74, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v34);
      if ((BYTE8(v36) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v36 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
      if (v35) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v35);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v70);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    char v28 = (long long *)&v43;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)v77, (void *)v77[1]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)v79, (void *)v79[1]);
  if (SHIBYTE(v86) < 0) {
    operator delete(v84);
  }
  std::__tree<std::string>::destroy((uint64_t)&v82, v83[0]);
  return std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::~__value_func[abi:ne180100](v81);
}

void sub_23F667344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)&STACK[0x260], (void *)STACK[0x268]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(v13 - 240, *(void **)(v13 - 232));
  if (*(char *)(v13 - 97) < 0) {
    operator delete(*(void **)(v13 - 120));
  }
  std::__tree<std::string>::destroy(a13, *(char **)(v13 - 136));
  std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::~__value_func[abi:ne180100]((void *)(v13 - 184));
  _Unwind_Resume(a1);
}

void realityio::makeSdfAssetPathToTextureImportSettingsMapWithSpecifiedSemantics(const std::string *a1@<X0>, uint64_t *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, void *a4@<X8>)
{
  a4[1] = 0;
  a4[2] = 0;
  __int16 v38 = (uint64_t **)(a4 + 1);
  *a4 = a4 + 1;
  memset(v97, 0, 24);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  PseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot((uint64_t *)&v55, v4);
  UsdPrimAllPrimsPredicate = (std::string::size_type *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(PseudoRoot);
  std::string::size_type v8 = *UsdPrimAllPrimsPredicate;
  std::string::size_type v7 = UsdPrimAllPrimsPredicate[1];
  std::string::size_type v9 = UsdPrimAllPrimsPredicate[2];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v8 & 0x2000) != 0 || (v7 & 0x2000) == 0))
  {
    v8 |= 0x2000uLL;
    v7 &= ~0x2000uLL;
  }
  v50.__r_.__value_.__r.__words[0] = v8;
  v50.__r_.__value_.__l.__size_ = v7;
  v50.__r_.__value_.__r.__words[2] = v9;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v55, (uint64_t *)&v50, (uint64_t)&v87);
  if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55.__r_.__value_.__r.__words[2]);
  if (v55.__r_.__value_.__l.__size_) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v55.__r_.__value_.__l.__size_);
  }
  v83 = v87;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v84, &v88);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v84 + 1, &v89);
  long long v85 = v90;
  uint64_t v86 = v91;
  v79 = v92;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v80, &v93);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v80 + 1, &v94);
  long long v81 = v95;
  uint64_t v82 = v96;
  while (v83 != v79
       || v84 != v80
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v85, (uint64_t)&v81))
  {
    unint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v83, (uint64_t)v75);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v10);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) == 0) {
      goto LABEL_120;
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v74[0] = MEMORY[0x263F906F0] + 16;
    unint64_t v12 = atomic_load(&realityio::tokens::TextureBuilderTokens);
    if (!v12) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((v73 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      if (realityio::TextureBuilder::isMtlxImageShader((realityio::TextureBuilder *)v75, v11))
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v74);
        if (TextureSemanticFromInfoID)
        {
          uint64_t v14 = v71;
          char v15 = v72;
          while (1)
          {
            if (v14 == v15) {
              goto LABEL_116;
            }
            v55.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v14);
            if (!atomic_load(&realityio::tokens::TextureBuilderTokens)) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
            if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0
              && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v14)
              && (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) != 0)
            {
              break;
            }
LABEL_69:
            uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)((char *)v14 + 32);
          }
          int v42 = *(_DWORD *)v14;
          uint64_t v17 = *((void *)v14 + 1);
          uint64_t v43 = v17;
          if (v17) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 48), 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v44, (_DWORD *)v14 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v45, (_DWORD *)v14 + 5);
          uint64_t v18 = *((void *)v14 + 3);
          uint64_t v46 = v18;
          if ((v18 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v46 &= 0xFFFFFFFFFFFFFFF8;
          }
          pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v55);
          realityio::TextureBuilder::getUniformInputValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(&__str, &v42, (uint64_t)&v55);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v55.__r_.__value_.__l.__data_);
          }
          if ((v46 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44);
          if (v43) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v43);
          }
          pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v55);
          std::string::basic_string[abi:ne180100]<0>(&v57, "");
          int v58 = 0;
          int v59 = realityio::TextureSwizzleChannels::kDefault;
          LOBYTE(v60) = 2;
          int v61 = 0;
          __int16 v62 = 512;
          std::string::basic_string[abi:ne180100]<0>(&v63, "");
          std::string::operator=(&v55, &__str);
          std::string::operator=(&__p, &v70);
          ColorSpace = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace((uint64_t *)&v50, v14);
          if ((v50.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t EmptyString = (const std::string *)((v50.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else {
            unint64_t EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ColorSpace);
          }
          std::string::operator=(&v57, EmptyString);
          if ((v50.__r_.__value_.__s.__data_[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v50.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          int v58 = TextureSemanticFromInfoID;
          pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData(&v41, v14);
          std::string::basic_string[abi:ne180100]<0>(&v50, "downsampleFactor");
          uint64_t ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
          std::string v22 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v50.__r_.__value_.__l.__data_);
            if (!v22)
            {
LABEL_47:
              if (v58 && v58 != 6)
              {
                uint64_t v23 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::find<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)a4);
                if (v38 != v23) {
                  goto LABEL_55;
                }
                int v48 = 0;
                uint64_t v49 = 0;
                uint64_t v47 = &v48;
                std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,std::set<realityio::TextureImportOperationSettings>,0>(&v50, (long long *)&__str, (std::string::size_type *)&v47);
                uint64_t v24 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>>((uint64_t)a4, (uint64_t)&v50, (uint64_t)&v50);
                char v35 = v25;
                uint64_t v23 = (uint64_t **)v24;
                std::__tree<realityio::TextureImportOperationSettings>::destroy((uint64_t)&v53, v54);
                if (v52 < 0) {
                  operator delete(v51);
                }
                if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v50.__r_.__value_.__l.__data_);
                }
                std::__tree<realityio::TextureImportOperationSettings>::destroy((uint64_t)&v47, v48);
                if (v35)
                {
LABEL_55:
                  if (v23 != v38) {
                    std::__tree<realityio::TextureImportOperationSettings>::__emplace_unique_key_args<realityio::TextureImportOperationSettings,realityio::TextureImportOperationSettings const&>(v23 + 10, (uint64_t)&v55, (const realityio::TextureImportOperationSettings *)&v55);
                  }
                }
              }
              std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v41, 0);
              if (v64 < 0) {
                operator delete(v63);
              }
              if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v57.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v55.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v70.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              goto LABEL_69;
            }
          }
          else if (!ValueAtPath)
          {
            goto LABEL_47;
          }
          int v61 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(v22);
          goto LABEL_47;
        }
LABEL_116:
        v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
      }
      goto LABEL_117;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v75, &v55);
    realityio::internal::TexturePrimToMaterialPrimMap::materialPathsUsingTexture((realityio::internal::TexturePrimToMaterialPrimMap *)&v71, a3, &v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
    if (v72 != v71)
    {
      uint64_t v26 = 0;
      if ((unint64_t)((v72 - v71) >> 3) <= 1) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = (v72 - v71) >> 3;
      }
      do
      {
        char v28 = v71;
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v55, &v76, &v77);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v55, &v50);
        char v29 = (unsigned __int8 **)realityio::internal::TexturePrimToMaterialPrimMap::connectionsBetweenTextureAndMaterial(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)((char *)v28 + v26));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
        if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55.__r_.__value_.__r.__words[2]);
        if (v55.__r_.__value_.__l.__size_) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v55.__r_.__value_.__l.__size_);
        }
        if (!v29) {
          char v29 = (unsigned __int8 **)v97;
        }
        unint64_t v30 = atomic_load(&realityio::tokens::TextureBuilderTokens);
        if (!v30) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v65, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v74, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v30 + 40));
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v55);
        realityio::TextureBuilder::getUniformInputValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(&__str, (int *)&v65, (uint64_t)&v55);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        if ((v68 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
        if (v66) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v66);
        }
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v55);
        char v31 = pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==((unsigned __int8 *)&__str, (unsigned __int8 *)&v55);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v55.__r_.__value_.__l.__data_);
          if ((v31 & 1) == 0)
          {
LABEL_96:
            if (v55.__r_.__value_.__s.__data_[0] && v60 && v60 != 6)
            {
              uint64_t v32 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::find<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)a4);
              if (v38 != v32) {
                goto LABEL_105;
              }
              int v48 = 0;
              uint64_t v49 = 0;
              uint64_t v47 = &v48;
              std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,std::set<realityio::TextureImportOperationSettings>,0>(&v50, (long long *)&__str, (std::string::size_type *)&v47);
              uint64_t v32 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>>((uint64_t)a4, (uint64_t)&v50, (uint64_t)&v50);
              char v34 = v33;
              std::__tree<realityio::TextureImportOperationSettings>::destroy((uint64_t)&v53, v54);
              if (v52 < 0) {
                operator delete(v51);
              }
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v50.__r_.__value_.__l.__data_);
              }
              std::__tree<realityio::TextureImportOperationSettings>::destroy((uint64_t)&v47, v48);
              if (v34)
              {
LABEL_105:
                if (v32 != v38) {
                  std::__tree<realityio::TextureImportOperationSettings>::__emplace_unique_key_args<realityio::TextureImportOperationSettings,realityio::TextureImportOperationSettings const&>(v32 + 10, (uint64_t)&v55.__r_.__value_.__l.__size_, (const realityio::TextureImportOperationSettings *)&v55.__r_.__value_.__r.__words[1]);
                }
              }
            }
            realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result((uint64_t)&v55);
          }
        }
        else if ((v31 & 1) == 0)
        {
          goto LABEL_96;
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        v26 += 8;
        --v27;
      }
      while (v27);
    }
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
LABEL_117:
    if ((v73 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    MEMORY[0x2455CECB0](v74);
LABEL_120:
    if ((v78 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v77);
    if (v76) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v76);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v83);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v80);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v84);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v93);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v88);
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
}

void sub_23F667FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a54);
  a54 = (void *)(v54 - 112);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy(a31, *(void **)(a31 + 8));
  _Unwind_Resume(a1);
}

uint64_t realityio::TextureBuilder::gatherTextureInfo(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&,REServiceLocator *,BOOL,std::string const&,std::function<void ()(RETextureImportOperation0 *,char const*,char const*)>)::$_0::operator()(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v13);
  uint64_t String = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
  std::string::operator=((std::string *)(v5 + 64), String);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v27[0] = MEMORY[0x263F906F0] + 16;
  unint64_t v8 = atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((v26 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v10 = *a1;
    uint64_t v11 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)a1[1]);
    uint64_t v12 = a1[2];
    std::string v22 = (void *)v11;
    uint64_t v23 = v27;
    uint64_t v24 = v12;
    uint64_t v13 = &unk_26F340C40;
    uint64_t v25 = v10;
    goto LABEL_7;
  }
  if (realityio::TextureBuilder::isMtlxImageShader(a2, v7))
  {
    uint64_t v9 = *a1;
    std::string v22 = v27;
    uint64_t v23 = &v26;
    uint64_t v13 = &unk_26F340C88;
    uint64_t v24 = v9;
    MtlxImageShaderProcess::process((MtlxImageShaderProcess *)&v13);
LABEL_7:
    if (v21 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return MEMORY[0x2455CECB0](v27);
}

void sub_23F66848C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  UsdInfoGatherer::~UsdInfoGatherer(&a9);
  uint64_t v11 = *(void *)(v9 - 80);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CECB0](v9 - 72);
  _Unwind_Resume(a1);
}

uint64_t realityio::TextureBuilder::createStandaloneTextureAssetData@<X0>(const void **a1@<X1>, realityio::TextureImportOperationSettings *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v23 = *a1;
  if (v23) {
    CFRetain(v23);
  }
  realityio::createRETextureImportOperation(ServiceLocator, (uint64_t)a2, 0, (uint64_t)v24);
  std::string::size_type v7 = realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v23);
  if (v24[0])
  {
    realityio::TextureImportOperationSettings::makeTextureResourceKey(a2, &v19);
    RETextureImportOperationSetAssetResourceName();
    uint64_t v18 = 0;
    uint64_t AssetData = RETextureImportOperationCreateAssetData();
    if (AssetData)
    {
      if (*((unsigned char *)a2 + 80) == 5)
      {
      }
      else
      {
        *(void *)long long buf = 0;
        *(unsigned char *)a3 = 1;
        *(void *)(a3 + 8) = AssetData;
        __p[0] = 0;
        realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(__p);
        realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(buf);
      }
    }
    else
    {
      uint64_t v12 = v18;
      std::string::basic_string[abi:ne180100]<0>(__p, "Error running import operation");
      uint64_t v13 = std::system_category();
      realityio::DetailedError::makeFromCFError(v12, (uint64_t)__p, (uint64_t)v13, buf);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      uint64_t v14 = v22;
      *(void *)(a3 + 24) = v21;
      *(void *)(a3 + 32) = v14;
      *(void *)(a3 + 39) = *(void *)((char *)&v22 + 7);
      LOBYTE(v14) = HIBYTE(v22);
      long long v22 = 0uLL;
      uint64_t v21 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v14;
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(realityio::logObjects((realityio *)v7) + 24);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_23F4EA000, v9, OS_LOG_TYPE_DEFAULT, "Could not create textureImportOperation", buf, 2u);
    }
    uint64_t v10 = std::system_category();
    std::string::basic_string[abi:ne180100]<0>(&v19, "Could not create textureImportOperation");
    realityio::DetailedError::DetailedError(buf, 0, (uint64_t)v10, (long long *)&v19);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    uint64_t v11 = v22;
    *(void *)(a3 + 24) = v21;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v22 + 7);
    LOBYTE(v11) = HIBYTE(v22);
    long long v22 = 0uLL;
    uint64_t v21 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result((uint64_t)v24);
}

void sub_23F668714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result(v22 - 80);
  _Unwind_Resume(a1);
}

void anonymous namespace'::createCubeMapTextureAssetData(uint64_t a1, uint64_t a2)
{
  v15[2] = *MEMORY[0x263EF8340];
  uint64_t v14 = 0;
  MEMORY[0x2455CDC60](a2);
  uint64_t v3 = RECreateCubeTextureDataFromLatLong();
  RERelease();
  if (v3)
  {
    *(void *)&long long v11 = 0;
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 8) = v3;
    __p[0] = 0;
    realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(__p);
    realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(&v11);
  }
  else
  {
    uint64_t v4 = v14;
    std::string::basic_string[abi:ne180100]<0>(__p, "Error creating cube map from imported texture");
    uint64_t v5 = std::system_category();
    realityio::DetailedError::makeFromCFError(v4, (uint64_t)__p, (uint64_t)v5, &v11);
    *(_OWORD *)(a1 + 8) = v11;
    uint64_t v6 = v12;
    v15[0] = v13;
    *(void *)((char *)v15 + 7) = *(void *)((char *)&v13 + 7);
    char v7 = HIBYTE(v13);
    long long v13 = 0uLL;
    uint64_t v12 = 0;
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 39) = *(void *)((char *)v15 + 7);
    uint64_t v8 = v15[0];
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v8;
    *(unsigned char *)(a1 + 47) = v7;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F6688A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::TextureBuilder::createStandardTextureAsset(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string::size_type *a5@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v24 = v25;
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 16);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v15 = *(std::string *)a3;
  }
  if (*(char *)(a3 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else {
    std::string v16 = *(std::string *)(a3 + 24);
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v17);
  std::string::basic_string[abi:ne180100]<0>(&v19, "");
  LODWORD(v20) = 0;
  DWORD1(v20) = realityio::TextureSwizzleChannels::kDefault;
  BYTE8(v20) = 2;
  HIDWORD(v20) = 0;
  __int16 v21 = 512;
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  uint64_t v23 = &v24;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40808, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40808))
  {
    qword_268C40828 = 0;
    unk_268C40830 = 0;
    qword_268C40838 = 0;
    __cxa_guard_release(&qword_268C40808);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v26, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string v26 = v15;
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v16;
  }
  *(_DWORD *)long long buf = 3;
  *(void *)&v35[4] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v37 = 0;
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  if (*(void *)&v35[4]) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v35[4]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v28.__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(&v17, (const std::string *)&v28.__r_.__value_.__r.__words[1]);
    std::string::operator=(&v18, &v29);
    std::string::operator=(&v19, &v30);
    long long v20 = v31;
    __int16 v21 = v32;
    std::string::operator=(&v22, &v33);
  }
  realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result((uint64_t)&v28);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  BYTE8(v20) = *(unsigned char *)(a4 + 80);
  LODWORD(v20) = *(_DWORD *)(a4 + 72);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26F340BD0;
  v26.__r_.__value_.__l.__size_ = a1;
  if (v28.__r_.__value_.__s.__data_[0])
  {
    std::string::size_type size = v28.__r_.__value_.__l.__size_;
    *a5 = v28.__r_.__value_.__l.__size_;
    if (size) {
      RERetain();
    }
  }
  else
  {
    long long v13 = *(id *)(realityio::logObjects(v11) + 24);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      std::error_code::message(&v26, (const std::error_code *)&v28.__r_.__value_.__r.__words[1]);
      uint64_t v14 = (v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v26
          : (std::string *)v26.__r_.__value_.__r.__words[0];
      *(_DWORD *)long long buf = 136315138;
      *(void *)char v35 = v14;
      _os_log_impl(&dword_23F4EA000, v13, OS_LOG_TYPE_DEFAULT, "Could not create standard asset: %s", buf, 0xCu);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
    }

    *a5 = 0;
  }
  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&v28);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)&v24, v25[0]);
}

void sub_23F668D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::TextureBuilder::createStandaloneTextureAsset(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, std::string::size_type *a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  v21[0] = 0;
  v21[1] = 0;
  long long v20 = v21;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::operator=(&v14, a2);
  std::string::operator=(&v15, a2 + 1);
  std::string::operator=(&v16, (const std::string *)a3);
  int v17 = *(_DWORD *)(a3 + 24);
  if (__p[0].__r_.__value_.__s.__data_[0])
  {
    std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
    *a4 = __p[0].__r_.__value_.__l.__size_;
    if (size) {
      RERetain();
    }
  }
  else
  {
    uint64_t v10 = *(id *)(realityio::logObjects(v8) + 24);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      std::error_code::message(&v12, (const std::error_code *)&__p[0].__r_.__value_.__r.__words[1]);
      long long v11 = (v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v12
          : (std::string *)v12.__r_.__value_.__r.__words[0];
      *(_DWORD *)long long buf = 136315138;
      uint64_t v23 = v11;
      _os_log_impl(&dword_23F4EA000, v10, OS_LOG_TYPE_DEFAULT, "Could not create standard asset: %s", buf, 0xCu);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
    }

    *a4 = 0;
  }
  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)__p);
  if (v19 < 0) {
    operator delete(v18);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)&v20, v21[0]);
}

void sub_23F669058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::createTextureAsset(std::string *a1, uint64_t a2, realityio::TextureImportOperationSettings *this)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  realityio::TextureImportOperationSettings::makeTextureResourceKey(this, &v42);
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a2 + 16))(&v49, a2);
  if (v50.__r_.__value_.__s.__data_[7] >= 0) {
    uint64_t v6 = v50.__r_.__value_.__s.__data_[7];
  }
  else {
    uint64_t v6 = *((void *)&v49 + 1);
  }
  if (v51 < 0)
  {
    operator delete((void *)v50.__r_.__value_.__l.__size_);
    if ((v50.__r_.__value_.__s.__data_[7] & 0x80) == 0) {
      goto LABEL_6;
    }
  }
  else if ((v50.__r_.__value_.__s.__data_[7] & 0x80) == 0)
  {
    goto LABEL_6;
  }
  operator delete((void *)v49);
LABEL_6:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(void *)a2 + 8))(&v41, a2, &v42);
  uint64_t v40 = 0;
  std::string::size_type v7 = v41;
  if (v41)
  {
    RERetain();
    a1->__r_.__value_.__s.__data_[0] = 1;
    a1->__r_.__value_.__l.__size_ = v7;
    *(void *)&long long v49 = 0;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v49);
    goto LABEL_86;
  }
  realityio::TextureImportOperationSettings::makeTextureResourceKey(this, &v55);
  long long v54 = 0uLL;
  long long v53 = 0uLL;
  CFDataRef v52 = 0;
  uint64_t v9 = *((unsigned __int8 *)this + 47);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *((void *)this + 4);
  }
  if (!v9)
  {
    if (*((char *)this + 23) >= 0) {
      std::string v12 = (char *)this;
    }
    else {
      std::string v12 = *(char **)this;
    }
    std::string::basic_string[abi:ne180100]<0>(&v49, v12);
    (*(void (**)(void **__return_ptr, uint64_t, long long *))(*(void *)a2 + 48))(v46, a2, &v49);
    CFDataRef v13 = v52;
    if (v52 != v46[0])
    {
      CFDataRef v52 = (CFDataRef)v46[0];
      v46[0] = v13;
    }
    realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)v46);
    if ((v50.__r_.__value_.__s.__data_[7] & 0x80000000) == 0) {
      goto LABEL_42;
    }
    std::string v14 = (void *)v49;
    goto LABEL_41;
  }
  pxrInternal__aapl__pxrReserved__::ArGetResolver(v8);
  Extension = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
  long long v11 = (void *)v47[7];
  if (v47[7] < 0) {
    long long v11 = v46[1];
  }
  if (!v11)
  {
    std::string v15 = std::system_category();
    std::string::basic_string[abi:ne180100]<0>(&v56, "Missing extension.");
    goto LABEL_54;
  }
  pxrInternal__aapl__pxrReserved__::ArGetResolver(Extension);
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v49, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    long long v49 = *(_OWORD *)((char *)this + 24);
    v50.__r_.__value_.__r.__words[0] = *((void *)this + 5);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
  long long v16 = v56;
  long long v56 = 0uLL;
  int v17 = (std::__shared_weak_count *)*((void *)&v54 + 1);
  long long v54 = v16;
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    if (*((void *)&v56 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v56 + 1));
    }
  }
  if (v50.__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)v49);
  }
  if (!(void)v54)
  {
    std::string v15 = std::system_category();
    std::string::basic_string[abi:ne180100]<0>(&v56, "Could not retrieve asset path");
    goto LABEL_54;
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v54 + 24))(&v49);
  long long v18 = v49;
  long long v49 = 0uLL;
  char v19 = (std::__shared_weak_count *)*((void *)&v53 + 1);
  long long v53 = v18;
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (*((void *)&v49 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v49 + 1));
    }
    long long v20 = (const UInt8 *)v53;
    if ((void)v53) {
      goto LABEL_37;
    }
    goto LABEL_53;
  }
  long long v20 = (const UInt8 *)v18;
  if (!(void)v18)
  {
LABEL_53:
    std::string v15 = std::system_category();
    std::string::basic_string[abi:ne180100]<0>(&v56, "Could not get asset buffer");
LABEL_54:
    realityio::DetailedError::DetailedError(&v49, 0, (uint64_t)v15, &v56);
    long long v38 = v49;
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
    *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v50.__r_.__value_.__r.__words[1] + 7);
    char v29 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    memset(&v50, 0, sizeof(v50));
    v37[0] = 0;
    *((unsigned char *)&v39.__r_.__value_.__s + 23) = v29;
    if (v57 < 0) {
      operator delete((void *)v56);
    }
    goto LABEL_56;
  }
LABEL_37:
  CFIndex v21 = (*(uint64_t (**)(void))(*(void *)v54 + 16))(v54);
  CFDataRef v22 = CFDataCreateWithBytesNoCopy(0, v20, v21, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if (v52) {
    CFRelease(v52);
  }
  CFDataRef v52 = v22;
  if ((v47[7] & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string v14 = v46[0];
LABEL_41:
  operator delete(v14);
LABEL_42:
  if (v52)
  {
    uint64_t v23 = operator new(0x20uLL);
    *uint64_t v23 = &unk_26F340CB8;
    v23[1] = &v53;
    v23[2] = &v54;
    v23[3] = &v52;
    int v58 = v23;
    (**(void (***)(uint64_t))a2)(a2);
    uint64_t ServiceLocator = REEngineGetServiceLocator();
    CFDataRef v48 = v52;
    if (v52) {
      CFRetain(v52);
    }
    realityio::createRETextureImportOperation(ServiceLocator, (uint64_t)this, (uint64_t)&v56, (uint64_t)&v49);
    realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&v48);
    if ((_BYTE)v49)
    {
      RETextureImportOperationSetAssetResourceName();
      uint64_t v43 = 0;
      uint64_t AssetData = RETextureImportOperationCreateAssetData();
      if (AssetData)
      {
        if (*((unsigned char *)this + 80) == 5)
        {
        }
        else
        {
          v46[0] = 0;
          v37[0] = 1;
          *(void *)&long long v38 = AssetData;
          v44[0] = 0;
          realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(v44);
          realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(v46);
        }
LABEL_62:
        realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result((uint64_t)&v49);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v56);
        goto LABEL_63;
      }
      uint64_t v30 = v43;
      std::string::basic_string[abi:ne180100]<0>(v44, "Error running import operation");
      long long v31 = std::system_category();
      realityio::DetailedError::makeFromCFError(v30, (uint64_t)v44, (uint64_t)v31, v46);
    }
    else
    {
      std::string v28 = std::system_category();
      std::string::basic_string[abi:ne180100]<0>(v44, "Could not instantiate import operation");
      realityio::DetailedError::DetailedError(v46, 0, (uint64_t)v28, (long long *)v44);
    }
    long long v38 = *(_OWORD *)v46;
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)v47;
    *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[1] + 7) = *(void *)&v47[15];
    char v32 = v47[23];
    memset(v47, 0, sizeof(v47));
    v37[0] = 0;
    *((unsigned char *)&v39.__r_.__value_.__s + 23) = v32;
    if (v45 < 0) {
      operator delete(v44[0]);
    }
    goto LABEL_62;
  }
  std::string v26 = std::system_category();
  std::string::basic_string[abi:ne180100]<0>(v46, "Could not retrieve texture data");
  realityio::DetailedError::DetailedError(&v49, 0, (uint64_t)v26, (long long *)v46);
  long long v38 = v49;
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
  *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v50.__r_.__value_.__r.__words[1] + 7);
  char v27 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  memset(&v50, 0, sizeof(v50));
  v37[0] = 0;
  *((unsigned char *)&v39.__r_.__value_.__s + 23) = v27;
LABEL_56:
  if ((v47[7] & 0x80000000) != 0) {
    operator delete(v46[0]);
  }
LABEL_63:
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&v52);
  if (*((void *)&v53 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53 + 1));
  }
  if (*((void *)&v54 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v54 + 1));
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (!v37[0])
  {
    long long v49 = v38;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v50, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
    }
    else {
      std::string v50 = v39;
    }
    a1->__r_.__value_.__s.__data_[0] = 0;
    *(_OWORD *)&a1->__r_.__value_.__r.__words[1] = v49;
    a1[1] = v50;
    goto LABEL_85;
  }
  (**(void (***)(uint64_t))a2)(a2);
  uint64_t v33 = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](v33);
  if (v6)
  {
    uint64_t v34 = REMemoryAssetParametersCreate();
    if (v40) {
      RERelease();
    }
    uint64_t v40 = v34;
    REMemoryAssetParametersSetAsyncRegistration();
    REMemoryAssetParametersSetAssetName();
    uint64_t TextureAssetFromDataWithParameters = REAssetManagerCreateTextureAssetFromDataWithParameters();
    if (!v41) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  uint64_t TextureAssetFromDataWithParameters = REAssetManagerCreateTextureAssetFromDataAsync();
  if (v41) {
LABEL_78:
  }
    RERelease();
LABEL_79:
  uint64_t v41 = TextureAssetFromDataWithParameters;
  if (TextureAssetFromDataWithParameters)
  {
    (*(void (**)(uint64_t, std::string *, uint64_t *))(*(void *)a2 + 24))(a2, &v42, &v41);
    (*(void (**)(uint64_t, char *, realityio::TextureImportOperationSettings *))(*(void *)a2 + 32))(a2, (char *)this + 24, this);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 40))(a2, &v41);
    REAssetSetMetadataString();
    std::string::size_type v36 = v41;
  }
  else
  {
    std::string::size_type v36 = 0;
  }
  uint64_t v41 = 0;
  a1->__r_.__value_.__s.__data_[0] = 1;
  a1->__r_.__value_.__l.__size_ = v36;
  *(void *)&long long v49 = 0;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v49);
LABEL_85:
  realityio::Result<realityio::WrappedRERef<RETextureAssetData *>,realityio::DetailedError>::~Result((uint64_t)v37);
LABEL_86:
  realityio::WrappedRERef<REMemoryAssetParameters *>::~WrappedRERef(&v40);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v41);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
}

void sub_23F66996C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result((uint64_t)&a40);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v45 - 112));
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)(v45 - 184));
  uint64_t v47 = *(std::__shared_weak_count **)(v45 - 168);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  CFDataRef v48 = *(std::__shared_weak_count **)(v45 - 152);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (*(char *)(v45 - 113) < 0) {
    operator delete(*(void **)(v45 - 136));
  }
  realityio::WrappedRERef<REMemoryAssetParameters *>::~WrappedRERef(&a16);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a17);
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

unint64_t *realityio::internal::TexturePrimToMaterialPrimMap::materialPathsUsingTexture(realityio::internal::TexturePrimToMaterialPrimMap *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, void *a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2, a3);
  uint64_t v6 = result;
  if ((unint64_t *)((char *)a2 + 8) != result)
  {
    uint64_t result = (unint64_t *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::reserve((uint64_t *)this, result[7]);
    std::string::size_type v7 = (unint64_t *)v6[5];
    uint64_t v8 = v6 + 6;
    if (v7 != v6 + 6)
    {
      uint64_t v9 = (unint64_t *)*((void *)this + 1);
      do
      {
        uint64_t v10 = v7 + 4;
        if ((unint64_t)v9 >= *((void *)this + 2))
        {
          uint64_t result = (unint64_t *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)this, v10);
          uint64_t v9 = result;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9, v10);
          uint64_t result = (unint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9++ + 1, (_DWORD *)v7 + 9);
        }
        *((void *)this + 1) = v9;
        long long v11 = (unint64_t *)v7[1];
        if (v11)
        {
          do
          {
            std::string v12 = v11;
            long long v11 = (unint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            std::string v12 = (unint64_t *)v7[2];
            BOOL v13 = *v12 == (void)v7;
            std::string::size_type v7 = v12;
          }
          while (!v13);
        }
        std::string::size_type v7 = v12;
      }
      while (v12 != v8);
    }
  }
  return result;
}

void sub_23F669BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *realityio::internal::TexturePrimToMaterialPrimMap::connectionsBetweenTextureAndMaterial(realityio::internal::TexturePrimToMaterialPrimMap *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v5 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this, a2);
  if ((void *)((char *)this + 8) == v5) {
    return 0;
  }
  uint64_t v6 = v5 + 6;
  std::string::size_type v7 = (void *)v5[6];
  if (!v7) {
    goto LABEL_9;
  }
  uint64_t v8 = v5 + 6;
  do
  {
    int v9 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v7 + 4, a3);
    uint64_t v10 = v7 + 1;
    if (!v9)
    {
      uint64_t v10 = v7;
      uint64_t v8 = v7;
    }
    std::string::size_type v7 = (void *)*v10;
  }
  while (*v10);
  if (v8 == v6 || pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, v8 + 4)) {
LABEL_9:
  }
    uint64_t v8 = v6;
  if (v6 == v8) {
    return 0;
  }
  else {
    return v8 + 5;
  }
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void realityio::TextureBuilder::~TextureBuilder(id *this)
{
  realityio::TextureBuilder::~TextureBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  *this = &unk_26F340A80;
  realityio::TextureBuilder::TextureDataT::~TextureDataT(this + 35);
  *this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 27);
  int v2 = (std::__shared_weak_count *)this[26];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (unint64_t)this[24];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = (unint64_t)this[23];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder((realityio::Builder *)this);
}

std::string *realityio::TextureImportOperationSettings::TextureImportOperationSettings(std::string *this, const realityio::TextureImportOperationSettings *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  long long v8 = *(_OWORD *)((char *)a2 + 72);
  LOWORD(this[3].__r_.__value_.__r.__words[2]) = *((_WORD *)a2 + 44);
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v8;
  int v9 = this + 4;
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_23F669DF0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__move_assign(uint64_t a1, void *a2)
{
  long long v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *long long v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void realityio::TextureBuilder::TextureDataT::~TextureDataT(id *this)
{
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)(this + 2), this[3]);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void anonymous namespace'::UsdUVTextureOutput::multipleMaterialStart(_anonymous_namespace_::UsdUVTextureOutput *this)
{
  uint64_t v1 = (void *)((char *)this + 192);
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
}

uint64_t anonymous namespace'::UsdUVTextureOutput::multipleMaterialInstance(_anonymous_namespace_::UsdUVTextureOutput *this)
{
  std::string::size_type v2 = *((void *)this + 22);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26F340BD0;
  __p.__r_.__value_.__l.__size_ = v2;
  if (v10.__r_.__value_.__s.__data_[0])
  {
    uint64_t v3 = (long long **)*((void *)this + 20);
    long long v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      uint64_t v6 = (uint64_t **)((char *)this + 184);
      do
      {
        std::pair<std::string,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100]<std::string const&,realityio::WrappedRERef<REAsset *>&,0>(&__p, v4, &v10.__r_.__value_.__l.__size_);
        std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::WrappedRERef<REAsset *>>>(v6, (const void **)&__p.__r_.__value_.__l.__data_, (long long *)&__p);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v9);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v4 += 3;
      }
      while (v4 != v5);
    }
  }
  return realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&v10);
}

void sub_23F66A014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void anonymous namespace'::UsdUVTextureOutput::multipleMaterialEnd(_anonymous_namespace_::UsdUVTextureOutput *this)
{
}

uint64_t anonymous namespace'::UsdUVTextureOutput::singleMaterialInstance(_anonymous_namespace_::UsdUVTextureOutput *this)
{
  uint64_t v2 = *((void *)this + 22);
  uint64_t v24 = &unk_26F340BD0;
  uint64_t v25 = v2;
  if (v16[0].__r_.__value_.__s.__data_[0])
  {
    long long v4 = (uint64_t *)*((void *)this + 21);
    v6 = uint64_t v5 = (_anonymous_namespace_ *)*((void *)this + 18);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
    uint64_t v7 = (void *)pxrInternal__aapl__pxrReserved__::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"_texture_", 9);
    std::string::size_type size = v16[0].__r_.__value_.__l.__size_;
    if (v16[0].__r_.__value_.__l.__size_) {
      RERetain();
    }
    std::stringbuf::str();
    if (SHIBYTE(v21) >= 0) {
      long long v8 = __p;
    }
    else {
      long long v8 = (void **)__p[0];
    }
    realityio::Builder::addAsset(v4, (uint64_t *)&size, (uint64_t)v8);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&size);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(v5, &v18);
    std::string::size_type v17 = v16[0].__r_.__value_.__l.__size_;
    if (v16[0].__r_.__value_.__l.__size_) {
      RERetain();
    }
    id v9 = v6;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, &v18);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)__p + 1, &v19);
    v22[0] = 0;
    v22[1] = 0;
    __p[1] = 0;
    CFIndex v21 = v22;
    std::string v10 = v4 + 35;
    v22[2] = v9;
    realityio::TextureBuilder::TextureDataT::operator=((uint64_t)(v4 + 35), (uint64_t)__p);
    realityio::TextureBuilder::TextureDataT::~TextureDataT(__p);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    long long v11 = (realityio::TextureBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
    uint64_t v13 = v4[2];
    std::string v12 = (std::__shared_weak_count *)v4[3];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v14 = (long long *)realityio::TextureBuilder::kOutputName(v11);
    __p[0] = v10;
    realityio::Outputs::storeValue<realityio::TextureBuilder::TextureDataT *>(v13, v14, (uint64_t *)__p);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    uint64_t v24 = (void *)*MEMORY[0x263F8C2C8];
    *(void **)((char *)&v24 + *(v24 - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v25 = MEMORY[0x263F8C318] + 16;
    if (v27 < 0) {
      operator delete(v26);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2455D2B30](&v28);
  }
  return realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)v16);
}

void sub_23F66A304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a17);
  std::ostringstream::~ostringstream((uint64_t)&a31);

  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::TextureAssetInstance::TextureAssetInstance(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)a1);
  std::string::basic_string[abi:ne180100]<0>((void *)(v6 + 48), "");
  int v7 = realityio::TextureSwizzleChannels::kDefault;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = v7;
  *(unsigned char *)(a1 + 80) = 2;
  *(_DWORD *)(a1 + 84) = 0;
  *(_WORD *)(a1 + 88) = 512;
  long long v8 = (std::string *)std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 96), "");
  *(void *)(a1 + 120) = a3;
  std::string::operator=(v8, a2);
  return a1;
}

void sub_23F66A430(_Unwind_Exception *a1)
{
  realityio::TextureImportOperationSettings::~TextureImportOperationSettings(v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100]<std::string const&,realityio::WrappedRERef<REAsset *>&,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = *a3;
  this[1].__r_.__value_.__r.__words[0] = *a3;
  if (v6) {
    RERetain();
  }
  return this;
}

void sub_23F66A4F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 3);
  this[1].__r_.__value_.__r.__words[0] = v5;
  if (v5) {
    RERetain();
  }
  return this;
}

void sub_23F66A56C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::getSamplerAddressMode(_anonymous_namespace_ *this, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    uint64_t v3 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  return 2;
}

void sub_23F66A790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::TextureBuilder::TextureDataT::TextureDataT(uint64_t a1, _DWORD *a2, void *a3, void *a4)
{
  id v7 = a4;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 4), a2 + 1);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = *a3;
  id v9 = a3 + 1;
  uint64_t v8 = a3[1];
  *(void *)(a1 + 24) = v8;
  uint64_t v10 = a1 + 24;
  uint64_t v11 = a3[2];
  *(void *)(a1 + 32) = v11;
  if (v11)
  {
    std::string v12 = 0;
    *(void *)(v8 + 16) = v10;
    *a3 = v9;
    void *v9 = 0;
    a3[2] = 0;
  }
  else
  {
    *(void *)(a1 + 16) = v10;
    std::string v12 = (void *)*v9;
  }
  *(void *)(a1 + 40) = v7;
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)a3, v12);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = v9;
  return a1;
}

void anonymous namespace'::makeImportSettingsForAsset(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::UsdObject *a5, unsigned __int8 **a6)
{
  uint64_t v168 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v147);
  std::string::basic_string[abi:ne180100]<0>(&v149, "");
  LODWORD(v150) = 0;
  DWORD1(v150) = realityio::TextureSwizzleChannels::kDefault;
  BYTE8(v150) = 2;
  HIDWORD(v150) = 0;
  __int16 v151 = 512;
  std::string::basic_string[abi:ne180100]<0>(&v152, "");
  v140 = a6;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a3))
  {
    LODWORD(v164) = *(_DWORD *)a3;
    uint64_t v12 = *(void *)(a3 + 8);
    *((void *)&v164 + 1) = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v165, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v166, (_DWORD *)(a3 + 20));
    uint64_t v13 = *(void *)(a3 + 24);
    uint64_t v167 = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v167 &= 0xFFFFFFFFFFFFFFF8;
    }
    if (*(char *)(a4 + 23) < 0)
    {
      if (*(void *)(a4 + 8)) {
        goto LABEL_44;
      }
    }
    else if (*(unsigned char *)(a4 + 23))
    {
      goto LABEL_44;
    }
    realityio::findOriginalSourceAttribute((realityio *)a3, (uint64_t)&v158);
    LODWORD(v164) = v158.__r_.__value_.__l.__data_;
    std::string::size_type size = v158.__r_.__value_.__l.__size_;
    v158.__r_.__value_.__l.__size_ = 0;
    uint64_t v19 = *((void *)&v164 + 1);
    *((void *)&v164 + 1) = size;
    if (v19) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v165, (int *)&v158.__r_.__value_.__r.__words[2]);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v166);
    if ((v167 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v167 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v167 = v159;
    *(void *)&long long v159 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v158.__r_.__value_.__r.__words[2]);
    if (v158.__r_.__value_.__l.__size_) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v158.__r_.__value_.__l.__size_);
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&__p, (uint64_t *)&v164 + 1, &v165);
    MEMORY[0x2455CF810](v157, "info:id");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v158, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)v157);
    if ((v157[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v156 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v155);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v158))
    {
      *(void *)v157 = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
    if ((v159 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v159 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v158.__r_.__value_.__r.__words[2]);
    if (v158.__r_.__value_.__l.__size_) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v158.__r_.__value_.__l.__size_);
    }
    LODWORD(v160) = v164;
    *((void *)&v160 + 1) = *((void *)&v164 + 1);
    if (*((void *)&v164 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v164 + 1) + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v161, &v165);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v162, &v166);
    uint64_t v163 = v167;
    if ((v167 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v167 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v163 &= 0xFFFFFFFFFFFFFFF8;
    }
    LODWORD(v164) = v160;
    uint64_t v20 = *((void *)&v160 + 1);
    *((void *)&v160 + 1) = 0;
    uint64_t v21 = *((void *)&v164 + 1);
    *((void *)&v164 + 1) = v20;
    if (v21) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v165, &v161);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v166);
    if ((v167 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v167 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v167 = v163;
    uint64_t v163 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v161);
    if (*((void *)&v160 + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v160 + 1));
    }
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v164, (uint64_t)&v158);
    if (!v158.__r_.__value_.__s.__data_[0])
    {
      char v32 = std::system_category();
      std::string::basic_string[abi:ne180100]<0>(&v160, "Attribute is not an asset path");
      realityio::DetailedError::DetailedError(&__p, 0, (uint64_t)v32, &v160);
      *(_OWORD *)(a1 + 8) = __p;
      uint64_t v33 = v155;
      *(void *)v157 = v156;
      *(void *)&v157[7] = *(void *)((char *)&v156 + 7);
      char v34 = HIBYTE(v156);
      long long v156 = 0uLL;
      uint64_t v155 = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)&v157[7];
      uint64_t v35 = *(void *)v157;
      *(void *)(a1 + 24) = v33;
      *(void *)(a1 + 32) = v35;
      *(unsigned char *)(a1 + 47) = v34;
      if (SHIBYTE(v162) < 0) {
        operator delete((void *)v160);
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&v158);
      goto LABEL_369;
    }
    std::string::operator=((std::string *)a4, (const std::string *)&v158.__r_.__value_.__r.__words[1]);
    std::string::operator=((std::string *)(a4 + 24), (const std::string *)((char *)&v159 + 8));
    realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&v158);
LABEL_44:
    std::string::operator=(&v147, (const std::string *)a4);
    std::string::operator=(&v148, (const std::string *)(a4 + 24));
    std::string::operator=(&v152, a2);
    ColorSpace = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(&v153, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v164);
    if ((v153 & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t EmptyString = (const std::string *)((v153 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      unint64_t EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ColorSpace);
    }
    std::string::operator=(&v149, EmptyString);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData(&v146, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v164);
    std::string::basic_string[abi:ne180100]<0>(&v158, "downsampleFactor");
    uint64_t ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v158.__r_.__value_.__l.__data_);
      if (!v25) {
        goto LABEL_52;
      }
    }
    else if (!ValueAtPath)
    {
LABEL_52:
      std::string::basic_string[abi:ne180100]<0>(&v158, "RealityKit:compression");
      uint64_t v26 = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      char v27 = (pxrInternal__aapl__pxrReserved__::VtValue *)v26;
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v158.__r_.__value_.__l.__data_);
        if (!v27) {
          goto LABEL_72;
        }
      }
      else if (!v26)
      {
        goto LABEL_72;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>(v27))
      {
        uint64_t v28 = pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>(v27);
        if (*(char *)(v28 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)v28, *(void *)(v28 + 8));
        }
        else
        {
          long long v29 = *(_OWORD *)v28;
          v158.__r_.__value_.__r.__words[2] = *(void *)(v28 + 16);
          *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v29;
        }
        MEMORY[0x2455CF830](&__p, &v158);
        realityio::TextureCompression::TextureCompression((realityio::TextureCompression *)&v160, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        HIBYTE(v151) = v160;
        if ((__p & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v158.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        uint64_t v30 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>(v27);
        if ((v30 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v30 &= 0xFFFFFFFFFFFFFFF8;
        }
        long long v31 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>(v27);
        realityio::TextureCompression::TextureCompression((realityio::TextureCompression *)&v158, v31);
        HIBYTE(v151) = v158.__r_.__value_.__s.__data_[0];
        if ((v30 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
LABEL_72:
      LODWORD(v150) = 6;
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a5))
      {
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        {
          if (!v149.__r_.__value_.__l.__size_) {
            goto LABEL_77;
          }
        }
        else if (!*((unsigned char *)&v149.__r_.__value_.__s + 23))
        {
LABEL_77:
          v158.__r_.__value_.__r.__words[0] = 0;
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
        }
      }
      uint64_t v37 = *v140;
      std::string::size_type v36 = v140[1];
      if (v36 != *v140)
      {
        uint64_t v139 = a1;
        unsigned int v38 = realityio::TextureSwizzleChannels::fromOutputSourceName(v37 + 24);
        DWORD1(v150) = v38;
        int v40 = v38;
        int v41 = BYTE1(v38);
        int v42 = BYTE2(v38);
        unsigned int v43 = HIBYTE(v38);
        int v143 = BYTE1(realityio::TextureSwizzleChannels::kDefault);
        int v144 = realityio::TextureSwizzleChannels::kDefault;
        LOBYTE(v151) = shouldRestrictTo8bits;
        int v145 = realityio::TextureSwizzleChannels::kDefault;
        unsigned int v141 = HIBYTE(realityio::TextureSwizzleChannels::kDefault);
        int v142 = BYTE2(realityio::TextureSwizzleChannels::kDefault);
        unsigned int v44 = v150;
        uint64_t v45 = v37;
        while (1)
        {
          int v46 = v45[23];
          if ((char)v45[23] < 0)
          {
            uint64_t v48 = *((void *)v45 + 1);
            if (v48 == 6)
            {
              if (**(_DWORD **)v45 != 1836216174 || *(_WORD *)(*(void *)v45 + 4) != 27745)
              {
LABEL_117:
                int v58 = (char)v45[47];
                if (v58 < 0)
                {
                  if (*((void *)v45 + 4) != 1)
                  {
LABEL_190:
                    unint64_t v52 = 0;
                    int v51 = 6;
                    goto LABEL_191;
                  }
                  uint64_t v59 = (unsigned char *)*((void *)v45 + 3);
                }
                else
                {
                  uint64_t v59 = v45 + 24;
                  if (v58 != 1) {
                    goto LABEL_190;
                  }
                }
                if (*v59 == 114)
                {
                  if ((v46 & 0x80) == 0)
                  {
                    switch(v45[23])
                    {
                      case 7u:
                        int v60 = v45;
                        goto LABEL_185;
                      case 8u:
                        __int16 v62 = *(void **)v45;
                        goto LABEL_130;
                      case 9u:
                        if ((*(void *)v45 != 0x73656E6867756F72 || v45[8] != 115)
                          && (*(void *)v45 != 0x6F6973756C63636FLL || v45[8] != 110)
                          && (*(void *)v45 != 0x616F637261656C63 || v45[8] != 116))
                        {
                          goto LABEL_190;
                        }
                        goto LABEL_203;
                      case 0xDu:
                        if (*(void *)v45 != 0x72616C7563657073 || *(void *)(v45 + 5) != 0x726F6C6F4372616CLL) {
                          goto LABEL_190;
                        }
                        goto LABEL_203;
                      case 0x12u:
                        if (*(void *)v45 != 0x616F637261656C63
                          || *((void *)v45 + 1) != 0x656E6867756F5274
                          || *((_WORD *)v45 + 8) != 29555)
                        {
                          goto LABEL_190;
                        }
                        goto LABEL_203;
                      default:
                        goto LABEL_190;
                    }
                  }
                  uint64_t v61 = *((void *)v45 + 1);
                  switch(v61)
                  {
                    case 7:
                      goto LABEL_184;
                    case 8:
                      __int16 v62 = **(void ***)v45;
LABEL_130:
                      if (v62 != (void *)0x63696C6C6174656DLL) {
                        goto LABEL_190;
                      }
                      goto LABEL_203;
                    case 9:
                      unsigned __int8 v69 = *(void **)v45;
                      if (**(void **)v45 == 0x73656E6867756F72 && *(unsigned char *)(*(void *)v45 + 8) == 115) {
                        goto LABEL_203;
                      }
                      if (*v69 == 0x6F6973756C63636FLL && *((unsigned char *)v69 + 8) == 110) {
                        goto LABEL_203;
                      }
                      uint64_t v72 = *v69;
                      int v73 = *((unsigned __int8 *)v69 + 8);
                      BOOL v74 = v72 == 0x616F637261656C63;
                      int v75 = 116;
                      goto LABEL_186;
                    case 13:
                      if (**(void **)v45 != 0x72616C7563657073
                        || *(void *)(*(void *)v45 + 5) != 0x726F6C6F4372616CLL)
                      {
                        goto LABEL_190;
                      }
                      goto LABEL_203;
                    case 18:
                      if (**(void **)v45 == 0x616F637261656C63
                        && *(void *)(*(void *)v45 + 8) == 0x656E6867756F5274
                        && *(_WORD *)(*(void *)v45 + 16) == 29555)
                      {
                        goto LABEL_203;
                      }
                      if (v61 != 7) {
                        goto LABEL_190;
                      }
LABEL_184:
                      int v60 = *(unsigned __int8 **)v45;
LABEL_185:
                      int v79 = *(_DWORD *)v60;
                      int v73 = *(_DWORD *)(v60 + 3);
                      BOOL v74 = v79 == 1667330159;
                      int v75 = 2037672291;
LABEL_186:
                      if (!v74 || v73 != v75) {
                        goto LABEL_190;
                      }
LABEL_203:
                      int v51 = 2;
                      unint64_t v52 = 1;
                      break;
                    default:
                      goto LABEL_190;
                  }
                  goto LABEL_191;
                }
                goto LABEL_190;
              }
              goto LABEL_111;
            }
            if (v48 != 12)
            {
              if (v48 != 13) {
                goto LABEL_117;
              }
              if (**(void **)v45 != 0x6576697373696D65 || *(void *)(*(void *)v45 + 5) != 0x726F6C6F43657669) {
                goto LABEL_117;
              }
              goto LABEL_99;
            }
            uint64_t v47 = *(unsigned __int8 **)v45;
          }
          else
          {
            if (v46 == 6)
            {
              if (*(_DWORD *)v45 != 1836216174 || *((_WORD *)v45 + 2) != 27745) {
                goto LABEL_117;
              }
LABEL_111:
              int v51 = 5;
              unint64_t v52 = 4;
              goto LABEL_191;
            }
            if (v46 == 13)
            {
              if (*(void *)v45 != 0x6576697373696D65 || *(void *)(v45 + 5) != 0x726F6C6F43657669) {
                goto LABEL_117;
              }
LABEL_99:
              int v51 = 4;
              unint64_t v52 = 2;
              goto LABEL_191;
            }
            uint64_t v47 = v45;
            if (v46 != 12) {
              goto LABEL_117;
            }
          }
          uint64_t v55 = *(void *)v47;
          int v56 = *((_DWORD *)v47 + 2);
          if (v55 != 0x4365737566666964 || v56 != 1919904879) {
            goto LABEL_117;
          }
          int v51 = 3;
          unint64_t v52 = 3;
LABEL_191:
          if (v44 > 5) {
            unint64_t v81 = 0;
          }
          else {
            unint64_t v81 = qword_23F7CB1E0[v44];
          }
          if (v52 > v81)
          {
            LODWORD(v150) = v51;
            unsigned int v44 = v51;
          }
          unsigned int v82 = realityio::TextureSwizzleChannels::fromOutputSourceName(v45 + 24);
          if (v40 != v82 || v41 != BYTE1(v82) || v42 != BYTE2(v82) || v43 != HIBYTE(v82))
          {
            int v40 = v144;
            DWORD1(v150) = v145;
            unsigned int v43 = v141;
            int v42 = v142;
            int v41 = v143;
          }
          v45 += 48;
          if (v45 == v36)
          {
            int v83 = 0;
            a1 = v139;
            while (1)
            {
              if ((char)v37[23] < 0)
              {
                uint64_t v86 = (void *)*((void *)v37 + 1);
                if (v86 == (void *)8)
                {
                  v92 = **(unint64_t ***)v37;
LABEL_232:
                  if (v92 == (unint64_t *)0x63696C6C6174656DLL) {
                    v83 |= 4u;
                  }
                  goto LABEL_245;
                }
                if (v86 == (void *)9)
                {
                  int v93 = *(unint64_t ***)v37;
                  if (**(void **)v37 == 0x73656E6867756F72 && *(unsigned char *)(*(void *)v37 + 8) == 115)
                  {
LABEL_244:
                    v83 |= 8u;
                    goto LABEL_245;
                  }
                  long long v95 = *v93;
                  int v96 = *((unsigned __int8 *)v93 + 8);
                  if (v95 != (unint64_t *)0x6F6973756C63636FLL || v96 != 110) {
                    goto LABEL_245;
                  }
                  goto LABEL_243;
                }
                if (v86 == (void *)13)
                {
                  long long v85 = *(unint64_t **)v37;
LABEL_213:
                  unint64_t v87 = bswap64(*v85);
                  unint64_t v88 = 0x73706563756C6172;
                  if (v87 == 0x73706563756C6172
                    && (unint64_t v87 = bswap64(*(unint64_t *)((char *)v85 + 5)),
                        unint64_t v88 = 0x6C6172436F6C6F72,
                        v87 == 0x6C6172436F6C6F72))
                  {
                    int v89 = 0;
                  }
                  else if (v87 < v88)
                  {
                    int v89 = -1;
                  }
                  else
                  {
                    int v89 = 1;
                  }
                  v83 |= v89 == 0;
                }
              }
              else
              {
                int v84 = v37[23];
                if (v84 == 8)
                {
                  v92 = *(unint64_t **)v37;
                  goto LABEL_232;
                }
                if (v84 == 9)
                {
                  if (*(void *)v37 == 0x73656E6867756F72 && v37[8] == 115) {
                    goto LABEL_244;
                  }
                  if (*(void *)v37 != 0x6F6973756C63636FLL || v37[8] != 110) {
                    goto LABEL_245;
                  }
LABEL_243:
                  v83 |= 2u;
                  goto LABEL_245;
                }
                long long v85 = (unint64_t *)v37;
                if (v84 == 13) {
                  goto LABEL_213;
                }
              }
LABEL_245:
              v37 += 48;
              if (v37 == v36) {
                goto LABEL_248;
              }
            }
          }
        }
      }
      LOBYTE(v83) = 0;
      DWORD1(v150) = realityio::TextureSwizzleChannels::kDefault;
      LOBYTE(v151) = 0;
LABEL_248:
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v83), (int8x16_t)xmmword_23F7CACA0), (int32x4_t)xmmword_23F7CACA0))) & 1) == 0&& (v83 & 5) != 5&& (v83 & 3) != 3)
      {
        goto LABEL_367;
      }
      LOBYTE(v151) = 0;
      LODWORD(v150) = 6;
      std::string::basic_string[abi:ne180100]<0>(&__p, "roughness");
      v98 = *v140;
      v99 = v140[1];
      if (*v140 == v99)
      {
LABEL_271:
        if (v98 != v99)
        {
          if ((char)v98[47] < 0) {
            std::string::__init_copy_ctor_external(&v158, *((const std::string::value_type **)v98 + 3), *((void *)v98 + 4));
          }
          else {
            std::string v158 = *(std::string *)(v98 + 1);
          }
LABEL_276:
          BYTE4(v150) = realityio::TextureSwizzleChannels::channelFromChar((unsigned __int8 *)&v158);
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v158.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v155) < 0) {
            operator delete((void *)__p);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "metallic");
          v105 = *v140;
          v106 = v140[1];
          if (*v140 == v106)
          {
LABEL_300:
            if (v105 != v106)
            {
              if ((char)v105[47] < 0) {
                std::string::__init_copy_ctor_external(&v158, *((const std::string::value_type **)v105 + 3), *((void *)v105 + 4));
              }
              else {
                std::string v158 = *(std::string *)(v105 + 1);
              }
LABEL_305:
              BYTE5(v150) = realityio::TextureSwizzleChannels::channelFromChar((unsigned __int8 *)&v158);
              if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v158.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v155) < 0) {
                operator delete((void *)__p);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "occlusion");
              v112 = *v140;
              v113 = v140[1];
              if (*v140 == v113)
              {
LABEL_329:
                if (v112 != v113)
                {
                  if ((char)v112[47] < 0) {
                    std::string::__init_copy_ctor_external(&v158, *((const std::string::value_type **)v112 + 3), *((void *)v112 + 4));
                  }
                  else {
                    std::string v158 = *(std::string *)(v112 + 1);
                  }
LABEL_334:
                  BYTE6(v150) = realityio::TextureSwizzleChannels::channelFromChar((unsigned __int8 *)&v158);
                  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v158.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v155) < 0) {
                    operator delete((void *)__p);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__p, "specularColor");
                  v119 = *v140;
                  v120 = v140[1];
                  if (*v140 == v120)
                  {
LABEL_358:
                    if (v119 != v120)
                    {
                      if ((char)v119[47] < 0) {
                        std::string::__init_copy_ctor_external(&v158, *((const std::string::value_type **)v119 + 3), *((void *)v119 + 4));
                      }
                      else {
                        std::string v158 = *(std::string *)(v119 + 1);
                      }
                      goto LABEL_363;
                    }
                  }
                  else
                  {
                    if (v155 >= 0) {
                      uint64_t v121 = HIBYTE(v155);
                    }
                    else {
                      uint64_t v121 = *((void *)&__p + 1);
                    }
                    if (v155 >= 0) {
                      p_p = &__p;
                    }
                    else {
                      p_p = (long long *)__p;
                    }
                    do
                    {
                      uint64_t v123 = v119[23];
                      if ((v123 & 0x80u) == 0) {
                        uint64_t v124 = v119[23];
                      }
                      else {
                        uint64_t v124 = *((void *)v119 + 1);
                      }
                      if (v124 == v121)
                      {
                        if ((v123 & 0x80) != 0)
                        {
                          if (!memcmp(*(const void **)v119, p_p, *((void *)v119 + 1))) {
                            goto LABEL_358;
                          }
                        }
                        else
                        {
                          if (!v119[23]) {
                            goto LABEL_358;
                          }
                          uint64_t v125 = 0;
                          while (v119[v125] == *((unsigned __int8 *)p_p + v125))
                          {
                            if (v123 == ++v125) {
                              goto LABEL_358;
                            }
                          }
                        }
                      }
                      v119 += 48;
                    }
                    while (v119 != v120);
                  }
                  memset(&v158, 0, sizeof(v158));
LABEL_363:
                  BYTE7(v150) = realityio::TextureSwizzleChannels::channelFromChar((unsigned __int8 *)&v158);
                  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v158.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v155) < 0) {
                    operator delete((void *)__p);
                  }
LABEL_367:
                  v158.__r_.__value_.__r.__words[0] = v147.__r_.__value_.__l.__size_;
                  std::string::size_type v126 = v147.__r_.__value_.__r.__words[0];
                  *(std::string::size_type *)((char *)v158.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v147.__r_.__value_.__r.__words[1] + 7);
                  char v127 = HIBYTE(v147.__r_.__value_.__r.__words[2]);
                  memset(&v147, 0, sizeof(v147));
                  *(void *)&long long __p = v148.__r_.__value_.__l.__size_;
                  std::string::size_type v128 = v148.__r_.__value_.__r.__words[0];
                  *(void *)((char *)&__p + 7) = *(std::string::size_type *)((char *)&v148.__r_.__value_.__r.__words[1]
                                                                            + 7);
                  char v129 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                  memset(&v148, 0, sizeof(v148));
                  std::string::size_type v130 = v149.__r_.__value_.__r.__words[0];
                  *(void *)((char *)&v160 + 7) = *(std::string::size_type *)((char *)&v149.__r_.__value_.__r.__words[1]
                                                                             + 7);
                  *(void *)&long long v160 = v149.__r_.__value_.__l.__size_;
                  char v131 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
                  memset(&v149, 0, sizeof(v149));
                  long long v132 = v150;
                  *(_WORD *)(a1 + 96) = v151;
                  *(_OWORD *)(a1 + 80) = v132;
                  std::string::size_type v133 = v152.__r_.__value_.__r.__words[0];
                  *(void *)&v157[7] = *(std::string::size_type *)((char *)&v152.__r_.__value_.__r.__words[1] + 7);
                  *(void *)v157 = v152.__r_.__value_.__l.__size_;
                  char v134 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
                  memset(&v152, 0, sizeof(v152));
                  *(unsigned char *)a1 = 1;
                  std::string::size_type v135 = v158.__r_.__value_.__r.__words[0];
                  *(void *)(a1 + realityio::TextureBuilder::setOutput(*((uint64_t **)this + 21), *((_anonymous_namespace_ **)this + 18), (void *)this + 23) = *(std::string::size_type *)((char *)v158.__r_.__value_.__r.__words + 7);
                  *(void *)(a1 + 8) = v126;
                  *(void *)(a1 + 16) = v135;
                  *(unsigned char *)(a1 + 31) = v127;
                  uint64_t v136 = __p;
                  *(void *)(a1 + 47) = *(void *)((char *)&__p + 7);
                  *(void *)(a1 + 32) = v128;
                  *(void *)(a1 + 40) = v136;
                  *(unsigned char *)(a1 + 55) = v129;
                  uint64_t v137 = v160;
                  *(void *)(a1 + 71) = *(void *)((char *)&v160 + 7);
                  *(void *)(a1 + 56) = v130;
                  *(void *)(a1 + 64) = v137;
                  *(unsigned char *)(a1 + 79) = v131;
                  uint64_t v138 = *(void *)v157;
                  *(void *)(a1 + 119) = *(void *)&v157[7];
                  *(void *)(a1 + 104) = v133;
                  *(void *)(a1 + 112) = v138;
                  *(unsigned char *)(a1 + 127) = v134;
                  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v146, 0);
                  if ((v153 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v153 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
LABEL_369:
                  if ((v167 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v167 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v165);
                  if (*((void *)&v164 + 1)) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v164 + 1));
                  }
                  goto LABEL_373;
                }
              }
              else
              {
                if (v155 >= 0) {
                  uint64_t v114 = HIBYTE(v155);
                }
                else {
                  uint64_t v114 = *((void *)&__p + 1);
                }
                if (v155 >= 0) {
                  v115 = &__p;
                }
                else {
                  v115 = (long long *)__p;
                }
                do
                {
                  uint64_t v116 = v112[23];
                  if ((v116 & 0x80u) == 0) {
                    uint64_t v117 = v112[23];
                  }
                  else {
                    uint64_t v117 = *((void *)v112 + 1);
                  }
                  if (v117 == v114)
                  {
                    if ((v116 & 0x80) != 0)
                    {
                      if (!memcmp(*(const void **)v112, v115, *((void *)v112 + 1))) {
                        goto LABEL_329;
                      }
                    }
                    else
                    {
                      if (!v112[23]) {
                        goto LABEL_329;
                      }
                      uint64_t v118 = 0;
                      while (v112[v118] == *((unsigned __int8 *)v115 + v118))
                      {
                        if (v116 == ++v118) {
                          goto LABEL_329;
                        }
                      }
                    }
                  }
                  v112 += 48;
                }
                while (v112 != v113);
              }
              memset(&v158, 0, sizeof(v158));
              goto LABEL_334;
            }
          }
          else
          {
            if (v155 >= 0) {
              uint64_t v107 = HIBYTE(v155);
            }
            else {
              uint64_t v107 = *((void *)&__p + 1);
            }
            if (v155 >= 0) {
              v108 = &__p;
            }
            else {
              v108 = (long long *)__p;
            }
            do
            {
              uint64_t v109 = v105[23];
              if ((v109 & 0x80u) == 0) {
                uint64_t v110 = v105[23];
              }
              else {
                uint64_t v110 = *((void *)v105 + 1);
              }
              if (v110 == v107)
              {
                if ((v109 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)v105, v108, *((void *)v105 + 1))) {
                    goto LABEL_300;
                  }
                }
                else
                {
                  if (!v105[23]) {
                    goto LABEL_300;
                  }
                  uint64_t v111 = 0;
                  while (v105[v111] == *((unsigned __int8 *)v108 + v111))
                  {
                    if (v109 == ++v111) {
                      goto LABEL_300;
                    }
                  }
                }
              }
              v105 += 48;
            }
            while (v105 != v106);
          }
          memset(&v158, 0, sizeof(v158));
          goto LABEL_305;
        }
      }
      else
      {
        if (v155 >= 0) {
          uint64_t v100 = HIBYTE(v155);
        }
        else {
          uint64_t v100 = *((void *)&__p + 1);
        }
        if (v155 >= 0) {
          v101 = &__p;
        }
        else {
          v101 = (long long *)__p;
        }
        do
        {
          uint64_t v102 = v98[23];
          if ((v102 & 0x80u) == 0) {
            uint64_t v103 = v98[23];
          }
          else {
            uint64_t v103 = *((void *)v98 + 1);
          }
          if (v103 == v100)
          {
            if ((v102 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v98, v101, *((void *)v98 + 1))) {
                goto LABEL_271;
              }
            }
            else
            {
              if (!v98[23]) {
                goto LABEL_271;
              }
              uint64_t v104 = 0;
              while (v98[v104] == *((unsigned __int8 *)v101 + v104))
              {
                if (v102 == ++v104) {
                  goto LABEL_271;
                }
              }
            }
          }
          v98 += 48;
        }
        while (v98 != v99);
      }
      memset(&v158, 0, sizeof(v158));
      goto LABEL_276;
    }
    HIDWORD(v150) = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(v25);
    goto LABEL_52;
  }
  std::string v14 = std::system_category();
  std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute is not valid");
  realityio::DetailedError::DetailedError(&v158, 0, (uint64_t)v14, &__p);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
  std::string::size_type v15 = v158.__r_.__value_.__r.__words[2];
  *(void *)&long long v164 = v159;
  *(void *)((char *)&v164 + 7) = *(void *)((char *)&v159 + 7);
  char v16 = HIBYTE(v159);
  long long v159 = 0uLL;
  v158.__r_.__value_.__r.__words[2] = 0;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 39) = *(void *)((char *)&v164 + 7);
  uint64_t v17 = v164;
  *(void *)(a1 + 24) = v15;
  *(void *)(a1 + 32) = v17;
  *(unsigned char *)(a1 + 47) = v16;
  if (SHIBYTE(v155) < 0) {
    operator delete((void *)__p);
  }
LABEL_373:
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v147.__r_.__value_.__l.__data_);
  }
}

void sub_23F66BE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::shouldRestrictTo8bits(void *a1, uint64_t **a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != (uint64_t *)1) {
      return 0;
    }
    a2 = (uint64_t **)*a2;
  }
  else if (v2 != 1)
  {
    return 0;
  }
  if (*(unsigned char *)a2 != 114) {
    return 0;
  }
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v3 = 0;
    uint64_t v8 = a1[1];
    if (v8 <= 12)
    {
      if (v8 != 8)
      {
        if (v8 == 9)
        {
          id v9 = (void *)*a1;
          if ((*(void *)*a1 != 0x73656E6867756F72 || *(unsigned char *)(*a1 + 8) != 115)
            && (*v9 != 0x6F6973756C63636FLL || *((unsigned char *)v9 + 8) != 110))
          {
            uint64_t v12 = *v9;
            int v13 = *((unsigned __int8 *)v9 + 8);
            if (v12 != 0x616F637261656C63 || v13 != 116) {
              return 0;
            }
          }
          return 1;
        }
        return v3;
      }
      uint64_t v17 = *(void **)*a1;
      return v17 == (void *)0x63696C6C6174656DLL;
    }
    if (v8 == 13) {
      return *(void *)*a1 == 0x72616C7563657073 && *(void *)(*a1 + 5) == 0x726F6C6F4372616CLL;
    }
    if (v8 != 18) {
      return v3;
    }
    a1 = (void *)*a1;
    return *a1 == 0x616F637261656C63 && a1[1] == 0x656E6867756F5274 && *((_WORD *)a1 + 8) == 29555;
  }
  uint64_t v3 = 0;
  unsigned int v4 = *((unsigned __int8 *)a1 + 23);
  if (v4 > 0xC)
  {
    if (v4 == 13) {
      return *a1 == 0x72616C7563657073 && *(void *)((char *)a1 + 5) == 0x726F6C6F4372616CLL;
    }
    if (v4 != 18) {
      return v3;
    }
    return *a1 == 0x616F637261656C63 && a1[1] == 0x656E6867756F5274 && *((_WORD *)a1 + 8) == 29555;
  }
  if (v4 == 8)
  {
    uint64_t v17 = (void *)*a1;
    return v17 == (void *)0x63696C6C6174656DLL;
  }
  if (v4 == 9) {
    return *a1 == 0x73656E6867756F72 && *((unsigned char *)a1 + 8) == 115
  }
        || *a1 == 0x6F6973756C63636FLL && *((unsigned char *)a1 + 8) == 110
        || *a1 == 0x616F637261656C63 && *((unsigned char *)a1 + 8) == 116;
  return v3;
}

realityio::TextureCompression *realityio::TextureCompression::TextureCompression(realityio::TextureCompression *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (pxrInternal__aapl__pxrReserved__::TfToken::operator==())
  {
    char v3 = 0;
  }
  else if (pxrInternal__aapl__pxrReserved__::TfToken::operator==())
  {
    char v3 = 1;
  }
  else
  {
    char v3 = 2;
  }
  *(unsigned char *)this = v3;
  return this;
}

uint64_t anonymous namespace'::InputsContext::engine(_anonymous_namespace_::InputsContext *this)
{
  return *(void *)(*(void *)(*(void *)(*((void *)this + 1) + 40) + 16) + 16);
}

void anonymous namespace'::InputsContext::getTextureAssetWithKey(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
}

std::string *anonymous namespace'::InputsContext::getBundleInfo@<X0>(_anonymous_namespace_::InputsContext *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 1) + 40) + 16);
  return std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(a2, (long long *)(v2 + 304), (long long *)(v2 + 352));
}

void *anonymous namespace'::InputsContext::insertTextureIntoCache(uint64_t a1, long long *a2, std::string::size_type *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 40);
  std::string::size_type v6 = *a3;
  if (v6) {
    RERetain();
  }
  std::mutex::lock((std::mutex *)(v4 + 88));
  std::pair<std::string,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100]<std::string const&,realityio::WrappedRERef<REAsset *>&,0>(&__p, a2, &v6);
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::WrappedRERef<REAsset *>>>((uint64_t **)(v4 + 64), (const void **)&__p.__r_.__value_.__l.__data_, (long long *)&__p);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock((std::mutex *)(v4 + 88));
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
}

void sub_23F66C4DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::~pair((uint64_t)va1);
  std::mutex::unlock(v2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::InputsContext::insertTextureConfigIntoCache(uint64_t a1, uint64_t a2, const realityio::TextureImportOperationSettings *a3)
{
}

void anonymous namespace'::InputsContext::queueForDeferredAssetLoad(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 40) + 16) + 40);
  if (v2) {
    realityio::LiveSceneManager::queueForDeferredAssetLoad(v2, a2);
  }
}

void anonymous namespace'::InputsContext::dataFromRawPath(void *a1@<X8>)
{
  *a1 = 0;
}

void realityio::ImportSession::getTextureAssetWithKey(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  std::string::size_type v6 = (std::mutex *)(a1 + 88);
  std::mutex::lock((std::mutex *)(a1 + 88));
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1 + 64, a2);
  if (a1 + 72 == v7)
  {
    *a3 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v7 + 56);
    *a3 = v8;
    if (v8) {
      RERetain();
    }
  }

  std::mutex::unlock(v6);
}

void sub_23F66C5C0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

void UsdInfoGatherer::~UsdInfoGatherer(void **this)
{
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void UsdInfoGatherer::multipleMaterialInstance(UsdInfoGatherer *this)
{
}

void UsdInfoGatherer::singleMaterialInstance(UsdInfoGatherer *this)
{
}

void GatheringDestination::instance(uint64_t a1, realityio::TextureImportOperationSettings *this)
{
  realityio::TextureImportOperationSettings::makeTextureResourceKey(this, &v26);
  size_t v4 = (pxrInternal__aapl__pxrReserved__ *)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1 + 40, (const void **)&v26.__r_.__value_.__l.__data_);
  if ((pxrInternal__aapl__pxrReserved__ *)(a1 + 48) == v4)
  {
    pxrInternal__aapl__pxrReserved__::ArGetResolver(v4);
    Extension = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
    uint64_t v8 = v25;
    unsigned __int8 v9 = v25;
    if ((v25 & 0x80u) != 0) {
      uint64_t v8 = v24;
    }
    if (v8)
    {
      pxrInternal__aapl__pxrReserved__::ArGetResolver(Extension);
      if (*((char *)this + 47) < 0) {
        std::string::__init_copy_ctor_external(&v17, *((const std::string::value_type **)this + 3), *((void *)this + 4));
      }
      else {
        std::string v17 = *(std::string *)((unsigned char *)this + 1);
      }
      pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (v21)
      {
        (*(void (**)(const UInt8 **__return_ptr))(*(void *)v21 + 24))(&v19);
        CFTypeRef cf = 0;
        uint64_t v10 = v19;
        CFIndex v11 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
        CFDataRef v12 = CFDataCreateWithBytesNoCopy(0, v10, v11, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
        if (cf) {
          CFRelease(cf);
        }
        CFTypeRef cf = v12;
        if (v12)
        {
          uint64_t v13 = *(void *)(a1 + 32);
          CFDataRef v16 = v12;
          CFRetain(v12);
          realityio::createRETextureImportOperation(v13, (uint64_t)this, 0, (uint64_t)&v17);
          realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&v16);
          if (v17.__r_.__value_.__s.__data_[0])
          {
            std::string v14 = (void *)(a1 + 64);
            if (*(char *)(a1 + 87) < 0) {
              std::string v14 = (void *)*v14;
            }
            if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v15 = &v26;
            }
            else {
              std::string::size_type v15 = (std::string *)v26.__r_.__value_.__r.__words[0];
            }
            std::function<void ()(RETextureImportOperation0 *,char const*,char const*)>::operator()(*(void *)(a1 + 24), v17.__r_.__value_.__l.__size_, (uint64_t)v14, (uint64_t)v15);
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 40), (const void **)&v26.__r_.__value_.__l.__data_, (uint64_t)&v26);
          }
          realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result((uint64_t)&v17);
        }
        realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&cf);
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
      }
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      unsigned __int8 v9 = v25;
    }
    if ((v9 & 0x80) != 0) {
      operator delete(v23);
    }
  }
  else
  {
    size_t v5 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      size_t v5 = (void *)*v5;
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v6 = &v26;
    }
    else {
      size_t v6 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    std::function<void ()(RETextureImportOperation0 *,char const*,char const*)>::operator()(*(void *)(a1 + 24), 0, (uint64_t)v5, (uint64_t)v6);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_23F66C92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (*(char *)(v25 - 73) < 0) {
    operator delete(*(void **)(v25 - 96));
  }
  if (*(char *)(v25 - 49) < 0) {
    operator delete(*(void **)(v25 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(RETextureImportOperation0 *,char const*,char const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2;
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v7, &v6, &v5);
}

void MtlxInfoGatherer::instance(MtlxInfoGatherer *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
}

void std::__function::__func<anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,anonymous namespace'::TextureAssetInstance const&)::$_0,std::allocator<anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,anonymous namespace'::TextureAssetInstance const&)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,anonymous namespace'::TextureAssetInstance const&)::$_0,std::allocator<anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,anonymous namespace'::TextureAssetInstance const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = &unk_26F340CB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,anonymous namespace'::TextureAssetInstance const&)::$_0,std::allocator<anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,anonymous namespace'::TextureAssetInstance const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F340CB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const void **std::__function::__func<anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,anonymous namespace'::TextureAssetInstance const&)::$_0,std::allocator<anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,anonymous namespace'::TextureAssetInstance const&)::$_0>,void ()(void)>::operator()(void *a1)
{
  int v2 = (void *)a1[1];
  int v3 = (std::__shared_weak_count *)v2[1];
  void *v2 = 0;
  v2[1] = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  size_t v4 = (void *)a1[2];
  uint64_t v5 = (std::__shared_weak_count *)v4[1];
  *size_t v4 = 0;
  v4[1] = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unsigned __int8 v9 = 0;
  uint64_t v6 = (const void **)a1[3];
  uint64_t v7 = *v6;
  if (*v6)
  {
    std::string *v6 = 0;
    unsigned __int8 v9 = v7;
  }
  return realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v9);
}

uint64_t std::__function::__func<anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,anonymous namespace'::TextureAssetInstance const&)::$_0,std::allocator<anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,anonymous namespace'::TextureAssetInstance const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,anonymous namespace'::TextureAssetInstance const&)::$_0,std::allocator<anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,anonymous namespace'::TextureAssetInstance const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t realityio::Result<realityio::WrappedRERef<RETextureAssetData *>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef((void *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void *realityio::WrappedRERef<REMemoryAssetParameters *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

std::string *std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,std::set<realityio::TextureImportOperationSettings>,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  this[2].__r_.__value_.__r.__words[0] = *a3;
  unsigned __int8 v9 = a3 + 1;
  std::string::size_type v10 = a3[1];
  this[2].__r_.__value_.__l.__size_ = v10;
  CFIndex v11 = &this[2].__r_.__value_.__s.__data_[8];
  std::string::size_type v12 = a3[2];
  this[2].__r_.__value_.__r.__words[2] = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    *a3 = (std::string::size_type)v9;
    void *v9 = 0;
    a3[2] = 0;
  }
  else
  {
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  }
  return this;
}

void sub_23F66CCE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>,0>(uint64_t a1)
{
  std::__tree<realityio::TextureImportOperationSettings>::destroy(a1 + 48, *(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::WrappedRERef<REAsset *>>>(uint64_t **a1, const void **a2, long long *a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    long long v6 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    long long v8 = *a3;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v9 = *((void *)a3 + 2);
    uint64_t v10 = *((void *)a3 + 3);
    *((void *)a3 + 2) = 0;
    *((void *)a3 + 3) = 0;
    v6[2] = v8;
    *((void *)v6 + 6) = v9;
    *((void *)v6 + 7) = v10;
    char v13 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v6;
}

uint64_t realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    if (*(char *)(a1 + 127) < 0) {
      operator delete(*(void **)(a1 + 104));
    }
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0)
    {
      int v2 = (void **)(a1 + 8);
LABEL_12:
      operator delete(*v2);
    }
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    int v2 = (void **)(a1 + 24);
    goto LABEL_12;
  }
  return a1;
}

void *realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

uint64_t realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef((void *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26F340D38;
  return result;
}

void std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F340D38;
}

char *std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  int v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)int v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  __n128 result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26F340DB8;
  return result;
}

void std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F340DB8;
}

void std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  int v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)int v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::TextureBuilder::kOutputName((realityio::TextureBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 296), &v7, &v8);
  long long v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F66D2E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::TextureBuilder::TextureDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F340E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::TextureBuilder::TextureDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F340E38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<realityio::TextureBuilder::TextureDataT *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::find<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  int v2 = *(void **)(a1 + 8);
  if (!v2) {
    return v1;
  }
  uint64_t v3 = (void *)(a1 + 8);
  do
  {
    int v4 = pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<();
    unint64_t v5 = v2 + 1;
    if (!v4)
    {
      unint64_t v5 = v2;
      uint64_t v3 = v2;
    }
    int v2 = (void *)*v5;
  }
  while (*v5);
  if (v3 == v1 || pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<()) {
    return v1;
  }
  return v3;
}

void std::__tree<realityio::TextureImportOperationSettings>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<realityio::TextureImportOperationSettings>::destroy(a1, *a2);
    std::__tree<realityio::TextureImportOperationSettings>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<realityio::TextureImportOperationSettings,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<realityio::TextureImportOperationSettings,0>(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a1, &v19);
  long long v6 = *v5;
  if (!*v5)
  {
    int v7 = v5;
    std::string::size_type v8 = (char *)operator new(0x68uLL);
    uint64_t v9 = v8;
    v17[0] = (uint64_t *)v8;
    v17[1] = (uint64_t *)(a1 + 8);
    char v18 = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v8 + 32), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *((_OWORD *)v8 + 2) = *(_OWORD *)a3;
      *((void *)v8 + 6) = *(void *)(a3 + 16);
    }
    uint64_t v10 = (std::string *)(v9 + 7);
    if (*(char *)(a3 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 24);
      v9[9] = *(void *)(a3 + 40);
    }
    CFIndex v11 = (void *)(a3 + 56);
    uint64_t v12 = *(void *)(a3 + 56);
    uint64_t v13 = *(void *)(a3 + 48);
    v9[11] = v12;
    uint64_t v14 = v9 + 11;
    v9[10] = v13;
    uint64_t v15 = *(void *)(a3 + 64);
    v9[12] = v15;
    if (v15)
    {
      *(void *)(v12 + 16) = v14;
      *(void *)(a3 + 48) = v11;
      *CFIndex v11 = 0;
      *(void *)(a3 + 64) = 0;
    }
    else
    {
      v9[10] = v14;
    }
    char v18 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, v19, v7, v17[0]);
    long long v6 = v17[0];
    v17[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100]((uint64_t)v17, 0);
  }
  return v6;
}

void sub_23F66D70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 55) < 0) {
    operator delete(*v10);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, void *a2)
{
  int v4 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    do
    {
      while (1)
      {
        unint64_t v5 = v3;
        if (!pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<()) {
          break;
        }
        uint64_t v3 = (void *)*v5;
        int v4 = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<()) {
        break;
      }
      int v4 = v5 + 1;
      uint64_t v3 = (void *)v5[1];
    }
    while (v3);
  }
  else
  {
    unint64_t v5 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return v4;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<realityio::TextureImportOperationSettings>::__emplace_unique_key_args<realityio::TextureImportOperationSettings,realityio::TextureImportOperationSettings const&>(uint64_t **a1, uint64_t a2, const realityio::TextureImportOperationSettings *a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<realityio::TextureImportOperationSettings>::__find_equal<realityio::TextureImportOperationSettings>((uint64_t)a1, &v10, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    int v7 = v5;
    std::__tree<realityio::TextureImportOperationSettings>::__construct_node<realityio::TextureImportOperationSettings const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    long long v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<realityio::TextureImportOperationSettings,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TextureImportOperationSettings,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void *std::__tree<realityio::TextureImportOperationSettings>::__find_equal<realityio::TextureImportOperationSettings>(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!realityio::TextureImportOperationSettings::operator<(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        int v4 = (void *)*v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!realityio::TextureImportOperationSettings::operator<(v8, a3)) {
        break;
      }
      unint64_t v5 = v7 + 1;
      int v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

std::string *std::__tree<realityio::TextureImportOperationSettings>::__construct_node<realityio::TextureImportOperationSettings const&>@<X0>(uint64_t a1@<X0>, const realityio::TextureImportOperationSettings *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x98uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = realityio::TextureImportOperationSettings::TextureImportOperationSettings((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_23F66D9A4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<realityio::TextureImportOperationSettings,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TextureImportOperationSettings,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t realityio::TextureImportOperationSettings::operator<(uint64_t a1, uint64_t a2)
{
  if (pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<()) {
    return 1;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==((unsigned __int8 *)a1, (unsigned __int8 *)a2))
  {
    uint64_t v5 = (unsigned __int8 *)(a1 + 48);
    int v4 = *(const void **)(a1 + 48);
    int v6 = *(char *)(a2 + 71);
    uint64_t v7 = *(unsigned __int8 *)(a1 + 71);
    size_t v8 = *(void *)(a1 + 56);
    if ((v7 & 0x80u) == 0) {
      size_t v9 = *(unsigned __int8 *)(a1 + 71);
    }
    else {
      size_t v9 = *(void *)(a1 + 56);
    }
    if ((v7 & 0x80u) == 0) {
      uint64_t v10 = (const void *)(a1 + 48);
    }
    else {
      uint64_t v10 = *(const void **)(a1 + 48);
    }
    if (v6 >= 0) {
      size_t v11 = *(unsigned __int8 *)(a2 + 71);
    }
    else {
      size_t v11 = *(void *)(a2 + 56);
    }
    if (v6 >= 0) {
      uint64_t v12 = (unsigned __int8 *)(a2 + 48);
    }
    else {
      uint64_t v12 = *(unsigned __int8 **)(a2 + 48);
    }
    if (v11 >= v9) {
      size_t v13 = v9;
    }
    else {
      size_t v13 = v11;
    }
    int v14 = memcmp(v10, v12, v13);
    BOOL v15 = v9 < v11;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    if (v15) {
      return 1;
    }
    if (v9 == v11)
    {
      if ((v7 & 0x80) == 0)
      {
        if (v7)
        {
          while (*v5 == *v12)
          {
            ++v5;
            ++v12;
            if (!--v7) {
              goto LABEL_29;
            }
          }
          return 0;
        }
LABEL_29:
        int v17 = *(_DWORD *)(a1 + 72);
        int v18 = *(_DWORD *)(a2 + 72);
        if (v17 >= v18)
        {
          if (v17 != v18) {
            return 0;
          }
          if (!realityio::TextureSwizzleChannels::operator<((unsigned __int8 *)(a1 + 76), (unsigned __int8 *)(a2 + 76)))
          {
            if (*(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)) {
              return 0;
            }
            if (*(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77)) {
              return 0;
            }
            if (*(unsigned __int8 *)(a1 + 78) != *(unsigned __int8 *)(a2 + 78)) {
              return 0;
            }
            if (*(unsigned __int8 *)(a1 + 79) != *(unsigned __int8 *)(a2 + 79)) {
              return 0;
            }
            unsigned int v19 = *(unsigned __int8 *)(a1 + 80);
            unsigned int v20 = *(unsigned __int8 *)(a2 + 80);
            if (v19 >= v20)
            {
              if (v19 != v20) {
                return 0;
              }
              unsigned int v21 = *(_DWORD *)(a1 + 84);
              unsigned int v22 = *(_DWORD *)(a2 + 84);
              if (v21 >= v22)
              {
                if (v21 != v22) {
                  return 0;
                }
                unsigned int v23 = *(unsigned __int8 *)(a1 + 88);
                unsigned int v24 = *(unsigned __int8 *)(a2 + 88);
                if (v23 >= v24)
                {
                  if (v23 != v24) {
                    return 0;
                  }
                  unsigned int v25 = *(unsigned __int8 *)(a1 + 89);
                  unsigned int v26 = *(unsigned __int8 *)(a2 + 89);
                  if (v25 >= v26
                    && (v25 != v26
                     || !std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 96), (void *)(a2 + 96))))
                  {
                    return 0;
                  }
                }
              }
            }
          }
        }
        return 1;
      }
      if (!memcmp(v4, v12, v8)) {
        goto LABEL_29;
      }
    }
  }
  return 0;
}

BOOL realityio::TextureSwizzleChannels::operator<(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v2 < v3) {
    return 1;
  }
  if (v2 != v3) {
    return 0;
  }
  unsigned int v5 = a1[1];
  unsigned int v6 = a2[1];
  if (v5 < v6) {
    return 1;
  }
  if (v5 != v6) {
    return 0;
  }
  unsigned int v7 = a1[2];
  unsigned int v8 = a2[2];
  if (v7 < v8) {
    return 1;
  }
  if (v7 == v8) {
    return a1[3] < a2[3];
  }
  return 0;
}

void std::unique_ptr<std::__tree_node<realityio::TextureImportOperationSettings,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TextureImportOperationSettings,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<realityio::TextureImportOperationSettings,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void realityio::mtlx::fillAttr(realityio::mtlx *this, realityio::mtlx::MxDataSource *a2, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a3)
{
  v24[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v20);
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, &v20);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v23 + 1, &v21);
  v24[0] = TypeName;
  unsigned int v7 = (void *)((char *)this + 184);
  unsigned int v6 = (void *)*((void *)this + 23);
  if (!v6)
  {
    unsigned int v8 = (void *)((char *)this + 184);
LABEL_9:
    uint64_t v10 = operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v10 + 8, &v23);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v10 + 9, (_DWORD *)&v23 + 1);
    *((void *)v10 + 5) = v24[0];
    *(void *)uint64_t v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v8;
    *unsigned int v7 = v10;
    uint64_t v11 = **((void **)this + 22);
    if (v11)
    {
      *((void *)this + 22) = v11;
      uint64_t v10 = (_DWORD *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 23), (uint64_t *)v10);
    ++*((void *)this + 24);
    goto LABEL_12;
  }
  while (1)
  {
    while (1)
    {
      unsigned int v8 = v6;
      size_t v9 = v6 + 4;
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v23, v6 + 4)) {
        break;
      }
      unsigned int v6 = (void *)*v8;
      unsigned int v7 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, &v23)) {
      break;
    }
    unsigned int v7 = v8 + 1;
    unsigned int v6 = (void *)v8[1];
    if (!v6) {
      goto LABEL_9;
    }
  }
  if (!*v7) {
    goto LABEL_9;
  }
LABEL_12:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v20);
  char HasValue = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, &v20);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v23 + 1, &v21);
  LOBYTE(v24[0]) = HasValue;
  int v14 = (void *)((char *)this + 136);
  size_t v13 = (void *)*((void *)this + 17);
  if (!v13)
  {
    BOOL v15 = (void *)((char *)this + 136);
LABEL_20:
    int v17 = operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v17 + 7, &v23);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v17 + 8, (_DWORD *)&v23 + 1);
    *((unsigned char *)v17 + 36) = v24[0];
    *(void *)int v17 = 0;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = v15;
    *int v14 = v17;
    uint64_t v18 = **((void **)this + 16);
    if (v18)
    {
      *((void *)this + 16) = v18;
      int v17 = (_DWORD *)*v14;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 17), (uint64_t *)v17);
    ++*((void *)this + 18);
    goto LABEL_23;
  }
  while (1)
  {
    while (1)
    {
      BOOL v15 = v13;
      CFDataRef v16 = (void *)((char *)v13 + 28);
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v23, (void *)((char *)v13 + 28))) {
        break;
      }
      size_t v13 = (void *)*v15;
      int v14 = v15;
      if (!*v15) {
        goto LABEL_20;
      }
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v16, &v23)) {
      break;
    }
    int v14 = v15 + 1;
    size_t v13 = (void *)v15[1];
    if (!v13) {
      goto LABEL_20;
    }
  }
  if (!*v14) {
    goto LABEL_20;
  }
LABEL_23:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v20);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetRoleName(&v19, a2);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]<true,0>((uint64_t)&v23, &v20, &v19);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t **)this + 31, &v23, (uint64_t)&v23);
  if ((v24[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v20);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(&v19, a2);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]<true,0>((uint64_t)&v23, &v20, &v19);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t **)this + 34, &v23, (uint64_t)&v23);
  if ((v24[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue(a2))
  {
    uint64_t v22 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v19);
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<true,0>(&v23, &v19, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v20);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>((uint64_t **)this + 25, &v23, (uint64_t)&v23);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v20);
  }
}

void sub_23F66E0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::fillDataSourceFromShaderPrim(realityio::mtlx *a1, pxrInternal__aapl__pxrReserved__ **this, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes(&v133, (pxrInternal__aapl__pxrReserved__::UsdPrim *)this);
  uint64_t v6 = v134;
  if (v133 != v134)
  {
    uint64_t v7 = v133 + 16;
    do
    {
      uint64_t v8 = v7 - 16;
      LODWORD(v146) = *(_DWORD *)(v7 - 16);
      uint64_t v9 = *(void *)(v7 - 8);
      uint64_t v147 = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v148, (_DWORD *)v7);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v149, (_DWORD *)(v7 + 4));
      uint64_t v11 = *(void *)(v7 + 8);
      uint64_t v150 = v11;
      if ((v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v150 &= 0xFFFFFFFFFFFFFFF8;
      }
      realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v146, v10);
      if ((v150 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v148);
      if (v147) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v147);
      }
      v7 += 32;
    }
    while (v8 + 32 != v6);
  }
  uint64_t v12 = this[1];
  if (!v12 || (*((unsigned char *)v12 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(this[1], v5);
  }
  size_t v13 = (void *)*((void *)v12 + 3);
  MEMORY[0x2455CF810](&v146, "Shader");
  unint64_t v15 = *v13 & 0xFFFFFFFFFFFFFFF8;
  CFDataRef v16 = (atomic_uint *)((unint64_t)v146 & 0xFFFFFFFFFFFFFFF8);
  if ((v146 & 7) != 0) {
    atomic_fetch_add_explicit(v16, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v15 == v16)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this, &v132);
    realityio::mtlx::MxDataSource::addPrim((uint64_t)a1, &v132, 2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v132);
    int v127 = *(_DWORD *)this;
    long long v54 = this[1];
    uint64_t v128 = (uint64_t)v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v54 + 6, 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v129, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v130, (_DWORD *)this + 5);
    unint64_t v55 = (unint64_t)this[3];
    unint64_t v131 = v55;
    if ((v55 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v131 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v56 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    unint64_t v155 = 0;
    v156[0] = MEMORY[0x263F906F0] + 16;
    uint64_t v153 = 0;
    v154 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(v56);
    uint64_t v57 = v151;
    for (uint64_t i = v152; v57 != i; v57 += 32)
    {
      LODWORD(v146) = *(_DWORD *)v57;
      uint64_t v58 = *(void *)(v57 + 8);
      uint64_t v147 = v58;
      if (v58) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v148, (_DWORD *)(v57 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v149, (_DWORD *)(v57 + 20));
      uint64_t v59 = *(void *)(v57 + 24);
      uint64_t v150 = v59;
      if ((v59 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v150 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v143);
      NameTokeuint64_t n = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v143);
      uint64_t v61 = v154;
      if ((unint64_t)v154 >= v155)
      {
        int v63 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v153, NameToken);
      }
      else
      {
        uint64_t v62 = *NameToken;
        void *v154 = *NameToken;
        if ((v62 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v61 &= 0xFFFFFFFFFFFFFFF8;
        }
        int v63 = (char *)(v61 + 1);
      }
      v154 = v63;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v143);
      realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v146, v64);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v143);
      pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((uint64_t *)&v140, (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v146);
      realityio::mtlx::MxDataSource::addBaseName(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v143, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v140);
      if ((v140 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v143);
      int v143 = 0;
      int v144 = 0;
      unint64_t v145 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
      {
        uint64_t v65 = v143;
        uint64_t v66 = v144;
        while (v65 != v66)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v140, v65);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v140 + 1, (_DWORD *)v65 + 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v137, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v140);
          uint64_t v67 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(&v137);
          v67[1] = a3;
          uint64_t v68 = *a3;
          *uint64_t v67 = *a3;
          *(void *)(v68 + 8) = v67;
          *a3 = (uint64_t)v67;
          ++a3[2];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v140);
          ++v65;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v142);
      realityio::mtlx::MxDataSource::addConnectedAttribute((uint64_t)a1, &v142, (_DWORD **)&v143);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v142);
      unint64_t v140 = (unint64_t)&v143;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
      if ((v150 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v148);
      if (v147) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v147);
      }
    }
    int v143 = 0;
    int v144 = 0;
    unint64_t v145 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v156);
    unint64_t v69 = v140;
    for (uint64_t j = v141; v69 != j; v69 += 32)
    {
      LODWORD(v146) = *(_DWORD *)v69;
      uint64_t v70 = *(void *)(v69 + 8);
      uint64_t v147 = v70;
      if (v70) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v148, (_DWORD *)(v69 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v149, (_DWORD *)(v69 + 20));
      uint64_t v71 = *(void *)(v69 + 24);
      uint64_t v150 = v71;
      if ((v71 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v150 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v137);
      uint64_t v72 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v137);
      int v73 = v144;
      if ((unint64_t)v144 >= v145)
      {
        int v75 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v143, v72);
      }
      else
      {
        uint64_t v74 = *v72;
        *int v144 = *v72;
        if ((v74 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v73 &= 0xFFFFFFFFFFFFFFF8;
        }
        int v75 = (char *)(v73 + 1);
      }
      int v144 = (uint64_t *)v75;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
      realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v146, v76);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v137);
      pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((uint64_t *)v157, (pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v146);
      realityio::mtlx::MxDataSource::addBaseName(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v137, (const pxrInternal__aapl__pxrReserved__::TfToken *)v157);
      if (((uint64_t)v157[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v157[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
      uint64_t v137 = 0;
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
      {
        int v77 = v137;
        uint64_t v78 = v138;
        while (v77 != v78)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v157, v77);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v157 + 1, v77 + 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v136, (pxrInternal__aapl__pxrReserved__::SdfPath *)v157);
          int v79 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(&v136);
          v79[1] = a3;
          uint64_t v80 = *a3;
          void *v79 = *a3;
          *(void *)(v80 + 8) = v79;
          *a3 = (uint64_t)v79;
          ++a3[2];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v136);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v157);
          v77 += 2;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v135);
      realityio::mtlx::MxDataSource::addConnectedAttribute((uint64_t)a1, &v135, &v137);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v135);
      v157[0] = (void **)&v137;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v157);
      if ((v150 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v148);
      if (v147) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v147);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v127, &v137);
    realityio::mtlx::MxDataSource::addInputsOutputs((uint64_t)a1, &v137, &v153, &v143);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
    uint64_t v146 = (void **)&v140;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v146);
    uint64_t v146 = (void **)&v143;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v146);
    uint64_t v146 = (void **)&v151;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v146);
    uint64_t v146 = (void **)&v153;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v146);
    MEMORY[0x2455CECB0](v156);
    if ((v131 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v131 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v129);
    uint64_t v53 = v128;
    if (v128) {
      goto LABEL_140;
    }
  }
  else
  {
    int v17 = this[1];
    if (!v17 || (*((unsigned char *)v17 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(this[1], v14);
    }
    uint64_t v18 = (void *)*((void *)v17 + 3);
    MEMORY[0x2455CF810](&v146, "NodeGraph");
    unint64_t v20 = *v18 & 0xFFFFFFFFFFFFFFF8;
    int v21 = (atomic_uint *)((unint64_t)v146 & 0xFFFFFFFFFFFFFFF8);
    if ((v146 & 7) != 0) {
      atomic_fetch_add_explicit(v21, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)v20 != v21)
    {
      uint64_t v22 = this[1];
      if (!v22 || (*((unsigned char *)v22 + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(this[1], v19);
      }
      uint64_t v23 = (void *)*((void *)v22 + 3);
      MEMORY[0x2455CF810](&v146, "Material");
      unint64_t v24 = *v23 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v25 = (atomic_uint *)((unint64_t)v146 & 0xFFFFFFFFFFFFFFF8);
      if ((v146 & 7) != 0) {
        atomic_fetch_add_explicit(v25, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)v24 != v25) {
        goto LABEL_141;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this, &v120);
      realityio::mtlx::MxDataSource::addPrim((uint64_t)a1, &v120, 0);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v120);
      int v115 = *(_DWORD *)this;
      unsigned int v26 = this[1];
      uint64_t v116 = (uint64_t)v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v26 + 6, 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v117, (_DWORD *)this + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v118, (_DWORD *)this + 5);
      unint64_t v27 = (unint64_t)this[3];
      unint64_t v119 = v27;
      if ((v27 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v119 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v28 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      unint64_t v155 = 0;
      v156[0] = MEMORY[0x263F90740] + 16;
      uint64_t v153 = 0;
      v154 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs(v28);
      uint64_t v29 = v151;
      for (uint64_t k = v152; v29 != k; v29 += 32)
      {
        LODWORD(v146) = *(_DWORD *)v29;
        uint64_t v30 = *(void *)(v29 + 8);
        uint64_t v147 = v30;
        if (v30) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v148, (_DWORD *)(v29 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v149, (_DWORD *)(v29 + 20));
        uint64_t v31 = *(void *)(v29 + 24);
        uint64_t v150 = v31;
        if ((v31 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v150 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v143);
        char v32 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v143);
        uint64_t v33 = v154;
        if ((unint64_t)v154 >= v155)
        {
          uint64_t v35 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v153, v32);
        }
        else
        {
          uint64_t v34 = *v32;
          void *v154 = *v32;
          if ((v34 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v33 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v35 = (char *)(v33 + 1);
        }
        v154 = v35;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v143);
        realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v146, v36);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v143);
        pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((uint64_t *)&v140, (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v146);
        realityio::mtlx::MxDataSource::addBaseName(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v143, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v140);
        if ((v140 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v143);
        int v143 = 0;
        int v144 = 0;
        unint64_t v145 = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
        {
          uint64_t v37 = v143;
          unsigned int v38 = v144;
          while (v37 != v38)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v140, v37);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v140 + 1, (_DWORD *)v37 + 1);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v137, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v140);
            std::string v39 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(&v137);
            v39[1] = a3;
            uint64_t v40 = *a3;
            *std::string v39 = *a3;
            *(void *)(v40 + 8) = v39;
            *a3 = (uint64_t)v39;
            ++a3[2];
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v140);
            ++v37;
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v142);
        realityio::mtlx::MxDataSource::addConnectedAttribute((uint64_t)a1, &v142, (_DWORD **)&v143);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v142);
        unint64_t v140 = (unint64_t)&v143;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
        if ((v150 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v148);
        if (v147) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v147);
        }
      }
      int v143 = 0;
      int v144 = 0;
      unint64_t v145 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v156);
      unint64_t v41 = v140;
      for (uint64_t m = v141; v41 != m; v41 += 32)
      {
        LODWORD(v146) = *(_DWORD *)v41;
        uint64_t v42 = *(void *)(v41 + 8);
        uint64_t v147 = v42;
        if (v42) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v148, (_DWORD *)(v41 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v149, (_DWORD *)(v41 + 20));
        uint64_t v43 = *(void *)(v41 + 24);
        uint64_t v150 = v43;
        if ((v43 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v150 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v137);
        unsigned int v44 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v137);
        uint64_t v45 = v144;
        if ((unint64_t)v144 >= v145)
        {
          uint64_t v47 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v143, v44);
        }
        else
        {
          uint64_t v46 = *v44;
          *int v144 = *v44;
          if ((v46 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v45 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v47 = (char *)(v45 + 1);
        }
        int v144 = (uint64_t *)v47;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
        realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v146, v48);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v137);
        pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((uint64_t *)v157, (pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v146);
        realityio::mtlx::MxDataSource::addBaseName(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v137, (const pxrInternal__aapl__pxrReserved__::TfToken *)v157);
        if (((uint64_t)v157[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v157[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
        uint64_t v137 = 0;
        uint64_t v138 = 0;
        uint64_t v139 = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
        {
          long long v49 = v137;
          std::string v50 = v138;
          while (v49 != v50)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v157, v49);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v157 + 1, v49 + 1);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v136, (pxrInternal__aapl__pxrReserved__::SdfPath *)v157);
            int v51 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(&v136);
            v51[1] = a3;
            uint64_t v52 = *a3;
            *int v51 = *a3;
            *(void *)(v52 + 8) = v51;
            *a3 = (uint64_t)v51;
            ++a3[2];
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v136);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v157);
            v49 += 2;
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v135);
        realityio::mtlx::MxDataSource::addConnectedAttribute((uint64_t)a1, &v135, &v137);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v135);
        v157[0] = (void **)&v137;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v157);
        if ((v150 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v148);
        if (v147) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v147);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v115, &v137);
      realityio::mtlx::MxDataSource::addInputsOutputs((uint64_t)a1, &v137, &v153, &v143);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
      uint64_t v146 = (void **)&v140;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v146);
      uint64_t v146 = (void **)&v143;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v146);
      uint64_t v146 = (void **)&v151;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v146);
      uint64_t v146 = (void **)&v153;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v146);
      MEMORY[0x2455CEF40](v156);
      if ((v119 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v117);
      uint64_t v53 = v116;
      if (!v116) {
        goto LABEL_141;
      }
LABEL_140:
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
      goto LABEL_141;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this, &v126);
    realityio::mtlx::MxDataSource::addPrim((uint64_t)a1, &v126, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v126);
    int v121 = *(_DWORD *)this;
    unint64_t v81 = this[1];
    uint64_t v122 = (uint64_t)v81;
    if (v81) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v81 + 6, 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v123, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v124, (_DWORD *)this + 5);
    unint64_t v82 = (unint64_t)this[3];
    unint64_t v125 = v82;
    if ((v82 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v125 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v83 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    unint64_t v155 = 0;
    v156[0] = MEMORY[0x263F90760] + 16;
    uint64_t v153 = 0;
    v154 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs(v83);
    uint64_t v84 = v151;
    for (uint64_t n = v152; v84 != n; v84 += 32)
    {
      LODWORD(v146) = *(_DWORD *)v84;
      uint64_t v85 = *(void *)(v84 + 8);
      uint64_t v147 = v85;
      if (v85) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v85 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v148, (_DWORD *)(v84 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v149, (_DWORD *)(v84 + 20));
      uint64_t v86 = *(void *)(v84 + 24);
      uint64_t v150 = v86;
      if ((v86 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v150 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v143);
      unint64_t v87 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v143);
      unint64_t v88 = v154;
      if ((unint64_t)v154 >= v155)
      {
        long long v90 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v153, v87);
      }
      else
      {
        uint64_t v89 = *v87;
        void *v154 = *v87;
        if ((v89 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v88 &= 0xFFFFFFFFFFFFFFF8;
        }
        long long v90 = (char *)(v88 + 1);
      }
      v154 = v90;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v143);
      realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v146, v91);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v143);
      pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((uint64_t *)&v140, (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v146);
      realityio::mtlx::MxDataSource::addBaseName(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v143, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v140);
      if ((v140 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v143);
      int v143 = 0;
      int v144 = 0;
      unint64_t v145 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
      {
        v92 = v143;
        int v93 = v144;
        while (v92 != v93)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v140, v92);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v140 + 1, (_DWORD *)v92 + 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v137, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v140);
          int v94 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(&v137);
          v94[1] = a3;
          uint64_t v95 = *a3;
          *int v94 = *a3;
          *(void *)(v95 + 8) = v94;
          *a3 = (uint64_t)v94;
          ++a3[2];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v140);
          ++v92;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v142);
      realityio::mtlx::MxDataSource::addConnectedAttribute((uint64_t)a1, &v142, (_DWORD **)&v143);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v142);
      unint64_t v140 = (unint64_t)&v143;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
      if ((v150 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v148);
      if (v147) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v147);
      }
    }
    int v143 = 0;
    int v144 = 0;
    unint64_t v145 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v156);
    unint64_t v96 = v140;
    for (iuint64_t i = v141; v96 != ii; v96 += 32)
    {
      LODWORD(v146) = *(_DWORD *)v96;
      uint64_t v97 = *(void *)(v96 + 8);
      uint64_t v147 = v97;
      if (v97) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v97 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v148, (_DWORD *)(v96 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v149, (_DWORD *)(v96 + 20));
      uint64_t v98 = *(void *)(v96 + 24);
      uint64_t v150 = v98;
      if ((v98 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v150 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v137);
      v99 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v137);
      uint64_t v100 = v144;
      if ((unint64_t)v144 >= v145)
      {
        uint64_t v102 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v143, v99);
      }
      else
      {
        uint64_t v101 = *v99;
        *int v144 = *v99;
        if ((v101 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v100 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v102 = (char *)(v100 + 1);
      }
      int v144 = (uint64_t *)v102;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
      realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v146, v103);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v137);
      pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((uint64_t *)v157, (pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v146);
      realityio::mtlx::MxDataSource::addBaseName(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v137, (const pxrInternal__aapl__pxrReserved__::TfToken *)v157);
      if (((uint64_t)v157[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v157[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
      uint64_t v137 = 0;
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
      {
        uint64_t v104 = v137;
        v105 = v138;
        while (v104 != v105)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v157, v104);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v157 + 1, v104 + 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v136, (pxrInternal__aapl__pxrReserved__::SdfPath *)v157);
          v106 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(&v136);
          v106[1] = a3;
          uint64_t v107 = *a3;
          void *v106 = *a3;
          *(void *)(v107 + 8) = v106;
          *a3 = (uint64_t)v106;
          ++a3[2];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v136);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v157);
          v104 += 2;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146, &v135);
      realityio::mtlx::MxDataSource::addConnectedAttribute((uint64_t)a1, &v135, &v137);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v135);
      v157[0] = (void **)&v137;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v157);
      if ((v150 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v148);
      if (v147) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v147);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v121, &v137);
    realityio::mtlx::MxDataSource::addInputsOutputs((uint64_t)a1, &v137, &v153, &v143);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
    uint64_t v146 = (void **)&v140;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v146);
    uint64_t v146 = (void **)&v143;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v146);
    uint64_t v146 = (void **)&v151;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v146);
    uint64_t v146 = (void **)&v153;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v146);
    MEMORY[0x2455CF040](v156);
    if ((v125 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v125 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v123);
    uint64_t v53 = v122;
    if (v122) {
      goto LABEL_140;
    }
  }
LABEL_141:
  uint64_t v146 = (void **)&v133;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](&v146);
}

void sub_23F66F830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a34);
  *(void *)(v37 - 200) = &a37;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 200));
  *(void *)(v37 - 200) = v37 - 224;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 200));
  *(void *)(v37 - 200) = v37 - 168;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 200));
  *(void *)(v37 - 200) = v37 - 144;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 200));
  MEMORY[0x2455CEF40](v37 - 120);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a14);
  *(void *)(v37 - 200) = &a29;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 200));
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::addPrim(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 56);
  uint64_t v7 = (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3;
  uint64_t v8 = (uint64_t **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v15 + 1, a2 + 1);
  uint64_t v16 = v7;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>(v8, &v15, (uint64_t)&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v13 + 1, a2 + 1);
  int v14 = a3;
  uint64_t v9 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 32, &v18, &v13);
  if (!*v9)
  {
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    uint64_t v16 = a1 + 40;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 7, &v13);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 8, (_DWORD *)&v13 + 1);
    *((_DWORD *)v10 + 9) = v14;
    char v17 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)(a1 + 32), v18, v9, v10);
    uint64_t v15 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,void *>>>>::reset[abi:ne180100]((uint64_t)&v15);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  unint64_t v11 = *(void *)(a1 + 64);
  if (v11 >= *(void *)(a1 + 72))
  {
    uint64_t result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v6, a2);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*(_DWORD **)(a1 + 64), a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v11 + 4), a2 + 1);
    uint64_t result = v11 + 8;
  }
  *(void *)(a1 + 64) = result;
  return result;
}

void sub_23F66FFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::chaseConnection(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2)+ 1;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6, a2 + 1);
  while (1)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
    if (!result) {
      break;
    }
    uint64_t result = (uint64_t)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, a1);
    uint64_t v8 = result;
    if (a3 + 8 == result)
    {
      if (*(void *)a1 == *(void *)a2)
      {
        uint64_t v9 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a1, (int *)&v9);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v6);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
      }
      return result;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a1, (_DWORD *)(result + 36));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v6, (_DWORD *)(v8 + 40));
  }
  return result;
}

void sub_23F6700C8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::buildConnectionsMaps(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t **a2, uint64_t **a3)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v41, a1);
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v41);
  pxrInternal__aapl__pxrReserved__::UsdStage::Traverse(v47, v5);
  uint64_t v6 = v42;
  if (v42 && atomic_fetch_add_explicit((atomic_uint *volatile)(v42 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)v47, (uint64_t)&v41);
  uint64_t v36 = v47[1];
  uint64_t v37 = v47;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  int v39 = 0;
  __int16 v40 = 0;
  while ((uint64_t *)v42 != v37
       || v41 != v36
       || v43 != v38
       || v44 != v39
       || v45 != v40
       || v46 != HIBYTE(v40))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v41, (uint64_t)v32);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes(&v30, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v32);
    uint64_t v8 = v30;
    uint64_t v7 = v31;
    uint64_t v14 = v31;
    while (v8 != v7)
    {
      LODWORD(v25) = *(_DWORD *)v8;
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v26 = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v27, (_DWORD *)(v8 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v28, (_DWORD *)(v8 + 20));
      uint64_t v10 = *(void *)(v8 + 24);
      uint64_t v29 = v10;
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v29 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
      {
        unint64_t v11 = v22;
        uint64_t v12 = v23;
        while (v11 != v12)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, v11);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, v11 + 1);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v25, &v15);
          LODWORD(v17) = v15;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
          HIDWORD(v17) = v16;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, &v20);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, &v21);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(a2, &v17, &v17);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v25, &v15);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, &v20);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v17 + 1, &v21);
          int v18 = v15;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
          int v19 = v16;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(a3, &v17, &v17);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
          v11 += 2;
        }
      }
      char v17 = (void **)&v22;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
      if ((v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
      if (v26) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
      }
      v8 += 32;
      uint64_t v7 = v14;
    }
    unsigned int v25 = (void **)&v30;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](&v25);
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
    if (v33) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v33);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v41);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
}

void sub_23F670550(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_23F67071C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  JUMPOUT(0x23F670748);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

atomic_uint **realityio::mtlx::mtlxDocToDataSource@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, realityio::mtlx **a3@<X8>)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  *(void *)&long long v102 = 0;
  uint64_t v101 = 0;
  uint64_t v100 = &v101;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v100, v101);
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory();
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>((uint64_t *)&v92, (uint64_t *)&v56);
  std::string::basic_string[abi:ne180100]<0>(&v100, "/MaterialX");
  MEMORY[0x2455CF7A0](&v111, &v100);
  std::string::basic_string[abi:ne180100]<0>(&__p, "/ModelRoot");
  MEMORY[0x2455CF7A0](&v87, &__p);
  realityio::mtlx::UsdMtlxRead(a2, &v92, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v111, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v87);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87);
  if (SBYTE7(v98) < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v111);
  if (SBYTE7(v102) < 0) {
    operator delete(v100);
  }
  unsigned int v5 = v93;
  if (v93 && atomic_fetch_add_explicit((atomic_uint *volatile)v93 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*((void (**)(void **))*v5 + 1))(v5);
  }
  int v51 = 1;
  uint64_t v52 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v55 = 0;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (v6)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v56);
    std::string::basic_string[abi:ne180100]<0>(&__p, "/MaterialX/Materials");
    MEMORY[0x2455CF7A0](&v111, &__p);
    MEMORY[0x2455CF830](&v87, a1);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&v92, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v111, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v87);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v100, v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v92);
    int v51 = (int)v100;
    uint64_t v8 = v101;
    uint64_t v101 = 0;
    uint64_t v52 = (atomic_ullong *)v8;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v53, (int *)&v102);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v54);
    if ((v55 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v55 = *((void *)&v102 + 1);
    *((void *)&v102 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
    if (v101) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v101);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v92);
    if ((v87 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v111);
    if (SBYTE7(v98) < 0) {
      operator delete(__p);
    }
  }
  else
  {
    std::string v50 = v56;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v50);
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v50);
    pxrInternal__aapl__pxrReserved__::UsdStage::Traverse((uint64_t *)&v100, v9);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&v100, (uint64_t)&__p);
    v92 = v101;
    int v93 = &v100;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    DWORD2(v94) = 0;
    WORD6(v94) = 0;
    while ((void **)v97 != v93
         || __p != v92
         || (void)v98 != (void)v94
         || DWORD2(v98) != DWORD2(v94)
         || BYTE12(v98) != BYTE12(v94)
         || BYTE13(v98) != BYTE13(v94))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&__p, (uint64_t)&v111);
      unint64_t v11 = (pxrInternal__aapl__pxrReserved__ *)v112;
      if (!v112 || (*((unsigned char *)v112 + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v112, v10);
      }
      uint64_t v12 = (uint64_t *)*((void *)v11 + 3);
      MEMORY[0x2455CF810](&v87, "Material");
      uint64_t v13 = *v12;
      uint64_t v14 = (atomic_uint *)(v87 & 0xFFFFFFFFFFFFFFF8);
      if ((v87 & 7) != 0) {
        atomic_fetch_add_explicit(v14, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8) == v14)
      {
        char v15 = 0;
        goto LABEL_38;
      }
      if ((v115 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v115 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v113);
      if (v112) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v112);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&__p);
    }
    char v15 = 1;
LABEL_38:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
    if (v15)
    {
      LODWORD(v111) = 1;
      v112 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v115 = 0;
    }
    int v51 = v111;
    int v16 = (pxrInternal__aapl__pxrReserved__ *)v112;
    v112 = 0;
    uint64_t v17 = (uint64_t)v52;
    uint64_t v52 = (atomic_ullong *)v16;
    if (v17) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v53, &v113);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v54);
    if ((v55 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v55 = v115;
    uint64_t v115 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v113);
    if (v112) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v112);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v50);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v51))
  {
    int v18 = operator new(0x140uLL);
    v18[1] = 0;
    v18[2] = 0;
    *int v18 = &unk_26F340EB8;
    int v19 = (realityio::mtlx *)(v18 + 3);
    v18[5] = 0;
    uint64_t v18[3] = &unk_26F340F08;
    v18[4] = v18 + 5;
    v18[9] = 0;
    v18[10] = 0;
    v18[8] = 0;
    v18[6] = 0;
    v18[7] = v18 + 8;
    v18[11] = 0;
    v18[12] = 0;
    v18[14] = 0;
    v18[17] = 0;
    v18[13] = v18 + 14;
    v18[29] = 0;
    v18[16] = v18 + 17;
    v18[20] = 0;
    v18[19] = v18 + 20;
    v18[23] = 0;
    v18[15] = 0;
    v18[21] = 0;
    v18[22] = v18 + 23;
    v18[26] = 0;
    uint64_t v42 = (realityio::mtlx *)v18;
    v18[18] = 0;
    v18[24] = 0;
    v18[25] = v18 + 26;
    v18[27] = 0;
    v18[28] = v18 + 29;
    v18[33] = 0;
    v18[32] = 0;
    v18[30] = 0;
    v18[31] = v18 + 32;
    v18[36] = 0;
    v18[35] = 0;
    v18[38] = 0;
    v18[34] = v18 + 35;
    v18[39] = 0;
    v18[37] = v18 + 38;
    int v45 = v51;
    unsigned __int8 v46 = v52;
    if (v52) {
      atomic_fetch_add_explicit(v52 + 6, 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v47, &v53);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v48, &v54);
    uint64_t v49 = v55;
    if ((v55 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v49 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = (uint64_t *)&v81;
    int v77 = (uint64_t *)&v78;
    uint64_t v78 = 0;
    int v72 = v45;
    int v73 = v46;
    if (v46) {
      atomic_fetch_add_explicit(v46 + 6, 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v74, &v47);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v75, &v48);
    uint64_t v76 = v49;
    if ((v49 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v76 &= 0xFFFFFFFFFFFFFFF8;
    }
    realityio::mtlx::buildConnectionsMaps((pxrInternal__aapl__pxrReserved__::UsdObject *)&v72, &v80, &v77);
    if ((v76 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v74);
    if (v73) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v73);
    }
    int v67 = v45;
    uint64_t v68 = v46;
    if (v46) {
      atomic_fetch_add_explicit(v46 + 6, 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v69, &v47);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v70, &v48);
    uint64_t v71 = v49;
    if ((v49 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v71 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes((uint64_t *)&v92, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v67);
    int v20 = v93;
    if (v92 != (char *)v93)
    {
      int v21 = v92 + 16;
      do
      {
        uint64_t v22 = v21 - 16;
        LODWORD(v100) = *((_DWORD *)v21 - 4);
        uint64_t v23 = *((void *)v21 - 1);
        uint64_t v101 = (char *)v23;
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v102, v21);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v102 + 1, (_DWORD *)v21 + 1);
        uint64_t v24 = *((void *)v21 + 1);
        *((void *)&v102 + 1) = v24;
        if ((v24 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *((void *)&v102 + 1) &= 0xFFFFFFFFFFFFFFF8;
        }
        Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v100);
        if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
          pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
        }
        pxrInternal__aapl__pxrReserved__::TfStringTokenize();
        if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v100)) {
          goto LABEL_98;
        }
        uint64_t v26 = v111;
        if (v112 == (atomic_ullong *)v111) {
          goto LABEL_98;
        }
        int v27 = *(char *)(v111 + 23);
        if (v27 < 0)
        {
          if (*(void *)(v111 + 8) == 6)
          {
            uint64_t v26 = *(void *)v111;
LABEL_83:
            int v28 = *(_DWORD *)v26;
            int v29 = *(unsigned __int16 *)(v26 + 4);
            if (v28 == 1970302569 && v29 == 29556)
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v100, &__p);
              realityio::mtlx::chaseConnection(&v83, &__p, (uint64_t)&v77);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v87, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v67);
              uint64_t v31 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v87);
              pxrInternal__aapl__pxrReserved__::UsdStage::GetAttributeAtPath((uint64_t *)&__p, v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v83);
              char v32 = v88;
              if (v88
                && atomic_fetch_add_explicit((atomic_uint *volatile)v88 + 2, 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(pxrInternal__aapl__pxrReserved__ *))(*(void *)v32 + 8))(v32);
              }
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p))
              {
                pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearConnections((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
                uint64_t v33 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v100);
                pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v67, v33);
              }
              if ((BYTE8(v98) & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v98 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
              if (v97) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v97);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
            }
          }
        }
        else if (v27 == 6)
        {
          goto LABEL_83;
        }
LABEL_98:
        std::string __p = &v111;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if ((BYTE8(v102) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v102 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
        if (v101) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v101);
        }
        v21 += 32;
      }
      while (v22 + 32 != (char *)v20);
    }
    uint64_t v100 = &v92;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    if ((v71 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
    if (v68) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v68);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v80, v81);
    unint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v80 = (uint64_t *)&v81;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v77, v78);
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    int v77 = (uint64_t *)&v78;
    int v62 = v45;
    int v63 = v46;
    if (v46) {
      atomic_fetch_add_explicit(v46 + 6, 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v64, &v47);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v65, &v48);
    uint64_t v66 = v49;
    if ((v49 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v66 &= 0xFFFFFFFFFFFFFFF8;
    }
    realityio::mtlx::buildConnectionsMaps((pxrInternal__aapl__pxrReserved__::UsdObject *)&v62, &v80, &v77);
    if ((v66 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v64);
    if (v63) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v63);
    }
    int v57 = v45;
    uint64_t v58 = v46;
    if (v46) {
      atomic_fetch_add_explicit(v46 + 6, 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v59, &v47);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v60, &v48);
    uint64_t v61 = v49;
    if ((v49 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v61 &= 0xFFFFFFFFFFFFFFF8;
    }
    memset(v110, 0, sizeof(v110));
    uint64_t v34 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v109[0] = MEMORY[0x263F90740] + 16;
    uint64_t UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v34);
    unint64_t v37 = *(void *)UsdPrimAllPrimsPredicate;
    uint64_t v36 = *(void *)(UsdPrimAllPrimsPredicate + 8);
    uint64_t v38 = *(void *)(UsdPrimAllPrimsPredicate + 16);
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v37 & 0x2000) != 0 || (v36 & 0x2000) == 0))
    {
      v37 |= 0x2000uLL;
      v36 &= ~0x2000uLL;
    }
    std::string __p = (void *)v37;
    uint64_t v97 = v36;
    *(void *)&long long v98 = v38;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v57, (uint64_t *)&__p, (uint64_t)&v100);
    std::string __p = v100;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v97, &v101);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v97 + 1, (_DWORD *)&v101 + 1);
    long long v98 = v102;
    uint64_t v99 = v103;
    v92 = v104;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v93, &v105);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v93 + 1, &v106);
    long long v94 = v107;
    uint64_t v95 = v108;
    int v44 = *(uint64_t (**)(void **))(MEMORY[0x263F906F0] + 48);
    while (__p != v92
         || (void **)v97 != v93
         || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v98, (uint64_t)&v94))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&__p, (uint64_t)&v87);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      int v83 = (void *)(MEMORY[0x263F906F0] + 16);
      if (v84 && (*((unsigned char *)v84 + 57) & 8) == 0 && (v44(&v83) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(&v111, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v83);
        uint64_t v86 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      }
      MEMORY[0x2455CECB0](&v83);
      if ((v91 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v89);
      if (v88) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v88);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v93);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v97);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
    MEMORY[0x2455CEF40](v109);
    uint64_t v100 = v110;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    if ((v61 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
    if (v58) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v58);
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45, v110);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v100, v110);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v100 + 1, (_DWORD *)v110 + 1);
    realityio::mtlx::MxDataSource::addPrim((uint64_t)v19, &v100, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v100);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v110);
    int v83 = &v83;
    uint64_t v84 = &v83;
    uint64_t v85 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v45);
    int v39 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&__p);
    pxrInternal__aapl__pxrReserved__::UsdStage::TraverseAll((uint64_t *)&v100, v39);
    uint64_t v40 = v97;
    if (v97 && atomic_fetch_add_explicit((atomic_uint *volatile)(v97 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&v100, (uint64_t)&__p);
    v92 = v101;
    int v93 = &v100;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    DWORD2(v94) = 0;
    WORD6(v94) = 0;
    while ((void **)v97 != v93
         || __p != v92
         || (void)v98 != (void)v94
         || DWORD2(v98) != DWORD2(v94)
         || BYTE12(v98) != BYTE12(v94)
         || BYTE13(v98) != BYTE13(v94))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&__p, (uint64_t)&v111);
      LODWORD(v87) = v111;
      unint64_t v88 = (pxrInternal__aapl__pxrReserved__ *)v112;
      if (v112) {
        atomic_fetch_add_explicit(v112 + 6, 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v89, &v113);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v90, &v114);
      uint64_t v91 = v115;
      if ((v115 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v115 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v91 &= 0xFFFFFFFFFFFFFFF8;
      }
      realityio::mtlx::fillDataSourceFromShaderPrim(v19, (pxrInternal__aapl__pxrReserved__ **)&v87, (uint64_t *)&v83);
      if ((v91 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v89);
      if (v88) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v88);
      }
      if ((v115 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v115 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v113);
      if (v112) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v112);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
    std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::clear((uint64_t *)&v83);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v77, v78);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v80, v81);
    if ((v49 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
    if (v46) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v46);
    }
    *a3 = v19;
    a3[1] = v42;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  if ((v55 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
  if (v52) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v52);
  }
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v56);
}

void sub_23F671EA4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void realityio::mtlx::mtlxToDataSource(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  uint64_t v6 = (realityio *)[v5 isFileURL];
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v5 fileSystemRepresentation]);
    realityio::mtlx::UsdMtlxGetDocument((uint64_t)__p, &v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = v12;
    uint64_t v9 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    realityio::mtlx::mtlxDocToDataSource(a1, &v8, (realityio::mtlx **)a3);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  else
  {
    uint64_t v7 = *(NSObject **)(realityio::logObjects(v6) + 32);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports loading content from file URLs", (uint8_t *)__p, 2u);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

void sub_23F672544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void realityio::mtlx::mtlxToDataSource(uint64_t a1@<X0>, uint64_t a2@<X1>, realityio::mtlx **a3@<X8>)
{
  realityio::mtlx::UsdMtlxGetDocumentFromString(a2, &v7);
  uint64_t v5 = v7;
  uint64_t v6 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::mtlx::mtlxDocToDataSource(a1, &v5, a3);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_23F67260C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 8, (_DWORD *)a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 9, (_DWORD *)(a2 + 4));
  *((void *)v6 + 5) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]<true,0>(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  uint64_t v7 = *a3;
  *(void *)(a1 + 8) = *a3;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x38uLL);
    v9[1] = a1 + 1;
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue,0>((uint64_t)(v6 + 4), a3);
    char v10 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue,0>(uint64_t a1, uint64_t a2)
{
  int v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((void *)(a1 + 8), (void *)(a2 + 8));
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::VtValue>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::VtValue>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x28uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 7, (_DWORD *)a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 8, (_DWORD *)(a2 + 4));
  v6[9] = *(void *)(a2 + 8);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::NeoPrimType>,0>((uint64_t)v1 + 28);
    }
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::NeoPrimType>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unsigned int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        unsigned int v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t realityio::mtlx::MxDataSource::addBaseName(realityio::mtlx::MxDataSource *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int v3 = (uint64_t **)((char *)this + 152);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]<true,0>((uint64_t)&v5, a2, (uint64_t *)a3);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>(v3, &v5, (uint64_t)&v5);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
}

void sub_23F672D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::mtlx::MxDataSource::addConnectedAttribute(uint64_t a1, _DWORD *a2, _DWORD **a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v7 + 1, a2 + 1);
  memset(v8, 0, sizeof(v8));
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(v8, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 3);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>((uint64_t **)(a1 + 224), &v7, (uint64_t)&v7);
  uint64_t v9 = (void **)v8;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
}

void sub_23F672DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::addInputsOutputs(uint64_t a1, _DWORD *a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v7 = (uint64_t **)(a1 + 80);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath&,std::vector<pxrInternal__aapl__pxrReserved__::TfToken> const&,0>((uint64_t)&v9, a2, a3);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>(v7, &v9, (uint64_t)&v9);
  uint64_t v11 = (void **)v10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath&,std::vector<pxrInternal__aapl__pxrReserved__::TfToken> const&,0>((uint64_t)&v9, a2, a4);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>((uint64_t **)(a1 + 104), &v9, (uint64_t)&v9);
  uint64_t v11 = (void **)v10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
}

void sub_23F672EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(_DWORD *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  void *v2 = 0;
  v2[1] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v2 + 4, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v2 + 5, a1 + 1);
  return v2;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::~pair(uint64_t a1)
{
  unsigned int v3 = (void **)(a1 + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x40uLL);
    v9[1] = a1 + 1;
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,0>((uint64_t)(v6 + 4), a3);
    char v10 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,0>(uint64_t a1)
{
  unsigned int v3 = (void **)(a1 + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::~pair(uint64_t a1)
{
  unsigned int v3 = (void **)(a1 + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (char **)(a1 + 1);
  uint64_t v5 = (char *)a1[1];
  if (!v5)
  {
    uint64_t v8 = (char **)(a1 + 1);
LABEL_10:
    uint64_t v11 = (char *)operator new(0x40uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 8, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 9, (_DWORD *)(a3 + 4));
    *(_OWORD *)(v11 + 40) = *(_OWORD *)(a3 + 8);
    *((void *)v11 + 7) = *(void *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)uint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v8;
    uint64_t *v6 = v11;
    uint64_t v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      uint64_t v11 = *v6;
    }
    uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (char **)v5;
      uint64_t v9 = v5 + 32;
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (void *)v5 + 4)) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, a2);
    if (!result) {
      break;
    }
    uint64_t v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (!*v6) {
    goto LABEL_10;
  }
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath&,std::vector<pxrInternal__aapl__pxrReserved__::TfToken> const&,0>(uint64_t a1, _DWORD *a2, uint64_t **a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((void *)(a1 + 8), *a3, a3[1], a3[1] - *a3);
  return a1;
}

void sub_23F6732D0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(uint64_t **a1, void *a2, _DWORD *a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x30uLL);
    v9[1] = a1 + 1;
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]((_DWORD *)v6 + 7, a3);
    char v10 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::SdfPath>,0>((uint64_t)v2 + 28);
    }
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::SdfPath>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::SdfPath>,0>((uint64_t)a2 + 28);
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<realityio::mtlx::MxDataSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F340EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::mtlx::MxDataSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F340EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::mtlx::MxDataSource>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26F340F08;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1 + 296, *(void **)(a1 + 304));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1 + 272, *(void **)(a1 + 280));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(a1 + 248, *(void **)(a1 + 256));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1 + 224, *(void **)(a1 + 232));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>>::destroy(*(void **)(a1 + 208));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1 + 176, *(void **)(a1 + 184));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>>>::destroy(*(void **)(a1 + 160));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(*(char **)(a1 + 136));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(*(char **)(a1 + 112));
  uint64_t v2 = (void **)(a1 + 80);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>>>::destroy(*(void **)(a1 + 64));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy(a1 + 32, *(void **)(a1 + 40));
}

uint64_t realityio::mtlx::MxDataSource::getIndex(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3 = a1 + 8;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v6, a2);
  uint64_t v4 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v3, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  if ((void *)(a1 + 16) == v4) {
    return 0;
  }
  else {
    return *((unsigned int *)v4 + 9);
  }
}

void sub_23F67365C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

_DWORD *realityio::mtlx::MxDataSource::getPath@<X0>(realityio::mtlx::MxDataSource *this@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v3 = *((void *)this + 7);
  uint64_t v4 = a3 + 1;
  if (a2 >= (unint64_t)((*((void *)this + 8) - v3) >> 3))
  {
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  }
  else
  {
    uint64_t v5 = (_DWORD *)(v3 + 8 * a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a3, v5);
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, v5 + 1);
  }
}

uint64_t realityio::mtlx::MxDataSource::getPath@<X0>(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, uint64_t *a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 16))(&v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
}

void sub_23F673784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

BOOL realityio::mtlx::MxDataSource::hasValue(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v3 = *((void *)this + 7);
  if (a2 < (unint64_t)((*((void *)this + 8) - v3) >> 3))
  {
    uint64_t v6 = (_DWORD *)(v3 + 8 * a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, v6);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, v6 + 1);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a3);
    uint64_t v7 = (char *)this + 128;
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 128, &v17);
    uint64_t v9 = v8;
    if ((realityio::mtlx::MxDataSource *)((char *)this + 136) == v8)
    {
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      std::operator+<char>();
      MEMORY[0x2455CF830](&v15, __p);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v16, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v15);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v17, (int *)&v16);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v17 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v7, &v17);
      if (v9 == v11)
      {
        if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
          pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
        }
        std::operator+<char>();
        MEMORY[0x2455CF830](&v15, __p);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v16, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v15);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v17, (int *)&v16);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v17 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
        if ((v15 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v7, &v17);
        if (v9 == v11)
        {
          BOOL v10 = 0;
          goto LABEL_21;
        }
      }
      uint64_t v9 = v11;
    }
    BOOL v10 = *((unsigned char *)v9 + 36) != 0;
LABEL_21:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
    return v10;
  }
  return 0;
}

void sub_23F6739F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t realityio::mtlx::MxDataSource::getBaseName@<X0>(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, int a3@<W3>, void *a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 16))(&v19);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v18, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, a2);
  uint64_t v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 152, &v18);
  if ((void *)((char *)this + 160) == v8)
  {
    if (a3)
    {
      BOOL v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::string::basic_string[abi:ne180100]<0>(__p, "inputs:");
      if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (std::string *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
      }
      realityio::mtlx::MxDataSource::stripLeading(&v17, (char *)__p, EmptyString);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::string::basic_string[abi:ne180100]<0>(__p, "outputs:");
      if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v13 = (std::string *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v13 = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      realityio::mtlx::MxDataSource::stripLeading(&v17, (char *)__p, v13);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    MEMORY[0x2455CF830](a4, &v17);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v9 = v8[5];
    *a4 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *a4 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
}

void sub_23F673C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a21);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 40));
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getTypeName(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 16))(&v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
  uint64_t v5 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 176, &v7);
  if ((void *)((char *)this + 184) == v5) {
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v9);
  }
  else {
    uint64_t v9 = v5[5];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  return v9;
}

void sub_23F673D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

BOOL realityio::mtlx::MxDataSource::getInputValue(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4 = *((void *)this + 7);
  if (a2 >= (unint64_t)((*((void *)this + 8) - v4) >> 3)) {
    return 0;
  }
  uint64_t v8 = (_DWORD *)(v4 + 8 * a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, v8);
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, v8 + 1);
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  std::operator+<char>();
  MEMORY[0x2455CF830](&v16, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16);
  BOOL v10 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, __p);
  if (a4) {
    BOOL v11 = (void *)((char *)this + 208) == v10;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = v11;
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a4, v10 + 5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  return (v12 & 1) == 0;
}

void sub_23F673EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a17);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getInputValue(realityio::mtlx::MxDataSource *this, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  int v5 = (*(uint64_t (**)(realityio::mtlx::MxDataSource *, uint64_t, const pxrInternal__aapl__pxrReserved__::TfToken *, unsigned char *))(*(void *)this + 56))(this, a2, a3, v9) ^ 1;
  if (!a4) {
    LOBYTE(v5) = 1;
  }
  if ((v5 & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)v9))
  {
    uint64_t v7 = 0;
  }
  else
  {
    if ((v10 & 4) != 0) {
      uint64_t v6 = (void *)(*(uint64_t (**)(unsigned char *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(v9);
    }
    else {
      uint64_t v6 = v9;
    }
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(a4, v6);
    uint64_t v7 = 1;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  return v7;
}

void sub_23F673FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getInputValue(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, std::string **))(*(void *)a1 + 56))(a1, a2, a3, &__str) ^ 1;
  if (!a4) {
    LOBYTE(v5) = 1;
  }
  if ((v5 & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&__str))
  {
    uint64_t v7 = 0;
  }
  else
  {
    if ((v10 & 4) != 0) {
      uint64_t v6 = (std::string *)(*(uint64_t (**)(std::string **))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(&__str);
    }
    else {
      uint64_t v6 = __str;
    }
    std::string::operator=(a4, v6);
    uint64_t v7 = 1;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__str);
  return v7;
}

void sub_23F6740EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

BOOL realityio::mtlx::MxDataSource::getRawConnectedSourcePaths(void *a1, unsigned int a2, void *a3, int a4, void *a5)
{
  uint64_t v5 = a1[7];
  if (a2 >= (unint64_t)((a1[8] - v5) >> 3)) {
    return 0;
  }
  uint64_t v10 = (_DWORD *)(v5 + 8 * a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, v10);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, v10 + 1);
  if (a4)
  {
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
LABEL_7:
  }
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
LABEL_8:
  std::operator+<char>();
  MEMORY[0x2455CF830](&v18, __p);
  uint64_t v13 = v18;
  uint64_t v18 = 0;
  uint64_t v19 = v13;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v19, a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19);
  char v14 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)(a1 + 28), __p);
  BOOL v12 = 0;
  if (a5 && a1 + 29 != v14)
  {
    if (v14 + 5 != a5) {
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)a5, (_DWORD *)v14[5], (_DWORD *)v14[6], (uint64_t)(v14[6] - v14[5]) >> 3);
    }
    BOOL v12 = *a5 != a5[1];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  return v12;
}

void sub_23F6742BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a17);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getAttributeConnections(uint64_t a1, unsigned int a2, atomic_uint **a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (a2 >= (unint64_t)((*(void *)(a1 + 64) - v4) >> 3)) {
    return 0;
  }
  uint64_t v8 = (_DWORD *)(v4 + 8 * a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, v8);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, v8 + 1);
  uint64_t v9 = *a3;
  uint64_t v16 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v10;
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16);
  uint64_t v11 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 224, &v15);
  if (a4) {
    BOOL v12 = a1 + 232 == (void)v11;
  }
  else {
    BOOL v12 = 1;
  }
  uint64_t v13 = !v12;
  if (!v12 && v11 + 5 != (void *)a4) {
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(a4, (_DWORD *)v11[5], (_DWORD *)v11[6], (uint64_t)(v11[6] - v11[5]) >> 3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  return v13;
}

void sub_23F674464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if ((a4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

void realityio::mtlx::MxDataSource::surfaceOutput(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  std::operator+<char>();
  uint64_t v7 = std::string::append(&v11, ":surface");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  MEMORY[0x2455CF830](&v11, __p);
  std::string::size_type v9 = v11.__r_.__value_.__r.__words[0];
  if ((v11.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v11.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)v9 &= 0xFFFFFFFFFFFFFFF8; {
    if ((v11.__r_.__value_.__s.__data_[0] & 7) != 0)
    }
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)a4 = this;
  *(_DWORD *)(a4 + 8) = a3;
  *(void *)(a4 + 16) = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)(v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      *(void *)(a4 + 16) = v10;
    }
    atomic_fetch_add_explicit(v10, 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F6745C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL realityio::mtlx::MxDataSource::getAttrValue(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4 = *((void *)this + 7);
  if (a2 >= (unint64_t)((*((void *)this + 8) - v4) >> 3)) {
    return 0;
  }
  long long v8 = (_DWORD *)(v4 + 8 * a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, v8);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, v8 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v13, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, a3);
  std::string::size_type v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, &v13);
  BOOL v10 = !a4 || (void *)((char *)this + 208) == v9;
  BOOL v11 = v10;
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a4, v9 + 5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  return !v11;
}

void sub_23F6746E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

BOOL realityio::mtlx::MxDataSource::getAttrToken(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v4 = *((void *)this + 7);
  if (a2 >= (unint64_t)((*((void *)this + 8) - v4) >> 3)) {
    return 0;
  }
  long long v8 = (_DWORD *)(v4 + 8 * a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, v8);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, v8 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v16, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, a3);
  std::string::size_type v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, &v16);
  BOOL v10 = v9;
  if (a4) {
    BOOL v11 = (void *)((char *)this + 208) == v9;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = v11;
  if (!v11)
  {
    uint64_t v13 = v9 + 5;
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 5)))
    {
      uint64_t v14 = v10[6];
      if ((v14 & 4) != 0) {
        uint64_t v13 = (void *)(*(uint64_t (**)(void *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v10 + 5);
      }
      pxrInternal__aapl__pxrReserved__::TfToken::operator=(a4, v13);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  return (v12 & 1) == 0;
}

void sub_23F674828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getAttrRoleName@<X0>(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, unsigned int a3@<W1>, atomic_uint **a4@<X8>)
{
  uint64_t v7 = (_DWORD *)(*((void *)this + 7) + 8 * a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, v7);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, v7 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, a2);
  long long v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 248, &v12);
  if ((void *)((char *)this + 256) == v8)
  {
    BOOL v10 = 0;
LABEL_6:
    *a4 = v10;
    goto LABEL_7;
  }
  std::string::size_type v9 = (atomic_uint *)v8[5];
  *a4 = v9;
  if ((v9 & 7) != 0)
  {
    BOOL v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      goto LABEL_6;
    }
  }
LABEL_7:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
}

void sub_23F674934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t realityio::mtlx::MxDataSource::getAttrColorSpace@<X0>(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, unsigned int a3@<W1>, atomic_uint **a4@<X8>)
{
  uint64_t v7 = (_DWORD *)(*((void *)this + 7) + 8 * a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, v7);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, v7 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, a2);
  long long v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 272, &v12);
  if ((void *)((char *)this + 280) == v8)
  {
    BOOL v10 = 0;
LABEL_6:
    *a4 = v10;
    goto LABEL_7;
  }
  std::string::size_type v9 = (atomic_uint *)v8[5];
  *a4 = v9;
  if ((v9 & 7) != 0)
  {
    BOOL v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      goto LABEL_6;
    }
  }
LABEL_7:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
}

void sub_23F674A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t realityio::mtlx::MxDataSource::nodeGraphGetList@<X0>(realityio::mtlx::MxDataSource *this@<X0>, int a2@<W1>, int a3@<W2>, int64x2_t *a4@<X8>)
{
  a4->i64[0] = 0;
  a4->i64[1] = 0;
  a4[1].i64[0] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 16))(&v57);
  if (a3)
  {
    long long v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 80, &v57);
    if ((void *)((char *)this + 88) != v8)
    {
      std::string::size_type v9 = (unint64_t *)v8[5];
      for (uint64_t i = (unint64_t *)v8[6]; v9 != i; ++v9)
      {
        unint64_t v11 = *v9;
        if ((*v9 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v11 &= 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t v12 = v11;
        if ((v11 & 7) != 0)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
            unint64_t v12 = v11;
          }
          else {
            unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        unint64_t v14 = a4->u64[1];
        unint64_t v13 = a4[1].u64[0];
        if (v14 >= v13)
        {
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - a4->i64[0]) >> 3);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - a4->i64[0]) >> 3);
          if (2 * v18 > v17) {
            unint64_t v17 = 2 * v18;
          }
          if (v18 >= 0x555555555555555) {
            unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v19 = v17;
          }
          int v56 = a4 + 1;
          int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)a4[1].i64, v19);
          uint64_t v22 = &v20[24 * v16];
          *(void *)uint64_t v22 = this;
          *((_DWORD *)v22 + 2) = a2;
          *((void *)v22 + 2) = v12;
          uint64_t v24 = a4->i64[0];
          unint64_t v23 = a4->u64[1];
          if (v23 == a4->i64[0])
          {
            int64x2_t v28 = vdupq_n_s64(v23);
            unsigned int v25 = &v20[24 * v16];
          }
          else
          {
            unsigned int v25 = &v20[24 * v16];
            do
            {
              uint64_t v26 = *(void *)(v23 - 24);
              v23 -= 24;
              int v27 = *(_DWORD *)(v23 + 8);
              *((void *)v25 - 3) = v26;
              v25 -= 24;
              *((_DWORD *)v25 + 2) = v27;
              *((void *)v25 + 2) = *(void *)(v23 + 16);
              *(void *)(v23 + 16) = 0;
            }
            while (v23 != v24);
            int64x2_t v28 = *a4;
          }
          int v15 = v22 + 24;
          a4->i64[0] = (uint64_t)v25;
          a4->i64[1] = (uint64_t)(v22 + 24);
          int64x2_t v54 = v28;
          uint64_t v29 = a4[1].i64[0];
          a4[1].i64[0] = (uint64_t)&v20[24 * v21];
          uint64_t v55 = v29;
          uint64_t v53 = v28.i64[0];
          std::__split_buffer<realityio::mtlx::NeoShadeInput>::~__split_buffer((uint64_t)&v53);
        }
        else
        {
          *(void *)unint64_t v14 = this;
          *(_DWORD *)(v14 + 8) = a2;
          int v15 = (char *)(v14 + 24);
          *(void *)(v14 + 16) = v12;
        }
        a4->i64[1] = (uint64_t)v15;
        if ((v11 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
    }
  }
  else
  {
    uint64_t v30 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 104, &v57);
    if ((void *)((char *)this + 112) != v30)
    {
      uint64_t v31 = (unint64_t *)v30[5];
      for (uint64_t j = (unint64_t *)v30[6]; v31 != j; ++v31)
      {
        unint64_t v33 = *v31;
        if ((*v31 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v33 &= 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t v34 = v33;
        if ((v33 & 7) != 0)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
            unint64_t v34 = v33;
          }
          else {
            unint64_t v34 = v33 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        unint64_t v36 = a4->u64[1];
        unint64_t v35 = a4[1].u64[0];
        if (v36 >= v35)
        {
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - a4->i64[0]) >> 3);
          unint64_t v39 = v38 + 1;
          if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - a4->i64[0]) >> 3);
          if (2 * v40 > v39) {
            unint64_t v39 = 2 * v40;
          }
          if (v40 >= 0x555555555555555) {
            unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v41 = v39;
          }
          int v56 = a4 + 1;
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)a4[1].i64, v41);
          int v44 = &v42[24 * v38];
          *(void *)int v44 = this;
          *((_DWORD *)v44 + 2) = a2;
          *((void *)v44 + 2) = v34;
          uint64_t v46 = a4->i64[0];
          unint64_t v45 = a4->u64[1];
          if (v45 == a4->i64[0])
          {
            int64x2_t v50 = vdupq_n_s64(v45);
            int v47 = &v42[24 * v38];
          }
          else
          {
            int v47 = &v42[24 * v38];
            do
            {
              uint64_t v48 = *(void *)(v45 - 24);
              v45 -= 24;
              int v49 = *(_DWORD *)(v45 + 8);
              *((void *)v47 - 3) = v48;
              v47 -= 24;
              *((_DWORD *)v47 + 2) = v49;
              *((void *)v47 + 2) = *(void *)(v45 + 16);
              *(void *)(v45 + 16) = 0;
            }
            while (v45 != v46);
            int64x2_t v50 = *a4;
          }
          unint64_t v37 = v44 + 24;
          a4->i64[0] = (uint64_t)v47;
          a4->i64[1] = (uint64_t)(v44 + 24);
          int64x2_t v54 = v50;
          uint64_t v51 = a4[1].i64[0];
          a4[1].i64[0] = (uint64_t)&v42[24 * v43];
          uint64_t v55 = v51;
          uint64_t v53 = v50.i64[0];
          std::__split_buffer<realityio::mtlx::NeoShadeInput>::~__split_buffer((uint64_t)&v53);
        }
        else
        {
          *(void *)unint64_t v36 = this;
          *(_DWORD *)(v36 + 8) = a2;
          unint64_t v37 = (char *)(v36 + 24);
          *(void *)(v36 + 16) = v34;
        }
        a4->i64[1] = (uint64_t)v37;
        if ((v33 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
}

void sub_23F674E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::nodeGraphGetInput@<X0>(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  long long v8 = (char *)this + 80;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 16))(&v33);
  std::string::size_type v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v8, &v33);
  if ((void *)((char *)this + 88) != v9)
  {
    BOOL v10 = (uint64_t *)v9[5];
    for (uint64_t i = (uint64_t *)v9[6]; v10 != i; ++v10)
    {
      uint64_t v12 = *v10;
      if ((*v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::string::basic_string[abi:ne180100]<0>(__p, "inputs:");
      unint64_t v14 = (atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (std::string *)(v14 + 4);
      }
      else {
        unint64_t EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      }
      realityio::mtlx::MxDataSource::stripLeading(&v32, (char *)__p, EmptyString);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v17 = (unsigned __int8 *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v17 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
      }
      uint64_t v18 = v17[23];
      if ((v18 & 0x80u) == 0) {
        uint64_t v19 = v17[23];
      }
      else {
        uint64_t v19 = *((void *)v17 + 1);
      }
      std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      int v21 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v32.__r_.__value_.__l.__size_;
      }
      if (v19 == size)
      {
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v22 = &v32;
        }
        else {
          uint64_t v22 = (std::string *)v32.__r_.__value_.__r.__words[0];
        }
        if ((v18 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v17, v22, *((void *)v17 + 1)))
          {
LABEL_41:
            uint64_t v26 = *(void *)a2;
            if ((*(void *)a2 & 7) != 0)
            {
              char add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
              *(void *)a4 = this;
              if ((add_explicit & 1) == 0) {
                v26 &= 0xFFFFFFFFFFFFFFF8;
              }
              *(_DWORD *)(a4 + 8) = a3;
              *(void *)(a4 + 16) = v26;
              if ((v26 & 7) != 0)
              {
                int64x2_t v28 = (atomic_uint *)(v26 & 0xFFFFFFFFFFFFFFF8);
                if ((atomic_fetch_add_explicit(v28, 2u, memory_order_relaxed) & 1) == 0) {
                  *(void *)(a4 + 16) = v28;
                }
                atomic_fetch_add_explicit(v28, 0xFFFFFFFE, memory_order_release);
              }
            }
            else
            {
              *(void *)a4 = this;
              *(_DWORD *)(a4 + 8) = a3;
              *(void *)(a4 + 16) = v26;
            }
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v32.__r_.__value_.__l.__data_);
            }
            if ((v12 & 7) != 0) {
              atomic_fetch_add_explicit(v14, 0xFFFFFFFE, memory_order_release);
            }
            goto LABEL_54;
          }
        }
        else
        {
          if (!v17[23]) {
            goto LABEL_41;
          }
          while (*v17 == v22->__r_.__value_.__s.__data_[0])
          {
            ++v17;
            uint64_t v22 = (std::string *)((char *)v22 + 1);
            if (!--v18) {
              goto LABEL_41;
            }
          }
        }
      }
      if (v21 < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit(v14, 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  uint64_t v23 = *(void *)a2;
  if ((*(void *)a2 & 7) != 0)
  {
    char v24 = atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
    *(void *)a4 = this;
    if ((v24 & 1) == 0) {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_DWORD *)(a4 + 8) = a3;
    *(void *)(a4 + 16) = v23;
    if ((v23 & 7) != 0)
    {
      unsigned int v25 = (atomic_uint *)(v23 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v25, 2u, memory_order_relaxed) & 1) == 0) {
        *(void *)(a4 + 16) = v25;
      }
      atomic_fetch_add_explicit(v25, 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *(void *)a4 = this;
    *(_DWORD *)(a4 + 8) = a3;
    *(void *)(a4 + 16) = v23;
  }
LABEL_54:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
}

void sub_23F675170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a22);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::nodeGraphGetOutput@<X0>(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  long long v8 = (char *)this + 104;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 16))(&v33);
  std::string::size_type v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v8, &v33);
  if ((void *)((char *)this + 112) != v9)
  {
    BOOL v10 = (uint64_t *)v9[5];
    for (uint64_t i = (uint64_t *)v9[6]; v10 != i; ++v10)
    {
      uint64_t v12 = *v10;
      if ((*v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::string::basic_string[abi:ne180100]<0>(__p, "outputs:");
      unint64_t v14 = (atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (std::string *)(v14 + 4);
      }
      else {
        unint64_t EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      }
      realityio::mtlx::MxDataSource::stripLeading(&v32, (char *)__p, EmptyString);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v17 = (unsigned __int8 *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v17 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
      }
      uint64_t v18 = v17[23];
      if ((v18 & 0x80u) == 0) {
        uint64_t v19 = v17[23];
      }
      else {
        uint64_t v19 = *((void *)v17 + 1);
      }
      std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      int v21 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v32.__r_.__value_.__l.__size_;
      }
      if (v19 == size)
      {
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v22 = &v32;
        }
        else {
          uint64_t v22 = (std::string *)v32.__r_.__value_.__r.__words[0];
        }
        if ((v18 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v17, v22, *((void *)v17 + 1)))
          {
LABEL_41:
            uint64_t v26 = *(void *)a2;
            if ((*(void *)a2 & 7) != 0)
            {
              char add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
              *(void *)a4 = this;
              if ((add_explicit & 1) == 0) {
                v26 &= 0xFFFFFFFFFFFFFFF8;
              }
              *(_DWORD *)(a4 + 8) = a3;
              *(void *)(a4 + 16) = v26;
              if ((v26 & 7) != 0)
              {
                int64x2_t v28 = (atomic_uint *)(v26 & 0xFFFFFFFFFFFFFFF8);
                if ((atomic_fetch_add_explicit(v28, 2u, memory_order_relaxed) & 1) == 0) {
                  *(void *)(a4 + 16) = v28;
                }
                atomic_fetch_add_explicit(v28, 0xFFFFFFFE, memory_order_release);
              }
            }
            else
            {
              *(void *)a4 = this;
              *(_DWORD *)(a4 + 8) = a3;
              *(void *)(a4 + 16) = v26;
            }
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v32.__r_.__value_.__l.__data_);
            }
            if ((v12 & 7) != 0) {
              atomic_fetch_add_explicit(v14, 0xFFFFFFFE, memory_order_release);
            }
            goto LABEL_54;
          }
        }
        else
        {
          if (!v17[23]) {
            goto LABEL_41;
          }
          while (*v17 == v22->__r_.__value_.__s.__data_[0])
          {
            ++v17;
            uint64_t v22 = (std::string *)((char *)v22 + 1);
            if (!--v18) {
              goto LABEL_41;
            }
          }
        }
      }
      if (v21 < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit(v14, 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  uint64_t v23 = *(void *)a2;
  if ((*(void *)a2 & 7) != 0)
  {
    char v24 = atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
    *(void *)a4 = this;
    if ((v24 & 1) == 0) {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_DWORD *)(a4 + 8) = a3;
    *(void *)(a4 + 16) = v23;
    if ((v23 & 7) != 0)
    {
      unsigned int v25 = (atomic_uint *)(v23 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v25, 2u, memory_order_relaxed) & 1) == 0) {
        *(void *)(a4 + 16) = v25;
      }
      atomic_fetch_add_explicit(v25, 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *(void *)a4 = this;
    *(_DWORD *)(a4 + 8) = a3;
    *(void *)(a4 + 16) = v23;
  }
LABEL_54:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
}

void sub_23F675484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a22);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::gatherSources(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = a1 + 80;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 16))(&v19);
  uint64_t v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v5, &v19);
  if ((void *)(a1 + 88) != v6)
  {
    uint64_t v7 = (uint64_t *)v6[5];
    for (uint64_t i = (uint64_t *)v6[6]; v7 != i; ++v7)
    {
      uint64_t v9 = *v7;
      uint64_t v18 = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v18 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18);
      BOOL v10 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 224, &v17);
      if ((void *)(a1 + 232) != v10) {
        realityio::mtlx::MxDataSource::mergeSourcePrimIndices(a1, (_DWORD *)v10[5], (_DWORD *)v10[6], a3);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  unint64_t v11 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 104, &v19);
  if ((void *)(a1 + 112) != v11)
  {
    uint64_t v12 = (uint64_t *)v11[5];
    for (uint64_t j = (uint64_t *)v11[6]; v12 != j; ++v12)
    {
      uint64_t v14 = *v12;
      uint64_t v18 = v14;
      if ((v14 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v18 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18);
      int v15 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 224, &v17);
      if ((void *)(a1 + 232) != v15) {
        realityio::mtlx::MxDataSource::mergeSourcePrimIndices(a1, (_DWORD *)v15[5], (_DWORD *)v15[6], a3);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
}

void sub_23F675704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::shaderUsesSecondUV(uint64_t a1, uint64_t *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](&v12, "info:id");
  unsigned int v3 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a2;
  unsigned int v17 = v3;
  unint64_t v18 = v12;
  if ((v12 & 7) != 0)
  {
    unint64_t v4 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v18 = v4;
    }
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void, unint64_t *, uint64_t *))(*(void *)v16 + 112))(v16, v17, &v18, &v15);
  if (result)
  {
    MEMORY[0x2455CF810](&v12, "ND_texcoord");
    unint64_t v6 = v15 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v7 = (atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)v6 == v7)
    {
      MEMORY[0x2455CF810](&v19, "index");
      unint64_t v8 = *a2;
      uint64_t v9 = *((unsigned int *)a2 + 2);
      unint64_t v12 = *a2;
      unsigned int v13 = v9;
      unint64_t v14 = v19;
      if ((v19 & 7) != 0)
      {
        unint64_t v10 = v19 & 0xFFFFFFFFFFFFFFF8;
        if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
          unint64_t v14 = v10;
        }
      }
      if ((v19 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        unint64_t v8 = v12;
        uint64_t v9 = v13;
      }
      uint64_t v20 = 0;
      if ((*(unsigned int (**)(unint64_t, uint64_t, unint64_t *, unint64_t *))(*(void *)v8 + 104))(v8, v9, &v14, &v19)&& pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)&v19))
      {
        unint64_t v11 = (v20 & 4) != 0
            ? (unint64_t *)(*(uint64_t (**)(unint64_t *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(&v19)
            : &v19;
        if (*(_DWORD *)v11 == 1)
        {
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
          if ((v14 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t result = 1;
          goto LABEL_26;
        }
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t result = 0;
  }
LABEL_26:
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_23F6759D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

BOOL realityio::mtlx::MxDataSource::primIsValid(realityio::mtlx::MxDataSource *this, unsigned int a2)
{
  return a2 < (unint64_t)((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
}

BOOL realityio::mtlx::MxDataSource::attrIsValid(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 16))(&v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
  uint64_t v5 = (realityio::mtlx::MxDataSource *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 176, &v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  return (realityio::mtlx::MxDataSource *)((char *)this + 184) != v5;
}

void sub_23F675B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t realityio::mtlx::MxDataSource::primType(realityio::mtlx::MxDataSource *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 7);
  if (a2 >= (unint64_t)((*((void *)this + 8) - v2) >> 3)) {
    return 3;
  }
  unint64_t v4 = (uint64_t **)((char *)this + 32);
  uint64_t v5 = v2 + 8 * a2;
  unint64_t v6 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 32, &v12, (void *)v5);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    v10[1] = (char *)this + 40;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7 + 7, (_DWORD *)v5);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7 + 8, (_DWORD *)(v5 + 4));
    *((_DWORD *)v7 + 9) = 0;
    char v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v4, v12, v8, v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,void *>>>>::reset[abi:ne180100]((uint64_t)v10);
  }
  return *((unsigned int *)v7 + 9);
}

uint64_t realityio::mtlx::MxDataSource::getShadeInputs@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v18);
  uint64_t v5 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 80, &v18);
  if ((void *)(a1 + 88) != v5)
  {
    unint64_t v6 = (unint64_t *)v5[5];
    for (uint64_t i = (unint64_t *)v5[6]; v6 != i; ++v6)
    {
      unint64_t v8 = *v6;
      if ((*v6 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      int v9 = a2[2];
      if ((v8 & 7) != 0)
      {
        char add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
        uint64_t v15 = a1;
        if (add_explicit) {
          unint64_t v11 = v8;
        }
        else {
          unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFF8;
        }
        int v16 = v9;
        unint64_t v17 = v11;
        if ((v11 & 7) != 0)
        {
          char v12 = 0;
          if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
            v17 &= 0xFFFFFFFFFFFFFFF8;
          }
        }
        else
        {
          char v12 = 1;
        }
      }
      else
      {
        uint64_t v15 = a1;
        int v16 = v9;
        char v12 = 1;
        unint64_t v11 = v8;
        unint64_t v17 = v8;
      }
      std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a3, &v15);
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v12 & 1) == 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
}

void sub_23F675DB4(_Unwind_Exception *a1, uint64_t a2, void **a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va1);
  unint64_t v4 = a3;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getShadeOutputs@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v18);
  uint64_t v5 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 104, &v18);
  if ((void *)(a1 + 112) != v5)
  {
    uint64_t v6 = (unint64_t *)v5[5];
    for (uint64_t i = (unint64_t *)v5[6]; v6 != i; ++v6)
    {
      unint64_t v8 = *v6;
      if ((*v6 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      int v9 = a2[2];
      if ((v8 & 7) != 0)
      {
        char add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
        uint64_t v15 = a1;
        if (add_explicit) {
          unint64_t v11 = v8;
        }
        else {
          unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFF8;
        }
        int v16 = v9;
        unint64_t v17 = v11;
        if ((v11 & 7) != 0)
        {
          char v12 = 0;
          if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
            v17 &= 0xFFFFFFFFFFFFFFF8;
          }
        }
        else
        {
          char v12 = 1;
        }
      }
      else
      {
        uint64_t v15 = a1;
        int v16 = v9;
        char v12 = 1;
        unint64_t v11 = v8;
        unint64_t v17 = v8;
      }
      std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a3, &v15);
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v12 & 1) == 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
}

void sub_23F675FCC(_Unwind_Exception *a1, uint64_t a2, void **a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va1);
  unint64_t v4 = a3;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

const void **realityio::mtlx::MxDataSource::assignGamut(uint64_t a1, const void **a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v7 = a1 + 272;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a4 + 24))(&v10);
  unint64_t v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v7, &v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t result = (const void **)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if ((void *)(a1 + 280) != v8) {
    return realityio::assignGamutFromToken(a2, a3, v8 + 5);
  }
  return result;
}

void sub_23F676100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

void realityio::mtlx::MxDataSource::textureSettings(unsigned int *a1@<X1>, std::string *a2@<X2>, uint64_t a3@<X8>)
{
  void v9[2] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(void *(**)(void *__return_ptr))(**(void **)a1 + 128))(v9);
  if ((v9[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (const std::string *)((v9[0] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::string::operator=((std::string *)a3, EmptyString);
  if ((v9[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v9[1] = 0;
  (*(void (**)(void, void, unsigned int *, void *))(**(void **)a1 + 104))(*(void *)a1, a1[2], a1 + 4, v9);
  unint64_t v8 = (const std::string *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  std::string::operator=(a2, v8);
  std::string::operator=(a2 + 1, v8 + 1);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
}

void sub_23F676264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::MxDataSource::stripLeading(std::string *this, char *a2, std::string *__str)
{
  char v5 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  uint64_t v6 = (const std::string::value_type *)__str->__r_.__value_.__r.__words[0];
  if (v5 >= 0) {
    uint64_t v7 = __str;
  }
  else {
    uint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  int v8 = a2[23];
  if (v8 >= 0) {
    int v9 = a2;
  }
  else {
    int v9 = *(char **)a2;
  }
  if (v8 >= 0) {
    int64_t v10 = a2[23];
  }
  else {
    int64_t v10 = *((void *)a2 + 1);
  }
  if (v10)
  {
    std::string::size_type __sz = __str->__r_.__value_.__l.__size_;
    if (v5 >= 0) {
      int64_t size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = __str->__r_.__value_.__l.__size_;
    }
    if (size >= v10)
    {
      char v12 = (std::string *)((char *)v7 + size);
      int v13 = *v9;
      unint64_t v14 = v7;
      do
      {
        int64_t v15 = size - v10;
        if (v15 == -1) {
          break;
        }
        int v16 = (std::string *)memchr(v14, v13, v15 + 1);
        if (!v16) {
          break;
        }
        unint64_t v17 = v16;
        if (!memcmp(v16, v9, v10))
        {
          if (v17 == v12 || v17 != v7) {
            break;
          }
          goto LABEL_28;
        }
        unint64_t v14 = (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + 1);
        int64_t size = (char *)v12 - ((char *)&v17->__r_.__value_.__l.__data_ + 1);
      }
      while (size >= v10);
    }
    if (v5 < 0)
    {
      std::string::__init_copy_ctor_external(this, v6, __sz);
    }
    else
    {
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    }
  }
  else
  {
LABEL_28:
    std::string::basic_string(this, __str, v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
  }
}

uint64_t realityio::mtlx::MxDataSource::mergeSourcePrimIndices(uint64_t result, _DWORD *a2, _DWORD *a3, uint64_t **a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = result;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, v6);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, v6 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, &v11);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, &v12);
      unsigned int v10 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v7 + 8))(v7, &v8);
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(a4, &v10, &v10);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
      v6 += 2;
    }
    while (v6 != a3);
  }
  return result;
}

void sub_23F676510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, uint64_t a12, char a13)
{
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::VtValue>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>>::destroy(a1[1]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>>>::destroy(a1[1]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1 + 28);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 40);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 32));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::NeoPrimType>,0>((uint64_t)a1 + 28);
    operator delete(a1);
  }
}

uint64_t realityio::replication::SetFieldOperation::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v9))
  {
    uint64_t v8 = 0;
    if (realityio::replication::read(a1, a2, &v8))
    {
      uint64_t v16 = 0;
      if (realityio::replication::read(a1))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, &v9);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, &v10);
        uint64_t v13 = v8;
        if ((v8 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v13 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14, (const pxrInternal__aapl__pxrReserved__::VtValue *)v15);
        *(unsigned char *)a3 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v11);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 12), &v12);
        uint64_t v6 = v13;
        *(void *)(a3 + 16) = v13;
        if ((v6 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)(a3 + 16) &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a3 + 24), (const pxrInternal__aapl__pxrReserved__::VtValue *)v14);
        *(unsigned char *)a3 = 1;
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
        if ((v13 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
      }
      else
      {
        *(unsigned char *)a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
}

void sub_23F676994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::replication::SetFieldOperation::~SetFieldOperation(realityio::replication::SetFieldOperation *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((realityio::replication::SetFieldOperation *)((char *)this + 16));
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void realityio::replication::SetFieldOperation::Serialize(void *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  realityio::replication::write();
  realityio::replication::write(a2, a1 + 1);

  realityio::replication::write(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 2));
}

uint64_t realityio::replication::SetFieldDictValueByKeyOperation::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v11))
  {
    uint64_t v10 = 0;
    if (realityio::replication::read(a1, a2, &v10))
    {
      uint64_t v9 = 0;
      if (realityio::replication::read(a1, a2, &v9))
      {
        uint64_t v19 = 0;
        if (realityio::replication::read(a1))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, &v11);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, &v12);
          uint64_t v15 = v10;
          if ((v10 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v15 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v16 = v9;
          if ((v9 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v16 &= 0xFFFFFFFFFFFFFFF8;
          }
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17, (const pxrInternal__aapl__pxrReserved__::VtValue *)v18);
          *(unsigned char *)a3 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v13);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 12), &v14);
          uint64_t v6 = v15;
          *(void *)(a3 + 16) = v15;
          if ((v6 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *(void *)(a3 + 16) &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v7 = v16;
          *(void *)(a3 + 24) = v16;
          if ((v7 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *(void *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
          }
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a3 + 32), (const pxrInternal__aapl__pxrReserved__::VtValue *)v17);
          *(unsigned char *)a3 = 1;
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
          if ((v16 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v15 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
        }
        else
        {
          *(unsigned char *)a3 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v18);
      }
      else
      {
        *(unsigned char *)a3 = 0;
      }
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
}

void sub_23F676DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::replication::SetFieldDictValueByKeyOperation::~SetFieldDictValueByKeyOperation(realityio::replication::SetFieldDictValueByKeyOperation *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((realityio::replication::SetFieldDictValueByKeyOperation *)((char *)this + 24));
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void realityio::replication::SetFieldDictValueByKeyOperation::Serialize(void *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  realityio::replication::write();
  realityio::replication::write(a2, a1 + 1);
  realityio::replication::write(a2, a1 + 2);

  realityio::replication::write(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 3));
}

uint64_t realityio::replication::SetTimeSampleOperation::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v8)
    && (uint64_t v7 = 0, realityio::replication::details::readBuffer<double,0>(a1, a2, (uint64_t)&v7, 1uLL)))
  {
    uint64_t v15 = 0;
    if (realityio::replication::read(a1))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v10, &v8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, &v9);
      uint64_t v12 = v7;
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      *a3 = 0;
      boost::optional_detail::optional_base<realityio::replication::SetTimeSampleOperation>::construct((uint64_t)a3, (uint64_t)&v10);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
}

void sub_23F6770F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::replication::SetTimeSampleOperation::~SetTimeSampleOperation(realityio::replication::SetTimeSampleOperation *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((realityio::replication::SetTimeSampleOperation *)((char *)this + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void realityio::replication::SetTimeSampleOperation::Serialize(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  realityio::replication::write();
  std::ostream::write();

  realityio::replication::write(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
}

uint64_t realityio::replication::CreateSpecOperation::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v13)
    && (int v12 = 0,
        realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfSpecType,0>(a1, a2, (uint64_t)&v12, 1uLL))&& (char v11 = 0, realityio::replication::details::readBuffer<BOOL,0>(a1)))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, &v13);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, &v14);
    int v9 = v12;
    char v10 = v11;
    *(unsigned char *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 4), &v7);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v8);
    *(_DWORD *)(a3 + 12) = v9;
    *(unsigned char *)(a3 + 16) = v10;
    *(unsigned char *)a3 = 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
}

void sub_23F67732C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::CreateSpecOperation::Serialize(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a1);
  realityio::replication::write();
  std::ostream::write();

  return std::ostream::write();
}

uint64_t realityio::replication::DeleteSpecOperation::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v11)
    && (char v10 = 0, realityio::replication::details::readBuffer<BOOL,0>(a1)))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, &v11);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, &v12);
    char v9 = v10;
    *(unsigned char *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 4), &v7);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v8);
    *(unsigned char *)(a3 + 12) = v9;
    *(unsigned char *)a3 = 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
}

void sub_23F6774B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::DeleteSpecOperation::Serialize(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a1);
  realityio::replication::write();

  return std::ostream::write();
}

uint64_t realityio::replication::MoveSpecOperation::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v13))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    if (realityio::replication::read(a1, a2, (uint64_t)&v11))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, &v13);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, &v14);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, &v11);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v10, &v12);
      *a3 = 0;
      boost::optional_detail::optional_base<realityio::replication::MoveSpecOperation>::construct((uint64_t)a3, &v7);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
}

void sub_23F677670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, int a12, char a13)
{
}

void realityio::replication::MoveSpecOperation::~MoveSpecOperation(realityio::replication::MoveSpecOperation *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::replication::MoveSpecOperation::Serialize(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  realityio::replication::write();
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8));

  return realityio::replication::write();
}

uint64_t realityio::replication::PushChildOperation_TfToken::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v15))
  {
    uint64_t v14 = 0;
    if (realityio::replication::read(a1, a2, &v14))
    {
      uint64_t v13 = 0;
      if (realityio::replication::read(a1, a2, &v13))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, &v15);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v10, &v16);
        uint64_t v11 = v14;
        if ((v14 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v11 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v12 = v13;
        if ((v13 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v12 &= 0xFFFFFFFFFFFFFFF8;
        }
        *(unsigned char *)a3 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v9);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 12), &v10);
        uint64_t v6 = v11;
        *(void *)(a3 + 16) = v11;
        if ((v6 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)(a3 + 16) &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v7 = v12;
        *(void *)(a3 + 24) = v12;
        if ((v7 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
        }
        *(unsigned char *)a3 = 1;
        if ((v12 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v11 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
      }
      else
      {
        *(unsigned char *)a3 = 0;
      }
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
}

void sub_23F677980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if ((a5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

void realityio::replication::PushChildOperation_TfToken::~PushChildOperation_TfToken(realityio::replication::PushChildOperation_TfToken *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::replication::PushChildOperation_TfToken::Serialize(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a1);
  realityio::replication::write();
  realityio::replication::write(a2, (void *)a1 + 1);

  return realityio::replication::write(a2, (void *)a1 + 2);
}

uint64_t realityio::replication::PushChildOperation_SdfPath::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v16))
  {
    uint64_t v15 = 0;
    if (realityio::replication::read(a1, a2, &v15))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      if (realityio::replication::read(a1, a2, (uint64_t)&v13))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, &v16);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, &v17);
        uint64_t v10 = v15;
        if ((v15 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v10 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, &v13);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, &v14);
        *(unsigned char *)a3 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v8);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 12), &v9);
        uint64_t v6 = v10;
        *(void *)(a3 + 16) = v10;
        if ((v6 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)(a3 + 16) &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 24), &v11);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 28), &v12);
        *(unsigned char *)a3 = 1;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
        if ((v10 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
      }
      else
      {
        *(unsigned char *)a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
}

void sub_23F677CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va1);
  _Unwind_Resume(a1);
}

void realityio::replication::PushChildOperation_SdfPath::~PushChildOperation_SdfPath(realityio::replication::PushChildOperation_SdfPath *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::replication::PushChildOperation_SdfPath::Serialize(void *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  realityio::replication::write();
  realityio::replication::write(a2, a1 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2));

  return realityio::replication::write();
}

uint64_t realityio::replication::PopChildOperation_TfToken::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v15))
  {
    uint64_t v14 = 0;
    if (realityio::replication::read(a1, a2, &v14))
    {
      uint64_t v13 = 0;
      if (realityio::replication::read(a1, a2, &v13))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, &v15);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v10, &v16);
        uint64_t v11 = v14;
        if ((v14 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v11 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v12 = v13;
        if ((v13 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v12 &= 0xFFFFFFFFFFFFFFF8;
        }
        *(unsigned char *)a3 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v9);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 12), &v10);
        uint64_t v6 = v11;
        *(void *)(a3 + 16) = v11;
        if ((v6 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)(a3 + 16) &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v7 = v12;
        *(void *)(a3 + 24) = v12;
        if ((v7 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
        }
        *(unsigned char *)a3 = 1;
        if ((v12 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v11 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
      }
      else
      {
        *(unsigned char *)a3 = 0;
      }
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
}

void sub_23F678008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if ((a5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

void realityio::replication::PopChildOperation_TfToken::~PopChildOperation_TfToken(realityio::replication::PopChildOperation_TfToken *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void realityio::replication::PopChildOperation_SdfPath::~PopChildOperation_SdfPath(realityio::replication::PopChildOperation_SdfPath *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

pxrInternal__aapl__pxrReserved__::VtValue *boost::optional_detail::optional_base<realityio::replication::SetTimeSampleOperation>::construct(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), (_DWORD *)(a2 + 4));
  *(void *)(a1 + 16) = *(void *)(a2 + 8);
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 16));
  *(unsigned char *)a1 = 1;
  return result;
}

void sub_23F6781A0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v1);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfSpecType,0>(realityio *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 62)
  {
    unint64_t v4 = *(NSObject **)(realityio::logObjects(a1) + 40);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v11 = 0;
    uint64_t v6 = "Read size overflowed";
    uint64_t v7 = (uint8_t *)&v11;
LABEL_7:
    _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    return 0;
  }
  int v9 = (realityio *)std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
  {
    unint64_t v4 = *(NSObject **)(realityio::logObjects(v9) + 40);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v10 = 0;
    uint64_t v6 = "Failed to read";
    uint64_t v7 = (uint8_t *)&v10;
    goto LABEL_7;
  }
  return 1;
}

_DWORD *boost::optional_detail::optional_base<realityio::replication::MoveSpecOperation>::construct(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 4), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a2 + 2);
  BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), a2 + 3);
  *(unsigned char *)a1 = 1;
  return result;
}

void *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::shared_ptr<Exec::ExecAction>>::~pair(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void realityio::ImportSessionV2::getAction(realityio::ImportSessionV2 *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X3>, void *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v7 = (void *)*((void *)this + 166);
  if (!v7) {
    goto LABEL_24;
  }
  int v8 = (uint64_t *)((char *)this + 1328);
  int v9 = (char *)this + 1336;
  __int16 v10 = (uint64_t *)((char *)this + 1328);
  do
  {
    int v11 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)v9, v7 + 4, (uint64_t *)a2);
    uint64_t v12 = v7 + 1;
    if (!v11)
    {
      uint64_t v12 = v7;
      __int16 v10 = v7;
    }
    uint64_t v7 = (void *)*v12;
  }
  while (*v12);
  if (v10 == v8
    || (std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)v9, (uint64_t *)a2, v10 + 4) & 1) != 0)
  {
LABEL_24:
    if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_30, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&_MergedGlobals_30))
    {
      qword_268C40858 = 0;
      qword_268C40850 = 0;
      qword_268C40848 = (uint64_t)&qword_268C40850;
      __cxa_guard_release(&_MergedGlobals_30);
    }
    if (!std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__count_unique<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&qword_268C40848, (uint64_t *)a2))
    {
      uint64_t v13 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t **)&qword_268C40848, (uint64_t *)a2, (uint64_t *)a2);
      uint64_t v14 = *(NSObject **)(realityio::logObjects((realityio *)v13) + 24);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        unint64_t v16 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
        if (v16)
        {
          int v17 = (const char *)(v16 + 16);
          if (*(char *)(v16 + 39) < 0) {
            int v17 = *(const char **)v17;
          }
        }
        else
        {
          int v17 = "";
        }
        int v18 = 136315138;
        uint64_t v19 = v17;
        _os_log_error_impl(&dword_23F4EA000, v14, OS_LOG_TYPE_ERROR, "Un-handled rule %s\n", (uint8_t *)&v18, 0xCu);
      }
    }
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v15 = v10[6];
    *a3 = v10[5];
    a3[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void non-virtual thunk to'realityio::ImportSessionV2::getAction(realityio::ImportSessionV2 *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X3>, void *a3@<X8>)
{
}

void realityio::ImportSessionV2::ImportSessionV2(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const void **a5)
{
  v9[113] = *MEMORY[0x263EF8340];
  v9[0] = *a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(v9);
  realityio::ImportSessionImpl::ImportSessionImpl(a1, v9, a3, a4, a5);
}

void sub_23F67A36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10, TgECS *a11, void **a12, uint64_t a13, pxrInternal__aapl__pxrReserved__::TfWeakBase *a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,atomic_uint *a21,atomic_uint *a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a21);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a22);
  while (v33 != &a30)
  {
    v33 -= 24;
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::shared_ptr<Exec::ExecAction>>::~pair(v33);
  }
  std::recursive_mutex::~recursive_mutex(a10);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)v31 + 186);
  unint64_t v35 = (atomic_uint *)*((void *)v31 + 169);
  if (v35 && atomic_fetch_add_explicit(v35 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v35 + 8))(v35);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(*a12);
  TgECS::~TgECS(a11);
  Exec::~Exec(v32);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)v31 + 53);
  unint64_t v37 = (void *)*((void *)v31 + 52);
  *((void *)v31 + 52) = 0;
  if (v37) {
    std::default_delete<realityio::ExecContext>::operator()[abi:ne180100](v37);
  }
  pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase(a14, v36);
  realityio::ImportSessionImpl::~ImportSessionImpl(v31);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionV2::setRootEntity(std::chrono::steady_clock::time_point *this)
{
  void v9[2] = *MEMORY[0x263EF8340];
  this[184].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v9[1] = 0;
  if (this[52].__d_.__rep_ && this[5].__d_.__rep_)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    rep = (void *)this[52].__d_.__rep_;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v3 = this[5].__d_.__rep_;
    uint64_t v4 = *(void *)(v3 + 472);
    rep[25] = *(void *)(v3 + 40);
    rep[26] = v4;
    rep[27] = v3;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(rep + 28), v8);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)rep + 228, (_DWORD *)v8 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
  }
  TgECS::eval((TgECS *)&this[102], (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(v9, v8);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  uint64_t v5 = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v5)
  {
    v8[0] = 0;
    uint64_t v6 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REEntity *>>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    realityio::WrappedRERef<REAsset *>::operator=(&this[53].__d_.__rep_, v6);
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(v8);
  }
  else
  {
    uint64_t v7 = *(NSObject **)realityio::logObjects(v5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8[0]) = 0;
      _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Update did not produce a root entity", (uint8_t *)v8, 2u);
    }
  }
  realityio::RioTimer::stop(this + 181);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
}

void sub_23F67A858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::ImportSessionV2::changeNoticeCB(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  ResyncedPaths = (void *)pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResyncedPaths(this);
  uint64_t v5 = ResyncedPaths + 1;
  uint64_t v6 = (void *)*ResyncedPaths;
  if ((void *)*ResyncedPaths != ResyncedPaths + 1)
  {
    do
    {
      Exec::setHierarchyDirty((std::mutex *)(a1 + 432), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 4), 1);
      uint64_t v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          uint64_t v6 = v8;
        }
        while (!v9);
      }
      uint64_t v6 = v8;
    }
    while (v8 != v5);
  }
  ChangedInfoOnlyPaths = (void *)pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedInfoOnlyPaths(this);
  int v11 = ChangedInfoOnlyPaths + 1;
  uint64_t v12 = (void *)*ChangedInfoOnlyPaths;
  if ((void *)*ChangedInfoOnlyPaths != ChangedInfoOnlyPaths + 1)
  {
    uint64_t v13 = (std::mutex *)(a1 + 432);
    do
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 4)))
      {
        Exec::setDirty(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 4), 1);
      }
      else
      {
        Exec::setPropertiesDirty(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 4), 1);
        if (v12[4] == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v14))
        {
          uint64_t v15 = (void *)atomic_load(&realityio::tokens::StageTokens);
          if (!v15) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData();
          }
          unint64_t v16 = *v15 & 0xFFFFFFFFFFFFFFF8;
          if (v16)
          {
            int v17 = (char *)(v16 + 16);
            if (*(char *)(v16 + 39) < 0) {
              int v17 = *(char **)v17;
            }
          }
          else
          {
            int v17 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v17);
          MEMORY[0x2455CF7A0](v22, __p);
          Exec::setPropertiesDirty(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v22, 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v22);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      int v18 = (void *)v12[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          int v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v12[2];
          BOOL v9 = *v19 == (void)v12;
          uint64_t v12 = v19;
        }
        while (!v9);
      }
      uint64_t v12 = v19;
    }
    while (v19 != v11);
  }
}

void sub_23F67AA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Exec::~Exec(std::mutex *this)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,realityio::SdfPathHashCompare,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,realityio::SdfPathHashCompare,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>>>::~__hash_table((uint64_t)&this[3].__m_.__opaque[40]);
  pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::~SdfPathTable(this[3].__m_.__opaque);
  uint64_t v2 = *(void **)&this[2].__m_.__opaque[32];
  if (v2)
  {
    *(void *)&this[2].__m_.__opaque[40] = v2;
    operator delete(v2);
  }
  realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::~Graph((uint64_t)&this[1]);

  std::mutex::~mutex(this);
}

void realityio::ImportSessionV2::~ImportSessionV2(realityio::ImportSessionV2 *this)
{
  *(void *)this = &unk_26F341018;
  *((void *)this + 50) = &unk_26F341098;
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 1520));
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 186);
  uint64_t v2 = (atomic_uint *)*((void *)this + 169);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(*((void **)this + 166));
  TgECS::~TgECS((realityio::ImportSessionV2 *)((char *)this + 816));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,realityio::SdfPathHashCompare,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,realityio::SdfPathHashCompare,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>>>::~__hash_table((uint64_t)this + 672);
  pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::~SdfPathTable((void *)this + 79);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v3 = (void *)*((void *)this + 75);
  if (v3)
  {
    *((void *)this + 76) = v3;
    operator delete(v3);
  }
  realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::~Graph((uint64_t)this + 496);
  std::mutex::~mutex((std::mutex *)((char *)this + 432));
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)this + 53);
  uint64_t v5 = (void *)*((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v5) {
    std::default_delete<realityio::ExecContext>::operator()[abi:ne180100](v5);
  }
  pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase((realityio::ImportSessionV2 *)((char *)this + 408), v4);

  realityio::ImportSessionImpl::~ImportSessionImpl(this);
}

{
  uint64_t vars8;

  realityio::ImportSessionV2::~ImportSessionV2(this);

  JUMPOUT(0x2455D2BD0);
}

void non-virtual thunk to'realityio::ImportSessionV2::~ImportSessionV2(realityio::ImportSessionV2 *this)
{
}

{
  uint64_t vars8;

  realityio::ImportSessionV2::~ImportSessionV2((realityio::ImportSessionV2 *)((char *)this - 400));

  JUMPOUT(0x2455D2BD0);
}

void realityio::ImportSessionV2::updateLiveScene(realityio::ImportSessionV2 *this)
{
  *((unsigned char *)this + 920) = *((unsigned char *)this + 272);
  *((std::chrono::steady_clock::time_point *)this + 174) = std::chrono::steady_clock::now();
  *((std::chrono::steady_clock::time_point *)this + 179) = std::chrono::steady_clock::now();
  v6[0] = *(void ***)(*((void *)this + 1) + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v6);
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)v6);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(v2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)v6);
  realityio::MultipleLayerMutex::MultipleLayerMutex<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>>((uint64_t *)v6, v7[0], v7[1]);
  realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)v6);
  if (*((unsigned char *)this + 1360))
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v3 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load((unint64_t *)off_265071670);
    if (!v3) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
    }
    pxrInternal__aapl__pxrReserved__::TraceCollector::Clear(v3);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load((unint64_t *)off_265071670);
    if (!v4) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
    }
    pxrInternal__aapl__pxrReserved__::TraceCollector::SetEnabled(v4);
  }
  TgECS::update((realityio::ImportSessionV2 *)((char *)this + 816));
  realityio::RioTimer::stop((std::chrono::steady_clock::time_point *)this + 176);
  std::chrono::steady_clock::now();
  realityio::ImportSessionV2::setRootEntity((std::chrono::steady_clock::time_point *)this);
  realityio::RioTimer::stop((std::chrono::steady_clock::time_point *)this + 171);
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)v6);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 1520));
  uint64_t v5 = *((void *)this + 189);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 1520));
  int v8 = v6;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v6[0] = (void **)v7;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](v6);
}

void sub_23F67ADF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char a13)
{
  std::recursive_mutex::unlock(v13);
  *(void *)(v14 - 24) = &a10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 24));
  a10 = &a13;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionV2::setRootEntity(uint64_t a1, uint64_t a2)
{
  v6[2] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 920) = *(unsigned char *)(a1 + 272);
  v6[0] = a2;
  if (a2) {
    RERetain();
  }
  uint64_t v4 = *(void *)(a1 + 424);
  if (v4 != a2)
  {
    *(void *)(a1 + 424) = a2;
    v6[0] = v4;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v6);
  uint64_t v5 = a2;
  if (a2) {
    RERetain();
  }
  v6[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REEntity *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>::_PlaceCopy();
}

void sub_23F67AFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

atomic_uint **realityio::ImportSessionV2::setStage(uint64_t a1, atomic_uint **a2)
{
  uint64_t v5 = *a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v5);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v3 = *(atomic_uint **)(a1 + 904);
  *(void *)(a1 + 904) = v5;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v5);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef(a1 + 904, v3);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v5);
}

void sub_23F67B0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSessionV2::rootEntity(realityio::ImportSessionV2 *this)
{
  return *((void *)this + 53);
}

uint64_t realityio::ImportSessionV2::version(realityio::ImportSessionV2 *this)
{
  return 2;
}

uint64_t realityio::ImportSessionV2::getEntityAtPrimPath(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v3 = atomic_load(&realityio::tokens::EcsTokens);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v7, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 152));
  Exec::getValue((Exec *)(a1 + 432), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, (pxrInternal__aapl__pxrReserved__::VtValue *)&v8);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v8))
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(&v8);
    }
    else {
      uint64_t v4 = v8;
    }
    uint64_t v5 = *v4;
  }
  else
  {
    uint64_t v5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  return v5;
}

void sub_23F67B1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t realityio::ImportSessionV2::dumpDiagnostics(void *a1, const void **a2)
{
  uint64_t v6 = *(atomic_uint **)(a1[1] + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v6);
  (*(void (**)(void *))(*a1 + 16))(a1);
  uint64_t v4 = realityio::internal::dumpDiagnostics(a2, &v6);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v6);
  return v4;
}

void sub_23F67B2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSessionV2::dumpDependencies(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v3 = (const char *)a2;
  }
  else {
    unint64_t v3 = *(const char **)a2;
  }
  uint64_t v4 = fopen(v3, "w");
  if (v4)
  {
    uint64_t v5 = v4;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
    Exec::dumpDotfile((void *)(a1 + 432), v12);
    std::stringbuf::str();
    if (v10 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    fprintf(v5, "\n%s\n", p_p);
    if (v10 < 0) {
      operator delete(__p);
    }
    v11[0] = *MEMORY[0x263F8C2B8];
    uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v12[0] = v7;
    v12[1] = MEMORY[0x263F8C318] + 16;
    if (v13 < 0) {
      operator delete((void *)v12[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2455D2B30](&v14);
    fclose(v5);
  }
  return 1;
}

void sub_23F67B4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  a14 = *MEMORY[0x263F8C2B8];
  uint64_t v34 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)&a14 + *(void *)(a14 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  a16 = v34;
  a17 = MEMORY[0x263F8C318] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2455D2B30](&a33);
  _Unwind_Resume(a1);
}

void timerStat(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 6);
  if (v17 < 0) {
    uint64_t v6 = (void **)__p[0];
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *a2;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, ":total");
  double v8 = (float)((float)((float)((std::chrono::steady_clock::now().__d_.__rep_ - *(void *)(a3 + 24)) / 1000) / 1000.0)
             / 1000.0);
  uint64_t v19 = &unk_26F33366B;
  double v18 = v8;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  char v10 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 6);
  if (v17 < 0) {
    char v10 = (void **)__p[0];
  }
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v11 = a2;
    }
    else {
      int v11 = *a2;
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, ":count");
  double v18 = *(double *)(a3 + 16);
  uint64_t v19 = &unk_26F33E64B;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v12 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v12 = (size_t)a2[1];
  }
  char v13 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 4);
  if (v17 < 0) {
    char v13 = (void **)__p[0];
  }
  if (v12)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = *a2;
    }
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ":avg");
  double v15 = (float)((float)((float)((std::chrono::steady_clock::now().__d_.__rep_ - *(void *)(a3 + 24)) / 1000) / 1000.0)
              / 1000.0)
      / (double)*(unint64_t *)(a3 + 16);
  uint64_t v19 = &unk_26F33366B;
  double v18 = v15;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F67B8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TraceReporter>::operator->(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         uint64_t result = *a1,
         v4)
      ? (BOOL v6 = result == 0)
      : (BOOL v6 = 1),
        v6))
  {
    uint64_t v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

void *realityio::ImportSessionV2::gatherFaultRecords(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(char const*,ExecFault::Type,char const*)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  Exec::gatherFaultRecords(a1 + 432, (uint64_t)v4);
  return std::__function::__value_func<void ()(char const*,ExecFault::Type,char const*)>::~__value_func[abi:ne180100](v4);
}

void sub_23F67BA20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(char const*,ExecFault::Type,char const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionV2::setSceneUpdatePassCompletion(uint64_t a1, uint64_t a2)
{
  int v4 = (std::recursive_mutex *)(a1 + 1520);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 1520));
  std::function<void ()(void)>::operator=((void *)(a1 + 1488), a2);

  std::recursive_mutex::unlock(v4);
}

void sub_23F67BA94(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSessionImpl::updateInProgress(realityio::ImportSessionImpl *this)
{
  return 0;
}

uint64_t realityio::ImportSessionImpl::isUsingTargetBasedBuilderDirtying(realityio::ImportSessionImpl *this)
{
  return 0;
}

void realityio::ImportSessionV2::gatherStatistics(realityio::ImportSessionV2 *this, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "time:update");
  timerStat((uint64_t)a2, (const void **)&__p, (uint64_t)this + 1368);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "time:targetGeneration");
  timerStat((uint64_t)a2, (const void **)&__p, (uint64_t)this + 1408);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "time:evaluation");
  timerStat((uint64_t)a2, (const void **)&__p, (uint64_t)this + 1448);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  Exec::getUnreachableTargets((realityio::ImportSessionV2 *)((char *)this + 432), (realityio::ImportSessionV2 *)((char *)this + 912), &__p);
  std::string::basic_string[abi:ne180100]<0>(v15, "graph:unreachableTargets");
  v14[0] = v19;
  v14[1] = &unk_26F33E64B;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&__p, v18);
  Exec::getStatistics((realityio::ImportSessionV2 *)((char *)this + 432), a2);
  int v4 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load((unint64_t *)off_265071670);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
  }
  size_t v5 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)pxrInternal__aapl__pxrReserved__::TraceCollector::SetEnabled(v4);
  pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter((uint64_t *)&__p, v5);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TraceReporter>::operator->((uint64_t *)&__p);
  MEMORY[0x2455CEA10](v6);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)v18;
  if (v18 && atomic_fetch_add_explicit(v18 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TraceReporter *))(*(void *)v7 + 8))(v7);
  }
  pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter((uint64_t *)&__p, v7);
  double v8 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TraceReporter>::operator->((uint64_t *)&__p);
  uint64_t Counters = pxrInternal__aapl__pxrReserved__::TraceReporter::GetCounters(v8);
  char v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)v18;
  if (v18 && atomic_fetch_add_explicit(v18 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    char v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))(*(void *)v10 + 8))(v10);
  }
  for (uint64_t i = *(void **)(Counters + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v12 = i[2];
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (void *)i[3];
    if ((v12 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
    }
    double v18 = (atomic_uint *)&unk_26F33366B;
    std::string __p = v13;
    pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "importSessionVersion");
  v15[0] = (void *)0x4000000000000000;
  v15[1] = &unk_26F33366B;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
}

void sub_23F67BDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,realityio::SdfPathHashCompare,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,realityio::SdfPathHashCompare,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,ExecFault>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::~SdfPathTable(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (v2 != (void *)*a1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = ((uint64_t)v2 - *a1) >> 3;
    do
    {
      size_t v5 = (void *)*a1;
      uint64_t v6 = *(void *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          uint64_t v7 = *(void *)(v6 + 24);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 8));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          uint64_t v8 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v6);
          MEMORY[0x2455D2BD0](v8, 0x1060C407FF37761);
          uint64_t v6 = v7;
        }
        while (v7);
        size_t v5 = (void *)*a1;
      }
      v5[v3++] = 0;
    }
    while (v3 != v4);
    uint64_t v2 = (void *)*a1;
  }
  a1[3] = 0;
  if (v2)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::~Graph(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 72);
  std::vector<std::set<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 48);
  std::vector<std::set<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(void **)(a1 + 32));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(*(void **)(a1 + 8));
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(a1[1]);
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>::~pair((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void TgECS::~TgECS(TgECS *this)
{
  *(void *)this = &unk_26F34B000;
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 480, *((void **)this + 61));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 456, *((void **)this + 58));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::~__hash_table((uint64_t)this + 408);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 384, *((void **)this + 49));
  pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::~SdfPathTable((uint64_t *)this + 43);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 320, *((void **)this + 41));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 296, *((void **)this + 38));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 272, *((void **)this + 35));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 248, *((void **)this + 32));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 224, *((void **)this + 29));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 200, *((void **)this + 26));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 120));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 108);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 96);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)this + 11);
  *(void *)this = &unk_26F341FD0;
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim const,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim const,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,0>(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 32);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::~SdfPathTable(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::clear(a1);
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::clear(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[1] - *result;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 >> 3;
    do
    {
      uint64_t v5 = *v1;
      uint64_t v6 = *(void *)(*v1 + 8 * v3);
      if (v6)
      {
        do
        {
          uint64_t v7 = *(void *)(v6 + 16);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          uint64_t v8 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v6);
          uint64_t result = (uint64_t *)MEMORY[0x2455D2BD0](v8, 0x1020C4084A03ABELL);
          uint64_t v6 = v7;
        }
        while (v7);
        uint64_t v5 = *v1;
      }
      *(void *)(v5 + 8 * v3++) = 0;
    }
    while (v3 != v4);
  }
  v1[3] = 0;
  return result;
}

void *std::__function::__value_func<void ()(std::function<void ()(void)>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_0,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_0>,void ()(std::function<void ()(void)>)>::~__func()
{
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_0,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_0>,void ()(std::function<void ()(void)>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F341118;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_0,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_0>,void ()(std::function<void ()(void)>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F341118;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_0,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_0>,void ()(std::function<void ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 40);
  if (v2)
  {
    return realityio::LiveSceneManager::performBlockSyncOnEngineQueue(v2, a2);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 48);
    return v5();
  }
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_0,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_0>,void ()(std::function<void ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_0,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_0>,void ()(std::function<void ()(void)>)>::target_type()
{
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_1,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_1>,void ()(std::function<void ()(void)>)>::~__func()
{
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_1,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_1>,void ()(std::function<void ()(void)>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F3411A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_1,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_1>,void ()(std::function<void ()(void)>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3411A8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_1,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_1>,void ()(std::function<void ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  realityio::ImportSessionImpl::performBlockLaterOnEngineQueue(v2, (uint64_t)v4);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_23F67C65C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_1,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_1>,void ()(std::function<void ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_1,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_1>,void ()(std::function<void ()(void)>)>::target_type()
{
}

void *realityio::ImportSessionImpl::performBlockLaterOnEngineQueue(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
    realityio::LiveSceneManager::performBlockLaterOnEngineQueue(v2, (uint64_t)v6);
    return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v6);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 48);
    return (void *)v5();
  }
}

void sub_23F67C79C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_2,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_2>,void ()(std::function<void ()(void)>)>::~__func()
{
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_2,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_2>,void ()(std::function<void ()(void)>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F341228;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_2,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_2>,void ()(std::function<void ()(void)>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F341228;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_2,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_2>,void ()(std::function<void ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  realityio::ImportSessionImpl::performBlockPostAssetLoadOnEngineQueue(v2, (uint64_t)v4);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_23F67C8B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_2,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_2>,void ()(std::function<void ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_2,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_2>,void ()(std::function<void ()(void)>)>::target_type()
{
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_3,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_3>,void ()(realityio::WrappedRERef<REEntity *> &)>::~__func()
{
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_3,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_3>,void ()(realityio::WrappedRERef<REEntity *> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F3412A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_3,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_3>,void ()(realityio::WrappedRERef<REEntity *> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3412A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_3,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_3>,void ()(realityio::WrappedRERef<REEntity *> &)>::operator()(uint64_t a1, uint64_t *a2)
{
  return realityio::LiveSceneManager::enableEntityOnCompletion(*(void *)(*(void *)(a1 + 8) + 40), a2);
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_3,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_3>,void ()(realityio::WrappedRERef<REEntity *> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_3,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_3>,void ()(realityio::WrappedRERef<REEntity *> &)>::target_type()
{
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_4,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_4>,void ()(realityio::WrappedRERef<REAsset *> const&)>::~__func()
{
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_4,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_4>,void ()(realityio::WrappedRERef<REAsset *> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F341338;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_4,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_4>,void ()(realityio::WrappedRERef<REAsset *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F341338;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_4,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_4>,void ()(realityio::WrappedRERef<REAsset *> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 40);
  if (v2) {
    realityio::LiveSceneManager::queueForDeferredAssetLoad(v2, a2);
  }
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_4,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_4>,void ()(realityio::WrappedRERef<REAsset *> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_4,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_4>,void ()(realityio::WrappedRERef<REAsset *> const&)>::target_type()
{
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_5,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_5>,void ()(std::shared_ptr<realityio::AssetLoadTracker::Asset> const&)>::~__func()
{
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_5,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_5>,void ()(std::shared_ptr<realityio::AssetLoadTracker::Asset> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F3413C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_5,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_5>,void ()(std::shared_ptr<realityio::AssetLoadTracker::Asset> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3413C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_5,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_5>,void ()(std::shared_ptr<realityio::AssetLoadTracker::Asset> const&)>::operator()(uint64_t a1, void *a2)
{
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_5,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_5>,void ()(std::shared_ptr<realityio::AssetLoadTracker::Asset> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_5,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_5>,void ()(std::shared_ptr<realityio::AssetLoadTracker::Asset> const&)>::target_type()
{
}

void std::default_delete<realityio::ExecContext>::operator()[abi:ne180100](void *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 28));
  uint64_t v2 = (void *)a1[23];
  if (v2 == a1 + 20)
  {
    (*(void (**)(void *))(a1[20] + 32))(a1 + 20);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  uint64_t v3 = (void *)a1[19];
  if (v3 == a1 + 16)
  {
    (*(void (**)(void *))(a1[16] + 32))(a1 + 16);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4 == a1 + 12)
  {
    (*(void (**)(void *))(a1[12] + 32))(a1 + 12);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  std::__function::__value_func<void ()(std::function<void ()(void)>)>::~__value_func[abi:ne180100](a1 + 8);
  std::__function::__value_func<void ()(std::function<void ()(void)>)>::~__value_func[abi:ne180100](a1 + 4);
  std::__function::__value_func<void ()(std::function<void ()(void)>)>::~__value_func[abi:ne180100](a1);

  JUMPOUT(0x2455D2BD0);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>::New()
{
}

void sub_23F67CDFC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40C131C456);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::AnchoringComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnchoringComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341458;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::AnimationComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3414A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnimationComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3414A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::AnimationLibraryAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3414F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnimationLibraryAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3414F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::AnimationLibraryComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnimationLibraryComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341548;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::BlendShapeWeightsDefinitionAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::BlendShapeWeightsDefinitionAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341598;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::BlendShapeWeightsComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3415E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::BlendShapeWeightsComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3415E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::CapsuleAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CapsuleAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341638;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::CapsuleMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CapsuleMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341688;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::ConeAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3416D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ConeAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3416D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::ConeMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ConeMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341728;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::CubeAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CubeAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341778;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::CubeMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3417C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CubeMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3417C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::CylinderAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CylinderAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341818;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::CylinderMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CylinderMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341868;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::EntityAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3418B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::EntityAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3418B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::EntitySyncAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::EntitySyncAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341908;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::GetFromUsdAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::GetFromUsdAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341958;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

atomic_uint **std::__shared_ptr_emplace<realityio::GetFromUsdAction>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26F3357B8;
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)(a1 + 48));
}

void std::__shared_ptr_emplace<realityio::MapFromGroupsAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3419A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MapFromGroupsAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3419A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::MaterialAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3419F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MaterialAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3419F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::MeshAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341A48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::MeshComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341A98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::MeshDeformationComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341AE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshDeformationComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341AE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::MeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341B38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::RenderOptionsComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::RenderOptionsComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341B88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::RigComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::RigComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::SampleAnimationFromUsdAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SampleAnimationFromUsdAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341C28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

atomic_uint **std::__shared_ptr_emplace<realityio::SampleAnimationFromUsdAction>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26F336198;
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)(a1 + 48));
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationTimelineAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationTimelineAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341C78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::SkeletalPoseAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalPoseAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::SkeletalPoseComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalPoseComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341D18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::SkeletalPoseDefinitionAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalPoseDefinitionAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341D68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::SphereAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341DB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SphereAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341DB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::SphereMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341E08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SphereMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341E08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::TextureAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TextureAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341E58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::TransformAnimationTimelineAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TransformAnimationTimelineAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::TransformComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341EF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TransformComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F341EF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    uint64_t v3 = a1[4];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a1);
  }
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::ImportSessionV2::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>::~_DelivererWithSender(pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *this)
{
  *(void *)this = &unk_26F341F48;
  uint64_t v2 = (atomic_uint *)*((void *)this + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 6);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }

  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(this);
}

{
  atomic_uint *v2;
  atomic_uint *v3;
  uint64_t vars8;

  *(void *)this = &unk_26F341F48;
  uint64_t v2 = (atomic_uint *)*((void *)this + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 6);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::ImportSessionV2::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::_SendToListener(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9 = a1[6];
  uint64_t v8 = a1 + 6;
  if (!v9) {
    return 0;
  }
  char v13 = v8 - 1;
  uint64_t v14 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v8);
  uint64_t v15 = *v13;
  BOOL v16 = !*(unsigned char *)(v14 + 14) || v15 == 0;
  if (v16
    || a1[8]
    && !*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a1 + 8)
                 + 14))
  {
    return 0;
  }
  if (*a7 != a7[1])
  {
    (*(void (**)(uint64_t *))(*a1 + 40))(a1);
    pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,realityio::ImportSessionV2>::operator->(v13);
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_BeginDelivery();
  }
  if (a4) {
    uint64_t v18 = a4 - 16;
  }
  else {
    uint64_t v18 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v23, v18);
  uint64_t v19 = (void (*)(void *, uint64_t, uint64_t *))a1[9];
  uint64_t v20 = a1[10];
  char v21 = (void *)(v15 + (v20 >> 1));
  if (v20) {
    uint64_t v19 = *(void (**)(void *, uint64_t, uint64_t *))(*v21 + v19);
  }
  v19(v21, a2, &v23);
  uint64_t v22 = v24;
  if (v24 && atomic_fetch_add_explicit((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  if (*a7 != a7[1]) {
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery();
  }
  return 1;
}

void sub_23F67E39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::ImportSessionV2::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::GetNoticeType(uint64_t a1, const std::type_info *a2)
{
  uint64_t v2 = MEMORY[0x263F90670];
  uint64_t v3 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F90670], a2);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v14);
  if (v14[0] == v3)
  {
    v14[0] = "tf/notice.h";
    v14[1] = "GetNoticeType";
    void v14[2] = 563;
    v14[3] = "virtual TfType pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserve"
             "d__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>"
             ", pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>, void (realityio:"
             ":ImportSessionV2::*)(const pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged &, const pxrInternal"
             "__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &), pxrInternal__aapl__pxrRese"
             "rved__::UsdNotice::ObjectsChanged>>::GetNoticeType() const [Derived = pxrInternal__aapl__pxrReserved__::TfN"
             "otice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>, pxrInt"
             "ernal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>, void (realityio::ImportS"
             "essionV2::*)(const pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged &, const pxrInternal__aapl__"
             "pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &), pxrInternal__aapl__pxrReserved__::"
             "UsdNotice::ObjectsChanged>]";
    char v15 = 0;
    int v16 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t *)&v10, (pxrInternal__aapl__pxrReserved__ *)(*(void *)(v2 + 8) & 0x7FFFFFFFFFFFFFFFLL), v4);
    uint64_t v5 = std::string::insert(&v10, 0, "notice type ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v11, " undefined in the TfType system");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError();
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  return v3;
}

void sub_23F67E508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::ImportSessionV2::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::Delivers(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *))(*a1 + 24))(a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfType::IsA();
  if (result)
  {
    uint64_t v8 = a1[8];
    uint64_t v7 = a1 + 8;
    BOOL v6 = v8;
    if (v8) {
      BOOL v6 = *(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v7)
    }
                    + 14) == 0;
    uint64_t result = 0;
    if (a3)
    {
      if (!v6) {
        return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7 - 1)
      }
             + 16 == a3;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::ImportSessionV2::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::GetSenderWeakBase(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 56);
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const((void *)(a1 + 56));
  if (v3 & 1 | (unint64_t)v2) {
    return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1)
  }
         + 16;
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::ImportSessionV2::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::Clone()
{
}

void sub_23F67E704(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x10E1C40C1C1184DLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,realityio::ImportSessionV2>::operator->(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         uint64_t result = *a1,
         v4)
      ? (BOOL v6 = result == 0)
      : (BOOL v6 = 1),
        v6))
  {
    uint64_t v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register((unint64_t *)(a2 + 16), &v6);
    uint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    unint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      unint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(unint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_23F67E894(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *realityio::MultipleLayerMutex::MultipleLayerMutex<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>>(uint64_t *a1, long long *a2, long long *a3)
{
  unint64_t v4 = a2;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::reserve(a1, a3 - a2);
  while (v4 != a3)
    std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::push_back[abi:ne180100](a1, v4++);
  unint64_t v6 = a1[1];
  unint64_t v7 = 126 - 2 * __clz((uint64_t)(v6 - *a1) >> 4);
  if (v6 == *a1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,false>(*a1, v6, (uint64_t)v10, v8, 1);
  return a1;
}

void sub_23F67E978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(result, v13);
    char v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)char v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v17 + 1) + 8), 1u, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F67EA9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>::New()
{
}

void sub_23F67EB48(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40F64FA5DBLL);
  _Unwind_Resume(a1);
}

const void **realityio::UsdMetadataDelta::description@<X0>(realityio::UsdMetadataDelta *this@<X0>, CFStringRef *a2@<X8>)
{
  CFTypeRef cf = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  unint64_t v6 = Mutable;
  for (uint64_t i = (void *)*((void *)this + 3); i; uint64_t i = (void *)*i)
  {
    if ((i[2] & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t EmptyString = (i[2] & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else {
      unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Mutable);
    }
    if (*(char *)(EmptyString + 23) >= 0) {
      uint64_t v9 = (const char *)EmptyString;
    }
    else {
      uint64_t v9 = *(const char **)EmptyString;
    }
    CFStringRef v10 = CFStringCreateWithCString(0, v9, 0x8000100u);
    CFArrayAppendValue(v6, v10);
    CFRelease(v10);
  }
  CFStringRef v11 = realityio::joinAsCFStringRef(v6, (const __CFArray *)", ", v5);
  CFRelease(v6);
  *a2 = 0;
  *a2 = CFStringCreateWithFormat(0, 0, @"<UsdMetadataDelta: %p { metadata: (%lu) [ %@ ] }>", this, *((void *)this + 4), v11, v11);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_23F67EC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v4);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

void realityio::UsdMetadataDelta::~UsdMetadataDelta(realityio::UsdMetadataDelta *this)
{
  *(void *)this = &unk_26F341FE8;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F341FE8;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this + 8);

  JUMPOUT(0x2455D2BD0);
}

void stripInputsPrefixString(std::string *a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  std::string::size_type v4 = *(void *)(a2 + 8);
  if ((v2 & 0x80u) == 0) {
    unint64_t v5 = (unsigned char *)a2;
  }
  else {
    unint64_t v5 = *(unsigned char **)a2;
  }
  if ((v2 & 0x80u) != 0) {
    unint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2 >= 7) {
    unint64_t v2 = 7;
  }
  if (!v2) {
    goto LABEL_22;
  }
  unint64_t v6 = &v5[v2];
  unint64_t v7 = v5;
  uint64_t v8 = v6;
  do
  {
    if (*v7 == 105)
    {
      uint64_t v9 = 1u;
      while (v9 != 7)
      {
        if (&v7[v9] == v6) {
          goto LABEL_19;
        }
        int v10 = v7[v9];
        int v11 = aInputs_0[v9++];
        if (v10 != v11) {
          goto LABEL_11;
        }
      }
      uint64_t v8 = v7;
    }
LABEL_11:
    ++v7;
  }
  while (v7 != v6);
LABEL_19:
  if (v8 != v6 && v8 == v5)
  {
    std::string::basic_string(a1, (const std::string *)a2, 7uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v13);
  }
  else
  {
LABEL_22:
    if (v3 < 0)
    {
      uint64_t v12 = *(const std::string::value_type **)a2;
      std::string::__init_copy_ctor_external(a1, v12, v4);
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a1->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
}

void realityio::MaterialAssetAction::operator()(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  uint64_t v279 = *MEMORY[0x263EF8340];
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v276, a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&__p, a2);
  NameTokeuint64_t n = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
  MEMORY[0x2455CF810](__str, "standardConstColorMaterial");
  uint64_t v9 = *NameToken;
  int v10 = (atomic_uint *)(__str[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
  if ((__str[0].__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit(v10, 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  if ((atomic_uint *)(v9 & 0xFFFFFFFFFFFFFFF8) == v10)
  {
    uint64_t v18 = *(void *)(a1 + 16);
    if (v18)
    {
      if (*(void *)(v18 + 192))
      {
        __str[0].__r_.__value_.__r.__words[0] = 0;
        *(void *)v242 = 0;
        uint64_t v263 = 0;
        uint64_t v262 = 0;
        realityio::MaterialAssetPair::MaterialAssetPair((uint64_t *)&__p, &v263, &v262);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v262);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v263);
        a6[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MaterialAssetPair>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy();
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&__p, a2);
  int v11 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
  MEMORY[0x2455CF810](__str, "__materialAssetWithMeshVertexColors");
  uint64_t v12 = *v11;
  char v13 = (atomic_uint *)(__str[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
  if ((__str[0].__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  if ((atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8) == v13)
  {
    *(void *)v242 = REAssetManagerCreateAssetHandle();
    if (*(void *)v242) {
      RERetain();
    }
    realityio::ECSAction::queueForDeferredAssetLoad(a1, (uint64_t *)v242);
    RERelease();
    v254 = 0;
    uint64_t v19 = *a4;
    if (a4[1] == *a4)
    {
      __asm { FMOV            V0.2S, #1.0 }
      uint64_t v225 = _D0;
      float v224 = 1.0;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      __asm { FMOV            V0.2S, #1.0 }
      uint64_t v225 = _D0;
      float v224 = 1.0;
      do
      {
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__str, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + v20));
        int v27 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + v21));
        MEMORY[0x2455CF810](&__p, "primvars:displayColor");
        if ((*v27 & 0xFFFFFFFFFFFFFFF8) == (*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8))
        {
          int v28 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)__str);
          if ((__p.__x_[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v28)
          {
            if ((__str[0].__r_.__value_.__s.__data_[8] & 4) != 0) {
              uint64_t v29 = (*(uint64_t (**)(std::string *))((__str[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
            }
                                                             + 168))(__str);
            else {
              uint64_t v29 = __str[0].__r_.__value_.__r.__words[0];
            }
            long long v30 = *(_OWORD *)(v29 + 16);
            *(_OWORD *)__p.__x_ = *(_OWORD *)v29;
            *(_OWORD *)&__p.__x_[4] = v30;
            uint64_t v31 = *(void *)(v29 + 32);
            *(void *)&__p.__x_[8] = v31;
            if (v31)
            {
              std::string v32 = (atomic_ullong *)(v31 - 16);
              if (*(void *)&__p.__x_[6]) {
                std::string v32 = *(atomic_ullong **)&__p.__x_[6];
              }
              atomic_fetch_add_explicit(v32, 1uLL, memory_order_relaxed);
            }
            if (*(void *)__p.__x_ == 1)
            {
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__p);
              uint64_t v225 = **(void **)&__p.__x_[8];
              float v224 = *(float *)(*(void *)&__p.__x_[8] + 8);
            }
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&__p);
          }
        }
        else if ((__p.__x_[0] & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__str);
        ++v22;
        uint64_t v19 = *a4;
        v21 += 8;
        v20 += 16;
      }
      while (v22 < (a4[1] - *a4) >> 3);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v249, a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v249);
    v252.__r_.__value_.__r.__words[0] = 0;
    __str[0].__r_.__value_.__r.__words[0] = REMaterialAssetBuilderCreate();
    if (__str[0].__r_.__value_.__r.__words[0])
    {
      RERetain();
      if (__str[0].__r_.__value_.__r.__words[0])
      {
        RERelease();
        REMaterialAssetBuilderSetMaterialDefinition();
        *(void *)&long long v65 = v225;
        *((void *)&v65 + 1) = __PAIR64__(1.0, LODWORD(v224));
        *(_OWORD *)__p.__x_ = v65;
        LOBYTE(v246) = 0;
        realityio::assignGamutFromToken((const void **)&__p, &v246, (uint64_t *)&v254);
        REMaterialAssetBuilderSetColor4F();
        uint64_t v66 = REAssetManagerMaterialAssetBuilderBuild();
        *(void *)__p.__x_ = v66;
        if (v66)
        {
          RERetain();
          v252.__r_.__value_.__r.__words[0] = v66;
          *(void *)__p.__x_ = 0;
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
          RERelease();
        }
        else
        {
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
        }
      }
    }
    realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(__str);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v249);
    realityio::ECSAction::queueForDeferredAssetLoad(a1, (uint64_t *)&v252);
    __str[0].__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v261 = v252.__r_.__value_.__r.__words[0];
    if (v252.__r_.__value_.__r.__words[0])
    {
      RERetain();
      std::string::size_type v260 = __str[0].__r_.__value_.__r.__words[0];
      if (__str[0].__r_.__value_.__r.__words[0]) {
        RERetain();
      }
    }
    else
    {
      std::string::size_type v260 = 0;
    }
    realityio::MaterialAssetPair::MaterialAssetPair((uint64_t *)&__p, (uint64_t *)&v261, (uint64_t *)&v260);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v260);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v261);
    a6[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MaterialAssetPair>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy();
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__str, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "/__builtin/standardNoMaterial");
  MEMORY[0x2455CF7A0](v242, &__p);
  std::string::size_type v14 = __str[0].__r_.__value_.__r.__words[0];
  uint64_t v15 = *(void *)v242;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v242);
  if (SHIBYTE(__p.__x_[5]) < 0) {
    operator delete(*(void **)__p.__x_);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__str);
  if (v14 == v15)
  {
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 192);
      if (v17)
      {
        __str[0].__r_.__value_.__r.__words[0] = 0;
        uint64_t v259 = *(void *)(*(void *)(v17 + 16) + 248);
        if (v259)
        {
          RERetain();
          std::string::size_type v258 = __str[0].__r_.__value_.__r.__words[0];
          if (__str[0].__r_.__value_.__r.__words[0]) {
            RERetain();
          }
        }
        else
        {
          std::string::size_type v258 = 0;
        }
        realityio::MaterialAssetPair::MaterialAssetPair((uint64_t *)&__p, &v259, (uint64_t *)&v258);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v258);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v259);
        a6[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MaterialAssetPair>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy();
      }
    }
    *(void *)v242 = REAssetManagerCreateAssetHandle();
    if (*(void *)v242) {
      RERetain();
    }
    realityio::ECSAction::queueForDeferredAssetLoad(a1, (uint64_t *)v242);
    RERelease();
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v252, a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v252);
    v254 = 0;
    *(void *)__p.__x_ = REMaterialAssetBuilderCreate();
    if (*(void *)__p.__x_)
    {
      RERetain();
      if (*(void *)__p.__x_)
      {
        RERelease();
        REMaterialAssetBuilderSetMaterialDefinition();
        int v63 = (uint64_t *)REAssetManagerMaterialAssetBuilderBuild();
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
        if (v63)
        {
          RERetain();
          v254 = v63;
          __str[0].__r_.__value_.__r.__words[0] = 0;
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(__str);
          RERelease();
        }
        else
        {
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(__str);
        }
      }
    }
    realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v252);
    realityio::ECSAction::queueForDeferredAssetLoad(a1, (uint64_t *)&v254);
    __str[0].__r_.__value_.__r.__words[0] = 0;
    v257 = v254;
    if (v254)
    {
      RERetain();
      std::string::size_type v256 = __str[0].__r_.__value_.__r.__words[0];
      if (__str[0].__r_.__value_.__r.__words[0]) {
        RERetain();
      }
    }
    else
    {
      std::string::size_type v256 = 0;
    }
    realityio::MaterialAssetPair::MaterialAssetPair((uint64_t *)&__p, (uint64_t *)&v257, (uint64_t *)&v256);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v256);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v257);
    a6[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MaterialAssetPair>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy();
  }
  v255[1] = 0;
  v255[0] = 0;
  v254 = (uint64_t *)v255;
  uint64_t v253 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v252, "st");
  v250 = 0;
  uint64_t v251 = 0;
  uint64_t v248 = 0;
  v249 = &v250;
  v246 = &v247;
  v247 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v33 = *a4;
  if (a4[1] != *a4)
  {
    for (unint64_t i = 0; i < (a4[1] - *a4) >> 3; ++i)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__str, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * i));
      unint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v33 + 8 * i);
      unint64_t v36 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v35);
      MEMORY[0x2455CF810](&__p, "info:id");
      if ((*v36 & 0xFFFFFFFFFFFFFFF8) == (*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8))
      {
        int v37 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)__str);
        if ((__p.__x_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v37)
        {
          if ((__str[0].__r_.__value_.__s.__data_[8] & 4) != 0) {
            unint64_t v38 = (std::string *)(*(uint64_t (**)(std::string *))((__str[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
          }
                                                                          + 168))(__str);
          else {
            unint64_t v38 = __str;
          }
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v253, v38);
          goto LABEL_106;
        }
      }
      else if ((__p.__x_[0] & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)__str))
      {
        if ((__str[0].__r_.__value_.__s.__data_[8] & 4) != 0) {
          unint64_t v39 = (uint64_t **)(*(uint64_t (**)(std::string *))((__str[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
        }
                                                                     + 168))(__str);
        else {
          unint64_t v39 = (uint64_t **)__str[0].__r_.__value_.__r.__words[0];
        }
        if (&v254 != v39) {
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>(&v254, *v39, v39 + 1);
        }
        unint64_t v40 = v254;
        if (v254 != (uint64_t *)v255)
        {
          do
          {
            *(void *)v242 = 0;
            LODWORD(v236.__r_.__value_.__l.__data_) = 0;
            v226.__r_.__value_.__s.__data_[0] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            if (v238[0])
            {
              pxrInternal__aapl__pxrReserved__::TfToken::operator=(v242, v40 + 4);
              std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>((uint64_t)&__p, v40 + 4, v240);
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t **)&v246, (uint64_t *)&__p, (uint64_t)&__p);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p.__x_[2]);
              if ((__p.__x_[0] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t v41 = v40[4];
              *(void *)__p.__x_ = v41;
              if ((v41 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                *(void *)__p.__x_ &= 0xFFFFFFFFFFFFFFF8;
              }
              *(void **)&__p.__x_[2] = v238[0];
              if (v238[0]) {
                RERetain();
              }
              uint64_t v42 = v250;
              uint64_t v43 = &v250;
              int v44 = &v250;
              if (!v250) {
                goto LABEL_74;
              }
              int v44 = &v250;
              while (1)
              {
                while (1)
                {
                  uint64_t v43 = (uint64_t **)v42;
                  unint64_t v45 = v42 + 4;
                  if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&v251, (uint64_t *)&__p, v42 + 4))break; {
                  uint64_t v42 = *v43;
                  }
                  int v44 = v43;
                  if (!*v43) {
                    goto LABEL_74;
                  }
                }
                if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&v251, v45, (uint64_t *)&__p))break; {
                int v44 = v43 + 1;
                }
                uint64_t v42 = v43[1];
                if (!v42) {
                  goto LABEL_74;
                }
              }
              if (!*v44)
              {
LABEL_74:
                uint64_t v46 = (uint64_t *)operator new(0x30uLL);
                uint64_t v47 = *(void *)__p.__x_;
                uint64_t v48 = *(void *)&__p.__x_[2];
                *(void *)&__p.__x_[2] = 0;
                *(void *)__p.__x_ = 0;
                v46[4] = v47;
                v46[5] = v48;
                *uint64_t v46 = 0;
                v46[1] = 0;
                v46[2] = (uint64_t)v43;
                *int v44 = v46;
                if (*v249)
                {
                  v249 = (uint64_t **)*v249;
                  uint64_t v46 = *v44;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v250, v46);
                ++v251;
              }
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p.__x_[2]);
              if ((__p.__x_[0] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(v238);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v240);
            if ((v242[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v242 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            int v49 = (uint64_t *)v40[1];
            if (v49)
            {
              do
              {
                int64x2_t v50 = v49;
                int v49 = (uint64_t *)*v49;
              }
              while (v49);
            }
            else
            {
              do
              {
                int64x2_t v50 = (uint64_t *)v40[2];
                _ZF = *v50 == (void)v40;
                unint64_t v40 = v50;
              }
              while (!_ZF);
            }
            unint64_t v40 = v50;
          }
          while (v50 != (uint64_t *)v255);
        }
        goto LABEL_106;
      }
      uint64_t v51 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v35);
      MEMORY[0x2455CF810](&__p, "__defaultUV");
      if ((*v51 & 0xFFFFFFFFFFFFFFF8) != (*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8))
      {
        if ((__p.__x_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_97:
        int64x2_t v54 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v35);
        MEMORY[0x2455CF810](&__p, "__shaderPrimPath");
        if ((*v54 & 0xFFFFFFFFFFFFFFF8) == (*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8))
        {
          int v55 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::VtValue *)__str);
          if ((__p.__x_[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v55)
          {
            if ((__str[0].__r_.__value_.__s.__data_[8] & 4) != 0) {
              int v56 = (std::string *)(*(uint64_t (**)(std::string *))((__str[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
            }
                                                                            + 168))(__str);
            else {
              int v56 = __str;
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v244, v56);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v245, (_DWORD *)v56->__r_.__value_.__r.__words + 1);
          }
        }
        else if ((__p.__x_[0] & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_106;
      }
      int v52 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)__str);
      if ((__p.__x_[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (!v52) {
        goto LABEL_97;
      }
      if ((__str[0].__r_.__value_.__s.__data_[8] & 4) != 0) {
        uint64_t v53 = (const std::string *)(*(uint64_t (**)(std::string *))((__str[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
      }
                                                                            + 168))(__str);
      else {
        uint64_t v53 = (const std::string *)__str[0].__r_.__value_.__r.__words[0];
      }
      std::string::operator=(&v252, v53);
LABEL_106:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__str);
      uint64_t v33 = *a4;
    }
  }
  uint64_t v57 = a2;
  uint64_t v58 = *(void *)(a1 + 16);
  if (v58 && *(void *)(v58 + 200))
  {
    MEMORY[0x2455CF810](&__p, "UsdPreviewSurface");
    uint64_t v59 = v253;
    int v60 = (atomic_uint *)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
    if ((__p.__x_[0] & 7) != 0) {
      atomic_fetch_add_explicit(v60, 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__str, a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "/__root");
    uint64_t v61 = (pxrInternal__aapl__pxrReserved__::SdfPath *)MEMORY[0x2455CF7A0](v242, &__p);
    if (__str[0].__r_.__value_.__r.__words[0] == *(void *)v242)
    {
      int v62 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v61);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v226, v62);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v226.__r_.__value_.__r.__words + 1, v62 + 1);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v226, a2);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v242);
    if (SHIBYTE(__p.__x_[5]) < 0) {
      operator delete(*(void **)__p.__x_);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__str);
    int v67 = operator new(0x180uLL);
    v67[1] = 0;
    v67[2] = 0;
    *int v67 = &unk_26F339CC8;
    std::string::size_type v222 = (std::string::size_type)v67;
    std::string::size_type v223 = (std::string::size_type)(v67 + 3);
    realityio::MaterialAssetBuilder::MaterialAssetBuilder((realityio::MaterialAssetBuilder *)(v67 + 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v226);
    memset(v242, 0, sizeof(v242));
    int v243 = 1065353216;
    v240[1] = 0;
    uint64_t v241 = 0;
    v240[0] = &v240[1];
    uint64_t v68 = (uint64_t *)v249;
    if (v249 == &v250) {
      goto LABEL_284;
    }
    unint64_t v69 = v59 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v215 = v59 & 0xFFFFFFFFFFFFFFF8;
    v221 = v60;
    do
    {
      int v70 = v68 + 4;
      uint64_t v71 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v246, __str, v68 + 4);
      int v72 = *v71;
      if (!*v71)
      {
        int v73 = (uint64_t *)operator new(0x30uLL);
        int v72 = v73;
        *(void *)&__p.__x_[2] = &v247;
        uint64_t v74 = *v70;
        v73[4] = *v70;
        if ((v74 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v73[4] &= 0xFFFFFFFFFFFFFFF8;
        }
        v73[5] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        LOBYTE(__p.__x_[4]) = 1;
        std::string::size_type v75 = __str[0].__r_.__value_.__r.__words[0];
        *int v72 = 0;
        v72[1] = 0;
        v72[2] = v75;
        *uint64_t v71 = v72;
        uint64_t v76 = v72;
        if (*v246)
        {
          v246 = (uint64_t **)*v246;
          uint64_t v76 = *v71;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v247, v76);
        ++v248;
        *(void *)__p.__x_ = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p, 0);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v238, (_DWORD *)v72 + 10);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v238 + 1, (_DWORD *)v72 + 11);
      int v77 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v240, v238);
      uint64_t v78 = v77;
      if (&v240[1] == v77)
      {
        *(_OWORD *)&__str[0].__r_.__value_.__r.__words[1] = 0uLL;
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__str[0].__r_.__value_.__l.__size_;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v238);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p.__x_[1], (_DWORD *)v238 + 1);
        *(std::string *)&__p.__x_[2] = __str[0];
        if (__str[0].__r_.__value_.__r.__words[2])
        {
          *(void *)(__str[0].__r_.__value_.__l.__size_ + 16) = &__p.__x_[4];
          __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__str[0].__r_.__value_.__l.__size_;
          *(_OWORD *)&__str[0].__r_.__value_.__r.__words[1] = 0uLL;
        }
        else
        {
          *(void *)&__p.__x_[2] = &__p.__x_[4];
        }
        uint64_t v79 = (char *)v240[1];
        uint64_t v80 = &v240[1];
        unint64_t v81 = &v240[1];
        if (!v240[1]) {
          goto LABEL_154;
        }
        unint64_t v81 = &v240[1];
        while (1)
        {
          while (1)
          {
            uint64_t v80 = (void **)v79;
            uint64_t v82 = v79 + 32;
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&__p, (void *)v79 + 4)) {
              break;
            }
            uint64_t v79 = (char *)*v80;
            unint64_t v81 = v80;
            if (!*v80) {
              goto LABEL_154;
            }
          }
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v82, &__p)) {
            break;
          }
          unint64_t v81 = v80 + 1;
          uint64_t v79 = (char *)v80[1];
          if (!v79) {
            goto LABEL_154;
          }
        }
        if (!*v81)
        {
LABEL_154:
          int v83 = operator new(0x40uLL);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v83 + 8, &__p);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v83 + 9, &__p.__x_[1]);
          uint64_t v84 = *(void *)&__p.__x_[2];
          uint64_t v85 = *(void *)&__p.__x_[4];
          *((void *)v83 + 6) = *(void *)&__p.__x_[4];
          uint64_t v86 = (char *)(v83 + 12);
          *((void *)v83 + 5) = v84;
          uint64_t v87 = *(void *)&__p.__x_[6];
          *((void *)v83 + 7) = *(void *)&__p.__x_[6];
          if (v87)
          {
            *(void *)(v85 + 16) = v86;
            *(void *)&__p.__x_[2] = &__p.__x_[4];
            *(void *)&__p.__x_[4] = 0;
            *(void *)&__p.__x_[6] = 0;
          }
          else
          {
            *((void *)v83 + 5) = v86;
          }
          *(void *)int v83 = 0;
          *((void *)v83 + 1) = 0;
          *((void *)v83 + 2) = v80;
          *unint64_t v81 = v83;
          if (*(void *)v240[0])
          {
            v240[0] = *(void **)v240[0];
            int v83 = *v81;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v240[1], (uint64_t *)v83);
          ++v241;
        }
        std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)&__p.__x_[2], *(void **)&__p.__x_[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
        std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)__str, (void *)__str[0].__r_.__value_.__l.__size_);
        int v77 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v240, v238);
        unint64_t v69 = v215;
        uint64_t v78 = v77;
      }
      if ((*v70 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t EmptyString = (*v70 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        uint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v77);
      }
      stripInputsPrefixString((std::string *)&__p, EmptyString);
      MEMORY[0x2455CF830](&v236, &__p);
      if (SHIBYTE(__p.__x_[5]) < 0) {
        operator delete(*(void **)__p.__x_);
      }
      MEMORY[0x2455CF810](&v231, "inputs:file");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)v238, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v231);
      uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      if (*(char *)(String + 23) < 0)
      {
        std::string::__init_copy_ctor_external(__str, *(const std::string::value_type **)String, *(void *)(String + 8));
      }
      else
      {
        long long v90 = *(_OWORD *)String;
        __str[0].__r_.__value_.__r.__words[2] = *(void *)(String + 16);
        *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v90;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      uint64_t v91 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      if ((v231 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v231 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)v69 == v221)
      {
        if ((*v70 & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v92 = (*v70 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          uint64_t v92 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v91);
        }
        stripInputsPrefixString((std::string *)&__p, v92);
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str[0].__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = *(_OWORD *)__p.__x_;
        __str[0].__r_.__value_.__r.__words[2] = *(void *)&__p.__x_[4];
      }
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)__p.__x_ = *(_OWORD *)&__str[0].__r_.__value_.__l.__data_;
        *(void *)&__p.__x_[4] = *((void *)&__str[0].__r_.__value_.__l + 2);
      }
      *(void *)&__p.__x_[6] = v68[5];
      if (*(void *)&__p.__x_[6]) {
        RERetain();
      }
      std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::WrappedRERef<REAsset *>>>((uint64_t **)v78 + 5, (const void **)&__p, (long long *)&__p);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p.__x_[6]);
      if (SHIBYTE(__p.__x_[5]) < 0) {
        operator delete(*(void **)__p.__x_);
      }
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str[0].__r_.__value_.__l.__data_);
      }
      if ((v236.__r_.__value_.__s.__data_[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v236.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v238);
      int v93 = (uint64_t *)v68[1];
      if (v93)
      {
        do
        {
          long long v94 = (uint64_t **)v93;
          int v93 = (uint64_t *)*v93;
        }
        while (v93);
      }
      else
      {
        do
        {
          long long v94 = (uint64_t **)v68[2];
          _ZF = *v94 == v68;
          uint64_t v68 = (uint64_t *)v94;
        }
        while (!_ZF);
      }
      uint64_t v68 = (uint64_t *)v94;
    }
    while (v94 != &v250);
    uint64_t v95 = (void **)v240[0];
    if (v240[0] == &v240[1]) {
      goto LABEL_284;
    }
LABEL_196:
    *(_OWORD *)&__str[0].__r_.__value_.__r.__words[1] = 0uLL;
    __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__str[0].__r_.__value_.__l.__size_;
    unint64_t v96 = (const void **)v95[5];
    uint64_t v97 = (const void **)(v95 + 6);
    if (v96 == (const void **)(v95 + 6)) {
      goto LABEL_219;
    }
    while (1)
    {
      std::string::size_type size = __str[0].__r_.__value_.__l.__size_;
      if ((std::string::size_type *)__str[0].__r_.__value_.__l.__data_ == &__str[0].__r_.__value_.__r.__words[1]) {
        break;
      }
      p_std::string::size_type size = &__str[0].__r_.__value_.__l.__size_;
      if (__str[0].__r_.__value_.__l.__size_)
      {
        do
        {
          uint64_t v100 = (const void **)size;
          std::string::size_type size = *(void *)(size + 8);
        }
        while (size);
      }
      else
      {
        do
        {
          uint64_t v100 = (const void **)p_size[2];
          _ZF = *v100 == p_size;
          p_std::string::size_type size = (std::string::size_type *)v100;
        }
        while (_ZF);
      }
      if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&__str[0].__r_.__value_.__r.__words[2], v100 + 4, v96 + 4))
      {
        if (!__str[0].__r_.__value_.__l.__size_) {
          goto LABEL_204;
        }
LABEL_206:
        v238[0] = v100;
        uint64_t v101 = (uint64_t **)(v100 + 1);
        goto LABEL_208;
      }
      uint64_t v101 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)__str, v238, v96 + 4);
LABEL_208:
      if (!*v101) {
        goto LABEL_209;
      }
LABEL_212:
      uint64_t v104 = (const void **)v96[1];
      if (v104)
      {
        do
        {
          int v105 = v104;
          uint64_t v104 = (const void **)*v104;
        }
        while (v104);
      }
      else
      {
        do
        {
          int v105 = (const void **)v96[2];
          _ZF = *v105 == v96;
          unint64_t v96 = v105;
        }
        while (!_ZF);
      }
      unint64_t v96 = v105;
      if (v105 == v97)
      {
        unint64_t v96 = (const void **)v95[5];
LABEL_219:
        unint64_t v231 = 0;
        *(void *)&long long v230 = 0;
        memset(&__p, 0, 24);
        *(_OWORD *)&v236.__r_.__value_.__l.__data_ = xmmword_23F7BDEF0;
        uint64_t v275 = 0;
        if (v96 != v97)
        {
          do
          {
            std::operator+<char>();
            MEMORY[0x2455CF830](&v274, v238);
            if (SHIBYTE(v239) < 0) {
              operator delete(v238[0]);
            }
            uint64_t v237 = v274;
            if ((v274 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v274 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v237 &= 0xFFFFFFFFFFFFFFF8;
            }
            if ((v237 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v237 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v274 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v274 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            int v106 = (const void **)v96[1];
            if (v106)
            {
              do
              {
                long long v107 = v106;
                int v106 = (const void **)*v106;
              }
              while (v106);
            }
            else
            {
              do
              {
                long long v107 = (const void **)v96[2];
                _ZF = *v107 == v96;
                unint64_t v96 = v107;
              }
              while (!_ZF);
            }
            unint64_t v96 = v107;
          }
          while (v107 != v97);
          if (SHIBYTE(__p.__x_[5]) < 0) {
            operator delete(*(void **)__p.__x_);
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v275, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v95 + 4));
        uint64_t v108 = (std::__shared_weak_count *)operator new(0x100uLL);
        v108->__shared_owners_ = 0;
        v108->__shared_weak_owners_ = 0;
        v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342118;
        realityio::Builder::Builder((realityio::Builder *)&v108[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v275);
        v108[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342168;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v108[9].__shared_weak_owners_ = 0;
        v108[10].__vftable = 0;
        v108[10].__shared_owners_ = 0;
        v108[9].__vftable = 0;
        v108[9].__shared_owners_ = (uint64_t)&v108[9].__shared_weak_owners_;
        v238[0] = (void *)v231;
        if ((v231 & 7) != 0)
        {
          uint64_t v109 = (void *)(v231 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v231 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)v238[0] = v109; {
        }
          }
        v236.__r_.__value_.__r.__words[0] = v230;
        if ((v230 & 7) != 0)
        {
          unint64_t v110 = v230 & 0xFFFFFFFFFFFFFFF8;
          if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v230 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)v236.__r_.__value_.__r.__words[0] = v110; {
        uint64_t v111 = };
          }
        realityio::TextureBuilder::TextureDataT::TextureDataT((uint64_t)&__p, &v275, __str, v111);
        realityio::TextureBuilder::TextureDataT::operator=((uint64_t)&v108[8].__shared_weak_owners_, (uint64_t)&__p);
        realityio::TextureBuilder::TextureDataT::~TextureDataT((id *)&__p);

        if ((v236.__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v236.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (((uint64_t)v238[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v238[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t shared_weak_owners = v108[1].__shared_weak_owners_;
        int v114 = (std::__shared_weak_count *)v108[2].__vftable;
        if (v114) {
          atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v115 = (long long *)realityio::TextureBuilder::kOutputName(v112);
        *(void *)__p.__x_ = (char *)v108 + 208;
        realityio::Outputs::storeValue<realityio::TextureBuilder::TextureDataT *>(shared_weak_owners, v115, (uint64_t *)&__p);
        if (v114) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v114);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        uint64_t v116 = (realityio::TextureBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v275);
        int v117 = (const void **)v95[5];
        if (v117 != v97)
        {
          do
          {
            v238[0] = &v108[1];
            v238[1] = v108;
            atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v118 = realityio::TextureBuilder::kOutputName(v116);
            unint64_t v119 = (realityio::TextureBuilder *)MEMORY[0x2455CF830](&v239, v118);
            v236.__r_.__value_.__r.__words[0] = v223;
            v236.__r_.__value_.__l.__size_ = v222;
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v222 + 8), 1uLL, memory_order_relaxed);
            uint64_t v120 = realityio::TextureBuilder::kOutputName(v119);
            MEMORY[0x2455CF830](&v236.__r_.__value_.__r.__words[2], v120);
            std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::pair[abi:ne180100]<realityio::BuilderAndIOName&,realityio::BuilderAndIOName&,0>(&__p, &v236, v238);
            std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__emplace_multi<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>(v242, (uint64_t)&__p);
            if ((__p.__x_[10] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__p.__x_[10] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (*(void *)&__p.__x_[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p.__x_[8]);
            }
            if ((__p.__x_[4] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__p.__x_[4] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (*(void *)&__p.__x_[2]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p.__x_[2]);
            }
            if ((v236.__r_.__value_.__s.__data_[16] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v236.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v236.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v236.__r_.__value_.__l.__size_);
            }
            if ((v239 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v239 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v116 = (realityio::TextureBuilder *)v238[1];
            if (v238[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v238[1]);
            }
            int v121 = (const void **)v117[1];
            if (v121)
            {
              do
              {
                uint64_t v122 = v121;
                int v121 = (const void **)*v121;
              }
              while (v121);
            }
            else
            {
              do
              {
                uint64_t v122 = (const void **)v117[2];
                _ZF = *v122 == v117;
                int v117 = v122;
              }
              while (!_ZF);
            }
            int v117 = v122;
          }
          while (v122 != v97);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v108);
        if ((v230 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v230 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v231 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v231 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)__str, (void *)__str[0].__r_.__value_.__l.__size_);
        int v123 = (void **)v95[1];
        if (v123)
        {
          do
          {
            int v124 = v123;
            int v123 = (void **)*v123;
          }
          while (v123);
        }
        else
        {
          do
          {
            int v124 = (void **)v95[2];
            _ZF = *v124 == v95;
            uint64_t v95 = v124;
          }
          while (!_ZF);
        }
        uint64_t v95 = v124;
        if (v124 == &v240[1]) {
LABEL_284:
        }
          operator new();
        goto LABEL_196;
      }
    }
    uint64_t v100 = (const void **)&__str[0].__r_.__value_.__l.__size_;
    if (!__str[0].__r_.__value_.__l.__size_)
    {
LABEL_204:
      v238[0] = &__str[0].__r_.__value_.__r.__words[1];
      uint64_t v101 = (uint64_t **)&__str[0].__r_.__value_.__l.__size_;
LABEL_209:
      *(void *)__p.__x_ = operator new(0x40uLL);
      *(void *)&__p.__x_[2] = &__str[0].__r_.__value_.__l.__size_;
      LOBYTE(__p.__x_[4]) = 0;
      std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100]((std::string *)(*(void *)__p.__x_ + 32), (long long *)v96 + 2);
      LOBYTE(__p.__x_[4]) = 1;
      long long v102 = v238[0];
      uint64_t v103 = *(uint64_t **)__p.__x_;
      **(void **)__p.__x_ = 0;
      v103[1] = 0;
      v103[2] = (uint64_t)v102;
      char *v101 = v103;
      if (*(void *)__str[0].__r_.__value_.__l.__data_)
      {
        __str[0].__r_.__value_.__r.__words[0] = *(void *)__str[0].__r_.__value_.__l.__data_;
        uint64_t v103 = *v101;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)__str[0].__r_.__value_.__l.__size_, v103);
      ++__str[0].__r_.__value_.__r.__words[2];
      *(void *)__p.__x_ = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p, 0);
      goto LABEL_212;
    }
    goto LABEL_206;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v235, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&__p, a2);
  uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v242, *(const std::string::value_type **)Name, *(void *)(Name + 8));
  }
  else
  {
    long long v126 = *(_OWORD *)Name;
    *(void *)&v242[16] = *(void *)(Name + 16);
    *(_OWORD *)v242 = v126;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  MEMORY[0x2455CF810](&__p, "inputs:opacityThreshold");
  int v127 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v254, (uint64_t *)&__p);
  uint64_t v128 = v127;
  if (v255 != v127
    && (int v129 = (float *)(v127 + 5),
        pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v127 + 5)))
    && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v128 + 5)))
  {
    uint64_t v130 = v128[6];
    if ((v130 & 4) != 0) {
      int v129 = (float *)(*(uint64_t (**)(void *))((v130 & 0xFFFFFFFFFFFFFFF8) + 168))(v128 + 5);
    }
    BOOL v131 = *v129 > 0.0;
  }
  else
  {
    BOOL v131 = 0;
  }
  if ((__p.__x_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v131)
  {
    uint64_t v234 = 0;
    *(void *)__p.__x_ = REAssetManagerCreateAssetHandle();
    if (*(void *)__p.__x_) {
      goto LABEL_336;
    }
    goto LABEL_337;
  }
  MEMORY[0x2455CF810](&__p, "inputs:diffuseColor");
  MEMORY[0x2455CF810](__str, "inputs:opacity");
  LODWORD(v231) = 1065353216;
  LOBYTE(v230) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  LOBYTE(v275) = 0;
  if (v238[0] == v236.__r_.__value_.__l.__data_)
  {
    MEMORY[0x2455CF810](&v226, "outputs:a");
    _ZF = v226.__r_.__value_.__r.__words[0] >= 8 || v238[0] == 0;
    char v134 = !_ZF;
    if ((v226.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v226.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v134 & 1) == 0 && !v236.__r_.__value_.__r.__words[0]) {
      goto LABEL_316;
    }
  }
  else if (!v236.__r_.__value_.__r.__words[0])
  {
LABEL_316:
    BOOL v132 = *(float *)&v231 < 1.0;
    goto LABEL_328;
  }
  BOOL v132 = 1;
LABEL_328:
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v236);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v238);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v240);
  if ((__str[0].__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__str[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((__p.__x_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v234 = 0;
  if (v132)
  {
    *(void *)__p.__x_ = REAssetManagerCreateAssetHandle();
    if (*(void *)__p.__x_) {
      goto LABEL_336;
    }
  }
  else
  {
    *(void *)__p.__x_ = REAssetManagerCreateAssetHandle();
    if (*(void *)__p.__x_)
    {
LABEL_336:
      RERetain();
      uint64_t v135 = *(void *)__p.__x_;
      goto LABEL_338;
    }
  }
LABEL_337:
  uint64_t v135 = 0;
LABEL_338:
  uint64_t v136 = v234;
  if (v234 != v135)
  {
    uint64_t v234 = v135;
    *(void *)__p.__x_ = v136;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
  if (v234)
  {
    realityio::ECSAction::queueForDeferredAssetLoad(a1, &v234);
    RERelease();
    uint64_t v233 = REMaterialAssetBuilderCreate();
    if (v233)
    {
      RERetain();
      if (v233)
      {
        RERelease();
        REMaterialAssetBuilderSetName();
        REMaterialAssetBuilderSetMaterialDefinition();
        uint64_t v137 = v233;
        uint64_t v138 = *a4;
        if (a4[1] != *a4)
        {
          uint64_t v139 = 0;
          uint64_t v140 = 0;
          unint64_t v141 = 0;
          do
          {
            int v142 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v138 + v139);
            if (pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v138 + v139)))
            {
              pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((uint64_t *)v240, v142);
              std::string::basic_string[abi:ne180100]<0>(&__p, "/__stage.layerData");
              MEMORY[0x2455CF7A0](v238, &__p);
              if (v240[0] == v238[0])
              {
                TargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(v142);
                std::string::basic_string[abi:ne180100]<0>(__str, "/customLayerData");
                MEMORY[0x2455CF7A0](&v236, __str);
                int HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(TargetPath, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v236);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v236);
                if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str[0].__r_.__value_.__l.__data_);
                }
              }
              else
              {
                int HasPrefix = 0;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v238);
              if (SHIBYTE(__p.__x_[5]) < 0) {
                operator delete(*(void **)__p.__x_);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v240);
              if (HasPrefix
                && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + v140)))
              {
                unint64_t v145 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*a4 + v139));
                pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v145);
                uint64_t v146 = *(void *)(*a5 + v140 + 8);
                if ((v146 & 4) != 0) {
                  (*(void (**)(void))((v146 & 0xFFFFFFFFFFFFFFF8) + 168))();
                }
                REMaterialAssetBuilderSetFunctionConstant();
              }
            }
            ++v141;
            uint64_t v138 = *a4;
            v140 += 16;
            v139 += 8;
          }
          while (v141 < (a4[1] - *a4) >> 3);
          uint64_t v137 = v233;
          uint64_t v57 = a2;
        }
        MEMORY[0x2455CF810](&__p, "inputs:opacity");
        LODWORD(__str[0].__r_.__value_.__l.__data_) = 1065353216;
        if ((__p.__x_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CF810](v240, "inputs:diffuseColor");
        __str[0].__r_.__value_.__l.__data_ = (std::string::pointer)vdup_n_s32(0x3E3851ECu);
        LODWORD(__str[0].__r_.__value_.__r.__words[1]) = 1043878380;
        if (((uint64_t)v240[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v240[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CF810](v238, "inputs:realitykit:tint");
        __asm { FMOV            V0.2S, #1.0 }
        v240[0] = _D0;
        LODWORD(v240[1]) = 1065353216;
        if (((uint64_t)v238[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v238[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        LODWORD(v268) = 1065353216;
        MEMORY[0x2455CF810](&v226, "inputs:diffuseColor");
        MEMORY[0x2455CF810](&v231, "inputs:opacity");
        MEMORY[0x2455CF810](&v230, "outputs:a");
        uint64_t v275 = 0;
        LOBYTE(v267) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        unint64_t v272 = 0;
        LOBYTE(v265) = 0;
        if (v273 != v271 || !v273 || (v272 & 0xFFFFFFFFFFFFFFF8) != (v230 & 0xFFFFFFFFFFFFFFF8))
        {
          LOBYTE(v264) = 0;
          char v266 = 0;
          uint64_t v270 = 0;
          uint64_t v148 = v271;
          if (v271 != v269)
          {
            uint64_t v271 = v269;
            uint64_t v269 = v148;
          }
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v269);
          if ((v270 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v270 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        LOBYTE(v264) = 0;
        char v266 = 0;
        uint64_t v270 = 0;
        uint64_t v149 = v273;
        if (v273 != v269)
        {
          uint64_t v273 = v269;
          uint64_t v269 = v149;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v269);
        if ((v270 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v270 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v271);
        if ((v272 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v272 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v273);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v274);
        if ((v275 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v275 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v230 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v230 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v231 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v231 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v226.__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v226.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        REMaterialAssetBuilderSetColor4F();
        REMaterialAssetBuilderSetFunctionConstant();
        uint64_t v150 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v244);
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v151 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__str, v150);
        __p.__x_[0] = v151;
        for (uint64_t j = 1; j != 624; ++j)
        {
          std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v151 = j + 1812433253 * (v151 ^ (v151 >> 30));
          __p.__x_[j] = v151;
        }
        __p.__i_ = 0;
        std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&__p);
        std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&__p);
        std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&__p);
        REMaterialAssetBuilderSetColor3F();
        MEMORY[0x2455CF810](&v226, "inputs:emissiveColor");
        unint64_t v231 = 0;
        *(void *)&long long v230 = 0;
        LOBYTE(v269) = 0;
        LOBYTE(v268) = 0;
        if ((_BYTE)v269)
        {
          REMaterialAssetBuilderSetFloat4();
        }
        else
        {
          unint64_t v153 = v231;
          if ((v231 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v231 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v153 &= 0xFFFFFFFFFFFFFFF8;
          }
          LOBYTE(v274) = 0;
          *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = *(_OWORD *)v240;
          if ((v153 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v153 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          REMaterialAssetBuilderSetColor3F();
          __asm { FMOV            V0.4S, #1.0 }
          REMaterialAssetBuilderSetFloat4();
        }
        REMaterialAssetBuilderSetFloat();
        MEMORY[0x2455CF810](&v274, "inputs:metallic");
        std::string::basic_string[abi:ne180100]<0>(__str, "metallicScale");
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str[0].__r_.__value_.__l.__data_);
        }
        MEMORY[0x2455CF810](&v273, "inputs:roughness");
        std::string::basic_string[abi:ne180100]<0>(__str, "roughnessScale");
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str[0].__r_.__value_.__l.__data_);
        }
        MEMORY[0x2455CF810](&v272, "inputs:clearcoat");
        std::string::basic_string[abi:ne180100]<0>(__str, "clearcoatScale");
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str[0].__r_.__value_.__l.__data_);
        }
        MEMORY[0x2455CF810](&v271, "inputs:clearcoatRoughness");
        std::string::basic_string[abi:ne180100]<0>(__str, "clearcoatRoughnessScale");
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str[0].__r_.__value_.__l.__data_);
        }
        MEMORY[0x2455CF810](__str, "inputs:opacityThreshold");
        LODWORD(v270) = 0;
        if ((__str[0].__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(__str[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        REMaterialAssetBuilderSetFloat();
        MEMORY[0x2455CF810](__str, "inputs:ior");
        LODWORD(v270) = 1069547520;
        if ((__str[0].__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(__str[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        REMaterialAssetBuilderSetFloat();
        if ((v271 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v271 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v272 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v272 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v273 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v273 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v274 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v274 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v275);
        if ((v230 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v230 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v231 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v231 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v226.__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v226.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v155 = v233;
        MEMORY[0x2455CF810](&v231, "inputs:diffuseColor");
        MEMORY[0x2455CF810](&v230, "inputs:normal");
        MEMORY[0x2455CF810](&v275, "inputs:emissiveColor");
        MEMORY[0x2455CF810](&v274, "inputs:roughness");
        MEMORY[0x2455CF810](&v273, "inputs:metallic");
        MEMORY[0x2455CF810](&v272, "inputs:occlusion");
        MEMORY[0x2455CF810](&v271, "inputs:specularColor");
        MEMORY[0x2455CF810](&v270, "inputs:opacity");
        MEMORY[0x2455CF810](&v269, "inputs:clearcoat");
        MEMORY[0x2455CF810](&v268, "inputs:clearcoatRoughness");
        MEMORY[0x2455CF810](&v267, "inputs:realitykitTintMask");
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableBaseColorMap");
        if (SHIBYTE(__p.__x_[5]) < 0) {
          operator delete(*(void **)__p.__x_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableNormalMap");
        if (SHIBYTE(__p.__x_[5]) < 0) {
          operator delete(*(void **)__p.__x_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableEmissiveMap");
        if (SHIBYTE(__p.__x_[5]) < 0) {
          operator delete(*(void **)__p.__x_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableRoughnessMap");
        if (SHIBYTE(__p.__x_[5]) < 0) {
          operator delete(*(void **)__p.__x_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableMetallicMap");
        if (SHIBYTE(__p.__x_[5]) < 0) {
          operator delete(*(void **)__p.__x_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableAOMap");
        if (SHIBYTE(__p.__x_[5]) < 0) {
          operator delete(*(void **)__p.__x_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableSpecularMap");
        if (SHIBYTE(__p.__x_[5]) < 0) {
          operator delete(*(void **)__p.__x_);
        }
        v238[0] = 0;
        LOBYTE(v265) = 0;
        LOBYTE(v264) = 0;
        v236.__r_.__value_.__r.__words[0] = 0;
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v226);
        if ((v236.__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v236.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (((uint64_t)v238[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v238[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        REMaterialAssetBuilderSetFunctionConstant();
        std::string::basic_string[abi:ne180100]<0>(&__p, "UseBaseColorMapAsTintMask");
        if (SHIBYTE(__p.__x_[5]) < 0) {
          operator delete(*(void **)__p.__x_);
        }
        v238[0] = 0;
        v236.__r_.__value_.__r.__words[0] = 0;
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v226);
        if ((v236.__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v236.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (((uint64_t)v238[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v238[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v238[0] = 0;
        v236.__r_.__value_.__r.__words[0] = 0;
        int v264 = 1008981770;
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v226);
        if ((v236.__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v236.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (((uint64_t)v238[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v238[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CF810](&__p, "inputs:opacityThreshold");
        LODWORD(__str[0].__r_.__value_.__l.__data_) = 0;
        if ((__p.__x_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (ShadeInputValueWith > 0.0) {
          REMaterialAssetBuilderSetFunctionConstant();
        }
        if ((v267 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v267 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v268 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v268 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v269 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v269 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v270 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v270 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v271 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v271 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v272 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v272 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v273 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v273 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v274 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v274 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v275 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v275 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v230 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v230 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v231 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v231 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "/__builtin/standardVertexColorMaterial");
        MEMORY[0x2455CF7A0](&v275, &__p);
        if (SHIBYTE(__p.__x_[5]) < 0) {
          operator delete(*(void **)__p.__x_);
        }
        v157 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v57);
        MEMORY[0x2455CF810](&__p, "__materialAssetWithVertexColors");
        if ((*v157 & 0xFFFFFFFFFFFFFFF8) != (*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8)
          && pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(v57))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath((uint64_t *)__str, v57);
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__str);
        }
        if ((__p.__x_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p.__x_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        std::string v158 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](v240, "inputs:diffuseColor");
        if (((unint64_t)v240[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v159 = ((unint64_t)v240[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v159 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v158);
        }
        if (*(char *)(v159 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)v159, *(void *)(v159 + 8));
        }
        else
        {
          long long v160 = *(_OWORD *)v159;
          *(void *)&__p.__x_[4] = *(void *)(v159 + 16);
          *(_OWORD *)__p.__x_ = v160;
        }
        *(void *)&__p.__x_[6] = "textureBaseColor";
        int v161 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](v238, "inputs:metallic");
        if (((unint64_t)v238[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v162 = ((unint64_t)v238[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v162 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v161);
        }
        if (*(char *)(v162 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[8], *(const std::string::value_type **)v162, *(void *)(v162 + 8));
        }
        else
        {
          long long v163 = *(_OWORD *)v162;
          *(void *)&__p.__x_[12] = *(void *)(v162 + 16);
          *(_OWORD *)&__p.__x_[8] = v163;
        }
        *(void *)&__p.__x_[14] = "textureMetallic";
        long long v164 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&v236, "inputs:roughness");
        if ((v236.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
          std::string::size_type v165 = (v236.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          std::string::size_type v165 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v164);
        }
        if (*(char *)(v165 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[16], *(const std::string::value_type **)v165, *(void *)(v165 + 8));
        }
        else
        {
          long long v166 = *(_OWORD *)v165;
          *(void *)&__p.__x_[20] = *(void *)(v165 + 16);
          *(_OWORD *)&__p.__x_[16] = v166;
        }
        *(void *)&__p.__x_[22] = "textureRoughness";
        uint64_t v167 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&v226, "inputs:emissiveColor");
        if ((v226.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
          std::string::size_type v168 = (v226.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          std::string::size_type v168 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v167);
        }
        if (*(char *)(v168 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[24], *(const std::string::value_type **)v168, *(void *)(v168 + 8));
        }
        else
        {
          long long v169 = *(_OWORD *)v168;
          *(void *)&__p.__x_[28] = *(void *)(v168 + 16);
          *(_OWORD *)&__p.__x_[24] = v169;
        }
        *(void *)&__p.__x_[30] = "textureEmissive";
        v170 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&v231, "inputs:specularColor");
        if ((v231 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v171 = (v231 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v171 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v170);
        }
        if (*(char *)(v171 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[32], *(const std::string::value_type **)v171, *(void *)(v171 + 8));
        }
        else
        {
          long long v172 = *(_OWORD *)v171;
          *(void *)&__p.__x_[36] = *(void *)(v171 + 16);
          *(_OWORD *)&__p.__x_[32] = v172;
        }
        *(void *)&__p.__x_[38] = "textureSpecular";
        v173 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&v230, "inputs:clearcoat");
        if ((v230 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v174 = (v230 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v174 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v173);
        }
        if (*(char *)(v174 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[40], *(const std::string::value_type **)v174, *(void *)(v174 + 8));
        }
        else
        {
          long long v175 = *(_OWORD *)v174;
          *(void *)&__p.__x_[44] = *(void *)(v174 + 16);
          *(_OWORD *)&__p.__x_[40] = v175;
        }
        *(void *)&__p.__x_[46] = "textureClearcoat";
        v176 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&v274, "inputs:clearcoatRoughness");
        if ((v274 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v177 = (v274 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v177 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v176);
        }
        if (*(char *)(v177 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[48], *(const std::string::value_type **)v177, *(void *)(v177 + 8));
        }
        else
        {
          long long v178 = *(_OWORD *)v177;
          *(void *)&__p.__x_[52] = *(void *)(v177 + 16);
          *(_OWORD *)&__p.__x_[48] = v178;
        }
        *(void *)&__p.__x_[54] = "textureClearcoatRoughness";
        v179 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&v273, "inputs:normal");
        if ((v273 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v180 = (v273 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v180 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v179);
        }
        if (*(char *)(v180 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[56], *(const std::string::value_type **)v180, *(void *)(v180 + 8));
        }
        else
        {
          long long v181 = *(_OWORD *)v180;
          *(void *)&__p.__x_[60] = *(void *)(v180 + 16);
          *(_OWORD *)&__p.__x_[56] = v181;
        }
        *(void *)&__p.__x_[62] = "textureNormal";
        v182 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&v272, "inputs:occlusion");
        if ((v272 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v183 = (v272 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v183 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v182);
        }
        if (*(char *)(v183 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[64], *(const std::string::value_type **)v183, *(void *)(v183 + 8));
        }
        else
        {
          long long v184 = *(_OWORD *)v183;
          *(void *)&__p.__x_[68] = *(void *)(v183 + 16);
          *(_OWORD *)&__p.__x_[64] = v184;
        }
        *(void *)&__p.__x_[70] = "textureAmbientOcclusion";
        v185 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&v271, "inputs:opacity");
        if ((v271 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v186 = (v271 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v186 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v185);
        }
        if (*(char *)(v186 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[72], *(const std::string::value_type **)v186, *(void *)(v186 + 8));
        }
        else
        {
          long long v187 = *(_OWORD *)v186;
          *(void *)&__p.__x_[76] = *(void *)(v186 + 16);
          *(_OWORD *)&__p.__x_[72] = v187;
        }
        *(void *)&__p.__x_[78] = "textureOpacity";
        std::map<std::string,char const*>::map[abi:ne180100]((uint64_t)__str, (const void **)&__p, 10);
        uint64_t v188 = 40;
        do
        {
          if (SHIBYTE(__str[1].__r_.__value_.__r.__words[v188 + 1]) < 0) {
            operator delete((void *)__str[0].__r_.__value_.__r.__words[v188 + 2]);
          }
          v188 -= 4;
        }
        while (v188 * 8);
        if ((v271 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v271 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v272 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v272 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v273 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v273 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v274 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v274 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v230 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v230 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v231 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v231 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v226.__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v226.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v236.__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v236.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (((uint64_t)v238[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v238[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (((uint64_t)v240[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v240[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v189 = (uint64_t *)v249;
        if (v249 == &v250)
        {
LABEL_648:
          REMaterialAssetBuilderSetFunctionConstant();
          v240[0] = 0;
          *(void *)__p.__x_ = REAssetManagerMaterialAssetBuilderBuild();
          if (*(void *)__p.__x_)
          {
            RERetain();
            v213 = *(void **)__p.__x_;
          }
          else
          {
            v213 = 0;
          }
          v214 = v240[0];
          if (v240[0] != v213)
          {
            v240[0] = v213;
            *(void *)__p.__x_ = v214;
          }
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
          if (v240[0]) {
            RERelease();
          }
          realityio::ECSAction::queueForDeferredAssetLoad(a1, (uint64_t *)v240);
          *(void *)&__p.__x_[2] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAsset *>>(void)::ti;
          pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_PlaceCopy();
        }
        char v190 = 0;
        char v191 = 0;
        while (1)
        {
          uint64_t v192 = v189[4];
          unint64_t v231 = v192;
          if ((v192 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v192 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v231 &= 0xFFFFFFFFFFFFFFF8;
          }
          v193 = (pxrInternal__aapl__pxrReserved__::TfToken *)v189[5];
          v232 = v193;
          if (v193) {
            v193 = (pxrInternal__aapl__pxrReserved__::TfToken *)RERetain();
          }
          if ((v231 & 0xFFFFFFFFFFFFFFF8) != 0) {
            v194 = (const void **)((v231 & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else {
            v194 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v193);
          }
          uint64_t v195 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)__str, v194);
          if (&__str[0].__r_.__value_.__r.__words[1] == (std::string::size_type *)v195) {
            goto LABEL_640;
          }
          memset(&__p, 0, 24);
          long long v230 = xmmword_23F7BDEF0;
          uint64_t v274 = 0;
          uint64_t v273 = 0;
          unint64_t v272 = 0;
          unint64_t v229 = v231;
          if ((v231 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v231 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v229 &= 0xFFFFFFFFFFFFFFF8;
          }
          if ((v229 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v229 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          std::string::basic_string[abi:ne180100]<0>(v240, *(char **)(v195 + 56));
          REMaterialAssetBuilderSetTextureFromAsset();
          std::string::basic_string[abi:ne180100]<0>(&v236, *(char **)(v195 + 56));
          v196 = std::string::append(&v236, "_sampler");
          long long v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
          std::string::size_type v239 = v196->__r_.__value_.__r.__words[2];
          *(_OWORD *)v238 = v197;
          v196->__r_.__value_.__l.__size_ = 0;
          v196->__r_.__value_.__r.__words[2] = 0;
          v196->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v236.__r_.__value_.__l.__data_);
          }
          uint64_t v228 = v273;
          if ((v273 & 7) != 0)
          {
            unint64_t v198 = v273 & 0xFFFFFFFFFFFFFFF8;
            if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v273 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v228 = v198; {
          }
            }
          unint64_t v227 = v272;
          if ((v272 & 7) != 0)
          {
            unint64_t v199 = v272 & 0xFFFFFFFFFFFFFFF8;
            if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v272 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)unint64_t v227 = v199; {
          v200 = };
            }
          if ((v227 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v227 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v228 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v228 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          REMaterialAssetBuilderSetSampler();
          REMaterialAssetBuilderBindTextureToSampler();
          uint64_t v201 = HIBYTE(__p.__x_[5]);
          if ((__p.__x_[5] & 0x80000000) == 0) {
            uint64_t v202 = HIBYTE(__p.__x_[5]);
          }
          else {
            uint64_t v202 = *(void *)&__p.__x_[2];
          }
          if (!v202) {
            goto LABEL_616;
          }
          std::string::size_type v203 = HIBYTE(v252.__r_.__value_.__r.__words[2]);
          if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v203 = v252.__r_.__value_.__l.__size_;
          }
          if (v202 != v203) {
            goto LABEL_613;
          }
          v204 = (v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v252
               : (std::string *)v252.__r_.__value_.__r.__words[0];
          if ((__p.__x_[5] & 0x80000000) == 0) {
            break;
          }
          BOOL v206 = memcmp(*(const void **)__p.__x_, v204, *(size_t *)&__p.__x_[2]) != 0;
LABEL_615:
          if (!(v190 & 1 | !v206))
          {
            std::string::basic_string[abi:ne180100]<0>(&v226, "geometry.primvars:");
            if ((__p.__x_[5] & 0x80000000) == 0) {
              p_p = (const std::string::value_type *)&__p;
            }
            else {
              p_p = *(const std::string::value_type **)__p.__x_;
            }
            if ((__p.__x_[5] & 0x80000000) == 0) {
              std::string::size_type v208 = HIBYTE(__p.__x_[5]);
            }
            else {
              std::string::size_type v208 = *(void *)&__p.__x_[2];
            }
            v209 = std::string::append(&v226, p_p, v208);
            long long v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
            v236.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v210;
            v209->__r_.__value_.__l.__size_ = 0;
            v209->__r_.__value_.__r.__words[2] = 0;
            v209->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v226.__r_.__value_.__l.__data_);
            }
            REMaterialAssetBuilderSetBufferFromBinding();
            REMaterialAssetBuilderSetFloat4();
            REMaterialAssetBuilderSetFloat2();
            REMaterialAssetBuilderSetUVIndexForTexture();
            if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v236.__r_.__value_.__l.__data_);
            }
            char v190 = 1;
            goto LABEL_630;
          }
LABEL_616:
          if ((v191 & 1) == 0)
          {
            REMaterialAssetBuilderSetFloat4();
            REMaterialAssetBuilderSetFloat2();
          }
          REMaterialAssetBuilderSetUVIndexForTexture();
          char v191 = 1;
LABEL_630:

          if (SHIBYTE(v239) < 0) {
            operator delete(v238[0]);
          }
          if (SHIBYTE(v241) < 0) {
            operator delete(v240[0]);
          }
          if ((v272 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v272 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v273 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v273 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (SHIBYTE(__p.__x_[5]) < 0) {
            operator delete(*(void **)__p.__x_);
          }
LABEL_640:
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v232);
          if ((v231 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v231 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          v211 = (uint64_t *)v189[1];
          if (v211)
          {
            do
            {
              v212 = (uint64_t **)v211;
              v211 = (uint64_t *)*v211;
            }
            while (v211);
          }
          else
          {
            do
            {
              v212 = (uint64_t **)v189[2];
              _ZF = *v212 == v189;
              v189 = (uint64_t *)v212;
            }
            while (!_ZF);
          }
          v189 = (uint64_t *)v212;
          if (v212 == &v250) {
            goto LABEL_648;
          }
        }
        if (!HIBYTE(__p.__x_[5])) {
          goto LABEL_616;
        }
        v205 = &__p;
        while (LOBYTE(v205->__x_[0]) == v204->__r_.__value_.__s.__data_[0])
        {
          v205 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)((char *)v205 + 1);
          v204 = (std::string *)((char *)v204 + 1);
          if (!--v201) {
            goto LABEL_616;
          }
        }
LABEL_613:
        BOOL v206 = 1;
        goto LABEL_615;
      }
    }
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a6, v276);
    realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(&v233);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a6, v276);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v234);
  if ((v242[23] & 0x80000000) != 0) {
    operator delete(*(void **)v242);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v235);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v244);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v246, v247);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>>>::destroy(v250);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252.__r_.__value_.__l.__data_);
  }
  if ((v253 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v253 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v254, v255[0]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v276);
}

void sub_23F682888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  if ((STACK[0x220] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x220] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a61);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x2D0]);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void anonymous namespace'::uvNameAndTransformForTextureInput(uint64_t a1, uint64_t *a2, uint64_t a3, _OWORD *a4, void *a5, void *a6, void *a7)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  char v13 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2);
  if ((void *)(a1 + 8) == v13
    || (std::string::size_type v14 = v13,
        uint64_t v15 = v13 + 5,
        !pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v13 + 5))))
  {
    JUMPOUT(0x2455D2770);
  }
  uint64_t v16 = v14[6];
  if ((v16 & 4) != 0) {
    uint64_t v17 = (*(uint64_t (**)(uint64_t *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v15);
  }
  else {
    uint64_t v17 = *v15;
  }
  long long v90 = a4;
  uint64_t v91 = a6;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100]((uint64_t *)&v93, v17);
  uint64_t v18 = v93;
  if (v93 != (uint64_t *)v94)
  {
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      uint64_t v24 = std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&v123, v18 + 4);
      if ((v123 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (v123 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v24);
      }
      unint64_t v26 = *(unsigned __int8 *)(EmptyString + 23);
      int v27 = (char)v26;
      if ((v26 & 0x80u) != 0) {
        unint64_t v26 = *(void *)(EmptyString + 8);
      }
      if (v26 >= 8)
      {
        if (v27 < 0) {
          unint64_t EmptyString = *(void *)EmptyString;
        }
        if (!strncmp((const char *)EmptyString, "outputs:", 8uLL)
          && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v124))
        {
          if ((v125 & 4) != 0) {
            uint64_t v28 = (*(uint64_t (**)(uint64_t *))((v125 & 0xFFFFFFFFFFFFFFF8) + 168))(&v124);
          }
          else {
            uint64_t v28 = v124;
          }
          MEMORY[0x2455CF810](&v120, "inputs:wrapS");
          uint64_t v29 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v28, (uint64_t *)&v120);
          long long v30 = v29;
          if ((v120 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v31 = (void *)(v28 + 8);
          if ((void *)(v28 + 8) != v29)
          {
            std::string v32 = v29 + 5;
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v29 + 5)))
            {
              uint64_t v33 = v30[6];
              if ((v33 & 4) != 0) {
                std::string v32 = (void *)(*(uint64_t (**)(void *))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(v30 + 5);
              }
              pxrInternal__aapl__pxrReserved__::TfToken::operator=(v91, v32);
            }
          }
          MEMORY[0x2455CF810](&v120, "inputs:wrapT");
          uint64_t v34 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v28, (uint64_t *)&v120);
          unint64_t v35 = v34;
          if ((v120 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v31 != v34)
          {
            unint64_t v36 = v34 + 5;
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v34 + 5)))
            {
              uint64_t v37 = v35[6];
              if ((v37 & 4) != 0) {
                unint64_t v36 = (void *)(*(uint64_t (**)(void *))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(v35 + 5);
              }
              pxrInternal__aapl__pxrReserved__::TfToken::operator=(a7, v36);
            }
          }
          MEMORY[0x2455CF810](&v120, "inputs:st");
          unint64_t v38 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v28, (uint64_t *)&v120);
          unint64_t v39 = v38;
          if ((v120 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v31 != v38)
          {
            unint64_t v40 = v38 + 5;
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v38 + 5)))
            {
              uint64_t v41 = v39[6];
              if ((v41 & 4) != 0) {
                uint64_t v42 = (*(uint64_t (**)(void *))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(v39 + 5);
              }
              else {
                uint64_t v42 = *v40;
              }
              MEMORY[0x2455CF810](&v120, "outputs:result");
              uint64_t v43 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v42, (uint64_t *)&v120);
              int v44 = v43;
              if ((v120 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((void *)(v42 + 8) != v43)
              {
                unint64_t v45 = v43 + 5;
                if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v43 + 5)))
                {
                  uint64_t v46 = v44[6];
                  if ((v46 & 4) != 0) {
                    uint64_t v47 = (*(uint64_t (**)(void *))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))(v44 + 5);
                  }
                  else {
                    uint64_t v47 = *v45;
                  }
                  MEMORY[0x2455CF810](&v120, "inputs:varname");
                  uint64_t v48 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v47, (uint64_t *)&v120);
                  int v49 = v48;
                  if ((v120 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  int64x2_t v50 = (void *)(v47 + 8);
                  if ((void *)(v47 + 8) != v48)
                  {
                    uint64_t v51 = v48 + 5;
                    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v48 + 5)))
                    {
                      uint64_t v52 = v49[6];
                      if ((v52 & 4) != 0) {
                        uint64_t v51 = (void *)(*(uint64_t (**)(void *))((v52 & 0xFFFFFFFFFFFFFFF8) + 168))(v49 + 5);
                      }
                      unint64_t v53 = *v51 & 0xFFFFFFFFFFFFFFF8;
                      if (v53)
                      {
                        int64x2_t v54 = (const char *)(v53 + 16);
                        if (*(char *)(v53 + 39) < 0) {
                          int64x2_t v54 = *(const char **)v54;
                        }
                      }
                      else
                      {
                        int64x2_t v54 = "";
                      }
                      MEMORY[0x2455D2770](a3, v54);
                    }
                  }
                  MEMORY[0x2455CF810](&v120, "inputs:scale");
                  int v55 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v47, (uint64_t *)&v120);
                  int v56 = v55;
                  if ((v120 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  uint64_t v57 = _D8;
                  if (v50 != v55)
                  {
                    uint64_t v58 = v55 + 5;
                    uint64_t v57 = _D8;
                    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v55 + 5)))
                    {
                      uint64_t v59 = v56[6];
                      if ((v59 & 4) != 0) {
                        uint64_t v58 = (uint64_t *)(*(uint64_t (**)(void *))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(v56 + 5);
                      }
                      uint64_t v57 = *v58;
                    }
                  }
                  MEMORY[0x2455CF810](&v120, "inputs:translation");
                  int v60 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v47, (uint64_t *)&v120);
                  uint64_t v61 = v60;
                  if ((v120 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  uint64_t v62 = 0;
                  if (v50 != v60)
                  {
                    int v63 = v60 + 5;
                    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v60 + 5)))
                    {
                      uint64_t v64 = v61[6];
                      if ((v64 & 4) != 0) {
                        int v63 = (uint64_t *)(*(uint64_t (**)(void *))((v64 & 0xFFFFFFFFFFFFFFF8) + 168))(v61 + 5);
                      }
                      uint64_t v62 = *v63;
                    }
                  }
                  MEMORY[0x2455CF810](&v120, "inputs:rotation");
                  long long v65 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v47, (uint64_t *)&v120);
                  uint64_t v66 = v65;
                  if ((v120 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  float v67 = 0.0;
                  if (v50 != v65)
                  {
                    uint64_t v68 = (float *)(v65 + 5);
                    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v65 + 5)))
                    {
                      uint64_t v69 = v66[6];
                      if ((v69 & 4) != 0) {
                        uint64_t v68 = (float *)(*(uint64_t (**)(void *))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(v66 + 5);
                      }
                      float v67 = *v68;
                    }
                  }
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v101, 1.0);
                  *(void *)&long long v120 = v57;
                  DWORD2(v120) = 1065353216;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetScale();
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v98, 1.0);
                  float v70 = v67 / 180.0 * 3.14159265;
                  __float2 v71 = __sincosf_stret(v70 * 0.5);
                  _Q0 = vmulq_n_f32((float32x4_t)xmmword_23F7BA720, v71.__sinval);
                  _S2 = _Q0.i32[1];
                  _S4 = _Q0.i32[2];
                  __asm { FMLS            S3, S4, V0.S[2] }
                  float v76 = vmlas_n_f32(vmuls_lane_f32(v71.__cosval, _Q0, 2), _Q0.f32[1], _Q0.f32[0]);
                  float v77 = vmlas_n_f32(-(float)(v71.__cosval * _Q0.f32[1]), _Q0.f32[2], _Q0.f32[0]);
                  float v78 = vmlas_n_f32(-(float)(v71.__cosval * _Q0.f32[2]), _Q0.f32[1], _Q0.f32[0]);
                  __asm
                  {
                    FMLA            S5, S2, V0.S[1]
                    FMLS            S5, S0, V0.S[0]
                    FMLA            S18, S4, V0.S[1]
                    FMLA            S7, S0, V0.S[2]
                    FMLA            S19, S4, V0.S[1]
                    FMLA            S1, S4, V0.S[2]
                  }
                  *(float *)&long long v98 = _S3 + (float)(v71.__cosval * v71.__cosval);
                  *((float *)&v98 + 1) = v76 + v76;
                  __asm { FMLS            S1, S0, V0.S[0] }
                  *((float *)&v98 + 2) = v77 + v77;
                  *((float *)&v98 + 3) = v78 + v78;
                  LODWORD(v99) = _S5;
                  *((float *)&v99 + 1) = _S18 + _S18;
                  __asm { FMLS            S1, S2, V0.S[1] }
                  *((float *)&v99 + 2) = _S7 + _S7;
                  *((float *)&v99 + 3) = _S19 + _S19;
                  int v100 = _S1;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v95, 1.0);
                  *((void *)&v96 + 1) = v62;
                  long long v120 = v95;
                  long long v121 = v96;
                  int v122 = v97;
                  *((float *)&v121 + 3) = -*((float *)&v62 + 1);
                  long long v117 = v98;
                  long long v118 = v99;
                  int v119 = v100;
                  *((float *)&v117 + 1) = -*((float *)&v98 + 1);
                  *((float *)&v117 + 3) = -*((float *)&v98 + 3);
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v114, 1.0);
                  *((void *)&v115 + 1) = 0xBF80000000000000;
                  int v116 = 1065353216;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v111, 1.0);
                  uint64_t v112 = 0x3F80000000000000;
                  int v113 = 1065353216;
                  long long v102 = v114;
                  long long v103 = v115;
                  int v104 = v116;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  long long v105 = v102;
                  long long v106 = v103;
                  int v107 = v104;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  long long v108 = v105;
                  long long v109 = v106;
                  int v110 = v107;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  *(_OWORD *)uint64_t v92 = v108;
                  *(_OWORD *)&v92[16] = v109;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  *(void *)&long long v87 = *(void *)v92;
                  *((void *)&v87 + 1) = *(void *)&v92[12];
                  *long long v90 = v87;
                  *a5 = *(void *)&v92[24];
                }
              }
            }
          }
        }
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v124);
      if ((v123 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v123 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v88 = (uint64_t *)v18[1];
      if (v88)
      {
        do
        {
          int v89 = v88;
          unint64_t v88 = (uint64_t *)*v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          int v89 = (uint64_t *)v18[2];
          _ZF = *v89 == (void)v18;
          uint64_t v18 = v89;
        }
        while (!_ZF);
      }
      uint64_t v18 = v89;
    }
    while (v89 != (uint64_t *)v94);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v93, v94[0]);
}

void sub_23F684354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *a23)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v23);
  uint64_t v26 = *(void *)(v24 - 192);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

id anonymous namespace'::samplerForTextureAttribute(unint64_t *a1, unint64_t *a2)
{
  std::string::size_type v4 = REMaterialCreateDefaultSamplerDescriptor();
  unint64_t v5 = *a1;
  unint64_t v10 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v10 = v5 & 0xFFFFFFFFFFFFFFF8;
    v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v6 = *a2;
  unint64_t v9 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v9 = v6 & 0xFFFFFFFFFFFFFFF8;
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  objc_msgSend(v4, "setTAddressMode:", SamplerAddressMode, v9, v10);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  return v4;
}

void sub_23F684534(_Unwind_Exception *a1)
{
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void anonymous namespace'::getTextureFromConnection(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _DWORD *a5, unsigned char *a6)
{
  int v11 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, a3);
  *a6 = 0;
  if ((void *)(a2 + 8) != v11)
  {
    uint64_t v12 = v11;
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v11 + 5);
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v11 + 5)))
    {
      uint64_t v14 = v12[6];
      if ((v14 & 4) != 0) {
        uint64_t v15 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v13);
      }
      else {
        uint64_t v15 = *(void *)v13;
      }
      std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100](&v28, v15);
      MEMORY[0x2455CF810](&v27, "__value");
      uint64_t v16 = v29;
      if (!v29) {
        goto LABEL_15;
      }
      uint64_t v17 = &v29;
      do
      {
        uint64_t v18 = v17;
        uint64_t v19 = v16 + 4;
        int v20 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&v30, v16 + 4, &v27);
        uint64_t v21 = v16 + 1;
        if (!v20)
        {
          uint64_t v21 = v16;
          uint64_t v17 = (void **)v16;
        }
        uint64_t v16 = (void *)*v21;
      }
      while (*v21);
      if (v17 == &v29
        || (!v20 ? (unint64_t v22 = v19) : (unint64_t v22 = (uint64_t *)(v18 + 4)),
            std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&v30, &v27, v22)))
      {
LABEL_15:
        uint64_t v17 = &v29;
      }
      if ((v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (&v29 == v17)
      {
        if (*a1)
        {
LABEL_29:
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v28, v29);
          return;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1);
      }
      else
      {
        *a6 = 1;
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v17 + 5)))
        {
          unint64_t v23 = (unint64_t)v17[6];
          if ((v23 & 4) != 0) {
            uint64_t v24 = (uint64_t *)(*(uint64_t (**)(void **))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(v17 + 5);
          }
          else {
            uint64_t v24 = v17[5];
          }
          uint64_t v25 = *v24;
          *a1 = v25;
          if (v25) {
            RERetain();
          }
          goto LABEL_29;
        }
      }
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v28, v29);
    }
    else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>(v13))
    {
      uint64_t v26 = v12[6];
      if ((v26 & 4) != 0) {
        char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v13);
      }
      *a5 = *(_DWORD *)v13;
    }
  }
  *a1 = 0;
}

void sub_23F684778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void *std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair(void *a1)
{
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t anonymous namespace'::getTextureFromTokValMapAtValue(uint64_t result, void *a2, uint64_t a3)
{
  int v3 = (void *)result;
  unint64_t v5 = a2 + 1;
  std::string::size_type v4 = (void *)*a2;
  if ((void *)*a2 == a2 + 1)
  {
LABEL_16:
    *int v3 = 0;
    return result;
  }
  while (1)
  {
    uint64_t v8 = v4 + 5;
    if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + 5))) {
      break;
    }
    uint64_t v9 = v4[6];
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(void *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4 + 5);
    }
    else {
      uint64_t v10 = *v8;
    }
    if (*v3) {
      return result;
    }
    uint64_t result = (uint64_t)realityio::WrappedRERef<REAsset *>::~WrappedRERef(v3);
LABEL_8:
    int v11 = (void *)v4[1];
    if (v11)
    {
      do
      {
        uint64_t v12 = v11;
        int v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        uint64_t v12 = (void *)v4[2];
        BOOL v13 = *v12 == (void)v4;
        std::string::size_type v4 = v12;
      }
      while (!v13);
    }
    std::string::size_type v4 = v12;
    if (v12 == v5) {
      goto LABEL_16;
    }
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + 5));
  if (!result) {
    goto LABEL_8;
  }
  MEMORY[0x2455CF810](&v22, "__value");
  unint64_t v14 = v4[4] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = (atomic_uint *)(v22 & 0xFFFFFFFFFFFFFFF8);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v14 == v15)
  {
    MEMORY[0x2455CF810](&v22, "__sourcePrimPath");
    uint64_t v18 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a2, &v22);
    uint64_t v19 = v18;
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v5 != v18)
    {
      int v20 = v18 + 5;
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::VtValue *)(v18 + 5)))
      {
        uint64_t v21 = v19[6];
        if ((v21 & 4) != 0) {
          int v20 = (_DWORD *)(*(uint64_t (**)(void *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(v19 + 5);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3, v20);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3 + 4, v20 + 1);
      }
    }
  }
  uint64_t v16 = v4[6];
  if ((v16 & 4) != 0) {
    uint64_t v17 = (uint64_t *)(*(uint64_t (**)(void *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v4 + 5);
  }
  else {
    uint64_t v17 = (uint64_t *)*v8;
  }
  uint64_t result = *v17;
  *int v3 = result;
  if (result) {
    return RERetain();
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v10, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = v5;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    unint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  v6[4] = *(void *)a2;
  *(void *)a2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 10, (_DWORD *)(a2 + 8));
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 11, (_DWORD *)(a2 + 12));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a3 + 1);
  return a1;
}

void anonymous namespace'::getTextureInfoFromConnection(uint64_t *a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, _OWORD *a6, void *a7, void *a8, unsigned char *a9, unsigned char *a10)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  *(_OWORD *)a5 = xmmword_23F7BDF00;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)float v78 = _Q0;
  *a6 = _Q0;
  *a7 = 0;
  a7[1] = 0;
  if ((*a8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *a8 = 0;
  *a1 = 0;
  uint64_t v18 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, a3);
  uint64_t v19 = v18;
  *a9 = 0;
  *a10 = 0;
  int v20 = (void *)(a2 + 8);
  if ((void *)(a2 + 8) != v18)
  {
    uint64_t v21 = v18 + 5;
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v18 + 5)))
    {
      uint64_t v22 = v19[6];
      if ((v22 & 4) != 0) {
        uint64_t v23 = (*(uint64_t (**)(void *))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(v19 + 5);
      }
      else {
        uint64_t v23 = *v21;
      }
      std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100]((uint64_t *)&__p, v23);
      uint64_t v24 = __p;
      if (__p == &v81)
      {
LABEL_93:
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&__p, v81);
        return;
      }
      while (1)
      {
        uint64_t v25 = std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&v86, v24 + 4);
        if ((v86 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t EmptyString = (v86 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v25);
        }
        unint64_t v27 = *(unsigned __int8 *)(EmptyString + 23);
        int v28 = (char)v27;
        if ((v27 & 0x80u) != 0) {
          unint64_t v27 = *(void *)(EmptyString + 8);
        }
        if (v27 < 8) {
          goto LABEL_17;
        }
        if (v28 < 0) {
          unint64_t EmptyString = *(void *)EmptyString;
        }
        if (strncmp((const char *)EmptyString, "outputs:", 8uLL))
        {
LABEL_17:
          MEMORY[0x2455CF810](&v83, "__value");
          if ((v86 & 0xFFFFFFFFFFFFFFF8) == (v83 & 0xFFFFFFFFFFFFFFF8))
          {
            int v29 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v87);
            if ((v83 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v29)
            {
              if ((v88 & 4) != 0) {
                uint64_t v30 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v88 & 0xFFFFFFFFFFFFFFF8) + 168))(&v87);
              }
              else {
                uint64_t v30 = (uint64_t *)v87;
              }
              realityio::WrappedRERef<REAsset *>::operator=(a1, v30);
            }
          }
          else if ((v83 & 7) != 0)
          {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          goto LABEL_78;
        }
        *a9 = 1;
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(a4, &v86);
        uint64_t v31 = (void *)((v88 & 4) != 0
                       ? (*(uint64_t (**)(uint64_t *))((v88 & 0xFFFFFFFFFFFFFFF8) + 168))(&v87)
                       : v87);
        uint64_t v34 = (void *)*v31;
        std::string v32 = v31 + 1;
        uint64_t v33 = v34;
        if (v34 != v32) {
          break;
        }
LABEL_78:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v87);
        if ((v86 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v47 = (void *)v24[1];
        if (v47)
        {
          do
          {
            uint64_t v48 = (void **)v47;
            uint64_t v47 = (void *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            uint64_t v48 = (void **)v24[2];
            _ZF = *v48 == v24;
            uint64_t v24 = v48;
          }
          while (!_ZF);
        }
        uint64_t v24 = v48;
        if (v48 == &v81) {
          goto LABEL_93;
        }
      }
      while (1)
      {
        std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&v83, v33 + 4);
        MEMORY[0x2455CF810](&v79, "inputs:scale");
        if ((v83 & 0xFFFFFFFFFFFFFFF8) == (v79 & 0xFFFFFFFFFFFFFFF8))
        {
          int v35 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v84);
          if ((v79 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v35)
          {
            if ((v85 & 4) != 0) {
              unint64_t v36 = (long long *)(*(uint64_t (**)(long long **))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(&v84);
            }
            else {
              unint64_t v36 = v84;
            }
            long long v37 = *v36;
            unint64_t v38 = a6;
            goto LABEL_56;
          }
        }
        else if ((v79 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CF810](&v79, "inputs:fallback");
        if ((v83 & 0xFFFFFFFFFFFFFFF8) == (v79 & 0xFFFFFFFFFFFFFFF8))
        {
          int v39 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v84);
          if ((v79 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v39)
          {
            if ((v85 & 4) != 0) {
              unint64_t v40 = (long long *)(*(uint64_t (**)(long long **))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(&v84);
            }
            else {
              unint64_t v40 = v84;
            }
            long long v37 = *v40;
            unint64_t v38 = (_OWORD *)a5;
            goto LABEL_56;
          }
        }
        else if ((v79 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CF810](&v79, "inputs:bias");
        if ((v83 & 0xFFFFFFFFFFFFFFF8) != (v79 & 0xFFFFFFFFFFFFFFF8))
        {
          if ((v79 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
LABEL_57:
          MEMORY[0x2455CF810](&v79, "inputs:sourceColorSpace");
          if ((v83 & 0xFFFFFFFFFFFFFFF8) == (v79 & 0xFFFFFFFFFFFFFFF8))
          {
            int v43 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&v84);
            if ((v79 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v43)
            {
              int v44 = &v84;
              if ((v85 & 4) != 0) {
                int v44 = (long long **)(*(uint64_t (**)(long long **, long long **))((v85 & 0xFFFFFFFFFFFFFFF8)
              }
                                                                                       + 168))(&v84, &v84);
              pxrInternal__aapl__pxrReserved__::TfToken::operator=(a8, v44);
            }
          }
          else if ((v79 & 7) != 0)
          {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          goto LABEL_66;
        }
        int v41 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v84);
        if ((v79 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!v41) {
          goto LABEL_57;
        }
        if ((v85 & 4) != 0) {
          uint64_t v42 = (long long *)(*(uint64_t (**)(long long **))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(&v84);
        }
        else {
          uint64_t v42 = v84;
        }
        long long v37 = *v42;
        unint64_t v38 = a7;
LABEL_56:
        *unint64_t v38 = v37;
LABEL_66:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v84);
        if ((v83 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v45 = (void *)v33[1];
        if (v45)
        {
          do
          {
            uint64_t v46 = v45;
            unint64_t v45 = (void *)*v45;
          }
          while (v45);
        }
        else
        {
          do
          {
            uint64_t v46 = (void *)v33[2];
            _ZF = *v46 == (void)v33;
            uint64_t v33 = v46;
          }
          while (!_ZF);
        }
        uint64_t v33 = v46;
        if (v46 == v32) {
          goto LABEL_78;
        }
      }
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v19 + 5)))
    {
      *a10 = 1;
      uint64_t v49 = v19[6];
      if ((v49 & 4) != 0) {
        uint64_t v21 = (uint64_t *)(*(uint64_t (**)(void *))((v49 & 0xFFFFFFFFFFFFFFF8) + 168))(v19 + 5);
      }
      int32x4_t v50 = *(int32x4_t *)v78;
      v50.i32[0] = *(_DWORD *)v21;
      int32x4_t v51 = vzip1q_s32(v50, v50);
      v51.i32[2] = *(_DWORD *)v21;
      *(int32x4_t *)a5 = v51;
    }
    else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v19 + 5)))
    {
      *a10 = 1;
      uint64_t v52 = v19[6];
      if ((v52 & 4) != 0) {
        unint64_t v53 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(void *))((v52 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                               + 168))(v19 + 5);
      else {
        unint64_t v53 = (pxrInternal__aapl__pxrReserved__::TfToken *)*v21;
      }
      uint64_t v54 = *(void *)v53;
      int v55 = *((_DWORD *)v53 + 2);
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v56 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t v56 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v53);
      }
      if (*(char *)(v56 + 23) >= 0) {
        size_t v59 = *(unsigned __int8 *)(v56 + 23);
      }
      else {
        size_t v59 = *(void *)(v56 + 8);
      }
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v59 + 12);
      if (v82 < 0) {
        p_p = __p;
      }
      if (v59)
      {
        if (*(char *)(v56 + 23) >= 0) {
          uint64_t v61 = (const void *)v56;
        }
        else {
          uint64_t v61 = *(const void **)v56;
        }
        memmove(p_p, v61, v59);
      }
      strcpy((char *)p_p + v59, "__colorSpace");
      MEMORY[0x2455CF830](&v86, &__p);
      uint64_t v62 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, &v86);
      if ((v86 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v82 < 0) {
        operator delete(__p);
      }
      if (v20 != v62)
      {
        int v63 = v62 + 5;
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v62 + 5)))
        {
          uint64_t v64 = v62[6];
          if ((v64 & 4) != 0) {
            int v63 = (void *)(*(uint64_t (**)(void *))((v64 & 0xFFFFFFFFFFFFFFF8) + 168))(v62 + 5);
          }
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(a8, v63);
        }
      }
      *(void *)a5 = v54;
      *(_DWORD *)(a5 + 8) = v55;
      *(_DWORD *)(a5 + 12) = 1065353216;
    }
    else
    {
      uint64_t v57 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v19 + 5));
      if (v57)
      {
        *a10 = 1;
        if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v58 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v58 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v57);
        }
        if (*(char *)(v58 + 23) >= 0) {
          size_t v65 = *(unsigned __int8 *)(v58 + 23);
        }
        else {
          size_t v65 = *(void *)(v58 + 8);
        }
        uint64_t v66 = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v65 + 12);
        if (v82 < 0) {
          uint64_t v66 = __p;
        }
        if (v65)
        {
          if (*(char *)(v58 + 23) >= 0) {
            float v67 = (const void *)v58;
          }
          else {
            float v67 = *(const void **)v58;
          }
          memmove(v66, v67, v65);
        }
        strcpy((char *)v66 + v65, "__colorSpace");
        MEMORY[0x2455CF830](&v86, &__p);
        uint64_t v68 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, &v86);
        if ((v86 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v82 < 0) {
          operator delete(__p);
        }
        if (v20 != v68)
        {
          uint64_t v69 = v68 + 5;
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v68 + 5)))
          {
            uint64_t v70 = v68[6];
            if ((v70 & 4) != 0) {
              uint64_t v69 = (void *)(*(uint64_t (**)(void *))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(v68 + 5);
            }
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(a8, v69);
          }
        }
        uint64_t v71 = v19[6];
        if ((v71 & 4) != 0) {
          int v72 = (_OWORD *)(*(uint64_t (**)(void *))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(v19 + 5);
        }
        else {
          int v72 = (_OWORD *)*v21;
        }
        *(_OWORD *)a5 = *v72;
      }
    }
  }
}

void sub_23F68542C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, pxrInternal__aapl__pxrReserved__::VtValue *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v29);
  _Unwind_Resume(a1);
}

void *anonymous namespace'::setFloatMaterialConstantScale(float a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  float v13 = a1;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v7 = 0;
  char v6 = 0;
  REMaterialAssetBuilderSetFloat();
  uint64_t result = realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_23F685648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

float anonymous namespace'::getShadeInputValueWithFallback<float>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2);
  if ((void *)(a1 + 8) != v5)
  {
    char v6 = v5;
    int v7 = v5 + 5;
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 5)))
    {
      uint64_t v8 = v6[6];
      if ((v8 & 4) != 0) {
        a3 = (*(uint64_t (**)(void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      else {
        a3 = (uint64_t)v7;
      }
    }
  }
  return *(float *)a3;
}

void anonymous namespace'::getShadeInputColor3WithFallback(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)&long long v7 = *(void *)a4;
  DWORD2(v7) = *(_DWORD *)(a4 + 8);
  HIDWORD(v7) = 1.0;
  long long v19 = v7;
  uint64_t v8 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, a3);
  if ((void *)(a2 + 8) != v8
    && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 5)))
  {
    uint64_t v9 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, a3);
    long long v21 = v19;
    if ((void *)(a2 + 8) != v9)
    {
      uint64_t v10 = v9;
      long long v11 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 5);
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 5)))
      {
        uint64_t v12 = v10[6];
        if ((v12 & 4) != 0) {
          uint64_t v13 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v12 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                       + 168))(v11);
        else {
          uint64_t v13 = *(void *)v11;
        }
        *(void *)&long long v14 = *(void *)v13;
        DWORD2(v14) = *(_DWORD *)(v13 + 8);
        HIDWORD(v14) = 1.0;
LABEL_13:
        long long v21 = v14;
        goto LABEL_14;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>(v11))
      {
        uint64_t v17 = v10[6];
        if ((v17 & 4) != 0) {
          uint64_t v18 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v17 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                       + 168))(v11);
        else {
          uint64_t v18 = *(void *)v11;
        }
        *(void *)&long long v14 = *(void *)v18;
        DWORD2(v14) = *(_DWORD *)(v18 + 8);
        goto LABEL_13;
      }
    }
LABEL_14:
    char v20 = 0;
    long long v16 = v21;
    char v15 = v20;
    goto LABEL_15;
  }
  char v15 = 0;
  long long v16 = v19;
LABEL_15:
  *(_OWORD *)a1 = v16;
  *(unsigned char *)(a1 + 16) = v15;
}

void anonymous namespace'::assignGamutFromValueAndGamut(pxrInternal__aapl__pxrReserved__::TfToken *a1, unsigned char *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  *a2 = 0;
  if ((a3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v3)
  {
    unint64_t v5 = (v3 & 0xFFFFFFFFFFFFFFF8) != 0
       ? (v3 & 0xFFFFFFFFFFFFFFF8) + 16
       : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    char v6 = *(char *)(v5 + 23) >= 0 ? (const char *)v5 : *(const char **)v5;
    CFStringRef v7 = CFStringCreateWithCString(0, v6, 0x8000100u);
    CFStringRef v8 = (const __CFString *)MEMORY[0x2455CDE90]();
    CFRelease(v7);
    if (v8)
    {
      uint64_t v9 = CGColorSpaceCreateWithName(v8);
      uint64_t v10 = v9;
      if (v9)
      {
        float64x2_t v11 = vcvt_hight_f64_f32(*(float32x4_t *)a1);
        v13[0] = vcvtq_f64_f32(*(float32x2_t *)a1);
        v13[1] = v11;
        CGColorRef v12 = CGColorCreate(v9, (const CGFloat *)v13);
        CFRelease(v10);
        RECGColorToColorGamut();
        CFRelease(v12);
      }
    }
  }
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_23F685968(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit(v2, 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::getTextureInfoOrDefaultValueFromConnection<float>(uint64_t *a1, uint64_t a2, uint64_t *a3, void *a4, _OWORD *a5, _OWORD *a6, void *a7, void *a8, _DWORD *a9, int *a10, unsigned char *a11)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  *a5 = xmmword_23F7BDF00;
  __asm { FMOV            V0.4S, #1.0 }
  *a6 = _Q0;
  *a7 = 0;
  a7[1] = 0;
  if ((*a8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *a8 = 0;
  *a1 = 0;
  long long v21 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, a3);
  uint64_t v22 = v21;
  *a11 = 0;
  if ((void *)(a2 + 8) == v21) {
    goto LABEL_90;
  }
  uint64_t v23 = (int *)(v21 + 5);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v21 + 5)))
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v22 + 5)))
    {
      uint64_t v48 = v22[6];
      if ((v48 & 4) != 0) {
        uint64_t v23 = (int *)(*(uint64_t (**)(void *))((v48 & 0xFFFFFFFFFFFFFFF8) + 168))(v22 + 5);
      }
      int v49 = *v23;
      goto LABEL_91;
    }
LABEL_90:
    int v49 = *a10;
LABEL_91:
    *a9 = v49;
    return;
  }
  *a11 = 1;
  uint64_t v24 = v22[6];
  int32x4_t v50 = a1;
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(void *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(v22 + 5);
  }
  else {
    uint64_t v25 = *(void *)v23;
  }
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100]((uint64_t *)&v53, v25);
  uint64_t v26 = v53;
  if (v53 != (uint64_t *)v54)
  {
    while (1)
    {
      unint64_t v27 = std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&v56, v26 + 4);
      if ((v56 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (v56 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v27);
      }
      unint64_t v29 = *(unsigned __int8 *)(EmptyString + 23);
      int v30 = (char)v29;
      if ((v29 & 0x80u) != 0) {
        unint64_t v29 = *(void *)(EmptyString + 8);
      }
      if (v29 >= 8)
      {
        if (v30 < 0) {
          unint64_t EmptyString = *(void *)EmptyString;
        }
        if (!strncmp((const char *)EmptyString, "outputs:", 8uLL)) {
          break;
        }
      }
      MEMORY[0x2455CF810](&v55, "__value");
      if ((v56 & 0xFFFFFFFFFFFFFFF8) == (v55 & 0xFFFFFFFFFFFFFFF8))
      {
        int v31 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v57);
        if ((v55 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v31)
        {
          if ((v58 & 4) != 0) {
            std::string v32 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(&v57);
          }
          else {
            std::string v32 = v57;
          }
          realityio::WrappedRERef<REAsset *>::operator=(v50, v32);
          goto LABEL_71;
        }
      }
      else if ((v55 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v55, "inputs:fallback");
      if ((v56 & 0xFFFFFFFFFFFFFFF8) == (v55 & 0xFFFFFFFFFFFFFFF8))
      {
        int v33 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v57);
        if ((v55 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v33)
        {
          if ((v58 & 4) != 0) {
            uint64_t v34 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(&v57);
          }
          else {
            uint64_t v34 = v57;
          }
          *a5 = *(_OWORD *)v34;
          goto LABEL_71;
        }
      }
      else if ((v55 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v55, "inputs:scale");
      if ((v56 & 0xFFFFFFFFFFFFFFF8) == (v55 & 0xFFFFFFFFFFFFFFF8))
      {
        int v35 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v57);
        if ((v55 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v35)
        {
          if ((v58 & 4) != 0) {
            unint64_t v36 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(&v57);
          }
          else {
            unint64_t v36 = v57;
          }
LABEL_55:
          *a6 = *(_OWORD *)v36;
          goto LABEL_71;
        }
      }
      else if ((v55 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v55, "inputs:bias");
      if ((v56 & 0xFFFFFFFFFFFFFFF8) != (v55 & 0xFFFFFFFFFFFFFFF8))
      {
        if ((v55 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_62:
        MEMORY[0x2455CF810](&v55, "inputs:sourceColorSpace");
        if ((v56 & 0xFFFFFFFFFFFFFFF8) == (v55 & 0xFFFFFFFFFFFFFFF8))
        {
          int v44 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&v57);
          if ((v55 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v44)
          {
            unint64_t v45 = &v57;
            if ((v58 & 4) != 0) {
              unint64_t v45 = (uint64_t **)(*(uint64_t (**)(uint64_t **, uint64_t **))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(&v57, &v57);
            }
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(a8, v45);
          }
        }
        else if ((v55 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_71;
      }
      int v42 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v57);
      if ((v55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (!v42) {
        goto LABEL_62;
      }
      if ((v58 & 4) != 0) {
        int v43 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(&v57);
      }
      else {
        int v43 = v57;
      }
      *(_OWORD *)a7 = *(_OWORD *)v43;
LABEL_71:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v57);
      if ((v56 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v46 = (uint64_t *)v26[1];
      if (v46)
      {
        do
        {
          uint64_t v47 = v46;
          uint64_t v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          uint64_t v47 = (uint64_t *)v26[2];
          _ZF = *v47 == (void)v26;
          uint64_t v26 = v47;
        }
        while (!_ZF);
      }
      uint64_t v26 = v47;
      if (v47 == (uint64_t *)v54) {
        goto LABEL_92;
      }
    }
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(a4, &v56);
    if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v57)) {
      goto LABEL_71;
    }
    if ((v58 & 4) != 0) {
      uint64_t v37 = (*(uint64_t (**)(uint64_t **))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(&v57);
    }
    else {
      uint64_t v37 = (uint64_t)v57;
    }
    MEMORY[0x2455CF810](&v55, "inputs:scale");
    unint64_t v38 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v37, &v55);
    int v39 = v38;
    if ((v55 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((void *)(v37 + 8) == v38) {
      goto LABEL_71;
    }
    unint64_t v40 = (uint64_t **)(v38 + 5);
    if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v38 + 5))) {
      goto LABEL_71;
    }
    uint64_t v41 = v39[6];
    if ((v41 & 4) != 0) {
      unint64_t v36 = (uint64_t *)(*(uint64_t (**)(void *))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(v39 + 5);
    }
    else {
      unint64_t v36 = *v40;
    }
    goto LABEL_55;
  }
LABEL_92:
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v53, v54[0]);
}

void sub_23F685F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t anonymous namespace'::setIfConnectedToTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v10 = 0;
  char v9 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
  return REMaterialAssetBuilderSetFunctionConstant();
}

void sub_23F6860A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::getSamplerAddressMode(void *a1)
{
  MEMORY[0x2455CF810](v18, "black");
  unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v3 = (atomic_uint *)(*(void *)v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18[0] & 7) != 0) {
    atomic_fetch_add_explicit(v3, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v2 == v3) {
    return 4;
  }
  MEMORY[0x2455CF810](v18, "clamp");
  unint64_t v4 = *a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (atomic_uint *)(*(void *)v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18[0] & 7) != 0) {
    atomic_fetch_add_explicit(v5, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v4 == v5) {
    return 0;
  }
  MEMORY[0x2455CF810](v18, "repeat");
  unint64_t v6 = *a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = (atomic_uint *)(*(void *)v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18[0] & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v6 == v7) {
    return 2;
  }
  MEMORY[0x2455CF810](v18, "mirror");
  unint64_t v8 = *a1 & 0xFFFFFFFFFFFFFFF8;
  char v9 = (atomic_uint *)(*(void *)v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18[0] & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v8 != v9)
  {
    int v10 = (realityio *)MEMORY[0x2455CF810](v18, "useMetadata");
    unint64_t v11 = *a1 & 0xFFFFFFFFFFFFFFF8;
    CGColorRef v12 = (atomic_uint *)(*(void *)v18 & 0xFFFFFFFFFFFFFFF8);
    if ((v18[0] & 7) != 0) {
      atomic_fetch_add_explicit(v12, 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v13 = *(NSObject **)(realityio::logObjects(v10) + 24);
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if ((atomic_uint *)v11 == v12)
    {
      if (v14)
      {
        *(_WORD *)uint64_t v18 = 0;
        char v15 = "Reading wrap mode from image metadata is currently not supported; defaulting to \"repeat\"";
        goto LABEL_23;
      }
    }
    else if (v14)
    {
      *(_WORD *)uint64_t v18 = 0;
      char v15 = "Wrap mode for imported USD was an invalid option; defaulting to \"repeat\"";
LABEL_23:
      uint64_t v16 = 2;
      _os_log_impl(&dword_23F4EA000, v13, OS_LOG_TYPE_DEFAULT, v15, v18, 2u);
      return v16;
    }
    return 2;
  }
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_Equal(uint64_t a1, uint64_t a2)
{
  return **(void **)a1 == **(void **)a2 && *(void *)(*(void *)a1 + 8) == *(void *)(*(void *)a2 + 8);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_EqualPtr(uint64_t a1, void *a2)
{
  return **(void **)a1 == *a2 && *(void *)(*(void *)a1 + 8) == a2[1];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 16));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F6863A4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40EDCEB4C7);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio17MaterialAssetPairE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MaterialAssetPair>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(v2 + 8));
    unint64_t v3 = realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)v2);
    MEMORY[0x2455D2BD0](v3, 0x1020C40EDCEB4C7);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>::_Counted(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if (v4) {
    RERetain();
  }
  uint64_t v5 = a2[1];
  *(void *)(a1 + 8) = v5;
  if (v5) {
    RERetain();
  }
  atomic_store(0, (unsigned int *)(a1 + 16));
  return a1;
}

void sub_23F686554(_Unwind_Exception *a1)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy()
{
}

void sub_23F6865C8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40EDCEB4C7);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>>>::destroy(a1[1]);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 5);
    uint64_t v2 = a1[4];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)(a1 + 5), (void *)a1[6]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<TinyTextureBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TinyTextureBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342118;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<TinyTextureBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void TinyTextureBuilder::~TinyTextureBuilder(id *this)
{
  *this = &unk_26F342168;
  realityio::TextureBuilder::TextureDataT::~TextureDataT(this + 23);

  realityio::Builder::~Builder((realityio::Builder *)this);
}

{
  uint64_t vars8;

  *this = &unk_26F342168;
  realityio::TextureBuilder::TextureDataT::~TextureDataT(this + 23);
  realityio::Builder::~Builder((realityio::Builder *)this);

  JUMPOUT(0x2455D2BD0);
}

void TinyTextureBuilder::description(void *a1@<X8>)
{
  *a1 = 0;
}

void TinyTextureBuilder::identifier(TinyTextureBuilder *this)
{
}

void TinyTextureBuilder::dirtyStageSubscription(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void TinyTextureBuilder::inputsDescriptor(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void TinyTextureBuilder::outputsDescriptor(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t realityio::TransformAnimationAggregationBuilder::kOutputName(realityio::TransformAnimationAggregationBuilder *this)
{
  {
    operator new();
  }
  return realityio::TransformAnimationAggregationBuilder::kOutputName(void)::kOutputName;
}

void sub_23F6868DC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::TransformAnimationAggregationBuilder *realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(realityio::TransformAnimationAggregationBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "TransformAnimationAggregationBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTransformAnimationAggregationBuilderIdentifier);
  realityio::generateTransformAnimationDirtyStageSubscription(&v5);
  v12[0] = &unk_26F342258;
  v12[3] = v12;
  v11[0] = &unk_26F3422D8;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F3421E0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::TransformAnimationAggregationBuilder *)((char *)this + 296));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_23F686A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v26 = v25;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v26);
  realityio::DynamicBuilder::~DynamicBuilder(v24);
  _Unwind_Resume(a1);
}

uint64_t realityio::TransformAnimationAggregationBuilder::run(realityio::TransformAnimationAggregationBuilder *this, realityio::Inputs *a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v53, v5, v4);
  uint64_t v6 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53, &v48);
  uint64_t v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v6 + 64, &v48);
  BOOL v8 = (void *)(v6 + 72) != v7 && *(void *)(*(void *)(v6 + 40) + 104 * v7[5] + 24) == v48;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
  if (v8)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v51 = MEMORY[0x263F90730] + 16;
    if (!v52
      || (*(unsigned char *)(v52 + 57) & 8) != 0
      || ((*(uint64_t (**)(uint64_t *))(MEMORY[0x263F90730] + 48))(&v51) & 1) == 0
      || !pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v51))
    {
      goto LABEL_26;
    }
    char v9 = realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v50, 2028, (uint64_t)this);
    uint64_t v10 = realityio::EntityBuilder::kInputName(v9);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v10, (uint64_t)&v48);
    if ((_BYTE)v48)
    {
      uint64_t v47 = v49;
      if (v49)
      {
        unint64_t v11 = (realityio::TransformAnimationAssetBuilder *)RERetain();
        uint64_t v12 = realityio::TransformAnimationAssetBuilder::kOutputName(v11);
        realityio::Inputs::_getValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT const*>((uint64_t)buf, (uint64_t)a2, v12);
        uint64_t v13 = (uint64_t *)((char *)this + 280);
        uint64_t v43 = 0;
        int v44 = 0;
        uint64_t v14 = *((void *)this + 35);
        if (v14)
        {
          uint64_t *v13 = 0;
          uint64_t v43 = v14;
        }
        *((void *)this + 36) = 0;
        char v15 = (realityio::TransformAnimationAssetBuilder *)realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v43);
        if (buf[0])
        {
          uint64_t v16 = *(void **)&v60[4];
          if (*(void *)&v60[4])
          {
            uint64_t v43 = v47;
            if (v47)
            {
              RERetain();
              uint64_t v17 = v43;
            }
            else
            {
              uint64_t v17 = 0;
            }
            int v44 = v16;
            uint64_t v24 = *v13;
            if (*v13 != v17)
            {
              uint64_t *v13 = v17;
              uint64_t v43 = v24;
            }
            *((void *)this + 36) = v16;
            uint64_t v25 = (realityio::TransformAnimationAggregationBuilder *)realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v43);
            uint64_t v27 = *((void *)this + 2);
            uint64_t v26 = (std::__shared_weak_count *)*((void *)this + 3);
            if (v26) {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v28 = (long long *)realityio::TransformAnimationAggregationBuilder::kOutputName(v25);
            uint64_t v43 = (uint64_t)this + 280;
            realityio::Outputs::storeValue<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT *>(v27, v28, &v43);
            if (v26) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v26);
            }
          }
        }
        uint64_t v29 = realityio::TransformAnimationAssetBuilder::kOutputLibraryName(v15);
        realityio::Inputs::_getValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>((uint64_t)a2, v29, (uint64_t)&v43);
        if ((_BYTE)v43) {
          int v30 = v44;
        }
        else {
          int v30 = 0;
        }
        uint64_t v42 = REAnimationLibraryDefinitionCreate();
        char v41 = 0;
        if (v30)
        {
          int v33 = (long long *)*v30;
          int v31 = (long long *)(v30 + 1);
          std::string v32 = v33;
          if (v33 != v31)
          {
            do
            {
              std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100](&v57, v32 + 2);
              REAnimationLibraryDefinitionAddEntryAsset();
              REAnimationLibraryDefinitionAddKeyedEntryIndex();
              char v41 = 1;
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v58);
              if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v57.__r_.__value_.__l.__data_);
              }
              uint64_t v34 = (long long *)*((void *)v32 + 1);
              if (v34)
              {
                do
                {
                  int v35 = v34;
                  uint64_t v34 = *(long long **)v34;
                }
                while (v34);
              }
              else
              {
                do
                {
                  int v35 = (long long *)*((void *)v32 + 2);
                  BOOL v36 = *(void *)v35 == (void)v32;
                  std::string v32 = v35;
                }
                while (!v36);
              }
              std::string v32 = v35;
            }
            while (v35 != v31);
          }
        }
        uint64_t ServiceLocator = REEngineGetServiceLocator();
        uint64_t v40 = MEMORY[0x2455CDC30](ServiceLocator);
        uint64_t v38 = *((void *)a2 + 6);
        int v39 = operator new(0x40uLL);
        *int v39 = &unk_26F3423D8;
        v39[1] = a2;
        v39[2] = &v41;
        v39[3] = &v42;
        v39[4] = &v40;
        v39[5] = &v53;
        v39[6] = this;
        v39[7] = &v47;
        uint64_t v58 = v39;
        (*(void (**)(uint64_t, std::string *))(*(void *)v38 + 16))(v38, &v57);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v57);
        realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&v42);
        if (!(_BYTE)v43 && v46 < 0) {
          operator delete(__p);
        }
        if (!buf[0] && v63 < 0) {
          operator delete((void *)v62);
        }
LABEL_25:
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v47);
        realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v48);
        realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v50);
LABEL_26:
        MEMORY[0x2455CEF00](&v51);
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v47 = 0;
    }
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)buf, v18, v4);
    PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)buf);
    if ((v62 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
    char v20 = *(realityio **)&v60[4];
    if (*(void *)&v60[4]) {
      char v20 = (realityio *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v60[4]);
    }
    long long v21 = *(id *)(realityio::logObjects(v20) + 24);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
      *(_DWORD *)long long buf = 136315138;
      *(void *)int v60 = Text;
      _os_log_error_impl(&dword_23F4EA000, v21, OS_LOG_TYPE_ERROR, "Stopping operation to set animation component because could not create entity at path (%s).\n", buf, 0xCu);
    }

    goto LABEL_25;
  }
LABEL_27:
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
  uint64_t result = v54;
  if (v54) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
  }
  return result;
}

void sub_23F68703C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39)
{
}

void realityio::Outputs::storeValue<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT *>(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  uint64_t v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *uint64_t v7 = &unk_26F342358;
  uint64_t v8 = *a3;
  v7[3] = &unk_26F3423A8;
  v7[4] = v8;
  unint64_t v11 = a2;
  char v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  uint64_t v10 = (std::__shared_weak_count *)v9[8];
  v9[7] = (uint64_t)(v7 + 3);
  unsigned char v9[8] = (uint64_t)v7;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F687268(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *realityio::TransformAnimationAggregationBuilder::clear(realityio::TransformAnimationAggregationBuilder *this, realityio::Inputs *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a2 + 6);
  uint64_t v6 = a2;
  uint64_t v7 = &unk_26F342558;
  uint64_t v8 = &v6;
  char v9 = this;
  uint64_t v10 = &v7;
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 16))(v3, &v7);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v7);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v4 = (void *)*((void *)this + 35);
  if (v4)
  {
    *((void *)this + 35) = 0;
    uint64_t v7 = v4;
  }
  *((void *)this + 36) = 0;
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v7);
}

void sub_23F687364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::TransformAnimationAggregationBuilder::~TransformAnimationAggregationBuilder(void **this)
{
  realityio::TransformAnimationAggregationBuilder::~TransformAnimationAggregationBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  *this = &unk_26F3421E0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 43));
  if (*((char *)this + 343) < 0) {
    operator delete(this[40]);
  }
  if (*((char *)this + 319) < 0) {
    operator delete(this[37]);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(this + 35);
  *this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 27);
  uint64_t v2 = (std::__shared_weak_count *)this[26];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (unint64_t)this[24];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = (unint64_t)this[23];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder((realityio::Builder *)this);
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F342258;
  return result;
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F342258;
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v18) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)&v18, &v20);
  uint64_t v6 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v20);
  uint64_t v7 = (realityio::TransformAnimationAssetBuilder *)v21;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v8 = realityio::TransformAnimationAssetBuilder::kOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v16) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v8, (uint64_t *)(v9 + 312), (int *)&v16, &v18);
  uint64_t v10 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v18);
  uint64_t v11 = (realityio::TransformAnimationAssetBuilder *)v19;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v12 = realityio::TransformAnimationAssetBuilder::kOutputLibraryName(v11);
  unint64_t v13 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v15 = 1;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v12, (uint64_t *)(v13 + 320), &v15, &v16);
  uint64_t v14 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F68771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F3422D8;
  return result;
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3422D8;
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::TransformAnimationAggregationBuilder::kOutputName((realityio::TransformAnimationAggregationBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 328), &v7, &v8);
  uint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F68796C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::Inputs::_getValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v54[2] = *MEMORY[0x263EF8340];
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  std::string::size_type v8 = *(std::__shared_weak_count **)(a2 + 24);
  if (v8)
  {
    uint64_t v49 = std::__shared_weak_count::lock(v8);
    if (v49) {
      uint64_t v48 = *(void *)(a2 + 16);
    }
  }
  MEMORY[0x2455CF830](&v50, a3);
  unint64_t v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(a2 + 8), &v48);
  if (v9 == v10)
  {
    std::operator+<char>();
    uint64_t v22 = std::string::append(&v45, ") at prim path (");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    int v25 = *(char *)(String + 23);
    if (v25 >= 0) {
      uint64_t v26 = (const std::string::value_type *)String;
    }
    else {
      uint64_t v26 = *(const std::string::value_type **)String;
    }
    if (v25 >= 0) {
      std::string::size_type v27 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v27 = *(void *)(String + 8);
    }
    int v28 = std::string::append(&v46, v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    long long v21 = std::string::append(&v47, ")");
LABEL_22:
    long long v30 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p = v30;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v53, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v53;
    uint64_t v31 = *(void *)&v53[16];
    v54[0] = *(void *)&v53[24];
    *(void *)((char *)v54 + 7) = *(void *)&v53[31];
    char v32 = v53[39];
    memset(&v53[16], 0, 24);
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 39) = *(void *)((char *)v54 + 7);
    uint64_t v33 = v54[0];
    *(void *)(a1 + 24) = v31;
    *(void *)(a1 + 32) = v33;
    *(unsigned char *)(a1 + 47) = v32;
    if (v52.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v34 = (std::mutex *)v45.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v34);
      goto LABEL_54;
    }
    goto LABEL_54;
  }
  uint64_t v11 = 1;
  uint64_t v12 = v9;
  do
  {
    uint64_t v12 = (void *)*v12;
    --v11;
  }
  while (v12 != v10);
  if (v11)
  {
    std::operator+<char>();
    unint64_t v13 = std::string::append(&v45, ") at prim path (");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    uint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    int v16 = *(char *)(v15 + 23);
    if (v16 >= 0) {
      uint64_t v17 = (const std::string::value_type *)v15;
    }
    else {
      uint64_t v17 = *(const std::string::value_type **)v15;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(v15 + 8);
    }
    long long v19 = std::string::append(&v46, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    long long v21 = std::string::append(&v47, ") because more than one connected builder produced the same output type");
    goto LABEL_22;
  }
  uint64_t v35 = v9[5];
  uint64_t v37 = *(std::mutex **)(v35 + 16);
  BOOL v36 = *(std::__shared_weak_count **)(v35 + 24);
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (const void **)((v9[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  }
  realityio::Outputs::getRawValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT const*>(v37, EmptyString, (uint64_t)v53);
  int v40 = v53[0];
  if (v53[0])
  {
    *(void *)&long long v39 = *(void *)&v53[8];
  }
  else
  {
    *(_OWORD *)std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p = *(_OWORD *)&v53[8];
    if ((v53[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)&v53[24], *(std::string::size_type *)&v53[32]);
      if (v53[0]) {
        BOOL v42 = 0;
      }
      else {
        BOOL v42 = v53[47] < 0;
      }
      int v41 = v42;
    }
    else
    {
      int v41 = 0;
      std::string v52 = *(std::string *)&v53[24];
    }
    long long v39 = *(_OWORD *)__p;
    std::string::size_type size = v52.__r_.__value_.__l.__size_;
    uint64_t v37 = (std::mutex *)v52.__r_.__value_.__r.__words[0];
    LODWORD(v47.__r_.__value_.__l.__data_) = v52.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v47.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v52.__r_.__value_.__r.__words[2] + 3);
    char v4 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    if (v41)
    {
      long long v43 = *(_OWORD *)__p;
      operator delete(*(void **)&v53[24]);
      long long v39 = v43;
    }
  }
  if (v36)
  {
    long long v44 = v39;
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    long long v39 = v44;
  }
  if (v40)
  {
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 8) = v39;
  }
  else
  {
    *(_OWORD *)uint64_t v53 = v39;
    if (v4 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v53[16], (const std::string::value_type *)v37, size);
      *(unsigned char *)a1 = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v53;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)&v53[16];
      *(void *)(a1 + 40) = *(void *)&v53[32];
      uint64_t v34 = v37;
      goto LABEL_30;
    }
    *(void *)&v53[16] = v37;
    *(void *)&v53[24] = size;
    *(_DWORD *)&v53[32] = v47.__r_.__value_.__l.__data_;
    *(_DWORD *)&v53[35] = *(_DWORD *)((char *)v47.__r_.__value_.__r.__words + 3);
    v53[39] = v4;
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v53;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)&v53[16];
    *(void *)(a1 + 40) = *(void *)&v53[32];
  }
LABEL_54:
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
}

void sub_23F687E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33)
{
  operator delete(v33);
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342358;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26F3423D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3423D8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  v18[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v14 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    uint64_t AnimationLibraryAsset = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
    uint64_t v14 = AnimationLibraryAsset;
    if (AnimationLibraryAsset)
    {
      uint64_t v4 = AnimationLibraryAsset;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 40), v18);
      uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v18);
      uint64_t v6 = (char *)String;
      if (*(char *)(String + 23) >= 0) {
        size_t v7 = *(unsigned __int8 *)(String + 23);
      }
      else {
        size_t v7 = *(void *)(String + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 17);
      if (v16 >= 0) {
        std::string::size_type v8 = __p;
      }
      else {
        std::string::size_type v8 = (void **)__p[0];
      }
      if (v7)
      {
        if (v6[23] >= 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = *(char **)v6;
        }
        memmove(v8, v9, v7);
      }
      strcpy((char *)v8 + v7, "_animationLibrary");
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v18);
      if (v16 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      realityio::Builder::addAsset(v2, v4, (uint64_t)v10);
      REAnimationLibraryComponentGetComponentType();
      v18[0] = &unk_26F342448;
      v18[1] = v2;
      v18[2] = &v14;
      uint64_t v18[3] = v18;
      uint64_t v11 = REEntityGetOrAddComponentByClass();
      std::function<void ()(REComponent *)>::operator()((uint64_t)v18, v11);
      RENetworkMarkComponentDirty();
      std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v18);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  REAnimationComponentGetComponentType();
  __p[0] = &unk_26F3424C8;
  __p[1] = v2;
  uint64_t v17 = __p;
  uint64_t v12 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)__p, v12);
  RENetworkMarkComponentDirty();
  return std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](__p);
}

void sub_23F688270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F342448;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F342448;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  REAnimationLibraryComponentAssignAnimationLibraryAsset();

  return RERelease();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F3424C8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3424C8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  uint64_t result = REAnimationComponentActiveAnimationCount();
  if (result)
  {
    return MEMORY[0x270F1C1F0](v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F342558;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F342558;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  std::string::size_type v3 = **(void **)(a1 + 8);
  uint64_t v4 = realityio::TransformAnimationAggregationBuilder::kOutputName((realityio::TransformAnimationAggregationBuilder *)a1);
  uint64_t v46 = 0;
  std::string v47 = 0;
  unint64_t v5 = *(std::__shared_weak_count **)(v3 + 24);
  if (v5)
  {
    std::string v47 = std::__shared_weak_count::lock(v5);
    if (v47) {
      uint64_t v46 = *(void *)(v3 + 16);
    }
  }
  MEMORY[0x2455CF830](&v48, v4);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(v3 + 8), &v46);
  if (v6 == v7)
  {
    std::operator+<char>();
    long long v19 = std::string::append(&v43, ") at prim path (");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 32));
    int v22 = *(char *)(String + 23);
    if (v22 >= 0) {
      long long v23 = (const std::string::value_type *)String;
    }
    else {
      long long v23 = *(const std::string::value_type **)String;
    }
    if (v22 >= 0) {
      std::string::size_type v24 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v24 = *(void *)(String + 8);
    }
    int v25 = std::string::append(&v44, v23, v24);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v18 = std::string::append(&v45, ")");
    goto LABEL_22;
  }
  uint64_t v8 = 1;
  unint64_t v9 = v6;
  do
  {
    unint64_t v9 = (void *)*v9;
    --v8;
  }
  while (v9 != v7);
  if (v8)
  {
    std::operator+<char>();
    uint64_t v10 = std::string::append(&v43, ") at prim path (");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 32));
    int v13 = *(char *)(v12 + 23);
    if (v13 >= 0) {
      uint64_t v14 = (const std::string::value_type *)v12;
    }
    else {
      uint64_t v14 = *(const std::string::value_type **)v12;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(v12 + 8);
    }
    char v16 = std::string::append(&v44, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v18 = std::string::append(&v45, ") because more than one connected builder produced the same output type");
LABEL_22:
    long long v27 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p = v27;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v51, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    std::string::size_type v3 = *(void *)&v51[16];
    std::string::value_type v1 = v52.__r_.__value_.__s.__data_[15];
    *(void *)&v51[16] = 0;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
    if (v50.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    goto LABEL_30;
  }
  uint64_t v33 = v6[5];
  std::string::size_type size = *(std::mutex **)(v33 + 16);
  uint64_t v35 = *(std::__shared_weak_count **)(v33 + 24);
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v6[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (const void **)((v6[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v6);
  }
  realityio::Outputs::getRawValue<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>(size, EmptyString, (uint64_t)v51);
  int v38 = v51[0];
  if (v51[0])
  {
    *(void *)&long long v37 = *(void *)&v51[8];
    long long v42 = v37;
  }
  else
  {
    *(_OWORD *)std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p = *(_OWORD *)&v51[8];
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v50, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
      if (v51[0]) {
        BOOL v40 = 0;
      }
      else {
        BOOL v40 = (v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      }
      int v39 = v40;
    }
    else
    {
      int v39 = 0;
      std::string v50 = v52;
    }
    long long v42 = *(_OWORD *)__p;
    std::string::size_type size = (std::mutex *)v50.__r_.__value_.__l.__size_;
    std::string::size_type v3 = v50.__r_.__value_.__r.__words[0];
    std::string::value_type v1 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    if (v39) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v38)
  {
    char v28 = 0;
  }
  else
  {
    *(_OWORD *)uint64_t v51 = v42;
    if ((v1 & 0x80) == 0)
    {
LABEL_30:
      char v28 = 1;
      goto LABEL_31;
    }
    std::string::__init_copy_ctor_external((std::string *)&v51[16], (const std::string::value_type *)v3, (std::string::size_type)size);
    std::string::size_type v41 = *(void *)&v51[16];
    std::string::value_type v1 = v52.__r_.__value_.__s.__data_[15];
    operator delete((void *)v3);
    char v28 = 1;
    std::string::size_type v3 = v41;
  }
LABEL_31:
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v29 = (realityio::TransformAnimationAggregationBuilder *)v47;
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v28)
  {
    if (v1 < 0) {
      operator delete((void *)v3);
    }
  }
  else
  {
    uint64_t v30 = *(void *)(v2 + 16);
    uint64_t v31 = *(std::__shared_weak_count **)(v2 + 24);
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v32 = (const void **)realityio::TransformAnimationAggregationBuilder::kOutputName(v29);
    std::mutex::lock((std::mutex *)(v30 + 64));
    if (v30 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v30 + 40, v32))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v30 + 40), v32); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v30, (unsigned __int8 *)v32);
    }
    std::mutex::unlock((std::mutex *)(v30 + 64));
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
  }
}

void sub_23F688A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33)
{
  operator delete(v33);
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t RIOBuilderInputsGetTypeID()
{
  if (RIOBuilderInputsGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderInputsGetTypeID::onceToken, &__block_literal_global_18);
  }
  return RIOBuilderInputsGetTypeID::typeID;
}

void __RIOBuilderInputsGetTypeID_block_invoke()
{
  if (!RIOBuilderInputsGetTypeID::typeID) {
    RIOBuilderInputsGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

BOOL RIOBuilderInputsHasValueWithName(uint64_t a1, __CFString *this)
{
  BOOL hasValueForKey = 0;
  if (a1 && this)
  {
    realityio::CFStringCopyUTF8String(this, (uint64_t)v7);
    if (v7[0])
    {
      int v4 = SHIBYTE(v8.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v8;
      }
      BOOL hasValueForKey = realityio::Inputs::hasValueForKey(*(void *)(a1 + 16));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v4 & 0x80000000) == 0) {
          return hasValueForKey;
        }
      }
      else if ((v4 & 0x80000000) == 0)
      {
        return hasValueForKey;
      }
      operator delete(v8.__r_.__value_.__l.__data_);
      return hasValueForKey;
    }
    return 0;
  }
  return hasValueForKey;
}

void sub_23F688CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  operator delete(v17);
  _Unwind_Resume(a1);
}

const void **RIOBuilderInputsGetValueWithName(uint64_t a1, __CFString *this)
{
  unint64_t EmptyString = 0;
  if (!a1 || !this) {
    return EmptyString;
  }
  realityio::CFStringCopyUTF8String(this, (uint64_t)v23);
  if (!v23[0]) {
    return 0;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v24;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v25 = 0;
  long long v26 = 0;
  unint64_t v5 = *(std::__shared_weak_count **)(v4 + 24);
  if (v5)
  {
    long long v26 = std::__shared_weak_count::lock(v5);
    if (v26) {
      uint64_t v25 = *(void *)(v4 + 16);
    }
  }
  MEMORY[0x2455CF830](&v27, &__p);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(v4 + 8), &v25);
  std::string v8 = v6;
  if (v6 == v7) {
    goto LABEL_15;
  }
  uint64_t v9 = 1;
  uint64_t v10 = v6;
  do
  {
    uint64_t v10 = (void *)*v10;
    --v9;
  }
  while (v10 != v7);
  if (v9 || (uint64_t v12 = v6[5]) == 0)
  {
LABEL_15:
    unint64_t EmptyString = 0;
    goto LABEL_16;
  }
  uint64_t v14 = *(std::mutex **)(v12 + 16);
  int v13 = *(std::__shared_weak_count **)(v12 + 24);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    if (v14)
    {
      uint64_t v15 = v8[5];
      uint64_t v14 = *(std::mutex **)(v15 + 16);
      char v16 = *(std::__shared_weak_count **)(v15 + 24);
      if (v16)
      {
        char v17 = 0;
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_33;
      }
LABEL_32:
      char v17 = 1;
LABEL_33:
      if ((v8[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (const void **)((v8[7] & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v13);
      }
      std::string::size_type v18 = v14 + 1;
      std::mutex::lock(v14 + 1);
      uint64_t v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v14->__m_.__opaque[32], EmptyString);
      if (&v14->__m_.__opaque[40] == (char *)v19) {
        goto LABEL_44;
      }
      long long v21 = *(uint64_t (****)(void))(v19 + 56);
      long long v20 = *(std::__shared_weak_count **)(v19 + 64);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v21) {
        unint64_t EmptyString = (const void **)(**v21)(v21);
      }
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (!v21) {
LABEL_44:
      }
        unint64_t EmptyString = 0;
      std::mutex::unlock(v18);
      if ((v17 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  char v16 = 0;
  if (v14) {
    goto LABEL_32;
  }
  unint64_t EmptyString = 0;
LABEL_16:
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v23[0] && SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  return EmptyString;
}

void sub_23F688F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::mutex::unlock(v25);
  if ((v27 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if ((a24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderInputsCopyStage(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  std::string::size_type v3 = (atomic_uint *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(**(void **)(a1 + 16) + 8));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v3);
  uint64_t v1 = RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &>(&v3);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v3);
  return v1;
}

void sub_23F689050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderInputsCopyPrim(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)v1 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v5, v2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v1 + 32));
  int v9 = 1;
  uint64_t v3 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v5, &v9);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (v6) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  }
  return v3;
}

void sub_23F68910C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderInputsCopyPrimPath(uint64_t result)
{
  if (result) {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(*(void *)(result + 16)
  }
                                                                                          + 32));
  return result;
}

uint64_t *RIOBuilderInputsCopyStageDelta(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  memset(v11, 0, sizeof(v11));
  int v12 = 1065353216;
  memset(v5, 0, sizeof(v5));
  int v6 = 1065353216;
  memset(v4, 0, sizeof(v4));
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)v7, (uint64_t)v5);
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  std::vector<realityio::PropertyDelta>::__init_with_size[abi:ne180100]<realityio::PropertyDelta*,realityio::PropertyDelta*>((uint64_t *)&v8, 0, 0, 0);
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)v13, (uint64_t)v11);
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)v14, (uint64_t)v7);
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  std::vector<realityio::PropertyDelta>::__init_with_size[abi:ne180100]<realityio::PropertyDelta*,realityio::PropertyDelta*>((uint64_t *)&v15, v8, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 4));
  if (RIOBuilderStageDeltaGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderStageDeltaGetTypeID::onceToken, &__block_literal_global_10);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v2 = (uint64_t *)Instance;
  if (Instance)
  {
    std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(Instance + 16, (uint64_t)v13);
    std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)(v2 + 7), (uint64_t)v14);
    v2[12] = 0;
    v2[13] = 0;
    v2[14] = 0;
    std::vector<realityio::PropertyDelta>::__init_with_size[abi:ne180100]<realityio::PropertyDelta*,realityio::PropertyDelta*>(v2 + 12, v15, v16, 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v15) >> 4));
  }
  realityio::StageDelta::~StageDelta((realityio::StageDelta *)v13);
  std::string::size_type v18 = (void **)&v8;
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](&v18);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v7);
  std::string::size_type v18 = (void **)v4;
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](&v18);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v5);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v11);
  return v2;
}

void sub_23F6892FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v28);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v27);
  realityio::StageDelta::~StageDelta((realityio::StageDelta *)(v29 - 160));
  realityio::PrimDelta::~PrimDelta((realityio::PrimDelta *)&a19);
  *(void *)(v29 - 56) = &a10;
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 56));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&a13);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void realityio::PrimDelta::~PrimDelta(realityio::PrimDelta *this)
{
  uint64_t v2 = (void **)((char *)this + 40);
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this);
}

uint64_t RIOBuilderInputsGetEngine(uint64_t result)
{
  if (result) {
    return *(void *)(*(void *)(*(void *)(*(void *)(result + 16) + 40) + 16) + 16);
  }
  return result;
}

std::string::size_type RIOBuilderInputsCreateStandardTextureAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !a2) {
    return 0;
  }
  std::string::size_type v5 = *(void *)(a1 + 16);
  if (*(char *)(a3 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else {
    std::string v16 = *(std::string *)(a3 + 16);
  }
  if (*(char *)(a3 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else {
    std::string v17 = *(std::string *)(a3 + 40);
  }
  uint64_t v15 = 0;
  long long v13 = 0u;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)int v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v8);
  std::string::basic_string[abi:ne180100]<0>(v11, "");
  DWORD2(v12) = 0;
  HIDWORD(v12) = realityio::TextureSwizzleChannels::kDefault;
  LOBYTE(v13) = 2;
  DWORD1(v13) = 0;
  WORD4(v13) = 512;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  realityio::Inputs::createStandardTextureAsset(v5, a2 + 24, (uint64_t)&v16, (uint64_t)v8, &v18);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v12) < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v9[0]) < 0) {
    operator delete(v8[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  std::string::size_type v6 = v18;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v18);
  return v6;
}

void sub_23F689588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 73) < 0) {
    operator delete(*(void **)(v26 - 96));
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type RIOBuilderInputsCreateCubeMapTextureAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !a2) {
    return 0;
  }
  std::string::size_type v5 = *(void *)(a1 + 16);
  if (*(char *)(a3 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else {
    std::string v8 = *(std::string *)(a3 + 16);
  }
  if (*(char *)(a3 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else {
    std::string __p = *(std::string *)(a3 + 40);
  }
  realityio::Inputs::createCubeMapTextureAsset(v5, a2 + 24, (uint64_t)&v8, &v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  std::string::size_type v6 = v10;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v10);
  return v6;
}

void sub_23F6896EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderInputsGetImportSession(uint64_t result)
{
  if (result) {
    return *(void *)(*(void *)(result + 16) + 40) - 16;
  }
  return result;
}

uint64_t RIOBuilderInputsGetAllBuildersAndOutputNamesProvidingValuesWithName(uint64_t a1, __CFString *this, __CFArray **a3, __CFArray **a4)
{
  uint64_t v4 = 0;
  if (a1)
  {
    if (this)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      realityio::CFStringCopyUTF8String(this, (uint64_t)v27);
      uint64_t v4 = v27[0] != 0;
      if (v27[0])
      {
        MEMORY[0x2455CF830](&v26, &__p);
        uint64_t v23 = 0;
        std::string v24 = 0;
        std::string v8 = *(std::__shared_weak_count **)(v7 + 24);
        if (v8)
        {
          std::string v24 = std::__shared_weak_count::lock(v8);
          if (v24) {
            uint64_t v23 = *(void *)(v7 + 16);
          }
        }
        uint64_t v25 = v26;
        if ((v26 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v25 &= 0xFFFFFFFFFFFFFFF8;
        }
        int v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(v7 + 8), &v23);
        long long v11 = v10;
        long long v21 = a3;
        int v22 = a4;
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
        for (i = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]); v9 != v11; int v9 = (void *)*v9)
        {
          if (RIOBuilderGetTypeID::onceToken != -1) {
            dispatch_once(&RIOBuilderGetTypeID::onceToken, &__block_literal_global_35);
          }
          uint64_t Instance = (void *)_CFRuntimeCreateInstance();
          uint64_t v15 = Instance;
          if (Instance)
          {
            Instance[2] = v9[5];
            uint64_t v16 = v9[6];
            Instance[3] = v16;
            if (v16) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
            }
          }
          if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t EmptyString = (v9[7] & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)Instance);
          }
          if (*(char *)(EmptyString + 23) >= 0) {
            std::string::size_type v18 = (const char *)EmptyString;
          }
          else {
            std::string::size_type v18 = *(const char **)EmptyString;
          }
          CFStringRef v19 = CFStringCreateWithCString(0, v18, 0x8000100u);
          CFArrayAppendValue(Mutable, v15);
          CFArrayAppendValue(i, v19);
          CFRelease(v15);
          CFRelease(v19);
        }
        std::string *v21 = Mutable;
        *int v22 = i;
        if ((v25 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v4 = v4;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        if ((v26 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v27[0] && v29 < 0) {
          operator delete(__p);
        }
      }
    }
  }
  return v4;
}

void sub_23F6899A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a17)
  {
    if (a23 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void RIOBuilderInputsPerformBlockSyncOnEngineQueue(uint64_t a1, void *a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v5 = v3;
  if (a1 && v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 48);
    v6[0] = &unk_26F342658;
    v6[1] = &v5;
    void v6[3] = v6;
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v6);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v6);
    id v3 = v5;
  }
}

void sub_23F689AEC(_Unwind_Exception *a1, void *a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

BOOL _RIOBuilderInputsCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderInputsCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderInputsCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderInputs %p>", a1);
}

CFStringRef _RIOBuilderInputsCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderInputs %p>", a1);
}

void std::__function::__func<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0,std::allocator<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0,std::allocator<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F342658;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0,std::allocator<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F342658;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0,std::allocator<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 8) + 16))(*(void **)(a1 + 8));
}

uint64_t std::__function::__func<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0,std::allocator<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0,std::allocator<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0>,void ()(void)>::target_type()
{
}

uint64_t pugi::xml_writer_stream::write(pugi::xml_writer_stream *this, const void *a2, unint64_t a3)
{
  if (*((void *)this + 1)) {
    return std::ostream::write();
  }
  else {
    return MEMORY[0x270F987F8](*((void *)this + 2), a2, a3 >> 2);
  }
}

uint64_t pugi::xml_attribute::set_value(pugi::xml_attribute *this, char *__s)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  size_t v4 = strlen(__s);
}

uint64_t pugi::xml_attribute::set_name(pugi::xml_attribute *this, char *__s)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  size_t v4 = strlen(__s);
}

uint64_t pugi::impl::anonymous namespace'::strcpy_insitu<char *,unsigned long>(const char **a1, uint64_t *a2, uint64_t a3, void *__src, size_t __n)
{
  if (!__n)
  {
    unint64_t v24 = *a2;
    if ((*a2 & a3) != 0)
    {
      uint64_t v25 = *(uint64_t *)((char *)a2 - (v24 >> 8));
      uint64_t v26 = (uint64_t)&(*a1)[-8 * *((unsigned __int16 *)*a1 - 2) - 4];
      if (*((_WORD *)*a1 - 1)) {
        uint64_t v27 = 8 * *((unsigned __int16 *)*a1 - 1);
      }
      else {
        uint64_t v27 = *(void *)(v26 - 16);
      }
      unint64_t v24 = *a2;
    }
    *a1 = 0;
    uint64_t v28 = v24 & ~a3;
    goto LABEL_29;
  }
  std::string::size_type v10 = (char *)*a1;
  unint64_t v11 = *a2;
  if (*a1) {
    BOOL v12 = (*a2 & 0x40) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    size_t v13 = strlen(*a1);
    if ((v11 & a3) != 0)
    {
      if (v13 < __n || v13 >= 0x20 && v13 - __n >= v13 >> 1) {
        goto LABEL_11;
      }
    }
    else if (v13 < __n)
    {
      goto LABEL_11;
    }
    memcpy(v10, __src, __n);
    (*a1)[__n] = 0;
    return 1;
  }
LABEL_11:
  uint64_t v14 = *(uint64_t **)((char *)a2 - (v11 >> 8));
  size_t v15 = (__n + 12) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = v14[1];
  if (v16 + v15 <= 0x7FD8)
  {
    uint64_t v17 = *v14;
    uint64_t result = *v14 + v16 + 40;
    v14[1] = v16 + v15;
LABEL_13:
    *(_WORD *)uint64_t result = (result - v17 + 524248) >> 3;
    unsigned int v19 = (__n + 12) >> 3;
    if (v15 >= 0x80000) {
      LOWORD(v19) = 0;
    }
    *(_WORD *)(result + 2) = v19;
    long long v20 = (const char *)(result + 4);
    memcpy((void *)(result + 4), __src, __n);
    v20[__n] = 0;
    unint64_t v21 = *a2;
    if ((*a2 & a3) != 0)
    {
      uint64_t v22 = (uint64_t)&(*a1)[-8 * *((unsigned __int16 *)*a1 - 2) - 4];
      if (*((_WORD *)*a1 - 1)) {
        uint64_t v23 = 8 * *((unsigned __int16 *)*a1 - 1);
      }
      else {
        uint64_t v23 = *(void *)(v22 - 16);
      }
      unint64_t v21 = *a2;
    }
    *a1 = v20;
    uint64_t v28 = v21 | a3;
LABEL_29:
    *a2 = v28;
    return 1;
  }
  uint64_t v29 = 0;
  if (result)
  {
    LODWORD(v17) = v29;
    goto LABEL_13;
  }
  return result;
}

uint64_t (*pugi::xml_node::operator void (*)(pugi::xml_node***)(void *a1))(pugi *__hidden this, pugi::xml_node ***)
{
  if (*a1) {
    return pugi::unspecified_BOOL_xml_node;
  }
  else {
    return 0;
  }
}

uint64_t pugi::xml_node::child(pugi::xml_node *this, const char *__s1)
{
  if (!*(void *)this) {
    return 0;
  }
  for (uint64_t i = *(void *)(*(void *)this + 32); i; uint64_t i = *(void *)(i + 48))
  {
    size_t v4 = *(const char **)(i + 8);
    if (v4 && !strcmp(__s1, v4)) {
      break;
    }
  }
  return i;
}

uint64_t pugi::xml_node::attribute(pugi::xml_node *this, const char *__s1)
{
  if (!*(void *)this) {
    return 0;
  }
  for (uint64_t i = *(void *)(*(void *)this + 56); i; uint64_t i = *(void *)(i + 32))
  {
    size_t v4 = *(const char **)(i + 8);
    if (v4 && !strcmp(__s1, v4)) {
      break;
    }
  }
  return i;
}

uint64_t pugi::xml_node::set_name(pugi::xml_node *this, char *__s)
{
  uint64_t v3 = *(void *)this;
  if (*(void *)this) {
    int v4 = *(_DWORD *)v3 & 0xF;
  }
  else {
    int v4 = 0;
  }
  if (v4 != 7 && (v4 & 0xFFFFFFFB) != 2) {
    return 0;
  }
  size_t v6 = strlen(__s);
}

uint64_t pugi::xml_node::set_value(pugi::xml_node *this, char *__s)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  if ((*(_DWORD *)v2 & 0xFu) - 3 >= 4 && (*(_DWORD *)v2 & 0xF) != 8) {
    return 0;
  }
  size_t v5 = strlen(__s);
}

char *pugi::xml_node::append_attribute(pugi::xml_node *this, char *__s)
{
  uint64_t v2 = *(void **)this;
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v3 = *v2 & 0xFLL;
  if (v3 != 7 && v3 != 2) {
    return 0;
  }
  uint64_t v7 = *(char ***)((char *)v2 - (*v2 >> 8));
  std::string v8 = v7[1];
  if ((unint64_t)(v8 + 40) > 0x7FD8)
  {
    size_t v15 = 0;
    if (!v10) {
      return v10;
    }
    int v9 = v15;
  }
  else
  {
    int v9 = *v7;
    std::string::size_type v10 = &v8[(void)*v7 + 40];
    v7[1] = v8 + 40;
  }
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 8) = 0u;
  *(void *)std::string::size_type v10 = (v10 - v9) << 8;
  size_t v15 = v10;
  uint64_t v11 = *(void *)(*(void *)this + 56);
  if (v11)
  {
    uint64_t v13 = *(void *)(v11 + 24);
    BOOL v12 = (char **)(v11 + 24);
    *(void *)(v13 + 32) = v10;
    *((void *)v10 + 3) = v13;
  }
  else
  {
    *(void *)(*(void *)this + 56) = v10;
    BOOL v12 = (char **)(v10 + 24);
  }
  *BOOL v12 = v10;
  pugi::xml_attribute::set_name((pugi::xml_attribute *)&v15, __s);
  return v10;
}

char *pugi::xml_node::append_child(void **a1, unsigned int a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v3 = 0;
  if (a2 >= 2)
  {
    uint64_t v4 = *v2 & 0xFLL;
    if ((v4 - 3) >= 0xFFFFFFFE)
    {
      if (a2 - 9 >= 0xFFFFFFFE && v4 != 1) {
        return 0;
      }
      size_t v6 = *(char ***)((char *)v2 - (*v2 >> 8));
      uint64_t v7 = v6[1];
      if ((unint64_t)(v7 + 64) > 0x7FD8)
      {
        uint64_t v14 = a1;
        size_t v15 = 0;
        unsigned int v13 = a2;
        if (!v3) {
          return v3;
        }
        a1 = v14;
        std::string v8 = v15;
        a2 = v13;
      }
      else
      {
        std::string v8 = *v6;
        uint64_t v3 = &v7[(void)*v6 + 40];
        v6[1] = v7 + 64;
      }
      *((void *)v3 + 7) = 0;
      *(_OWORD *)(v3 + 40) = 0u;
      *(_OWORD *)(v3 + 24) = 0u;
      *(_OWORD *)(v3 + 8) = 0u;
      *(void *)uint64_t v3 = a2 | (unint64_t)((v3 - v8) << 8);
      size_t v15 = v3;
      int v9 = *a1;
      *((void *)v3 + 3) = *a1;
      uint64_t v10 = v9[4];
      if (v10)
      {
        uint64_t v12 = *(void *)(v10 + 40);
        uint64_t v11 = (char **)(v10 + 40);
        *(void *)(v12 + 48) = v3;
        *((void *)v3 + 5) = v12;
      }
      else
      {
        v9[4] = v3;
        uint64_t v11 = (char **)(v3 + 40);
      }
      *uint64_t v11 = v3;
      if (a2 == 7) {
        pugi::xml_node::set_name((pugi::xml_node *)&v15, "xml");
      }
    }
  }
  return v3;
}

uint64_t pugi::xml_node::remove_child(pugi::xml_node *this, uint64_t **a2)
{
  uint64_t v2 = *(void **)this;
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v3 = *a2;
  if (!*a2 || (void *)v3[3] != v2) {
    return 0;
  }
  uint64_t v5 = *(void *)((char *)v2 - (*v2 >> 8));
  uint64_t v6 = v3[6];
  uint64_t v7 = v6;
  if (!v6) {
    uint64_t v7 = v2[4];
  }
  *(void *)(v7 + 40) = v3[5];
  uint64_t v8 = v3[5];
  uint64_t v10 = *(void *)(v8 + 48);
  int v9 = (uint64_t *)(v8 + 48);
  uint64_t v11 = v2 + 4;
  if (v10) {
    uint64_t v11 = v9;
  }
  *uint64_t v11 = v6;
  v3[3] = 0;
  v3[5] = 0;
  v3[6] = 0;
  return 1;
}

void pugi::impl::anonymous namespace'::destroy_node(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if ((*a1 & 0x20) != 0)
  {
    uint64_t v5 = a1[1];
    unsigned int v6 = *(unsigned __int16 *)(v5 - 4);
    v5 -= 4;
    uint64_t v7 = v5 - 8 * v6;
    uint64_t v8 = *(unsigned __int16 *)(v5 + 2);
    if (v8) {
      uint64_t v9 = 8 * v8;
    }
    else {
      uint64_t v9 = *(void *)(v7 - 16);
    }
    uint64_t v4 = *a1;
  }
  if ((v4 & 0x10) != 0)
  {
    uint64_t v10 = a1[2];
    unsigned int v11 = *(unsigned __int16 *)(v10 - 4);
    v10 -= 4;
    uint64_t v12 = v10 - 8 * v11;
    uint64_t v13 = *(unsigned __int16 *)(v10 + 2);
    if (v13) {
      uint64_t v14 = 8 * v13;
    }
    else {
      uint64_t v14 = *(void *)(v12 - 16);
    }
  }
  size_t v15 = (unint64_t *)a1[7];
  if (v15)
  {
    do
    {
      uint64_t v16 = (unint64_t *)v15[4];
      unint64_t v17 = *v15;
      if ((*v15 & 0x20) != 0)
      {
        unint64_t v18 = v15[1];
        unsigned int v19 = *(unsigned __int16 *)(v18 - 4);
        v18 -= 4;
        unint64_t v20 = v18 - 8 * v19;
        uint64_t v21 = *(unsigned __int16 *)(v18 + 2);
        if (v21) {
          uint64_t v22 = 8 * v21;
        }
        else {
          uint64_t v22 = *(void *)(v20 - 16);
        }
        unint64_t v17 = *v15;
      }
      if ((v17 & 0x10) != 0)
      {
        unint64_t v23 = v15[2];
        unsigned int v24 = *(unsigned __int16 *)(v23 - 4);
        v23 -= 4;
        unint64_t v25 = v23 - 8 * v24;
        uint64_t v26 = *(unsigned __int16 *)(v23 + 2);
        if (v26) {
          uint64_t v27 = 8 * v26;
        }
        else {
          uint64_t v27 = *(void *)(v25 - 16);
        }
        unint64_t v17 = *v15;
      }
      size_t v15 = v16;
    }
    while (v16);
  }
  uint64_t v28 = a1[4];
  if (v28)
  {
    do
    {
      uint64_t v29 = *(void *)(v28 + 48);
      uint64_t v28 = v29;
    }
    while (v29);
  }
  uint64_t v30 = (uint64_t *)((char *)a1 - ((unint64_t)*a1 >> 8));
}

void pugi::impl::anonymous namespace'::load_buffer_impl(uint64_t a1@<X0>, char *a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, unsigned __int8 **a10)
{
  size_t v13 = a4;
  uint64_t v17 = a9;
  if (!a3 && a4)
  {
    *(_DWORD *)(a9 + 16) = 0;
    *(_DWORD *)a9 = 2;
    *(void *)(a9 + 8) = 0;
    return;
  }
  int v19 = buffer_encoding;
  int v238 = buffer_encoding;
  uint64_t v235 = a2;
  if (buffer_encoding == 1)
  {
    if (a7)
    {
      unint64_t v20 = a3;
      if (!a8) {
        goto LABEL_7;
      }
LABEL_158:
      if (a3 && v20 != a3) {
      goto LABEL_161;
      }
    }
    uint64_t v236 = v17;
    unint64_t v23 = (pugi::impl::_anonymous_namespace_ *)(v13 + 1);
    if (v31)
    {
      unint64_t v20 = v31;
      if (a3) {
        memcpy(v31, a3, v13);
      }
      unsigned int v24 = &v20[v13];
      goto LABEL_156;
    }
LABEL_552:
    *(_DWORD *)(v236 + 16) = 0;
    *(_DWORD *)uint64_t v236 = 3;
    *(void *)(v236 + 8) = 0;
    return;
  }
  uint64_t v236 = v17;
  if ((buffer_encoding & 0xFFFFFFFE) == 2)
  {
    unint64_t v21 = v13 >> 1;
    if (buffer_encoding == 2)
    {
      if (v13 < 2)
      {
        uint64_t v22 = 0;
LABEL_13:
        unint64_t v23 = (pugi::impl::_anonymous_namespace_ *)(v22 + 1);
        if (!v24) {
          goto LABEL_552;
        }
        unint64_t v20 = v24;
        if (v13 >= 2)
        {
          unint64_t v25 = a3;
          while (1)
          {
            uint64_t v26 = (unsigned __int8 *)*(unsigned __int16 *)v25;
            if (v26 >> 11 > 0x1A && (~v26 & 0xE000) != 0)
            {
              uint64_t v27 = v25 + 2;
              uint64_t v28 = -1;
              if (v21 < 2 || ((unsigned __int16)v26 & 0xFC00) != 0xD800) {
                goto LABEL_20;
              }
              __int16 v29 = *(_WORD *)v27;
              if ((*(_WORD *)v27 & 0xFC00) == 0xDC00)
              {
                unsigned int v30 = ((v26 << 10) & 0xFFC00) + 0x10000;
                *unsigned int v24 = (v30 >> 18) | 0xF0;
                v24[1] = (v30 >> 12) & 0x3F | 0x80;
                v24[2] = (((v26 << 10) | v29 & 0x3FFu) >> 6) & 0x3F | 0x80;
                void v24[3] = v29 & 0x3F | 0x80;
                v24 += 4;
                uint64_t v27 = v25 + 4;
                uint64_t v28 = -2;
                goto LABEL_20;
              }
            }
            else
            {
              uint64_t v27 = v25 + 2;
            }
            uint64_t v28 = -1;
LABEL_20:
            unint64_t v25 = v27;
            v21 += v28;
            if (!v21) {
              goto LABEL_155;
            }
          }
        }
        goto LABEL_154;
      }
      uint64_t v22 = 0;
      unint64_t v43 = v13 >> 1;
      std::string v44 = a3;
      while (1)
      {
        unsigned int v45 = *(unsigned __int16 *)v44;
        if (v45 >> 11 > 0x1A)
        {
          if ((~v45 & 0xE000) != 0)
          {
            std::string v47 = v44 + 2;
            uint64_t v48 = -1;
            if (v43 >= 2 && (v45 & 0xFC00) == 0xD800)
            {
              int v49 = *(_WORD *)v47 & 0xFC00;
              BOOL v50 = v49 == 56320;
              uint64_t v51 = (unsigned __int16 *)(v44 + 4);
              if (v49 == 56320) {
                uint64_t v48 = -2;
              }
              else {
                uint64_t v48 = -1;
              }
              if (v50) {
                std::string v47 = (unsigned __int8 *)v51;
              }
              if (v50) {
                v22 += 4;
              }
            }
            goto LABEL_65;
          }
          v22 += 3;
        }
        else
        {
          if (v45 < 0x800) {
            uint64_t v46 = 2;
          }
          else {
            uint64_t v46 = 3;
          }
          if (v45 < 0x80) {
            uint64_t v46 = 1;
          }
          v22 += v46;
        }
        std::string v47 = v44 + 2;
        uint64_t v48 = -1;
LABEL_65:
        std::string v44 = v47;
        v43 += v48;
        if (!v43) {
          goto LABEL_13;
        }
      }
    }
    if (v13 < 2)
    {
      uint64_t v34 = 0;
LABEL_36:
      unint64_t v23 = (pugi::impl::_anonymous_namespace_ *)(v34 + 1);
      if (!v24) {
        goto LABEL_552;
      }
      unint64_t v20 = v24;
      if (v13 < 2)
      {
LABEL_154:
        unsigned int v24 = v20;
        goto LABEL_155;
      }
      uint64_t v35 = a3;
      while (1)
      {
        unsigned int v36 = bswap32(*(unsigned __int16 *)v35);
        long long v37 = (unsigned __int8 *)HIWORD(v36);
        if (v36 >> 27 > 0x1A && (~v37 & 0xE000) != 0)
        {
          int v38 = v35 + 2;
          uint64_t v39 = -1;
          if (v21 < 2 || ((unsigned __int16)v37 & 0xFC00) != 0xD800) {
            goto LABEL_43;
          }
          unsigned int v40 = bswap32(*(unsigned __int16 *)v38) >> 16;
          if ((v40 & 0xFC00) == 0xDC00)
          {
            unsigned int v41 = ((v37 << 10) & 0xFFC00) + 0x10000;
            *unsigned int v24 = (v41 >> 18) | 0xF0;
            v24[1] = (v41 >> 12) & 0x3F | 0x80;
            v24[2] = (((v37 << 10) | v40 & 0x3FF) >> 6) & 0x3F | 0x80;
            void v24[3] = v40 & 0x3F | 0x80;
            v24 += 4;
            int v38 = v35 + 4;
            uint64_t v39 = -2;
            goto LABEL_43;
          }
        }
        else
        {
          int v38 = v35 + 2;
        }
        uint64_t v39 = -1;
LABEL_43:
        uint64_t v35 = v38;
        v21 += v39;
        if (!v21) {
          goto LABEL_155;
        }
      }
    }
    uint64_t v34 = 0;
    unint64_t v53 = v13 >> 1;
    uint64_t v54 = a3;
    while (1)
    {
      unsigned int v55 = bswap32(*(unsigned __int16 *)v54);
      unsigned int v56 = HIWORD(v55);
      if (v55 >> 27 > 0x1A)
      {
        if ((~v56 & 0xE000) != 0)
        {
          uint64_t v58 = v54 + 2;
          uint64_t v59 = -1;
          if (v53 >= 2 && (v56 & 0xFC00) == 0xD800)
          {
            int v60 = *(_WORD *)v58 & 0xFC;
            BOOL v61 = v60 == 220;
            unint64_t v62 = (unsigned __int16 *)(v54 + 4);
            if (v60 == 220) {
              uint64_t v59 = -2;
            }
            else {
              uint64_t v59 = -1;
            }
            if (v61) {
              uint64_t v58 = (unsigned __int8 *)v62;
            }
            if (v61) {
              v34 += 4;
            }
          }
          goto LABEL_91;
        }
        v34 += 3;
      }
      else
      {
        if (v56 < 0x800) {
          uint64_t v57 = 2;
        }
        else {
          uint64_t v57 = 3;
        }
        if (v56 < 0x80) {
          uint64_t v57 = 1;
        }
        v34 += v57;
      }
      uint64_t v58 = v54 + 2;
      uint64_t v59 = -1;
LABEL_91:
      uint64_t v54 = v58;
      v53 += v59;
      if (!v53) {
        goto LABEL_36;
      }
    }
  }
  if ((buffer_encoding - 5) <= 1)
  {
    size_t v32 = v13 >> 2;
    if (buffer_encoding == 5)
    {
      if (v13 >= 4)
      {
        uint64_t v33 = 0;
        size_t v74 = v13 >> 2;
        std::string::size_type v75 = (unsigned int *)a3;
        do
        {
          unsigned int v77 = *v75++;
          unsigned int v76 = v77;
          unsigned int v78 = HIWORD(v77);
          uint64_t v79 = v33 + 4;
          if (v77 < 0x800) {
            uint64_t v80 = 2;
          }
          else {
            uint64_t v80 = 3;
          }
          if (v76 < 0x80) {
            uint64_t v81 = 1;
          }
          else {
            uint64_t v81 = v80;
          }
          v33 += v81;
          if (v78) {
            uint64_t v33 = v79;
          }
          --v74;
        }
        while (v74);
      }
      else
      {
        uint64_t v33 = 0;
      }
      unint64_t v23 = (pugi::impl::_anonymous_namespace_ *)(v33 + 1);
      if (!v24) {
        goto LABEL_552;
      }
      unint64_t v20 = v24;
      if (v13 >= 4)
      {
        char v82 = a3;
        do
        {
          uint64_t v83 = (unsigned __int8 *)*(unsigned int *)v82;
          if (v83 >> 16)
          {
            *unsigned int v24 = (v83 >> 18) | 0xF0;
            v24[1] = (v83 >> 12) & 0x3F | 0x80;
            v24[2] = (v83 >> 6) & 0x3F | 0x80;
            void v24[3] = v83 & 0x3F | 0x80;
            v24 += 4;
          }
          else
          {
          }
          v82 += 4;
          --v32;
        }
        while (v32);
        goto LABEL_155;
      }
    }
    else
    {
      if (v13 >= 4)
      {
        uint64_t v52 = 0;
        size_t v84 = v13 >> 2;
        uint64_t v85 = (unsigned int *)a3;
        do
        {
          unsigned int v86 = bswap32(*v85);
          if (HIWORD(v86))
          {
            v52 += 4;
          }
          else
          {
            if (v86 < 0x800) {
              uint64_t v87 = 2;
            }
            else {
              uint64_t v87 = 3;
            }
            if (v86 < 0x80) {
              uint64_t v88 = 1;
            }
            else {
              uint64_t v88 = v87;
            }
            v52 += v88;
          }
          ++v85;
          --v84;
        }
        while (v84);
      }
      else
      {
        uint64_t v52 = 0;
      }
      unint64_t v23 = (pugi::impl::_anonymous_namespace_ *)(v52 + 1);
      if (!v24) {
        goto LABEL_552;
      }
      unint64_t v20 = v24;
      if (v13 >= 4)
      {
        v221 = (unsigned int *)a3;
        do
        {
          std::string::size_type v222 = (unsigned __int8 *)bswap32(*v221);
          if (v222 >> 16)
          {
            *unsigned int v24 = (v222 >> 18) | 0xF0;
            v24[1] = (v222 >> 12) & 0x3F | 0x80;
            v24[2] = (v222 >> 6) & 0x3F | 0x80;
            void v24[3] = v222 & 0x3F | 0x80;
            v24 += 4;
          }
          else
          {
          }
          ++v221;
          --v32;
        }
        while (v32);
        goto LABEL_155;
      }
    }
    goto LABEL_154;
  }
  if (buffer_encoding != 9) {
    goto LABEL_552;
  }
  size_t v42 = 0;
  if (v13)
  {
    while (((char)a3[v42] & 0x80000000) == 0)
    {
      if (v13 == ++v42) {
        goto LABEL_121;
      }
    }
  }
  if (v42 >= v13) {
    size_t v63 = v13;
  }
  else {
    size_t v63 = v42;
  }
  if (v42 >= v13)
  {
LABEL_121:
    if (a7)
    {
      unint64_t v20 = a3;
      a2 = v235;
      goto LABEL_157;
    }
    unint64_t v23 = (pugi::impl::_anonymous_namespace_ *)(v13 + 1);
    if (!v220) {
      goto LABEL_552;
    }
    unint64_t v20 = v220;
    if (a3) {
      memcpy(v220, a3, v13);
    }
    unsigned int v24 = &v20[v13];
  }
  else
  {
    uint64_t v64 = &a3[v63];
    uint64_t v65 = 0;
    if (v13 != v63)
    {
      size_t v66 = v63 - v13;
      float v67 = &a3[v63];
      do
      {
        int v68 = (char)*v67++;
        if (v68 >= 0) {
          uint64_t v69 = 1;
        }
        else {
          uint64_t v69 = 2;
        }
        v65 += v69;
        BOOL v70 = __CFADD__(v66++, 1);
      }
      while (!v70);
    }
    unint64_t v23 = (pugi::impl::_anonymous_namespace_ *)(v63 + v65 + 1);
    if (!v71) {
      goto LABEL_552;
    }
    unint64_t v20 = v71;
    memcpy(v71, a3, v63);
    unsigned int v24 = &v20[v63];
    if (v13 != v63)
    {
      size_t v72 = v63 - v13;
      do
      {
        unsigned int v73 = *v64++;
        BOOL v70 = __CFADD__(v72++, 1);
      }
      while (!v70);
    }
  }
LABEL_155:
  a2 = v235;
  uint64_t v17 = v236;
LABEL_156:
  *unsigned int v24 = 0;
  size_t v13 = (size_t)v23;
LABEL_157:
  int v19 = v238;
  if (a8) {
    goto LABEL_158;
  }
LABEL_7:
  if (v20 != a3) {
LABEL_161:
  }
    *a10 = v20;
  *(void *)(a1 + 80) = v20;
  if (!v13)
  {
    *(_DWORD *)uint64_t v17 = ~(a5 >> 8) & 0x10;
    *(void *)(v17 + 8) = 0;
    goto LABEL_625;
  }
  uint64_t v89 = *((void *)a2 + 4);
  if (v89) {
    uint64_t v230 = *(void *)(v89 + 40);
  }
  else {
    uint64_t v230 = 0;
  }
  size_t v90 = v13 - 1;
  int v91 = v20[v13 - 1];
  uint64_t v233 = (uint64_t *)(a1 + 64);
  v20[v13 - 1] = 0;
  uint64_t v92 = v20;
  if (*v20 == 239)
  {
    uint64_t v92 = v20;
    if (v20[1] == 187)
    {
      uint64_t v93 = 3;
      if (v20[2] != 191) {
        uint64_t v93 = 0;
      }
      uint64_t v92 = &v20[v93];
    }
  }
  unint64_t v231 = (uint64_t (*)(unsigned __int8 *))*(&off_26F342798 + ((a5 >> 9) & 4 | (a5 >> 4) & 3));
  v232 = (uint64_t (*)(unsigned __int8 *, void))*(&off_26F342718 + (a5 >> 4));
  BOOL v94 = (a5 & 0x800) == 0 && (a5 & 0x408) != 0;
  appended = a2;
  int v234 = v91;
LABEL_176:
  uint64_t v96 = *v92;
  do
  {
    int v97 = v92;
    if (!v96) {
      goto LABEL_533;
    }
    if (v96 == 60)
    {
LABEL_198:
      unsigned int v102 = *++v97;
      uint64_t v101 = v102;
LABEL_206:
      {
        if (v101 != 33)
        {
          if (v101 != 63)
          {
            if (v101 != 47)
            {
              if (v101) {
                BOOL v224 = 0;
              }
              else {
                BOOL v224 = v91 == 63;
              }
              if (v224) {
                int v104 = 6;
              }
              else {
                int v104 = 5;
              }
              uint64_t j = v97;
              goto LABEL_614;
            }
            uint64_t j = v97 + 1;
            long long v108 = (unsigned __int8 *)*((void *)appended + 1);
            if (v108)
            {
              uint64_t v92 = v97 + 1;
              while (1)
              {
                int v109 = *v92;
                  break;
                ++v92;
                int v110 = *v108++;
                if (v109 != v110) {
                  goto LABEL_586;
                }
              }
              if (!*v108)
              {
                appended = (char *)*((void *)appended + 3);
                do
                {
                  uint64_t j = v92;
                  int v153 = *v92++;
                  int v152 = v153;
                }
                if (v152)
                {
                  if (v152 != 62)
                  {
                    int v104 = 13;
                    goto LABEL_614;
                  }
                  goto LABEL_176;
                }
                --v92;
                if (v91 == 62) {
                  goto LABEL_176;
                }
LABEL_597:
                int v104 = 13;
                goto LABEL_613;
              }
              if (*v92) {
                BOOL v225 = 0;
              }
              else {
                BOOL v225 = *v108 == v91;
              }
              if (v225 && !v108[1]) {
                goto LABEL_597;
              }
            }
LABEL_586:
            int v104 = 14;
            goto LABEL_614;
          }
          uint64_t j = v97 + 1;
          {
LABEL_564:
            int v104 = 6;
            goto LABEL_614;
          }
          size_t v229 = v90;
          uint64_t v237 = v17;
          uint64_t v136 = 0;
          uint64_t v137 = v97 + 1;
          uint64_t v138 = v97 + 3;
          uint64_t v139 = 1;
          do
          {
            uint64_t v140 = v139;
            uint64_t v92 = v137;
            unint64_t v141 = v138;
            int v142 = v97[v136 + 1];
            ++v139;
            ++v136;
            ++v137;
            ++v138;
          }
          while ((v143 & 0x40) != 0);
          int v144 = &v97[v140];
          if (!v142) {
            goto LABEL_571;
          }
          unint64_t v145 = &v97[v136];
          if ((v97[1] & 0xDF) == 0x58 && (v97[2] & 0xDF) == 0x4D)
          {
            BOOL v147 = v136 == 4 && (v97[3] & 0xDF) == 76;
            if (v147) {
              int v148 = 256;
            }
            else {
              int v148 = 1;
            }
            if ((v148 & a5) == 0)
            {
              while (1)
              {
LABEL_293:
                if (v142 == 63)
                {
                  int v142 = v145[1];
                  BOOL v151 = v91 == 62 && v142 == 0;
                  if (v142 == 62 || v151)
                  {
                    BOOL v50 = v142 == 62;
                    uint64_t v183 = 1;
                    if (v50) {
                      uint64_t v183 = 2;
                    }
                    uint64_t v92 = &v145[v183];
                    goto LABEL_454;
                  }
                }
                else
                {
                  if (!v142)
                  {
                    int v104 = 6;
                    uint64_t j = v145;
LABEL_560:
                    uint64_t v17 = v237;
                    size_t v90 = v229;
                    goto LABEL_614;
                  }
                  int v142 = v145[1];
                }
                ++v145;
              }
            }
            if (v147)
            {
              if (!*((void *)appended + 3))
              {
                if (appended)
                {
                  int v149 = 1;
                  goto LABEL_330;
                }
                uint64_t j = v144;
LABEL_589:
                int v104 = 3;
                uint64_t v17 = v237;
                goto LABEL_590;
              }
LABEL_571:
              uint64_t j = v144;
              goto LABEL_572;
            }
          }
          else if ((a5 & 1) == 0)
          {
            goto LABEL_293;
          }
          if (appended)
          {
            int v149 = 0;
LABEL_330:
            int v91 = v234;
            *((void *)appended + 1) = j;
            uint64_t v157 = v97[v136];
            v97[v136] = 0;
            if (v157 == 63)
            {
              int v158 = v97[v136 + 1];
              BOOL v160 = v234 == 62 && v158 == 0;
              if (v158 == 62 || v160)
              {
                if (v158 == 62) {
                  int v161 = v97 + 1;
                }
                else {
                  int v161 = v97;
                }
                uint64_t v92 = &v161[v136 + 1];
                appended = (char *)*((void *)appended + 3);
LABEL_454:
                uint64_t v17 = v237;
                size_t v90 = v229;
                goto LABEL_455;
              }
              uint64_t j = &v97[v136 + 1];
            }
            else
            {
              {
                do
                {
                  long long v178 = v141;
                  int v180 = *++v92;
                  int v179 = v180;
                  ++v141;
                }
                uint64_t v17 = v237;
                size_t v90 = v229;
                while (1)
                {
                  if (v179 == 63)
                  {
                    int v179 = *v178;
                    BOOL v182 = v234 == 62 && v179 == 0;
                    if (v179 == 62 || v182)
                    {
                      if (v149)
                      {
                        *(v178 - 1) = 47;
                      }
                      else
                      {
                        *((void *)appended + 2) = v92;
                        appended = (char *)*((void *)appended + 3);
                        *(v178 - 1) = 0;
                        if (*v178 == 62) {
                          uint64_t v92 = v178 + 1;
                        }
                        else {
                          uint64_t v92 = v178;
                        }
                      }
LABEL_455:
                      if ((*(void *)appended & 0xFLL) == 7)
                      {
                        while (1)
                        {
                          do
                          {
LABEL_456:
                            uint64_t j = v92;
                            int v185 = *v92++;
                            int v184 = v185;
                          }
                          while ((v186 & 8) != 0);
                          if ((v186 & 0x80) == 0) {
                            break;
                          }
                          int v116 = v20;
                          size_t v117 = v90;
                          long long v187 = appended;
                          if (!v188) {
                            goto LABEL_561;
                          }
                          v189 = v188;
                          *((void *)v188 + 1) = j;
                          char v190 = j + 1;
                          int v91 = v234;
                          while (1)
                          {
                            int v191 = *(v190 - 1);
                            if ((v192 & 0x40) == 0)
                            {
                              --v190;
                              goto LABEL_467;
                            }
                            int v191 = *v190;
                            if ((v192 & 0x40) == 0) {
                              goto LABEL_467;
                            }
                            int v191 = v190[1];
                            if ((v192 & 0x40) == 0) {
                              break;
                            }
                            int v191 = v190[2];
                            v190 += 4;
                            if ((v192 & 0x40) == 0)
                            {
                              v190 -= 2;
                              goto LABEL_467;
                            }
                          }
                          ++v190;
LABEL_467:
                          *char v190 = 0;
                          uint64_t j = v190 + 1;
                          if ((v192 & 8) != 0)
                          {
                            do
                            {
                              int v193 = *j++;
                              int v191 = v193;
                            }
                          }
                          if (v191 != 61) {
                            goto LABEL_567;
                          }
                          do
                          {
                            int v195 = *j++;
                            int v194 = v195;
                          }
                          if (v194 != 34 && v194 != 39)
                          {
                            --j;
LABEL_567:
                            int v104 = 12;
                            goto LABEL_568;
                          }
                          *((void *)v188 + 2) = j;
                          v196 = (unsigned __int8 *)v232(j, (char)v194);
                          if (!v196)
                          {
                            std::string::size_type v223 = (unsigned __int8 **)(v189 + 16);
                            int v104 = 12;
                            int v91 = v234;
                            size_t v90 = v117;
                            unint64_t v20 = v116;
                            goto LABEL_565;
                          }
                          uint64_t v92 = v196;
                          int v91 = v234;
                          appended = v187;
                          size_t v90 = v117;
                          unint64_t v20 = v116;
                          if (v197 < 0)
                          {
                            int v104 = 12;
                            goto LABEL_613;
                          }
                        }
                        if (v184 == 62) {
                          goto LABEL_176;
                        }
                        if (v184 == 47)
                        {
                          if (*v92 == 62)
                          {
                            appended = (char *)*((void *)appended + 3);
                            uint64_t v92 = j + 2;
                            goto LABEL_176;
                          }
                          int v104 = 11;
                          if (v91 == 62 && !*v92)
                          {
                            appended = (char *)*((void *)appended + 3);
                            goto LABEL_176;
                          }
LABEL_613:
                          uint64_t j = v92;
LABEL_614:
                          uint64_t v217 = j - v20;
LABEL_615:
                          BOOL v227 = v217 == v90 && v91 == 0;
                          uint64_t v228 = v217 - v227;
                          if (v217 >= 1) {
                            uint64_t v217 = v228;
                          }
                          goto LABEL_623;
                        }
                        int v104 = 11;
                        if (v91 != 62) {
                          goto LABEL_614;
                        }
                        uint64_t v92 = j;
                        if (v184) {
                          goto LABEL_614;
                        }
                      }
                      goto LABEL_176;
                    }
                  }
                  else
                  {
                    if (!v179)
                    {
                      uint64_t j = v178 - 1;
                      goto LABEL_564;
                    }
                    int v179 = *v178;
                  }
                  ++v178;
                }
              }
              uint64_t j = v144 + 1;
            }
LABEL_572:
            int v104 = 6;
            goto LABEL_560;
          }
          uint64_t j = &v97[v136];
          goto LABEL_589;
        }
        uint64_t v92 = v97 + 1;
        int v114 = v97[1];
        if (v114 != 91)
        {
          if (v114 == 68)
          {
            if (v97[2] == 79 && v97[3] == 67 && v97[4] == 84 && v97[5] == 89 && v97[6] == 80)
            {
              int v165 = v97[7];
              BOOL v166 = v91 == 69 && v165 == 0;
              BOOL v167 = v166;
              if (v165 == 69 || v167)
              {
                uint64_t v168 = *((void *)appended + 3);
                if (v168)
                {
                  uint64_t j = v97 - 1;
                  goto LABEL_605;
                }
                for (int i = 68; ; int i = *v92)
                {
                  if (i > 59)
                  {
                    if (i == 60)
                    {
                      int v173 = v92[1];
                      if (v173 == 63)
                      {
                        for (uint64_t j = v92 + 2; ; ++j)
                        {
                          if (*j == 63)
                          {
                            if (j[1] == 62)
                            {
                              uint64_t v92 = j + 2;
                              goto LABEL_414;
                            }
                          }
                          else if (!*j)
                          {
                            goto LABEL_605;
                          }
                        }
                      }
                      if (v173 != 33) {
                        goto LABEL_606;
                      }
                      int v174 = v92[2];
                      if (v174 != 45)
                      {
                        if (v174 != 91)
                        {
                          ++v168;
                          v92 += 2;
                          continue;
                        }
                        uint64_t v175 = 0;
                        v92 += 3;
LABEL_398:
                        for (v92 += 3; ; ++v92)
                        {
                          int v176 = *(v92 - 3);
                          if (v176 == 60)
                          {
                            if (*(v92 - 2) == 33 && *(v92 - 1) == 91)
                            {
                              uint64_t v177 = 1;
                              goto LABEL_411;
                            }
                          }
                          else if (v176 == 93)
                          {
                            if (*(v92 - 2) == 93 && *(v92 - 1) == 62)
                            {
                              if (!v175) {
                                goto LABEL_414;
                              }
                              uint64_t v177 = -1;
LABEL_411:
                              v175 += v177;
                              goto LABEL_398;
                            }
                          }
                          else if (!*(v92 - 3))
                          {
                            uint64_t j = v92 - 3;
                            goto LABEL_605;
                          }
                        }
                      }
                      if (v92[3] != 45)
                      {
LABEL_606:
                        int v104 = 9;
                        goto LABEL_613;
                      }
                      for (uint64_t j = v92 + 4; ; ++j)
                      {
                        if (*j == 45)
                        {
                          if (j[1] == 45 && j[2] == 62)
                          {
                            uint64_t v92 = j + 3;
                            goto LABEL_414;
                          }
                        }
                        else if (!*j)
                        {
                          goto LABEL_605;
                        }
                      }
                    }
                    if (i == 62)
                    {
                      if (!v168)
                      {
                        *v92++ = 0;
                        goto LABEL_528;
                      }
                      --v168;
                    }
LABEL_413:
                    ++v92;
                    continue;
                  }
                  if (i != 34 && i != 39) {
                    break;
                  }
                  ++v92;
                  do
                  {
                    int v171 = *v92++;
                    int v170 = v171;
                    if (v171) {
                      BOOL v172 = v170 == i;
                    }
                    else {
                      BOOL v172 = 1;
                    }
                  }
                  while (!v172);
                  if (!v170)
                  {
                    uint64_t j = v92 - 1;
LABEL_605:
                    int v104 = 9;
                    goto LABEL_614;
                  }
LABEL_414:
                  ;
                }
                if (i) {
                  goto LABEL_413;
                }
                int v104 = 9;
                if (v91 != 62) {
                  goto LABEL_613;
                }
                uint64_t j = v92;
                if (v168) {
                  goto LABEL_614;
                }
LABEL_528:
                if ((a5 & 0x200) == 0) {
                  goto LABEL_176;
                }
                size_t v229 = v90;
                v213 = v97 + 7;
                do
                  int v214 = *++v213;
                unint64_t v215 = appended;
                if (v216)
                {
                  *((void *)v216 + 2) = v213;
                  size_t v90 = v229;
                  int v91 = v234;
                  appended = v215;
                  goto LABEL_176;
                }
                int v104 = 3;
                uint64_t j = v92;
LABEL_590:
                size_t v90 = v229;
                int v91 = v234;
                goto LABEL_614;
              }
            }
          }
          else
          {
            if (v114 == 45)
            {
              if (v97[2] != 45)
              {
                uint64_t j = v97 + 2;
LABEL_595:
                int v104 = 7;
                goto LABEL_614;
              }
              uint64_t j = v97 + 3;
              long long v115 = appended;
              if ((a5 & 2) == 0) {
                goto LABEL_229;
              }
              int v116 = v20;
              size_t v117 = v90;
              long long v118 = appended;
              if (v119)
              {
                long long v115 = v119;
                *((void *)v119 + 2) = j;
                int v91 = v234;
                appended = v118;
                size_t v90 = v117;
                unint64_t v20 = v116;
LABEL_229:
                if ((a5 & 0x22) == 0x22)
                {
                  long long v120 = 0;
                  uint64_t v121 = 0;
                  while (1)
                  {
                    while (1)
                    {
                      uint64_t v122 = *j;
                      {
                        uint64_t v123 = j;
                      }
                      else
                      {
                        uint64_t v123 = j + 2;
                        while (1)
                        {
                          uint64_t v122 = *(v123 - 1);
                          {
                            --v123;
                            goto LABEL_240;
                          }
                          uint64_t v122 = *v123;
                            goto LABEL_240;
                          uint64_t v122 = v123[1];
                            break;
                          uint64_t v122 = v123[2];
                          v123 += 4;
                          {
                            v123 -= 2;
                            goto LABEL_240;
                          }
                        }
                        ++v123;
                      }
LABEL_240:
                      if (v122 != 13) {
                        break;
                      }
                      uint64_t j = v123 + 1;
                      int v124 = v123[1];
                      *uint64_t v123 = 10;
                      if (v124 == 10)
                      {
                        if (v120)
                        {
                          uint64_t v125 = v20;
                          size_t v126 = v90;
                          int v127 = appended;
                          size_t v128 = j - v120;
                          uint64_t v129 = v121;
                          memmove(&v120[-v121], v120, v128);
                          uint64_t v121 = v129;
                          appended = v127;
                          size_t v90 = v126;
                          unint64_t v20 = v125;
                          int v91 = v234;
                        }
                        uint64_t j = v123 + 2;
                        ++v121;
                        long long v120 = v123 + 2;
                      }
                    }
                    if (v122 == 45)
                    {
                      if (v123[1] == 45)
                      {
                        int v130 = v123[2];
                        BOOL v131 = v91 == 62 && v130 == 0;
                        BOOL v132 = v131;
                        if (v130 == 62 || v132)
                        {
                          v205 = v123;
                          if (v120)
                          {
                            BOOL v206 = v20;
                            size_t v207 = v90;
                            std::string::size_type v208 = appended;
                            uint64_t v209 = v121;
                            memmove(&v120[-v121], v120, v123 - v120);
                            appended = v208;
                            size_t v90 = v207;
                            unint64_t v20 = v206;
                            int v91 = v234;
                            v205 = &v123[-v209];
                          }
                          unsigned __int8 *v205 = 0;
                          uint64_t v210 = 2;
                          if (v123[2] == 62) {
                            uint64_t v210 = 3;
                          }
                          uint64_t v92 = &v123[v210];
                          goto LABEL_176;
                        }
                      }
                    }
                    else if (!v122)
                    {
                      std::string::size_type v223 = (unsigned __int8 **)(v115 + 16);
                      int v104 = 7;
                      goto LABEL_565;
                    }
                    uint64_t j = v123 + 1;
                  }
                }
                while (1)
                {
                  if (*j == 45)
                  {
                    if (j[1] == 45)
                    {
                      int v133 = j[2];
                      BOOL v134 = v91 == 62 && v133 == 0;
                      BOOL v135 = v134;
                      if (v133 == 62 || v135)
                      {
                        if ((a5 & 2) != 0) {
                          *uint64_t j = 0;
                        }
                        BOOL v211 = v133 == 62;
                        uint64_t v212 = 2;
                        goto LABEL_521;
                      }
                    }
                  }
                  else if (!*j)
                  {
                    goto LABEL_595;
                  }
                  ++j;
                }
              }
LABEL_561:
              int v104 = 3;
              int v91 = v234;
LABEL_568:
              size_t v90 = v117;
              unint64_t v20 = v116;
              goto LABEL_614;
            }
            if (v91 == 45 && !v97[1])
            {
              int v104 = 7;
              goto LABEL_613;
            }
            if (v91 == 91 && !v97[1])
            {
              int v104 = 8;
              goto LABEL_613;
            }
          }
          int v104 = 5;
          goto LABEL_613;
        }
        if (v97[2] == 67)
        {
          if (v97[3] == 68)
          {
            if (v97[4] == 65)
            {
              if (v97[5] == 84)
              {
                if (v97[6] == 65)
                {
                  if (v97[7] == 91)
                  {
                    uint64_t j = v97 + 8;
                    if ((a5 & 4) == 0)
                    {
                      while (1)
                      {
                        if (*j == 93)
                        {
                          if (j[1] == 93)
                          {
                            int v162 = j[2];
                            BOOL v163 = v91 == 62 && v162 == 0;
                            BOOL v164 = v163;
                            if (v162 == 62 || v164)
                            {
                              ++j;
                              goto LABEL_520;
                            }
                          }
                        }
                        else if (!*j)
                        {
                          goto LABEL_603;
                        }
                        ++j;
                      }
                    }
                    int v116 = v20;
                    size_t v117 = v90;
                    unint64_t v198 = appended;
                    if (v199)
                    {
                      v200 = v199;
                      *((void *)v199 + 2) = j;
                      int v91 = v234;
                      if ((a5 & 0x20) == 0)
                      {
                        appended = v198;
                        size_t v90 = v117;
                        unint64_t v20 = v116;
                        while (1)
                        {
                          if (*j == 93)
                          {
                            if (j[1] == 93)
                            {
                              int v201 = j[2];
                              BOOL v202 = v234 == 62 && v201 == 0;
                              BOOL v203 = v202;
                              if (v201 == 62 || v203)
                              {
                                *j++ = 0;
                                goto LABEL_520;
                              }
                            }
                          }
                          else if (!*j)
                          {
                            goto LABEL_603;
                          }
                          ++j;
                        }
                      }
                      int v91 = v234;
                      uint64_t j = (unsigned __int8 *)v204;
                      appended = v198;
                      size_t v90 = v117;
                      unint64_t v20 = v116;
                      if (j)
                      {
LABEL_520:
                        BOOL v211 = j[1] == 62;
                        uint64_t v212 = 1;
LABEL_521:
                        if (v211) {
                          ++v212;
                        }
                        uint64_t v92 = &j[v212];
                        goto LABEL_176;
                      }
                      std::string::size_type v223 = (unsigned __int8 **)(v200 + 16);
                      int v104 = 8;
LABEL_565:
                      int v97 = *v223;
LABEL_535:
                      if (v97)
                      {
                        uint64_t v217 = v97 - v20;
                        goto LABEL_615;
                      }
                      uint64_t v217 = 0;
LABEL_623:
                      int v19 = v238;
                      goto LABEL_624;
                    }
                    goto LABEL_561;
                  }
                  uint64_t j = v97 + 7;
                }
                else
                {
                  uint64_t j = v97 + 6;
                }
              }
              else
              {
                uint64_t j = v97 + 5;
              }
            }
            else
            {
              uint64_t j = v97 + 4;
            }
          }
          else
          {
            uint64_t j = v97 + 3;
          }
        }
        else
        {
          uint64_t j = v97 + 2;
        }
LABEL_603:
        int v104 = 8;
        goto LABEL_614;
      }
      size_t v111 = v90;
      if (!appended)
      {
        int v104 = 3;
        uint64_t j = v97;
        int v91 = v234;
        size_t v90 = v111;
        goto LABEL_614;
      }
      *((void *)appended + 1) = v97;
      uint64_t j = v97 + 1;
      int v91 = v234;
      size_t v90 = v111;
      while (1)
      {
        int v112 = *(j - 1);
        if ((v113 & 0x40) == 0)
        {
          --j;
          goto LABEL_313;
        }
        int v112 = *j;
        if ((v113 & 0x40) == 0) {
          goto LABEL_313;
        }
        int v112 = j[1];
        if ((v113 & 0x40) == 0) {
          break;
        }
        int v112 = j[2];
        j += 4;
        if ((v113 & 0x40) == 0)
        {
          j -= 2;
          goto LABEL_313;
        }
      }
      ++j;
LABEL_313:
      *uint64_t j = 0;
      uint64_t v92 = j + 1;
      if (v112 != 62)
      {
        if ((v113 & 8) != 0) {
          goto LABEL_456;
        }
        if (v112)
        {
          if (v112 != 47
            || ((v154 = *v92, v234 == 62) ? (BOOL v155 = v154 == 0) : (BOOL v155 = 0),
                !v155 ? (int v156 = 0) : (int v156 = 1),
                v154 != 62 && !v156))
          {
            int v104 = 11;
            goto LABEL_613;
          }
          appended = (char *)*((void *)appended + 3);
          if (v154 == 62) {
            uint64_t v92 = j + 2;
          }
        }
        else
        {
          uint64_t v92 = j;
          if (v234 != 62)
          {
            int v104 = 11;
            goto LABEL_614;
          }
        }
      }
      goto LABEL_176;
    }
    {
      do
      {
        unsigned int v98 = *++v92;
        uint64_t v96 = v98;
      }
    }
    BOOL v99 = v96 == 60 || v96 == 0;
  }
  while (v99 && (!v94 || (a5 & 0x400) != 0 && (v96 != 60 || v92[1] != 47 || *((void *)appended + 4))));
  if ((a5 & 0x800) != 0) {
    int v97 = v92;
  }
  uint64_t v100 = *((void *)appended + 3);
  if ((a5 & 0x1000) != 0 || v100)
  {
    if ((a5 & 0x2000) != 0 && v100 && !*((void *)appended + 4) && !*((void *)appended + 2))
    {
      size_t v103 = v90;
      long long v106 = appended;
      *((void *)appended + 2) = v97;
    }
    else
    {
      size_t v103 = v90;
      int v104 = 3;
      if (!v105)
      {
        int v91 = v234;
        size_t v90 = v103;
        goto LABEL_535;
      }
      *((void *)v105 + 2) = v97;
      long long v106 = (char *)*((void *)v105 + 3);
    }
    int v97 = (unsigned __int8 *)v231(v97);
    uint64_t v101 = *v97;
    int v91 = v234;
    appended = v106;
    size_t v90 = v103;
    if (!*v97) {
      goto LABEL_533;
    }
    goto LABEL_206;
  }
  while (*v97)
  {
    if (*v97 == 60) {
      goto LABEL_198;
    }
    ++v97;
  }
LABEL_533:
  if (appended != v235)
  {
    int v104 = 14;
    goto LABEL_535;
  }
  if (v91 == 60)
  {
    *(_DWORD *)uint64_t v17 = 5;
    *(void *)(v17 + 8) = v90;
    int v19 = v238;
    goto LABEL_625;
  }
  int v19 = v238;
  if ((a5 & 0x1000) != 0)
  {
LABEL_547:
    int v104 = 0;
    uint64_t v217 = 0;
LABEL_624:
    *(_DWORD *)uint64_t v17 = v104;
    *(void *)(v17 + 8) = v217;
    goto LABEL_625;
  }
  v218 = (void **)(v230 + 48);
  if (!v230) {
    v218 = (void **)(a2 + 32);
  }
  v219 = *v218;
  if (v219)
  {
    while ((*v219 & 0xFLL) != 2)
    {
      v219 = (void *)v219[6];
      if (!v219) {
        goto LABEL_546;
      }
    }
    goto LABEL_547;
  }
LABEL_546:
  *(_DWORD *)uint64_t v17 = 16;
  *(void *)(v17 + 8) = v90;
LABEL_625:
  *(_DWORD *)(v17 + 16) = v19;
}

const char *pugi::xml_parse_result::description(pugi::xml_parse_result *this)
{
  uint64_t v1 = *(int *)this;
  if (v1 > 0x10) {
    return "Unknown error";
  }
  else {
    return off_265071C20[v1];
  }
}

void *pugi::xml_document::_destroy(pugi::xml_document *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 1) = 0;
  }
  uint64_t v3 = *(void **)this;
  uint64_t v4 = *(void *)(*(void *)this + 88);
  if (v4)
  {
    do
    {
      if (*(void *)v4) {
      uint64_t v4 = *(void *)(v4 + 8);
      }
    }
    while (v4);
    uint64_t v3 = *(void **)this;
  }
  uint64_t result = *(void **)((char *)v3 - (*v3 >> 8) + 16);
  if (result)
  {
    do
    {
      unsigned int v6 = (void *)result[2];
      uint64_t result = v6;
    }
    while (v6);
  }
  *(void *)this = 0;
  return result;
}

void pugi::xml_document::load(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  pugi::xml_document::_destroy((pugi::xml_document *)a1);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 32728;
  *(void *)(a1 + 56) = 10241;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 16) = a1 + 120;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1 + 16;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 32728;
  *(void *)a1 = a1 + 56;
  *(void *)(a1 + 96) = a1 + 56;
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    *(_DWORD *)(a5 + 16) = 0;
    *(_DWORD *)a5 = 2;
LABEL_42:
    *(void *)(a5 + 8) = 0;
    return;
  }
  unsigned int v33 = a4;
  std::istream::tellg();
  if (v35 < 0)
  {
    std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), 0);
    unsigned int v32 = a3;
    size_t v15 = 0;
    unint64_t v12 = 0;
    uint64_t v16 = 0;
    unint64_t v18 = a2 + 4;
    uint64_t v17 = *a2;
    while ((*((unsigned char *)v18 + *(void *)(v17 - 24)) & 2) == 0)
    {
      uint64_t v10 = v19;
      if (!v19) {
        goto LABEL_36;
      }
      *int v19 = 0;
      v19[1] = 0;
      unint64_t v20 = v19;
      if (v16)
      {
        *uint64_t v16 = v19;
        unint64_t v20 = v15;
      }
      std::istream::read();
      uint64_t v21 = a2[1];
      v10[1] = v21;
      uint64_t v17 = *a2;
      int v22 = *(_DWORD *)((char *)v18 + *(void *)(*a2 - 24));
      if ((v22 & 1) != 0 || (v22 & 2) == 0 && (v22 & 5) != 0)
      {
        uint64_t v10 = 0;
        unint64_t v12 = 0;
        int v11 = 2;
        goto LABEL_29;
      }
      BOOL v23 = __CFADD__(v21, v12);
      unint64_t v24 = v21 + v12;
      char v25 = v23;
      if (v24 > v12) {
        unint64_t v12 = v24;
      }
      size_t v15 = v20;
      uint64_t v16 = v10;
      if (v25)
      {
        uint64_t v10 = 0;
        unint64_t v12 = 0;
        int v11 = 3;
LABEL_29:
        size_t v15 = v20;
        goto LABEL_37;
      }
    }
    uint64_t v10 = v26;
    if (v26)
    {
      if (!v15)
      {
        a3 = v32;
        goto LABEL_46;
      }
      uint64_t v27 = v15;
      uint64_t v28 = (char *)v26;
      do
      {
        memcpy(v28, v27 + 2, v27[1]);
        __int16 v29 = v27;
        uint64_t v27 = (void *)*v27;
        v28 += v29[1];
      }
      while (v27);
      int v11 = 0;
    }
    else
    {
LABEL_36:
      unint64_t v12 = 0;
      int v11 = 3;
    }
LABEL_37:
    while (v15)
    {
      unsigned int v30 = v15;
      size_t v15 = (void *)*v15;
    }
    a3 = v32;
    goto LABEL_40;
  }
  std::istream::tellg();
  std::istream::seekg();
  std::istream::tellg();
  std::istream::seekg();
  uint64_t v10 = 0;
  int v11 = 2;
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0) {
    goto LABEL_41;
  }
  unint64_t v12 = 0;
  if (v35 < 0)
  {
LABEL_40:
    if (v11) {
      goto LABEL_41;
    }
    goto LABEL_46;
  }
  if (v34 - v35 < 0
  {
    int v11 = 3;
    goto LABEL_41;
  }
  std::istream::read();
  int v14 = *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32);
  if ((v14 & 1) != 0 || (v14 & 2) == 0 && (v14 & 5) != 0)
  {
    v13(v10);
LABEL_41:
    *(_DWORD *)(a5 + 16) = 0;
    *(_DWORD *)a5 = v11;
    goto LABEL_42;
  }
  unint64_t v12 = a2[1];
LABEL_46:
  if (buffer_encoding == 1) {
    *((unsigned char *)v10 + v12++) = 0;
  }
}

void sub_23F68C174(_Unwind_Exception *exception_object)
{
  while (v1)
  {
    uint64_t v3 = v1;
    uint64_t v1 = (void *)*v1;
  }
  _Unwind_Resume(exception_object);
}

void pugi::xml_document::load_file(uint64_t a1@<X0>, const char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pugi::xml_document::_destroy((pugi::xml_document *)a1);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 32728;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 56) = 10241;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 16) = a1 + 120;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1 + 16;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 32728;
  *(void *)a1 = a1 + 56;
  *(void *)(a1 + 96) = a1 + 56;
  uint64_t v10 = fopen(a2, "rb");
  if (v10)
  {
    fclose(v10);
  }
}

void sub_23F68C2C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    fclose(v1);
  }
  _Unwind_Resume(exception_object);
}

void pugi::impl::anonymous namespace'::load_file_impl(FILE *a1@<X1>, char *a2@<X0>, unsigned int a3@<W2>, uint64_t a4@<X3>, unsigned __int8 **a5@<X4>, uint64_t a6@<X8>)
{
  if (!a1)
  {
    *(_DWORD *)(a6 + 16) = 0;
    int v16 = 1;
LABEL_12:
    *(_DWORD *)a6 = v16;
    goto LABEL_13;
  }
  fseek(a1, 0, 2);
  size_t v12 = MEMORY[0x2455D2F10](a1);
  fseek(a1, 0, 0);
  if ((v12 & 0x8000000000000000) != 0)
  {
    *(_DWORD *)(a6 + 16) = 0;
    *(_DWORD *)a6 = 2;
LABEL_13:
    *(void *)(a6 + 8) = 0;
    return;
  }
  if (!v13)
  {
    *(_DWORD *)(a6 + 16) = 0;
    int v16 = 3;
    goto LABEL_12;
  }
  int v14 = v13;
  if (fread(v13, 1uLL, v12, a1) != v12)
  {
    *(_DWORD *)(a6 + 16) = 0;
    int v16 = 2;
    goto LABEL_12;
  }
  if (buffer_encoding == 1) {
    *((unsigned char *)v14 + v12++) = 0;
  }
}

uint64_t pugi::xml_document::save(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  unsigned int v5 = v4;
  char v6 = v3;
  __s = v7;
  uint64_t v8 = (uint64_t *)v2;
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v36 = v9;
  unint64_t v37 = 0;
  unsigned int v10 = v4;
  if (v4 <= 8)
  {
    unsigned int v10 = v4;
    if ((0x191u >> v4)) {
      unsigned int v10 = dword_23F7CD168[v4];
    }
  }
  unsigned int v38 = v10;
  if ((v3 & 2) != 0 && v4 != 9)
  {
    *(_WORD *)uint64_t v35 = -17425;
    v35[2] = -65;
    unint64_t v37 = 3;
  }
  if ((v3 & 8) == 0)
  {
    for (uint64_t i = *(void *)(*(void *)v2 + 32); i; uint64_t i = *(void *)(i + 48))
    {
      if ((*(_DWORD *)i & 0xF) == 2) {
        break;
      }
      if ((*(_DWORD *)i & 0xF) == 7) {
        goto LABEL_20;
      }
    }
    if (v5 == 9) {
    unint64_t v12 = v37;
    }
    if (v37 >= 0x7FF)
    {
      unint64_t v12 = 0;
    }
    *(_WORD *)&v35[v12] = 15935;
    unint64_t v13 = v12 + 2;
    unint64_t v37 = v12 + 2;
    if ((v6 & 4) == 0)
    {
      if (v12 >= 0x7FE)
      {
        unint64_t v13 = 0;
      }
      v35[v13] = 10;
      unint64_t v37 = v13 + 1;
    }
  }
LABEL_20:
  size_t v14 = 0;
  uint64_t v15 = *v8;
  if ((v6 & 0x41) != 0 && (v6 & 4) == 0) {
    size_t v14 = strlen(__s);
  }
  int v16 = 0;
  char v17 = 2;
  uint64_t v18 = v15;
  do
  {
    if ((*(_DWORD *)v18 & 0xFu) - 3 <= 1)
    {
      char v17 = 0;
      goto LABEL_80;
    }
    if (v6 & 4) == 0 && (v17)
    {
      unint64_t v19 = v37;
      if (v37 >= 0x800)
      {
        unint64_t v19 = 0;
      }
      v35[v19] = 10;
      unint64_t v37 = v19 + 1;
    }
    if ((v17 & 2) != 0 && v14) {
    if ((*(_DWORD *)v18 & 0xF) == 1)
    }
    {
      uint64_t v24 = *(void *)(v18 + 32);
      char v17 = 2;
      if (v24) {
        goto LABEL_59;
      }
      do
      {
LABEL_80:
        if (v18 == v15) {
          goto LABEL_94;
        }
        uint64_t v24 = *(void *)(v18 + 48);
        if (v24) {
          goto LABEL_59;
        }
        uint64_t v18 = *(void *)(v18 + 24);
      }
      while ((*(void *)v18 & 0xFLL) != 2);
      if (v6 & 4) == 0 && (v17)
      {
        unint64_t v31 = v37;
        if (v37 >= 0x800)
        {
          unint64_t v31 = 0;
        }
        v35[v31] = 10;
        unint64_t v37 = v31 + 1;
      }
      --v16;
      if ((v17 & 2) != 0 && v14) {
      if (*(void *)(v18 + 8))
      }
        unint64_t v20 = *(const char **)(v18 + 8);
      else {
        unint64_t v20 = ":anonymous";
      }
LABEL_72:
      unint64_t v29 = v37;
      if (v37 >= 0x7FF)
      {
        unint64_t v29 = 0;
      }
      *(_WORD *)&v35[v29] = 12092;
      unint64_t v28 = v29 + 2;
      goto LABEL_75;
    }
    if ((*(_DWORD *)v18 & 0xF) != 2)
    {
      goto LABEL_79;
    }
    if (*(void *)(v18 + 8)) {
      unint64_t v20 = *(const char **)(v18 + 8);
    }
    else {
      unint64_t v20 = ":anonymous";
    }
    unint64_t v21 = v37;
    if (v37 >= 0x800)
    {
      unint64_t v21 = 0;
    }
    v35[v21] = 60;
    unint64_t v37 = v21 + 1;
    int v22 = *(void **)(v18 + 56);
    if (v22) {
    if (*(void *)(v18 + 16))
    }
    {
      unint64_t v23 = v37;
      if (v37 >= 0x800)
      {
        unint64_t v23 = 0;
      }
      v35[v23] = 62;
      unint64_t v37 = v23 + 1;
      uint64_t v24 = *(void *)(v18 + 32);
      if (!v24) {
        goto LABEL_72;
      }
      goto LABEL_55;
    }
    unint64_t v25 = v37;
    if (!*(void *)(v18 + 32))
    {
      if ((v6 & 0x80) == 0)
      {
        if ((v6 & 4) == 0)
        {
          if (v37 >= 0x800)
          {
            unint64_t v25 = 0;
          }
          v35[v25++] = 32;
          unint64_t v37 = v25;
        }
        if (v25 >= 0x7FF)
        {
          unint64_t v25 = 0;
        }
        *(_WORD *)&v35[v25] = 15919;
        unint64_t v26 = v25 + 2;
LABEL_78:
        unint64_t v37 = v26;
LABEL_79:
        char v17 = 3;
        goto LABEL_80;
      }
      if (v37 >= 0x7FE)
      {
        unint64_t v25 = 0;
      }
      uint64_t v27 = &v35[v25];
      *(_WORD *)uint64_t v27 = 15422;
      v27[2] = 47;
      unint64_t v28 = v25 + 3;
LABEL_75:
      unint64_t v37 = v28;
      unint64_t v30 = v37;
      if (v37 >= 0x800)
      {
        unint64_t v30 = 0;
      }
      v35[v30] = 62;
      unint64_t v26 = v30 + 1;
      goto LABEL_78;
    }
    if (v37 >= 0x800)
    {
      unint64_t v25 = 0;
    }
    v35[v25] = 62;
    unint64_t v37 = v25 + 1;
    uint64_t v24 = *(void *)(v18 + 32);
LABEL_55:
    if (*(void *)(v18 + 16)) {
      char v17 = 0;
    }
    else {
      char v17 = 3;
    }
    ++v16;
LABEL_59:
    uint64_t v18 = v24;
  }
  while (v24 != v15);
LABEL_94:
  unint64_t v32 = v37;
  if (v6 & 4) == 0 && (v17)
  {
    if (v37 >= 0x800)
    {
      unint64_t v32 = 0;
    }
    v35[v32++] = 10;
    unint64_t v37 = v32;
  }
}

unint64_t *pugi::impl::anonymous namespace'::xml_buffered_writer::write_string(unint64_t *this, const char *__s)
{
  uint64_t v2 = (pugi::impl::_anonymous_namespace_::xml_buffered_writer *)this;
  unint64_t v3 = this[1281];
  LOBYTE(v4) = *__s;
  BOOL v5 = v3 < 0x800;
  if (*__s && v3 <= 0x7FF)
  {
    do
    {
      unint64_t v6 = v3;
      *((unsigned char *)this + v3) = v4;
      int v7 = *(unsigned __int8 *)++__s;
      int v4 = v7;
      BOOL v5 = v3++ < 0x7FF;
    }
    while (v6 <= 0x7FE && v4);
  }
  if (v5)
  {
    this[1281] = v3;
  }
  else
  {
    unint64_t v9 = v3 - this[1281];
    if (v9 >= 5)
    {
      uint64_t v11 = -1;
      while ((__s[v11] & 0xC0) == 0x80)
      {
        if (--v11 == -5)
        {
          unint64_t v10 = v3 - this[1281];
          goto LABEL_17;
        }
      }
      unint64_t v10 = v9 + v11;
    }
    else
    {
      unint64_t v10 = 0;
    }
LABEL_17:
    this[1281] += v10;
    unint64_t v12 = &__s[-(v9 - v10)];
    size_t v13 = strlen(__s) + v9 - v10;
  }
  return this;
}

void pugi::xml_writer_stream::~xml_writer_stream(pugi::xml_writer_stream *this)
{
}

char *pugi::impl::anonymous namespace'::append_new_node(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5 = a2[1];
  if ((unint64_t)(v5 + 64) > 0x7FD8)
  {
    uint64_t v11 = 0;
    if (!result) {
      return result;
    }
    uint64_t v6 = v11;
  }
  else
  {
    uint64_t v6 = *a2;
    uint64_t result = (char *)(*a2 + v5 + 40);
    a2[1] = v5 + 64;
  }
  *((void *)result + 7) = 0;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(void *)uint64_t result = a3 | ((void)&result[-v6] << 8);
  *((void *)result + 3) = a1;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t v10 = *(void *)(v8 + 40);
    unint64_t v9 = (char **)(v8 + 40);
    *(void *)(v10 + 48) = result;
    *((void *)result + 5) = v10;
  }
  else
  {
    *(void *)(a1 + 32) = result;
    unint64_t v9 = (char **)(result + 40);
  }
  uint64_t *v9 = result;
  return result;
}

char *pugi::impl::anonymous namespace'::append_new_attribute(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  if ((unint64_t)(v3 + 40) > 0x7FD8)
  {
    uint64_t v9 = 0;
    if (!result) {
      return result;
    }
    uint64_t v4 = v9;
  }
  else
  {
    uint64_t v4 = *a2;
    uint64_t result = (char *)(*a2 + v3 + 40);
    a2[1] = v3 + 40;
  }
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(void *)uint64_t result = (void)&result[-v4] << 8;
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 24);
    int v7 = (char **)(v6 + 24);
    *(void *)(v8 + 32) = result;
    *((void *)result + 3) = v8;
  }
  else
  {
    *(void *)(a1 + 56) = result;
    int v7 = (char **)(result + 24);
  }
  *int v7 = result;
  return result;
}

void pugi::impl::anonymous namespace'::xml_allocator::deallocate_memory(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void **)a1 == a3)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    a3[3] = v3;
  }
  else
  {
    uint64_t v3 = a3[3];
  }
  uint64_t v4 = a3[4] + a2;
  a3[4] = v4;
  if (v4 == v3)
  {
    uint64_t v5 = a3[2];
    if (v5)
    {
      uint64_t v6 = a3[1];
      *(void *)(v6 + 16) = v5;
      *(void *)(a3[2] + 8) = v6;
    }
    else
    {
      a3[3] = 0;
      a3[4] = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
}

char *pugi::impl::anonymous namespace'::xml_allocator::allocate_memory_oob(uint64_t a1, unint64_t a2, void *a3)
{
  if (a2 >= 0x1FF7) {
    uint64_t v6 = a2 + 40;
  }
  else {
    uint64_t v6 = 0x8000;
  }
  if (result)
  {
    *((void *)result + 4) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *(void *)uint64_t result = **(void **)a1;
    *a3 = result;
    if (a2 > 0x1FF6)
    {
      uint64_t v11 = *(void **)a1;
      *((void *)result + 1) = *(void *)(*(void *)a1 + 8);
      *((void *)result + 2) = v11;
      *(void *)(v11[1] + 16) = result;
      v11[1] = result;
      uint64_t v8 = (unint64_t *)(result + 24);
    }
    else
    {
      uint64_t v8 = (unint64_t *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = *(void **)a1;
      *((void *)result + 1) = *(void *)a1;
      void v10[2] = result;
      v10[3] = v9;
      *(void *)a1 = result;
    }
    *uint64_t v8 = a2;
    result += 40;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t pugi::impl::anonymous namespace'::get_buffer_encoding(uint64_t result, unsigned __int8 *a2, unint64_t a3)
{
  switch((int)result)
  {
    case 0:
      if (a3 < 4) {
        return 1;
      }
      int v3 = *a2;
      int v4 = a2[1];
      int v5 = a2[2];
      int v6 = a2[3];
      BOOL v7 = (v3 | v4) == 0;
      if (!(v3 | v4) && v5 == 254 && v6 == 255) {
        return 6;
      }
      BOOL v9 = v3 == 255 && v4 == 254;
      if (v9 && v5 == 0 && v6 == 0) {
        return 5;
      }
      BOOL v12 = v3 == 254 && v4 == 255 || v9;
      if (v3 == 254 && v4 == 255) {
        uint64_t result = 3;
      }
      else {
        uint64_t result = 2;
      }
      if (v12) {
        return result;
      }
      if (v3 == 239 && v4 == 187 && v5 == 191) {
        return 1;
      }
      if (a2[2]) {
        BOOL v7 = 0;
      }
      if (v7 && v6 == 60) {
        return 6;
      }
      BOOL v13 = v3 == 60 && v4 == 0;
      char v14 = v13;
      if (v13 && !a2[2] && !a2[3]) {
        return 5;
      }
      if (*a2) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v4 == 60;
      }
      int v16 = v15;
      if (v15 && !a2[2] && v6 == 63) {
        return 3;
      }
      if (v5 == 63) {
        char v17 = v14;
      }
      else {
        char v17 = 0;
      }
      char v18 = v14 | v16;
      if (v16) {
        unsigned int v19 = 3;
      }
      else {
        unsigned int v19 = 2;
      }
      if ((v17 & (v6 == 0)) != 0) {
        uint64_t result = 2;
      }
      else {
        uint64_t result = v19;
      }
      if (v18) {
        return result;
      }
      if (a3 < 6 {
        || v3 != 60
      }
        || v4 != 63
        || v5 != 120
        || v6 != 109
        || a2[4] != 108
        || a3 < 8
      {
        return 1;
      }
      unint64_t v20 = a2 + 13;
      unint64_t v21 = 14;
      break;
    case 4:
      return 2;
    case 7:
    case 8:
      return 5;
    default:
      return result;
  }
  while (1)
  {
    int v22 = v20[v21 - 21];
    if (v22 != 101)
    {
      if (v22 == 63) {
        return 1;
      }
      goto LABEL_79;
    }
    if (v20[v21 - 20] == 110) {
      break;
    }
LABEL_79:
    ++v21;
    if (7 - a3 + v21 == 14) {
      return 1;
    }
  }
  if (v21 - 8 < a3
    && v21 - 6 < a3
    && a2[v21 - 6] == 99
    && v21 - 5 < a3
    && a2[v21 - 5] == 111
    && v21 - 4 < a3
    && a2[v21 - 4] == 100
    && v21 - 3 < a3
    && a2[v21 - 3] == 105
    && v21 - 2 < a3
    && a2[v21 - 2] == 110
    && v21 - 1 < a3
    && a2[v21 - 1] == 103
    && v21 < a3)
  {
    while (1)
    {
      uint64_t v23 = a2[v21];
        break;
      if (a3 == ++v21) {
        return 1;
      }
    }
    if (v23 == 61)
    {
      unint64_t v24 = v21 - 14;
      while (v24 + 15 < a3)
      {
        uint64_t v25 = a2[v24++ + 15];
        {
          if (v25 == 34) {
            int v26 = 34;
          }
          else {
            int v26 = 39;
          }
          unint64_t v27 = v24 + 15;
          if (v26 != v25 || v27 >= a3) {
            return 1;
          }
          uint64_t v29 = 0;
          unint64_t v30 = &a2[v24 + 15];
          unint64_t v31 = a2 + 15;
          while (1)
          {
            int v33 = *v30++;
            int v32 = v33;
              break;
            ++v27;
            ++v29;
            if (v27 >= a3) {
              return 1;
            }
          }
          if (v26 != v32) {
            return 1;
          }
          if (v29 == 6)
          {
            if ((v31[v24] & 0xDF) != 0x4C
              || (a2[v24 + 16] & 0xDF) != 0x41
              || (a2[v24 + 17] & 0xDF) != 0x54
              || (a2[v24 + 18] & 0xDF) != 0x49
              || (a2[v24 + 19] & 0xDF) != 0x4E)
            {
              return 1;
            }
            int v34 = a2[v24 + 20];
          }
          else
          {
            if (v29 != 10
              || (v31[v24] & 0xDF) != 0x49
              || (a2[v24 + 16] & 0xDF) != 0x53
              || (a2[v24 + 17] & 0xDF) != 0x4F
              || a2[v24 + 18] != 45
              || a2[v24 + 19] != 56
              || a2[v24 + 20] != 56
              || a2[v24 + 21] != 53
              || a2[v24 + 22] != 57
              || a2[v24 + 23] != 45)
            {
              return 1;
            }
            int v34 = a2[v24 + 24];
          }
          if (v34 != 49) {
            return 1;
          }
          return 9;
        }
      }
    }
  }
  return 1;
}

uint64_t pugi::impl::anonymous namespace'::utf8_writer::low(pugi::impl::_anonymous_namespace_::utf8_writer *this, unsigned __int8 *a2)
{
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      *(unsigned char *)this = (a2 >> 12) | 0xE0;
      *((unsigned char *)this + 1) = (a2 >> 6) & 0x3F | 0x80;
      *((unsigned char *)this + 2) = a2 & 0x3F | 0x80;
      uint64_t v2 = 3;
    }
    else
    {
      *(unsigned char *)this = (a2 >> 6) | 0xC0;
      *((unsigned char *)this + 1) = a2 & 0x3F | 0x80;
      uint64_t v2 = 2;
    }
  }
  else
  {
    *(unsigned char *)this = (_BYTE)a2;
    uint64_t v2 = 1;
  }
  return (uint64_t)this + v2;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_attribute_impl<pugi::impl::anonymous namespace'::opt_false>::parse_simple(unsigned __int8 *a1, unsigned __int8 a2)
{
  while (1)
  {
    do
    {
      int v2 = *a1;
        goto LABEL_6;
      int v3 = a1 + 1;
      int v2 = a1[1];
        break;
      int v3 = a1 + 2;
      int v2 = a1[2];
        break;
      int v3 = a1 + 3;
      int v2 = a1[3];
      a1 += 4;
    }
    while ((v4 & 2) == 0);
    a1 = v3;
LABEL_6:
    if (v2 == a2)
    {
      *a1 = 0;
      return a1 + 1;
    }
    if (!v2) {
      return 0;
    }
    ++a1;
  }
}

uint64_t pugi::impl::anonymous namespace'::strconv_attribute_impl<pugi::impl::anonymous namespace'::opt_true>::parse_simple(pugi::impl::_anonymous_namespace_::utf8_writer *this, unsigned __int8 a2)
{
  int v3 = a2;
  __src = 0;
  uint64_t v11 = 0;
  while (1)
  {
    do
    {
      int v4 = *(unsigned __int8 *)this;
        goto LABEL_7;
      int v5 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 1);
      int v4 = *((unsigned __int8 *)this + 1);
        break;
      int v5 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 2);
      int v4 = *((unsigned __int8 *)this + 2);
        break;
      int v5 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 3);
      int v4 = *((unsigned __int8 *)this + 3);
      this = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 4);
    }
    while ((v6 & 2) == 0);
    this = v5;
LABEL_7:
    if (v4 == v3) {
      break;
    }
    if (v4 == 38)
    {
    }
    else
    {
      if (!v4) {
        return 0;
      }
      this = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 1);
    }
  }
  BOOL v7 = this;
  if (__src)
  {
    uint64_t v8 = v11;
    memmove((char *)__src - v11, __src, this - (pugi::impl::_anonymous_namespace_::utf8_writer *)__src);
    BOOL v7 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this - v8);
  }
  *(unsigned char *)BOOL v7 = 0;
  return (uint64_t)this + 1;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_attribute_impl<pugi::impl::anonymous namespace'::opt_false>::parse_eol(unsigned __int8 *a1, unsigned __int8 a2)
{
  int v3 = 0;
  uint64_t v4 = 0;
  int v5 = a2;
  while (1)
  {
    int v6 = *a1;
    {
      BOOL v7 = a1;
    }
    else
    {
      BOOL v7 = a1 + 2;
      while (1)
      {
        int v6 = *(v7 - 1);
        {
          --v7;
          goto LABEL_11;
        }
        int v6 = *v7;
          goto LABEL_11;
        int v6 = v7[1];
          break;
        int v6 = v7[2];
        v7 += 4;
        if ((v8 & 2) != 0)
        {
          v7 -= 2;
          goto LABEL_11;
        }
      }
      ++v7;
    }
LABEL_11:
    if (v6 == v5) {
      break;
    }
    if (v6 == 13)
    {
      a1 = v7 + 1;
      int v9 = v7[1];
      *BOOL v7 = 10;
      if (v9 == 10)
      {
        if (v3) {
          memmove(&v3[-v4], v3, a1 - (unsigned __int8 *)v3);
        }
        a1 = v7 + 2;
        ++v4;
        int v3 = (char *)(v7 + 2);
      }
    }
    else
    {
      if (!v6) {
        return 0;
      }
      a1 = v7 + 1;
    }
  }
  uint64_t v10 = v7;
  if (v3)
  {
    memmove(&v3[-v4], v3, v7 - (unsigned __int8 *)v3);
    uint64_t v10 = &v7[-v4];
  }
  unsigned __int8 *v10 = 0;
  return v7 + 1;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_attribute_impl<pugi::impl::anonymous namespace'::opt_true>::parse_eol(char *a1, unsigned __int8 a2)
{
  int v2 = a2;
  __src = 0;
  uint64_t v12 = 0;
  while (1)
  {
    int v3 = *a1;
    {
      uint64_t v4 = (unsigned __int8 *)a1;
    }
    else
    {
      uint64_t v4 = (unsigned __int8 *)(a1 + 2);
      while (1)
      {
        int v3 = *(v4 - 1);
        {
          --v4;
          goto LABEL_11;
        }
        int v3 = *v4;
          goto LABEL_11;
        int v3 = v4[1];
          break;
        int v3 = v4[2];
        v4 += 4;
        if ((v5 & 2) != 0)
        {
          v4 -= 2;
          goto LABEL_11;
        }
      }
      ++v4;
    }
LABEL_11:
    if (v3 == v2) {
      break;
    }
    switch(v3)
    {
      case 13:
        a1 = (char *)(v4 + 1);
        int v6 = v4[1];
        *uint64_t v4 = 10;
        if (v6 == 10)
        {
          uint64_t v7 = v12;
          if (__src) {
            memmove((char *)__src - v12, __src, a1 - (unsigned char *)__src);
          }
          a1 = (char *)(v4 + 2);
          __src = v4 + 2;
          uint64_t v12 = v7 + 1;
        }
        break;
      case 38:
        break;
      case 0:
        return 0;
      default:
        a1 = (char *)(v4 + 1);
        break;
    }
  }
  char v8 = v4;
  if (__src)
  {
    uint64_t v9 = v12;
    memmove((char *)__src - v12, __src, v4 - (unsigned char *)__src);
    char v8 = &v4[-v9];
  }
  *char v8 = 0;
  return v4 + 1;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_attribute_impl<pugi::impl::anonymous namespace'::opt_false>::parse_wconv(unsigned __int8 *a1, unsigned __int8 a2)
{
  int v3 = 0;
  uint64_t v4 = 0;
  int v5 = a2;
  while (1)
  {
    int v6 = *a1;
    if ((v7 & 4) != 0)
    {
      char v8 = a1;
    }
    else
    {
      char v8 = a1 + 2;
      while (1)
      {
        int v6 = *(v8 - 1);
        if ((v7 & 4) != 0)
        {
          --v8;
          goto LABEL_11;
        }
        int v6 = *v8;
        if ((v7 & 4) != 0) {
          goto LABEL_11;
        }
        int v6 = v8[1];
        if ((v7 & 4) != 0) {
          break;
        }
        int v6 = v8[2];
        v8 += 4;
        if ((v7 & 4) != 0)
        {
          v8 -= 2;
          goto LABEL_11;
        }
      }
      ++v8;
    }
LABEL_11:
    if (v6 == v5) {
      break;
    }
    if ((v7 & 8) != 0)
    {
      *char v8 = 32;
      a1 = v8 + 1;
      if (v6 == 13 && *a1 == 10)
      {
        if (v3) {
          memmove(&v3[-v4], v3, a1 - (unsigned __int8 *)v3);
        }
        a1 = v8 + 2;
        ++v4;
        int v3 = (char *)(v8 + 2);
      }
    }
    else
    {
      if (!v6) {
        return 0;
      }
      a1 = v8 + 1;
    }
  }
  uint64_t v9 = v8;
  if (v3)
  {
    memmove(&v3[-v4], v3, v8 - (unsigned __int8 *)v3);
    uint64_t v9 = &v8[-v4];
  }
  unsigned __int8 *v9 = 0;
  return v8 + 1;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_attribute_impl<pugi::impl::anonymous namespace'::opt_true>::parse_wconv(char *a1, unsigned __int8 a2)
{
  int v2 = a2;
  __src = 0;
  uint64_t v11 = 0;
  while (1)
  {
    int v3 = *a1;
    if ((v4 & 4) != 0)
    {
      int v5 = (unsigned __int8 *)a1;
    }
    else
    {
      int v5 = (unsigned __int8 *)(a1 + 2);
      while (1)
      {
        int v3 = *(v5 - 1);
        if ((v4 & 4) != 0)
        {
          --v5;
          goto LABEL_11;
        }
        int v3 = *v5;
        if ((v4 & 4) != 0) {
          goto LABEL_11;
        }
        int v3 = v5[1];
        if ((v4 & 4) != 0) {
          break;
        }
        int v3 = v5[2];
        v5 += 4;
        if ((v4 & 4) != 0)
        {
          v5 -= 2;
          goto LABEL_11;
        }
      }
      ++v5;
    }
LABEL_11:
    if (v3 == v2) {
      break;
    }
    if ((v4 & 8) != 0)
    {
      *int v5 = 32;
      a1 = (char *)(v5 + 1);
      if (v3 == 13 && *a1 == 10)
      {
        uint64_t v6 = v11;
        if (__src) {
          memmove((char *)__src - v11, __src, a1 - (unsigned char *)__src);
        }
        a1 = (char *)(v5 + 2);
        __src = v5 + 2;
        uint64_t v11 = v6 + 1;
      }
    }
    else if (v3 == 38)
    {
    }
    else
    {
      if (!v3) {
        return 0;
      }
      a1 = (char *)(v5 + 1);
    }
  }
  char v7 = v5;
  if (__src)
  {
    uint64_t v8 = v11;
    memmove((char *)__src - v11, __src, v5 - (unsigned char *)__src);
    char v7 = &v5[-v8];
  }
  *char v7 = 0;
  return v5 + 1;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_attribute_impl<pugi::impl::anonymous namespace'::opt_false>::parse_wnorm(unsigned __int8 *a1, unsigned __int8 a2)
{
  int v2 = a1;
  {
    uint64_t v4 = 0;
    do
    while ((v5 & 8) != 0);
    int v2 = &a1[v4];
    int v3 = &a1[v4];
  }
  else
  {
    int v3 = 0;
    uint64_t v4 = 0;
  }
  int v6 = a2;
LABEL_7:
  uint64_t v7 = v4;
  uint64_t v8 = v3;
  uint64_t v9 = v2;
  while (1)
  {
    int v10 = *v9;
    if ((v11 & 0xC) != 0)
    {
      uint64_t v12 = v9;
    }
    else
    {
      uint64_t v12 = v9 + 2;
      while (1)
      {
        int v10 = *(v12 - 1);
        if ((v11 & 0xC) != 0)
        {
          --v12;
          goto LABEL_17;
        }
        int v10 = *v12;
        if ((v11 & 0xC) != 0) {
          goto LABEL_17;
        }
        int v10 = v12[1];
        if ((v11 & 0xC) != 0) {
          break;
        }
        int v10 = v12[2];
        v12 += 4;
        if ((v11 & 0xC) != 0)
        {
          v12 -= 2;
          goto LABEL_17;
        }
      }
      ++v12;
    }
LABEL_17:
    if (v10 == v6) {
      break;
    }
    if ((v11 & 8) != 0)
    {
      uint64_t v9 = v12 + 1;
      uint64_t v13 = v12[1];
      *uint64_t v12 = 32;
      {
        int v2 = v12 + 1;
        do
        {
          int v14 = *++v2;
          ++v4;
        }
        int v3 = v2;
        if (v8)
        {
          memmove(&v8[-v7], v8, v9 - v8);
          int v3 = v2;
        }
        goto LABEL_7;
      }
    }
    else
    {
      if (!v10) {
        return 0;
      }
      uint64_t v9 = v12 + 1;
    }
  }
  BOOL v15 = v12;
  if (v8)
  {
    memmove(&v8[-v4], v8, v12 - v8);
    BOOL v15 = &v12[-v4];
  }
  int v16 = v15;
  do
  {
    int v17 = *--v16;
    unsigned __int8 *v15 = 0;
    BOOL v15 = v16;
  }
  return v12 + 1;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_attribute_impl<pugi::impl::anonymous namespace'::opt_true>::parse_wnorm(char *a1, unsigned __int8 a2)
{
  __src = 0;
  uint64_t v18 = 0;
  {
    uint64_t v2 = 0;
    do
    while ((v3 & 8) != 0);
    a1 += v2;
    __src = a1;
    uint64_t v18 = v2;
  }
  int v4 = a2;
  while (1)
  {
    int v5 = *a1;
    if ((v6 & 0xC) != 0)
    {
      uint64_t v7 = (unsigned __int8 *)a1;
    }
    else
    {
      uint64_t v7 = (unsigned __int8 *)(a1 + 2);
      while (1)
      {
        int v5 = *(v7 - 1);
        if ((v6 & 0xC) != 0)
        {
          --v7;
          goto LABEL_15;
        }
        int v5 = *v7;
        if ((v6 & 0xC) != 0) {
          goto LABEL_15;
        }
        int v5 = v7[1];
        if ((v6 & 0xC) != 0) {
          break;
        }
        int v5 = v7[2];
        v7 += 4;
        if ((v6 & 0xC) != 0)
        {
          v7 -= 2;
          goto LABEL_15;
        }
      }
      ++v7;
    }
LABEL_15:
    if (v5 == v4) {
      break;
    }
    if ((v6 & 8) != 0)
    {
      a1 = (char *)(v7 + 1);
      uint64_t v8 = v7[1];
      *uint64_t v7 = 32;
      {
        uint64_t v9 = 0;
        do
        while ((v10 & 8) != 0);
        uint64_t v11 = v18;
        if (__src) {
          memmove((char *)__src - v18, __src, a1 - (unsigned char *)__src);
        }
        a1 = (char *)&v7[v9 + 1];
        __src = a1;
        uint64_t v18 = v11 + v9;
      }
    }
    else if (v5 == 38)
    {
    }
    else
    {
      if (!v5) {
        return 0;
      }
      a1 = (char *)(v7 + 1);
    }
  }
  uint64_t v12 = v7;
  if (__src)
  {
    uint64_t v13 = v18;
    memmove((char *)__src - v18, __src, v7 - (unsigned char *)__src);
    uint64_t v12 = &v7[-v13];
  }
  int v14 = v12;
  do
  {
    int v15 = *--v14;
    *uint64_t v12 = 0;
    uint64_t v12 = v14;
  }
  return v7 + 1;
}

char *pugi::impl::anonymous namespace'::strconv_escape(pugi::impl::_anonymous_namespace_::utf8_writer *this, const void **a2)
{
  char v3 = (char *)this + 1;
  int v4 = *((char *)this + 1);
  int v5 = (char *)this + 1;
  if (v4 > 102)
  {
    if (v4 == 103)
    {
      int v5 = (char *)this + 2;
      if (*((unsigned char *)this + 2) != 116) {
        return v5;
      }
      int v5 = (char *)this + 3;
      if (*((unsigned char *)this + 3) != 59) {
        return v5;
      }
      char v11 = 62;
    }
    else
    {
      if (v4 != 108)
      {
        if (v4 == 113)
        {
          int v5 = (char *)this + 2;
          if (*((unsigned char *)this + 2) == 117)
          {
            int v5 = (char *)this + 3;
            if (*((unsigned char *)this + 3) == 111)
            {
              int v5 = (char *)this + 4;
              if (*((unsigned char *)this + 4) == 116)
              {
                int v5 = (char *)this + 5;
                if (*((unsigned char *)this + 5) == 59)
                {
                  char v6 = 34;
LABEL_43:
                  *(unsigned char *)this = v6;
                  uint64_t v8 = (char *)this + 6;
                  unsigned int v19 = (char *)*a2;
                  if (*a2) {
                    memmove((void *)(v19 - (unsigned char *)a2[1]), v19, v3 - v19);
                  }
                  uint64_t v10 = 5;
LABEL_28:
                  int v5 = v8;
LABEL_29:
                  uint64_t v13 = (uint64_t)a2[1] + v10;
                  *a2 = v8;
                  a2[1] = (const void *)v13;
                  return v5;
                }
              }
            }
          }
        }
        return v5;
      }
      int v5 = (char *)this + 2;
      if (*((unsigned char *)this + 2) != 116) {
        return v5;
      }
      int v5 = (char *)this + 3;
      if (*((unsigned char *)this + 3) != 59) {
        return v5;
      }
      char v11 = 60;
    }
    *(unsigned char *)this = v11;
    uint64_t v8 = (char *)this + 4;
    uint64_t v12 = (char *)*a2;
    if (*a2) {
      memmove((void *)(v12 - (unsigned char *)a2[1]), v12, v3 - v12);
    }
    uint64_t v10 = 3;
    goto LABEL_28;
  }
  if (v4 == 35)
  {
    int v5 = (char *)this + 2;
    int v14 = *((unsigned __int8 *)this + 2);
    if (v14 == 59) {
      return v5;
    }
    if (v14 == 120)
    {
      int v5 = (char *)this + 3;
      int v15 = *((unsigned __int8 *)this + 3);
      if (v15 != 59)
      {
        int v16 = 0;
        while (1)
        {
          int v15 = (char)v15;
          unsigned int v17 = (char)v15 - 48;
          if (v17 > 9)
          {
            if (((char)v15 | 0x20u) - 97 > 5) {
              goto LABEL_50;
            }
            int v16 = (unsigned __int8 *)(((char)v15 | 0x20u) + 16 * v16 - 87);
          }
          else
          {
            int v16 = (unsigned __int8 *)(v17 + 16 * v16);
          }
          char v18 = *++v5;
          LOBYTE(v15) = v18;
        }
      }
    }
    else
    {
      unsigned int v20 = (char)v14 - 48;
      if (v20 <= 9)
      {
        LODWORD(v16) = 0;
        do
        {
          int v16 = (unsigned __int8 *)(v20 + 10 * v16);
          int v22 = *++v5;
          unsigned __int8 v21 = v22;
          unsigned int v20 = v22 - 48;
        }
        while ((v22 - 48) < 0xA);
        int v15 = v21;
LABEL_50:
        if (v15 == 59)
        {
          ++v5;
          if (v16 >> 16)
          {
            *(unsigned char *)this = (v16 >> 18) | 0xF0;
            *((unsigned char *)this + 1) = (v16 >> 12) & 0x3F | 0x80;
            *((unsigned char *)this + 2) = (v16 >> 6) & 0x3F | 0x80;
            *((unsigned char *)this + 3) = v16 & 0x3F | 0x80;
            uint64_t v23 = (char *)this + 4;
          }
          else
          {
          }
          uint64_t v10 = v5 - v23;
          if (*a2) {
            memmove((void *)((unsigned char *)*a2 - (unsigned char *)a2[1]), *a2, v23 - (unsigned char *)*a2);
          }
          uint64_t v8 = v5;
          goto LABEL_29;
        }
      }
    }
  }
  else if (v4 == 97)
  {
    int v5 = (char *)this + 2;
    int v7 = *((unsigned __int8 *)this + 2);
    if (v7 == 112)
    {
      int v5 = (char *)this + 3;
      if (*((unsigned char *)this + 3) == 111)
      {
        int v5 = (char *)this + 4;
        if (*((unsigned char *)this + 4) == 115)
        {
          int v5 = (char *)this + 5;
          if (*((unsigned char *)this + 5) == 59)
          {
            char v6 = 39;
            goto LABEL_43;
          }
        }
      }
    }
    else if (v7 == 109)
    {
      int v5 = (char *)this + 3;
      if (*((unsigned char *)this + 3) == 112)
      {
        int v5 = (char *)this + 4;
        if (*((unsigned char *)this + 4) == 59)
        {
          *(unsigned char *)this = 38;
          uint64_t v8 = (char *)this + 5;
          uint64_t v9 = (char *)*a2;
          if (*a2) {
            memmove((void *)(v9 - (unsigned char *)a2[1]), v9, v3 - v9);
          }
          uint64_t v10 = 4;
          goto LABEL_28;
        }
      }
    }
  }
  return v5;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_pcdata_impl<pugi::impl::anonymous namespace'::opt_false,pugi::impl::anonymous namespace'::opt_false,pugi::impl::anonymous namespace'::opt_false>::parse(unsigned __int8 *result)
{
  while (1)
  {
    do
    {
      uint64_t v1 = *result;
        goto LABEL_6;
      uint64_t v2 = result + 1;
      uint64_t v1 = result[1];
        break;
      uint64_t v2 = result + 2;
      uint64_t v1 = result[2];
        break;
      uint64_t v2 = result + 3;
      uint64_t v1 = result[3];
      result += 4;
    }
    uint64_t result = v2;
LABEL_6:
    if (!v1)
    {
      char *result = 0;
      return result;
    }
    if (v1 == 60) {
      break;
    }
    ++result;
  }
  *result++ = 0;
  return result;
}

pugi::impl::_anonymous_namespace_::utf8_writer *pugi::impl::anonymous namespace'::strconv_pcdata_impl<pugi::impl::anonymous namespace'::opt_false,pugi::impl::anonymous namespace'::opt_false,pugi::impl::anonymous namespace'::opt_true>::parse(pugi::impl::_anonymous_namespace_::utf8_writer *this)
{
  __src = 0;
  uint64_t v10 = 0;
  while (1)
  {
    while (1)
    {
      do
      {
        uint64_t v2 = *(unsigned __int8 *)this;
          goto LABEL_7;
        char v3 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 1);
        uint64_t v2 = *((unsigned __int8 *)this + 1);
          break;
        char v3 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 2);
        uint64_t v2 = *((unsigned __int8 *)this + 2);
          break;
        char v3 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 3);
        uint64_t v2 = *((unsigned __int8 *)this + 3);
        this = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 4);
      }
      this = v3;
LABEL_7:
      if (v2 != 38) {
        break;
      }
    }
    if (!v2) {
      break;
    }
    if (v2 == 60)
    {
      char v6 = this;
      if (__src)
      {
        uint64_t v7 = v10;
        memmove((char *)__src - v10, __src, this - (pugi::impl::_anonymous_namespace_::utf8_writer *)__src);
        char v6 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this - v7);
      }
      *(unsigned char *)char v6 = 0;
      return (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 1);
    }
    this = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 1);
  }
  int v4 = this;
  if (__src)
  {
    uint64_t v5 = v10;
    memmove((char *)__src - v10, __src, this - (pugi::impl::_anonymous_namespace_::utf8_writer *)__src);
    int v4 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this - v5);
  }
  *(unsigned char *)int v4 = 0;
  return this;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_pcdata_impl<pugi::impl::anonymous namespace'::opt_false,pugi::impl::anonymous namespace'::opt_true,pugi::impl::anonymous namespace'::opt_false>::parse(unsigned __int8 *a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v3 = *a1;
      {
        int v4 = a1;
      }
      else
      {
        int v4 = a1 + 2;
        while (1)
        {
          uint64_t v3 = *(v4 - 1);
          {
            --v4;
            goto LABEL_11;
          }
          uint64_t v3 = *v4;
            goto LABEL_11;
          uint64_t v3 = v4[1];
            break;
          uint64_t v3 = v4[2];
          v4 += 4;
          {
            v4 -= 2;
            goto LABEL_11;
          }
        }
        ++v4;
      }
LABEL_11:
      if (v3 != 13) {
        break;
      }
      a1 = v4 + 1;
      int v5 = v4[1];
      *int v4 = 10;
      if (v5 == 10)
      {
        if (v1) {
          memmove(&v1[-v2], v1, a1 - (unsigned __int8 *)v1);
        }
        a1 = v4 + 2;
        ++v2;
        uint64_t v1 = (char *)(v4 + 2);
      }
    }
    if (!v3) {
      break;
    }
    if (v3 == 60)
    {
      uint64_t v7 = v4;
      if (v1)
      {
        memmove(&v1[-v2], v1, v4 - (unsigned __int8 *)v1);
        uint64_t v7 = &v4[-v2];
      }
      *uint64_t v7 = 0;
      return ++v4;
    }
    a1 = v4 + 1;
  }
  char v6 = v4;
  if (v1)
  {
    memmove(&v1[-v2], v1, v4 - (unsigned __int8 *)v1);
    char v6 = &v4[-v2];
  }
  unsigned __int8 *v6 = 0;
  return v4;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_pcdata_impl<pugi::impl::anonymous namespace'::opt_false,pugi::impl::anonymous namespace'::opt_true,pugi::impl::anonymous namespace'::opt_true>::parse(char *a1)
{
  __src = 0;
  uint64_t v11 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v1 = *a1;
      {
        uint64_t v2 = (unsigned __int8 *)a1;
      }
      else
      {
        uint64_t v2 = (unsigned __int8 *)(a1 + 2);
        while (1)
        {
          uint64_t v1 = *(v2 - 1);
          {
            --v2;
            goto LABEL_11;
          }
          uint64_t v1 = *v2;
            goto LABEL_11;
          uint64_t v1 = v2[1];
            break;
          uint64_t v1 = v2[2];
          v2 += 4;
          {
            v2 -= 2;
            goto LABEL_11;
          }
        }
        ++v2;
      }
LABEL_11:
      if ((int)v1 > 37) {
        break;
      }
      if (v1 == 13)
      {
        a1 = (char *)(v2 + 1);
        int v3 = v2[1];
        unsigned __int8 *v2 = 10;
        if (v3 == 10)
        {
          uint64_t v4 = v11;
          if (__src) {
            memmove((char *)__src - v11, __src, a1 - (unsigned char *)__src);
          }
          a1 = (char *)(v2 + 2);
          __src = v2 + 2;
          uint64_t v11 = v4 + 1;
        }
      }
      else
      {
        if (!v1)
        {
          int v5 = v2;
          if (__src)
          {
            uint64_t v6 = v11;
            memmove((char *)__src - v11, __src, v2 - (unsigned char *)__src);
            int v5 = &v2[-v6];
          }
          *int v5 = 0;
          return v2;
        }
LABEL_22:
        a1 = (char *)(v2 + 1);
      }
    }
    if (v1 != 38) {
      break;
    }
  }
  if (v1 != 60) {
    goto LABEL_22;
  }
  uint64_t v7 = v2;
  if (__src)
  {
    uint64_t v8 = v11;
    memmove((char *)__src - v11, __src, v2 - (unsigned char *)__src);
    uint64_t v7 = &v2[-v8];
  }
  *uint64_t v7 = 0;
  return ++v2;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_pcdata_impl<pugi::impl::anonymous namespace'::opt_true,pugi::impl::anonymous namespace'::opt_false,pugi::impl::anonymous namespace'::opt_false>::parse(unsigned __int8 *a1)
{
  for (uint64_t i = a1; ; ++i)
  {
    do
    {
      uint64_t v2 = *i;
        goto LABEL_7;
      int v3 = i + 1;
      uint64_t v2 = i[1];
        break;
      int v3 = i + 2;
      uint64_t v2 = i[2];
        break;
      int v3 = i + 3;
      uint64_t v2 = i[3];
      i += 4;
    }
    uint64_t i = v3;
LABEL_7:
    if (v2 == 60) {
      break;
    }
    if (!v2)
    {
      uint64_t v6 = i;
      do
      {
        uint64_t v7 = v6;
        if (v6 <= a1) {
          break;
        }
        --v6;
      }
      *uint64_t v7 = 0;
      return i;
    }
  }
  uint64_t v4 = i;
  do
  {
    int v5 = v4;
    if (v4 <= a1) {
      break;
    }
    --v4;
  }
  *int v5 = 0;
  return ++i;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_pcdata_impl<pugi::impl::anonymous namespace'::opt_true,pugi::impl::anonymous namespace'::opt_false,pugi::impl::anonymous namespace'::opt_true>::parse(pugi::impl::_anonymous_namespace_::utf8_writer *this)
{
  uint64_t v1 = this;
  __src = 0;
  uint64_t v13 = 0;
LABEL_2:
  for (uint64_t i = (unsigned __int8 *)this; ; ++i)
  {
    do
    {
      uint64_t v3 = *i;
        goto LABEL_8;
      uint64_t v4 = i + 1;
      uint64_t v3 = i[1];
        break;
      uint64_t v4 = i + 2;
      uint64_t v3 = i[2];
        break;
      uint64_t v4 = i + 3;
      uint64_t v3 = i[3];
      i += 4;
    }
    uint64_t i = v4;
LABEL_8:
    if (v3 == 38)
    {
      goto LABEL_2;
    }
    if (!v3) {
      break;
    }
    if (v3 == 60)
    {
      uint64_t v8 = i;
      if (__src)
      {
        uint64_t v9 = v13;
        memmove((char *)__src - v13, __src, i - (unsigned char *)__src);
        uint64_t v8 = &i[-v9];
      }
      do
      {
        uint64_t v10 = v8;
        if (v8 <= (unsigned __int8 *)v1) {
          break;
        }
        --v8;
      }
      unsigned __int8 *v10 = 0;
      return ++i;
    }
  }
  int v5 = i;
  if (__src)
  {
    uint64_t v6 = v13;
    memmove((char *)__src - v13, __src, i - (unsigned char *)__src);
    int v5 = &i[-v6];
  }
  do
  {
    uint64_t v7 = v5;
    if (v5 <= (unsigned __int8 *)v1) {
      break;
    }
    --v5;
  }
  *uint64_t v7 = 0;
  return i;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_pcdata_impl<pugi::impl::anonymous namespace'::opt_true,pugi::impl::anonymous namespace'::opt_true,pugi::impl::anonymous namespace'::opt_false>::parse(unsigned __int8 *a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  for (uint64_t i = a1; ; uint64_t i = v6 + 1)
  {
    while (1)
    {
      uint64_t v5 = *i;
      {
        uint64_t v6 = i;
      }
      else
      {
        uint64_t v6 = i + 2;
        while (1)
        {
          uint64_t v5 = *(v6 - 1);
          {
            --v6;
            goto LABEL_11;
          }
          uint64_t v5 = *v6;
            goto LABEL_11;
          uint64_t v5 = v6[1];
            break;
          uint64_t v5 = v6[2];
          v6 += 4;
          {
            v6 -= 2;
            goto LABEL_11;
          }
        }
        ++v6;
      }
LABEL_11:
      if (v5 != 13) {
        break;
      }
      uint64_t i = v6 + 1;
      int v7 = v6[1];
      unsigned __int8 *v6 = 10;
      if (v7 == 10)
      {
        if (v2) {
          memmove(&v2[-v3], v2, i - (unsigned __int8 *)v2);
        }
        uint64_t i = v6 + 2;
        ++v3;
        uint64_t v2 = (char *)(v6 + 2);
      }
    }
    if (!v5) {
      break;
    }
    if (v5 == 60)
    {
      uint64_t v10 = v6;
      if (v2)
      {
        memmove(&v2[-v3], v2, v6 - (unsigned __int8 *)v2);
        uint64_t v10 = &v6[-v3];
      }
      do
      {
        uint64_t v11 = v10;
        if (v10 <= a1) {
          break;
        }
        --v10;
      }
      *uint64_t v11 = 0;
      return ++v6;
    }
  }
  uint64_t v8 = v6;
  if (v2)
  {
    memmove(&v2[-v3], v2, v6 - (unsigned __int8 *)v2);
    uint64_t v8 = &v6[-v3];
  }
  do
  {
    uint64_t v9 = v8;
    if (v8 <= a1) {
      break;
    }
    --v8;
  }
  unsigned __int8 *v9 = 0;
  return v6;
}

unsigned __int8 *pugi::impl::anonymous namespace'::strconv_pcdata_impl<pugi::impl::anonymous namespace'::opt_true,pugi::impl::anonymous namespace'::opt_true,pugi::impl::anonymous namespace'::opt_true>::parse(char *a1)
{
  uint64_t v1 = a1;
  __src = 0;
  uint64_t v14 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v2 = *a1;
      {
        uint64_t v3 = (unsigned __int8 *)a1;
      }
      else
      {
        uint64_t v3 = (unsigned __int8 *)(a1 + 2);
        while (1)
        {
          uint64_t v2 = *(v3 - 1);
          {
            --v3;
            goto LABEL_11;
          }
          uint64_t v2 = *v3;
            goto LABEL_11;
          uint64_t v2 = v3[1];
            break;
          uint64_t v2 = v3[2];
          v3 += 4;
          {
            v3 -= 2;
            goto LABEL_11;
          }
        }
        ++v3;
      }
LABEL_11:
      if ((int)v2 > 37) {
        break;
      }
      if (v2 == 13)
      {
        a1 = (char *)(v3 + 1);
        int v4 = v3[1];
        *uint64_t v3 = 10;
        if (v4 == 10)
        {
          uint64_t v5 = v14;
          if (__src) {
            memmove((char *)__src - v14, __src, a1 - (unsigned char *)__src);
          }
          a1 = (char *)(v3 + 2);
          __src = v3 + 2;
          uint64_t v14 = v5 + 1;
        }
      }
      else
      {
        if (!v2)
        {
          uint64_t v6 = v3;
          if (__src)
          {
            uint64_t v7 = v14;
            memmove((char *)__src - v14, __src, v3 - (unsigned char *)__src);
            uint64_t v6 = &v3[-v7];
          }
          do
          {
            uint64_t v8 = v6;
            if (v6 <= (unsigned __int8 *)v1) {
              break;
            }
            --v6;
          }
          *uint64_t v8 = 0;
          return v3;
        }
LABEL_22:
        a1 = (char *)(v3 + 1);
      }
    }
    if (v2 != 38) {
      break;
    }
  }
  if (v2 != 60) {
    goto LABEL_22;
  }
  uint64_t v9 = v3;
  if (__src)
  {
    uint64_t v10 = v14;
    memmove((char *)__src - v14, __src, v3 - (unsigned char *)__src);
    uint64_t v9 = &v3[-v10];
  }
  do
  {
    uint64_t v11 = v9;
    if (v9 <= (unsigned __int8 *)v1) {
      break;
    }
    --v9;
  }
  *uint64_t v11 = 0;
  return ++v3;
}

char *pugi::impl::anonymous namespace'::strconv_cdata(pugi::impl::_anonymous_namespace_ *this, char *a2)
{
  int v2 = (int)a2;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *(unsigned __int8 *)this;
      {
        uint64_t v6 = this;
      }
      else
      {
        uint64_t v6 = (pugi::impl::_anonymous_namespace_ *)((char *)this + 2);
        while (1)
        {
          uint64_t v5 = *((unsigned __int8 *)v6 - 1);
          {
            uint64_t v6 = (pugi::impl::_anonymous_namespace_ *)((char *)v6 - 1);
            goto LABEL_11;
          }
          uint64_t v5 = *(unsigned __int8 *)v6;
            goto LABEL_11;
          uint64_t v5 = *((unsigned __int8 *)v6 + 1);
            break;
          uint64_t v5 = *((unsigned __int8 *)v6 + 2);
          uint64_t v6 = (pugi::impl::_anonymous_namespace_ *)((char *)v6 + 4);
          {
            uint64_t v6 = (pugi::impl::_anonymous_namespace_ *)((char *)v6 - 2);
            goto LABEL_11;
          }
        }
        uint64_t v6 = (pugi::impl::_anonymous_namespace_ *)((char *)v6 + 1);
      }
LABEL_11:
      if (v5 != 13) {
        break;
      }
      this = (pugi::impl::_anonymous_namespace_ *)((char *)v6 + 1);
      int v7 = *((unsigned __int8 *)v6 + 1);
      *(unsigned char *)uint64_t v6 = 10;
      if (v7 == 10)
      {
        if (v3) {
          memmove(&v3[-v4], v3, this - (pugi::impl::_anonymous_namespace_ *)v3);
        }
        this = (pugi::impl::_anonymous_namespace_ *)((char *)v6 + 2);
        ++v4;
        uint64_t v3 = (char *)v6 + 2;
      }
    }
    if (v5 == 93) {
      break;
    }
    if (!v5) {
      return 0;
    }
LABEL_28:
    this = (pugi::impl::_anonymous_namespace_ *)((char *)v6 + 1);
  }
  if (*((unsigned char *)v6 + 1) != 93) {
    goto LABEL_28;
  }
  int v8 = *((unsigned __int8 *)v6 + 2);
  BOOL v9 = v2 == 62 && v8 == 0;
  BOOL v10 = v9;
  if (v8 != 62 && !v10) {
    goto LABEL_28;
  }
  uint64_t v11 = (char *)v6 + 1;
  if (v3)
  {
    memmove(&v3[-v4], v3, v6 - (pugi::impl::_anonymous_namespace_ *)v3);
    uint64_t v6 = (pugi::impl::_anonymous_namespace_ *)((char *)v6 - v4);
  }
  *(unsigned char *)uint64_t v6 = 0;
  return v11;
}

unint64_t *pugi::impl::anonymous namespace'::node_output_simple(unint64_t *this, uint64_t a2, char a3)
{
  uint64_t v5 = this;
  switch(*(_DWORD *)a2 & 0xF)
  {
    case 3:
      if (*(void *)(a2 + 16)) {
        uint64_t v6 = *(const char **)(a2 + 16);
      }
      else {
        uint64_t v6 = "";
      }
    case 4:
      if (*(void *)(a2 + 16)) {
        int v7 = *(const char **)(a2 + 16);
      }
      else {
        int v7 = "";
      }
      while (1)
      {
        for (uint64_t i = 0; ; ++i)
        {
          int v9 = v7[i];
          if (v9 == 93) {
            break;
          }
          if (!v7[i]) {
            goto LABEL_18;
          }
LABEL_17:
          ;
        }
        if (v7[i + 1] != 93 || v7[i + 2] != 62) {
          goto LABEL_17;
        }
LABEL_18:
        size_t v10 = i + 2 * (v9 != 0);
        unint64_t v11 = v5[1281];
        unint64_t v12 = v10 + v11;
        if (v10 + v11 > 0x800)
        {
          unint64_t v12 = v5[1281];
        }
        else
        {
          this = (unint64_t *)memcpy((char *)v5 + v11, v7, v10);
          v5[1281] = v12;
        }
        if (v12 >= 0x7FE)
        {
          unint64_t v12 = 0;
        }
        v7 += v10;
        uint64_t v13 = (char *)v5 + v12;
        *(_WORD *)uint64_t v13 = 23901;
        _OWORD v13[2] = 62;
        v5[1281] = v12 + 3;
        if (!*v7) {
          return this;
        }
      }
    case 5:
      if (*(void *)(a2 + 16)) {
        uint64_t v14 = *(const char **)(a2 + 16);
      }
      else {
        uint64_t v14 = "";
      }
      int v15 = *(unsigned __int8 *)v14;
      if (!*v14) {
        goto LABEL_43;
      }
      while (1)
      {
        size_t v16 = 0;
        while (v15 != 45)
        {
          if (!v15) {
            goto LABEL_36;
          }
          int v15 = v14[v16 + 1];
LABEL_35:
          ++v16;
        }
        int v15 = v14[v16 + 1];
        if (v14[v16 + 1] && v15 != 45) {
          goto LABEL_35;
        }
LABEL_36:
        unint64_t v17 = v5[1281];
        unint64_t v18 = v17 + v16;
        if (v17 + v16 > 0x800)
        {
        }
        else
        {
          this = (unint64_t *)memcpy((char *)v5 + v17, v14, v16);
          v5[1281] = v18;
        }
        if (v14[v16])
        {
          unint64_t v19 = v5[1281];
          if (v19 >= 0x7FF)
          {
            unint64_t v19 = 0;
          }
          *(_WORD *)((char *)v5 + v19) = 8237;
          v5[1281] = v19 + 2;
          unsigned int v20 = &v14[v16];
          int v21 = *((unsigned __int8 *)v20 + 1);
          uint64_t v14 = v20 + 1;
          int v15 = v21;
          if (v21) {
            continue;
          }
        }
LABEL_43:
        unint64_t v22 = v5[1281];
        if (v22 >= 0x7FE)
        {
          unint64_t v22 = 0;
        }
        uint64_t v23 = (char *)v5 + v22;
        *(_WORD *)uint64_t v23 = 11565;
        v23[2] = 62;
        unint64_t v24 = v22 + 3;
        goto LABEL_85;
      }
    case 6:
      unint64_t v25 = this[1281];
      if (v25 >= 0x7FF)
      {
        unint64_t v25 = 0;
      }
      *(_WORD *)((char *)v5 + v25) = 16188;
      v5[1281] = v25 + 2;
      if (*(void *)(a2 + 8)) {
        int v26 = *(const char **)(a2 + 8);
      }
      else {
        int v26 = ":anonymous";
      }
      unint64_t v27 = v5[1281];
      if (!*(void *)(a2 + 16)) {
        goto LABEL_75;
      }
      if (v27 >= 0x800)
      {
        unint64_t v27 = 0;
      }
      *((unsigned char *)v5 + v27++) = 32;
      v5[1281] = v27;
      unint64_t v28 = *(const char **)(a2 + 16);
      int v29 = *(unsigned __int8 *)v28;
      if (!*v28) {
        goto LABEL_75;
      }
      break;
    case 7:
      unint64_t v35 = this[1281];
      if (v35 >= 0x7FF)
      {
        unint64_t v35 = 0;
      }
      *(_WORD *)((char *)v5 + v35) = 16188;
      v5[1281] = v35 + 2;
      if (*(void *)(a2 + 8)) {
        uint64_t v36 = *(const char **)(a2 + 8);
      }
      else {
        uint64_t v36 = ":anonymous";
      }
      unint64_t v27 = v5[1281];
      goto LABEL_75;
    case 8:
      if (*(void *)(a2 + 16))
      {
        unint64_t v37 = v5[1281];
        if (v37 >= 0x800)
        {
          unint64_t v37 = 0;
        }
        *((unsigned char *)v5 + v37) = 32;
        v5[1281] = v37 + 1;
      }
      unint64_t v38 = v5[1281];
      if (v38 >= 0x800)
      {
        unint64_t v38 = 0;
      }
      *((unsigned char *)v5 + v38) = 62;
      unint64_t v24 = v38 + 1;
      goto LABEL_85;
    default:
      return this;
  }
  do
  {
    size_t v30 = 0;
    while (v29 != 63)
    {
      if (!v29) {
        goto LABEL_61;
      }
      int v29 = v28[v30 + 1];
LABEL_60:
      ++v30;
    }
    int v29 = v28[v30 + 1];
    if (v29 != 62) {
      goto LABEL_60;
    }
LABEL_61:
    unint64_t v31 = v27 + v30;
    if (v27 + v30 > 0x800)
    {
      unint64_t v31 = v5[1281];
    }
    else
    {
      this = (unint64_t *)memcpy((char *)v5 + v27, v28, v30);
      v5[1281] = v31;
    }
    if (!v28[v30])
    {
      unint64_t v27 = v31;
      break;
    }
    if (v31 >= 0x7FE)
    {
      unint64_t v31 = 0;
    }
    int v32 = (char *)v5 + v31;
    *(_WORD *)int v32 = 8255;
    v32[2] = 62;
    unint64_t v27 = v31 + 3;
    v5[1281] = v31 + 3;
    int v33 = &v28[v30];
    int v34 = *((unsigned __int8 *)v33 + 2);
    unint64_t v28 = v33 + 2;
    int v29 = v34;
  }
  while (v34);
LABEL_75:
  if (v27 >= 0x7FF)
  {
    unint64_t v27 = 0;
  }
  *(_WORD *)((char *)v5 + v27) = 15935;
  unint64_t v24 = v27 + 2;
LABEL_85:
  v5[1281] = v24;
  return this;
}

uint64_t pugi::impl::anonymous namespace'::text_output_indent(uint64_t this, char *a2, size_t a3, int a4)
{
  int v4 = a4;
  uint64_t v6 = this;
  switch(a3)
  {
    case 1uLL:
      if (a4)
      {
        unint64_t v7 = *(void *)(this + 10248);
        do
        {
          char v8 = *a2;
          if (v7 >= 0x800)
          {
            unint64_t v7 = 0;
          }
          *(unsigned char *)(v6 + v7++) = v8;
          *(void *)(v6 + 10248) = v7;
          --v4;
        }
        while (v4);
      }
      break;
    case 2uLL:
      if (a4)
      {
        unint64_t v12 = *(void *)(this + 10248);
        do
        {
          char v13 = *a2;
          char v14 = a2[1];
          if (v12 >= 0x7FF)
          {
            unint64_t v12 = 0;
          }
          int v15 = (char *)(v6 + v12);
          char *v15 = v13;
          v15[1] = v14;
          v12 += 2;
          *(void *)(v6 + 10248) = v12;
          --v4;
        }
        while (v4);
      }
      break;
    case 3uLL:
      if (a4)
      {
        unint64_t v16 = *(void *)(this + 10248);
        do
        {
          char v17 = *a2;
          char v18 = a2[1];
          char v19 = a2[2];
          if (v16 >= 0x7FE)
          {
            unint64_t v16 = 0;
          }
          unsigned int v20 = (char *)(v6 + v16);
          char *v20 = v17;
          v20[1] = v18;
          v20[2] = v19;
          v16 += 3;
          *(void *)(v6 + 10248) = v16;
          --v4;
        }
        while (v4);
      }
      break;
    case 4uLL:
      if (a4)
      {
        do
        {
          --v4;
        }
        while (v4);
      }
      break;
    default:
      if (a4)
      {
        do
        {
          uint64_t v10 = *(void *)(v6 + 10248);
          size_t v11 = v10 + a3;
          if (v10 + a3 > 0x800)
          {
          }
          else
          {
            this = (uint64_t)memcpy((void *)(v6 + v10), a2, a3);
            *(void *)(v6 + 10248) = v11;
          }
          --v4;
        }
        while (v4);
      }
      break;
  }
  return this;
}

unint64_t *pugi::impl::anonymous namespace'::text_output(unint64_t *this, const char *a2, int a3, char a4)
{
  int v4 = this;
  if ((a4 & 0x10) != 0)
  {
  }
  else if (*a2)
  {
    while (1)
    {
      uint64_t v6 = a2 + 1;
      while (1)
      {
        {
          --v6;
          goto LABEL_11;
        }
          goto LABEL_11;
          break;
        v6 += 4;
        if ((v7 & a3) != 0)
        {
          v6 -= 2;
          goto LABEL_11;
        }
      }
      ++v6;
LABEL_11:
      size_t v8 = v6 - a2;
      unint64_t v9 = v4[1281];
      unint64_t v10 = v6 - a2 + v9;
      if (v10 > 0x800)
      {
      }
      else
      {
        this = (unint64_t *)memcpy((char *)v4 + v9, a2, v8);
        v4[1281] = v10;
      }
      int v11 = *v6;
      int v12 = *(unsigned __int8 *)v6;
      if (v11 > 37) {
        break;
      }
      if (*v6)
      {
        if (v11 == 34)
        {
          unint64_t v17 = v4[1281];
          if (v17 >= 0x7FB)
          {
            unint64_t v17 = 0;
          }
          char v18 = (char *)v4 + v17;
          *(_DWORD *)char v18 = 1869967654;
          *((_WORD *)v18 + 2) = 15220;
          unint64_t v19 = v17 + 6;
LABEL_27:
          v4[1281] = v19;
LABEL_30:
          int v21 = *(unsigned __int8 *)++v6;
          int v12 = v21;
          goto LABEL_31;
        }
LABEL_28:
        char v15 = v11 / 0xAu + 48;
        char v16 = (v11 % 0xAu) | 0x30;
        uint64_t v13 = (uint64_t)v4;
        char v14 = 35;
LABEL_29:
        goto LABEL_30;
      }
LABEL_31:
      a2 = v6;
      if (!v12) {
        return this;
      }
    }
    if (v11 == 62 || v11 == 60)
    {
      unint64_t v20 = v4[1281];
      if (v20 >= 0x800)
      {
        unint64_t v20 = 0;
      }
      *((unsigned char *)v4 + v20) = v12;
      unint64_t v19 = v20 + 1;
      goto LABEL_27;
    }
    if (v11 != 38) {
      goto LABEL_28;
    }
    uint64_t v13 = (uint64_t)v4;
    char v14 = 97;
    char v15 = 109;
    char v16 = 112;
    goto LABEL_29;
  }
  return this;
}

uint64_t pugi::impl::anonymous namespace'::node_output_attributes(uint64_t this, void *a2, char *a3, size_t a4, char a5, int a6)
{
  if (a2)
  {
    unint64_t v9 = a2;
    uint64_t v10 = this;
    int v11 = a5 & 0x44;
    int v12 = a6 + 1;
    unint64_t v13 = *(void *)(this + 10248);
    do
    {
      if (v11 == 64)
      {
        if (v13 >= 0x800)
        {
          unint64_t v13 = 0;
        }
        *(unsigned char *)(v10 + v13) = 10;
        *(void *)(v10 + 10248) = v13 + 1;
      }
      else
      {
        if (v13 >= 0x800)
        {
          unint64_t v13 = 0;
        }
        *(unsigned char *)(v10 + v13) = 32;
        *(void *)(v10 + 10248) = v13 + 1;
      }
      if (v9[1]) {
        char v14 = (const char *)v9[1];
      }
      else {
        char v14 = ":anonymous";
      }
      unint64_t v15 = *(void *)(v10 + 10248);
      if (v15 >= 0x7FF)
      {
        unint64_t v15 = 0;
      }
      *(_WORD *)(v10 + v15) = 8765;
      unint64_t v16 = v15 + 2;
      *(void *)(v10 + 10248) = v16;
      unint64_t v17 = (const char *)v9[2];
      if (v17)
      {
        unint64_t v16 = *(void *)(v10 + 10248);
      }
      if (v16 >= 0x800)
      {
        unint64_t v16 = 0;
      }
      *(unsigned char *)(v10 + v16) = 34;
      unint64_t v13 = v16 + 1;
      *(void *)(v10 + 10248) = v13;
      unint64_t v9 = (void *)v9[4];
    }
    while (v9);
  }
  return this;
}

uint64_t pugi::impl::anonymous namespace'::xml_buffered_writer::write(uint64_t this, char a2, char a3, char a4, char a5, char a6)
{
  uint64_t v11 = this;
  unint64_t v12 = *(void *)(this + 10248);
  if (v12 >= 0x7FC)
  {
    unint64_t v12 = 0;
  }
  unint64_t v13 = (unsigned char *)(v11 + v12);
  unsigned char *v13 = a2;
  v13[1] = a3;
  _OWORD v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  *(void *)(v11 + 10248) = v12 + 5;
  return this;
}

uint64_t pugi::impl::anonymous namespace'::xml_buffered_writer::write(uint64_t this, char a2, char a3, char a4, char a5)
{
  uint64_t v9 = this;
  unint64_t v10 = *(void *)(this + 10248);
  if (v10 >= 0x7FD)
  {
    unint64_t v10 = 0;
  }
  uint64_t v11 = (unsigned char *)(v9 + v10);
  *uint64_t v11 = a2;
  v11[1] = a3;
  void v11[2] = a4;
  v11[3] = a5;
  *(void *)(v9 + 10248) = v10 + 4;
  return this;
}

void *pugi::impl::anonymous namespace'::xml_buffered_writer::write_direct(pugi::impl::_anonymous_namespace_::xml_buffered_writer *this, const char *a2, size_t a3)
{
  *((void *)this + 1281) = 0;
  if (a3 < 0x801)
  {
LABEL_12:
    uint64_t result = memcpy(this, a2, a3);
    *((void *)this + 1281) += a3;
    return result;
  }
  if (*((_DWORD *)this + 2564) != 1)
  {
    do
    {
      unint64_t v8 = 2047;
      while ((a2[v8] & 0xC0) == 0x80)
      {
        if (--v8 == 2043)
        {
          unint64_t v8 = 2048;
          break;
        }
      }
      a2 += v8;
      a3 -= v8;
    }
    while (a3 > 0x800);
    *((void *)this + 1281) = 0;
    goto LABEL_12;
  }
  uint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 1280) + 16);

  return (void *)v6();
}

uint64_t pugi::impl::anonymous namespace'::xml_buffered_writer::flush(uint64_t this, const char *a2, unint64_t a3)
{
  if (!a3) {
    return this;
  }
  uint64_t v3 = a2;
  int v4 = *(_DWORD *)(this + 10256);
  if (v4 == 1) {
    return (*(uint64_t (**)(void, const char *))(**(void **)(this + 10240) + 16))(*(void *)(this + 10240), a2);
  }
  uint64_t v5 = (char *)(this + 2048);
  if ((v4 & 0xFFFFFFFE) != 2)
  {
    if ((v4 - 5) <= 1)
    {
      int v21 = (char *)(this + 2048);
      while (1)
      {
        int v22 = *(unsigned __int8 *)v3;
        if ((*v3 & 0x80000000) == 0)
        {
          *(_DWORD *)int v21 = v22;
          uint64_t v23 = v3 + 1;
          if (--a3 < 4 || (v23 & 3) != 0)
          {
            v21 += 4;
          }
          else
          {
            unint64_t v24 = v21 + 16;
            unint64_t v25 = (unsigned __int8 *)(v3 + 4);
            do
            {
              if ((*(_DWORD *)(v25 - 3) & 0x80808080) != 0) {
                break;
              }
              *(v24 - 3) = *(_DWORD *)(v25 - 3);
              *(v24 - 2) = *(v25 - 2);
              *(v24 - 1) = *(v25 - 1);
              int v26 = *v25;
              v25 += 4;
              *unint64_t v24 = v26;
              v24 += 4;
              a3 -= 4;
            }
            while (a3 > 3);
            int v21 = (char *)(v24 - 3);
            uint64_t v23 = (const char *)(v25 - 3);
          }
          goto LABEL_65;
        }
        unint64_t v27 = a3 - 2;
        if (a3 >= 2 && (v22 & 0xE0) == 0xC0 && (char v28 = v3[1], (v28 & 0xC0) == 0x80))
        {
          *(_DWORD *)int v21 = v28 & 0x3F | ((v22 & 0x3F) << 6);
          v21 += 4;
          uint64_t v23 = v3 + 2;
        }
        else
        {
          unint64_t v27 = a3 - 3;
          if (a3 >= 3
            && (v22 & 0xF0) == 0xE0
            && (char v29 = v3[1], (v29 & 0xC0) == 0x80)
            && (char v30 = v3[2], (v30 & 0xC0) == 0x80))
          {
            *(_DWORD *)int v21 = ((v22 & 0x1F) << 12) | ((v29 & 0x3F) << 6) | v30 & 0x3F;
            v21 += 4;
            uint64_t v23 = v3 + 3;
          }
          else
          {
            unint64_t v27 = a3 - 4;
            if (a3 < 4
              || (v22 & 0xF8) != 0xF0
              || (char v31 = v3[1], (v31 & 0xC0) != 0x80)
              || (char v32 = v3[2], (v32 & 0xC0) != 0x80)
              || (char v33 = v3[3], (v33 & 0xC0) != 0x80))
            {
              uint64_t v23 = v3 + 1;
              --a3;
              goto LABEL_65;
            }
            *(_DWORD *)int v21 = ((v22 & 0xF) << 18) | ((v31 & 0x3F) << 12) | ((v32 & 0x3F) << 6) | v33 & 0x3F;
            v21 += 4;
            uint64_t v23 = v3 + 4;
          }
        }
        a3 = v27;
LABEL_65:
        uint64_t v3 = v23;
        if (!a3)
        {
          if (v4 != 5 && v21 != v5)
          {
            int v34 = (unsigned int *)(this + 2048);
            do
            {
              unsigned int *v34 = bswap32(*v34);
              ++v34;
            }
            while (v34 != (unsigned int *)v21);
          }
          goto LABEL_104;
        }
      }
    }
    if (v4 != 9)
    {
      unint64_t v20 = 0;
      return (*(uint64_t (**)(void, char *, char *))(**(void **)(this + 10240) + 16))(*(void *)(this + 10240), v5, v20);
    }
    int v21 = (char *)(this + 2048);
    while (1)
    {
      int v35 = *v3;
      if ((v35 & 0x80000000) == 0)
      {
        char *v21 = v35;
        uint64_t v36 = v3 + 1;
        if (--a3 < 4 || (v36 & 3) != 0)
        {
          ++v21;
        }
        else
        {
          unint64_t v37 = v21 + 4;
          unint64_t v38 = (char *)(v3 + 4);
          do
          {
            int v39 = *(_DWORD *)(v38 - 3);
            if ((v39 & 0x80808080) != 0) {
              break;
            }
            *(v37 - 3) = v39;
            *(v37 - 2) = *(v38 - 2);
            *(v37 - 1) = *(v38 - 1);
            char v40 = *v38;
            v38 += 4;
            *unint64_t v37 = v40;
            v37 += 4;
            a3 -= 4;
          }
          while (a3 > 3);
          int v21 = v37 - 3;
          uint64_t v36 = v38 - 3;
        }
        goto LABEL_103;
      }
      unint64_t v41 = a3 - 2;
      if (a3 >= 2 && (v35 & 0xE0) == 0xC0 && (char v42 = v3[1], (v42 & 0xC0) == 0x80))
      {
        unsigned int v43 = v42 & 0x3F | ((v35 & 0x3F) << 6);
        if (v43 <= 0xFF) {
          char v44 = v43;
        }
        else {
          char v44 = 63;
        }
        *v21++ = v44;
        uint64_t v36 = v3 + 2;
      }
      else
      {
        unint64_t v41 = a3 - 3;
        if (a3 >= 3
          && (v35 & 0xF0) == 0xE0
          && (char v45 = v3[1], (v45 & 0xC0) == 0x80)
          && (char v46 = v3[2], (v46 & 0xC0) == 0x80))
        {
          unsigned int v47 = ((v35 & 0x1F) << 12) | ((v45 & 0x3F) << 6) | v46 & 0x3F;
          if (v47 > 0xFF) {
            LOBYTE(v47) = 63;
          }
          *v21++ = v47;
          uint64_t v36 = v3 + 3;
        }
        else
        {
          unint64_t v41 = a3 - 4;
          if (a3 < 4
            || (v35 & 0xF8) != 0xF0
            || (v3[1] & 0xC0) != 0x80
            || (v3[2] & 0xC0) != 0x80
            || (v3[3] & 0xC0) != 0x80)
          {
            uint64_t v36 = v3 + 1;
            --a3;
            goto LABEL_103;
          }
          *v21++ = 63;
          uint64_t v36 = v3 + 4;
        }
      }
      a3 = v41;
LABEL_103:
      uint64_t v3 = v36;
      if (!a3)
      {
LABEL_104:
        unint64_t v20 = (char *)(v21 - v5);
        return (*(uint64_t (**)(void, char *, char *))(**(void **)(this + 10240) + 16))(*(void *)(this + 10240), v5, v20);
      }
    }
  }
  uint64_t v6 = (char *)(this + 2048);
  do
  {
    __int16 v7 = *(unsigned __int8 *)v3;
    if (*v3 < 0)
    {
      unint64_t v12 = a3 - 2;
      if (a3 >= 2 && (v7 & 0xE0) == 0xC0)
      {
        char v13 = v3[1];
        if ((v13 & 0xC0) == 0x80)
        {
          *(_WORD *)uint64_t v6 = v13 & 0x3F | ((v7 & 0x3F) << 6);
          v6 += 2;
          unint64_t v8 = v3 + 2;
LABEL_30:
          a3 = v12;
          goto LABEL_32;
        }
      }
      unint64_t v12 = a3 - 3;
      if (a3 >= 3 && (v7 & 0xF0) == 0xE0)
      {
        char v14 = v3[1];
        if ((v14 & 0xC0) == 0x80)
        {
          char v15 = v3[2];
          if ((v15 & 0xC0) == 0x80)
          {
            *(_WORD *)uint64_t v6 = (v7 << 12) | ((v14 & 0x3F) << 6) | v15 & 0x3F;
            v6 += 2;
            unint64_t v8 = v3 + 3;
            goto LABEL_30;
          }
        }
      }
      unint64_t v12 = a3 - 4;
      if (a3 >= 4 && (v7 & 0xF8) == 0xF0)
      {
        char v16 = v3[1];
        if ((v16 & 0xC0) == 0x80)
        {
          unsigned int v17 = *((unsigned __int8 *)v3 + 2);
          if ((v17 & 0xC0) == 0x80)
          {
            char v18 = v3[3];
            if ((v18 & 0xC0) == 0x80)
            {
              *(_WORD *)uint64_t v6 = (((((v16 & 0x3F) << 12) & 0xFFC3F3FF | ((v7 & 0xF) << 18) | (((v17 >> 4) & 3) << 10))
                             + 67043328) >> 10)
                           - 10240;
              *((_WORD *)v6 + 1) = v18 & 0x3F | (v17 << 6) & 0x3FF | 0xDC00;
              v6 += 4;
              unint64_t v8 = v3 + 4;
              goto LABEL_30;
            }
          }
        }
      }
      unint64_t v8 = v3 + 1;
      --a3;
    }
    else
    {
      *(_WORD *)uint64_t v6 = v7;
      unint64_t v8 = v3 + 1;
      if (--a3 < 4 || (v8 & 3) != 0)
      {
        v6 += 2;
      }
      else
      {
        uint64_t v9 = v6 + 8;
        unint64_t v10 = (unsigned __int8 *)(v3 + 4);
        do
        {
          if ((*(_DWORD *)(v10 - 3) & 0x80808080) != 0) {
            break;
          }
          *(v9 - 3) = *(_DWORD *)(v10 - 3);
          *(v9 - 2) = *(v10 - 2);
          *(v9 - 1) = *(v10 - 1);
          __int16 v11 = *v10;
          v10 += 4;
          _WORD *v9 = v11;
          v9 += 4;
          a3 -= 4;
        }
        while (a3 > 3);
        uint64_t v6 = (char *)(v9 - 3);
        unint64_t v8 = (const char *)(v10 - 3);
      }
    }
LABEL_32:
    uint64_t v3 = v8;
  }
  while (a3);
  if (v4 != 2 && v6 != v5)
  {
    unint64_t v19 = (char *)(this + 2048);
    do
    {
      *(_WORD *)unint64_t v19 = bswap32(*(unsigned __int16 *)v19) >> 16;
      v19 += 2;
    }
    while (v19 != v6);
  }
  unint64_t v20 = (char *)(v6 - v5);
  return (*(uint64_t (**)(void, char *, char *))(**(void **)(this + 10240) + 16))(*(void *)(this + 10240), v5, v20);
}

void *pugi::impl::anonymous namespace'::default_allocate(pugi::impl::_anonymous_namespace_ *this)
{
  return malloc_type_malloc((size_t)this, 0xCE75D1DFuLL);
}

uint64_t realityio::RIOIESInfoLoadFromString(unsigned char *__src, size_t __len, uint64_t a3, int a4, uint64_t a5)
{
  if (__len <= 4)
  {
    MEMORY[0x2455D2770](a5, "corrupt or invalid IES header", __len);
    return 0;
  }
  if (a4)
  {
    if (*(_DWORD *)__src != 1314080073 || __src[4] != 65) {
      return 0;
    }
  }
  *(void *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v9 = (std::string *)std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  memset(&__str, 0, sizeof(__str));
  memset(&v85, 0, sizeof(v85));
  v64[0] = 0;
  v64[1] = 0;
  uint64_t v65 = 0;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  char v82 = 0;
  *(_OWORD *)unsigned int v77 = 0u;
  *(_OWORD *)unsigned int v78 = 0u;
  long long v79 = 0u;
  if ((*((unsigned char *)&v85.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v85.__r_.__value_.__l.__size_)
    {
      unint64_t v12 = (std::string *)v85.__r_.__value_.__r.__words[0];
      if (v85.__r_.__value_.__l.__size_ != 7)
      {
        if (v85.__r_.__value_.__l.__size_ != 16) {
          goto LABEL_50;
        }
        if (*(void *)v85.__r_.__value_.__l.__data_ != 0x4D4C3A414E534549
          || *(void *)(v85.__r_.__value_.__r.__words[0] + 8) != 0x353939312D33362DLL)
        {
          if (*(void *)v85.__r_.__value_.__l.__data_ != 0x4D4C3A414E534549
            || *(void *)(v85.__r_.__value_.__r.__words[0] + 8) != 0x323030322D33362DLL)
          {
            goto LABEL_50;
          }
LABEL_35:
          unint64_t v12 = (std::string *)"IESNA:LM-63-2002";
LABEL_50:
          MEMORY[0x2455D2770](v64, v12);
          while (1)
          {
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = __str.__r_.__value_.__l.__size_;
            }
            if (!size) {
              break;
            }
            memset(&__p, 0, sizeof(__p));
            int v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ >= 9) {
                size_t v20 = 9;
              }
              else {
                size_t v20 = __p.__r_.__value_.__l.__size_;
              }
            }
            else
            {
              if (HIBYTE(__p.__r_.__value_.__r.__words[2]) >= 9u) {
                size_t v20 = 9;
              }
              else {
                size_t v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              p_p = &__p;
            }
            int v22 = memcmp(p_p, "TILT=NONE", v20);
            if (v20 >= 9 && v22 == 0) {
              goto LABEL_96;
            }
            if (v19 < 0)
            {
              unint64_t v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
              size_t v24 = __p.__r_.__value_.__l.__size_ >= 0xA ? 10 : __p.__r_.__value_.__l.__size_;
            }
            else
            {
              size_t v24 = v19 >= 0xAu ? 10 : v19;
              unint64_t v25 = &__p;
            }
            int v26 = memcmp(v25, "TILT= NONE", v24);
            if (v24 >= 0xA && !v26) {
              goto LABEL_96;
            }
            if (v19 < 0)
            {
              char v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
              size_t v27 = __p.__r_.__value_.__l.__size_ >= 0xA ? 10 : __p.__r_.__value_.__l.__size_;
            }
            else
            {
              size_t v27 = v19 >= 0xAu ? 10 : v19;
              char v28 = &__p;
            }
            if (((int v29 = memcmp(v28, "TILT =NONE", v27), v27 < 0xA) || v29)
              && (v19 < 0
                ? (std::string *)((char v31 = (std::string *)__p.__r_.__value_.__r.__words[0],
                                   __p.__r_.__value_.__l.__size_ >= 0xB)
                                ? (size_t v30 = 11)
                                : (size_t v30 = __p.__r_.__value_.__l.__size_))
                : (v19 >= 0xBu ? (size_t v30 = 11) : (size_t v30 = v19), v31 = &__p),
                  (int v32 = memcmp(v31, "TILT = NONE", v30), v30 < 0xB) || v32))
            {
              if (v19 < 0)
              {
                int v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if (__p.__r_.__value_.__l.__size_ >= 5) {
                  size_t v34 = 5;
                }
                else {
                  size_t v34 = __p.__r_.__value_.__l.__size_;
                }
              }
              else
              {
                if (v19 >= 5u) {
                  size_t v34 = 5;
                }
                else {
                  size_t v34 = v19;
                }
                int v35 = &__p;
              }
              int v36 = memcmp(v35, "TILT=", v34);
              if (v34 >= 5 && !v36
                || (v19 < 0
                  ? (std::string *)((unint64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0],
                                     __p.__r_.__value_.__l.__size_ >= 5)
                                  ? (size_t v37 = 5)
                                  : (size_t v37 = __p.__r_.__value_.__l.__size_))
                  : (v19 >= 5u ? (v37 = 5) : (v37 = v19), unint64_t v38 = &__p),
                    (v39 = memcmp(v38, "TILT =", v37), int v33 = 0, v37 >= 5) && !v39))
              {
                MEMORY[0x2455D2770](a5, "TILT not supported");
                int v33 = 1;
                LOBYTE(v19) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
              }
            }
            else
            {
LABEL_96:
              int v33 = 3;
            }
            if ((v19 & 0x80) != 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if (v33)
              {
LABEL_123:
                if (v33 != 3) {
                  goto LABEL_135;
                }
                break;
              }
            }
            else if (v33)
            {
              goto LABEL_123;
            }
          }
          char v15 = "Light Count is not valid";
          if (v66 < 0.0 || v66 > 32767.0) {
            goto LABEL_134;
          }
          if (v67 < 0.0)
          {
            MEMORY[0x2455D2770](a5, "Absolute photometry/non-positive TotalLumens unsupported", v67);
            float v67 = 1.0;
          }
          if (v68 < 0.0)
          {
            char v15 = "CandelaMult is not positive number";
            goto LABEL_134;
          }
          if (v69 >> 15)
          {
            char v15 = "VAnglesNum is not valid";
            goto LABEL_134;
          }
          if (v70 >= 0x8000)
          {
            char v15 = "HAnglesNum is not valid";
            goto LABEL_134;
          }
          std::vector<float>::resize((uint64_t)v77, (int)v69);
          std::vector<float>::resize((uint64_t)&v78[1], (int)v70);
          unsigned int v41 = v69;
          if ((int)v69 >= 1)
          {
            uint64_t v42 = 0;
            float v43 = -3.4028e38;
            while (1)
            {
              LODWORD(__p.__r_.__value_.__l.__data_) = 0;
              float v44 = *(float *)&__p.__r_.__value_.__l.__data_;
              if (*(float *)&__p.__r_.__value_.__l.__data_ < v43) {
                break;
              }
              *((_DWORD *)v77[0] + v42++) = __p.__r_.__value_.__l.__data_;
              unsigned int v41 = v69;
              float v43 = v44;
              if (v42 >= (int)v69) {
                goto LABEL_157;
              }
            }
            std::vector<float>::resize((uint64_t)v77, 0);
            std::vector<float>::resize((uint64_t)&v78[1], 0);
            MEMORY[0x2455D2770](a5, "V Values is not valid");
            goto LABEL_135;
          }
          float v44 = -3.4028e38;
LABEL_157:
          unsigned int v45 = v70;
          if ((int)v70 >= 1)
          {
            uint64_t v46 = 0;
            float v47 = -3.4028e38;
            while (1)
            {
              LODWORD(__p.__r_.__value_.__l.__data_) = 0;
              float v48 = *(float *)&__p.__r_.__value_.__l.__data_;
              if (*(float *)&__p.__r_.__value_.__l.__data_ < v47) {
                break;
              }
              *((_DWORD *)v78[1] + v46++) = __p.__r_.__value_.__l.__data_;
              unsigned int v45 = v70;
              float v47 = v48;
              if (v46 >= (int)v70)
              {
                unsigned int v41 = v69;
                goto LABEL_164;
              }
            }
            std::vector<float>::resize((uint64_t)v77, 0);
            std::vector<float>::resize((uint64_t)&v78[1], 0);
            MEMORY[0x2455D2770](a5, "H Values is not valid");
            goto LABEL_135;
          }
          float v48 = -3.4028e38;
LABEL_164:
          v81[1] = v48;
          std::vector<float>::resize((uint64_t)&v82, (int)(v45 * v41));
          signed int v49 = v70;
          if ((int)v70 < 1)
          {
            float v52 = 0.0;
          }
          else
          {
            signed int v50 = 0;
            int v51 = 0;
            float v52 = 0.0;
            int v53 = v69;
            float v54 = 0.0;
            do
            {
              if (v53 >= 1)
              {
                uint64_t v55 = 0;
                do
                {
                  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
                  float v56 = *(float *)&__p.__r_.__value_.__l.__data_;
                  if (*(float *)&__p.__r_.__value_.__l.__data_ != 0.0 && v54 < *((float *)v77[0] + v55)) {
                    float v54 = *((float *)v77[0] + v55);
                  }
                  *((float *)v82 + (v51 + v55)) = *(float *)&__p.__r_.__value_.__l.__data_ * v68;
                  if (v56 >= v52) {
                    float v52 = v56;
                  }
                  ++v55;
                  int v53 = v69;
                }
                while (v55 < (int)v69);
                signed int v49 = v70;
                v51 += v55;
              }
              ++v50;
            }
            while (v50 < v49);
          }
          v81[2] = v44;
          v81[3] = v52 * v68;
          switch(v71)
          {
            case 3:
              int v60 = "TypeA Photometric data not supported";
              break;
            case 2:
              int v60 = "TypeB Photometric data not supported";
              break;
            case 1:
              if (*(float *)v78[1] == 0.0)
              {
                float v59 = *(float *)(v79 - 4);
                if (v59 != 0.0)
                {
                  if (v59 == 90.0)
                  {
                  }
                  else if (v59 != 180.0)
                  {
                    goto LABEL_192;
                  }
                }
              }
LABEL_192:
              std::string::size_type v61 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v61 = __str.__r_.__value_.__l.__size_;
              }
              if (v61)
              {
                memset(&__p, 0, sizeof(__p));
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "END")) {
                std::string::size_type v62 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                }
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v62 = __str.__r_.__value_.__l.__size_;
                }
                if (v62)
                {
                  std::vector<float>::resize((uint64_t)v77, 0);
                  std::vector<float>::resize((uint64_t)&v78[1], 0);
                  MEMORY[0x2455D2770](a5, "Unexpected content after END.");
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_135;
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              realityio::RIOIESInfo::operator=(a3, (uint64_t)v64);
              MEMORY[0x2455D2770](a5, "");
              uint64_t v8 = 1;
              goto LABEL_136;
            default:
              int v60 = "Unknown PhotometricType";
              break;
          }
          MEMORY[0x2455D2770](a5, v60, v58);
          goto LABEL_135;
        }
LABEL_43:
        unint64_t v12 = (std::string *)"IESNA:LM-63-1995";
        goto LABEL_50;
      }
      if (*(_DWORD *)v85.__r_.__value_.__l.__data_ != 1314080073
        || *(_DWORD *)(v85.__r_.__value_.__r.__words[0] + 3) != 825835854)
      {
        goto LABEL_50;
      }
LABEL_49:
      unint64_t v12 = (std::string *)"IESNA91";
      goto LABEL_50;
    }
  }
  else if (*((unsigned char *)&v85.__r_.__value_.__s + 23))
  {
    if (HIBYTE(v85.__r_.__value_.__r.__words[2]) != 7)
    {
      if (HIBYTE(v85.__r_.__value_.__r.__words[2]) != 16)
      {
LABEL_41:
        unint64_t v12 = &v85;
        goto LABEL_50;
      }
      if (v85.__r_.__value_.__r.__words[0] != 0x4D4C3A414E534549
        || v85.__r_.__value_.__l.__size_ != 0x353939312D33362DLL)
      {
        if (v85.__r_.__value_.__r.__words[0] != 0x4D4C3A414E534549
          || v85.__r_.__value_.__l.__size_ != 0x323030322D33362DLL)
        {
          goto LABEL_41;
        }
        goto LABEL_35;
      }
      goto LABEL_43;
    }
    if (LODWORD(v85.__r_.__value_.__l.__data_) != 1314080073
      || *(_DWORD *)((char *)v85.__r_.__value_.__r.__words + 3) != 825835854)
    {
      goto LABEL_41;
    }
    goto LABEL_49;
  }
  char v15 = "Empty IES version";
LABEL_134:
  MEMORY[0x2455D2770](a5, v15);
LABEL_135:
  uint64_t v8 = 0;
LABEL_136:
  if (v82)
  {
    uint64_t v83 = v82;
    operator delete(v82);
  }
  if (v78[1])
  {
    *(void **)&long long v79 = v78[1];
    operator delete(v78[1]);
  }
  if (v77[0])
  {
    v77[1] = v77[0];
    operator delete(v77[0]);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(v64[0]);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v88 < 0) {
    operator delete(__dst);
  }
  return v8;
}

void sub_23F690618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  realityio::RIOIESInfo::~RIOIESInfo((realityio::RIOIESInfo *)&a17);
  if (*(char *)(v17 - 169) < 0) {
    operator delete(*(void **)(v17 - 192));
  }
  if (*(char *)(v17 - 145) < 0) {
    operator delete(*(void **)(v17 - 168));
  }
  if (*(char *)(v17 - 121) < 0) {
    operator delete(*(void **)(v17 - 144));
  }
  _Unwind_Resume(a1);
}

double realityio::anonymous namespace'::getLineContent(std::string *a1, std::string *a2, std::string *a3, char a4, int a5)
{
  uint64_t size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    __int16 v11 = a1;
  }
  else {
    __int16 v11 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    uint64_t size = a1->__r_.__value_.__l.__size_;
  }
  unint64_t v12 = (unint64_t)v11 + size;
  char v13 = v11;
  if (size >= 1)
  {
    do
    {
      int v14 = v13->__r_.__value_.__s.__data_[0];
      if (v14 == 10 || v14 == 13) {
        break;
      }
      char v16 = (char)v14 < 33 ? a4 : 0;
      char v17 = v14 == 44 ? a5 : 0;
      if (v16) {
        break;
      }
      if (v17) {
        break;
      }
      char v13 = (std::string *)((char *)v13 + 1);
    }
    while ((unint64_t)v13 < v12);
  }
  std::string::assign(a3, a1, 0, (char *)v13 - (char *)v11);
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = (std::string::size_type)a1;
  }
  else {
    std::string::size_type v18 = a1->__r_.__value_.__r.__words[0];
  }
  std::string::assign(a2, a1, (std::string::size_type)v13 - v18, v12 - (void)v13);
}

float realityio::anonymous namespace'::getFloat(std::string *a1, std::string *a2, float *a3, int a4)
{
  memset(&v8, 0, sizeof(v8));
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v6 = (void *)v8.__r_.__value_.__r.__words[0];
    float v7 = atof(v8.__r_.__value_.__l.__data_);
    *a3 = v7;
    operator delete(v6);
  }
  else
  {
    float result = atof((const char *)&v8);
    *a3 = result;
  }
  return result;
}

void sub_23F690818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::anonymous namespace'::getInt(std::string *a1, std::string *a2, int *a3)
{
  memset(&v5, 0, sizeof(v5));
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
  {
    int v4 = (void *)v5.__r_.__value_.__r.__words[0];
    *a3 = atoi(v5.__r_.__value_.__l.__data_);
    operator delete(v4);
  }
  else
  {
    *a3 = atoi((const char *)&v5);
  }
}

void sub_23F6908A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double realityio::anonymous namespace'::skipSpaceAndLineEnd(std::string *__str, uint64_t a2, int a3)
{
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  int v6 = (char)size;
  std::string::size_type v7 = 0;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v6 >= 0) {
      std::string v8 = __str;
    }
    while (1)
    {
      int v9 = v8->__r_.__value_.__s.__data_[v7];
      BOOL v10 = v9 == 10 || v9 == 13;
      if (!v10 && (char)v9 > 32) {
        break;
      }
      if (size == ++v7)
      {
LABEL_21:
        std::string::size_type v7 = size;
        goto LABEL_22;
      }
    }
  }
  if (v7 < size && a3 != 0)
  {
    unint64_t v12 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v6 >= 0) {
      unint64_t v12 = __str;
    }
    while (v12->__r_.__value_.__s.__data_[v7] == 44)
    {
      if (size == ++v7) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  std::string::basic_string(&v14, __str, v7, size - v7, (std::allocator<char> *)&v15);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v14.__r_.__value_.__l.__data_;
  *(std::string *)a2 = v14;
  return result;
}

float realityio::anonymous namespace'::mirrorData(realityio::_anonymous_namespace_ *this, realityio::RIOIESInfo *a2, float a3)
{
  uint64_t v5 = *((void *)this + 13);
  uint64_t v6 = v5 - *((void *)this + 12);
  if (v6)
  {
    uint64_t v7 = v6 >> 2;
    do
    {
      --v7;
      std::string v8 = (float *)*((void *)this + 12);
      int v9 = (float *)*((void *)this + 13);
      float v10 = (float)(a3 + a3) - v8[v7];
      unint64_t v11 = *((void *)this + 14);
      if ((unint64_t)v9 >= v11)
      {
        uint64_t v13 = v9 - v8;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)v8;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          char v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 112, v16);
          std::string v8 = (float *)*((void *)this + 12);
          int v9 = (float *)*((void *)this + 13);
        }
        else
        {
          char v17 = 0;
        }
        std::string::size_type v18 = (float *)&v17[4 * v13];
        *std::string::size_type v18 = v10;
        unint64_t v12 = v18 + 1;
        while (v9 != v8)
        {
          int v19 = *((_DWORD *)v9-- - 1);
          *((_DWORD *)v18-- - 1) = v19;
        }
        *((void *)this + 12) = v18;
        *((void *)this + 13) = v12;
        *((void *)this + 14) = &v17[4 * v16];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        float *v9 = v10;
        unint64_t v12 = v9 + 1;
      }
      *((void *)this + 13) = v12;
      int v20 = *((_DWORD *)this + 9);
      if (v20 >= 1)
      {
        int v21 = 0;
        int v22 = (char *)*((void *)this + 19);
        do
        {
          int v23 = *((_DWORD *)this + 10) - 1;
          if (v23 >= (int)v7) {
            int v23 = v7;
          }
          int v24 = v23 & ~(v23 >> 31);
          int v25 = v20 - 1;
          if (v20 - 1 >= v21) {
            int v25 = v21;
          }
          int v26 = (char *)*((void *)this + 18);
          int v27 = *(_DWORD *)&v26[4 * (v25 & ~(v25 >> 31)) + 4 * v24 * v20];
          unint64_t v28 = *((void *)this + 20);
          if ((unint64_t)v22 >= v28)
          {
            uint64_t v30 = (v22 - v26) >> 2;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 62) {
              std::vector<char const*>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v32 = v28 - (void)v26;
            if (v32 >> 1 > v31) {
              unint64_t v31 = v32 >> 1;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              size_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 160, v33);
              int v26 = (char *)*((void *)this + 18);
              int v22 = (char *)*((void *)this + 19);
            }
            else
            {
              size_t v34 = 0;
            }
            int v35 = &v34[4 * v30];
            *(_DWORD *)int v35 = v27;
            int v29 = v35 + 4;
            while (v22 != v26)
            {
              int v36 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v35 - 1) = v36;
              v35 -= 4;
            }
            *((void *)this + 18) = v35;
            *((void *)this + 19) = v29;
            *((void *)this + 20) = &v34[4 * v33];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_DWORD *)int v22 = v27;
            int v29 = v22 + 4;
          }
          *((void *)this + 19) = v29;
          ++v21;
          int v20 = *((_DWORD *)this + 9);
          int v22 = v29;
        }
        while (v21 < v20);
      }
    }
    while (v7);
    uint64_t v5 = *((void *)this + 12);
    uint64_t v37 = *((void *)this + 13);
  }
  else
  {
    uint64_t v37 = *((void *)this + 13);
  }
  float result = a3 + a3;
  *((float *)this + 32) = a3 + a3;
  *((_DWORD *)this + 10) = (unint64_t)(v37 - v5) >> 2;
  return result;
}

uint64_t realityio::RIOIESInfo::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  long long v4 = *(_OWORD *)(a2 + 52);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 52) = v4;
  if (a1 != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 96), *(char **)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 2);
    long long v6 = *(_OWORD *)(a2 + 120);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v6;
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)(a2 + 144), *(void *)(a2 + 152), (uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 2);
  }
  return a1;
}

void realityio::RIOIESInfo::~RIOIESInfo(realityio::RIOIESInfo *this)
{
  int v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

float realityio::anonymous namespace'::computeFilterPos(realityio::_anonymous_namespace_ *this, float a2, float *a3)
{
  float v3 = *(float *)this;
  float v4 = 0.0;
  if (*(float *)this <= a2)
  {
    unint64_t v5 = (int)a3 - 1;
    if (*((float *)this + v5) >= a2)
    {
      unint64_t v6 = 0;
      if (a3 != 1)
      {
        do
        {
          unint64_t v7 = (v6 + v5 + 1) >> 1;
          if (*((float *)this + v7) <= a2) {
            unint64_t v6 = (v6 + v5 + 1) >> 1;
          }
          else {
            unint64_t v5 = v7 - 1;
          }
        }
        while (v6 < v5);
        float v3 = *((float *)this + v6);
      }
      float v8 = 0.0;
      if (v6 + 1 < a3)
      {
        float v9 = *((float *)this + v6 + 1) - v3;
        if (v9 > 0.0001) {
          float v8 = (float)(a2 - v3) / v9;
        }
      }
      return v8 + (float)v6;
    }
    else
    {
      return (float)v5;
    }
  }
  return v4;
}

uint64_t realityio::RIOIESInfoGenerateTexture2D(realityio *this, realityio::RIOIESInfo *a2, void *a3, unsigned int a4, int a5, int a6)
{
  if (!a4)
  {
    char v78 = 1;
    return v78 & 1;
  }
  int v8 = (int)a3;
  BOOL v10 = 0;
  unsigned int v11 = 0;
  float v81 = (float)a4;
  float v90 = (float)a3;
  __asm
  {
    FMOV            V3.4S, #3.0
    FMOV            V2.4S, #-3.0
  }
  float32x4_t v88 = _Q2;
  float32x4_t v89 = _Q3;
  __asm { FMOV            V2.4S, #5.0 }
  float32x4_t v87 = _Q2;
  float v19 = 1.0 / *((float *)this + 34);
  __asm { FMOV            V0.4S, #1.0 }
  int32x4_t v84 = _Q0;
  int v21 = a2;
  std::string v85 = a2;
  unsigned int v86 = a2;
  do
  {
    unsigned int v83 = v11;
    if (v8)
    {
      char v80 = v10;
      float v22 = (float)((float)((float)((float)((float)v11 / v81) * 180.0) / 360.0)
                  + (float)((float)((float)((float)v11 / v81) * 180.0) / 360.0))
          * 3.14159265;
      __float2 v23 = __sincosf_stret(v22);
      unsigned int v24 = 0;
      float v25 = acosf(v23.__cosval) / -6.28318531 * 360.0;
      float v26 = v25 + 180.0;
      do
      {
        float v27 = (float)((float)((float)((float)((float)v24 / v90) * 360.0) / 360.0)
                    + (float)((float)((float)((float)v24 / v90) * 360.0) / 360.0))
            * 3.14159265;
        __float2 v28 = __sincosf_stret(v27);
        float v29 = atan2f(v23.__sinval * v28.__sinval, v23.__sinval * v28.__cosval) / 6.28318531 * 360.0;
        for (float i = (float)(v29 + 180.0) + 90.0; i > 360.0; float i = i + -360.0)
          ;
        unsigned int v31 = *((_DWORD *)this + 9);
        unsigned int v33 = *((_DWORD *)this + 10);
        signed int v35 = vcvtms_s32_f32(v34);
        signed int v36 = vcvtms_s32_f32(v32);
        float v37 = v34 - (float)(int)floorf(v34);
        float v38 = (float)(int)floorf(v32);
        int v39 = v35 - 1;
        int v40 = v36 - 1;
        signed int v41 = v33 - 1;
        if ((int)(v33 - 1) < v35 - 1) {
          int v39 = v33 - 1;
        }
        int v42 = v39 & ~(v39 >> 31);
        signed int v43 = v31 - 1;
        if ((int)(v31 - 1) < v40) {
          int v40 = v31 - 1;
        }
        int v44 = v40 & ~(v40 >> 31);
        int v45 = v42 * v31;
        int v46 = v42 * v31 + v44;
        uint64_t v47 = *((void *)this + 18);
        if (v41 >= v35) {
          int v48 = v35;
        }
        else {
          int v48 = v33 - 1;
        }
        int v49 = (v48 & ~(v48 >> 31)) * v31;
        if (v41 >= v35 + 1) {
          int v50 = v35 + 1;
        }
        else {
          int v50 = v33 - 1;
        }
        int v51 = (v50 & ~(v50 >> 31)) * v31;
        int v52 = v35 + 2;
        if (v41 < v52) {
          int v52 = v33 - 1;
        }
        int v53 = (v52 & ~(v52 >> 31)) * v31;
        if (v43 >= v36) {
          int v55 = v36;
        }
        else {
          int v55 = v31 - 1;
        }
        int v56 = v55 & ~(v55 >> 31);
        v57.i32[0] = *(_DWORD *)(v47 + 4 * (v45 + v56));
        v57.i32[1] = *(_DWORD *)(v47 + 4 * (v49 + v56));
        v57.i32[2] = *(_DWORD *)(v47 + 4 * (v51 + v56));
        v57.i32[3] = *(_DWORD *)(v47 + 4 * (v53 + v56));
        if (v43 >= v36 + 1) {
          int v58 = v36 + 1;
        }
        else {
          int v58 = v31 - 1;
        }
        int v59 = v58 & ~(v58 >> 31);
        int v61 = v36 + 2;
        if (v43 < v61) {
          int v61 = v31 - 1;
        }
        int v62 = v61 & ~(v61 >> 31);
        _Q5.i32[0] = *(_DWORD *)(v47 + 4 * (v45 + v62));
        _Q5.i32[1] = *(_DWORD *)(v47 + 4 * (v49 + v62));
        _Q5.i32[2] = *(_DWORD *)(v47 + 4 * (v51 + v62));
        _Q5.i32[3] = *(_DWORD *)(v47 + 4 * (v53 + v62));
        v64.i64[0] = 0x3F0000003F000000;
        v64.i64[1] = 0x3F0000003F000000;
        v54.i32[3] = *(_DWORD *)(v47 + 4 * (v53 + v44));
        _Q4.i32[3] = *(_DWORD *)(v47 + 4 * (v53 + v59));
        v54.i32[2] = *(_DWORD *)(v47 + 4 * (v51 + v44));
        _Q4.i32[2] = *(_DWORD *)(v47 + 4 * (v51 + v59));
        v54.i32[1] = *(_DWORD *)(v47 + 4 * (v49 + v44));
        _Q4.i32[1] = *(_DWORD *)(v47 + 4 * (v49 + v59));
        v54.i32[0] = *(_DWORD *)(v47 + 4 * v46);
        _Q4.i32[0] = *(_DWORD *)(v47 + 4 * (v45 + v59));
        _Q2 = vmlaq_n_f32(v57, vmlaq_n_f32(vmulq_f32(vsubq_f32(_Q4, v54), v64), vmlaq_n_f32(vaddq_f32(_Q4, vaddq_f32(_Q4, vmlsq_f32(v54, v64, vmlaq_f32(_Q5, v87, v57)))), vmlaq_f32(vmlaq_f32(vmlsq_f32(vmulq_f32(vmulq_f32(v57, v89), v64), v64, v54), v64, vmulq_f32(_Q4, v88)), v64, _Q5), v32 - v38), v32 - v38), v32 - v38);
        _S6 = 3.0;
        __asm { FMLA            S5, S6, V2.S[1] }
        _S6 = -3.0;
        __asm { FMLA            S5, S6, V2.S[2] }
        _S6 = 5.0;
        __asm { FMLA            S4, S6, V2.S[1] }
        _S0 = v19
            * (float)(_Q2.f32[1]
                    + (float)((float)((float)((float)(_Q2.f32[2] - _Q2.f32[0]) * 0.5)
                                    + (float)((float)((float)(_Q2.f32[2]
                                                            + (float)(_Q2.f32[2]
                                                                    + (float)(_Q2.f32[0] - (float)(_Q4.f32[0] * 0.5))))
                                                    + (float)((float)((float)(_Q2.f32[3] + _Q5.f32[0]) * 0.5) * v37))
                                            * v37))
                            * v37));
        switch(a6)
        {
          case 1:
            int v71 = (int)(float)((float)(_S0 * 255.0) + 0.5);
            if (a5 == 4)
            {
              *(unsigned char *)int v21 = v71;
              *((unsigned char *)v21 + 1) = v71;
              *((unsigned char *)v21 + 2) = v71;
              *((unsigned char *)v21 + 3) = -1;
              int v21 = (realityio::RIOIESInfo *)((char *)v21 + 4);
            }
            else
            {
              if (a5 != 1) {
                goto LABEL_46;
              }
              *(unsigned char *)int v21 = v71;
              int v21 = (realityio::RIOIESInfo *)((char *)v21 + 1);
            }
            break;
          case 2:
            __asm { FCVT            H0, S0 }
            int v73 = (int)_H0;
            if (a5 == 4)
            {
              int16x4_t v76 = (int16x4_t)-1;
              v76.i16[0] = v73;
              int16x4_t v77 = vzip1_s16(v76, v76);
              v77.i16[2] = v73;
              *(int16x4_t *)std::string v85 = v77;
              std::string v85 = (realityio::RIOIESInfo *)((char *)v85 + 8);
            }
            else
            {
              if (a5 != 1)
              {
LABEL_46:
                char v78 = v80;
                return v78 & 1;
              }
              *(_WORD *)std::string v85 = v73;
              std::string v85 = (realityio::RIOIESInfo *)((char *)v85 + 2);
            }
            break;
          case 4:
            if (a5 == 4)
            {
              int32x4_t v74 = v84;
              *(float *)v74.i32 = _S0;
              int32x4_t v75 = vzip1q_s32(v74, v74);
              *(float *)&v75.i32[2] = _S0;
              *(int32x4_t *)unsigned int v86 = v75;
              unsigned int v70 = (realityio::RIOIESInfo *)((char *)v86 + 16);
            }
            else
            {
              if (a5 != 1) {
                goto LABEL_46;
              }
              *(float *)unsigned int v86 = _S0;
              unsigned int v70 = (realityio::RIOIESInfo *)((char *)v86 + 4);
            }
            unsigned int v86 = v70;
            break;
          default:
            goto LABEL_46;
        }
        ++v24;
      }
      while (v24 != v8);
    }
    unsigned int v11 = v83 + 1;
    BOOL v10 = v83 + 1 >= a4;
  }
  while (v83 + 1 != a4);
  char v78 = 1;
  return v78 & 1;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  float v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    float result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    float v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      std::string::size_type v18 = v9;
      float v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    float result = (char *)memmove(*(void **)result, __src, v14 - v9);
    float v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    std::string::size_type v18 = v9;
    float v19 = v16;
LABEL_18:
    float result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType *realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType::SpatialAudioBuilderTokens_StaticTokenType(realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType *this)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  float v27 = (uint64_t *)(MEMORY[0x2455CF820](this, "auralMode", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 80, "nonSpatial", 0);
  MEMORY[0x2455CF820]((char *)this + 88, "onceFromStart", 0);
  MEMORY[0x2455CF820]((char *)this + 96, "onceFromStartToEnd", 0);
  MEMORY[0x2455CF820]((char *)this + 104, "playbackMode", 0);
  MEMORY[0x2455CF820]((char *)this + 112, "SpatialAudio", 0);
  MEMORY[0x2455CF820]((char *)this + 120, "spatial", 0);
  MEMORY[0x2455CF820]((char *)this + 128, "startTime", 0);
  MEMORY[0x2455CF820]((char *)this + 136, "timeCodesPerSecond", 0);
  MEMORY[0x2455CF820]((char *)this + 144, "timeSamples", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v28 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v27;
  uint64_t v29 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v30 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v31 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v32 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v33 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v34 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v35 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v36 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v37 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v37 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v38 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v39 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v40 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v41 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v42 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v43 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v44 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v45 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v46 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  int v21 = (char *)operator new(0x98uLL);
  uint64_t v22 = 0;
  *((void *)this + 19) = v21;
  *((void *)this + 20) = v21;
  *((void *)this + 21) = v21 + 152;
  do
  {
    uint64_t v23 = *(uint64_t *)((char *)&v28 + v22);
    *(void *)&v21[v22] = v23;
    if ((v23 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v21[v22] &= 0xFFFFFFFFFFFFFFF8;
    }
    v22 += 8;
  }
  while (v22 != 152);
  *((void *)this + 20) = v21 + 152;
  for (uint64_t i = 144; i != -8; i -= 8)
  {
    uint64_t v25 = *(uint64_t *)((char *)&v28 + i);
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F691A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void **a20,uint64_t a21,char a22)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a20);
  uint64_t v32 = 144;
  while (1)
  {
    uint64_t v33 = *(void *)(&a22 + v32);
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v32 -= 8;
    if (v32 == -8)
    {
      if ((*v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F691C70()
{
}

void sub_23F691C78()
{
}

void sub_23F691C80()
{
}

void sub_23F691C88()
{
}

void sub_23F691C90()
{
}

void sub_23F691C98()
{
}

void sub_23F691CA0()
{
}

void sub_23F691CA8()
{
}

void sub_23F691CB0()
{
}

void sub_23F691CB8()
{
}

void realityio::generateSpatialAudioDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40870, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40870))
  {
    operator new();
  }
  uint64_t v3 = *(void *)algn_268C40868;
  *a1 = _MergedGlobals_31;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F6923AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51)
{
  MEMORY[0x2455D2BD0](v52, 0x10A1C40F82F910ELL);
  a51 = (void **)&a40;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a51);
  uint64_t v56 = 24;
  while (1)
  {
    float32x4_t v57 = *(std::__shared_weak_count **)(v54 - 144 + v56);
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    v56 -= 16;
    if (v56 == -8)
    {
      if (a36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a36);
      }
      if (a38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a38);
      }
      MEMORY[0x2455D2BD0](v51, 0x10A1C401BF1BAA1);
      MEMORY[0x2455D2BD0](v53, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_268C40870);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t RIOPxrUsdVariantSetsGetTypeID()
{
  if (RIOPxrUsdVariantSetsGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdVariantSetsGetTypeID::onceToken, &__block_literal_global_19);
  }
  return RIOPxrUsdVariantSetsGetTypeID::typeID;
}

void __RIOPxrUsdVariantSetsGetTypeID_block_invoke()
{
  if (!RIOPxrUsdVariantSetsGetTypeID::typeID) {
    RIOPxrUsdVariantSetsGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrUsdVariantSetsCreateVariantSet(uint64_t a1, char *a2)
{
  int v16 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v17 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, (_DWORD *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v20 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::AddVariantSet();
  if (v9 < 0) {
    operator delete(__p);
  }
  uint64_t v6 = RIOPxrUsdVariantSetCreate<pxrInternal__aapl__pxrReserved__::UsdVariantSet &>((const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v10);
  if (v15 < 0) {
    operator delete(v14);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  }
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v17) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  }
  return v6;
}

void sub_23F692A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)(v15 - 64));
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetCreate<pxrInternal__aapl__pxrReserved__::UsdVariantSet &>(const pxrInternal__aapl__pxrReserved__::UsdVariantSet *a1)
{
  if (RIOPxrUsdVariantSetGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdVariantSetGetTypeID::onceToken, &__block_literal_global_4);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  if (Instance) {
    pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(Instance + 16), a1);
  }
  return v3;
}

void pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets(pxrInternal__aapl__pxrReserved__::UsdVariantSets *this)
{
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

__CFArray *RIOPxrUsdVariantSetsCopySetNames(uint64_t a1)
{
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v12 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, (_DWORD *)(a1 + 36));
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v15 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v15 &= 0xFFFFFFFFFFFFFFF8;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetNames(v10, (pxrInternal__aapl__pxrReserved__::UsdVariantSets *)&v11);
  uint64_t v5 = v10[0];
  uint64_t v6 = v10[1];
  while (v5 != v6)
  {
    uint64_t v7 = (const char *)v5;
    if (*(char *)(v5 + 23) < 0) {
      uint64_t v7 = *(const char **)v5;
    }
    CFStringRef v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
    v5 += 24;
  }
  int v16 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v16);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  if (v12) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  }
  return Mutable;
}

void sub_23F692C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetsCopyVariantSet(uint64_t a1, char *a2)
{
  int v16 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v17 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, (_DWORD *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v20 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSet();
  if (v9 < 0) {
    operator delete(__p);
  }
  uint64_t v6 = RIOPxrUsdVariantSetCreate<pxrInternal__aapl__pxrReserved__::UsdVariantSet &>((const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v10);
  if (v15 < 0) {
    operator delete(v14);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  }
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v17) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  }
  return v6;
}

void sub_23F692E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)(v15 - 64));
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetsHasVariantSet(uint64_t a1, char *a2)
{
  int v10 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v11 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, (_DWORD *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v14 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v14 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  uint64_t HasVariantSet = pxrInternal__aapl__pxrReserved__::UsdVariantSets::HasVariantSet();
  if (v9 < 0) {
    operator delete(__p);
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  }
  return HasVariantSet;
}

void sub_23F692F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)&a16);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrUsdVariantSetsCopyVariantSelection(uint64_t a1, char *a2)
{
  int v13 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v14 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, (_DWORD *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v17 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v17 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSelection();
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v12 >= 0) {
    uint64_t v6 = (const char *)&v11;
  }
  else {
    uint64_t v6 = (const char *)v11;
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0x8000100u);
  if (v12 < 0) {
    operator delete(v11);
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (v14) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  }
  return v7;
}

void sub_23F6930E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)&a21);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetsSetSelection(uint64_t a1, char *a2, char *a3)
{
  int v21 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v22 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, (_DWORD *)(a1 + 36));
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v25 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSet();
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  CFStringRef v8 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)v15);
  std::recursive_mutex::lock(v8);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  std::string::basic_string[abi:ne180100]<0>(&v11, a3);
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::UsdVariantSets::SetSelection();
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  std::recursive_mutex::unlock(v8);
  if (v20 < 0) {
    operator delete(v19);
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  if (v16) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  if (v22) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  }
  return v9;
}

void sub_23F6932E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::recursive_mutex::unlock(v22);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a22);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)(v23 - 80));
  _Unwind_Resume(a1);
}

__CFDictionary *RIOPxrUsdVariantSetsCopyAllVariantSelections(uint64_t a1)
{
  int v16 = *(_DWORD *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v17 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, (_DWORD *)(a1 + 36));
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v20 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetAllVariantSelections((uint64_t *)&v14, (pxrInternal__aapl__pxrReserved__::UsdVariantSets *)&v16);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v5 = v14;
  if (v14 != v15)
  {
    do
    {
      uint64_t v6 = (const char *)(v5 + 4);
      if (*((char *)v5 + 55) < 0) {
        uint64_t v6 = *(const char **)v6;
      }
      CFStringRef v7 = CFStringCreateWithCString(0, v6, 0x8000100u);
      CFStringRef v8 = (const char *)(v5 + 7);
      if (*((char *)v5 + 79) < 0) {
        CFStringRef v8 = *(const char **)v8;
      }
      CFStringRef v9 = CFStringCreateWithCString(0, v8, 0x8000100u);
      CFDictionaryAddValue(Mutable, v7, v9);
      CFRelease(v7);
      CFRelease(v9);
      char v10 = v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = (void **)v10;
          char v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void **)v5[2];
          BOOL v12 = *v11 == v5;
          uint64_t v5 = v11;
        }
        while (!v12);
      }
      uint64_t v5 = v11;
    }
    while (v11 != v15);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v14, v15[0]);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v17) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  }
  return Mutable;
}

void sub_23F693540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)va, v5);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)va1);
  _Unwind_Resume(a1);
}

uint64_t _RIOPxrUsdVariantSetsCFFinalize(void *a1)
{
  uint64_t v2 = a1[5];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
  uint64_t result = a1[3];
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

BOOL _RIOPxrUsdVariantSetsCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrUsdVariantSetsCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrUsdVariantSetsCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdVariantSets %p>", a1);
}

CFStringRef _RIOPxrUsdVariantSetsCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdVariantSets %p>", a1);
}

uint64_t RIOCancellableGetTypeID()
{
  if (RIOCancellableGetTypeID::onceToken != -1) {
    dispatch_once(&RIOCancellableGetTypeID::onceToken, &__block_literal_global_20);
  }
  return RIOCancellableGetTypeID::typeID;
}

void __RIOCancellableGetTypeID_block_invoke()
{
  if (!RIOCancellableGetTypeID::typeID) {
    RIOCancellableGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOCancellableCancel(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 16) + 16))();
  }
  return result;
}

uint64_t _RIOCancellableCFFinalize(void *a1)
{
  uint64_t result = a1[2];
  a1[2] = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

BOOL _RIOCancellableCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOCancellableCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOCancellableCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOCancellable %p>", a1);
}

CFStringRef _RIOCancellableCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOCancellable %p>", a1);
}

realityio::DirectionalLightComponentBuilder *realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(realityio::DirectionalLightComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[24] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "DirectionalLightComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kDirectionalLightComponentBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40898, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40898))
  {
    operator new();
  }
  uint64_t v5 = qword_268C40888;
  uint64_t v6 = (std::__shared_weak_count *)unk_268C40890;
  if (unk_268C40890) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C40890 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F342960;
  v12[3] = v12;
  v11[0] = &unk_26F3429E0;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F3428E8;
  return this;
}

void sub_23F693EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  MEMORY[0x2455D2BD0](v50, 0x10A1C40F82F910ELL);
  *(void *)(v53 - 256) = &a50;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 256));
  MEMORY[0x2455D2BD0](v51, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v52, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40898);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::DirectionalLightComponentBuilder::run(realityio::DirectionalLightComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v23 = a2;
  unint64_t v3 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v19, v4, v3);
  unint64_t v5 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeColor4FAndGamut((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 72), &v26, (__n128)xmmword_23F7CD1B0);
  __n128 v24 = v26;
  char v25 = v27;
  float v18 = 0.0;
  unint64_t v6 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 56), (uint64_t)&v26);
  if (v26.n128_u8[0])
  {
    unsigned __int32 v7 = v26.n128_u32[2];
  }
  else
  {
    unsigned __int32 v7 = 1.0;
    if (v29 < 0) {
      operator delete(__p);
    }
  }
  float v18 = *(float *)&v7;
  unsigned __int32 v17 = 0;
  unint64_t v8 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 64), (uint64_t)&v26);
  if (v26.n128_u8[0])
  {
    unsigned __int32 v10 = v26.n128_u32[2];
  }
  else
  {
    unsigned __int32 v10 = 0;
    if (v29 < 0) {
      operator delete(__p);
    }
  }
  unsigned __int32 v17 = v10;
  float v18 = realityio::scaleLightIntensityByStageUnits((realityio *)&v19, v9, *MEMORY[0x263F36F90] * v18);
  uint64_t v16 = 0;
  uint64_t v11 = *((void *)v23 + 6);
  BOOL v12 = operator new(0x40uLL);
  *BOOL v12 = &unk_26F342A60;
  v12[1] = &v23;
  void v12[2] = &v19;
  v12[3] = this;
  v12[4] = &v16;
  void v12[5] = &v18;
  v12[6] = &v17;
  v12[7] = &v24;
  std::string __p = v12;
  (*(void (**)(uint64_t, __n128 *))(*(void *)v11 + 16))(v11, &v26);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v26);
  uint64_t v14 = *((void *)this + 2);
  int v13 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40880, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40880))
  {
    operator new();
  }
  realityio::Outputs::storeValue<REComponent *&>(v14, (long long *)_MergedGlobals_32, &v16);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  uint64_t result = v20;
  if (v20) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  }
  return result;
}

void sub_23F694650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MEMORY[0x2455D2BD0](v5, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_268C40880);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<REComponent *&>(uint64_t a1, long long *a2, uint64_t *a3)
{
  unint64_t v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  unsigned __int32 v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *unsigned __int32 v7 = &unk_26F342B60;
  uint64_t v8 = *a3;
  v7[3] = &unk_26F342BB0;
  v7[4] = v8;
  uint64_t v11 = a2;
  CFStringRef v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  unsigned __int32 v10 = (std::__shared_weak_count *)v9[8];
  v9[7] = (uint64_t)(v7 + 3);
  unsigned char v9[8] = (uint64_t)v7;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F6947D0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *realityio::DirectionalLightComponentBuilder::clear(realityio::DirectionalLightComponentBuilder *this, realityio::Inputs *a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a2 + 6);
  uint64_t v4 = a2;
  v5[0] = &unk_26F342BE0;
  v5[1] = &v4;
  v5[3] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v5);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_23F6948A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::DirectionalLightComponentBuilder::~DirectionalLightComponentBuilder(realityio::DirectionalLightComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F342960;
  return result;
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F342960;
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), &v7, &v8);
  unint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F694A68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F3429E0;
  return result;
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3429E0;
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  unint64_t v4 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v6 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>("none", (std::string::size_type *)(v4 + 88), &v6, &v7);
  unint64_t v5 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_23F694C64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26F342A60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F342A60;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = **(void **)(a1 + 8);
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v3, v4, (uint64_t)v15);
  if (v15[0])
  {
    unint64_t v5 = v16;
    uint64_t v14 = v16;
    if (v16)
    {
      RERetain();
      REDirectionalLightComponentGetComponentType();
      long long v11 = *(_OWORD *)(a1 + 48);
      long long v12 = *(_OWORD *)(a1 + 32);
      uint64_t v19 = 0;
      int v6 = operator new(0x30uLL);
      void *v6 = &unk_26F342AD0;
      v6[1] = v2;
      *((_OWORD *)v6 + 1) = v12;
      *((_OWORD *)v6 + 2) = v11;
      uint64_t v19 = v6;
      uint64_t v7 = REEntityGetOrAddComponentByClass();
      std::function<void ()(REComponent *)>::operator()((uint64_t)buf, v7);
      RENetworkMarkComponentDirty();
      std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](buf);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v8 = *(id *)(realityio::logObjects(v5) + 24);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), &v13);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v18 = Text;
    _os_log_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_DEFAULT, "Stopping operation to set directionalLight component because entity no longer exists for prim \"%s\"", buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  }

LABEL_8:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v14);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_23F694F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio32DirectionalLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio32DirectionalLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26F342AD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio32DirectionalLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F342AD0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio32DirectionalLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  **(void **)(a1 + 16) = v3;
  exp2f(**(float **)(a1 + 32));
  REDirectionalLightComponentSetIntensity();
  uint64_t v4 = *(__n128 **)(a1 + 40);
  __n128 v5 = *v4;
  uint64_t v6 = v4[1].n128_u8[0];

  return MEMORY[0x270F1D740](v3, v6, v5);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio32DirectionalLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio32DirectionalLightComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio32DirectionalLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio32DirectionalLightComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<REComponent *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<REComponent *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342B60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<REComponent *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F342BE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F342BE0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::EntityBuilder *a1)
{
  uint64_t v1 = **((void **)a1 + 1);
  uint64_t v2 = realityio::EntityBuilder::kInputName(a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v1, v2, (uint64_t)v5);
  if (v5[0])
  {
    uint64_t v4 = v6;
    if (v6)
    {
      RERetain();
      REDirectionalLightComponentGetComponentType();
      REEntityRemoveComponentByClass();
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v4);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v5);
}

void sub_23F695324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType *realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType::CapsuleMeshBuilderTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(MEMORY[0x2455CF820](this, "Capsule", 0) + 8);
  MEMORY[0x2455CF820](v2, "axis", 0);
  MEMORY[0x2455CF820](this + 2, "height", 0);
  MEMORY[0x2455CF820](this + 3, "radius", 0);
  MEMORY[0x2455CF820](this + 4, "material:binding", 0);
  uint64_t v3 = *this;
  uint64_t v19 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v19 = v4;
    }
  }
  __n128 v5 = *v2;
  uint64_t v20 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v21 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v21 = v8;
    }
  }
  CFStringRef v9 = this[3];
  uint64_t v22 = v9;
  if ((v9 & 7) != 0)
  {
    unsigned __int32 v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v22 = v10;
    }
  }
  long long v11 = this[4];
  uint64_t v23 = v11;
  if ((v11 & 7) != 0)
  {
    long long v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v12;
    }
  }
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  int v13 = (atomic_uint *)operator new(0x28uLL);
  unint64_t v14 = 0;
  this[5] = v13;
  this[6] = v13;
  this[7] = v13 + 10;
  do
  {
    int v15 = (&v19)[v14 / 2];
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 2;
  }
  while (v14 != 10);
  this[6] = v13 + 10;
  for (uint64_t i = 4; i != -1; --i)
  {
    unsigned __int32 v17 = (&v19)[i];
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType *)this;
}

void sub_23F6955BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v17 = 32;
  while (1)
  {
    uint64_t v18 = *(void *)(&a11 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::getCapsuleMeshBuilderDirtyStageDescriptor(realityio *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_23F695A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  MEMORY[0x2455D2BD0](v29, 0x10A1C40F82F910ELL);
  *(void *)(v30 - 160) = &a28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 160));
  MEMORY[0x2455D2BD0](v28, 0x10A1C401BF1BAA1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F695D88(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C4070C77B98);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Backdrop::CONTAINS_ATTRIBUTE(RIO_MTLX::Backdrop *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_33, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_33))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C408A8, "contains");
    __cxa_guard_release(&_MergedGlobals_33);
  }
}

void sub_23F695E20(_Unwind_Exception *a1)
{
}

void RIO_MTLX::Node::getNodeDef(std::string *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, RIO_MTLX::InterfaceElement **a4@<X8>)
{
  uint64_t v8 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE((RIO_MTLX::InterfaceElement *)a1);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&a1[6].__r_.__value_.__r.__words[2], v8))
  {
    NodeDefuint64_t String = (std::string *)RIO_MTLX::InterfaceElement::getNodeDefString((RIO_MTLX::InterfaceElement *)a1);
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeDef>((uint64_t)a1, NodeDefString, a4);
    return;
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &p_p);
  p_data = (void **)&p_p->__r_.__value_.__l.__data_;
  RIO_MTLX::Element::getQualifiedName((uint64_t)a1, a1 + 1, &__p);
  RIO_MTLX::Document::getMatchingNodeDefs((uint64_t)p_data, (unsigned __int8 *)&__p, (uint64_t *)&v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &p_p);
  RIO_MTLX::Document::getMatchingNodeDefs((uint64_t)p_p, (unsigned __int8 *)&a1[1], (uint64_t *)&__p);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  p_p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<RIO_MTLX::NodeDef>*>,std::__wrap_iter<std::shared_ptr<RIO_MTLX::NodeDef>*>>((uint64_t *)&v37, v38, (uint64_t *)__p.__r_.__value_.__l.__data_, (void *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
  long long v11 = v37;
  long long v12 = v38;
  if (v37 != v38)
  {
    int v13 = a3 ^ 1;
    do
    {
      unint64_t v14 = *v11;
      *a4 = *v11;
      int v15 = (atomic_ullong *)v11[1];
      a4[1] = (RIO_MTLX::InterfaceElement *)v15;
      if (v15)
      {
        atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
        unint64_t v14 = *a4;
      }
      Target = RIO_MTLX::InterfaceElement::getTarget(v14);
      if (RIO_MTLX::targetStringsMatch((uint64_t)Target, a2))
      {
        uint64_t v17 = *a4;
        Versionuint64_t String = RIO_MTLX::InterfaceElement::getVersionString((RIO_MTLX::InterfaceElement *)a1);
        if (RIO_MTLX::NodeDef::isVersionCompatible(v17, (unsigned __int8 *)VersionString))
        {
          uint64_t v19 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::InterfaceElement *))(*(void *)*a4 + 56))(*a4);
          uint64_t v20 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 56))(a1);
          uint64_t v21 = v19[23];
          if ((v21 & 0x80u) == 0) {
            uint64_t v22 = v19[23];
          }
          else {
            uint64_t v22 = *((void *)v19 + 1);
          }
          uint64_t v23 = *(unsigned __int8 *)(v20 + 23);
          int v24 = (char)v23;
          if ((v23 & 0x80u) != 0) {
            uint64_t v23 = *(void *)(v20 + 8);
          }
          if (v22 == v23)
          {
            if (v24 >= 0) {
              char v25 = (unsigned __int8 *)v20;
            }
            else {
              char v25 = *(unsigned __int8 **)v20;
            }
            if ((v21 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v19, v25, *((void *)v19 + 1)))
              {
LABEL_32:
                __n128 v26 = (std::__shared_weak_count *)a4[1];
                uint64_t v31 = *a4;
                uint64_t v32 = v26;
                if (v26) {
                  atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                int hasExactInputMatch = RIO_MTLX::InterfaceElement::hasExactInputMatch((RIO_MTLX::InterfaceElement *)a1, &v31, 0);
                if (v32) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
                }
                if ((hasExactInputMatch | v13))
                {
                  if (hasExactInputMatch) {
                    goto LABEL_47;
                  }
                }
                else
                {
                  std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::push_back[abi:ne180100]((uint64_t *)&p_p, (long long *)a4);
                }
              }
            }
            else
            {
              if (!v19[23]) {
                goto LABEL_32;
              }
              while (*v19 == *v25)
              {
                ++v19;
                ++v25;
                if (!--v21) {
                  goto LABEL_32;
                }
              }
            }
          }
        }
      }
      uint64_t v28 = (std::__shared_weak_count *)a4[1];
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      v11 += 2;
    }
    while (v11 != v12);
  }
  uint64_t v29 = (void **)&p_p->__r_.__value_.__l.__data_;
  if (p_p == (std::string *)v34)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    *a4 = (RIO_MTLX::InterfaceElement *)p_p->__r_.__value_.__r.__words[0];
    uint64_t v30 = (atomic_ullong *)v29[1];
    a4[1] = (RIO_MTLX::InterfaceElement *)v30;
    if (v30) {
      atomic_fetch_add_explicit(v30 + 1, 1uLL, memory_order_relaxed);
    }
  }
LABEL_47:
  uint64_t v39 = (void ***)&p_p;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  p_p = &__p;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_23F696164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **p_p, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  *(void *)(v20 - 72) = &p_p;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 72));
  p_p = (void **)&__p;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  std::string __p = &a20;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Node::getUpstreamEdge(RIO_MTLX::Node *this@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6 = (RIO_MTLX *)(*(uint64_t (**)(RIO_MTLX::Node *))(*(void *)this + 24))(this);
  if ((unint64_t)v6 <= a2) {
    goto LABEL_24;
  }
  uint64_t v7 = RIO_MTLX::EMPTY_STRING(v6);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>((uint64_t)this, (uint64_t)v7, v20);
  __n128 v8 = *(__n128 *)(v20[0] + 16 * a2);
  __n128 v17 = v8;
  CFStringRef v9 = *(std::__shared_weak_count **)(v20[0] + 16 * a2 + 8);
  if (v8.n128_u64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = (void **)v20;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v6 = (RIO_MTLX *)(*(void *(**)(uint64_t *__return_ptr, __n128))(*(void *)v17.n128_u64[0] + 64))(v20, v17);
  uint64_t v11 = v20[0];
  unsigned __int32 v10 = (std::__shared_weak_count *)v20[1];
  if (v20[0])
  {
    RIO_MTLX::Element::getSelfNonConst(this, &v18);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v12 = v19;
    a3->n128_u64[0] = v18;
    a3->n128_u64[1] = (unint64_t)v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    a3[1] = v17;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    a3[2].n128_u64[0] = v11;
    a3[2].n128_u64[1] = (unint64_t)v10;
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    uint64_t v6 = (RIO_MTLX *)v19;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (!v11)
  {
LABEL_24:
    int v13 = RIO_MTLX::NULL_EDGE(v6);
    unint64_t v14 = *((void *)v13 + 1);
    a3->n128_u64[0] = *(void *)v13;
    a3->n128_u64[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v15 = *((void *)v13 + 3);
    a3[1].n128_u64[0] = *((void *)v13 + 2);
    a3[1].n128_u64[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v16 = *((void *)v13 + 5);
    a3[2].n128_u64[0] = *((void *)v13 + 4);
    a3[2].n128_u64[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_23F6963F0(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Node::getDownstreamPorts(RIO_MTLX::Node *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  RIO_MTLX::Element::getDocument(this, &v18);
  RIO_MTLX::Document::getMatchingPorts(v18, (unsigned __int8 *)this + 48, (uint64_t *)&v19);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  uint64_t v4 = v19;
  __n128 v5 = v20;
  if (v19 != v20)
  {
    uint64_t v6 = (void *)((char *)this + 8);
    do
    {
      uint64_t v7 = *v4;
      *(void *)&long long v18 = *v4;
      uint64_t v8 = v4[1];
      *((void *)&v18 + 1) = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 64))(&v16);
      std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v14, v6);
      uint64_t v9 = v16;
      uint64_t v10 = v14;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if (v9 == v10) {
        std::vector<std::shared_ptr<RIO_MTLX::PortElement>>::push_back[abi:ne180100](a2, &v18);
      }
      if (*((void *)&v18 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  *(void *)&long long v18 = &v19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v11 = (uint64_t *)a2[1];
  unint64_t v12 = 126 - 2 * __clz(((uint64_t)v11 - *a2) >> 4);
  if (v11 == (uint64_t *)*a2) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  std::__introsort<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *,false>((uint64_t *)*a2, v11, v13, 1);
}

void sub_23F696570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

BOOL RIO_MTLX::Node::validate(uint64_t a1, std::string *a2)
{
  unsigned __int8 v26 = 1;
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 47);
  }
  char v5 = v4 != 0;
  std::string::basic_string[abi:ne180100]<0>(v24, "Node element is missing a category");
  RIO_MTLX::Element::validateRequire(a1, v5, &v26, a2, v24);
  if (v25 < 0) {
    operator delete((void *)v24[0]);
  }
  uint64_t v7 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v6);
  char v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 160), v7) != 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "Node element is missing a type");
  RIO_MTLX::Element::validateRequire(a1, v8, &v26, a2, (const void **)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = RIO_MTLX::EMPTY_STRING(v9);
  RIO_MTLX::Node::getNodeDef((std::string *)a1, (uint64_t)v10, 1, &v20);
  if (v20)
  {
    memset(&v19, 0, sizeof(v19));
    __n128 v17 = v20;
    long long v18 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char hasExactInputMatch = RIO_MTLX::InterfaceElement::hasExactInputMatch((RIO_MTLX::InterfaceElement *)a1, &v17, &v19);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    std::operator+<char>();
    RIO_MTLX::Element::validateRequire(a1, hasExactInputMatch, &v26, a2, (const void **)&v15);
    if (v16 < 0) {
      operator delete(v15);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  BOOL v12 = RIO_MTLX::Element::validate(a1, a2);
  int v13 = v26;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  return v13 && v12;
}

void sub_23F69678C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::GraphElement::addMaterialNode(RIO_MTLX *a1@<X0>, uint64_t a2@<X1>, const std::string **a3@<X2>, uint64_t *a4@<X8>)
{
  char v8 = (const std::string::value_type **)RIO_MTLX::SURFACE_MATERIAL_NODE_STRING(a1);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *v8, (std::string::size_type)v8[1]);
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)v8[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v9;
  }
  uint64_t v10 = (std::string *)*a3;
  if (!*a3) {
    goto LABEL_21;
  }
  uint64_t v11 = (size_t *)(*(uint64_t (**)(std::string *))(v10->__r_.__value_.__r.__words[0] + 56))(v10);
  uint64_t v10 = (std::string *)RIO_MTLX::VOLUME_MATERIAL_NODE_STRING((RIO_MTLX *)v11);
  uint64_t v12 = *((unsigned __int8 *)v11 + 23);
  if ((v12 & 0x80u) == 0) {
    size_t v13 = *((unsigned __int8 *)v11 + 23);
  }
  else {
    size_t v13 = v11[1];
  }
  std::string::size_type size = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  int v15 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = v10->__r_.__value_.__l.__size_;
  }
  if (v13 != size) {
    goto LABEL_21;
  }
  if (v15 >= 0) {
    char v16 = (unsigned __int8 *)v10;
  }
  else {
    char v16 = (unsigned __int8 *)v10->__r_.__value_.__r.__words[0];
  }
  if ((v12 & 0x80) != 0)
  {
    uint64_t v10 = (std::string *)memcmp((const void *)*v11, v16, v11[1]);
    if (v10) {
      goto LABEL_21;
    }
LABEL_20:
    __n128 v17 = (const std::string *)RIO_MTLX::VOLUME_SHADER_TYPE_STRING((RIO_MTLX *)v10);
    uint64_t v10 = std::string::operator=(&v28, v17);
    goto LABEL_21;
  }
  if (!*((unsigned char *)v11 + 23)) {
    goto LABEL_20;
  }
  while (*(unsigned __int8 *)v11 == *v16)
  {
    uint64_t v11 = (size_t *)((char *)v11 + 1);
    ++v16;
    if (!--v12) {
      goto LABEL_20;
    }
  }
LABEL_21:
  long long v18 = (const std::string *)RIO_MTLX::MATERIAL_TYPE_STRING((RIO_MTLX *)v10);
  RIO_MTLX::GraphElement::addNode(a1, &v28, a2, v18, a4);
  if (*a3)
  {
    std::string v19 = (RIO_MTLX::Input *)*a4;
    uint64_t v20 = (*(uint64_t (**)(const std::string *))((*a3)->__r_.__value_.__r.__words[0] + 56))(*a3);
    uint64_t v21 = (const std::string *)(*(uint64_t (**)(void))((*a3)->__r_.__value_.__r.__words[0] + 56))();
    uint64_t v22 = RIO_MTLX::InterfaceElement::addInput(v19, v20, v21, (uint64_t *)&v26);
    char v23 = v26;
    int v24 = *a3;
    char v25 = (long long *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v22);
    RIO_MTLX::Element::setAttribute(v23, v25, v24 + 2);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_23F696A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::ValueElement>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 96), a2);
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  char v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::ValueElement>(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F696AC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<RIO_MTLX::Node>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::Node>>::__swap_out_circular_buffer(a1, v18);
    long long v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F696BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void RIO_MTLX::GraphIterator::operator*(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[8];
  if (a1[7] == v2)
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 - 24);
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 16);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v5 = a1[2];
  unint64_t v6 = (std::__shared_weak_count *)a1[3];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a2 = v3;
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a2[2] = v5;
  a2[3] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a2[4] = v8;
  a2[5] = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void RIO_MTLX::NodeGraph::getNodeDef(RIO_MTLX::NodeGraph *this@<X0>, void *a2@<X8>)
{
  NodeDefuint64_t String = (std::string *)RIO_MTLX::InterfaceElement::getNodeDefString(this);
  RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeDef>((uint64_t)this, NodeDefString, a2);
  if (!*a2)
  {
    uint64_t v56 = (std::string *)this;
    uint64_t v54 = a2;
    RIO_MTLX::Element::getDocument(this, &v58);
    uint64_t v5 = v58;
    uint64_t v7 = RIO_MTLX::EMPTY_STRING(v6);
    uint64_t v8 = *(uint64_t **)(v5 + 136);
    long long v9 = *(uint64_t **)(v5 + 144);
    int v60 = 0;
    int v61 = 0;
    int v62 = 0;
    if (v8 != v9)
    {
      uint64_t v10 = v7;
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      int v55 = 0;
      unint64_t v13 = 0;
      uint64_t v52 = v9;
      uint64_t v53 = v7;
      while (1)
      {
        uint64_t v15 = *v8;
        uint64_t v14 = (std::__shared_weak_count *)v8[1];
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RIO_MTLX::Element::asA<RIO_MTLX::Implementation>(v15, &__p);
        std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0]) {
          goto LABEL_47;
        }
        int v17 = *((char *)v10 + 23);
        uint64_t v18 = v10[1];
        if (v17 >= 0) {
          uint64_t v18 = *((unsigned __int8 *)v10 + 23);
        }
        if (!v18) {
          goto LABEL_23;
        }
        uint64_t v19 = *(unsigned __int8 *)(v15 + 47);
        if ((v19 & 0x80u) == 0) {
          uint64_t v20 = *(unsigned __int8 *)(v15 + 47);
        }
        else {
          uint64_t v20 = *(void *)(v15 + 32);
        }
        if (v20 == v18)
        {
          uint64_t v21 = (const void **)(v15 + 24);
          if (v17 >= 0) {
            uint64_t v22 = (unsigned __int8 *)v10;
          }
          else {
            uint64_t v22 = (unsigned __int8 *)*v10;
          }
          if ((v19 & 0x80) == 0)
          {
            if (*(unsigned char *)(v15 + 47))
            {
              while (*(unsigned __int8 *)v21 == *v22)
              {
                uint64_t v21 = (const void **)((char *)v21 + 1);
                ++v22;
                if (!--v19) {
                  goto LABEL_23;
                }
              }
              goto LABEL_47;
            }
LABEL_23:
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            if (v13 >= v55)
            {
              uint64_t v24 = (v13 - (char *)v12) >> 4;
              unint64_t v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 60)
              {
                int v61 = v11;
                int v62 = v55;
                int v60 = v12;
                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
              }
              if ((v55 - (char *)v12) >> 3 > v25) {
                unint64_t v25 = (v55 - (char *)v12) >> 3;
              }
              if ((unint64_t)(v55 - (char *)v12) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v26 = v25;
              }
              if (v26 >> 60)
              {
                int v61 = v11;
                int v62 = v55;
                int v60 = v12;
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              char v27 = (char *)operator new(16 * v26);
              std::string v28 = (std::string::size_type *)&v27[16 * v24];
              std::string::size_type *v28 = v16;
              v28[1] = size;
              if (size) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v29 = (RIO_MTLX::Implementation **)v28;
              if (v13 != (char *)v12)
              {
                do
                {
                  long long v30 = *((_OWORD *)v13 - 1);
                  v13 -= 16;
                  *((_OWORD *)v29 - 1) = v30;
                  v29 -= 2;
                  *(void *)unint64_t v13 = 0;
                  *((void *)v13 + 1) = 0;
                }
                while (v13 != (char *)v12);
                if (v11 == v12)
                {
                  uint64_t v12 = v11;
                }
                else
                {
                  do
                  {
                    uint64_t v31 = (std::__shared_weak_count *)*(v11 - 1);
                    if (v31) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
                    }
                    v11 -= 2;
                  }
                  while (v11 != v12);
                }
              }
              int v55 = &v27[16 * v26];
              unint64_t v11 = (RIO_MTLX::Implementation **)(v28 + 2);
              if (v12) {
                operator delete(v12);
              }
              uint64_t v12 = v29;
              unint64_t v13 = (char *)(v28 + 2);
              long long v9 = v52;
              uint64_t v10 = v53;
            }
            else
            {
              *(void *)unint64_t v13 = v16;
              *((void *)v13 + 1) = size;
              if (size) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
              }
              unint64_t v11 = (RIO_MTLX::Implementation **)(v13 + 16);
              v13 += 16;
            }
            goto LABEL_47;
          }
          if (!memcmp(*v21, v22, *(void *)(v15 + 32))) {
            goto LABEL_23;
          }
        }
LABEL_47:
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        v8 += 2;
        if (v8 == v9)
        {
          int v61 = v11;
          int v62 = v55;
          int v60 = v12;
          goto LABEL_54;
        }
      }
    }
    unint64_t v11 = 0;
    uint64_t v12 = 0;
LABEL_54:
    uint64_t v32 = (uint64_t)v56;
    if (v59)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      uint64_t v12 = v60;
      unint64_t v11 = v61;
    }
    if (v12 != v11)
    {
      while (1)
      {
        uint64_t v34 = *v12;
        uint64_t v33 = (std::__shared_weak_count *)v12[1];
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        NodeGraph = RIO_MTLX::Implementation::getNodeGraph(v34);
        RIO_MTLX::Element::getQualifiedName(v32, v56 + 2, &__p);
        uint64_t v36 = *((unsigned __int8 *)NodeGraph + 23);
        if ((v36 & 0x80u) == 0) {
          uint64_t v37 = *((unsigned __int8 *)NodeGraph + 23);
        }
        else {
          uint64_t v37 = NodeGraph[1];
        }
        std::string::size_type v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        int v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
        }
        if (v37 != v38) {
          break;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((v36 & 0x80) != 0)
        {
          BOOL v48 = memcmp((const void *)*NodeGraph, p_p, NodeGraph[1]) == 0;
LABEL_80:
          if ((v39 & 0x80000000) == 0) {
            goto LABEL_82;
          }
LABEL_81:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_82;
        }
        if (*((unsigned char *)NodeGraph + 23))
        {
          uint64_t v41 = v36 - 1;
          do
          {
            int v43 = *(unsigned __int8 *)NodeGraph;
            NodeGraph = (uint64_t *)((char *)NodeGraph + 1);
            int v42 = v43;
            int v45 = p_p->__r_.__value_.__s.__data_[0];
            p_p = (std::string *)((char *)p_p + 1);
            int v44 = v45;
            BOOL v47 = v41-- != 0;
            BOOL v48 = v42 == v44;
          }
          while (v42 == v44 && v47);
          goto LABEL_80;
        }
        BOOL v48 = 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_81;
        }
LABEL_82:
        uint64_t v32 = (uint64_t)v56;
        if (v48)
        {
          int v49 = (std::string *)RIO_MTLX::InterfaceElement::getNodeDefString(v34);
          RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeDef>((uint64_t)v34, v49, &__p);
          long long v50 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
          uint64_t v51 = (std::__shared_weak_count *)v54[1];
          *(_OWORD *)uint64_t v54 = v50;
          if (v51)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v51);
            if (__p.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
            }
          }
        }
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        v12 += 2;
        if (v12 == v11) {
          goto LABEL_92;
        }
      }
      BOOL v48 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_82;
      }
      goto LABEL_81;
    }
LABEL_92:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
    std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
}

void sub_23F6970FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  char v23 = *(std::__shared_weak_count **)(a12 + 8);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIO_MTLX::NodeGraph::validate(RIO_MTLX::InterfaceElement *a1, std::string *a2)
{
  char v22 = 1;
  uint64_t v4 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(a1);
  char v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, v4) == 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "NodeGraph elements do not support version strings");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, v5, &v22, a2, (const void **)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(v6);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, v7))
  {
    RIO_MTLX::NodeGraph::getNodeDef(a1, &v18);
    uint64_t v8 = v18;
    std::string::basic_string[abi:ne180100]<0>(v16, "NodeGraph implementation refers to non-existent NodeDef");
    RIO_MTLX::Element::validateRequire((uint64_t)a1, v8 != 0, &v22, a2, (const void **)v16);
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v18)
    {
      uint64_t v9 = *((void *)a1 + 33);
      RIO_MTLX::InterfaceElement::getActiveOutputs(v18, v15);
      uint64_t v11 = v15[0];
      uint64_t v10 = v15[1];
      std::string::basic_string[abi:ne180100]<0>(v13, "NodeGraph implementation has a different number of outputs than its NodeDef");
      RIO_MTLX::Element::validateRequire((uint64_t)a1, v9 == (v10 - v11) >> 4, &v22, a2, (const void **)v13);
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      char v23 = (void **)v15;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v23);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  LODWORD(result) = RIO_MTLX::Element::validate((uint64_t)a1, a2);
  if (v22) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_23F697330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v31 - 56) = &a15;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 56));
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  _Unwind_Resume(a1);
}

double RIO_MTLX::NodeGraph::getDeclaration@<D0>(RIO_MTLX::NodeGraph *a1@<X0>, _OWORD *a2@<X8>)
{
  RIO_MTLX::NodeGraph::getNodeDef(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::GraphElement>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v9, (void *)(a1 + 8));
  uint64_t shared_weak_owners = v9;
  if (v9)
  {
    do
    {
      RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>((uint64_t)shared_weak_owners, a2);
      BOOL v4 = *a2 == 0;
      if (*a2) {
        break;
      }
      char v5 = (std::__shared_weak_count *)a2[1];
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      unint64_t v6 = v9;
      uint64_t shared_weak_owners = (std::__shared_weak_count *)v9[9].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        uint64_t shared_weak_owners = std::__shared_weak_count::lock(shared_weak_owners);
        uint64_t v7 = shared_weak_owners;
        if (shared_weak_owners) {
          uint64_t shared_weak_owners = (std::__shared_weak_count *)v6[9].__shared_owners_;
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
      uint64_t v8 = v10;
      uint64_t v9 = shared_weak_owners;
      uint64_t v10 = v7;
      if (v8)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        uint64_t shared_weak_owners = v9;
      }
    }
    while (shared_weak_owners);
  }
  else
  {
    BOOL v4 = 1;
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v4)
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_23F6974A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::getTypedAttribute<std::vector<std::string>>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  char v5 = (void *)(a1 + 160);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 160), a2))
  {
    unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v5, a2);
    if (v6) {
      uint64_t v7 = (uint64_t *)(v6 + 40);
    }
    else {
      uint64_t v7 = RIO_MTLX::EMPTY_STRING(0);
    }
    RIO_MTLX::fromValueString<std::vector<std::string>>((RIO_MTLX *)v7, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

uint64_t RIO_MTLX::Backdrop::validate(RIO_MTLX::Backdrop *a1, std::string *a2)
{
  char v37 = 1;
  RIO_MTLX::Backdrop::CONTAINS_ATTRIBUTE(a1);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)qword_268C408A8))goto LABEL_50; {
  std::string::basic_string[abi:ne180100]<0>(&__p, "contains");
  }
  RIO_MTLX::Element::getTypedAttribute<std::vector<std::string>>((uint64_t)a1, (unsigned __int8 *)&__p, v36);
  if (v41 < 0) {
    operator delete(__p);
  }
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::GraphElement>((uint64_t)a1, &v42);
  if (!v42) {
    goto LABEL_45;
  }
  RIO_MTLX::Backdrop::CONTAINS_ATTRIBUTE(v4);
  RIO_MTLX::Element::getTypedAttribute<std::vector<std::string>>((uint64_t)a1, (unsigned __int8 *)qword_268C408A8, (uint64_t *)&__p);
  char v5 = (unsigned __int8 *)__p;
  unint64_t v6 = v40;
  if (__p == v40) {
    goto LABEL_44;
  }
  uint64_t v29 = a2;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v42 + 96), v5);
    uint64_t v11 = v10;
    if (v10)
    {
      uint64_t v12 = *((void *)v10 + 5);
      unint64_t v13 = (std::__shared_weak_count *)*((void *)v11 + 6);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v12)
      {
        RIO_MTLX::Element::asA<RIO_MTLX::TypedElement>(v12, &v38);
        if (!v13) {
          goto LABEL_13;
        }
LABEL_12:
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    long long v38 = 0uLL;
    if (v13) {
      goto LABEL_12;
    }
LABEL_13:
    char v14 = (std::__shared_weak_count *)*((void *)&v38 + 1);
    if ((void)v38)
    {
      if (v9 >= v8)
      {
        uint64_t v15 = (v9 - v7) >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
        {
          uint64_t v34 = v9;
          uint64_t v35 = v8;
          uint64_t v33 = v7;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        long long v30 = v38;
        if ((v8 - v7) >> 3 > v16) {
          unint64_t v16 = (v8 - v7) >> 3;
        }
        if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17 >> 60)
        {
          uint64_t v34 = v9;
          uint64_t v35 = v8;
          uint64_t v33 = v7;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v18 = (char *)operator new(16 * v17);
        uint64_t v19 = &v18[16 * v15];
        *(_OWORD *)uint64_t v19 = v30;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v20 = v19;
        if (v9 != v7)
        {
          char v21 = v9;
          do
          {
            long long v22 = *((_OWORD *)v21 - 1);
            v21 -= 16;
            *((_OWORD *)v20 - 1) = v22;
            v20 -= 16;
            *(void *)char v21 = 0;
            *((void *)v21 + 1) = 0;
          }
          while (v21 != v7);
          do
          {
            char v23 = (std::__shared_weak_count *)*((void *)v9 - 1);
            if (v23) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            }
            v9 -= 16;
          }
          while (v9 != v7);
        }
        uint64_t v8 = &v18[16 * v17];
        uint64_t v9 = v19 + 16;
        if (v7) {
          operator delete(v7);
        }
        uint64_t v7 = v20;
      }
      else
      {
        *(_OWORD *)uint64_t v9 = v38;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v9 += 16;
      }
      char v14 = (std::__shared_weak_count *)*((void *)&v38 + 1);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    v5 += 24;
  }
  while (v5 != v6);
  uint64_t v34 = v9;
  uint64_t v35 = v8;
  uint64_t v33 = v7;
  a2 = v29;
LABEL_44:
  *(void *)&long long v38 = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
LABEL_45:
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  uint64_t v25 = v36[0];
  uint64_t v24 = v36[1];
  char v27 = v33;
  unint64_t v26 = v34;
  std::string::basic_string[abi:ne180100]<0>(v31, "Invalid element in contains string");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 3) == (v26 - v27) >> 4, &v37, a2, (const void **)v31);
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  std::string __p = &v33;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_50:
  LODWORD(result) = RIO_MTLX::Element::validate((uint64_t)a1, a2);
  if (v37) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_23F69786C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char **a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  a28 = &a19;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a19 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Node::~Node(RIO_MTLX::Node *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t RIO_MTLX::Node::getUpstreamEdgeCount(RIO_MTLX::Node *this)
{
  return *((void *)this + 32);
}

double RIO_MTLX::Node::getDeclaration@<D0>(std::string *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  RIO_MTLX::Node::getNodeDef(a1, a2, 0, (RIO_MTLX::InterfaceElement **)&v5);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void RIO_MTLX::NodeGraph::~NodeGraph(RIO_MTLX::NodeGraph *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

void RIO_MTLX::Backdrop::~Backdrop(RIO_MTLX::Backdrop *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Node>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 136);
  BOOL v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::Element::asA<RIO_MTLX::Node>(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      unint64_t v13 = (const void **)(v8 + 24);
      char v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        unint64_t v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    std::vector<std::shared_ptr<RIO_MTLX::Node>>::push_back[abi:ne180100](a3, &v15);
    goto LABEL_22;
  }
}

void sub_23F697B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::shared_ptr<RIO_MTLX::Element>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<RIO_MTLX::Element const>,std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_23F697BD8(_Unwind_Exception *a1)
{
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL RIO_MTLX::GraphIterator::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  uint64_t v3 = *(char **)(a1 + 56);
  uint64_t v2 = *(char **)(a1 + 64);
  BOOL v4 = *(void **)(a2 + 56);
  if (v2 - v3 != *(void *)(a2 + 64) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*(void *)v3 != *v4 || *((void *)v3 + 2) != v4[2]) {
      return 0;
    }
    v3 += 24;
    v4 += 3;
  }
  return *(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80);
}

void RIO_MTLX::GraphIterator::~GraphIterator(RIO_MTLX::GraphIterator *this)
{
  BOOL v4 = (void **)((char *)this + 56);
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::Node>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Node>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Node>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Node>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Node>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Node>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Node>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Node>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Node>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Node>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Node>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Node>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Node>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *,false>(uint64_t *j, uint64_t *a2, uint64_t a3, char a4)
{
LABEL_1:
  uint64_t v8 = a2;
  v488 = a2 - 2;
  while (1)
  {
    long long v9 = j;
    uint64_t v10 = (char *)v8 - (char *)j;
    unint64_t v11 = ((char *)v8 - (char *)j) >> 4;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v214 = *(a2 - 2);
          unint64_t v215 = (std::__shared_weak_count *)*(a2 - 1);
          if (v215) {
            atomic_fetch_add_explicit(&v215->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v216 = *j;
          uint64_t v217 = (std::__shared_weak_count *)j[1];
          if (v217) {
            atomic_fetch_add_explicit(&v217->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v220 = *(const void **)(v214 + 48);
          uint64_t v218 = v214 + 48;
          v219 = v220;
          int v221 = *(char *)(v218 + 23);
          BOOL v224 = *(const void **)(v216 + 48);
          uint64_t v222 = v216 + 48;
          std::string::size_type v223 = v224;
          int v225 = *(char *)(v222 + 23);
          if (v225 >= 0) {
            size_t v226 = *(unsigned __int8 *)(v222 + 23);
          }
          else {
            size_t v226 = *(void *)(v222 + 8);
          }
          if (v225 >= 0) {
            BOOL v227 = (const void *)v222;
          }
          else {
            BOOL v227 = v223;
          }
          if (v221 >= 0) {
            size_t v228 = *(unsigned __int8 *)(v218 + 23);
          }
          else {
            size_t v228 = *(void *)(v218 + 8);
          }
          if (v221 >= 0) {
            size_t v229 = (const void *)v218;
          }
          else {
            size_t v229 = v219;
          }
          if (v228 >= v226) {
            size_t v230 = v226;
          }
          else {
            size_t v230 = v228;
          }
          int v231 = memcmp(v227, v229, v230);
          if (v231) {
            BOOL v232 = v231 < 0;
          }
          else {
            BOOL v232 = v226 < v228;
          }
          if (v217) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v217);
          }
          if (v215) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v215);
          }
          if (v232)
          {
            uint64_t v233 = *j;
            *uint64_t j = *(a2 - 2);
            *(a2 - 2) = v233;
            uint64_t v234 = j[1];
            j[1] = *(a2 - 1);
            *(a2 - 1) = v234;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(j, j + 2, v488);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(j, j + 2, j + 4, v488);
          break;
        case 5uLL:
          std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *,0>(j, j + 2, j + 4, j + 6, v488);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    v497 = j;
    if (v10 <= 383) {
      break;
    }
    if (!a3)
    {
      if (j == v8) {
        return;
      }
      unint64_t v483 = (char *)v8 - (char *)j;
      uint64_t v484 = ((char *)v8 - (char *)j) >> 4;
      int64_t v282 = (v11 - 2) >> 1;
      int64_t v283 = v282;
      int64_t v489 = v282;
      while (1)
      {
        int64_t v284 = v283;
        if (v282 < v283) {
          goto LABEL_611;
        }
        int64_t v486 = v283;
        v285 = &v9[2 * ((2 * v283) | 1)];
        uint64_t v286 = 2 * v283 + 2;
        uint64_t v494 = (2 * v283) | 1;
        if (v286 >= (uint64_t)v11) {
          goto LABEL_520;
        }
        uint64_t v287 = *v285;
        v288 = (std::__shared_weak_count *)v285[1];
        if (v288) {
          atomic_fetch_add_explicit(&v288->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v289 = v285[2];
        v290 = (std::__shared_weak_count *)v285[3];
        if (v290) {
          atomic_fetch_add_explicit(&v290->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v293 = *(const void **)(v287 + 48);
        uint64_t v291 = v287 + 48;
        v292 = v293;
        int v294 = *(char *)(v291 + 23);
        v297 = *(const void **)(v289 + 48);
        uint64_t v295 = v289 + 48;
        v296 = v297;
        int v298 = *(char *)(v295 + 23);
        if (v298 >= 0) {
          size_t v299 = *(unsigned __int8 *)(v295 + 23);
        }
        else {
          size_t v299 = *(void *)(v295 + 8);
        }
        if (v298 >= 0) {
          v300 = (const void *)v295;
        }
        else {
          v300 = v296;
        }
        if (v294 >= 0) {
          size_t v301 = *(unsigned __int8 *)(v291 + 23);
        }
        else {
          size_t v301 = *(void *)(v291 + 8);
        }
        if (v294 >= 0) {
          v302 = (const void *)v291;
        }
        else {
          v302 = v292;
        }
        if (v301 >= v299) {
          size_t v303 = v299;
        }
        else {
          size_t v303 = v301;
        }
        int v304 = memcmp(v300, v302, v303);
        if (v304) {
          BOOL v305 = v304 < 0;
        }
        else {
          BOOL v305 = v299 < v301;
        }
        if (v290) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v290);
        }
        if (!v288) {
          break;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v288);
        if (v305) {
          goto LABEL_519;
        }
LABEL_520:
        uint64_t v306 = *v285;
        v307 = (std::__shared_weak_count *)v285[1];
        if (v307) {
          atomic_fetch_add_explicit(&v307->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v308 = &v9[2 * v486];
        uint64_t v309 = *v308;
        v310 = (std::__shared_weak_count *)v308[1];
        if (v310) {
          atomic_fetch_add_explicit(&v310->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v313 = *(const void **)(v306 + 48);
        uint64_t v311 = v306 + 48;
        v312 = v313;
        int v314 = *(char *)(v311 + 23);
        v317 = *(const void **)(v309 + 48);
        uint64_t v315 = v309 + 48;
        v316 = v317;
        int v318 = *(char *)(v315 + 23);
        if (v318 >= 0) {
          size_t v319 = *(unsigned __int8 *)(v315 + 23);
        }
        else {
          size_t v319 = *(void *)(v315 + 8);
        }
        if (v318 >= 0) {
          v320 = (const void *)v315;
        }
        else {
          v320 = v316;
        }
        if (v314 >= 0) {
          size_t v321 = *(unsigned __int8 *)(v311 + 23);
        }
        else {
          size_t v321 = *(void *)(v311 + 8);
        }
        if (v314 >= 0) {
          v322 = (const void *)v311;
        }
        else {
          v322 = v312;
        }
        if (v321 >= v319) {
          size_t v323 = v319;
        }
        else {
          size_t v323 = v321;
        }
        int v324 = memcmp(v320, v322, v323);
        if (v324) {
          BOOL v325 = v324 < 0;
        }
        else {
          BOOL v325 = v319 < v321;
        }
        if (v310) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v310);
        }
        int64_t v282 = v489;
        if (v307) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v307);
        }
        int64_t v284 = v486;
        if (!v325)
        {
          uint64_t v326 = *v308;
          v327 = (std::__shared_weak_count *)v308[1];
          uint64_t *v308 = 0;
          v308[1] = 0;
          int64_t v328 = v494;
          while (1)
          {
            v329 = v308;
            v308 = v285;
            long long v330 = *(_OWORD *)v285;
            uint64_t *v285 = 0;
            v285[1] = 0;
            v331 = (std::__shared_weak_count *)v329[1];
            *(_OWORD *)v329 = v330;
            if (v331) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v331);
            }
            if (v282 < v328)
            {
LABEL_609:
              v366 = (std::__shared_weak_count *)v308[1];
              uint64_t *v308 = v326;
              v308[1] = (uint64_t)v327;
              long long v9 = v497;
              int64_t v284 = v486;
              if (v366) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v366);
              }
              break;
            }
            uint64_t v495 = (2 * v328) | 1;
            v285 = &v497[2 * v495];
            uint64_t v332 = 2 * v328 + 2;
            if (v332 < (uint64_t)v11)
            {
              uint64_t v333 = *v285;
              v334 = (std::__shared_weak_count *)v285[1];
              if (v334) {
                atomic_fetch_add_explicit(&v334->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v335 = v285[2];
              v336 = (std::__shared_weak_count *)v285[3];
              if (v336) {
                atomic_fetch_add_explicit(&v336->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v339 = *(const void **)(v333 + 48);
              uint64_t v337 = v333 + 48;
              v338 = v339;
              int v340 = *(char *)(v337 + 23);
              v343 = *(const void **)(v335 + 48);
              uint64_t v341 = v335 + 48;
              v342 = v343;
              int v344 = *(char *)(v341 + 23);
              if (v344 >= 0) {
                size_t v345 = *(unsigned __int8 *)(v341 + 23);
              }
              else {
                size_t v345 = *(void *)(v341 + 8);
              }
              if (v344 >= 0) {
                v346 = (const void *)v341;
              }
              else {
                v346 = v342;
              }
              if (v340 >= 0) {
                size_t v347 = *(unsigned __int8 *)(v337 + 23);
              }
              else {
                size_t v347 = *(void *)(v337 + 8);
              }
              if (v340 >= 0) {
                v348 = (const void *)v337;
              }
              else {
                v348 = v338;
              }
              if (v347 >= v345) {
                size_t v349 = v345;
              }
              else {
                size_t v349 = v347;
              }
              int v350 = memcmp(v346, v348, v349);
              if (v350) {
                BOOL v351 = v350 < 0;
              }
              else {
                BOOL v351 = v345 < v347;
              }
              if (v336) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v336);
              }
              unint64_t v11 = v484;
              if (!v334)
              {
                int64_t v282 = v489;
                if (!v351) {
                  goto LABEL_579;
                }
LABEL_578:
                v285 += 2;
                uint64_t v495 = v332;
                goto LABEL_579;
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v334);
              int64_t v282 = v489;
              if (v351) {
                goto LABEL_578;
              }
            }
LABEL_579:
            uint64_t v352 = *v285;
            v353 = (std::__shared_weak_count *)v285[1];
            if (v353) {
              atomic_fetch_add_explicit(&v353->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v327) {
              atomic_fetch_add_explicit(&v327->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v356 = *(const void **)(v352 + 48);
            uint64_t v354 = v352 + 48;
            v355 = v356;
            int v357 = *(char *)(v354 + 23);
            int v358 = *(char *)(v326 + 71);
            if (v358 >= 0) {
              size_t v359 = *(unsigned __int8 *)(v326 + 71);
            }
            else {
              size_t v359 = *(void *)(v326 + 56);
            }
            if (v358 >= 0) {
              v360 = (const void *)(v326 + 48);
            }
            else {
              v360 = *(const void **)(v326 + 48);
            }
            if (v357 >= 0) {
              size_t v361 = *(unsigned __int8 *)(v354 + 23);
            }
            else {
              size_t v361 = *(void *)(v354 + 8);
            }
            if (v357 >= 0) {
              v362 = (const void *)v354;
            }
            else {
              v362 = v355;
            }
            if (v361 >= v359) {
              size_t v363 = v359;
            }
            else {
              size_t v363 = v361;
            }
            int v364 = memcmp(v360, v362, v363);
            if (v364) {
              BOOL v365 = v364 < 0;
            }
            else {
              BOOL v365 = v359 < v361;
            }
            if (v327) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v327);
            }
            int64_t v328 = v495;
            if (v353) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v353);
            }
            if (v365) {
              goto LABEL_609;
            }
          }
        }
LABEL_611:
        int64_t v283 = v284 - 1;
        if (!v284)
        {
          uint64_t v367 = v483 >> 4;
          while (1)
          {
            v368 = v9;
            uint64_t v369 = 0;
            uint64_t v487 = *v368;
            v490 = a2;
            uint64_t v492 = v368[1];
            uint64_t *v368 = 0;
            v368[1] = 0;
            int64_t v370 = (unint64_t)(v367 - 2) >> 1;
            do
            {
              v371 = &v368[2 * v369 + 2];
              uint64_t v372 = 2 * v369;
              uint64_t v369 = (2 * v369) | 1;
              uint64_t v373 = v372 + 2;
              if (v372 + 2 >= v367) {
                goto LABEL_644;
              }
              uint64_t v374 = *v371;
              v375 = (std::__shared_weak_count *)v371[1];
              if (v375) {
                atomic_fetch_add_explicit(&v375->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v376 = v371[2];
              v377 = (std::__shared_weak_count *)v371[3];
              if (v377) {
                atomic_fetch_add_explicit(&v377->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v380 = *(const void **)(v374 + 48);
              uint64_t v378 = v374 + 48;
              v379 = v380;
              int v381 = *(char *)(v378 + 23);
              v384 = *(const void **)(v376 + 48);
              uint64_t v382 = v376 + 48;
              v383 = v384;
              int v385 = *(char *)(v382 + 23);
              if (v385 >= 0) {
                size_t v386 = *(unsigned __int8 *)(v382 + 23);
              }
              else {
                size_t v386 = *(void *)(v382 + 8);
              }
              if (v385 >= 0) {
                v387 = (const void *)v382;
              }
              else {
                v387 = v383;
              }
              if (v381 >= 0) {
                size_t v388 = *(unsigned __int8 *)(v378 + 23);
              }
              else {
                size_t v388 = *(void *)(v378 + 8);
              }
              if (v381 >= 0) {
                v389 = (const void *)v378;
              }
              else {
                v389 = v379;
              }
              if (v388 >= v386) {
                size_t v390 = v386;
              }
              else {
                size_t v390 = v388;
              }
              int v391 = memcmp(v387, v389, v390);
              if (v391) {
                BOOL v392 = v391 < 0;
              }
              else {
                BOOL v392 = v386 < v388;
              }
              if (v377) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v377);
              }
              if (v375)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v375);
                int64_t v370 = (unint64_t)(v367 - 2) >> 1;
                if (!v392) {
                  goto LABEL_644;
                }
LABEL_643:
                v371 += 2;
                uint64_t v369 = v373;
                goto LABEL_644;
              }
              int64_t v370 = (unint64_t)(v367 - 2) >> 1;
              if (v392) {
                goto LABEL_643;
              }
LABEL_644:
              long long v393 = *(_OWORD *)v371;
              uint64_t *v371 = 0;
              v371[1] = 0;
              v394 = (std::__shared_weak_count *)v368[1];
              *(_OWORD *)v368 = v393;
              if (v394) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v394);
              }
              v368 = v371;
            }
            while (v369 <= v370);
            v395 = a2 - 2;
            a2 -= 2;
            if (v371 == v490 - 2)
            {
              v440 = (std::__shared_weak_count *)v371[1];
              uint64_t *v371 = v487;
              v371[1] = v492;
              long long v9 = v497;
              if (!v440) {
                goto LABEL_718;
              }
LABEL_717:
              std::__shared_weak_count::__release_shared[abi:ne180100](v440);
              goto LABEL_718;
            }
            long long v396 = *((_OWORD *)v490 - 1);
            uint64_t *v395 = 0;
            v395[1] = 0;
            v397 = (std::__shared_weak_count *)v371[1];
            *(_OWORD *)v371 = v396;
            long long v9 = v497;
            if (v397) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v397);
            }
            v398 = (std::__shared_weak_count *)*(v490 - 1);
            *(v490 - 2) = v487;
            *(v490 - 1) = v492;
            if (v398) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v398);
            }
            uint64_t v399 = (char *)(v371 + 2) - (char *)v497;
            if (v399 >= 17)
            {
              uint64_t v496 = v367;
              unint64_t v400 = (((unint64_t)v399 >> 4) - 2) >> 1;
              v401 = &v497[2 * v400];
              uint64_t v402 = *v401;
              v403 = (std::__shared_weak_count *)v401[1];
              if (v403) {
                atomic_fetch_add_explicit(&v403->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v404 = *v371;
              v405 = (std::__shared_weak_count *)v371[1];
              if (v405) {
                atomic_fetch_add_explicit(&v405->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v408 = *(const void **)(v402 + 48);
              uint64_t v406 = v402 + 48;
              v407 = v408;
              int v409 = *(char *)(v406 + 23);
              v412 = *(const void **)(v404 + 48);
              uint64_t v410 = v404 + 48;
              v411 = v412;
              int v413 = *(char *)(v410 + 23);
              if (v413 >= 0) {
                size_t v414 = *(unsigned __int8 *)(v410 + 23);
              }
              else {
                size_t v414 = *(void *)(v410 + 8);
              }
              if (v413 >= 0) {
                v415 = (const void *)v410;
              }
              else {
                v415 = v411;
              }
              if (v409 >= 0) {
                size_t v416 = *(unsigned __int8 *)(v406 + 23);
              }
              else {
                size_t v416 = *(void *)(v406 + 8);
              }
              if (v409 >= 0) {
                v417 = (const void *)v406;
              }
              else {
                v417 = v407;
              }
              if (v416 >= v414) {
                size_t v418 = v414;
              }
              else {
                size_t v418 = v416;
              }
              int v419 = memcmp(v415, v417, v418);
              if (v419) {
                BOOL v420 = v419 < 0;
              }
              else {
                BOOL v420 = v414 < v416;
              }
              if (v405) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v405);
              }
              if (v403) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v403);
              }
              uint64_t v367 = v496;
              if (v420)
              {
                uint64_t v422 = *v371;
                v421 = (std::__shared_weak_count *)v371[1];
                uint64_t *v371 = 0;
                v371[1] = 0;
                do
                {
                  v423 = v371;
                  v371 = v401;
                  long long v424 = *(_OWORD *)v401;
                  uint64_t *v401 = 0;
                  v401[1] = 0;
                  v425 = (std::__shared_weak_count *)v423[1];
                  *(_OWORD *)v423 = v424;
                  if (v425) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v425);
                  }
                  if (!v400) {
                    break;
                  }
                  unint64_t v400 = (v400 - 1) >> 1;
                  v401 = &v497[2 * v400];
                  uint64_t v426 = *v401;
                  v427 = (std::__shared_weak_count *)v401[1];
                  if (v427) {
                    atomic_fetch_add_explicit(&v427->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (v421) {
                    atomic_fetch_add_explicit(&v421->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  v430 = *(const void **)(v426 + 48);
                  uint64_t v428 = v426 + 48;
                  v429 = v430;
                  int v431 = *(char *)(v428 + 23);
                  int v432 = *(char *)(v422 + 71);
                  if (v432 >= 0) {
                    size_t v433 = *(unsigned __int8 *)(v422 + 71);
                  }
                  else {
                    size_t v433 = *(void *)(v422 + 56);
                  }
                  if (v432 >= 0) {
                    v434 = (const void *)(v422 + 48);
                  }
                  else {
                    v434 = *(const void **)(v422 + 48);
                  }
                  if (v431 >= 0) {
                    size_t v435 = *(unsigned __int8 *)(v428 + 23);
                  }
                  else {
                    size_t v435 = *(void *)(v428 + 8);
                  }
                  if (v431 >= 0) {
                    v436 = (const void *)v428;
                  }
                  else {
                    v436 = v429;
                  }
                  if (v435 >= v433) {
                    size_t v437 = v433;
                  }
                  else {
                    size_t v437 = v435;
                  }
                  int v438 = memcmp(v434, v436, v437);
                  if (v438) {
                    BOOL v439 = v438 < 0;
                  }
                  else {
                    BOOL v439 = v433 < v435;
                  }
                  if (v421) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v421);
                  }
                  if (v427) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v427);
                  }
                }
                while (v439);
                v440 = (std::__shared_weak_count *)v371[1];
                uint64_t *v371 = v422;
                v371[1] = (uint64_t)v421;
                uint64_t v367 = v496;
                long long v9 = v497;
                if (v440) {
                  goto LABEL_717;
                }
              }
            }
LABEL_718:
            if (v367-- <= 2) {
              return;
            }
          }
        }
      }
      if (!v305) {
        goto LABEL_520;
      }
LABEL_519:
      v285 += 2;
      uint64_t v494 = v286;
      goto LABEL_520;
    }
    uint64_t v12 = &j[2 * (v11 >> 1)];
    if ((unint64_t)v10 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(v9, &v9[2 * (v11 >> 1)], v488);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(v9 + 2, v12 - 2, a2 - 4);
      char v13 = &v9[2 * (v11 >> 1) + 2];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(v497 + 4, v13, a2 - 6);
      long long v9 = v497;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(v12 - 2, v12, v13);
      long long v14 = *(_OWORD *)v497;
      *(_OWORD *)v497 = *(_OWORD *)v12;
      *(_OWORD *)uint64_t v12 = v14;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(&v9[2 * (v11 >> 1)], v9, v488);
    }
    --a3;
    if (a4) {
      goto LABEL_36;
    }
    uint64_t v15 = *(v9 - 2);
    unint64_t v16 = (std::__shared_weak_count *)*(v9 - 1);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = *v9;
    uint64_t v18 = (std::__shared_weak_count *)v9[1];
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v21 = *(const void **)(v15 + 48);
    uint64_t v19 = v15 + 48;
    uint64_t v20 = v21;
    int v22 = *(char *)(v19 + 23);
    uint64_t v25 = *(const void **)(v17 + 48);
    uint64_t v23 = v17 + 48;
    uint64_t v24 = v25;
    int v26 = *(char *)(v23 + 23);
    if (v26 >= 0) {
      size_t v27 = *(unsigned __int8 *)(v23 + 23);
    }
    else {
      size_t v27 = *(void *)(v23 + 8);
    }
    if (v26 >= 0) {
      std::string v28 = (const void *)v23;
    }
    else {
      std::string v28 = v24;
    }
    if (v22 >= 0) {
      size_t v29 = *(unsigned __int8 *)(v19 + 23);
    }
    else {
      size_t v29 = *(void *)(v19 + 8);
    }
    if (v22 >= 0) {
      long long v30 = (const void *)v19;
    }
    else {
      long long v30 = v20;
    }
    if (v29 >= v27) {
      size_t v31 = v27;
    }
    else {
      size_t v31 = v29;
    }
    int v32 = memcmp(v28, v30, v31);
    if (v32) {
      BOOL v33 = v32 >= 0;
    }
    else {
      BOOL v33 = v27 >= v29;
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      if (v33) {
        goto LABEL_197;
      }
LABEL_36:
      uint64_t v34 = 0;
      uint64_t v35 = *v9;
      uint64_t v36 = (std::__shared_weak_count *)v9[1];
      uint64_t *v9 = 0;
      v9[1] = 0;
      do
      {
        uint64_t v37 = v9[v34 + 2];
        long long v38 = (std::__shared_weak_count *)v9[v34 + 3];
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v41 = *(const void **)(v37 + 48);
        uint64_t v39 = v37 + 48;
        uint64_t v40 = v41;
        int v42 = *(char *)(v39 + 23);
        int v43 = *(char *)(v35 + 71);
        if (v43 >= 0) {
          size_t v44 = *(unsigned __int8 *)(v35 + 71);
        }
        else {
          size_t v44 = *(void *)(v35 + 56);
        }
        if (v43 >= 0) {
          int v45 = (const void *)(v35 + 48);
        }
        else {
          int v45 = *(const void **)(v35 + 48);
        }
        if (v42 >= 0) {
          size_t v46 = *(unsigned __int8 *)(v39 + 23);
        }
        else {
          size_t v46 = *(void *)(v39 + 8);
        }
        if (v42 >= 0) {
          BOOL v47 = (const void *)v39;
        }
        else {
          BOOL v47 = v40;
        }
        if (v46 >= v44) {
          size_t v48 = v44;
        }
        else {
          size_t v48 = v46;
        }
        int v49 = memcmp(v45, v47, v48);
        if (v49) {
          BOOL v50 = v49 < 0;
        }
        else {
          BOOL v50 = v44 < v46;
        }
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        v34 += 2;
      }
      while (v50);
      uint64_t v51 = &v9[v34];
      uint64_t i = a2;
      if (v34 == 2)
      {
        uint64_t i = a2;
        if (v51 < a2)
        {
          for (uint64_t i = a2 - 2; ; i -= 2)
          {
            uint64_t v67 = *i;
            float v68 = (std::__shared_weak_count *)i[1];
            if (v68) {
              atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v36) {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v71 = *(const void **)(v67 + 48);
            uint64_t v69 = v67 + 48;
            unsigned int v70 = v71;
            int v72 = *(char *)(v69 + 23);
            int v73 = *(char *)(v35 + 71);
            if (v73 >= 0) {
              size_t v74 = *(unsigned __int8 *)(v35 + 71);
            }
            else {
              size_t v74 = *(void *)(v35 + 56);
            }
            if (v73 >= 0) {
              int32x4_t v75 = (const void *)(v35 + 48);
            }
            else {
              int32x4_t v75 = *(const void **)(v35 + 48);
            }
            if (v72 >= 0) {
              size_t v76 = *(unsigned __int8 *)(v69 + 23);
            }
            else {
              size_t v76 = *(void *)(v69 + 8);
            }
            if (v72 >= 0) {
              int16x4_t v77 = (const void *)v69;
            }
            else {
              int16x4_t v77 = v70;
            }
            if (v76 >= v74) {
              size_t v78 = v74;
            }
            else {
              size_t v78 = v76;
            }
            int v79 = memcmp(v75, v77, v78);
            if (v79) {
              BOOL v80 = v79 >= 0;
            }
            else {
              BOOL v80 = v74 >= v76;
            }
            if (v36) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v36);
            }
            if (v68)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v68);
              if (v51 >= i || !v80) {
                break;
              }
            }
            else
            {
              char v82 = !v80;
              if (v51 >= i) {
                char v82 = 1;
              }
              if (v82) {
                break;
              }
            }
          }
        }
      }
      else
      {
        do
        {
          uint64_t v53 = *(i - 2);
          uint64_t v54 = (std::__shared_weak_count *)*(i - 1);
          i -= 2;
          if (v54) {
            atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v36) {
            atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          float32x4_t v57 = *(const void **)(v53 + 48);
          uint64_t v55 = v53 + 48;
          uint64_t v56 = v57;
          int v58 = *(char *)(v55 + 23);
          int v59 = *(char *)(v35 + 71);
          if (v59 >= 0) {
            size_t v60 = *(unsigned __int8 *)(v35 + 71);
          }
          else {
            size_t v60 = *(void *)(v35 + 56);
          }
          if (v59 >= 0) {
            int v61 = (const void *)(v35 + 48);
          }
          else {
            int v61 = *(const void **)(v35 + 48);
          }
          if (v58 >= 0) {
            size_t v62 = *(unsigned __int8 *)(v55 + 23);
          }
          else {
            size_t v62 = *(void *)(v55 + 8);
          }
          if (v58 >= 0) {
            size_t v63 = (const void *)v55;
          }
          else {
            size_t v63 = v56;
          }
          if (v62 >= v60) {
            size_t v64 = v60;
          }
          else {
            size_t v64 = v62;
          }
          int v65 = memcmp(v61, v63, v64);
          if (v65) {
            BOOL v66 = v65 < 0;
          }
          else {
            BOOL v66 = v60 < v62;
          }
          if (v36) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v36);
          }
          if (v54) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v54);
          }
        }
        while (!v66);
      }
      unint64_t v491 = (unint64_t)v51;
      uint64_t j = v51;
      if (v51 < i)
      {
        unsigned int v83 = i;
        do
        {
          uint64_t v84 = *j;
          *uint64_t j = *v83;
          uint64_t *v83 = v84;
          uint64_t v85 = j[1];
          j[1] = v83[1];
          v83[1] = v85;
          do
          {
            uint64_t v86 = j[2];
            float32x4_t v87 = (std::__shared_weak_count *)j[3];
            j += 2;
            if (v87) {
              atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v36) {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            float v90 = *(const void **)(v86 + 48);
            uint64_t v88 = v86 + 48;
            float32x4_t v89 = v90;
            int v91 = *(char *)(v88 + 23);
            int v92 = *(char *)(v35 + 71);
            if (v92 >= 0) {
              size_t v93 = *(unsigned __int8 *)(v35 + 71);
            }
            else {
              size_t v93 = *(void *)(v35 + 56);
            }
            if (v92 >= 0) {
              BOOL v94 = (const void *)(v35 + 48);
            }
            else {
              BOOL v94 = *(const void **)(v35 + 48);
            }
            if (v91 >= 0) {
              size_t v95 = *(unsigned __int8 *)(v88 + 23);
            }
            else {
              size_t v95 = *(void *)(v88 + 8);
            }
            if (v91 >= 0) {
              uint64_t v96 = (const void *)v88;
            }
            else {
              uint64_t v96 = v89;
            }
            if (v95 >= v93) {
              size_t v97 = v93;
            }
            else {
              size_t v97 = v95;
            }
            int v98 = memcmp(v94, v96, v97);
            if (v98) {
              BOOL v99 = v98 < 0;
            }
            else {
              BOOL v99 = v93 < v95;
            }
            if (v36) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v36);
            }
            if (v87) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v87);
            }
          }
          while (v99);
          do
          {
            uint64_t v100 = *(v83 - 2);
            uint64_t v101 = (std::__shared_weak_count *)*(v83 - 1);
            v83 -= 2;
            if (v101) {
              atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v36) {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v104 = *(const void **)(v100 + 48);
            uint64_t v102 = v100 + 48;
            size_t v103 = v104;
            int v105 = *(char *)(v102 + 23);
            int v106 = *(char *)(v35 + 71);
            if (v106 >= 0) {
              size_t v107 = *(unsigned __int8 *)(v35 + 71);
            }
            else {
              size_t v107 = *(void *)(v35 + 56);
            }
            if (v106 >= 0) {
              long long v108 = (const void *)(v35 + 48);
            }
            else {
              long long v108 = *(const void **)(v35 + 48);
            }
            if (v105 >= 0) {
              size_t v109 = *(unsigned __int8 *)(v102 + 23);
            }
            else {
              size_t v109 = *(void *)(v102 + 8);
            }
            if (v105 >= 0) {
              int v110 = (const void *)v102;
            }
            else {
              int v110 = v103;
            }
            if (v109 >= v107) {
              size_t v111 = v107;
            }
            else {
              size_t v111 = v109;
            }
            int v112 = memcmp(v108, v110, v111);
            if (v112) {
              BOOL v113 = v112 < 0;
            }
            else {
              BOOL v113 = v107 < v109;
            }
            if (v36) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v36);
            }
            if (v101) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v101);
            }
          }
          while (!v113);
        }
        while (j < v83);
      }
      int v114 = j - 2;
      if (j - 2 != v497)
      {
        long long v115 = *(_OWORD *)v114;
        *int v114 = 0;
        *(j - 1) = 0;
        int v116 = (std::__shared_weak_count *)v497[1];
        *(_OWORD *)v497 = v115;
        if (v116) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v116);
        }
      }
      size_t v117 = (std::__shared_weak_count *)*(j - 1);
      *(j - 2) = v35;
      *(j - 1) = (uint64_t)v36;
      uint64_t v8 = a2;
      if (v117) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
      }
      if (v491 < (unint64_t)i)
      {
LABEL_195:
        std::__introsort<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *,false>(v497, j - 2, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v118 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(v497, j - 2);
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(j, a2))
        {
          a2 = j - 2;
          uint64_t j = v497;
          if (v118) {
            return;
          }
          goto LABEL_1;
        }
        if (!v118) {
          goto LABEL_195;
        }
      }
    }
    else
    {
      if (!v33) {
        goto LABEL_36;
      }
LABEL_197:
      int v119 = v9;
      uint64_t v120 = *v9;
      uint64_t v121 = (std::__shared_weak_count *)v119[1];
      uint64_t *v119 = 0;
      v119[1] = 0;
      if (v121) {
        atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v122 = a3;
      uint64_t v123 = *(a2 - 2);
      int v124 = (std::__shared_weak_count *)*(a2 - 1);
      if (v124) {
        atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v125 = *(char *)(v120 + 71);
      size_t v128 = *(const void **)(v123 + 48);
      uint64_t v126 = v123 + 48;
      int v127 = v128;
      int v129 = *(char *)(v126 + 23);
      if (v129 >= 0) {
        size_t v130 = *(unsigned __int8 *)(v126 + 23);
      }
      else {
        size_t v130 = *(void *)(v126 + 8);
      }
      if (v129 >= 0) {
        BOOL v131 = (const void *)v126;
      }
      else {
        BOOL v131 = v127;
      }
      if (v125 >= 0) {
        size_t v132 = *(unsigned __int8 *)(v120 + 71);
      }
      else {
        size_t v132 = *(void *)(v120 + 56);
      }
      if (v125 >= 0) {
        int v133 = (const void *)(v120 + 48);
      }
      else {
        int v133 = *(const void **)(v120 + 48);
      }
      if (v132 >= v130) {
        size_t v134 = v130;
      }
      else {
        size_t v134 = v132;
      }
      int v135 = memcmp(v131, v133, v134);
      if (v135) {
        BOOL v136 = v135 < 0;
      }
      else {
        BOOL v136 = v130 < v132;
      }
      if (v124) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v124);
      }
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      if (v136)
      {
        uint64_t j = v497;
        do
        {
          if (v121) {
            atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v137 = j[2];
          uint64_t v138 = (std::__shared_weak_count *)j[3];
          if (v138) {
            atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v139 = *(char *)(v120 + 71);
          int v142 = *(const void **)(v137 + 48);
          uint64_t v140 = v137 + 48;
          unint64_t v141 = v142;
          int v143 = *(char *)(v140 + 23);
          if (v143 >= 0) {
            size_t v144 = *(unsigned __int8 *)(v140 + 23);
          }
          else {
            size_t v144 = *(void *)(v140 + 8);
          }
          if (v143 >= 0) {
            unint64_t v145 = (const void *)v140;
          }
          else {
            unint64_t v145 = v141;
          }
          if (v139 >= 0) {
            size_t v146 = *(unsigned __int8 *)(v120 + 71);
          }
          else {
            size_t v146 = *(void *)(v120 + 56);
          }
          if (v139 >= 0) {
            BOOL v147 = (const void *)(v120 + 48);
          }
          else {
            BOOL v147 = *(const void **)(v120 + 48);
          }
          if (v146 >= v144) {
            size_t v148 = v144;
          }
          else {
            size_t v148 = v146;
          }
          int v149 = memcmp(v145, v147, v148);
          if (v149) {
            BOOL v150 = v149 < 0;
          }
          else {
            BOOL v150 = v144 < v146;
          }
          if (v138) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v138);
          }
          if (v121) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v121);
          }
          j += 2;
        }
        while (!v150);
      }
      else
      {
        for (uint64_t j = v497 + 2; j < a2; j += 2)
        {
          if (v121) {
            atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v200 = *j;
          int v201 = (std::__shared_weak_count *)j[1];
          if (v201) {
            atomic_fetch_add_explicit(&v201->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v202 = *(char *)(v120 + 71);
          v205 = *(const void **)(v200 + 48);
          uint64_t v203 = v200 + 48;
          v204 = v205;
          int v206 = *(char *)(v203 + 23);
          if (v206 >= 0) {
            size_t v207 = *(unsigned __int8 *)(v203 + 23);
          }
          else {
            size_t v207 = *(void *)(v203 + 8);
          }
          if (v206 >= 0) {
            std::string::size_type v208 = (const void *)v203;
          }
          else {
            std::string::size_type v208 = v204;
          }
          if (v202 >= 0) {
            size_t v209 = *(unsigned __int8 *)(v120 + 71);
          }
          else {
            size_t v209 = *(void *)(v120 + 56);
          }
          if (v202 >= 0) {
            uint64_t v210 = (const void *)(v120 + 48);
          }
          else {
            uint64_t v210 = *(const void **)(v120 + 48);
          }
          if (v209 >= v207) {
            size_t v211 = v207;
          }
          else {
            size_t v211 = v209;
          }
          int v212 = memcmp(v208, v210, v211);
          if (v212) {
            BOOL v213 = v212 >= 0;
          }
          else {
            BOOL v213 = v207 >= v209;
          }
          if (v201) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v201);
          }
          if (v121)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v121);
            if (!v213) {
              break;
            }
          }
          else if (!v213)
          {
            break;
          }
        }
      }
      BOOL v151 = a2;
      if (j < a2)
      {
        BOOL v151 = a2;
        do
        {
          if (v121) {
            atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v152 = *(v151 - 2);
          int v153 = (std::__shared_weak_count *)*(v151 - 1);
          if (v153) {
            atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v154 = *(char *)(v120 + 71);
          uint64_t v157 = *(const void **)(v152 + 48);
          uint64_t v155 = v152 + 48;
          int v156 = v157;
          int v158 = *(char *)(v155 + 23);
          if (v158 >= 0) {
            size_t v159 = *(unsigned __int8 *)(v155 + 23);
          }
          else {
            size_t v159 = *(void *)(v155 + 8);
          }
          if (v158 >= 0) {
            BOOL v160 = (const void *)v155;
          }
          else {
            BOOL v160 = v156;
          }
          if (v154 >= 0) {
            size_t v161 = *(unsigned __int8 *)(v120 + 71);
          }
          else {
            size_t v161 = *(void *)(v120 + 56);
          }
          if (v154 >= 0) {
            int v162 = (const void *)(v120 + 48);
          }
          else {
            int v162 = *(const void **)(v120 + 48);
          }
          if (v161 >= v159) {
            size_t v163 = v159;
          }
          else {
            size_t v163 = v161;
          }
          int v164 = memcmp(v160, v162, v163);
          if (v164) {
            BOOL v165 = v164 < 0;
          }
          else {
            BOOL v165 = v159 < v161;
          }
          if (v153) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v153);
          }
          if (v121) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v121);
          }
          v151 -= 2;
        }
        while (v165);
      }
      while (j < v151)
      {
        uint64_t v166 = *j;
        *uint64_t j = *v151;
        *BOOL v151 = v166;
        uint64_t v167 = j[1];
        j[1] = v151[1];
        v151[1] = v167;
        do
        {
          if (v121) {
            atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v168 = j[2];
          long long v169 = (std::__shared_weak_count *)j[3];
          if (v169) {
            atomic_fetch_add_explicit(&v169->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v170 = *(char *)(v120 + 71);
          int v173 = *(const void **)(v168 + 48);
          uint64_t v171 = v168 + 48;
          BOOL v172 = v173;
          int v174 = *(char *)(v171 + 23);
          if (v174 >= 0) {
            size_t v175 = *(unsigned __int8 *)(v171 + 23);
          }
          else {
            size_t v175 = *(void *)(v171 + 8);
          }
          if (v174 >= 0) {
            int v176 = (const void *)v171;
          }
          else {
            int v176 = v172;
          }
          if (v170 >= 0) {
            size_t v177 = *(unsigned __int8 *)(v120 + 71);
          }
          else {
            size_t v177 = *(void *)(v120 + 56);
          }
          if (v170 >= 0) {
            long long v178 = (const void *)(v120 + 48);
          }
          else {
            long long v178 = *(const void **)(v120 + 48);
          }
          if (v177 >= v175) {
            size_t v179 = v175;
          }
          else {
            size_t v179 = v177;
          }
          int v180 = memcmp(v176, v178, v179);
          if (v180) {
            BOOL v181 = v180 < 0;
          }
          else {
            BOOL v181 = v175 < v177;
          }
          if (v169) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v169);
          }
          if (v121) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v121);
          }
          j += 2;
        }
        while (!v181);
        do
        {
          if (v121) {
            atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = *(v151 - 2);
          uint64_t v183 = (std::__shared_weak_count *)*(v151 - 1);
          if (v183) {
            atomic_fetch_add_explicit(&v183->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v184 = *(char *)(v120 + 71);
          long long v187 = *(const void **)(v182 + 48);
          uint64_t v185 = v182 + 48;
          char v186 = v187;
          int v188 = *(char *)(v185 + 23);
          if (v188 >= 0) {
            size_t v189 = *(unsigned __int8 *)(v185 + 23);
          }
          else {
            size_t v189 = *(void *)(v185 + 8);
          }
          if (v188 >= 0) {
            char v190 = (const void *)v185;
          }
          else {
            char v190 = v186;
          }
          if (v184 >= 0) {
            size_t v191 = *(unsigned __int8 *)(v120 + 71);
          }
          else {
            size_t v191 = *(void *)(v120 + 56);
          }
          if (v184 >= 0) {
            char v192 = (const void *)(v120 + 48);
          }
          else {
            char v192 = *(const void **)(v120 + 48);
          }
          if (v191 >= v189) {
            size_t v193 = v189;
          }
          else {
            size_t v193 = v191;
          }
          int v194 = memcmp(v190, v192, v193);
          if (v194) {
            BOOL v195 = v194 < 0;
          }
          else {
            BOOL v195 = v189 < v191;
          }
          if (v183) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v183);
          }
          if (v121) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v121);
          }
          v151 -= 2;
        }
        while (v195);
      }
      v196 = j - 2;
      BOOL v4 = j - 2 >= v497;
      BOOL v5 = j - 2 == v497;
      uint64_t v8 = a2;
      if (j - 2 != v497)
      {
        long long v197 = *(_OWORD *)v196;
        uint64_t *v196 = 0;
        *(j - 1) = 0;
        unint64_t v198 = (std::__shared_weak_count *)v497[1];
        *(_OWORD *)v497 = v197;
        if (v198) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v198);
        }
      }
      a4 = 0;
      unint64_t v199 = (std::__shared_weak_count *)*(j - 1);
      *(j - 2) = v120;
      *(j - 1) = (uint64_t)v121;
      a3 = v122;
      if (v199)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v199);
        a4 = 0;
      }
    }
  }
  uint64_t v235 = j + 2;
  BOOL v237 = j == v8 || v235 == v8;
  if ((a4 & 1) == 0)
  {
    if (!v237)
    {
      v442 = (std::__shared_weak_count **)(j + 3);
      do
      {
        v443 = v9;
        long long v9 = v235;
        uint64_t v444 = v443[2];
        v445 = (std::__shared_weak_count *)v443[3];
        if (v445) {
          atomic_fetch_add_explicit(&v445->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v446 = *v443;
        v447 = (std::__shared_weak_count *)v443[1];
        if (v447) {
          atomic_fetch_add_explicit(&v447->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v450 = *(const void **)(v444 + 48);
        uint64_t v448 = v444 + 48;
        v449 = v450;
        int v451 = *(char *)(v448 + 23);
        v454 = *(const void **)(v446 + 48);
        uint64_t v452 = v446 + 48;
        v453 = v454;
        int v455 = *(char *)(v452 + 23);
        if (v455 >= 0) {
          size_t v456 = *(unsigned __int8 *)(v452 + 23);
        }
        else {
          size_t v456 = *(void *)(v452 + 8);
        }
        if (v455 >= 0) {
          v457 = (const void *)v452;
        }
        else {
          v457 = v453;
        }
        if (v451 >= 0) {
          size_t v458 = *(unsigned __int8 *)(v448 + 23);
        }
        else {
          size_t v458 = *(void *)(v448 + 8);
        }
        if (v451 >= 0) {
          v459 = (const void *)v448;
        }
        else {
          v459 = v449;
        }
        if (v458 >= v456) {
          size_t v460 = v456;
        }
        else {
          size_t v460 = v458;
        }
        int v461 = memcmp(v457, v459, v460);
        if (v461) {
          BOOL v462 = v461 < 0;
        }
        else {
          BOOL v462 = v456 < v458;
        }
        if (v447) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v447);
        }
        if (v445) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v445);
        }
        if (v462)
        {
          uint64_t v463 = *v9;
          v464 = (std::__shared_weak_count *)v443[3];
          uint64_t *v9 = 0;
          v9[1] = 0;
          v465 = v442;
          do
          {
            long long v466 = *(_OWORD *)(v465 - 3);
            *(v465 - 3) = 0;
            *(v465 - 2) = 0;
            v467 = *v465;
            *(_OWORD *)(v465 - 1) = v466;
            if (v467) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v467);
            }
            if (v464) {
              atomic_fetch_add_explicit(&v464->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v468 = (uint64_t)*(v465 - 5);
            v469 = *(v465 - 4);
            if (v469) {
              atomic_fetch_add_explicit(&v469->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v470 = *(char *)(v463 + 71);
            v473 = *(const void **)(v468 + 48);
            uint64_t v471 = v468 + 48;
            v472 = v473;
            int v474 = *(char *)(v471 + 23);
            if (v474 >= 0) {
              size_t v475 = *(unsigned __int8 *)(v471 + 23);
            }
            else {
              size_t v475 = *(void *)(v471 + 8);
            }
            if (v474 >= 0) {
              v476 = (const void *)v471;
            }
            else {
              v476 = v472;
            }
            if (v470 >= 0) {
              size_t v477 = *(unsigned __int8 *)(v463 + 71);
            }
            else {
              size_t v477 = *(void *)(v463 + 56);
            }
            if (v470 >= 0) {
              v478 = (const void *)(v463 + 48);
            }
            else {
              v478 = *(const void **)(v463 + 48);
            }
            if (v477 >= v475) {
              size_t v479 = v475;
            }
            else {
              size_t v479 = v477;
            }
            int v480 = memcmp(v476, v478, v479);
            if (v480) {
              BOOL v481 = v480 < 0;
            }
            else {
              BOOL v481 = v475 < v477;
            }
            if (v469) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v469);
            }
            if (v464) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v464);
            }
            v465 -= 2;
          }
          while (v481);
          v482 = *v465;
          *(v465 - 1) = (std::__shared_weak_count *)v463;
          *v465 = v464;
          if (v482) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v482);
          }
        }
        uint64_t v235 = v9 + 2;
        v442 += 2;
      }
      while (v9 + 2 != a2);
    }
    return;
  }
  if (v237) {
    return;
  }
  uint64_t v238 = 0;
  std::string::size_type v239 = j;
  while (2)
  {
    v240 = v239;
    std::string::size_type v239 = v235;
    uint64_t v241 = v240[2];
    v242 = (std::__shared_weak_count *)v240[3];
    if (v242) {
      atomic_fetch_add_explicit(&v242->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v243 = *v240;
    v244 = (std::__shared_weak_count *)v240[1];
    if (v244) {
      atomic_fetch_add_explicit(&v244->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v247 = *(const void **)(v241 + 48);
    uint64_t v245 = v241 + 48;
    v246 = v247;
    int v248 = *(char *)(v245 + 23);
    uint64_t v251 = *(const void **)(v243 + 48);
    uint64_t v249 = v243 + 48;
    v250 = v251;
    int v252 = *(char *)(v249 + 23);
    if (v252 >= 0) {
      size_t v253 = *(unsigned __int8 *)(v249 + 23);
    }
    else {
      size_t v253 = *(void *)(v249 + 8);
    }
    if (v252 >= 0) {
      v254 = (const void *)v249;
    }
    else {
      v254 = v250;
    }
    if (v248 >= 0) {
      size_t v255 = *(unsigned __int8 *)(v245 + 23);
    }
    else {
      size_t v255 = *(void *)(v245 + 8);
    }
    if (v248 >= 0) {
      std::string::size_type v256 = (const void *)v245;
    }
    else {
      std::string::size_type v256 = v246;
    }
    if (v255 >= v253) {
      size_t v257 = v253;
    }
    else {
      size_t v257 = v255;
    }
    int v258 = memcmp(v254, v256, v257);
    if (v258) {
      BOOL v259 = v258 < 0;
    }
    else {
      BOOL v259 = v253 < v255;
    }
    if (v244) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v244);
    }
    if (v242) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v242);
    }
    if (!v259) {
      goto LABEL_487;
    }
    uint64_t v260 = *v239;
    std::string::size_type v261 = (std::__shared_weak_count *)v240[3];
    *std::string::size_type v239 = 0;
    v239[1] = 0;
    uint64_t v262 = v238;
    while (2)
    {
      uint64_t v263 = (char *)v9 + v262;
      long long v264 = *(_OWORD *)((char *)v9 + v262);
      *(void *)uint64_t v263 = 0;
      *((void *)v263 + 1) = 0;
      int v265 = *(std::__shared_weak_count **)((char *)v9 + v262 + 24);
      *((_OWORD *)v263 + 1) = v264;
      if (v265) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v265);
      }
      if (!v262)
      {
        v280 = v9;
        goto LABEL_485;
      }
      if (v261) {
        atomic_fetch_add_explicit(&v261->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v266 = *(uint64_t *)((char *)v9 + v262 - 16);
      uint64_t v267 = *(std::__shared_weak_count **)((char *)v9 + v262 - 8);
      if (v267) {
        atomic_fetch_add_explicit(&v267->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v268 = *(char *)(v260 + 71);
      uint64_t v271 = *(const void **)(v266 + 48);
      uint64_t v269 = v266 + 48;
      uint64_t v270 = v271;
      int v272 = *(char *)(v269 + 23);
      if (v272 >= 0) {
        size_t v273 = *(unsigned __int8 *)(v269 + 23);
      }
      else {
        size_t v273 = *(void *)(v269 + 8);
      }
      if (v272 >= 0) {
        uint64_t v274 = (const void *)v269;
      }
      else {
        uint64_t v274 = v270;
      }
      if (v268 >= 0) {
        size_t v275 = *(unsigned __int8 *)(v260 + 71);
      }
      else {
        size_t v275 = *(void *)(v260 + 56);
      }
      if (v268 >= 0) {
        v276 = (const void *)(v260 + 48);
      }
      else {
        v276 = *(const void **)(v260 + 48);
      }
      if (v275 >= v273) {
        size_t v277 = v273;
      }
      else {
        size_t v277 = v275;
      }
      int v278 = memcmp(v274, v276, v277);
      if (v278) {
        BOOL v279 = v278 < 0;
      }
      else {
        BOOL v279 = v273 < v275;
      }
      if (v267) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v267);
      }
      if (v261)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v261);
        if (!v279) {
          break;
        }
        goto LABEL_482;
      }
      if (v279)
      {
LABEL_482:
        v262 -= 16;
        long long v9 = v497;
        continue;
      }
      break;
    }
    long long v9 = v497;
    v280 = (uint64_t *)((char *)v497 + v262);
LABEL_485:
    v281 = (std::__shared_weak_count *)v280[1];
    uint64_t *v280 = v260;
    v280[1] = (uint64_t)v261;
    if (v281) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v281);
    }
LABEL_487:
    uint64_t v235 = v239 + 2;
    v238 += 16;
    if (v239 + 2 != a2) {
      continue;
    }
    break;
  }
}

  BOOL v131 = a2 - 16;
  uint64_t v10 = (unint64_t)a1;
  while (1)
  {
    a1 = (void *)v10;
    unint64_t v11 = (uint64_t)&a2[-v10];
    uint64_t v12 = (uint64_t)&a2[-v10] >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return;
        case 2:
          BOOL v50 = *a1;
          uint64_t v51 = *((void *)a2 - 2);
          if (*(_DWORD *)(*a1 + 176) > *(_DWORD *)(v51 + 176))
          {
            *a1 = v51;
            *((void *)a2 - 2) = v50;
            uint64_t v52 = a1[1];
            a1[1] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v52;
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, a1 + 2, v131);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, a1 + 2, a1 + 4, v131);
          break;
        case 5:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, a1 + 2, a1 + 4, a1 + 6);
          uint64_t v53 = a1[6];
          uint64_t v54 = *((void *)a2 - 2);
          if (*(_DWORD *)(v53 + 176) > *(_DWORD *)(v54 + 176))
          {
            a1[6] = v54;
            *((void *)a2 - 2) = v53;
            uint64_t v55 = a1[7];
            a1[7] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v55;
            uint64_t v56 = a1[4];
            float32x4_t v57 = a1[6];
            int v58 = *(_DWORD *)(v57 + 176);
            if (*(_DWORD *)(v56 + 176) > v58)
            {
              int v59 = a1[5];
              size_t v60 = a1[7];
              a1[4] = v57;
              a1[5] = v60;
              a1[6] = v56;
              a1[7] = v59;
              int v61 = a1[2];
              if (*(_DWORD *)(v61 + 176) > v58)
              {
                size_t v62 = a1[3];
                a1[2] = v57;
                a1[3] = v60;
                a1[4] = v61;
                a1[5] = v62;
                size_t v63 = *a1;
                if (*(_DWORD *)(*a1 + 176) > v58)
                {
                  size_t v64 = a1[1];
                  *a1 = v57;
                  a1[1] = v60;
                  a1[2] = v63;
                  a1[3] = v64;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (a1 == (void *)a2) {
        return;
      }
      BOOL v80 = (unint64_t)(v12 - 2) >> 1;
      float v81 = v80;
      do
      {
        char v82 = v81;
        if (v80 >= v81)
        {
          unsigned int v83 = (2 * v81) | 1;
          uint64_t v84 = &a1[2 * v83];
          if (2 * v82 + 2 < v12)
          {
            float32x4_t v87 = v84[2];
            uint64_t v85 = *(_DWORD *)(v87 + 176);
            uint64_t v86 = *(_DWORD *)(*v84 + 176);
            if (v85 > v86) {
              v84 += 2;
            }
            else {
              float32x4_t v87 = *v84;
            }
            if (v85 > v86) {
              unsigned int v83 = 2 * v82 + 2;
            }
          }
          else
          {
            float32x4_t v87 = *v84;
          }
          uint64_t v88 = &a1[2 * v82];
          float32x4_t v89 = *v88;
          if (*(_DWORD *)(*v88 + 176) <= *(_DWORD *)(v87 + 176))
          {
            float v90 = a1[2 * v82 + 1];
            *uint64_t v88 = 0;
            v88[1] = 0;
            int v91 = *v84;
            do
            {
              int v92 = v84;
              size_t v93 = v84[1];
              unsigned __int8 *v92 = 0;
              v92[1] = 0;
              BOOL v94 = (std::__shared_weak_count *)v88[1];
              *uint64_t v88 = v91;
              v88[1] = v93;
              if (v94) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v94);
              }
              if (v80 < v83) {
                break;
              }
              uint64_t v84 = &a1[2 * ((2 * v83) | 1)];
              if (2 * v83 + 2 < v12)
              {
                int v91 = v84[2];
                size_t v95 = *(_DWORD *)(v91 + 176);
                uint64_t v96 = *(_DWORD *)(*v84 + 176);
                if (v95 > v96) {
                  v84 += 2;
                }
                else {
                  int v91 = *v84;
                }
                unsigned int v83 = v95 <= v96 ? (2 * v83) | 1 : 2 * v83 + 2;
              }
              else
              {
                int v91 = *v84;
                unsigned int v83 = (2 * v83) | 1;
              }
              uint64_t v88 = v92;
            }
            while (*(_DWORD *)(v89 + 176) <= *(_DWORD *)(v91 + 176));
            size_t v97 = (std::__shared_weak_count *)v92[1];
            unsigned __int8 *v92 = v89;
            v92[1] = v90;
            if (v97) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v97);
            }
          }
        }
        float v81 = v82 - 1;
      }
      while (v82);
      int v98 = (unint64_t)v11 >> 4;
      while (2)
      {
        BOOL v99 = 0;
        uint64_t v100 = a2;
        uint64_t v102 = *a1;
        uint64_t v101 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        size_t v103 = (char *)a1;
        do
        {
          int v104 = &v103[16 * v99 + 16];
          if (2 * v99 + 2 >= v98)
          {
            int v105 = *(void *)v104;
            BOOL v99 = (2 * v99) | 1;
          }
          else
          {
            int v105 = *(void *)&v103[16 * v99 + 32];
            if (*(_DWORD *)(v105 + 176) > *(_DWORD *)(*(void *)v104 + 176))
            {
              int v104 = &v103[16 * v99 + 32];
              BOOL v99 = 2 * v99 + 2;
            }
            else
            {
              int v105 = *(void *)v104;
              BOOL v99 = (2 * v99) | 1;
            }
          }
          int v106 = *((void *)v104 + 1);
          *(void *)int v104 = 0;
          *((void *)v104 + 1) = 0;
          size_t v107 = (std::__shared_weak_count *)*((void *)v103 + 1);
          *(void *)size_t v103 = v105;
          *((void *)v103 + 1) = v106;
          if (v107) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v107);
          }
          size_t v103 = v104;
        }
        while (v99 <= (uint64_t)((unint64_t)(v98 - 2) >> 1));
        a2 -= 16;
        if (v104 == v100 - 16)
        {
          uint64_t v120 = (std::__shared_weak_count *)*((void *)v104 + 1);
          *(void *)int v104 = v102;
          *((void *)v104 + 1) = v101;
          if (!v120) {
            goto LABEL_147;
          }
        }
        else
        {
          long long v108 = *((_OWORD *)v100 - 1);
          *(void *)a2 = 0;
          *((void *)v100 - 1) = 0;
          size_t v109 = (std::__shared_weak_count *)*((void *)v104 + 1);
          *(_OWORD *)int v104 = v108;
          if (v109) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v109);
          }
          int v110 = (std::__shared_weak_count *)*((void *)v100 - 1);
          *((void *)v100 - 2) = v102;
          *((void *)v100 - 1) = v101;
          if (v110) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v110);
          }
          size_t v111 = v104 + 16 - (char *)a1;
          if (v111 < 17) {
            goto LABEL_147;
          }
          int v112 = (((unint64_t)v111 >> 4) - 2) >> 1;
          BOOL v113 = (char *)&a1[2 * v112];
          int v114 = *(void *)v104;
          if (*(_DWORD *)(*(void *)v104 + 176) <= *(_DWORD *)(*(void *)v113 + 176)) {
            goto LABEL_147;
          }
          long long v115 = *((void *)v104 + 1);
          *(void *)int v104 = 0;
          *((void *)v104 + 1) = 0;
          int v116 = *(void *)v113;
          do
          {
            size_t v117 = v113;
            BOOL v118 = *((void *)v113 + 1);
            *(void *)size_t v117 = 0;
            *((void *)v117 + 1) = 0;
            int v119 = (std::__shared_weak_count *)*((void *)v104 + 1);
            *(void *)int v104 = v116;
            *((void *)v104 + 1) = v118;
            if (v119) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v119);
            }
            if (!v112) {
              break;
            }
            int v112 = (v112 - 1) >> 1;
            BOOL v113 = (char *)&a1[2 * v112];
            int v116 = *(void *)v113;
            int v104 = v117;
          }
          while (*(_DWORD *)(v114 + 176) > *(_DWORD *)(*(void *)v113 + 176));
          uint64_t v120 = (std::__shared_weak_count *)*((void *)v117 + 1);
          *(void *)size_t v117 = v114;
          *((void *)v117 + 1) = v115;
          if (!v120)
          {
LABEL_147:
            if (v98-- <= 2) {
              return;
            }
            continue;
          }
        }
        break;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v120);
      goto LABEL_147;
    }
    char v13 = (unint64_t)v12 >> 1;
    long long v14 = &a1[2 * ((unint64_t)v12 >> 1)];
    if ((unint64_t)v11 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(v14, a1, v131);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, v14, v131);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1 + 2, v14 - 2, (void *)a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1 + 4, &a1[2 * v13 + 2], (void *)a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
      uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v14;
      *(_OWORD *)long long v14 = v15;
    }
    --a3;
    unint64_t v16 = *a1;
    if ((a4 & 1) != 0 || *(_DWORD *)(v16 + 176) > *(_DWORD *)(*(a1 - 2) + 176))
    {
      uint64_t v17 = 0;
      uint64_t v18 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v19 = *(_DWORD *)(v16 + 176);
      do
      {
        uint64_t v20 = a1[v17 + 2];
        v17 += 2;
      }
      while (v19 > *(_DWORD *)(v20 + 176));
      char v21 = (char *)&a1[v17];
      int v22 = a2;
      if (v17 == 2)
      {
        int v22 = a2;
        do
        {
          if (v21 >= v22) {
            break;
          }
          uint64_t v24 = *((void *)v22 - 2);
          v22 -= 16;
        }
        while (v19 <= *(_DWORD *)(v24 + 176));
      }
      else
      {
        do
        {
          uint64_t v23 = *((void *)v22 - 2);
          v22 -= 16;
        }
        while (v19 <= *(_DWORD *)(v23 + 176));
      }
      if (v21 >= v22)
      {
        uint64_t v10 = (unint64_t)&a1[v17];
      }
      else
      {
        uint64_t v25 = *(void *)v22;
        uint64_t v10 = (unint64_t)&a1[v17];
        int v26 = v22;
        do
        {
          *(void *)uint64_t v10 = v25;
          *(void *)int v26 = v20;
          size_t v27 = *(void *)(v10 + 8);
          *(void *)(v10 + 8) = *((void *)v26 + 1);
          *((void *)v26 + 1) = v27;
          do
          {
            std::string v28 = *(void *)(v10 + 16);
            v10 += 16;
            uint64_t v20 = v28;
          }
          while (v19 > *(_DWORD *)(v28 + 176));
          do
          {
            size_t v29 = *((void *)v26 - 2);
            v26 -= 16;
            uint64_t v25 = v29;
          }
          while (v19 <= *(_DWORD *)(v29 + 176));
        }
        while (v10 < (unint64_t)v26);
      }
      long long v30 = (long long *)(v10 - 16);
      if ((void *)(v10 - 16) != a1)
      {
        size_t v31 = *v30;
        *(void *)long long v30 = 0;
        *(void *)(v10 - 8) = 0;
        int v32 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v31;
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
      }
      BOOL v33 = *(std::__shared_weak_count **)(v10 - 8);
      *(void *)(v10 - 16) = v16;
      *(void *)(v10 - 8) = v18;
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (v21 < v22) {
        goto LABEL_35;
      }
      uint64_t v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>((char *)a1, (char *)(v10 - 16));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>((char *)v10, a2))
      {
        a2 = (char *)(v10 - 16);
        if (v34) {
          return;
        }
        goto LABEL_1;
      }
      if (!v34)
      {
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v35 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v36 = *(_DWORD *)(v16 + 176);
      if (*(_DWORD *)(*(void *)v131 + 176) <= v36)
      {
        long long v38 = (char *)(a1 + 2);
        do
        {
          uint64_t v10 = (unint64_t)v38;
          if (v38 >= a2) {
            break;
          }
          v38 += 16;
        }
        while (*(_DWORD *)(*(void *)v10 + 176) <= v36);
      }
      else
      {
        uint64_t v10 = (unint64_t)a1;
        do
        {
          uint64_t v37 = *(void *)(v10 + 16);
          v10 += 16;
        }
        while (*(_DWORD *)(v37 + 176) <= v36);
      }
      uint64_t v39 = a2;
      if (v10 < (unint64_t)a2)
      {
        uint64_t v39 = a2;
        do
        {
          uint64_t v40 = *((void *)v39 - 2);
          v39 -= 16;
        }
        while (*(_DWORD *)(v40 + 176) > v36);
      }
      if (v10 < (unint64_t)v39)
      {
        char v41 = *(void *)v10;
        int v42 = *(void *)v39;
        do
        {
          *(void *)uint64_t v10 = v42;
          *(void *)uint64_t v39 = v41;
          int v43 = *(void *)(v10 + 8);
          *(void *)(v10 + 8) = *((void *)v39 + 1);
          *((void *)v39 + 1) = v43;
          do
          {
            size_t v44 = *(void *)(v10 + 16);
            v10 += 16;
            char v41 = v44;
          }
          while (*(_DWORD *)(v44 + 176) <= v36);
          do
          {
            int v45 = *((void *)v39 - 2);
            v39 -= 16;
            int v42 = v45;
          }
          while (*(_DWORD *)(v45 + 176) > v36);
        }
        while (v10 < (unint64_t)v39);
      }
      size_t v46 = (long long *)(v10 - 16);
      BOOL v4 = v10 - 16 >= (unint64_t)a1;
      BOOL v5 = v10 - 16 == (void)a1;
      if ((void *)(v10 - 16) != a1)
      {
        BOOL v47 = *v46;
        *(void *)size_t v46 = 0;
        *(void *)(v10 - 8) = 0;
        size_t v48 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v47;
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
      }
      a4 = 0;
      int v49 = *(std::__shared_weak_count **)(v10 - 8);
      *(void *)(v10 - 16) = v16;
      *(void *)(v10 - 8) = v35;
      if (v49)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        a4 = 0;
      }
    }
  }
  int v65 = (char *)(a1 + 2);
  uint64_t v67 = a1 == (void *)a2 || v65 == a2;
  if (a4)
  {
    if (!v67)
    {
      float v68 = 0;
      uint64_t v69 = (char *)a1;
      do
      {
        unsigned int v70 = v69;
        uint64_t v69 = v65;
        int v71 = *(void *)v70;
        int v72 = *((void *)v70 + 2);
        if (*(_DWORD *)(*(void *)v70 + 176) > *(_DWORD *)(v72 + 176))
        {
          int v73 = *((void *)v70 + 3);
          size_t v74 = v68;
          *(void *)uint64_t v69 = 0;
          *((void *)v69 + 1) = 0;
          while (1)
          {
            int32x4_t v75 = (void *)((char *)a1 + v74);
            size_t v76 = *(void *)((char *)a1 + v74 + 8);
            *int32x4_t v75 = 0;
            v75[1] = 0;
            int16x4_t v77 = *(std::__shared_weak_count **)((char *)a1 + v74 + 24);
            v75[2] = v71;
            v75[3] = v76;
            if (v77) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v77);
            }
            if (!v74) {
              break;
            }
            int v71 = *(void *)((char *)a1 + v74 - 16);
            v74 -= 16;
            if (*(_DWORD *)(v71 + 176) <= *(_DWORD *)(v72 + 176))
            {
              size_t v78 = (void *)((char *)a1 + v74 + 16);
              goto LABEL_90;
            }
          }
          size_t v78 = a1;
LABEL_90:
          int v79 = (std::__shared_weak_count *)v78[1];
          void *v78 = v72;
          v78[1] = v73;
          if (v79) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v79);
          }
        }
        int v65 = v69 + 16;
        v68 += 16;
      }
      while (v69 + 16 != a2);
    }
  }
  else if (!v67)
  {
    uint64_t v122 = (std::__shared_weak_count **)(a1 + 3);
    do
    {
      uint64_t v123 = a1;
      a1 = v65;
      int v124 = *v123;
      int v125 = v123[2];
      if (*(_DWORD *)(*v123 + 176) > *(_DWORD *)(v125 + 176))
      {
        uint64_t v126 = (std::__shared_weak_count *)v123[3];
        int v127 = v122;
        *a1 = 0;
        a1[1] = 0;
        do
        {
          size_t v128 = *(v127 - 2);
          *(v127 - 3) = 0;
          *(v127 - 2) = 0;
          int v129 = *v127;
          *(v127 - 1) = (std::__shared_weak_count *)v124;
          *int v127 = v128;
          if (v129) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v129);
          }
          int v124 = (uint64_t)*(v127 - 5);
          v127 -= 2;
        }
        while (*(_DWORD *)(v124 + 176) > *(_DWORD *)(v125 + 176));
        size_t v130 = *v127;
        *(v127 - 1) = (std::__shared_weak_count *)v125;
        *int v127 = v126;
        if (v130) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v130);
        }
      }
      int v65 = (char *)(a1 + 2);
      v122 += 2;
    }
    while (a1 + 2 != (void *)a2);
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(a1, a2, a3, a4);
  uint64_t v10 = *a5;
  unint64_t v11 = (std::__shared_weak_count *)a5[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *a4;
  char v13 = (std::__shared_weak_count *)a4[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = *(const void **)(v10 + 48);
  uint64_t v14 = v10 + 48;
  uint64_t v15 = v16;
  int v17 = *(char *)(v14 + 23);
  uint64_t v20 = *(const void **)(v12 + 48);
  uint64_t v18 = v12 + 48;
  uint64_t v19 = v20;
  int v21 = *(char *)(v18 + 23);
  if (v21 >= 0) {
    size_t v22 = *(unsigned __int8 *)(v18 + 23);
  }
  else {
    size_t v22 = *(void *)(v18 + 8);
  }
  if (v21 >= 0) {
    uint64_t v23 = (const void *)v18;
  }
  else {
    uint64_t v23 = v19;
  }
  if (v17 >= 0) {
    size_t v24 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    size_t v24 = *(void *)(v14 + 8);
  }
  if (v17 >= 0) {
    uint64_t v25 = (const void *)v14;
  }
  else {
    uint64_t v25 = v15;
  }
  if (v24 >= v22) {
    size_t v26 = v22;
  }
  else {
    size_t v26 = v24;
  }
  int v27 = memcmp(v23, v25, v26);
  if (v27) {
    BOOL v28 = v27 < 0;
  }
  else {
    BOOL v28 = v22 < v24;
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v28)
  {
    uint64_t v29 = *a4;
    *a4 = *a5;
    *a5 = v29;
    uint64_t v30 = a4[1];
    a4[1] = a5[1];
    a5[1] = v30;
    uint64_t v31 = *a4;
    int v32 = (std::__shared_weak_count *)a4[1];
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v33 = *a3;
    uint64_t v34 = (std::__shared_weak_count *)a3[1];
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = *(const void **)(v31 + 48);
    uint64_t v35 = v31 + 48;
    uint64_t v36 = v37;
    int v38 = *(char *)(v35 + 23);
    char v41 = *(const void **)(v33 + 48);
    uint64_t v39 = v33 + 48;
    uint64_t v40 = v41;
    int v42 = *(char *)(v39 + 23);
    if (v42 >= 0) {
      size_t v43 = *(unsigned __int8 *)(v39 + 23);
    }
    else {
      size_t v43 = *(void *)(v39 + 8);
    }
    if (v42 >= 0) {
      size_t v44 = (const void *)v39;
    }
    else {
      size_t v44 = v40;
    }
    if (v38 >= 0) {
      size_t v45 = *(unsigned __int8 *)(v35 + 23);
    }
    else {
      size_t v45 = *(void *)(v35 + 8);
    }
    if (v38 >= 0) {
      size_t v46 = (const void *)v35;
    }
    else {
      size_t v46 = v36;
    }
    if (v45 >= v43) {
      size_t v47 = v43;
    }
    else {
      size_t v47 = v45;
    }
    int v48 = memcmp(v44, v46, v47);
    if (v48) {
      BOOL v49 = v48 < 0;
    }
    else {
      BOOL v49 = v43 < v45;
    }
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v49)
    {
      uint64_t v50 = *a3;
      *a3 = *a4;
      *a4 = v50;
      uint64_t v51 = a3[1];
      a3[1] = a4[1];
      a4[1] = v51;
      uint64_t v52 = *a3;
      uint64_t v53 = (std::__shared_weak_count *)a3[1];
      if (v53) {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v54 = *a2;
      uint64_t v55 = (std::__shared_weak_count *)a2[1];
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v58 = *(const void **)(v52 + 48);
      uint64_t v56 = v52 + 48;
      float32x4_t v57 = v58;
      int v59 = *(char *)(v56 + 23);
      size_t v62 = *(const void **)(v54 + 48);
      uint64_t v60 = v54 + 48;
      int v61 = v62;
      int v63 = *(char *)(v60 + 23);
      if (v63 >= 0) {
        size_t v64 = *(unsigned __int8 *)(v60 + 23);
      }
      else {
        size_t v64 = *(void *)(v60 + 8);
      }
      if (v63 >= 0) {
        int v65 = (const void *)v60;
      }
      else {
        int v65 = v61;
      }
      if (v59 >= 0) {
        size_t v66 = *(unsigned __int8 *)(v56 + 23);
      }
      else {
        size_t v66 = *(void *)(v56 + 8);
      }
      if (v59 >= 0) {
        uint64_t v67 = (const void *)v56;
      }
      else {
        uint64_t v67 = v57;
      }
      if (v66 >= v64) {
        size_t v68 = v64;
      }
      else {
        size_t v68 = v66;
      }
      int v69 = memcmp(v65, v67, v68);
      if (v69) {
        BOOL v70 = v69 < 0;
      }
      else {
        BOOL v70 = v64 < v66;
      }
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      if (v70)
      {
        uint64_t v71 = *a2;
        *a2 = *a3;
        *a3 = v71;
        uint64_t v72 = a2[1];
        a2[1] = a3[1];
        a3[1] = v72;
        uint64_t v73 = *a2;
        size_t v74 = (std::__shared_weak_count *)a2[1];
        if (v74) {
          atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v75 = *a1;
        size_t v76 = (std::__shared_weak_count *)a1[1];
        if (v76) {
          atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v79 = *(const void **)(v73 + 48);
        uint64_t v77 = v73 + 48;
        size_t v78 = v79;
        int v80 = *(char *)(v77 + 23);
        unsigned int v83 = *(const void **)(v75 + 48);
        uint64_t v81 = v75 + 48;
        char v82 = v83;
        int v84 = *(char *)(v81 + 23);
        if (v84 >= 0) {
          size_t v85 = *(unsigned __int8 *)(v81 + 23);
        }
        else {
          size_t v85 = *(void *)(v81 + 8);
        }
        if (v84 >= 0) {
          uint64_t v86 = (const void *)v81;
        }
        else {
          uint64_t v86 = v82;
        }
        if (v80 >= 0) {
          size_t v87 = *(unsigned __int8 *)(v77 + 23);
        }
        else {
          size_t v87 = *(void *)(v77 + 8);
        }
        if (v80 >= 0) {
          uint64_t v88 = (const void *)v77;
        }
        else {
          uint64_t v88 = v78;
        }
        if (v87 >= v85) {
          size_t v89 = v85;
        }
        else {
          size_t v89 = v87;
        }
        int v90 = memcmp(v86, v88, v89);
        if (v90) {
          BOOL v91 = v90 < 0;
        }
        else {
          BOOL v91 = v85 < v87;
        }
        if (v76) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v76);
        }
        if (v74) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v74);
        }
        if (v91)
        {
          uint64_t v92 = *a1;
          *a1 = *a2;
          *a2 = v92;
          uint64_t v93 = a1[1];
          a1[1] = a2[1];
          a2[1] = v93;
        }
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(void *a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  uint64_t v8 = (std::__shared_weak_count **)(a2 + 1);
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a1;
  unint64_t v11 = (std::__shared_weak_count **)(a1 + 1);
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(const void **)(v6 + 48);
  uint64_t v12 = v6 + 48;
  char v13 = v14;
  int v15 = *(char *)(v12 + 23);
  uint64_t v18 = *(const void **)(v9 + 48);
  uint64_t v16 = v9 + 48;
  int v17 = v18;
  int v19 = *(char *)(v16 + 23);
  if (v19 >= 0) {
    size_t v20 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    size_t v20 = *(void *)(v16 + 8);
  }
  if (v19 >= 0) {
    int v21 = (const void *)v16;
  }
  else {
    int v21 = v17;
  }
  if (v15 >= 0) {
    size_t v22 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    size_t v22 = *(void *)(v12 + 8);
  }
  if (v15 >= 0) {
    uint64_t v23 = (const void *)v12;
  }
  else {
    uint64_t v23 = v13;
  }
  if (v22 >= v20) {
    size_t v24 = v20;
  }
  else {
    size_t v24 = v22;
  }
  int v25 = memcmp(v21, v23, v24);
  if (v25) {
    BOOL v26 = v25 < 0;
  }
  else {
    BOOL v26 = v20 < v22;
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v27 = *a3;
  BOOL v28 = (std::__shared_weak_count *)a3[1];
  if (v26)
  {
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = *a2;
    uint64_t v30 = (std::__shared_weak_count *)a2[1];
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v33 = *(const void **)(v27 + 48);
    uint64_t v31 = v27 + 48;
    int v32 = v33;
    int v34 = *(char *)(v31 + 23);
    uint64_t v37 = *(const void **)(v29 + 48);
    uint64_t v35 = v29 + 48;
    uint64_t v36 = v37;
    int v38 = *(char *)(v35 + 23);
    if (v38 >= 0) {
      size_t v39 = *(unsigned __int8 *)(v35 + 23);
    }
    else {
      size_t v39 = *(void *)(v35 + 8);
    }
    if (v38 >= 0) {
      uint64_t v40 = (const void *)v35;
    }
    else {
      uint64_t v40 = v36;
    }
    if (v34 >= 0) {
      size_t v41 = *(unsigned __int8 *)(v31 + 23);
    }
    else {
      size_t v41 = *(void *)(v31 + 8);
    }
    if (v34 >= 0) {
      int v42 = (const void *)v31;
    }
    else {
      int v42 = v32;
    }
    if (v41 >= v39) {
      size_t v43 = v39;
    }
    else {
      size_t v43 = v41;
    }
    int v44 = memcmp(v40, v42, v43);
    if (v44) {
      BOOL v45 = v44 < 0;
    }
    else {
      BOOL v45 = v39 < v41;
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    uint64_t v46 = *a1;
    if (v45)
    {
      *a1 = *a3;
      *a3 = v46;
LABEL_139:
      uint64_t v8 = (std::__shared_weak_count **)(a3 + 1);
      goto LABEL_140;
    }
    *a1 = *a2;
    *a2 = v46;
    uint64_t v86 = (std::__shared_weak_count *)a1[1];
    a1[1] = a2[1];
    a2[1] = v86;
    uint64_t v87 = *a3;
    uint64_t v88 = (std::__shared_weak_count *)a3[1];
    if (v88)
    {
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v86 = *v8;
    }
    uint64_t v89 = *a2;
    if (v86) {
      atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v92 = *(const void **)(v87 + 48);
    uint64_t v90 = v87 + 48;
    BOOL v91 = v92;
    int v93 = *(char *)(v90 + 23);
    uint64_t v96 = *(const void **)(v89 + 48);
    uint64_t v94 = v89 + 48;
    size_t v95 = v96;
    int v97 = *(char *)(v94 + 23);
    if (v97 >= 0) {
      size_t v98 = *(unsigned __int8 *)(v94 + 23);
    }
    else {
      size_t v98 = *(void *)(v94 + 8);
    }
    if (v97 >= 0) {
      BOOL v99 = (const void *)v94;
    }
    else {
      BOOL v99 = v95;
    }
    if (v93 >= 0) {
      size_t v100 = *(unsigned __int8 *)(v90 + 23);
    }
    else {
      size_t v100 = *(void *)(v90 + 8);
    }
    if (v93 >= 0) {
      uint64_t v101 = (const void *)v90;
    }
    else {
      uint64_t v101 = v91;
    }
    if (v100 >= v98) {
      size_t v102 = v98;
    }
    else {
      size_t v102 = v100;
    }
    int v103 = memcmp(v99, v101, v102);
    if (v103) {
      BOOL v104 = v103 < 0;
    }
    else {
      BOOL v104 = v98 < v100;
    }
    if (v86) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v86);
    }
    if (v88) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v88);
    }
    if (v104)
    {
      uint64_t v105 = *a2;
      *a2 = *a3;
      *a3 = v105;
      unint64_t v11 = v8;
      goto LABEL_139;
    }
  }
  else
  {
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v47 = *a2;
    int v48 = (std::__shared_weak_count *)a2[1];
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v51 = *(const void **)(v27 + 48);
    uint64_t v49 = v27 + 48;
    uint64_t v50 = v51;
    int v52 = *(char *)(v49 + 23);
    uint64_t v55 = *(const void **)(v47 + 48);
    uint64_t v53 = v47 + 48;
    uint64_t v54 = v55;
    int v56 = *(char *)(v53 + 23);
    if (v56 >= 0) {
      size_t v57 = *(unsigned __int8 *)(v53 + 23);
    }
    else {
      size_t v57 = *(void *)(v53 + 8);
    }
    if (v56 >= 0) {
      int v58 = (const void *)v53;
    }
    else {
      int v58 = v54;
    }
    if (v52 >= 0) {
      size_t v59 = *(unsigned __int8 *)(v49 + 23);
    }
    else {
      size_t v59 = *(void *)(v49 + 8);
    }
    if (v52 >= 0) {
      uint64_t v60 = (const void *)v49;
    }
    else {
      uint64_t v60 = v50;
    }
    if (v59 >= v57) {
      size_t v61 = v57;
    }
    else {
      size_t v61 = v59;
    }
    int v62 = memcmp(v58, v60, v61);
    if (v62) {
      BOOL v63 = v62 < 0;
    }
    else {
      BOOL v63 = v57 < v59;
    }
    if (v48) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (v63)
    {
      uint64_t v64 = *a2;
      *a2 = *a3;
      *a3 = v64;
      uint64_t v65 = a2[1];
      a2[1] = a3[1];
      a3[1] = v65;
      uint64_t v66 = *a2;
      uint64_t v67 = (std::__shared_weak_count *)a2[1];
      if (v67) {
        atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v68 = *a1;
      int v69 = (std::__shared_weak_count *)a1[1];
      if (v69) {
        atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v72 = *(const void **)(v66 + 48);
      uint64_t v70 = v66 + 48;
      uint64_t v71 = v72;
      int v73 = *(char *)(v70 + 23);
      size_t v76 = *(const void **)(v68 + 48);
      uint64_t v74 = v68 + 48;
      uint64_t v75 = v76;
      int v77 = *(char *)(v74 + 23);
      if (v77 >= 0) {
        size_t v78 = *(unsigned __int8 *)(v74 + 23);
      }
      else {
        size_t v78 = *(void *)(v74 + 8);
      }
      if (v77 >= 0) {
        int v79 = (const void *)v74;
      }
      else {
        int v79 = v75;
      }
      if (v73 >= 0) {
        size_t v80 = *(unsigned __int8 *)(v70 + 23);
      }
      else {
        size_t v80 = *(void *)(v70 + 8);
      }
      if (v73 >= 0) {
        uint64_t v81 = (const void *)v70;
      }
      else {
        uint64_t v81 = v71;
      }
      if (v80 >= v78) {
        size_t v82 = v78;
      }
      else {
        size_t v82 = v80;
      }
      int v83 = memcmp(v79, v81, v82);
      if (v83) {
        BOOL v84 = v83 < 0;
      }
      else {
        BOOL v84 = v78 < v80;
      }
      if (v69) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v69);
      }
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
      if (v84)
      {
        uint64_t v85 = *a1;
        *a1 = *a2;
        *a2 = v85;
LABEL_140:
        int v106 = *v11;
        *unint64_t v11 = *v8;
        *uint64_t v8 = v106;
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 2);
      uint64_t v7 = (std::__shared_weak_count *)*(a2 - 1);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *a1;
      uint64_t v9 = (std::__shared_weak_count *)a1[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *(const void **)(v6 + 48);
      uint64_t v10 = v6 + 48;
      unint64_t v11 = v12;
      int v13 = *(char *)(v10 + 23);
      uint64_t v16 = *(const void **)(v8 + 48);
      uint64_t v14 = v8 + 48;
      int v15 = v16;
      int v17 = *(char *)(v14 + 23);
      if (v17 >= 0) {
        size_t v18 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        size_t v18 = *(void *)(v14 + 8);
      }
      if (v17 >= 0) {
        int v19 = (const void *)v14;
      }
      else {
        int v19 = v15;
      }
      if (v13 >= 0) {
        size_t v20 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        size_t v20 = *(void *)(v10 + 8);
      }
      if (v13 >= 0) {
        int v21 = (const void *)v10;
      }
      else {
        int v21 = v11;
      }
      if (v20 >= v18) {
        size_t v22 = v18;
      }
      else {
        size_t v22 = v20;
      }
      int v23 = memcmp(v19, v21, v22);
      if (v23) {
        BOOL v24 = v23 < 0;
      }
      else {
        BOOL v24 = v18 < v20;
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if (v24)
      {
        uint64_t v25 = *a1;
        *a1 = *(v2 - 2);
        *(v2 - 2) = v25;
        uint64_t v26 = a1[1];
        a1[1] = *(v2 - 1);
        *(v2 - 1) = v26;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v27 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(a1, a1 + 2, a1 + 4);
      BOOL v28 = a1 + 6;
      if (a1 + 6 == v2) {
        return 1;
      }
      uint64_t v29 = 0;
      int v30 = 0;
      uint64_t v72 = v2;
      break;
  }
  while (2)
  {
    uint64_t v31 = *v28;
    int v32 = (std::__shared_weak_count *)v28[1];
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v33 = *v27;
    int v34 = (std::__shared_weak_count *)v27[1];
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = *(const void **)(v31 + 48);
    uint64_t v35 = v31 + 48;
    uint64_t v36 = v37;
    int v38 = *(char *)(v35 + 23);
    size_t v41 = *(const void **)(v33 + 48);
    uint64_t v39 = v33 + 48;
    uint64_t v40 = v41;
    int v42 = *(char *)(v39 + 23);
    if (v42 >= 0) {
      size_t v43 = *(unsigned __int8 *)(v39 + 23);
    }
    else {
      size_t v43 = *(void *)(v39 + 8);
    }
    if (v42 >= 0) {
      int v44 = (const void *)v39;
    }
    else {
      int v44 = v40;
    }
    if (v38 >= 0) {
      size_t v45 = *(unsigned __int8 *)(v35 + 23);
    }
    else {
      size_t v45 = *(void *)(v35 + 8);
    }
    if (v38 >= 0) {
      uint64_t v46 = (const void *)v35;
    }
    else {
      uint64_t v46 = v36;
    }
    if (v45 >= v43) {
      size_t v47 = v43;
    }
    else {
      size_t v47 = v45;
    }
    int v48 = memcmp(v44, v46, v47);
    if (v48) {
      BOOL v49 = v48 < 0;
    }
    else {
      BOOL v49 = v43 < v45;
    }
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (!v49) {
      goto LABEL_97;
    }
    int v73 = v30;
    uint64_t v51 = *v28;
    uint64_t v50 = (std::__shared_weak_count *)v28[1];
    uint64_t *v28 = 0;
    v28[1] = 0;
    for (uint64_t i = v29; ; i -= 16)
    {
      uint64_t v53 = (char *)a1 + i;
      long long v54 = *(_OWORD *)((char *)a1 + i + 32);
      *((void *)v53 + 4) = 0;
      *((void *)v53 + 5) = 0;
      uint64_t v55 = *(std::__shared_weak_count **)((char *)a1 + i + 56);
      *((_OWORD *)v53 + 3) = v54;
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      if (i == -32)
      {
        uint64_t v70 = a1;
        goto LABEL_94;
      }
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v56 = *(uint64_t *)((char *)a1 + i + 16);
      size_t v57 = *(std::__shared_weak_count **)((char *)a1 + i + 24);
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v58 = *(char *)(v51 + 71);
      size_t v61 = *(const void **)(v56 + 48);
      uint64_t v59 = v56 + 48;
      uint64_t v60 = v61;
      int v62 = *(char *)(v59 + 23);
      if (v62 >= 0) {
        size_t v63 = *(unsigned __int8 *)(v59 + 23);
      }
      else {
        size_t v63 = *(void *)(v59 + 8);
      }
      if (v62 >= 0) {
        uint64_t v64 = (const void *)v59;
      }
      else {
        uint64_t v64 = v60;
      }
      if (v58 >= 0) {
        size_t v65 = *(unsigned __int8 *)(v51 + 71);
      }
      else {
        size_t v65 = *(void *)(v51 + 56);
      }
      if (v58 >= 0) {
        uint64_t v66 = (const void *)(v51 + 48);
      }
      else {
        uint64_t v66 = *(const void **)(v51 + 48);
      }
      if (v65 >= v63) {
        size_t v67 = v63;
      }
      else {
        size_t v67 = v65;
      }
      int v68 = memcmp(v64, v66, v67);
      if (v68) {
        BOOL v69 = v68 < 0;
      }
      else {
        BOOL v69 = v63 < v65;
      }
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      }
      if (!v50) {
        break;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      if (!v69) {
        goto LABEL_93;
      }
LABEL_91:
      ;
    }
    if (v69) {
      goto LABEL_91;
    }
LABEL_93:
    uint64_t v70 = (uint64_t *)((char *)a1 + i + 32);
LABEL_94:
    uint64_t v2 = v72;
    uint64_t v71 = (std::__shared_weak_count *)v70[1];
    uint64_t *v70 = v51;
    v70[1] = (uint64_t)v50;
    if (v71) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v71);
    }
    int v30 = v73 + 1;
    if (v73 != 7)
    {
LABEL_97:
      uint64_t v27 = v28;
      v29 += 16;
      v28 += 2;
      if (v28 == v2) {
        return 1;
      }
      continue;
    }
    return v28 + 2 == v72;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(a1, a2, a3);
  uint64_t v8 = *a4;
  uint64_t v9 = (std::__shared_weak_count *)a4[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a3;
  unint64_t v11 = (std::__shared_weak_count *)a3[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(const void **)(v8 + 48);
  uint64_t v12 = v8 + 48;
  int v13 = v14;
  int v15 = *(char *)(v12 + 23);
  size_t v18 = *(const void **)(v10 + 48);
  uint64_t v16 = v10 + 48;
  int v17 = v18;
  int v19 = *(char *)(v16 + 23);
  if (v19 >= 0) {
    size_t v20 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    size_t v20 = *(void *)(v16 + 8);
  }
  if (v19 >= 0) {
    int v21 = (const void *)v16;
  }
  else {
    int v21 = v17;
  }
  if (v15 >= 0) {
    size_t v22 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    size_t v22 = *(void *)(v12 + 8);
  }
  if (v15 >= 0) {
    int v23 = (const void *)v12;
  }
  else {
    int v23 = v13;
  }
  if (v22 >= v20) {
    size_t v24 = v20;
  }
  else {
    size_t v24 = v22;
  }
  int v25 = memcmp(v21, v23, v24);
  if (v25) {
    BOOL v26 = v25 < 0;
  }
  else {
    BOOL v26 = v20 < v22;
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v26)
  {
    uint64_t v27 = *a3;
    *a3 = *a4;
    *a4 = v27;
    uint64_t v28 = a3[1];
    a3[1] = a4[1];
    a4[1] = v28;
    uint64_t v29 = *a3;
    int v30 = (std::__shared_weak_count *)a3[1];
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = *a2;
    int v32 = (std::__shared_weak_count *)a2[1];
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v35 = *(const void **)(v29 + 48);
    uint64_t v33 = v29 + 48;
    int v34 = v35;
    int v36 = *(char *)(v33 + 23);
    uint64_t v39 = *(const void **)(v31 + 48);
    uint64_t v37 = v31 + 48;
    int v38 = v39;
    int v40 = *(char *)(v37 + 23);
    if (v40 >= 0) {
      size_t v41 = *(unsigned __int8 *)(v37 + 23);
    }
    else {
      size_t v41 = *(void *)(v37 + 8);
    }
    if (v40 >= 0) {
      int v42 = (const void *)v37;
    }
    else {
      int v42 = v38;
    }
    if (v36 >= 0) {
      size_t v43 = *(unsigned __int8 *)(v33 + 23);
    }
    else {
      size_t v43 = *(void *)(v33 + 8);
    }
    if (v36 >= 0) {
      int v44 = (const void *)v33;
    }
    else {
      int v44 = v34;
    }
    if (v43 >= v41) {
      size_t v45 = v41;
    }
    else {
      size_t v45 = v43;
    }
    int v46 = memcmp(v42, v44, v45);
    if (v46) {
      BOOL v47 = v46 < 0;
    }
    else {
      BOOL v47 = v41 < v43;
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (v47)
    {
      uint64_t v48 = *a2;
      *a2 = *a3;
      *a3 = v48;
      uint64_t v49 = a2[1];
      a2[1] = a3[1];
      a3[1] = v49;
      uint64_t v50 = *a2;
      uint64_t v51 = (std::__shared_weak_count *)a2[1];
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v52 = *a1;
      uint64_t v53 = (std::__shared_weak_count *)a1[1];
      if (v53) {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v56 = *(const void **)(v50 + 48);
      uint64_t v54 = v50 + 48;
      uint64_t v55 = v56;
      int v57 = *(char *)(v54 + 23);
      uint64_t v60 = *(const void **)(v52 + 48);
      uint64_t v58 = v52 + 48;
      uint64_t v59 = v60;
      int v61 = *(char *)(v58 + 23);
      if (v61 >= 0) {
        size_t v62 = *(unsigned __int8 *)(v58 + 23);
      }
      else {
        size_t v62 = *(void *)(v58 + 8);
      }
      if (v61 >= 0) {
        size_t v63 = (const void *)v58;
      }
      else {
        size_t v63 = v59;
      }
      if (v57 >= 0) {
        size_t v64 = *(unsigned __int8 *)(v54 + 23);
      }
      else {
        size_t v64 = *(void *)(v54 + 8);
      }
      if (v57 >= 0) {
        size_t v65 = (const void *)v54;
      }
      else {
        size_t v65 = v55;
      }
      if (v64 >= v62) {
        size_t v66 = v62;
      }
      else {
        size_t v66 = v64;
      }
      int v67 = memcmp(v63, v65, v66);
      if (v67) {
        BOOL v68 = v67 < 0;
      }
      else {
        BOOL v68 = v62 < v64;
      }
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
      if (v68)
      {
        uint64_t v69 = *a1;
        *a1 = *a2;
        *a2 = v69;
        uint64_t v70 = a1[1];
        a1[1] = a2[1];
        a2[1] = v70;
      }
    }
  }
}

void realityio::mtlx::UsdMtlxDiscoveryPlugin::DiscoverNodes(RIO_MTLX *a1@<X8>)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  realityio::mtlx::UsdMtlxGetDocument((uint64_t)__p, &v4);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "mtlx");
    std::string::basic_string[abi:ne180100]<0>(&v10, "mtlx");
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v7, (void *)v7.__r_.__value_.__l.__size_);
    if (v11 < 0) {
      operator delete(v10);
    }
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  realityio::mtlx::UsdMtlxStandardFileExtensions(&v7);
  std::string::basic_string[abi:ne180100]<0>(&v4, "USDMTLX_PLUGIN_FOLLOW_SYMLINKS");
  pxrInternal__aapl__pxrReserved__::TfGetenvBool();
  pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverFiles();
  if (v6 < 0) {
    operator delete(v4);
  }
  uint64_t v4 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
  uint64_t v2 = (long long *)__p[0];
  uint64_t v3 = (long long *)__p[1];
  while (v2 != v3)
  {
    realityio::mtlx::UsdMtlxGetDocument((uint64_t)v2 + 24, &v4);
    if (v4)
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v7, (void *)v7.__r_.__value_.__l.__size_);
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    v2 += 3;
  }
  v7.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
}

void sub_23F69A318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::vector<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void realityio::mtlx::anonymous namespace'::_DiscoverNodes(RIO_MTLX *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  std::string v7 = RIO_MTLX::EMPTY_STRING(a1);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeDef>(a2, (uint64_t)v7, &v61);
  uint64_t v8 = v61;
  uint64_t v51 = v62;
  if (v61 != v62)
  {
    char v9 = (const void **)(a4 + 8);
    uint64_t v50 = (long long *)((char *)a3 + 24);
    uint64_t v10 = a4 + 16;
    do
    {
      char v60 = 0;
      MEMORY[0x2455CF830](&v59, *(void *)v8 + 48);
      char v11 = *(std::__shared_weak_count **)(v8 + 8);
      uint64_t v55 = *(RIO_MTLX::InterfaceElement **)v8;
      uint64_t v56 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Versiouint64_t n = realityio::mtlx::UsdMtlxGetVersion(&v55, &v60);
      int v58 = v12;
      int v13 = (const void **)(*(void *)v8 + 48);
      uint64_t v14 = (char *)*v9;
      if (!*v9) {
        goto LABEL_12;
      }
      int v15 = v9;
      do
      {
        BOOL v16 = std::less<std::string>::operator()[abi:ne180100](v10, (const void **)v14 + 4, v13);
        int v17 = (void **)(v14 + 8);
        if (!v16)
        {
          int v17 = (void **)v14;
          int v15 = (const void **)v14;
        }
        uint64_t v14 = (char *)*v17;
      }
      while (*v17);
      if (v15 == v9 || std::less<std::string>::operator()[abi:ne180100](v10, v13, v15 + 4)) {
LABEL_12:
      }
        int v15 = v9;
      size_t v18 = v15 + 7;
      if (v9 == v15) {
        size_t v18 = v13;
      }
      if (*((char *)v18 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)*v18, (std::string::size_type)v18[1]);
      }
      else {
        std::string v54 = *(std::string *)v18;
      }
      Nodeuint64_t String = RIO_MTLX::NodeDef::getNodeString(*(RIO_MTLX::NodeDef **)v8);
      MEMORY[0x2455CF830](&v53, NodeString);
      unint64_t v23 = *((void *)a1 + 1);
      unint64_t v22 = *((void *)a1 + 2);
      uint64_t v24 = v59;
      if (v23 >= v22)
      {
        unint64_t v26 = 0x84BDA12F684BDA13 * ((uint64_t)(v23 - *(void *)a1) >> 3);
        unint64_t v27 = v26 + 1;
        if (v26 + 1 > 0x12F684BDA12F684) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v28 = 0x84BDA12F684BDA13 * ((uint64_t)(v22 - *(void *)a1) >> 3);
        if (2 * v28 > v27) {
          unint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x97B425ED097B42) {
          unint64_t v29 = 0x12F684BDA12F684;
        }
        else {
          unint64_t v29 = v27;
        }
        size_t v66 = (void *)((char *)a1 + 16);
        if (v29)
        {
          if (v29 > 0x12F684BDA12F684) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v30 = (void **)operator new(216 * v29);
        }
        else
        {
          int v30 = 0;
        }
        size_t v63 = v30;
        v64.i64[0] = (uint64_t)&v30[27 * v26];
        v64.i64[1] = v64.i64[0];
        size_t v65 = &v30[27 * v29];
        std::allocator<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::NdrVersion,std::string,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken&,pxrInternal__aapl__pxrReserved__::TfToken&,std::string const&,std::string const&>(v64.i64[0], v24, &Version, (long long *)&v54, &v53, v20, v21, a3, v50);
        uint64_t v31 = v64.i64[0];
        uint64_t v25 = v64.i64[1] + 216;
        v64.i64[1] += 216;
        uint64_t v33 = *(void *)a1;
        unint64_t v32 = *((void *)a1 + 1);
        if (v32 == *(void *)a1)
        {
          int64x2_t v48 = vdupq_n_s64(v32);
        }
        else
        {
          uint64_t v34 = 0;
          do
          {
            uint64_t v35 = v31 + v34;
            uint64_t v36 = v32 + v34;
            *(void *)(v35 - 216) = *(void *)(v32 + v34 - 216);
            *(void *)(v36 - 216) = 0;
            uint64_t v37 = *(void *)(v32 + v34 - 208);
            *(_DWORD *)(v35 - 200) = *(_DWORD *)(v32 + v34 - 200);
            *(void *)(v35 - 208) = v37;
            long long v38 = *(_OWORD *)(v32 + v34 - 192);
            *(void *)(v35 - 176) = *(void *)(v32 + v34 - 176);
            *(_OWORD *)(v35 - 192) = v38;
            *(void *)(v36 - 184) = 0;
            *(void *)(v36 - 176) = 0;
            *(void *)(v36 - 192) = 0;
            *(void *)(v35 - 168) = *(void *)(v32 + v34 - 168);
            *(void *)(v36 - 168) = 0;
            *(void *)(v35 - 160) = *(void *)(v32 + v34 - 160);
            *(void *)(v36 - 160) = 0;
            *(void *)(v35 - 152) = *(void *)(v32 + v34 - 152);
            *(void *)(v36 - 152) = 0;
            long long v39 = *(_OWORD *)(v32 + v34 - 144);
            *(void *)(v35 - 128) = *(void *)(v32 + v34 - 128);
            *(_OWORD *)(v35 - 144) = v39;
            *(void *)(v36 - 136) = 0;
            *(void *)(v36 - 128) = 0;
            *(void *)(v36 - 144) = 0;
            long long v40 = *(_OWORD *)(v32 + v34 - 120);
            *(void *)(v35 - 104) = *(void *)(v32 + v34 - 104);
            *(_OWORD *)(v35 - 120) = v40;
            *(void *)(v36 - 112) = 0;
            *(void *)(v36 - 104) = 0;
            *(void *)(v36 - 120) = 0;
            long long v41 = *(_OWORD *)(v32 + v34 - 96);
            *(void *)(v35 - 80) = *(void *)(v32 + v34 - 80);
            *(_OWORD *)(v35 - 96) = v41;
            *(void *)(v36 - 96) = 0;
            *(void *)(v36 - 88) = 0;
            uint64_t v42 = *(void *)(v32 + v34 - 72);
            *(void *)(v36 - 80) = 0;
            *(void *)(v36 - 72) = 0;
            *(void *)(v35 - 72) = v42;
            *(void *)(v35 - 64) = *(void *)(v32 + v34 - 64);
            *(void *)(v36 - 64) = 0;
            uint64_t v43 = *(void *)(v32 + v34 - 56);
            *(void *)(v31 + v34 - 56) = v43;
            uint64_t v44 = *(void *)(v32 + v34 - 48);
            *(void *)(v35 - 48) = v44;
            *(_DWORD *)(v35 - 40) = *(_DWORD *)(v32 + v34 - 40);
            if (v44)
            {
              unint64_t v45 = *(void *)(v43 + 8);
              unint64_t v46 = *(void *)(v35 - 64);
              if ((v46 & (v46 - 1)) != 0)
              {
                if (v45 >= v46) {
                  v45 %= v46;
                }
              }
              else
              {
                v45 &= v46 - 1;
              }
              *(void *)(v42 + 8 * v45) = v31 + v34 - 56;
              *(void *)(v32 + v34 - 56) = 0;
              *(void *)(v32 + v34 - 48) = 0;
            }
            long long v47 = *(_OWORD *)(v36 - 32);
            *(void *)(v35 - 16) = *(void *)(v36 - 16);
            *(_OWORD *)(v35 - 32) = v47;
            *(void *)(v36 - 24) = 0;
            *(void *)(v36 - 16) = 0;
            *(void *)(v36 - 32) = 0;
            *(void *)(v35 - 8) = *(void *)(v36 - 8);
            *(void *)(v36 - 8) = 0;
            v34 -= 216;
          }
          while (v32 + v34 != v33);
          int64x2_t v48 = *(int64x2_t *)a1;
          uint64_t v25 = v64.i64[1];
          v31 += v34;
        }
        *(void *)a1 = v31;
        *((void *)a1 + 1) = v25;
        int64x2_t v64 = v48;
        uint64_t v49 = (void **)*((void *)a1 + 2);
        *((void *)a1 + 2) = v65;
        size_t v65 = v49;
        size_t v63 = (void **)v48.i64[0];
        std::__split_buffer<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::~__split_buffer((uint64_t)&v63);
      }
      else
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::NdrVersion,std::string,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken&,pxrInternal__aapl__pxrReserved__::TfToken&,std::string const&,std::string const&>(v23, v59, &Version, (long long *)&v54, &v53, v20, v21, a3, v50);
        uint64_t v25 = v23 + 216;
        *((void *)a1 + 1) = v23 + 216;
      }
      *((void *)a1 + 1) = v25;
      if ((v53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      if ((v59 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v8 += 16;
    }
    while (v8 != v51);
  }
  size_t v63 = (void **)&v61;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v63);
}

void sub_23F69A8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if ((a25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string __p = &a27;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void realityio::mtlx::anonymous namespace'::_ComputeNameMapping(RIO_MTLX *a1, uint64_t a2)
{
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 1) = 0;
  *(void *)a1 = (char *)a1 + 8;
  uint64_t v3 = RIO_MTLX::EMPTY_STRING(a1);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeDef>(a2, (uint64_t)v3, (uint64_t *)&v39);
  BOOL v5 = v39;
  uint64_t v36 = v40;
  if (v39 == v40) {
    goto LABEL_98;
  }
  do
  {
    uint64_t v6 = *v5;
    std::string v7 = (unsigned __int8 *)RIO_MTLX::Element::INHERIT_ATTRIBUTE((RIO_MTLX::Element *)v4);
    uint64_t v4 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v6 + 160), v7);
    if (!v4) {
      goto LABEL_94;
    }
    uint64_t v8 = *v5;
    char v9 = (std::__shared_weak_count *)v5[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = v5;
    if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_34, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&_MergedGlobals_34))
    {
      std::string::basic_string[abi:ne180100]<0>(byte_268C408D0, "inherit");
      __cxa_guard_release(&_MergedGlobals_34);
    }
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (void *)v8;
    char v11 = v9;
    uint64_t v12 = v8 + 48;
    do
    {
      int v13 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v10 + 20, byte_268C408D0);
      if (v13) {
        uint64_t v14 = (uint64_t *)(v13 + 40);
      }
      else {
        uint64_t v14 = RIO_MTLX::EMPTY_STRING(0);
      }
      if (*((char *)v14 + 23) < 0)
      {
        if (!v14[1]) {
          break;
        }
      }
      else if (!*((unsigned char *)v14 + 23))
      {
        break;
      }
      int v15 = (std::__shared_weak_count *)v10[31];
      if (v15)
      {
        BOOL v16 = std::__shared_weak_count::lock(v15);
        if (v16) {
          uint64_t v17 = v10[30];
        }
        else {
          uint64_t v17 = 0;
        }
      }
      else
      {
        uint64_t v17 = 0;
        BOOL v16 = 0;
      }
      size_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v17 + 96), (unsigned __int8 *)v14);
      if (v18)
      {
        uint64_t v19 = *((void *)v18 + 5);
        size_t v20 = (std::__shared_weak_count *)*((void *)v18 + 6);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v16) {
LABEL_25:
        }
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      else
      {
        size_t v20 = 0;
        uint64_t v19 = 0;
        if (v16) {
          goto LABEL_25;
        }
      }
      if (v19)
      {
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        if (*(char *)(v19 + 71) < 0) {
          unint64_t v21 = *(void *)(v19 + 56);
        }
        else {
          unint64_t v21 = *(unsigned __int8 *)(v19 + 71);
        }
        if (*(char *)(v12 + 23) < 0) {
          unint64_t v22 = *(void *)(v12 + 8);
        }
        else {
          unint64_t v22 = *(unsigned __int8 *)(v12 + 23);
        }
        if (v21 < v22) {
          uint64_t v12 = v19 + 48;
        }
        uint64_t v10 = (void *)v19;
        char v11 = v20;
      }
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
    }
    while (v19);
    unint64_t v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string const&>((uint64_t)a1, (const void **)(v8 + 48), v8 + 48, v12);
    if (!v24)
    {
      unint64_t v25 = *(char *)(v12 + 23) < 0 ? *(void *)(v12 + 8) : *(unsigned __int8 *)(v12 + 23);
      unint64_t v26 = *((char *)v23 + 79) < 0 ? v23[8] : *((unsigned __int8 *)v23 + 79);
      if (v25 < v26) {
        std::string::operator=((std::string *)(v23 + 7), (const std::string *)v12);
      }
    }
    while (2)
    {
      uint64_t v4 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v8 + 160), byte_268C408D0);
      if (v4)
      {
        unint64_t v27 = v4 + 40;
      }
      else
      {
        uint64_t v4 = (char *)RIO_MTLX::EMPTY_STRING(0);
        unint64_t v27 = v4;
      }
      if (v27[23] < 0)
      {
        if (!*((void *)v27 + 1)) {
          break;
        }
      }
      else if (!v27[23])
      {
        break;
      }
      unint64_t v28 = *(std::__shared_weak_count **)(v8 + 248);
      if (v28)
      {
        unint64_t v29 = std::__shared_weak_count::lock(v28);
        if (v29) {
          uint64_t v30 = *(void *)(v8 + 240);
        }
        else {
          uint64_t v30 = 0;
        }
      }
      else
      {
        uint64_t v30 = 0;
        unint64_t v29 = 0;
      }
      uint64_t v4 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v30 + 96), (unsigned __int8 *)v27);
      if (v4)
      {
        uint64_t v31 = *((void *)v4 + 5);
        unint64_t v32 = (std::__shared_weak_count *)*((void *)v4 + 6);
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v29) {
LABEL_70:
        }
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      else
      {
        uint64_t v31 = 0;
        unint64_t v32 = 0;
        if (v29) {
          goto LABEL_70;
        }
      }
      if (v31)
      {
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        uint64_t v4 = (char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string const&>((uint64_t)a1, (const void **)(v31 + 48), v31 + 48, v12);
        char v9 = v32;
        uint64_t v8 = v31;
        if (!v33)
        {
          unint64_t v34 = *(char *)(v12 + 23) < 0 ? *(void *)(v12 + 8) : *(unsigned __int8 *)(v12 + 23);
          unint64_t v35 = v4[79] < 0 ? *((void *)v4 + 8) : v4[79];
          char v9 = v32;
          uint64_t v8 = v31;
          if (v34 < v35)
          {
            uint64_t v4 = (char *)std::string::operator=((std::string *)(v4 + 56), (const std::string *)v12);
            char v9 = v32;
            uint64_t v8 = v31;
          }
        }
      }
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      if (v31) {
        continue;
      }
      break;
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    BOOL v5 = v37;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
LABEL_94:
    v5 += 2;
  }
  while (v5 != v36);
LABEL_98:
  long long v41 = (void **)&v39;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v41);
}

void sub_23F69AD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  __cxa_guard_abort(&_MergedGlobals_34);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  a16 = (void **)&a13;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a12, *(void **)(a12 + 8));
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::UsdMtlxDiscoveryPlugin::GetSearchURIs(realityio::mtlx::UsdMtlxDiscoveryPlugin *this)
{
  return (uint64_t)this + 48;
}

void realityio::mtlx::_Tf_RegistryFunctionBar0(realityio::mtlx *this, const std::type_info *a2, void *a3)
{
  unsigned __int8 v3 = atomic_load(MEMORY[0x263F90520]);
  if ((v3 & 1) != 0 && pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin())
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
    char v4 = 0;
    int v5 = 2;
  }
  else
  {
    int v5 = 0;
    char v4 = 1;
  }
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((uint64_t *)__p, MEMORY[0x263F90658], a2);
  uint64_t v6 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::Declare();
  char v9 = operator new(8uLL);
  void *v9 = v6;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::Declare();
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc(v8, MEMORY[0x263F90658], (void *(*)(void *, BOOL))pxrInternal__aapl__pxrReserved__::Tf_CastToParent<realityio::mtlx::UsdMtlxDiscoveryPlugin,pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin>);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v9) {
    operator delete(v9);
  }
  if ((v4 & 1) == 0)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
      --v5;
    }
    while (v5);
  }
  operator new();
}

void sub_23F69B008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::UsdMtlxDiscoveryPlugin::~UsdMtlxDiscoveryPlugin(realityio::mtlx::UsdMtlxDiscoveryPlugin *this)
{
  realityio::mtlx::UsdMtlxDiscoveryPlugin::~UsdMtlxDiscoveryPlugin(this);

  JUMPOUT(0x2455D2BD0);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_26F342DB0;
  uint64_t v2 = (void **)((char *)this + 24);
  unsigned __int8 v3 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  unsigned __int8 v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(this);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::mtlx::anonymous namespace'::anonymous namespace'::_tokens_PrivateStaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::mtlx::anonymous namespace'::anonymous namespace'::_tokens_PrivateStaticTokenType>>::operator->()
{
  if (!v0) {
    operator new();
  }
  return v0;
}

{
  unint64_t v0;
  uint64_t v2;

  uint64_t v2 = *MEMORY[0x263EF8340];
  if (!v0) {
    operator new();
  }
  return v0;
}

void sub_23F69B234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455D2BD0](v9, 0x60C405399E965);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::NdrVersion,std::string,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken&,pxrInternal__aapl__pxrReserved__::TfToken&,std::string const&,std::string const&>(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, long long *a8, long long *a9)
{
  *(_OWORD *)__uint64_t n = 0u;
  long long v48 = 0u;
  int v49 = 1065353216;
  *(void *)a1 = a2;
  if ((a2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 8) = v15;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v16 = *a4;
    *(void *)(a1 + 40) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v16;
  }
  uint64_t v17 = *a5;
  *(void *)(a1 + 48) = *a5;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *a6;
  *(void *)(a1 + 56) = *a6;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 56) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *a7;
  *(void *)(a1 + 64) = *a7;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 64) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *(const std::string::value_type **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v20 = *a8;
    *(void *)(a1 + 88) = *((void *)a8 + 2);
    *(_OWORD *)(a1 + 72) = v20;
  }
  if (*((char *)a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a9, *((void *)a9 + 1));
  }
  else
  {
    long long v21 = *a9;
    *(void *)(a1 + 112) = *((void *)a9 + 2);
    *(_OWORD *)(a1 + 96) = v21;
  }
  *(_OWORD *)(a1 + 120) = 0u;
  unint64_t v22 = (uint64_t *)(a1 + 144);
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 176) = v49;
  std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>(a1 + 144, __n[1]);
  unint64_t v23 = (uint64_t *)v48;
  if ((void)v48)
  {
    char v24 = (std::string::__raw **)(a1 + 160);
    do
    {
      unint64_t v25 = v23[2] & 0xFFFFFFFFFFFFFFF8;
      unint64_t v26 = bswap64(0x9E3779B97F4A7C55 * v25);
      unint64_t v27 = *(void *)(a1 + 152);
      if (v27)
      {
        uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
        v28.i16[0] = vaddlv_u8(v28);
        if (v28.u32[0] > 1uLL)
        {
          unint64_t v9 = v26;
          if (v26 >= v27) {
            unint64_t v9 = v26 % v27;
          }
        }
        else
        {
          unint64_t v9 = v26 & (v27 - 1);
        }
        unint64_t v29 = *(void **)(*v22 + 8 * v9);
        if (v29)
        {
          for (uint64_t i = (void *)*v29; i; uint64_t i = (void *)*i)
          {
            unint64_t v31 = i[1];
            if (v31 == v26)
            {
              if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v25) {
                goto LABEL_68;
              }
            }
            else
            {
              if (v28.u32[0] > 1uLL)
              {
                if (v31 >= v27) {
                  v31 %= v27;
                }
              }
              else
              {
                v31 &= v27 - 1;
              }
              if (v31 != v9) {
                break;
              }
            }
          }
        }
      }
      unint64_t v32 = (std::string *)operator new(0x30uLL);
      char v33 = (std::string::__raw *)v32;
      v50[0] = v32;
      v50[1] = a1 + 160;
      char v51 = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      v32->__r_.__value_.__l.__size_ = v26;
      std::string::size_type v34 = v23[2];
      v32->__r_.__value_.__r.__words[2] = v34;
      if ((v34 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v32->__r_.__value_.__r.__words[2] &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v35 = v32 + 1;
      if (*((char *)v23 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)v23[3], v23[4]);
      }
      else
      {
        long long v36 = *(_OWORD *)(v23 + 3);
        v33[1].__words[2] = v23[5];
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
      }
      char v51 = 1;
      float v37 = (float)(unint64_t)(*(void *)(a1 + 168) + 1);
      float v38 = *(float *)(a1 + 176);
      if (!v27 || (float)(v38 * (float)v27) < v37)
      {
        BOOL v39 = (v27 & (v27 - 1)) != 0;
        if (v27 < 3) {
          BOOL v39 = 1;
        }
        unint64_t v40 = v39 | (2 * v27);
        unint64_t v41 = vcvtps_u32_f32(v37 / v38);
        if (v40 <= v41) {
          size_t v42 = v41;
        }
        else {
          size_t v42 = v40;
        }
        std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>(a1 + 144, v42);
        unint64_t v27 = *(void *)(a1 + 152);
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v26 >= v27) {
            unint64_t v9 = v26 % v27;
          }
          else {
            unint64_t v9 = v26;
          }
        }
        else
        {
          unint64_t v9 = (v27 - 1) & v26;
        }
      }
      uint64_t v43 = *v22;
      uint64_t v44 = *(std::string::__raw ***)(*v22 + 8 * v9);
      if (v44)
      {
        v33->__words[0] = (std::string::size_type)*v44;
      }
      else
      {
        v33->__words[0] = (std::string::size_type)*v24;
        *char v24 = v33;
        *(void *)(v43 + 8 * v9) = v24;
        if (!v33->__words[0]) {
          goto LABEL_67;
        }
        unint64_t v45 = *(void *)(v33->__words[0] + 8);
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v45 >= v27) {
            v45 %= v27;
          }
        }
        else
        {
          v45 &= v27 - 1;
        }
        uint64_t v44 = (std::string::__raw **)(*v22 + 8 * v45);
      }
      *uint64_t v44 = v33;
LABEL_67:
      v50[0] = 0;
      ++*(void *)(a1 + 168);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v50);
LABEL_68:
      unint64_t v23 = (uint64_t *)*v23;
    }
    while (v23);
  }
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>>>::~__hash_table((uint64_t)__n);
}

void sub_23F69B6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void **a4, void **a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 + 95) < 0) {
    operator delete(*a4);
  }
  uint64_t v7 = *(void *)(v5 + 64);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(v5 + 56);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(v5 + 47) < 0) {
    operator delete(*a5);
  }
  if ((*(void *)v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::string>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unsigned __int8 v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult::~NdrNodeDiscoveryResult(pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult *this)
{
  uint64_t v2 = *((void *)this + 26);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>>>::~__hash_table((uint64_t)this + 144);
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  uint64_t v3 = *((void *)this + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 7);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 6);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 216;
    pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult::~NdrNodeDiscoveryResult((pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult *)(i - 216));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string const&>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>(a1, &v16, a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    uint64_t v10 = (char *)operator new(0x50uLL);
    char v11 = v10;
    v14[0] = (uint64_t *)v10;
    v14[1] = (uint64_t *)(a1 + 8);
    char v15 = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v10 + 32), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
      *((void *)v10 + 6) = *(void *)(a3 + 16);
    }
    uint64_t v12 = (std::string *)(v11 + 56);
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
      *((void *)v11 + 9) = *(void *)(a4 + 16);
    }
    char v15 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, v16, v9, v14[0]);
    uint64_t v8 = v14[0];
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
  }
  return v8;
}

void sub_23F69BB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 55) < 0) {
    operator delete(*v10);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrDiscoveryPluginFactory<realityio::mtlx::UsdMtlxDiscoveryPlugin>::~NdrDiscoveryPluginFactory(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  JUMPOUT(0x2455D2BD0);
}

void pxrInternal__aapl__pxrReserved__::NdrDiscoveryPluginFactory<realityio::mtlx::UsdMtlxDiscoveryPlugin>::New()
{
}

void sub_23F69BC94(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x10A1C402F18DB2ELL);
  _Unwind_Resume(a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult::~NdrNodeDiscoveryResult((pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult *)(v4 - 216));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t RIOBuilderDirtyPropertyDescriptorGetTypeID()
{
  if (RIOBuilderDirtyPropertyDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderDirtyPropertyDescriptorGetTypeID::onceToken, &__block_literal_global_21);
  }
  return RIOBuilderDirtyPropertyDescriptorGetTypeID::typeID;
}

void __RIOBuilderDirtyPropertyDescriptorGetTypeID_block_invoke()
{
  if (!RIOBuilderDirtyPropertyDescriptorGetTypeID::typeID) {
    RIOBuilderDirtyPropertyDescriptorGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOBuilderDirtyPropertyDescriptorCreateWithMetadataDescriptors(const __CFArray *a1)
{
  memset(v10, 0, sizeof(v10));
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      uint64_t v5 = ValueAtIndex[3];
      *(void *)&long long v9 = ValueAtIndex[2];
      *((void *)&v9 + 1) = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100]((uint64_t *)v10, &v9);
      if (*((void *)&v9 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
      }
    }
  }
  uint64_t v6 = operator new(0x40uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26F342ED0;
  *(void *)&long long v9 = realityio::PrimitiveDirtyPropertyDescriptor::PrimitiveDirtyPropertyDescriptor((uint64_t)(v6 + 3), v10);
  *((void *)&v9 + 1) = v6;
  uint64_t v7 = RIOBuilderDirtyPropertyDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> &>(&v9);
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  *(void *)&long long v9 = v10;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  return v7;
}

void sub_23F69BF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, std::__shared_weak_count *a11, char a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  a10 = (void **)&a12;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

__CFArray *anonymous namespace'::dirtyMetadataDescriptorsFromPropertyDescriptor(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v3)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>(&v12, *(void **)(v3 + 8), *(void **)(v3 + 16), (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 4);
      uint64_t v5 = v12;
      for (uint64_t i = v13; v5 != i; v5 += 16)
      {
        uint64_t v10 = *(void ***)v5;
        uint64_t v7 = *(std::__shared_weak_count **)(v5 + 8);
        char v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (const void *)RIOBuilderDirtyMetadataDescriptorCreate<std::shared_ptr<realityio::DirtyMetadataDescriptor const> &>(&v10);
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      uint64_t v10 = (void **)&v12;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v10);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return Mutable;
}

void sub_23F69C0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderAnyValueDirtyPropertyDescriptorCreateWithNameAndMetadataDescriptors(uint64_t a1, CFArrayRef theArray)
{
  if (a1)
  {
    unint64_t v3 = *(void *)(a1 + 16);
    unint64_t v13 = v3;
    if ((v3 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      unint64_t v13 = v3 & 0xFFFFFFFFFFFFFFF8;
      v3 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v13 = 0;
  }
  memset(v12, 0, sizeof(v12));
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      uint64_t v7 = ValueAtIndex[3];
      *(void *)&long long v11 = ValueAtIndex[2];
      *((void *)&v11 + 1) = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100]((uint64_t *)v12, &v11);
      if (*((void *)&v11 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
      }
    }
  }
  uint64_t v8 = operator new(0x50uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_26F342F20;
  *(void *)&long long v11 = realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor((uint64_t)(v8 + 3), (uint64_t *)&v13, v12);
  *((void *)&v11 + 1) = v8;
  uint64_t v9 = RIOBuilderDirtyPropertyDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> &>(&v11);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)&long long v11 = v12;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v9;
}

void sub_23F69C234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderAnyValueDirtyPropertyDescriptorCopyName(uint64_t a1)
{
  if (!a1)
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1) {
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_2_2);
    }
    return RIOPxrTfTokenEmpty::tokenRef;
  }
  uint64_t v2 = *(const void **)(a1 + 16);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v2)
  {
    if (RIOPxrTfTokenEmpty::onceToken == -1)
    {
LABEL_16:
      uint64_t v5 = RIOPxrTfTokenEmpty::tokenRef;
      if (v3) {
        goto LABEL_17;
      }
      return v5;
    }
LABEL_19:
    dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_2_2);
    goto LABEL_16;
  }
  if (!v4)
  {
    if (RIOPxrTfTokenEmpty::onceToken == -1) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v4 + 5);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_17:
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v5;
}

void sub_23F69C3D0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCreateWithNamespacePrefixAndMetadataDescriptors(__CFString *a1, const __CFArray *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (a1)
  {
    realityio::CFStringCopyUTF8String(a1, (uint64_t)&v13);
    if ((_BYTE)v13)
    {
      int v4 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v12, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
      }
      else {
        std::string v12 = v14;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v12;
      if (v4 < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
    }
  }
  unint64_t v13 = 0;
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = 0uLL;
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      std::string::size_type v8 = ValueAtIndex[3];
      v12.__r_.__value_.__r.__words[0] = ValueAtIndex[2];
      v12.__r_.__value_.__l.__size_ = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100]((uint64_t *)&v13, (long long *)&v12);
      if (v12.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12.__r_.__value_.__l.__size_);
      }
    }
  }
  uint64_t v9 = operator new(0x60uLL);
  v9[1] = 0;
  void v9[2] = 0;
  void *v9 = &unk_26F342F70;
  v12.__r_.__value_.__r.__words[0] = realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor((uint64_t)(v9 + 3), (long long *)&__p, &v13);
  v12.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  uint64_t v10 = RIOBuilderDirtyPropertyDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> &>(&v12);
  if (v12.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12.__r_.__value_.__l.__size_);
  }
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_23F69C58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  operator delete(v22);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__CFString *RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCopyNamespacePrefix(uint64_t a1)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  uint64_t v2 = *(const void **)(a1 + 16);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = v4 + 40;
    if (v4[63] < 0) {
      uint64_t v5 = *(const char **)v5;
    }
    CFStringRef v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
    if (v3)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_13:
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else
  {
    CFStringRef v6 = &stru_26F34B2D0;
    if (v3) {
      goto LABEL_13;
    }
  }
  return (__CFString *)v6;
}

void sub_23F69C6F0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderDirtyPropertyDescriptorCopyType(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v2) {
      goto LABEL_15;
    }
  }
  else if (!v2)
  {
    return v2;
  }
  {
    uint64_t v2 = 2;
    if (!v1) {
      return v2;
    }
    goto LABEL_14;
  }
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 1;
  }
  if (v1)
  {
LABEL_14:
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
LABEL_15:
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v2;
}

void _RIOBuilderDirtyPropertyDescriptorCFFinalize(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

BOOL _RIOBuilderDirtyPropertyDescriptorCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderDirtyPropertyDescriptorCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderDirtyPropertyDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderDirtyPropertyDescriptor %p>", a1);
}

CFStringRef _RIOBuilderDirtyPropertyDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderDirtyPropertyDescriptor %p>", a1);
}

void std::__shared_ptr_emplace<realityio::PrimitiveDirtyPropertyDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342ED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PrimitiveDirtyPropertyDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342ED0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::PrimitiveDirtyPropertyDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::AnyValueDirtyPropertyDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnyValueDirtyPropertyDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342F20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::AnyValueDirtyPropertyDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F342F70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *realityio::RigComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  void v9[2] = *MEMORY[0x263EF8340];
  unint64_t v3 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a2, a1);
  uint64_t v8 = 0;
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v3))
  {
    RERigComponentGetComponentType();
    uint64_t v5 = REComponentCreateByClass();
    v9[0] = v5;
    if (v5) {
      RERetain();
    }
    uint64_t v6 = v8;
    if (v8 != v5)
    {
      uint64_t v8 = v5;
      v9[0] = v6;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(v9);
    v9[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy();
  }
  int v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a2);
  realityio::WrappedRERef<REAsset *>::operator=(&v8, v4);
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v8);
}

void sub_23F69CBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

void *realityio::MeshComponentAction::operator()@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  a6[1] = 0;
  unint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  BOOL v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v6 = *a4;
  if (a4[1] == *a4)
  {
    uint64_t v10 = 0;
    goto LABEL_128;
  }
  uint64_t v8 = a4;
  uint64_t v72 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v75 = 0;
  uint64_t v11 = "__meshAsset";
  size_t v76 = 0;
  do
  {
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v95, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * v9));
    std::string v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8 * v9);
    NameTokeuint64_t n = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    MEMORY[0x2455CF810](buf, v11);
    std::string v14 = (atomic_uint *)(*(void *)buf & 0xFFFFFFFFFFFFFFF8);
    if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*(void *)buf & 0xFFFFFFFFFFFFFFF8))
    {
      pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v95);
      if ((buf[0] & 7) == 0) {
        goto LABEL_9;
      }
      std::string v14 = (atomic_uint *)(*(void *)buf & 0xFFFFFFFFFFFFFFF8);
LABEL_8:
      atomic_fetch_add_explicit(v14, 0xFFFFFFFE, memory_order_release);
      goto LABEL_9;
    }
    if ((buf[0] & 7) != 0) {
      goto LABEL_8;
    }
LABEL_9:
    char v15 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    MEMORY[0x2455CF810](buf, v11);
    unint64_t v16 = *v15 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = *(void *)buf;
    if (v16 == (*(void *)buf & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v18 = v11;
      char v19 = v96;
      if (v96)
      {
        if (!strcmp((const char *)(*(void *)(*(void *)(v96 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio26MeshAssetWithMaterialArrayE" & 0x7FFFFFFFFFFFFFFFLL)))
        {
          int IsImpl = 1;
        }
        else
        {
          if ((v19 & 4) == 0) {
            goto LABEL_15;
          }
          uint64_t v17 = *(void *)buf;
        }
LABEL_18:
        uint64_t v11 = v18;
        if ((v17 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!IsImpl) {
          goto LABEL_37;
        }
        if ((v96 & 4) != 0) {
          long long v21 = (void **)(*(uint64_t (**)(void ***))((v96 & 0xFFFFFFFFFFFFFFF8) + 168))(&v95);
        }
        else {
          long long v21 = v95;
        }
        unint64_t v22 = (atomic_ullong *)v21[1];
        *(void *)long long buf = *v21;
        *(void *)&buf[8] = v22;
        if (v22) {
          atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)&uint8_t buf[16] = 0uLL;
        uint64_t v94 = 0;
        std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(&buf[16], (uint64_t)v21[2], (uint64_t)v21[3], ((unsigned char *)v21[3] - (unsigned char *)v21[2]) >> 3);
        uint64_t v24 = *(void *)buf;
        unint64_t v23 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
        }
        int v77 = v23;
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        uint64_t v25 = *(void *)&buf[24];
        unint64_t v26 = *(uint64_t **)&buf[16];
        unint64_t v27 = (uint64_t)(*(void *)&buf[24] - *(void *)&buf[16]) >> 3;
        uint8x8_t v28 = v84;
        uint64_t v75 = v24;
        if (v27 <= (v86 - (uint64_t)v84) >> 3)
        {
          uint64_t v59 = v85;
          unint64_t v60 = (v85 - (char *)v84) >> 3;
          if (v60 >= v27)
          {
            if (*(void *)&buf[16] == *(void *)&buf[24])
            {
              size_t v63 = (char *)v84;
              uint64_t v11 = v18;
            }
            else
            {
              size_t v63 = (char *)v84;
              uint64_t v11 = v18;
              do
              {
                realityio::WrappedRERef<REAsset *>::operator=(v28++, v26++);
                v63 += 8;
              }
              while (v26 != (uint64_t *)v25);
              uint64_t v59 = v85;
            }
            while (v59 != v63)
              uint64_t v59 = (char *)realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)v59 - 1);
            goto LABEL_107;
          }
          if (v85 != (char *)v84)
          {
            uint64_t v61 = 8 * v60;
            uint64_t v62 = *(uint64_t **)&buf[16];
            do
            {
              realityio::WrappedRERef<REAsset *>::operator=(v28++, v62++);
              v61 -= 8;
            }
            while (v61);
            uint8x8_t v28 = (uint64_t *)v85;
          }
          uint64_t v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::WrappedRERef<REAsset *>>,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>((uint64_t)&v86, (uint64_t)&v26[v60], v25, (uint64_t)v28);
        }
        else
        {
          std::vector<realityio::WrappedRERef<REAsset *>>::__vdeallocate((void **)&v84);
          if (v25 - (void)v26 < 0) {
            std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v29 = (v86 - (uint64_t)v84) >> 2;
          if (v29 <= v27) {
            unint64_t v29 = (v25 - (uint64_t)v26) >> 3;
          }
          if ((unint64_t)(v86 - (void)v84) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          std::vector<realityio::WrappedRERef<REAsset *>>::__vallocate[abi:ne180100](&v84, v30);
          uint64_t v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::WrappedRERef<REAsset *>>,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>((uint64_t)&v86, (uint64_t)v26, v25, (uint64_t)v85);
        }
        size_t v63 = (char *)v31;
        uint64_t v11 = v18;
LABEL_107:
        uint64_t v85 = v63;
        BOOL v91 = (void **)&buf[16];
        std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v91);
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        uint64_t v10 = v77;
        uint64_t v8 = a4;
        goto LABEL_110;
      }
LABEL_15:
      int IsImpl = 0;
      goto LABEL_18;
    }
    if ((buf[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
LABEL_37:
    unint64_t v32 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    MEMORY[0x2455CF810](buf, "__materialAssets");
    if ((*v32 & 0xFFFFFFFFFFFFFFF8) == (*(void *)buf & 0xFFFFFFFFFFFFFFF8))
    {
      int v33 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v95);
      if ((buf[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v33)
      {
        if ((v96 & 4) != 0) {
          std::string::size_type v34 = (void **)(*(uint64_t (**)(void ***))((v96 & 0xFFFFFFFFFFFFFFF8) + 168))(&v95);
        }
        else {
          std::string::size_type v34 = v95;
        }
        long long v35 = *((_OWORD *)v34 + 1);
        *(_OWORD *)long long buf = *(_OWORD *)v34;
        *(_OWORD *)&uint8_t buf[16] = v35;
        long long v36 = (const pxrInternal__aapl__pxrReserved__::VtValue *)v34[4];
        uint64_t v94 = v36;
        if (v36)
        {
          float v37 = (atomic_ullong *)((char *)v36 - 16);
          if (*(void *)&buf[24]) {
            float v37 = *(atomic_ullong **)&buf[24];
          }
          atomic_fetch_add_explicit(v37, 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)buf);
        float v38 = v94;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)buf);
        BOOL v39 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v94 + 16 * *(void *)buf);
        while (v38 != v39)
        {
          unint64_t v40 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v91, v38);
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::MaterialAssetPair>(v40))
          {
            if ((v92 & 4) != 0) {
              unint64_t v41 = (uint64_t *)(*(uint64_t (**)(void ***))((v92 & 0xFFFFFFFFFFFFFFF8) + 168))(&v91);
            }
            else {
              unint64_t v41 = (uint64_t *)v91;
            }
            size_t v42 = v88;
            if ((unint64_t)v88 >= v89)
            {
              uint64_t v43 = (uint64_t *)std::vector<realityio::MaterialAssetPair>::__push_back_slow_path<realityio::MaterialAssetPair const&>((uint64_t *)&v87, v41);
            }
            else
            {
              std::allocator<realityio::MaterialAssetPair>::construct[abi:ne180100]<realityio::MaterialAssetPair,realityio::MaterialAssetPair const&>((uint64_t)&v89, v88, v41);
              uint64_t v43 = v42 + 2;
            }
            uint64_t v88 = v43;
          }
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v91);
          float v38 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v38 + 16);
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef(buf);
        goto LABEL_110;
      }
    }
    else if ((buf[0] & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v44 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    MEMORY[0x2455CF810](buf, "__entity");
    if ((*v44 & 0xFFFFFFFFFFFFFFF8) == (*(void *)buf & 0xFFFFFFFFFFFFFFF8))
    {
      int v45 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v95);
      if ((buf[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v45)
      {
        if ((v96 & 4) != 0) {
          goto LABEL_67;
        }
LABEL_75:
        unint64_t v46 = v95;
LABEL_76:
        size_t v76 = *v46;
        goto LABEL_110;
      }
    }
    else if ((buf[0] & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    long long v47 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    MEMORY[0x2455CF810](buf, "__entityPreMesh");
    if ((*v47 & 0xFFFFFFFFFFFFFFF8) == (*(void *)buf & 0xFFFFFFFFFFFFFFF8))
    {
      int v48 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v95);
      if ((buf[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v48)
      {
        if ((v96 & 4) == 0) {
          goto LABEL_75;
        }
LABEL_67:
        unint64_t v46 = (void **)(*(uint64_t (**)(void ***))((v96 & 0xFFFFFFFFFFFFFFF8) + 168))(&v95);
        goto LABEL_76;
      }
    }
    else if ((buf[0] & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    int v49 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    MEMORY[0x2455CF810](buf, "__materialPBAComponent");
    if ((*v49 & 0xFFFFFFFFFFFFFFF8) == (*(void *)buf & 0xFFFFFFFFFFFFFFF8))
    {
      int v50 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v95);
      if ((buf[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v50)
      {
        if ((v96 & 4) != 0) {
          char v51 = (void **)(*(uint64_t (**)(void ***))((v96 & 0xFFFFFFFFFFFFFFF8) + 168))(&v95);
        }
        else {
          char v51 = v95;
        }
        uint64_t v72 = *v51;
        goto LABEL_110;
      }
    }
    else if ((buf[0] & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v52 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    uint64_t v53 = (realityio *)MEMORY[0x2455CF810](buf, "__materialPBAComponent");
    uint64_t v54 = *v52;
    uint64_t v55 = (atomic_uint *)(*(void *)buf & 0xFFFFFFFFFFFFFFF8);
    if ((buf[0] & 7) != 0) {
      atomic_fetch_add_explicit(v55, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)(v54 & 0xFFFFFFFFFFFFFFF8) != v55)
    {
      uint64_t v56 = *(id *)(realityio::logObjects(v53) + 24);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
        uint64_t v58 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v12);
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = Text;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v58;
        _os_log_impl(&dword_23F4EA000, v56, OS_LOG_TYPE_DEFAULT, "\"%s\" MakeMeshComponentAction::Unused input \"%s\"\n", buf, 0x16u);
      }
    }
LABEL_110:
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v95);
    ++v9;
    uint64_t v6 = *v8;
  }
  while (v9 < (v8[1] - *v8) >> 3);
  if (v75)
  {
    BOOL v91 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a6, a3);
    if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(a3)
      || (int64x2_t v64 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a3),
          realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)&v91, v64),
          (size_t v65 = v91) == 0))
    {
      REMeshComponentGetComponentType();
      size_t v95 = (void **)REComponentCreateByClass();
      if (v95) {
        RERetain();
      }
      pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)buf, (uint64_t)a6);
      a6[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy();
    }
    if ((void *)REComponentGetEntity() != v76) {
      REEntityAddExistingComponent();
    }
    *(void *)&long long v78 = v76;
    *((void *)&v78 + 1) = v65;
    *(void *)&long long v79 = v75;
    *((void *)&v79 + 1) = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v80 = 0uLL;
    uint64_t v81 = 0;
    std::vector<realityio::MaterialAssetPair>::__init_with_size[abi:ne180100]<realityio::MaterialAssetPair*,realityio::MaterialAssetPair*>((uint64_t)&v80, v87, v88, ((char *)v88 - (char *)v87) >> 4);
    long long v82 = (unint64_t)v72;
    long long v83 = 0uLL;
    std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>((void *)&v82 + 1, (uint64_t)v84, (uint64_t)v85, (v85 - (char *)v84) >> 3);
    *(void *)&unsigned char buf[24] = 0;
    size_t v66 = (char *)operator new(0x60uLL);
    *(void *)size_t v66 = &unk_26F343030;
    *(_OWORD *)(v66 + 8) = v78;
    *(_OWORD *)(v66 + 24) = v79;
    *(_OWORD *)(v66 + 40) = v80;
    *((void *)v66 + 7) = v81;
    uint64_t v81 = 0;
    long long v80 = 0uLL;
    long long v67 = v83;
    *((_OWORD *)v66 + 4) = v82;
    *((_OWORD *)v66 + 5) = v67;
    long long v83 = 0uLL;
    *((void *)&v82 + 1) = 0;
    *(void *)&unsigned char buf[24] = v66;
    realityio::ECSAction::performBlockPostAssetLoadOnEngineQueue(a1, (uint64_t)buf);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
    size_t v95 = (void **)&v82 + 1;
    std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v95);
    size_t v95 = (void **)&v80;
    std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&v95);
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v91);
  }
LABEL_128:
  *(void *)long long buf = &v84;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = &v87;
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v90);
}

void sub_23F69D5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::VtValue *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v35 - 120));
  *(void *)(v35 - 120) = &a34;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 120));
  a34 = (void **)(v35 - 208);
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&a34);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(v35 - 184));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a11);
  _Unwind_Resume(a1);
}

uint64_t realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::$_0::~$_0(uint64_t a1)
{
  int v4 = (void **)(a1 + 64);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v4 = (void **)(a1 + 32);
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t std::vector<realityio::MaterialAssetPair>::__init_with_size[abi:ne180100]<realityio::MaterialAssetPair*,realityio::MaterialAssetPair*>(uint64_t result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    int v4 = (void *)result;
    if (a4 >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(result + 16, a4);
    uint64_t v8 = v7;
    *int v4 = v7;
    v4[1] = v7;
    v4[2] = &v7[2 * v9];
    char v15 = v7;
    unint64_t v16 = v7;
    v13[0] = v4 + 2;
    v13[1] = &v15;
    _OWORD v13[2] = &v16;
    char v14 = 0;
    if (a2 != a3)
    {
      uint64_t v10 = v7;
      do
      {
        uint64_t v11 = *a2;
        uint64_t *v10 = *a2;
        if (v11) {
          RERetain();
        }
        uint64_t v12 = a2[1];
        v10[1] = v12;
        if (v12) {
          RERetain();
        }
        uint64_t v10 = v16 + 2;
        v16 += 2;
        a2 += 2;
      }
      while (a2 != a3);
      uint64_t v8 = v10;
    }
    char v14 = 1;
    BOOL result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,realityio::MaterialAssetPair*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
    v4[1] = v8;
  }
  return result;
}

void sub_23F69D904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,realityio::MaterialAssetPair*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    unint64_t v2 = **(void ***)(a1 + 8);
    unint64_t v3 = **(void ***)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        int v4 = v3 - 2;
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(v3 - 1);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(v4);
        unint64_t v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

uint64_t std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26F343030;
  int v4 = (void **)(a1 + 72);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v4 = (void **)(a1 + 40);
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

{
  std::__shared_weak_count *v2;
  void **v4;

  *(void *)a1 = &unk_26F343030;
  int v4 = (void **)(a1 + 72);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v4 = (void **)(a1 + 40);
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return MEMORY[0x2455D2BD0](a1, 0xA1C40E599B628);
}

void *std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x60uLL);
  void *v2 = &unk_26F343030;
  std::__compressed_pair_elem<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23F69DAF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F343030;
  return std::__compressed_pair_elem<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  REMeshComponentSetMesh();
  if (REMeshComponentGetMaterialCount()) {
    REMeshComponentRemoveAllMaterials();
  }
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72))
  {
    v20[0] = 0;
    v20[1] = 0;
    char v19 = v20;
    ModelCFIndex Count = REMeshAssetGetModelCount();
    if (ModelCount)
    {
      for (uint64_t i = 0; i != ModelCount; ++i)
      {
        ModelPartCFIndex Count = REMeshAssetGetModelPartCount();
        if (ModelPartCount)
        {
          for (uint64_t j = 0; j != ModelPartCount; ++j)
          {
            if (REMeshAssetGetModelPartMaterial()
              && (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4)
            {
              ModelPartBufferCFIndex Count = REMeshAssetGetModelPartBufferCount();
              if (!ModelPartBufferCount) {
                goto LABEL_20;
              }
              uint64_t v9 = 0;
              BOOL v10 = 1;
              do
              {
                ModelPartBufferuint64_t Name = (const char *)REMeshAssetGetModelPartBufferName();
                if (ModelPartBufferName && !strcmp("osdSubdivisionScheme", ModelPartBufferName)) {
                  break;
                }
                BOOL v10 = ++v9 < ModelPartBufferCount;
              }
              while (ModelPartBufferCount != v9);
              if (v10) {
                std::__tree<std::__value_type<unsigned int,REAsset *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,REAsset *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,REAsset *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,REAsset *>>((uint64_t *)&v19, 0, 0, *(void *)(*(void *)(a1 + 40) + 8));
              }
              else {
LABEL_20:
              }
                std::__tree<std::__value_type<unsigned int,REAsset *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,REAsset *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,REAsset *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,REAsset *>>((uint64_t *)&v19, 0, 0, **(void **)(a1 + 40));
            }
          }
        }
      }
    }
    if (*(void *)(a1 + 48) != *(void *)(a1 + 40))
    {
      unsigned int v12 = 0;
      do
      {
        for (uint64_t k = v20[0]; k; uint64_t k = (void *)*v16)
        {
          char v14 = k;
          unsigned int v15 = *((_DWORD *)k + 8);
          unint64_t v16 = k + 1;
          if (v15 >= v12) {
            unint64_t v16 = v14;
          }
        }
        REMeshComponentAddMaterial();
        ++v12;
      }
      while (v12 < (unint64_t)((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4));
    }
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(v20[0]);
  }
  else
  {
    unsigned int v2 = 1;
    do
    {
      REMeshComponentAddMaterial();
      unint64_t v3 = v2++;
    }
    while (v3 < (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3);
  }
  RENetworkMarkComponentDirty();
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    uint64_t Entity = REComponentGetEntity();
    uint64_t result = *(void *)(a1 + 8);
    if (Entity != result) {
      return REEntityAddExistingComponent();
    }
  }
  return result;
}

void sub_23F69DE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<realityio::MaterialAssetPair>::__init_with_size[abi:ne180100]<realityio::MaterialAssetPair*,realityio::MaterialAssetPair*>(a1 + 32, *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>((void *)(a1 + 64), *(void *)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3);
  return a1;
}

void sub_23F69DF40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void std::__function::__alloc_func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 64);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)(a1 + 32);
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned int,REAsset *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,REAsset *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,REAsset *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,REAsset *>>(uint64_t *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v8 = (uint64_t **)(result + 1);
  uint64_t v7 = result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (void *)v7;
        unsigned int v10 = *(_DWORD *)(v7 + 32);
        if (v10 <= a2) {
          break;
        }
        uint64_t v7 = *v9;
        uint64_t v8 = (uint64_t **)v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v10 >= a2) {
        break;
      }
      uint64_t v7 = v9[1];
      if (!v7)
      {
        uint64_t v8 = (uint64_t **)(v9 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v9 = result + 1;
LABEL_9:
    uint64_t v11 = operator new(0x30uLL);
    v11[8] = a3;
    *((void *)v11 + 5) = a4;
    *(void *)uint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v9;
    *uint64_t v8 = (uint64_t *)v11;
    uint64_t v12 = *(void *)*v6;
    if (v12)
    {
      uint64_t *v6 = v12;
      unint64_t v13 = *v8;
    }
    else
    {
      unint64_t v13 = (uint64_t *)v11;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], v13);
    ++v6[2];
  }
  return result;
}

uint64_t realityio::visitPrimHierarchy(uint64_t result, uint64_t a2, void *a3)
{
  if (*(void *)(a2 + 24))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v19, result, a3);
    uint64_t v4 = v19[0];
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, &v20);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v12 + 1, v21);
    int v5 = v21[7];
    *(void *)&long long v15 = v4;
    *((void *)&v15 + 1) = v19;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, &v12);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v16 + 1, (_DWORD *)&v12 + 1);
    int v17 = v5;
    __int16 v18 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    while (1)
    {
      *(void *)&long long v12 = v19[1];
      *((void *)&v12 + 1) = v19;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      LODWORD(v14) = 0;
      WORD2(v14) = 0;
      if (v15 == v12)
      {
        BOOL v6 = 1;
        if (v16 == v13 && !v17 && !(_BYTE)v18) {
          BOOL v6 = HIBYTE(v18) != 0;
        }
      }
      else
      {
        BOOL v6 = 1;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
      if (!v6) {
        break;
      }
      long long v8 = v15;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, &v16);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v10, (_DWORD *)&v16 + 1);
      v10[1] = v17;
      __int16 v11 = v18;
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v15);
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v8, (uint64_t)&v12);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
      uint64_t v7 = *(void *)(a2 + 24);
      if (!v7) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, long long *))(*(void *)v7 + 48))(v7, &v12);
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
      if (*((void *)&v12 + 1)) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v12 + 1));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  }
  return result;
}

void sub_23F69E300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::~iterator((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)va);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::~iterator((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)va2);
  _Unwind_Resume(a1);
}

uint64_t realityio::findOriginalSourceAttribute@<X0>(realityio *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)this;
  uint64_t v5 = *((void *)this + 1);
  *(void *)(a2 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 16), (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 20), (_DWORD *)this + 5);
  uint64_t v6 = *((void *)this + 3);
  *(void *)(a2 + 24) = v6;
  uint64_t v7 = (void *)(a2 + 24);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *v7 &= 0xFFFFFFFFFFFFFFF8;
  }
  LODWORD(v28) = 1;
  uint64_t v29 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v32 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v36 = 0;
  uint64_t v33 = MEMORY[0x263F90790] + 16;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  uint64_t v27 = 0;
  int v26 = 0;
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v24 = (uint64_t *)v25;
  do
  {
    if (!pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource()) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v28);
    uint64_t v8 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v24, &v28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
    if (v8) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v28);
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(&v24, &v28, &v28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
    if (v26 == 2)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(&v19, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v33, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27);
      LODWORD(v28) = v19;
      uint64_t v29 = v20;
      if (v20) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v30, &v21);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, &v22);
      uint64_t v32 = v23;
      if ((v23 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v32 &= 0xFFFFFFFFFFFFFFF8;
      }
      *(_DWORD *)a2 = v28;
      uint64_t v12 = v29;
      uint64_t v29 = 0;
      uint64_t v13 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v12;
      if (v13) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 16, &v30);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 20);
      if (&v28 == (uint64_t *)a2)
      {
        uint64_t v14 = v32;
      }
      else
      {
        if ((*v7 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v14 = 0;
        *uint64_t v7 = v32;
        uint64_t v32 = 0;
      }
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
      if (v29) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
      }
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v26 == 1)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(&v28, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v33, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27);
        *(_DWORD *)a2 = v28;
        uint64_t v9 = v29;
        if (v29) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 48), 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v9;
        if (v10) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 16, &v30);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 20, &v31);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)(a2 + 24), &v32);
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
        uint64_t v11 = v29;
        if (!v29) {
          continue;
        }
LABEL_52:
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
        continue;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v19, &v34, &v35);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v28, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27);
      *(_DWORD *)a2 = v28;
      uint64_t v15 = v29;
      uint64_t v29 = 0;
      uint64_t v16 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v15;
      if (v16) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 16, &v30);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 20);
      if (&v28 == (uint64_t *)a2)
      {
        uint64_t v17 = v32;
      }
      else
      {
        if ((*v7 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v17 = 0;
        *uint64_t v7 = v32;
        uint64_t v32 = 0;
      }
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
      if (v29) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
      }
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
    uint64_t v11 = v20;
    if (v20) {
      goto LABEL_52;
    }
  }
  while ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a2) & 1) != 0);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v24, v25[0]);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return MEMORY[0x2455CF2C0](&v33);
}

void sub_23F69E870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute(v14);
  _Unwind_Resume(a1);
}

const void **realityio::assignGamutFromToken(const void **result, unsigned char *a2, uint64_t *a3)
{
  *a2 = 0;
  uint64_t v3 = *a3;
  if (*a3)
  {
    uint64_t v4 = (float32x4_t *)result;
    CFStringRef v15 = 0;
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFF8;
    if (v5) {
      uint64_t EmptyString = v5 + 16;
    }
    else {
      uint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    }
    if (*(char *)(EmptyString + 23) >= 0) {
      uint64_t v7 = (const char *)EmptyString;
    }
    else {
      uint64_t v7 = *(const char **)EmptyString;
    }
    CFStringRef v15 = CFStringCreateWithCString(0, v7, 0x8000100u);
    CFStringRef v8 = (const __CFString *)MEMORY[0x2455CDE90](v15);
    if (v8)
    {
      CGColorSpaceRef v9 = CGColorSpaceCreateWithName(v8);
      CFTypeRef cf = v9;
      if (v9)
      {
        float64x2_t v10 = vcvt_hight_f64_f32(*v4);
        *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)v4->f32);
        float64x2_t v13 = v10;
        CFTypeRef v11 = CGColorCreate(v9, components);
        RECGColorToColorGamut();
        realityio::WrappedCFRef<CGColor *>::~WrappedCFRef(&v11);
      }
      realityio::WrappedCFRef<CGColorSpace *>::~WrappedCFRef(&cf);
    }
    return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v15);
  }
  return result;
}

void sub_23F69EA28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, const void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  realityio::WrappedCFRef<CGColor *>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<CGColorSpace *>::~WrappedCFRef((const void **)va1);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v2 - 40));
  _Unwind_Resume(a1);
}

const void **realityio::assignGamutFromAttribute(const void **a1, unsigned char *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  *a2 = 0;
  uint64_t result = (const void **)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(&v7, this);
    uint64_t result = realityio::assignGamutFromToken(a1, a2, &v7);
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

double realityio::getColorAttributeAndGamut@<D0>(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1@<X0>, __n128 *a2@<X8>, __n128 a3@<Q0>)
{
  __n128 v14 = a3;
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  unint64_t v5 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1, (uint64_t)&TypeName);
    if ((_BYTE)TypeName)
    {
      v7.n128_u64[0] = v11.n128_u64[0];
      v7.n128_u64[1] = __PAIR64__(1.0, v11.n128_u32[2]);
LABEL_11:
      __n128 v14 = v7;
      goto LABEL_14;
    }
LABEL_12:
    if (v13 < 0) {
      operator delete(__p);
    }
    goto LABEL_14;
  }
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  if (!atomic_load(v5)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1, (uint64_t)&TypeName);
    if ((_BYTE)TypeName)
    {
      __n128 v7 = v11;
      goto LABEL_11;
    }
    goto LABEL_12;
  }
LABEL_14:
  LOBYTE(TypeName) = 0;
  realityio::assignGamutFromAttribute((const void **)&v14, &TypeName, a1);
  double result = v14.n128_f64[0];
  *a2 = v14;
  a2[1].n128_u8[0] = TypeName;
  return result;
}

uint64_t realityio::getAttributeColor4FAndGamut@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, __n128 *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *a3 = a4;
  a3[1].n128_u8[0] = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v9, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9))
    {
      realityio::getColorAttributeAndGamut((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v9, &v13, a4);
      *a3 = v13;
      a3[1].n128_u8[0] = v14;
    }
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    uint64_t result = v10;
    if (v10) {
      return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
    }
  }
  return result;
}

void sub_23F69ED14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::hasInputsLoop(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v7 = 0;
  uint64_t v4 = MEMORY[0x263F90790] + 16;
  if (v5
    && (*(unsigned char *)(v5 + 57) & 8) == 0
    && (*(unsigned int (**)(uint64_t *))(MEMORY[0x263F90790] + 48))(&v4))
  {
    v15[0] = 0;
    v15[1] = 0;
    unsigned __int8 v14 = (uint64_t *)v15;
    memset(v13, 0, sizeof(v13));
    std::deque<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>::push_back(v13, (uint64_t)&v4);
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v8, &v5, &v6);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, &v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
    if (v9) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
    }
    std::deque<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>::~deque[abi:ne180100]((uint64_t)v13);
  }
  else
  {
    uint64_t hasCyclesHelper = 0;
  }
  MEMORY[0x2455CF2C0](&v4);
  return hasCyclesHelper;
}

void sub_23F69EEAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  std::deque<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>::~deque[abi:ne180100]((uint64_t)va3);
  MEMORY[0x2455CF2C0]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::deque<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 16 * (v5 - v4) - 1;
  }
  unint64_t v8 = a1[4];
  if (v7 == a1[5] + v8)
  {
    BOOL v9 = v8 >= 0x80;
    unint64_t v10 = v8 - 128;
    if (v9)
    {
      a1[4] = v10;
      uint64_t v13 = *(void *)v4;
      uint64_t v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          size_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          int v45 = (uint64_t *)a1[1];
          uint64_t v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            int v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)int v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          int v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          int v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            uint64_t v5 = (char *)a1[1];
          }
          uint64_t v23 = &v5[8 * v19];
          uint64_t v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v5 = v12;
      goto LABEL_36;
    }
    uint64_t v24 = v6 >> 3;
    uint64_t v25 = (char *)a1[3];
    int v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      uint64_t v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v53 = 1;
          }
          else {
            unint64_t v53 = (v25 - v4) >> 2;
          }
          uint64_t v54 = 2 * v53;
          uint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v53);
          uint64_t v4 = &v55[(v54 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v57 = (uint64_t *)a1[1];
          uint64_t v58 = v4;
          uint64_t v59 = a1[2] - (void)v57;
          if (v59)
          {
            uint64_t v58 = &v4[v59 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v60 = 8 * (v59 >> 3);
            uint64_t v61 = &v55[(v54 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v62 = *v57++;
              *(void *)uint64_t v61 = v62;
              v61 += 8;
              v60 -= 8;
            }
            while (v60);
          }
          size_t v63 = (char *)*a1;
          *a1 = v55;
          a1[1] = v4;
          a1[2] = v58;
          a1[3] = &v55[8 * v56];
          if (v63)
          {
            operator delete(v63);
            uint64_t v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        int64x2_t v64 = (char *)a1[1];
        size_t v65 = (char *)a1[2];
        a1[1] = v64 - 8;
        uint64_t v66 = *((void *)v64 - 1);
        a1[1] = v64;
        if (v65 == (char *)a1[3])
        {
          uint64_t v67 = (uint64_t)&v64[-*a1];
          if ((unint64_t)v64 <= *a1)
          {
            if (v65 == (char *)*a1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = (uint64_t)&v65[-*a1] >> 2;
            }
            BOOL v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v98);
            uint64_t v101 = &v99[8 * (v98 >> 2)];
            size_t v102 = (uint64_t *)a1[1];
            size_t v65 = v101;
            uint64_t v103 = a1[2] - (void)v102;
            if (v103)
            {
              size_t v65 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v104 = 8 * (v103 >> 3);
              uint64_t v105 = &v99[8 * (v98 >> 2)];
              do
              {
                uint64_t v106 = *v102++;
                *(void *)uint64_t v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            size_t v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v65;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              size_t v65 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v68 = v67 >> 3;
            BOOL v16 = v67 >> 3 < -1;
            uint64_t v69 = (v67 >> 3) + 2;
            if (v16) {
              uint64_t v70 = v69;
            }
            else {
              uint64_t v70 = v68 + 1;
            }
            uint64_t v71 = -(v70 >> 1);
            uint64_t v72 = v70 >> 1;
            int v73 = &v64[-8 * v72];
            int64_t v74 = v65 - v64;
            if (v65 != v64)
            {
              memmove(&v64[-8 * v72], v64, v65 - v64);
              int64x2_t v64 = (char *)a1[1];
            }
            size_t v65 = &v73[v74];
            a1[1] = &v64[8 * v71];
            a1[2] = &v73[v74];
          }
        }
        *(void *)size_t v65 = v66;
      }
      else
      {
        *(void *)uint64_t v5 = v28;
      }
LABEL_36:
      a1[2] += 8;
      goto LABEL_37;
    }
    uint64_t v30 = v27 >> 2;
    if (v25 == v26) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = v30;
    }
    uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v31);
    uint64_t v34 = v33;
    int v35 = operator new(0x1000uLL);
    uint64_t v36 = &v32[8 * v24];
    float v37 = &v32[8 * v34];
    if (v24 == v34)
    {
      uint64_t v38 = 8 * v24;
      if (v6 < 1)
      {
        uint64_t v75 = v35;
        uint64_t v76 = v38 >> 2;
        if (v5 == v4) {
          unint64_t v77 = 1;
        }
        else {
          unint64_t v77 = v76;
        }
        long long v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v77);
        uint64_t v36 = &v78[8 * (v77 >> 2)];
        float v37 = &v78[8 * v79];
        if (v32) {
          operator delete(v32);
        }
        uint64_t v32 = v78;
        int v35 = v75;
      }
      else
      {
        uint64_t v39 = v38 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v36 -= 8 * (v40 >> 1);
      }
    }
    *(void *)uint64_t v36 = v35;
    long long v80 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      if (v36 == v32)
      {
        if (v80 >= v37)
        {
          if (v37 == v32) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (v37 - v32) >> 2;
          }
          uint64_t v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v86);
          unint64_t v89 = v87;
          uint64_t v36 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v91 = v80 - v32;
          BOOL v90 = v80 == v32;
          long long v80 = v36;
          if (!v90)
          {
            long long v80 = &v36[v91 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v92 = 8 * (v91 >> 3);
            int v93 = v36;
            uint64_t v94 = (uint64_t *)v32;
            do
            {
              uint64_t v95 = *v94++;
              *(void *)int v93 = v95;
              v93 += 8;
              v92 -= 8;
            }
            while (v92);
          }
          float v37 = &v87[8 * v88];
          if (v32) {
            operator delete(v32);
          }
          uint64_t v32 = v89;
        }
        else
        {
          uint64_t v82 = (v37 - v80) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v36 = &v32[8 * (v83 >> 1)];
          uint64_t v85 = v32;
          if (v80 != v32)
          {
            memmove(v36, v32, v80 - v32);
            uint64_t v85 = v80;
          }
          long long v80 = &v85[8 * v84];
        }
      }
      uint64_t v96 = *(void *)(i - 8);
      *((void *)v36 - 1) = v96;
      v36 -= 8;
    }
    uint64_t v97 = (char *)*a1;
    *a1 = v32;
    a1[1] = v36;
    a1[2] = v80;
    a1[3] = v37;
    if (v97) {
      operator delete(v97);
    }
  }
LABEL_37:
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  void *result = MEMORY[0x263F90710] + 16;
  uint64_t v52 = *(void *)(a2 + 24);
  result[3] = v52;
  if ((v52 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  void *result = MEMORY[0x263F90790] + 16;
  ++a1[5];
  return result;
}

void sub_23F69F440(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

char *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::anonymous namespace'::CycleState>::operator[](uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v10, (void *)a2);
  uint64_t v5 = (uint64_t *)*v4;
  if (!*v4)
  {
    uint64_t v6 = (uint64_t **)v4;
    uint64_t v5 = (uint64_t *)operator new(0x28uLL);
    v8[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5 + 7, (_DWORD *)a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5 + 8, (_DWORD *)(a2 + 4));
    *((_DWORD *)v5 + 9) = 0;
    char v9 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, v5);
    v8[0] = 0;
  }
  return (char *)v5 + 36;
}

{
  void **v4;
  uint64_t *v5;
  uint64_t **v6;
  void v8[2];
  char v9;
  uint64_t v10;

  uint64_t v4 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v10, (void *)a2);
  uint64_t v5 = (uint64_t *)*v4;
  if (!*v4)
  {
    uint64_t v6 = (uint64_t **)v4;
    uint64_t v5 = (uint64_t *)operator new(0x28uLL);
    v8[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5 + 7, (_DWORD *)a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5 + 8, (_DWORD *)(a2 + 4));
    *((_DWORD *)v5 + 9) = 0;
    char v9 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, v5);
    v8[0] = 0;
  }
  return (char *)v5 + 36;
}

uint64_t realityio::anonymous namespace'::_hasCyclesHelper(uint64_t **a1, void *a2)
{
  unint64_t v3 = a2[5] + a2[4] - 1;
  uint64_t v4 = *(void *)(a2[1] + ((v3 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v3 & 0x7F);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v42 = MEMORY[0x263F90710] + 16;
  uint64_t v6 = *(void *)(v4 + 24);
  uint64_t v45 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v42 = MEMORY[0x263F90790] + 16;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs(v5);
  if (v40 == v41)
  {
    LOBYTE(vrealityio::TextureBuilder::setOutput(*((uint64_t **)this + 21), *((_anonymous_namespace_ **)this + 18), (void *)this + 23) = 0;
LABEL_36:
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v35, &v43, &v44);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v35, &v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    char v13 = v23;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if ((v39 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
    if (v36) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
    }
    unint64_t v14 = a2[5] + a2[4] - 1;
    (**(void (***)(void))(*(void *)(a2[1] + ((v14 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v14 & 0x7F)))();
    uint64_t v16 = a2[1];
    uint64_t v15 = a2[2];
    uint64_t v17 = v15 - v16;
    BOOL v18 = v15 == v16;
    uint64_t v20 = a2[4];
    uint64_t v19 = a2[5];
    a2[5] = v19 - 1;
    uint64_t v21 = 16 * v17 - 1;
    if (v18) {
      uint64_t v21 = 0;
    }
    if ((unint64_t)(v21 - (v19 + v20) - 255) <= 0xFFFFFFFFFFFFFEFFLL)
    {
      operator delete(*(void **)(v15 - 8));
      a2[2] -= 8;
    }
  }
  else
  {
    int v23 = 0;
    uint64_t v7 = v40 + 16;
    while (1)
    {
      uint64_t v8 = v7 - 16;
      LODWORD(v35) = *(_DWORD *)(v7 - 16);
      uint64_t v9 = *(void *)(v7 - 8);
      uint64_t v36 = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v37, (_DWORD *)v7);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v38, (_DWORD *)(v7 + 4));
      uint64_t v10 = *(void *)(v7 + 8);
      uint64_t v39 = v10;
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v39 &= 0xFFFFFFFFFFFFFFF8;
      }
      int v27 = 1;
      uint64_t v28 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v30 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v34 = 0;
      uint64_t v31 = MEMORY[0x263F90790] + 16;
      if ((v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
      if (v28) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
      }
      uint64_t v26 = 0;
      v25[2] = 0;
      if (!pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource()) {
        goto LABEL_25;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v27, &v32, &v33);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v27, v25);
      if ((v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
      if (v28) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
      }
      if (v11 != 1
      {
        std::deque<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>::push_back(a2, (uint64_t)&v31);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v25);
      if (v11 == 1) {
        char v12 = 0;
      }
      else {
LABEL_25:
      }
        char v12 = 1;
      if ((v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF2C0](&v31);
      if ((v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
      if (v36) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
      }
      if ((v12 & 1) == 0) {
        break;
      }
      v7 += 32;
      if (v8 + 32 == v41) {
        goto LABEL_36;
      }
    }
    char v13 = 1;
  }
  int v35 = (void **)&v40;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v35);
  MEMORY[0x2455CF2C0](&v42);
  return v13 & 1;
}

void sub_23F69F9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a25);
  a25 = (void **)(v25 - 144);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&a25);
  MEMORY[0x2455CF2C0](v25 - 120);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::anonymous namespace'::CycleState>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::anonymous namespace'::CycleState>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
    operator delete(v2);
    }
  }
  return a1;
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::anonymous namespace'::CycleState>,void *>>>::destroy[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::anonymous namespace'::CycleState>,void,void>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::deque<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 >> 7];
    uint64_t v7 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(void *)(a1 + 40) + v5) & 0x7F);
    if ((char *)*v6 + 32 * (v5 & 0x7F) != (void *)v7)
    {
      uint64_t v8 = (void (***)(void))((char *)*v6 + 32 * (v5 & 0x7F));
      do
      {
        uint64_t v9 = *v8;
        v8 += 4;
        (*v9)();
        if ((char *)v8 - (unsigned char *)*v6 == 4096)
        {
          uint64_t v10 = (void (***)(void))v6[1];
          ++v6;
          uint64_t v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      uint64_t v2 = *(void ***)(a1 + 8);
      unint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 64;
    goto LABEL_15;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 128;
LABEL_15:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::anonymous namespace'::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::anonymous namespace'::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::anonymous namespace'::CycleState>>>::destroy(void *a1)
{
  if (a1)
  {
    operator delete(a1);
  }
}

uint64_t std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (void *)((char *)v2 + 28)) & 1) == 0)
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)((char *)v2 + 28), a2)) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t **a1, void *a2, _DWORD *a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x28uLL);
    v9[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 7, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 8, a3 + 1);
    char v10 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

const void **realityio::WrappedCFRef<CGColorSpace *>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t RIOBuilderOutputDescriptorGetTypeID()
{
  if (RIOBuilderOutputDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderOutputDescriptorGetTypeID::onceToken, &__block_literal_global_22);
  }
  return RIOBuilderOutputDescriptorGetTypeID::typeID;
}

void __RIOBuilderOutputDescriptorGetTypeID_block_invoke()
{
  if (!RIOBuilderOutputDescriptorGetTypeID::typeID) {
    RIOBuilderOutputDescriptorGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOBuilderOutputDescriptorCreateWithNameAndOutputIdentifierAndOptionality(__CFString *a1, uint64_t a2, uint64_t a3)
{
  realityio::CFStringCopyUTF8String(a1, (uint64_t)v12);
  if (v12[0])
  {
    int v5 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v13;
    }
    if (a2)
    {
      BOOL v7 = a3 == 0;
      uint64_t v8 = (std::string *)operator new(0x40uLL);
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26F32FB70;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v14 = __p;
      }
      realityio::OutputDescriptor::OutputDescriptor(v8 + 1, (long long *)&v14, (std::string::size_type *)(a2 + 16), v7);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      if (RIOBuilderOutputDescriptorGetTypeID::onceToken != -1) {
        dispatch_once(&RIOBuilderOutputDescriptorGetTypeID::onceToken, &__block_literal_global_22);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      uint64_t v6 = Instance;
      if (Instance)
      {
        *(void *)(Instance + 16) = v8 + 1;
        *(void *)(Instance + 24) = v8;
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v8->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
    }
    else
    {
      uint64_t v6 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v5 & 0x80000000) == 0) {
        return v6;
      }
    }
    else if ((v5 & 0x80000000) == 0)
    {
      return v6;
    }
    operator delete(v13.__r_.__value_.__l.__data_);
    return v6;
  }
  return 0;
}

void sub_23F6A0134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v28);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v26 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderOutputDescriptorCopyOutputName(uint64_t a1)
{
  uint64_t v1 = *(const char **)(a1 + 16);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v1[23] < 0) {
    uint64_t v1 = *(const char **)v1;
  }
  CFStringRef v3 = CFStringCreateWithCString(0, v1, 0x8000100u);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return v3;
}

void sub_23F6A0204(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderOutputDescriptorCopyOutputIdentifier(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(v1 + 24));
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return v3;
}

void sub_23F6A0268(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL RIOBuilderOutputDescriptorCopyOptionality(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    int v3 = *(_DWORD *)(v2 + 32);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  else
  {
    int v3 = *(_DWORD *)(v2 + 32);
  }
  return v3 != 1;
}

void _RIOBuilderOutputDescriptorCFFinalize(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

BOOL _RIOBuilderOutputDescriptorCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderOutputDescriptorCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderOutputDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderOutputDescriptor %p>", a1);
}

CFStringRef _RIOBuilderOutputDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderOutputDescriptor %p>", a1);
}

uint64_t RIOPxrUsdStageGetTypeID()
{
  if (RIOPxrUsdStageGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdStageGetTypeID::onceToken, &__block_literal_global_23);
  }
  return RIOPxrUsdStageGetTypeID::typeID;
}

void __RIOPxrUsdStageGetTypeID_block_invoke()
{
  if (!RIOPxrUsdStageGetTypeID::typeID) {
    RIOPxrUsdStageGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

void RIOPxrUsdStageCreate(uint64_t *a1)
{
  unint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(&v3, v1);
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v3);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v2);
  operator new();
}

void sub_23F6A0544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::RIOPxrUsdStageData::~RIOPxrUsdStageData((realityio::RIOPxrUsdStageData *)va);
  _Unwind_Resume(a1);
}

void RIOPxrUsdStageCreateWithFilePath(uint64_t a1)
{
}

void RIOPxrUsdStageCreateWithFilePathWithErrorReporting(uint64_t a1)
{
  realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v3, 2072, a1);
  v2[0] = 0;
  v2[1] = 0;
  std::string __p = v2;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v2[0]);
  operator new();
}

void sub_23F6A078C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&a9);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a16);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreateWithFileURL(void *a1)
{
  return RIOPxrUsdStageCreateWithFileURLWithErrorReporting(a1);
}

uint64_t RIOPxrUsdStageCreateWithFileURLWithErrorReporting(void *a1)
{
  id v1 = a1;
  unint64_t v2 = (realityio *)[v1 isFileURL];
  if (v2) {
    RIOPxrUsdStageCreateWithFilePathWithErrorReporting([v1 fileSystemRepresentation]);
  }
  uint64_t v3 = *(NSObject **)(realityio::logObjects(v2) + 32);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v5 = 0;
    _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports loading content from file URLs", v5, 2u);
  }

  return 0;
}

void sub_23F6A08F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RIOPxrUsdStageCreateInMemory()
{
  v2[0] = 0;
  v2[1] = 0;
  id v1 = v2;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v1, v2[0]);
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory();
  RIOPxrUsdStageCreate(&v0);
}

void sub_23F6A0978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_uint *a9)
{
}

void RIOPxrUsdStageCreateWithInMemoryDataBufferWithErrorReporting(const char *a1, CFDataRef theData)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  CFDataGetLength(theData);
  std::string v14 = 0;
  uint64_t v15 = 0;
  std::string __p = &v14;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v14);
  CFDataGetBytePtr(theData);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ArMemoryResolver");
  pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver();
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  size_t v4 = strlen(a1);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"?address=", 9);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"&size=", 6);
  std::ostream::operator<<();
  BOOL v7 = (realityio *)std::stringbuf::str();
  uint64_t v8 = *(NSObject **)(realityio::logObjects(v7) + 32);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (v9)
  {
    char v10 = &v11;
    if (v12 < 0) {
      char v10 = v11;
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v17 = v10;
    _os_log_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_INFO, "assetPath: %s", buf, 0xCu);
  }
  pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v9);
  pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset();
  operator new();
}

void sub_23F6A0DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uint *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a12);
  (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  a9 = v25 - 96;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreateWithInMemoryBuffer(const char *a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = &v19;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v19);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ArMemoryResolver");
  pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver();
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  size_t v2 = strlen(a1);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"?address=", 9);
  size_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"&size=", 6);
  std::ostream::operator<<();
  int v5 = (realityio *)std::stringbuf::str();
  uint64_t v6 = *(NSObject **)(realityio::logObjects(v5) + 32);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v7)
  {
    uint64_t v8 = &v16;
    if (v17 < 0) {
      uint64_t v8 = v16;
    }
    *(_DWORD *)long long buf = 136315138;
    int v26 = v8;
    _os_log_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_INFO, "assetPath: %s", buf, 0xCu);
  }
  pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v7);
  pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset();
  uint64_t v24 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  BOOL v9 = (atomic_uint *)v24;
  uint64_t v24 = *(uint8_t **)v15;
  *(void *)uint64_t v15 = 0;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)&v24, v9);
  char v10 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)v15);
  if (v24)
  {
    std::string v14 = v24;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v14);
    RIOPxrUsdStageCreate((uint64_t *)&v14);
  }
  uint64_t v11 = *(NSObject **)(realityio::logObjects((realityio *)v10) + 32);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v15 = 0;
    _os_log_error_impl(&dword_23F4EA000, v11, OS_LOG_TYPE_ERROR, "Unable to create stage from in-memory buffer.", v15, 2u);
  }
  char v12 = (void ***)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&v24);
  uint64_t v24 = buf;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](v12);
  if (v17 < 0) {
    operator delete(v16);
  }
  std::string __p = (void *)*MEMORY[0x263F8C2C8];
  *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
  uint64_t v19 = (char *)(MEMORY[0x263F8C318] + 16);
  if (v22 < 0) {
    operator delete(v21);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2455D2B30](&v23);
  return 0;
}

void sub_23F6A1214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v28 = (void ***)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)(v26 - 88));
  *(void *)(v26 - 88) = v26 - 80;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](v28);
  if (a20 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void RIOPxrUsdStageCreateWithString(char *a1)
{
  BOOL v9 = 0;
  uint64_t v10 = 0;
  std::string __p = &v9;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v9);
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory();
  size_t v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v7);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(&v5, v2);
  pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v5);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ImportFromString();
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  uint64_t v3 = v6;
  if (v6)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  uint64_t v4 = v7;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(&v4);
  RIOPxrUsdStageCreate(&v4);
}

void sub_23F6A13C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, uint64_t a12, atomic_uint *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

uint64_t RIOPxrUsdStageIsSupportedFile(char *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  std::string __p = &v5;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v5);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  uint64_t IsSupportedFile = pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile();
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  return IsSupportedFile;
}

void sub_23F6A14E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageCopyPseudoRootPrim(uint64_t a1)
{
  id v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(&v4, v1);
  int v8 = 1;
  uint64_t v2 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v4, &v8);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  return v2;
}

void sub_23F6A15A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageHasPrimAtPrimPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v6, v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  uint64_t IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  return IsValid;
}

void sub_23F6A163C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RIOPxrUsdStageCreateOverridePrim(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  uint64_t v6 = a1[2];
  uint64_t v5 = a1 + 2;
  if (v6)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    uint64_t v9 = EditTarget[1];
    uint64_t v17 = *EditTarget;
    uint64_t v18 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v17);
  char v12 = v11;
  uint64_t v13 = v18;
  if (v18 && atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, double))(*(void *)v13 + 8))(v13, v10);
  }
  std::recursive_mutex::lock(v12);
  std::string v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(&v17, v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  int v21 = 1;
  uint64_t v15 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v17, &v21);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  if (v18) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
  }
  std::recursive_mutex::unlock(v12);
  return v15;
}

void sub_23F6A1790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreatePrimIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 16);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v27, v6, v7);
  uint64_t IsValid = (realityio::UsdLayerMutexTracker *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v27);
  if (!IsValid) {
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(a3 + 16);
  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v11 = v28;
  if (!v28 || (*((unsigned char *)v28 + 57) & 8) != 0)
  {
    uint64_t IsValid = (realityio::UsdLayerMutexTracker *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v28, v9);
    uint64_t v10 = *(void *)(a3 + 16);
  }
  if ((**((void **)v11 + 3) & 0xFFFFFFFFFFFFFFF8) == (v10 & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_10:
    LODWORD(vrealityio::TextureBuilder::setOutput(*((uint64_t **)this + 21), *((_anonymous_namespace_ **)this + 18), (void *)this + 23) = 1;
    uint64_t v16 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v27, (int *)&v23);
  }
  else
  {
LABEL_7:
    char v12 = realityio::UsdLayerMutexTracker::instance(IsValid);
    if (*v5)
    {
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v13);
      uint64_t v15 = EditTarget[1];
      uint64_t v23 = *EditTarget;
      uint64_t v24 = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
    }
    double v17 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v12, &v23);
    uint64_t v19 = v18;
    uint64_t v20 = v24;
    if (v24 && atomic_fetch_add_explicit((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v20 + 8))(v20, v17);
    }
    std::recursive_mutex::lock(v19);
    int v21 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(&v23, v21, v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 16));
    int v31 = 1;
    uint64_t v16 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v23, &v31);
    if ((v26 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
    if (v24) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
    }
    std::recursive_mutex::unlock(v19);
  }
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  if (v28) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v28);
  }
  return v16;
}

void sub_23F6A19F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  std::recursive_mutex::unlock(v2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreateClassPrimIfNeeded(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  uint64_t v6 = a1[2];
  uint64_t v5 = a1 + 2;
  if (v6)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    uint64_t v9 = EditTarget[1];
    uint64_t v17 = *EditTarget;
    uint64_t v18 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v17);
  char v12 = v11;
  uint64_t v13 = v18;
  if (v18 && atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, double))(*(void *)v13 + 8))(v13, v10);
  }
  std::recursive_mutex::lock(v12);
  std::string v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateClassPrim(&v17, v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  int v21 = 1;
  uint64_t v15 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v17, &v21);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  if (v18) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
  }
  std::recursive_mutex::unlock(v12);
  return v15;
}

void sub_23F6A1BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void RIOPxrUsdStageSetDefaultPrim(uint64_t *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      uint64_t v9 = EditTarget[1];
      uint64_t v15 = *EditTarget;
      uint64_t v16 = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v15);
    char v12 = v11;
    uint64_t v13 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v13 + 8))(v13, v10);
    }
    std::recursive_mutex::lock(v12);
    if (*v5)
    {
      std::string v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim(v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(a2 + 24));
    }
    std::recursive_mutex::unlock(v12);
  }
}

void sub_23F6A1D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageCopyDefaultPrim(uint64_t a1)
{
  id v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetDefaultPrim(&v4, v1);
  int v8 = 1;
  uint64_t v2 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v4, &v8);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  return v2;
}

void sub_23F6A1DFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageClearDefaultPrim(uint64_t a1)
{
  uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));

  return MEMORY[0x270FA3E28](v1);
}

__CFArray *RIOPxrUsdStageCopyUsedLayers(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(v1);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  for (uint64_t i = (uint64_t *)v6[0]; i != (uint64_t *)v6[1]; i += 2)
  {
    uint64_t v4 = (const void *)RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(i);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  uint64_t v7 = (void **)v6;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v7);
  return Mutable;
}

void sub_23F6A1EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCopyRootLayer(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(&v5, v1);
  uint64_t v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(&v5);
  uint64_t v3 = v6;
  if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return v2;
}

void sub_23F6A1F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageCopySessionLayer(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(&v5, v1);
  uint64_t v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(&v5);
  uint64_t v3 = v6;
  if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return v2;
}

void sub_23F6A2068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageRemovePrim(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t v5 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v7 = a1[2];
    uint64_t v6 = a1 + 2;
    if (v7)
    {
      int v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v6);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v8);
      uint64_t v10 = EditTarget[1];
      uint64_t v17 = *EditTarget;
      uint64_t v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
    }
    double v11 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v5, &v17);
    uint64_t v13 = v12;
    uint64_t v14 = v18;
    if (v18 && atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v14 + 8))(v14, v11);
    }
    std::recursive_mutex::lock(v13);
    if (*v6)
    {
      uint64_t v15 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v6);
      uint64_t v2 = MEMORY[0x2455CFC40](v15, a2 + 16);
    }
    else
    {
      uint64_t v2 = 0;
    }
    std::recursive_mutex::unlock(v13);
  }
  return v2;
}

void sub_23F6A21B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrUsdStageSetEditTarget(uint64_t *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      uint64_t v9 = EditTarget[1];
      uint64_t v15 = *EditTarget;
      uint64_t v16 = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v15);
    char v12 = v11;
    uint64_t v13 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v13 + 8))(v13, v10);
    }
    std::recursive_mutex::lock(v12);
    if (*v5)
    {
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(v14, (const pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a2 + 16));
    }
    std::recursive_mutex::unlock(v12);
  }
}

void sub_23F6A2304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageCopyEditTarget(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  uint64_t EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v1);
  if (RIOPxrUsdEditTargetGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdEditTargetGetTypeID::onceToken, &__block_literal_global_26);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v4 = Instance;
  if (Instance)
  {
    uint64_t v5 = *(void *)(EditTarget + 8);
    *(void *)(Instance + 16) = *(void *)EditTarget;
    *(void *)(Instance + 24) = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::_Data((_DWORD *)(Instance + 32), EditTarget + 16);
    *(_OWORD *)(v4 + 72) = *(_OWORD *)(EditTarget + 56);
  }
  return v4;
}

void sub_23F6A2420(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 24);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrUsdStageCopyUSDA(uint64_t a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v9 = 0;
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(&v6, v1);
  pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v6);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString();
  uint64_t v2 = v7;
  if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v9 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  CFStringRef v4 = CFStringCreateWithCString(0, (const char *)v3, 0x8000100u);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_23F6A2534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrUsdStageCopyFlattenedUSDA(uint64_t a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(v1);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString();
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v5);
  if (v7 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  CFStringRef v3 = CFStringCreateWithCString(0, (const char *)v2, 0x8000100u);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_23F6A2634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrUsdStageReload(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    CFStringRef v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v3);
      uint64_t EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
      uint64_t v7 = EditTarget[1];
      uint64_t v13 = *EditTarget;
      uint64_t v14 = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v13);
    double v10 = v9;
    uint64_t v11 = v14;
    if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    if (*v3)
    {
      char v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::UsdStage::Reload(v12);
    }
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F6A2740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrUsdStageLoadThenUnload(uint64_t *a1, const __CFSet *a2, const __CFSet *a3)
{
  if (a1)
  {
    uint64_t v6 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v8 = a1[2];
    uint64_t v7 = a1 + 2;
    if (v8)
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
      uint64_t EditTarget = (void *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v9);
      uint64_t v11 = EditTarget[1];
      uint64_t v18 = (void **)*EditTarget;
      v19[0] = (void *)v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v18 = 0;
      v19[0] = 0;
    }
    double v12 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v6, &v18);
    uint64_t v14 = v13;
    uint64_t v15 = v19[0];
    if (v19[0] && atomic_fetch_add_explicit((atomic_uint *volatile)v19[0] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *, double))(*v15 + 8))(v15, v12);
    }
    std::recursive_mutex::lock(v14);
    if (*v7)
    {
      v19[0] = 0;
      v19[1] = 0;
      v17[1] = 0;
      uint64_t v18 = v19;
      uint64_t v16 = v17;
      v17[0] = 0;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
      pxrInternal__aapl__pxrReserved__::UsdStage::LoadAndUnload();
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v16, v17[0]);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v18, v19[0]);
    }
    std::recursive_mutex::unlock(v14);
  }
}

void sub_23F6A28E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::convertSetToSDFPathSet(const __CFSet *a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 8);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a2, *(void **)(a2 + 8));
  *(void *)a2 = v4;
  *(void *)(a2 + 16) = 0;
  *uint64_t v4 = 0;
  if (RIOPxrSdfPathGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfPathGetTypeID::onceToken, &__block_literal_global_30);
  }
  uint64_t v5 = RIOPxrSdfPathGetTypeID::typeID;
  values = 0;
  double v10 = 0;
  uint64_t v11 = 0;
  CFIndex Count = CFSetGetCount(a1);
  std::vector<void const*>::resize((uint64_t)&values, Count);
  CFSetGetValues(a1, (const void **)values);
  uint64_t v7 = values;
  uint64_t v8 = v10;
  if (values != v10)
  {
    do
    {
      if (CFGetTypeID(*v7) == v5) {
        std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t **)a2, (void *)*v7 + 2, (_DWORD *)*v7 + 4);
      }
      ++v7;
    }
    while (v7 != v8);
    uint64_t v7 = values;
  }
  if (v7)
  {
    double v10 = v7;
    operator delete(v7);
  }
}

void sub_23F6A2A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *RIOPxrUsdStageSave(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result[2];
    result += 2;
    if (v1)
    {
      uint64_t v2 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(result);
      return (uint64_t *)MEMORY[0x270FA3E58](v2);
    }
  }
  return result;
}

uint64_t RIOPxrUsdStageExportWithFileURL(uint64_t a1, void *a2, uint64_t a3, const __CFDictionary *a4)
{
  id v6 = a2;
  uint64_t v7 = (realityio *)[v6 isFileURL];
  if ((v7 & 1) == 0)
  {
    uint64_t v11 = *(NSObject **)(realityio::logObjects(v7) + 32);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(context) = 0;
      _os_log_error_impl(&dword_23F4EA000, v11, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports writing content to file URLs", (uint8_t *)&context, 2u);
    }
    goto LABEL_11;
  }
  if (!a1 || (v9 = *(void *)(a1 + 16), uint64_t v8 = (uint64_t *)(a1 + 16), !v9))
  {
LABEL_11:
    uint64_t v10 = 0;
    goto LABEL_12;
  }
  v16[0] = 0;
  v16[1] = 0;
  context = v16;
  if (a4) {
    CFDictionaryApplyFunction(a4, (CFDictionaryApplierFunction)realityio::updateStringMapFromCFDictionary, &context);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v8);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v6 fileSystemRepresentation]);
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::UsdStage::Export();
  if (v14 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&context, v16[0]);
LABEL_12:

  return v10;
}

void sub_23F6A2BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a16, a17);

  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCopyFlattened(realityio::UsdLayerMutexTracker *a1)
{
  uint64_t v1 = (uint64_t)a1;
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance(a1);
    uint64_t v4 = *(void *)(v1 + 16);
    CFStringRef v3 = (uint64_t *)(v1 + 16);
    if (v4)
    {
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v3);
      uint64_t EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
      uint64_t v7 = *(void *)(EditTarget + 8);
      char v14 = *(atomic_uint **)EditTarget;
      uint64_t v15 = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      char v14 = 0;
      uint64_t v15 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v14);
    uint64_t v10 = v9;
    uint64_t v11 = v15;
    if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    if (*v3)
    {
      double v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(v12);
      uint64_t v1 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(&v14);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v14);
    }
    else
    {
      uint64_t v1 = 0;
    }
    std::recursive_mutex::unlock(v10);
  }
  return v1;
}

void sub_23F6A2D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_uint *a9)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a9);
  std::recursive_mutex::unlock(v9);
  _Unwind_Resume(a1);
}

double RIOPxrUsdStageGetMetersPerUnit(uint64_t a1)
{
  double v1 = 0.01;
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v5, (uint64_t *)(a1 + 16));
      pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
      double v1 = v2;
      uint64_t v3 = v6;
      if (v6)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
        }
      }
    }
  }
  return v1;
}

void sub_23F6A2E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrUsdStageSetMetersPerUnit(uint64_t *a1)
{
  if (a1)
  {
    double v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v3);
      uint64_t EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
      uint64_t v7 = EditTarget[1];
      uint64_t v13 = *EditTarget;
      uint64_t v14 = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v13);
    uint64_t v10 = v9;
    uint64_t v11 = v14;
    if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    if (*v3)
    {
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v13, v3);
      pxrInternal__aapl__pxrReserved__::UsdGeomSetStageMetersPerUnit();
      uint64_t v12 = v14;
      if (v14)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
      }
    }
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F6A2FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

BOOL RIOPxrUsdStageEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  uint64_t UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakBase::GetUniqueIdentifier((pxrInternal__aapl__pxrReserved__::TfWeakBase *)(v3 + 16));
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a2 + 16));
  return UniqueIdentifier == pxrInternal__aapl__pxrReserved__::TfWeakBase::GetUniqueIdentifier((pxrInternal__aapl__pxrReserved__::TfWeakBase *)(v5 + 16));
}

id RIOPxrUsdStageGetUsdError(uint64_t a1)
{
  if (a1 && (double v1 = *(id **)(a1 + 32)) != 0) {
    return realityio::USDDiagnostics::GetError(v1);
  }
  else {
    return 0;
  }
}

id RIOPxrUsdStageGetUsdErrors(uint64_t a1)
{
  if (a1 && (double v1 = *(id **)(a1 + 32)) != 0) {
    return realityio::USDDiagnostics::GetErrors(v1);
  }
  else {
    return 0;
  }
}

void RIOPxrUsdStageClearUsdErrors(uint64_t a1)
{
  if (a1)
  {
    double v1 = *(id **)(a1 + 32);
    if (v1) {
      realityio::USDDiagnostics::ClearErrors(v1);
    }
  }
}

void RIOPxrUsdStageGatherDiagnostics(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = a3;
  if (a1)
  {
    uint64_t v6 = *(long long ***)(a1 + 32);
    if (v6)
    {
      if (a2) {
        realityio::USDDiagnostics::GetWarnings(v6, &v10);
      }
      else {
        realityio::USDDiagnostics::GetStatusMessages(v6, &v10);
      }
      std::string::size_type size = v10.__r_.__value_.__l.__size_;
      for (std::string::size_type i = v10.__r_.__value_.__r.__words[0]; i != size; i += 24)
      {
        std::string::size_type v9 = i;
        if (*(char *)(i + 23) < 0) {
          std::string::size_type v9 = *(void *)i;
        }
        v5[2](v5, v9);
      }
      uint64_t v11 = &v10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    }
  }
}

void sub_23F6A3198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RIOPxrUsdStageClearDiagnostics(uint64_t a1, int a2, int a3)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      if (a2)
      {
        std::mutex::lock((std::mutex *)(v4 + 120));
        std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(v4 + 16));
        std::mutex::unlock((std::mutex *)(v4 + 120));
      }
      if (a3)
      {
        uint64_t v6 = *(void *)(a1 + 32);
        std::mutex::lock((std::mutex *)(v6 + 184));
        std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(v6 + 40));
        std::mutex::unlock((std::mutex *)(v6 + 184));
      }
    }
  }
}

void RIOPxrUsdStageSetDiagnosticChangeNotification(uint64_t a1, void *a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      v6[0] = &unk_26F3431B0;
      v6[1] = MEMORY[0x2455D3180](v3);
      void v6[3] = v6;
      std::function<void ()(void)>::operator=((void *)(v5 + 88), (uint64_t)v6);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v6);
    }
  }
}

void sub_23F6A3304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCopyUpAxis(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomGetFallbackUpAxis(&v10, (pxrInternal__aapl__pxrReserved__ *)a1);
  if (a1)
  {
    uint64_t v3 = a1[2];
    double v2 = a1 + 2;
    if (v3)
    {
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v7, v2);
      pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis();
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v4 = v8;
      uint64_t v5 = v9;
      uint64_t v9 = 0;
      uint64_t v10 = v5;
      if (v8 && atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  uint64_t result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v10);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_23F6A33FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, uint64_t a12)
{
  if (a10 && atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
  }
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageSetUpAxis(uint64_t *a1)
{
  if (!a1) {
    return 0;
  }
  double v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  uint64_t v4 = a1[2];
  uint64_t v3 = a1 + 2;
  if (v4)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v3);
    uint64_t EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    uint64_t v7 = EditTarget[1];
    uint64_t v15 = *EditTarget;
    uint64_t v16 = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  double v9 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v15);
  uint64_t v11 = v10;
  uint64_t v12 = v16;
  if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, double))(*(void *)v12 + 8))(v12, v9);
  }
  std::recursive_mutex::lock(v11);
  if (*v3)
  {
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v15, v3);
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdGeomSetStageUpAxis();
    uint64_t v13 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::recursive_mutex::unlock(v11);
  return v8;
}

void sub_23F6A35BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCopyColorConfiguration(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)__p);
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    double v2 = (uint64_t *)(a1 + 16);
    if (v3)
    {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v2);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetColorConfiguration((uint64_t *)v8, v4);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = *(_OWORD *)v8;
      uint64_t v13 = v9;
      HIBYTE(v9) = 0;
      LOBYTE(v8[0]) = 0;
      if (SHIBYTE(v15) < 0)
      {
        operator delete((void *)v14);
        long long v14 = v10;
        uint64_t v15 = v11;
        HIBYTE(v11) = 0;
        LOBYTE(v10) = 0;
        if (SHIBYTE(v9) < 0) {
          operator delete(v8[0]);
        }
      }
      else
      {
        long long v14 = v10;
        uint64_t v15 = v11;
      }
    }
  }
  if (v13 >= 0) {
    uint64_t v5 = (char *)__p;
  }
  else {
    uint64_t v5 = (char *)__p[0];
  }
  uint64_t v6 = RIOPxrSdfAssetPathCreateFromCString(v5);
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_23F6A376C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)va);
  _Unwind_Resume(a1);
}

void RIOPxrUsdStageSetColorConfiguration(uint64_t *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      uint64_t EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      uint64_t v9 = EditTarget[1];
      uint64_t v15 = *EditTarget;
      uint64_t v16 = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v15);
    uint64_t v12 = v11;
    uint64_t v13 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v13 + 8))(v13, v10);
    }
    std::recursive_mutex::lock(v12);
    if (*v5)
    {
      long long v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetColorConfiguration(v14, (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)(a2 + 16));
    }
    std::recursive_mutex::unlock(v12);
  }
}

void sub_23F6A3870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageCopyColorManagementSystem(uint64_t a1)
{
  uint64_t v5 = 0;
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    double v1 = (uint64_t *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetColorManagementSystem(&v5, v3);
    }
  }
  uint64_t result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v5);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void RIOPxrUsdStageSetColorManagementSystem(uint64_t *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      uint64_t EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      uint64_t v9 = EditTarget[1];
      uint64_t v15 = *EditTarget;
      uint64_t v16 = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v15);
    uint64_t v12 = v11;
    uint64_t v13 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v13 + 8))(v13, v10);
    }
    std::recursive_mutex::lock(v12);
    if (*v5)
    {
      long long v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetColorManagementSystem(v14, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    }
    std::recursive_mutex::unlock(v12);
  }
}

void sub_23F6A3A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

double RIOPxrUsdStageGetStartTimeCode(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  double v1 = (uint64_t *)(a1 + 16);
  if (!v2) {
    return 0.0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);

  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v3);
  return result;
}

void RIOPxrUsdStageSetStartTimeCode(uint64_t *a1, double a2)
{
  if (a1)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      uint64_t EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      uint64_t v9 = EditTarget[1];
      uint64_t v15 = *EditTarget;
      uint64_t v16 = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v15);
    uint64_t v12 = v11;
    uint64_t v13 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v13 + 8))(v13, v10);
    }
    std::recursive_mutex::lock(v12);
    if (*v5)
    {
      long long v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetStartTimeCode(v14, a2);
    }
    std::recursive_mutex::unlock(v12);
  }
}

void sub_23F6A3BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

double RIOPxrUsdStageGetEndTimeCode(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  double v1 = (uint64_t *)(a1 + 16);
  if (!v2) {
    return 0.0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);

  pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v3);
  return result;
}

void RIOPxrUsdStageSetEndTimeCode(uint64_t *a1, double a2)
{
  if (a1)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      uint64_t EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      uint64_t v9 = EditTarget[1];
      uint64_t v15 = *EditTarget;
      uint64_t v16 = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v15);
    uint64_t v12 = v11;
    uint64_t v13 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v13 + 8))(v13, v10);
    }
    std::recursive_mutex::lock(v12);
    if (*v5)
    {
      long long v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetEndTimeCode(v14, a2);
    }
    std::recursive_mutex::unlock(v12);
  }
}

void sub_23F6A3D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageHasAuthoredTimeCodeRange(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  double v1 = (uint64_t *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);

  return pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v3);
}

double RIOPxrUsdStageGetTimeCodesPerSecond(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  double v1 = (uint64_t *)(a1 + 16);
  if (!v2) {
    return 0.0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);

  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v3);
  return result;
}

void RIOPxrUsdStageSetTimeCodesPerSecond(uint64_t *a1, double a2)
{
  if (a1)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      uint64_t EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      uint64_t v9 = EditTarget[1];
      uint64_t v15 = *EditTarget;
      uint64_t v16 = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v15);
    uint64_t v12 = v11;
    uint64_t v13 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v13 + 8))(v13, v10);
    }
    std::recursive_mutex::lock(v12);
    if (*v5)
    {
      long long v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetTimeCodesPerSecond(v14, a2);
    }
    std::recursive_mutex::unlock(v12);
  }
}

void sub_23F6A3F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

double RIOPxrUsdStageGetFramesPerSecond(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  double v1 = (uint64_t *)(a1 + 16);
  if (!v2) {
    return 0.0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);

  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v3);
  return result;
}

void RIOPxrUsdStageSetFramesPerSecond(uint64_t *a1, double a2)
{
  if (a1)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      uint64_t EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      uint64_t v9 = EditTarget[1];
      uint64_t v15 = *EditTarget;
      uint64_t v16 = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v15);
    uint64_t v12 = v11;
    uint64_t v13 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v13 + 8))(v13, v10);
    }
    std::recursive_mutex::lock(v12);
    if (*v5)
    {
      long long v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetFramesPerSecond(v14, a2);
    }
    std::recursive_mutex::unlock(v12);
  }
}

void sub_23F6A4090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageGetIncludeUnusedMaterials(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  double v1 = (uint64_t *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(&v11, v3);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v11);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v13, v4);
  uint64_t v5 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&v11, "RealityKit:includeUnusedMaterials");
  if ((v11 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  uint64_t ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  uint64_t v7 = (uint64_t)ValueAtPath;
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (ValueAtPath)
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(ValueAtPath))
    {
      uint64_t v9 = *(void *)(v7 + 8);
      if ((v9 & 4) != 0) {
        uint64_t v7 = (*(uint64_t (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      uint64_t v7 = *(unsigned char *)v7 != 0;
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v13, 0);
  return v7;
}

void sub_23F6A4228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void RIOPxrUsdStageSetIncludeUnusedMaterials(uint64_t *a1, char a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  uint64_t v6 = a1[2];
  uint64_t v5 = a1 + 2;
  if (v6)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
    uint64_t EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    uint64_t v9 = *(void *)(EditTarget + 8);
    std::string __p = *(void **)EditTarget;
    uint64_t v21 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    std::string __p = 0;
    uint64_t v21 = 0;
  }
  double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &__p);
  uint64_t v12 = v11;
  uint64_t v13 = v21;
  if (v21 && atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, double))(*(void *)v13 + 8))(v13, v10);
  }
  std::recursive_mutex::lock(v12);
  long long v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer((uint64_t *)&__p, v14);
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v23, v15);
  uint64_t v16 = v21;
  if (v21 && atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v25 = &unk_26F333523;
  v24[0] = a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "RealityKit:includeUnusedMaterials");
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  if (v22 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer((uint64_t *)&__p, v17);
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(v18, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v23);
  uint64_t v19 = v21;
  if (v21 && atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v24);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v23, 0);
  std::recursive_mutex::unlock(v12);
}

void sub_23F6A44C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, __int16 a17, char a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a17);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a16, 0);
  std::recursive_mutex::unlock(v19);
  _Unwind_Resume(a1);
}

atomic_uint **_RIOPxrUsdStageCFFinalize(const void *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)a1 + 3);

  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)a1 + 2);
}

BOOL _RIOPxrUsdStageCFEqual(void *a1, void *a2)
{
  return a2[2] == a1[2];
}

unint64_t _RIOPxrUsdStageCFHash(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * a1[2]);
}

CFStringRef _RIOPxrUsdStageCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdStage %p>", a1);
}

CFStringRef _RIOPxrUsdStageCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdStage %p>", a1);
}

uint64_t std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26F3431B0;
  v2[1] = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3431B0;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::target_type()
{
}

realityio::InstancedEntityBuilder *realityio::InstancedEntityBuilder::InstancedEntityBuilder(realityio::InstancedEntityBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[9] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "InstancedEntityBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kInstancedEntityBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C408F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C408F8))
  {
    operator new();
  }
  uint64_t v5 = _MergedGlobals_35;
  uint64_t v6 = (std::__shared_weak_count *)unk_268C408F0;
  if (unk_268C408F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C408F0 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F3432A8;
  void v12[3] = v12;
  v11[0] = &unk_26F343328;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F343230;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = 0;
  return this;
}

void sub_23F6A4CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,char *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  uint64_t v43 = *(std::__shared_weak_count **)(v41 - 88);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  *(void *)(v41 - 184) = &a33;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 184));
  int v44 = *(std::__shared_weak_count **)(v41 - 104);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  *(void *)(v41 - 184) = &a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 184));
  a25 = &a28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a33 = &a36;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  MEMORY[0x2455D2BD0](v40, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C408F8);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t gatherEntities(uint64_t a1, void **a2)
{
  uint64_t v4 = (uint64_t)(a2 + 2);
  unint64_t v5 = (unint64_t)a2[2];
  uint64_t v6 = a2[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = ((char *)v6 - (unsigned char *)*a2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v5 - (void)*a2;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    long long v14 = &v12[8 * v11];
    *(void *)uint64_t v13 = a1;
    uint64_t v7 = v13 + 8;
    uint64_t v16 = (char *)*a2;
    uint64_t v15 = (char *)a2[1];
    if (v15 != *a2)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      uint64_t v15 = (char *)*a2;
    }
    *a2 = v13;
    a2[1] = v7;
    a2[2] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    void *v6 = a1;
    uint64_t v7 = v6 + 1;
  }
  a2[1] = v7;
  uint64_t result = REEntityGetChildCount();
  if (result)
  {
    uint64_t v19 = result;
    for (uint64_t i = 0; i != v19; ++i)
    {
      uint64_t Child = REEntityGetChild();
      uint64_t result = gatherEntities(Child, a2);
    }
  }
  return result;
}

pxrInternal__aapl__pxrReserved__ *realityio::InstancedEntityBuilder::run(uint64_t **this, realityio::Inputs *a2)
{
  v74[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  PrimAtPath = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v56, v4, v3);
  uint64_t v7 = v57;
  if (!v57 || (uint64_t v8 = *((void *)v57 + 7), (v8 & 0x800) != 0))
  {
    PrimAtPath = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v57, v6);
    uint64_t v8 = *((void *)v7 + 7);
  }
  if ((v8 & 0x100) != 0)
  {
    uint64_t v9 = realityio::EntityBuilder::kInputName(PrimAtPath);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v9, (uint64_t)v54);
    if (v54[0])
    {
      uint64_t v53 = v55;
      if (v55)
      {
        RERetain();
        uint64_t v10 = (void **)REComponentClassFromName();
        uint64_t v71 = v10;
        std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)&v71, (uint64_t *)&v71);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype(&v49, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v56);
        uint64_t v11 = *realityio::ImportSessionImpl::getPrototypeEntityRoot(*(realityio::ImportSessionImpl **)(*((void *)a2 + 5) + 16));
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v49, &v71);
        uint64_t EntityAtPath = getEntityAtPath(v11, (uint64_t)v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v71);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
        if (EntityAtPath)
        {
          memset(v48, 0, sizeof(v48));
          LODWORD(v71) = v56;
          v72.i64[0] = (uint64_t)v57;
          if (v57) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)v57 + 6, 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v72.i32[2], &v58);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v72.i32[3], &v59);
          int v73 = v60;
          if ((v60 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            int v73 = (uint64_t *)((unint64_t)v73 & 0xFFFFFFFFFFFFFFF8);
          }
          uint64_t v68 = 0;
          uint64_t v69 = 0;
          uint64_t v70 = 0;
          size_t v65 = &v68;
          LOBYTE(v66) = 0;
          uint64_t v68 = (char *)operator new(0x20uLL);
          uint64_t v69 = v68;
          uint64_t v70 = v68 + 32;
          uint64_t v69 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim const*,pxrInternal__aapl__pxrReserved__::UsdPrim const*,pxrInternal__aapl__pxrReserved__::UsdPrim*>((uint64_t)&v70, (uint64_t)&v71, (uint64_t)v74, (uint64_t)v68);
          if (!atomic_load(MEMORY[0x263F90550])) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterials();
          size_t v65 = &v68;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
          if ((v73 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72.i64[1]);
          if (v72.i64[0]) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v72.i64[0]);
          }
          uint64_t v14 = v53;
          uint64_t v68 = 0;
          uint64_t v69 = 0;
          uint64_t v70 = 0;
          size_t v65 = 0;
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          gatherEntities(EntityAtPath, (void **)&v68);
          gatherEntities(v14, (void **)&v65);
          uint64_t v15 = v68;
          uint64_t v16 = v65;
          if (v69 - v68 == (char *)v66 - (char *)v65)
          {
            if (v69 == v68)
            {
              uint64_t v15 = v69;
            }
            else
            {
              unint64_t v17 = 0;
              int v44 = this + 35;
              do
              {
                ComponentCFIndex Count = REEntityGetComponentCount();
                uint64_t v19 = ComponentCount;
                if (ComponentCount)
                {
                  uint64_t v20 = 0;
                  uint64_t v45 = ComponentCount;
                  do
                  {
                    REEntityGetComponentAtIndex();
                    uint64_t Class = REComponentGetClass();
                    if (Class == REMeshComponentGetComponentType())
                    {
                      uint64_t v22 = REComponentCopy();
                      REEntityGetComponentByClass();
                      MaterialCFIndex Count = REMeshComponentGetMaterialCount();
                      unint64_t v24 = MaterialCount;
                      uint64_t v62 = 0;
                      size_t v63 = 0;
                      int64x2_t v64 = 0;
                      if (MaterialCount)
                      {
                        if (MaterialCount >> 61) {
                          std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v25 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v64, MaterialCount);
                        uint64_t v62 = v25;
                        int64x2_t v64 = (char *)&v25[v26];
                        bzero(v25, 8 * v24);
                        uint64_t v27 = 0;
                        size_t v63 = &v25[v24];
                        do
                          v62[v27++] = REMeshComponentGetMaterialAtIndex();
                        while (v24 != v27);
                      }
                      REComponentGetClass();
                      REEntityRemoveComponentByClass();
                      REEntityAddExistingComponent();
                      REMeshComponentRemoveAllMaterials();
                      if (v24)
                      {
                        for (uint64_t i = 0; i != v24; ++i)
                          REMeshComponentAddMaterial();
                      }
                      uint64_t v19 = v45;
                      if (v22)
                      {
                        uint64_t v61 = v22;
                        RERetain();
                        uint64_t v29 = this;
                        uint64_t v30 = this[36];
                        int v31 = this[37];
                        if (v30 >= v31)
                        {
                          int v33 = *v44;
                          uint64_t v34 = v30 - *v44;
                          unint64_t v35 = v34 + 1;
                          if ((unint64_t)(v34 + 1) >> 61) {
                            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                          }
                          if (((char *)v31 - (char *)v33) >> 2 > v35) {
                            unint64_t v35 = ((char *)v31 - (char *)v33) >> 2;
                          }
                          if ((unint64_t)((char *)v31 - (char *)v33) >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v36 = v35;
                          }
                          v74[0] = this + 37;
                          if (v36)
                          {
                            if (v36 >> 61) {
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            }
                            int v37 = (void **)operator new(8 * v36);
                            uint64_t v29 = this;
                          }
                          else
                          {
                            int v37 = 0;
                          }
                          int v38 = (uint64_t *)&v37[v34];
                          *int v38 = v61;
                          uint64_t v71 = v37;
                          v72.i64[0] = (uint64_t)v38;
                          uint64_t v39 = (uint64_t *)&v37[v36];
                          uint64_t v61 = 0;
                          v72.i64[1] = (uint64_t)(v38 + 1);
                          int v73 = v39;
                          if (v30 == v33)
                          {
                            int64x2_t v42 = vdupq_n_s64((unint64_t)v30);
                            uint64_t v32 = v38 + 1;
                          }
                          else
                          {
                            uint64_t v40 = 0;
                            do
                            {
                              uint64_t v41 = v30[v40 - 1];
                              v38[v40 - 1] = v41;
                              if (v41) {
                                RERetain();
                              }
                              --v40;
                            }
                            while (&v30[v40] != v33);
                            int64x2_t v42 = *(int64x2_t *)v44;
                            int v31 = this[37];
                            int v38 = (uint64_t *)((char *)v38 + v40 * 8);
                            uint64_t v32 = (uint64_t *)v72.i64[1];
                            uint64_t v39 = v73;
                            uint64_t v29 = this;
                          }
                          v29[35] = v38;
                          v29[36] = v32;
                          int64x2_t v72 = v42;
                          v29[37] = v39;
                          int v73 = v31;
                          uint64_t v71 = (void **)v42.i64[0];
                          std::__split_buffer<realityio::WrappedRERef<REComponent *>>::~__split_buffer((uint64_t)&v71);
                          uint64_t v19 = v45;
                          uint64_t v29 = this;
                        }
                        else
                        {
                          *uint64_t v30 = v61;
                          uint64_t v32 = v30 + 1;
                          uint64_t v61 = 0;
                          this[36] = v32;
                        }
                        v29[36] = v32;
                        realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v61);
                        RERelease();
                      }
                      if (v62)
                      {
                        size_t v63 = v62;
                        operator delete(v62);
                      }
                    }
                    ++v20;
                  }
                  while (v20 != v19);
                }
                ++v17;
                uint64_t v15 = v68;
              }
              while (v17 < (v69 - v68) >> 3);
              uint64_t v16 = v65;
            }
          }
          if (v16)
          {
            uint64_t v66 = v16;
            operator delete(v16);
            uint64_t v15 = v68;
          }
          if (v15)
          {
            uint64_t v69 = v15;
            operator delete(v15);
          }
          uint64_t v71 = (void **)&v47;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v71);
          uint64_t v71 = (void **)v48;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100](&v71);
        }
        if ((v52 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
        if (v50) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v50);
        }
      }
    }
    else
    {
      uint64_t v53 = 0;
    }
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v53);
    realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v54);
  }
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
  uint64_t result = v57;
  if (v57) {
    return (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v57);
  }
  return result;
}

void sub_23F6A5688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  *(void *)(v32 - 160) = &a15;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 160));
  *(void *)(v32 - 160) = &a18;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 160));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a21);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a25);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a26);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a32);
  _Unwind_Resume(a1);
}

uint64_t getEntityAtPath(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  if (!REEntityGetComponentByClass()
    || (uint64_t v6 = *(const char **)RECustomComponentGetObject(),
        uint64_t Text = (const char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3),
        strcmp(v6, Text)))
  {
    ChildCFIndex Count = REEntityGetChildCount();
    if (ChildCount)
    {
      uint64_t v9 = ChildCount;
      uint64_t v10 = 0;
      while (1)
      {
        uint64_t Child = REEntityGetChild();
        uint64_t EntityAtPath = getEntityAtPath(Child, a2, a3);
        if (EntityAtPath) {
          break;
        }
        if (v9 == ++v10) {
          return 0;
        }
      }
      return EntityAtPath;
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void *realityio::InstancedEntityBuilder::clear(realityio::InstancedEntityBuilder *this, realityio::Inputs *a2)
{
  uint64_t result = (void *)*((void *)this + 36);
  uint64_t v4 = (void *)*((void *)this + 35);
  while (result != v4)
    uint64_t result = realityio::WrappedRERef<REComponent *>::~WrappedRERef(result - 1);
  *((void *)this + 36) = v4;
  return result;
}

void realityio::InstancedEntityBuilder::~InstancedEntityBuilder(realityio::InstancedEntityBuilder *this)
{
  realityio::InstancedEntityBuilder::~InstancedEntityBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)this = &unk_26F343230;
  uint64_t v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 36);
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = realityio::WrappedRERef<REComponent *>::~WrappedRERef(v3 - 1);
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 35);
    }
    *((void *)this + 36) = v2;
    operator delete(v4);
  }
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *((void *)this + 24);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 23);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

uint64_t std::__split_buffer<realityio::WrappedRERef<REComponent *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    realityio::WrappedRERef<REComponent *>::~WrappedRERef((void *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F3432A8;
  return result;
}

void std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3432A8;
}

void std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v12) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)&v12, &v14);
  uint64_t v6 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v14);
  uint64_t v7 = (realityio::EntityBuilder *)v15;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v8 = realityio::EntityBuilder::kPrimPathOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v11 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v8, (uint64_t *)(v9 + 160), &v11, &v12);
  uint64_t v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F6A5C70(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F343328;
  return result;
}

void std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F343328;
}

char *std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::tokens::EntityBuilderTokens_StaticTokenType::~EntityBuilderTokens_StaticTokenType(realityio::tokens::EntityBuilderTokens_StaticTokenType *this)
{
  unint64_t v9 = (void **)((char *)this + 64);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v2 = *((void *)this + 7);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 6);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 5);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 4);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 3);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 1);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::EntityBuilderTokens_StaticTokenType *realityio::tokens::EntityBuilderTokens_StaticTokenType::EntityBuilderTokens_StaticTokenType(realityio::tokens::EntityBuilderTokens_StaticTokenType *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)(MEMORY[0x2455CF820](this, "active", 0) + 8);
  MEMORY[0x2455CF820](v2, "specifier", 0);
  MEMORY[0x2455CF820]((char *)this + 16, "typeName", 0);
  MEMORY[0x2455CF820]((char *)this + 24, "RealityKitEntityAPI", 0);
  MEMORY[0x2455CF820]((char *)this + 32, "RealityKit:requireEntityAPI", 0);
  MEMORY[0x2455CF820]((char *)this + 40, "RealityKit:__entityTaggingEditMode", 0);
  MEMORY[0x2455CF820]((char *)this + 48, "RealityKit:entity", 0);
  MEMORY[0x2455CF820]((char *)this + 56, "RealityKit:entityName", 0);
  uint64_t v3 = *(void *)this;
  uint64_t v17 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v17 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *v2;
  uint64_t v18 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 2);
  uint64_t v19 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v20 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 4);
  uint64_t v21 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v22 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 6);
  uint64_t v23 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 7);
  uint64_t v24 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  int v11 = (char *)operator new(0x40uLL);
  uint64_t v12 = 0;
  *((void *)this + 8) = v11;
  *((void *)this + 9) = v11;
  *((void *)this + 10) = v11 + 64;
  do
  {
    uint64_t v13 = *(uint64_t *)((char *)&v17 + v12);
    *(void *)&v11[v12] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v11[v12] &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 += 8;
  }
  while (v12 != 64);
  *((void *)this + 9) = v11 + 64;
  for (uint64_t i = 56; i != -8; i -= 8)
  {
    uint64_t v15 = *(uint64_t *)((char *)&v17 + i);
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F6A6274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v21 = 56;
  while (1)
  {
    uint64_t v22 = *(void *)(&a12 + v21);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v21 -= 8;
    if (v21 == -8)
    {
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::generateEntityDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40910, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40910))
  {
    operator new();
  }
  uint64_t v3 = *(void *)algn_268C40908;
  *a1 = _MergedGlobals_36;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F6A67F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  MEMORY[0x2455D2BD0](v30, 0x1060C40E5A1EACFLL);
  uint64_t v34 = v32 - 160;
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  while (1)
  {
    unint64_t v35 = *(std::__shared_weak_count **)(v34 - 8);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    v34 -= 16;
    if (v34 == v32 - 192)
    {
      MEMORY[0x2455D2BD0](v29, 0x10A1C402FEF67C7);
      *(void *)(v32 - 192) = &a28;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 192));
      MEMORY[0x2455D2BD0](v28, 0x10A1C401BF1BAA1);
      MEMORY[0x2455D2BD0](v31, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_268C40910);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t realityio::getPrimEntityProvidingSetting(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  char v10 = 0;
  MEMORY[0x2455CF810](v9, "customData");
  if (!atomic_load(&realityio::tokens::EntityBuilderTokens)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  unsigned int Metadata = pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<BOOL>((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v9);
  if ((v9[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v10) {
    uint64_t v5 = Metadata;
  }
  else {
    uint64_t v5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(v9, this);
  for (uint64_t i = (void *)v9[0]; i != (void *)v9[1]; ++i)
  {
    unint64_t v7 = atomic_load(&realityio::tokens::EntityBuilderTokens);
    if (!v7) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*i & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v7 + 24) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v5 = 1;
      break;
    }
  }
  int v11 = (void **)v9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v11);
  return v5;
}

void sub_23F6A6BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t realityio::primLayerIsEntityTaggingEditMode(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v11, this);
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v11);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(&v13, v2);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v13);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v15, v3);
  uint64_t v4 = v14;
  if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::EntityBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*((void *)v6 + 5) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  uint64_t ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  uint64_t v8 = (uint64_t)ValueAtPath;
  if (ValueAtPath)
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(ValueAtPath))
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if ((v9 & 4) != 0) {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v8);
      }
      uint64_t v8 = *(unsigned char *)v8 != 0;
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v15, 0);
  return v8;
}

void sub_23F6A6D50(_Unwind_Exception *a1)
{
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)(v1 - 24), 0);
  _Unwind_Resume(a1);
}

uint64_t realityio::calculateOptInFromTargetPrim(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  int v14 = *(_DWORD *)this;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v15 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, (_DWORD *)this + 5);
  uint64_t v5 = *((void *)this + 3);
  uint64_t v18 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18 &= 0xFFFFFFFFFFFFFFF8;
  }
  do
  {
    uint64_t PrimEntityProvidingSetting = realityio::getPrimEntityProvidingSetting((realityio *)&v14, v4);
    if (PrimEntityProvidingSetting) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14, (uint64_t)&v10);
    int v14 = v10;
    uint64_t v7 = v11;
    uint64_t v11 = 0;
    uint64_t v8 = v15;
    uint64_t v15 = v7;
    if (v8) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v16, &v12);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v18 = v13;
    uint64_t v13 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    if (v11) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
    }
  }
  while ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14) & 1) == 0);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  if (v15) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v15);
  }
  return PrimEntityProvidingSetting;
}

void sub_23F6A6F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

unint64_t realityio::calculateIsEntityProvidingAtExportTime(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, &v7);
  char IsAbsoluteRootPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (IsAbsoluteRootPath) {
    return 1;
  }
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)realityio::calculateOptInFromTargetPrim(this, v4);
  return realityio::isEntityProviding(this, v6);
}

void sub_23F6A7020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

unint64_t realityio::isEntityProviding(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  int v2 = (int)a2;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, &v13);
  char IsAbsoluteRootPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  if (IsAbsoluteRootPath) {
    return 1;
  }
  if (!v2 || (realityio::primLayerIsEntityTaggingEditMode(this, v5) & 1) != 0)
  {
    if ((realityio::isSceneLibrary(this, v5) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent(this, (uint64_t)&v13);
      char isSceneLibrary = realityio::isSceneLibrary((realityio *)&v13, v6);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
      if (v14) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
      }
      if ((isSceneLibrary & 1) == 0) {
        return realityio::isEntityConvertible(this, v8);
      }
    }
    return 1;
  }
  unint64_t result = realityio::getPrimEntityProvidingSetting(this, v5);
  if (result)
  {
    PrimPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath(this);
    if (*(void *)PrimPath == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(PrimPath))
    {
      return 0;
    }
    else
    {
      unint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
      if (result)
      {
        unint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrim::IsActive(this, v11);
        if (result) {
          return pxrInternal__aapl__pxrReserved__::UsdPrim::IsDefined(this, v12);
        }
      }
    }
  }
  return result;
}

void sub_23F6A7170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t realityio::calculateIsEntityProviding(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, &v8);
  char IsAbsoluteRootPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (IsAbsoluteRootPath) {
    return 1;
  }
  if (realityio::primLayerIsEntityTaggingEditMode(this, v4)) {
    int v7 = 0;
  }
  else {
    int v7 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)realityio::calculateOptInFromTargetPrim(this, v6);
  }
  return realityio::isEntityProviding(this, v7);
}

void sub_23F6A7228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsActive(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2 || (uint64_t v3 = *(void *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    uint64_t v3 = *(void *)(v2 + 56);
  }
  return v3 & 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsDefined(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2 || (unint64_t v3 = *(void *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    unint64_t v3 = *(void *)(v2 + 56);
  }
  return (v3 >> 6) & 1;
}

uint64_t realityio::isEntityConvertible(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath(this);
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath) & 1) == 0
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this)
    && pxrInternal__aapl__pxrReserved__::UsdPrim::IsActive(this, v4)
    && ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsDefined(this, v4) & 1) != 0
     || realityio::isInSceneHierarchy(this, v4)))
  {
    if (realityio::isSceneGraphNode((pxrInternal__aapl__pxrReserved__ **)this, v4))
    {
      uint64_t IsValid = (pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
      if (IsValid)
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(IsValid);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()) {
          return 1;
        }
      }
    }
  }

  return pxrInternal__aapl__pxrReserved__::UsdPrim::IsPrototype(this, v4);
}

uint64_t realityio::isInSceneHierarchy(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this)) {
    return 0;
  }
  if (realityio::isScene(this, v3)) {
    return 1;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent(this, (uint64_t)&v7);
  uint64_t v4 = realityio::isInSceneHierarchy((realityio *)&v7, v5);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  return v4;
}

void sub_23F6A7408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::isSceneGraphNode(pxrInternal__aapl__pxrReserved__ **this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)this);
  if (result)
  {
    uint64_t v5 = this[1];
    if (!v5 || (*((unsigned char *)v5 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(this[1], v4);
    }
    uint64_t v6 = (void *)*((void *)v5 + 3);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)MEMORY[0x2455CF810](&v9, "");
    uint64_t v8 = v9;
    if ((*v6 & 0xFFFFFFFFFFFFFFF8) == (v9 & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t result = 1;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(v7);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      uint64_t v8 = v9;
    }
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsPrototype(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2 || (uint64_t v3 = *(void *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    if ((*(void *)(v2 + 56) & 0x1000) == 0) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) == 0)
  {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 16));
}

uint64_t RIOPxrSdrShaderNodeGetTypeID()
{
  if (qword_268C40920 != -1) {
    dispatch_once(&qword_268C40920, &__block_literal_global_24);
  }
  return _MergedGlobals_37;
}

void __RIOPxrSdrShaderNodeGetTypeID_block_invoke()
{
  if (!_MergedGlobals_37) {
    _MergedGlobals_37 = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrSdrShaderPropertyGetTypeID()
{
  if (qword_268C40930 != -1) {
    dispatch_once(&qword_268C40930, &__block_literal_global_2_1);
  }
  return qword_268C40928;
}

void __RIOPxrSdrShaderPropertyGetTypeID_block_invoke()
{
  if (!qword_268C40928) {
    qword_268C40928 = _CFRuntimeRegisterClass();
  }
}

__CFArray *RIOPxrSdrRegistryCopyNodeNames(pxrInternal__aapl__pxrReserved__::SdrRegistry *a1)
{
  pxrInternal__aapl__pxrReserved__::SdrRegistry::GetInstance(a1);
  pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByFamily();
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v2 = v6;
  if (v6 != v7)
  {
    do
    {
      uint64_t v3 = (const char *)(*(void *)v2 + 40);
      if (*(char *)(*(void *)v2 + 63) < 0) {
        uint64_t v3 = *(const char **)v3;
      }
      CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
      CFArrayAppendValue(Mutable, v4);
      CFRelease(v4);
      v2 += 8;
    }
    while (v2 != v7);
    uint64_t v2 = v6;
  }
  if (v2) {
    operator delete(v2);
  }
  return Mutable;
}

void sub_23F6A7720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdrRegistryGetShaderNodeByName(pxrInternal__aapl__pxrReserved__::SdrRegistry *a1)
{
  pxrInternal__aapl__pxrReserved__::SdrRegistry::GetInstance(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)a1);
  memset(v4, 0, sizeof(v4));
  ShaderNodeByuint64_t Name = pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByName();
  uint64_t v7 = v4;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (v6 < 0)
  {
    operator delete(__p);
    if (ShaderNodeByName) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!ShaderNodeByName) {
    return 0;
  }
LABEL_3:
  if (qword_268C40920 != -1) {
    dispatch_once(&qword_268C40920, &__block_literal_global_24);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result) {
    *(void *)(result + 16) = ShaderNodeByName;
  }
  return result;
}

void sub_23F6A7848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  *(void *)(v19 - 40) = v18;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 40));
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrSdrShaderNodeCopyInputNames(uint64_t a1)
{
  InputNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::NdrNode::GetInputNames(*(pxrInternal__aapl__pxrReserved__::NdrNode **)(a1 + 16));
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>(&v7, *InputNames, InputNames[1], InputNames[1] - *InputNames);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v3 = v7;
  CFStringRef v4 = v8;
  while (v3 != v4)
  {
    uint64_t v5 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v3);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
    ++v3;
  }
  uint64_t v10 = (void **)&v7;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v10);
  return Mutable;
}

void sub_23F6A7924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrSdrShaderNodeCopyOutputNames(uint64_t a1)
{
  OutputNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::NdrNode::GetOutputNames(*(pxrInternal__aapl__pxrReserved__::NdrNode **)(a1 + 16));
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>(&v7, *OutputNames, OutputNames[1], OutputNames[1] - *OutputNames);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v3 = v7;
  CFStringRef v4 = v8;
  while (v3 != v4)
  {
    uint64_t v5 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v3);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
    ++v3;
  }
  uint64_t v10 = (void **)&v7;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v10);
  return Mutable;
}

void sub_23F6A79F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrSdrShaderNodeCopyName(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (*(char *)(v1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v1 + 40), *(void *)(v1 + 48));
  }
  else {
    std::string __p = *(std::string *)(v1 + 40);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  CFStringRef v3 = CFStringCreateWithCString(0, (const char *)p_p, 0x8000100u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_23F6A7AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdrShaderNodeGetFamily(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(*(void *)(a1 + 16) + 64));
}

uint64_t RIOPxrSdrShaderNodeCopyFamily(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(*(void *)(a1 + 16) + 64));
}

CFStringRef RIOPxrSdrShaderNodeCopyInfoString(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 24))(__p);
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  CFStringRef v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_23F6A7B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdrShaderNodeGetShaderInput(uint64_t a1, uint64_t a2)
{
  uint64_t ShaderInput = pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(*(pxrInternal__aapl__pxrReserved__::SdrShaderNode **)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  return RIOPxrSdrShaderPropertyCreate<pxrInternal__aapl__pxrReserved__::SdrShaderProperty const*>(&ShaderInput);
}

uint64_t RIOPxrSdrShaderNodeCopyShaderInput(uint64_t a1, uint64_t a2)
{
  uint64_t ShaderInput = pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(*(pxrInternal__aapl__pxrReserved__::SdrShaderNode **)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  return RIOPxrSdrShaderPropertyCreate<pxrInternal__aapl__pxrReserved__::SdrShaderProperty const*>(&ShaderInput);
}

uint64_t RIOPxrSdrShaderPropertyCreate<pxrInternal__aapl__pxrReserved__::SdrShaderProperty const*>(void *a1)
{
  if (qword_268C40930 != -1) {
    dispatch_once(&qword_268C40930, &__block_literal_global_2_1);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result) {
    *(void *)(result + 16) = *a1;
  }
  return result;
}

uint64_t RIOPxrSdrShaderNodeGetShaderOutput(uint64_t a1, uint64_t a2)
{
  uint64_t ShaderOutput = pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderOutput(*(pxrInternal__aapl__pxrReserved__::SdrShaderNode **)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  return RIOPxrSdrShaderPropertyCreate<pxrInternal__aapl__pxrReserved__::SdrShaderProperty const*>(&ShaderOutput);
}

uint64_t RIOPxrSdrShaderNodeCopyShaderOutput(uint64_t a1, uint64_t a2)
{
  uint64_t ShaderOutput = pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderOutput(*(pxrInternal__aapl__pxrReserved__::SdrShaderNode **)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  return RIOPxrSdrShaderPropertyCreate<pxrInternal__aapl__pxrReserved__::SdrShaderProperty const*>(&ShaderOutput);
}

uint64_t RIOPxrSdrShaderPropertyGetName(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(*(void *)(a1 + 16) + 8));
}

uint64_t RIOPxrSdrShaderPropertyCopyName(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(*(void *)(a1 + 16) + 8));
}

uint64_t RIOPxrSdrShaderPropertyGetType(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(*(void *)(a1 + 16) + 16));
}

uint64_t RIOPxrSdrShaderPropertyCopyType(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(*(void *)(a1 + 16) + 16));
}

uint64_t RIOPxrSdrShaderPropertyGetDefaultValue(uint64_t a1)
{
  return RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)(*(void *)(a1 + 16) + 24));
}

uint64_t RIOPxrSdrShaderPropertyCopyDefaultValue(uint64_t a1)
{
  return RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)(*(void *)(a1 + 16) + 24));
}

BOOL RIOPxrSdrShaderPropertyIsArray(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return *(void *)(v1 + 48) || *(unsigned char *)(v1 + 56) != 0;
}

uint64_t RIOPxrSdrShaderPropertyGetArraySize(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 16) + 48);
}

uint64_t RIOPxrSdrShaderPropertyIsConnectable(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

CFStringRef RIOPxrSdrShaderPropertyCopyInfoString(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 16))(__p);
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  CFStringRef v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_23F6A7E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL _RIOPxrSdrShaderNodeCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOPxrSdrShaderNodeCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOPxrSdrShaderNodeCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdrShaderNode %p>", a1);
}

CFStringRef _RIOPxrSdrShaderNodeCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdrShaderNode %p>", a1);
}

BOOL _RIOPxrSdrShaderPropertyCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOPxrSdrShaderPropertyCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOPxrSdrShaderPropertyCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdrShaderProperty %p>", a1);
}

CFStringRef _RIOPxrSdrShaderPropertyCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdrShaderProperty %p>", a1);
}

uint64_t realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(realityio::MeshModelDescriptorBuilder *this)
{
  {
    operator new();
  }
  return realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(void)::kOutputName;
}

void sub_23F6A8014(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::MeshModelDescriptorBuilder *realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(realityio::MeshModelDescriptorBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "MeshModelDescriptorBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kMeshModelDescriptorBuilderIdentifier);
  realityio::generateMeshDirtyStageSubscription(&v5);
  v12[0] = &unk_26F343520;
  void v12[3] = v12;
  v11[0] = &unk_26F3435A0;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F3434A8;
  return this;
}

void sub_23F6A8190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::MeshModelDescriptorBuilder::run(realityio::MeshModelDescriptorBuilder *this, realityio::Inputs *a2)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  CFStringRef v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v82, v5, v4);
  uint64_t IsValid = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v82);
  if (IsValid)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(IsValid);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if (IsA)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v80 = MEMORY[0x263F906B0] + 16;
      if (!realityio::isGuide((realityio *)&v82, v8))
      {
        if (!*(unsigned char *)(*(void *)(*((void *)a2 + 5) + 16) + 272)
          || !v81
          || (*(unsigned char *)(v81 + 57) & 8) != 0
          || !(*(unsigned int (**)(uint64_t *))(v80 + 32))(&v80))
        {
          goto LABEL_16;
        }
        *(void *)&long long v55 = 0x7FF8000000000000;
        pxrInternal__aapl__pxrReserved__::UsdGeomImageable::ComputeVisibility((uint64_t *)&buf, (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&v80, (const pxrInternal__aapl__pxrReserved__::UsdTimeCode *)&v55);
        MEMORY[0x2455CF810](v67, "invisible");
        uint64_t v9 = buf;
        char v10 = (atomic_uint *)(v67[0] & 0xFFFFFFFFFFFFFFF8);
        if ((v67[0] & 7) != 0) {
          atomic_fetch_add_explicit(v10, 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v13 = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((buf & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)v13 != v10)
        {
LABEL_16:
          realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v79, 2034, (uint64_t)this);
          long long v78 = 0;
          uint64_t v14 = REMeshCompileOptionsCreate();
          uint64_t v15 = v78;
          if (v78) {
            uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)RERelease();
          }
          long long v78 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v14;
          if (v14)
          {
            REMeshCompileOptionsSetPreserveSubdivisonSurfaceData();
            uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
            pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&buf, v16);
            int v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&buf);
            pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData((uint64_t *)&v55, v17);
            uint64_t v18 = *((void *)&buf + 1);
            if (*((void *)&buf + 1)
              && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
            }
            std::string::basic_string[abi:ne180100]<0>(&buf, "realityio:decimateAllMeshes");
            uint64_t ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
            if (SHIBYTE(v88) < 0) {
              operator delete((void *)buf);
            }
            if (ValueAtPath && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(ValueAtPath))
            {
              pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>(ValueAtPath);
              REMeshCompileOptionsSetGenerateDecimatedMesh();
            }
            std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)&v55, 0);
            *(void *)&long long v55 = v78;
            uint64_t v20 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&buf, "RE:mesh:v1:generateVertexFaceAdjacencyAttributes");
            if ((buf & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&buf, "RE:mesh:v1:reorderVertexCaching");
            if ((buf & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&buf, "RE:mesh:v1:repairTangents");
            if ((buf & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v23 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&buf, "RE:mesh:v1:mergeVerticesIfPolygonSoup");
            if ((buf & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v24 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&buf, "RE:mesh:v1:preserveSharpFeatures");
            if ((buf & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v25 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&buf, "RE:mesh:v1:preserveSubdivisionSurfaceData");
            if ((buf & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](&buf, "RE:mesh:v1:decimateMesh");
            if ((buf & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          unint64_t v77 = 0;
          __n128 v73 = 0uLL;
          uint64_t v74 = 0;
          pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v15);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            *(void *)&v72[8] = MEMORY[0x263F90690] + 16;
            if (!atomic_load(MEMORY[0x263F90538])) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
            }
            *(void *)&long long v55 = 0;
            pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets();
            if ((v55 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::reserve(&v75, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&buf + 1) - buf) >> 3));
            uint64_t v29 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)*((void *)&buf + 1);
            for (uint64_t i = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)buf;
                  i != v29;
                  uint64_t i = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)i + 24))
            {
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(i, &v55);
              uint64_t v30 = v76;
              if ((unint64_t)v76 >= v77)
              {
                uint64_t v31 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(&v75, &v55);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v76, &v55);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v30 + 1, (_DWORD *)&v55 + 1);
                uint64_t v31 = v30 + 2;
              }
              uint64_t v76 = v31;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
            }
            *(void *)&long long v55 = &buf;
            std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
            LODWORD(buf) = 1;
            *((void *)&buf + 1) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            uint64_t v89 = 0;
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            uint64_t v70 = MEMORY[0x263F90708] + 16;
            if ((v89 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87);
            if (*((void *)&buf + 1)) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v67[3] = 0;
            v67[0] = MEMORY[0x263F90768] + 16;
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton((uint64_t *)&buf, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v67);
            uint64_t v32 = *((void *)&buf + 1);
            if (*((void *)&buf + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 48), 1uLL, memory_order_relaxed);
            }
            uint64_t v33 = v71;
            uint64_t v71 = v32;
            if (v33) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v33);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v72, &v87);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v72[4], &v88);
            MEMORY[0x2455CEDD0](&buf);
            if (v71 && (*(unsigned char *)(v71 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v70 + 32))(&v70))
            {
              uint64_t v34 = (unint64_t *)MEMORY[0x263F90540];
              unint64_t v35 = atomic_load(MEMORY[0x263F90540]);
              if (!v35) {
                pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
              }
              if (pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v82, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v35 + 136)))
              {
                unint64_t v36 = atomic_load(v34);
                if (!v36) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
                }
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((uint64_t *)&buf, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v82, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v36 + 136));
                int64x2_t v64 = 0;
                size_t v65 = 0;
                uint64_t v66 = 0;
                pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
                int v37 = v64;
                int v38 = v65;
                if (v64 != v65)
                {
                  while (1)
                  {
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v62, v37);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v63, v37 + 1);
                    uint64_t v39 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
                    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v55, v39, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62);
                    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v55))
                    {
                      uint64_t v40 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
                      PrimAtPath = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v58, v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62);
                      pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(PrimAtPath);
                      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
                      char v42 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
                      if ((v61 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
                      if (__p) {
                        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p);
                      }
                    }
                    else
                    {
                      char v42 = 0;
                    }
                    if ((BYTE8(v56) & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v56 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
                    if (*((void *)&v55 + 1)) {
                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v55 + 1));
                    }
                    if (v42) {
                      break;
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
                    v37 += 2;
                    if (v37 == v38) {
                      goto LABEL_110;
                    }
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v68, &v62);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v69, &v63);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
                }
LABEL_110:
                *(void *)&long long v55 = &v64;
                std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
                pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&buf);
              }
              else
              {
                unint64_t v48 = atomic_load(v34);
                if (!v48) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
                }
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&buf, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v82, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v48 + 136));
                int64x2_t v64 = 0;
                size_t v65 = 0;
                uint64_t v66 = 0;
                pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
                uint64_t v49 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v64;
                uint64_t v50 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v65;
                if (v64 != v65)
                {
                  while (1)
                  {
                    uint64_t v51 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
                    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v55, v51, v49);
                    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v55))
                    {
                      uint64_t v52 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
                      uint64_t v53 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v58, v52, v49);
                      pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(v53);
                      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
                      char v54 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
                      if ((v61 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
                      if (__p) {
                        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p);
                      }
                    }
                    else
                    {
                      char v54 = 0;
                    }
                    if ((BYTE8(v56) & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v56 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
                    if (*((void *)&v55 + 1)) {
                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v55 + 1));
                    }
                    if (v54) {
                      break;
                    }
                    uint64_t v49 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v49 + 8);
                    if (v49 == v50) {
                      goto LABEL_108;
                    }
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v68, v49);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v69, (_DWORD *)v49 + 1);
                }
LABEL_108:
                *(void *)&long long v55 = &v64;
                std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
                pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&buf);
              }
            }
            MEMORY[0x2455CF2D0](&buf, v67);
            uint64_t v57 = 0;
            long long v55 = 0u;
            long long v56 = 0u;
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr(&v58, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v67);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
          }
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v82, &v55);
          std::allocate_shared[abi:ne180100]<realityio::MeshModelDescriptorBuilder::MeshModelDataT,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDataT>,realityio::WrappedRERef<REMeshCompileOptions *>,pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,void>(&buf, &v78, &v55, (uint64_t)&v75, &v73);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          uint64_t v43 = (realityio::MeshModelDescriptorBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
          uint64_t v45 = *((void *)this + 2);
          int v44 = (std::__shared_weak_count *)*((void *)this + 3);
          if (v44) {
            atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v46 = (long long *)realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v43);
          realityio::Outputs::storeValue<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>(v45, v46, (uint64_t *)&buf);
          if (v44) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v44);
          }
          if (*((void *)&buf + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
          }
          *(void *)&long long buf = &v73;
          std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          *(void *)&long long buf = &v75;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(&v78);
          realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v79);
        }
      }
      MEMORY[0x2455CE8E0](&v80);
    }
    else
    {
      uint64_t v11 = *(id *)realityio::logObjects((realityio *)IsA);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v82, &v55);
        uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = Text;
        _os_log_impl(&dword_23F4EA000, v11, OS_LOG_TYPE_INFO, "Skipping MeshModelDescriptorBuilder on %s", (uint8_t *)&buf, 0xCu);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
      }
    }
  }
  if ((v85 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v84);
  uint64_t result = v83;
  if (v83) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v83);
  }
  return result;
}

void sub_23F6A924C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44)
{
  MEMORY[0x2455CE7A0](&a32);
  a11 = (void **)&a35;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__destroy_vector::operator()[abi:ne180100](&a11);
  a11 = (void **)&a38;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a11);
  realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(&a41);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a42);
  MEMORY[0x2455CE8E0](&a44);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v44 - 240));
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>(uint64_t a1, long long *a2, uint64_t *a3)
{
  char v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  uint64_t v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *uint64_t v7 = &unk_26F33E510;
  uint64_t v9 = *a3;
  char v8 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v7[3] = &unk_26F33E560;
  v7[4] = v9;
  v7[5] = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  int v12 = a2;
  char v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
  uint64_t v11 = (std::__shared_weak_count *)v10[8];
  v10[7] = (uint64_t)(v7 + 3);
  unsigned char v10[8] = (uint64_t)v7;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F6A9790(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::~UsdSkelBlendShapeQuery(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this)
{
  uint64_t v5 = (void **)((char *)this + 80);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 56);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::_BlendShape>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
  }
}

uint64_t realityio::MeshModelDescriptorBuilder::clear(realityio::MeshModelDescriptorBuilder *this, realityio::Inputs *a2)
{
  uint64_t v4 = (std::mutex *)*((void *)this + 2);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (const void **)realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(this);
  realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>(v4, v5, (uint64_t)v18);
  int v6 = v18[0];
  if (v18[0])
  {
    long long v7 = v19;
    if (*((void *)&v19 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
      v13[0] = 1;
      long long v14 = v7;
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
    else
    {
      v13[0] = 1;
      long long v14 = (unint64_t)v19;
    }
  }
  else
  {
    long long v16 = v19;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v17, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    }
    else {
      std::string v17 = v20;
    }
    v13[0] = 0;
    long long v14 = v16;
    std::string v15 = v17;
  }
  char v8 = (realityio::MeshModelDescriptorBuilder *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v18);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v6)
  {
    uint64_t v10 = *((void *)this + 2);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (const void **)realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v8);
    std::mutex::lock((std::mutex *)(v10 + 64));
    if (v10 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v10 + 40, v11))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v10 + 40), v11); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v10, (unsigned __int8 *)v11);
    }
    std::mutex::unlock((std::mutex *)(v10 + 64));
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  return realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F6A9A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)va);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(a1);
}

void realityio::MeshModelDescriptorBuilder::~MeshModelDescriptorBuilder(realityio::MeshModelDescriptorBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t anonymous namespace'::setCompileOptionFromCustomMetadata<BOOL>(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t (*a4)(void, uint64_t))
{
  _DWORD v10[2] = *MEMORY[0x263EF8340];
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomDataKey(this, a1);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomDataByKey(v10, this, a1);
    uint64_t v9 = *(unsigned __int8 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
    return a4(*a2, v9);
  }
  return result;
}

void sub_23F6A9B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::_BlendShape>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = MEMORY[0x2455CF060](v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F343520;
  return result;
}

void std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F343520;
}

char *std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F3435A0;
  return result;
}

void std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3435A0;
}

void std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  unint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName((realityio::MeshModelDescriptorBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 104), &v7, &v8);
  int v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F6A9FAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

__n128 std::allocate_shared[abi:ne180100]<realityio::MeshModelDescriptorBuilder::MeshModelDataT,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDataT>,realityio::WrappedRERef<REMeshCompileOptions *>,pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,void>(void *a1, void *a2, _DWORD *a3, uint64_t a4, __n128 *a5)
{
  uint64_t v10 = (char *)operator new(0x68uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26F33E4C0;
  *((void *)v10 + 3) = *a2;
  *a2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 8, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 9, a3 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_OWORD *)(v10 + 56) = *(_OWORD *)a4;
  *((void *)v10 + 9) = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  __n128 result = *a5;
  *((__n128 *)v10 + 5) = *a5;
  *((void *)v10 + 12) = a5[1].n128_u64[0];
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    uint64_t v11 = std::string::append(&v14, "\" does not exist in the builder outputs");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v16 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v17, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = v17;
    uint64_t v13 = v19;
    *(void *)(a3 + 24) = v18;
    *(void *)(a3 + 32) = v13;
    *(void *)(a3 + 39) = *(void *)((char *)&v19 + 7);
    LOBYTE(v13) = HIBYTE(v19);
    long long v19 = 0uLL;
    uint64_t v18 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v13;
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v7 + 56);
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = v9;
  }
  std::mutex::unlock(v6);
}

void sub_23F6AA25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityBuilder::kInputName(realityio::EntityBuilder *this)
{
  {
    operator new();
  }
  return realityio::EntityBuilder::kInputName(void)::kInputName;
}

void sub_23F6AA30C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityBuilder::kRootEntityInputName(realityio::EntityBuilder *this)
{
  {
    operator new();
  }
  return realityio::EntityBuilder::kRootEntityInputName(void)::kRootEntityInputName;
}

void sub_23F6AA3C4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityBuilder::kPrimPathInputName(realityio::EntityBuilder *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40940, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40940))
  {
    operator new();
  }
  return _MergedGlobals_38;
}

void sub_23F6AA47C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_268C40940);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityBuilder::kOutputName(realityio::EntityBuilder *this)
{
  {
    operator new();
  }
  return realityio::EntityBuilder::kOutputName(void)::kOutputName;
}

void sub_23F6AA534(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityBuilder::kPrimPathOutputName(realityio::EntityBuilder *this)
{
  {
    operator new();
  }
  return realityio::EntityBuilder::kPrimPathOutputName(void)::kPrimPathOutputName;
}

void sub_23F6AA5EC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::EntityBuilder *realityio::EntityBuilder::EntityBuilder(realityio::EntityBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "EntityBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kEntityBuilderIdentifier);
  realityio::generateEntityDirtyStageSubscription(&v5);
  v12[0] = &unk_26F343680;
  void v12[3] = v12;
  v11[0] = &unk_26F343790;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F343620;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_WORD *)this + 144) = 0;
  *((void *)this + 37) = 0;
  return this;
}

void sub_23F6AA788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void realityio::EntityBuilder::EntityBuilder()
{
  v1[12] = *(void **)MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v1, "EntityBuilder");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)realityio::kEntityBuilderIdentifier);
  operator new();
}

void sub_23F6AA9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v31);
  realityio::DynamicBuilder::~DynamicBuilder(v30);
  _Unwind_Resume(a1);
}

void realityio::EntityBuilder::run(realityio::EntityBuilder *this, realityio::Inputs *a2)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  BOOL v99 = a2;
  if (*((unsigned char *)this + 289))
  {
    uint64_t v4 = *((void *)this + 2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (long long *)realityio::EntityBuilder::kOutputName(this);
    realityio::Outputs::storeValue<realityio::WrappedRERef<REEntity *> &>(v4, v5, (uint64_t *)this + 37);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v8 = *((void *)this + 2);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (long long *)realityio::EntityBuilder::kPrimPathOutputName(v6);
    *(void *)&long long v106 = (char *)this + 280;
    realityio::Outputs::storeValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(v8, v9, (uint64_t *)&v106);
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    return;
  }
  char v10 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v95, v11, v10);
  uint64_t IsValid = (realityio *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95);
  if (IsValid)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::IsInPrototype(&v95);
    uint64_t v13 = (uint64_t *)((char *)this + 280);
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::EntityBuilder *)((char *)this + 280));
    if (*(char *)(String + 23) < 0)
    {
      if (!*(void *)(String + 8)) {
        goto LABEL_39;
      }
    }
    else if (!*(unsigned char *)(String + 23))
    {
      goto LABEL_39;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95, &v106);
    uint64_t v16 = *v13;
    uint64_t v17 = v106;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
    uint64_t v18 = *(void *)v99;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95, &v106);
    long long v19 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v18 + 64, &v106);
    BOOL v20 = (void *)(v18 + 72) != v19 && *(void *)(*(void *)(v18 + 40) + 104 * v19[5] + 24) == (void)v106;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v21 = (realityio *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
    if (v20 && v16 == v17)
    {
      std::string v15 = *(id *)(realityio::logObjects(v21) + 24);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = v99;
        uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)v99 + 8));
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v106, v23, (realityio::Inputs *)((char *)v22 + 32));
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v106, __p);
        uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = Text;
        _os_log_impl(&dword_23F4EA000, v15, OS_LOG_TYPE_INFO, "Skipping prim at path (%s) because the entity has already been created.\n", (uint8_t *)&buf, 0xCu);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        if ((v108 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v108 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107);
        if (*((void *)&v106 + 1)) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v106 + 1));
        }
      }
    }
    else
    {
      uint64_t v25 = *(void *)v99;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95, &v106);
      uint64_t v26 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v25 + 64, &v106);
      BOOL v27 = (void *)(v25 + 72) != v26 && *(void *)(*(void *)(v25 + 40) + 104 * v26[5] + 24) == (void)v106;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      uint64_t v28 = (realityio *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
      if (v27 || v16 == v17)
      {
LABEL_39:
        PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v94, PrimPath);
        uint64_t v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v94 + 1, (_DWORD *)PrimPath + 1);
        uint64_t v32 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v31);
        if (v94 == *(void *)v32)
        {
          uint64_t v34 = *((void *)this + 2);
          uint64_t v33 = (std::__shared_weak_count *)*((void *)this + 3);
          if (v33) {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v35 = (const void **)realityio::EntityBuilder::kOutputName(v32);
          *(void *)&long long buf = (*(uint64_t (**)(void))(**(void **)(*((void *)v99 + 5) + 16) + 16))(*(void *)(*((void *)v99 + 5) + 16));
          if ((void)buf) {
            RERetain();
          }
          std::mutex::lock((std::mutex *)(v34 + 64));
          unint64_t v36 = operator new(0x28uLL);
          v36[1] = 0;
          std::string v36[2] = 0;
          void *v36 = &unk_26F343910;
          uint64_t v37 = buf;
          *(void *)&long long v106 = buf;
          *(void *)&long long buf = 0;
          uint64_t v36[3] = &unk_26F343960;
          v36[4] = v37;
          if (v37) {
            RERetain();
          }
          realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v106);
          *(void *)&long long v106 = v35;
          int v38 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v34 + 40), v35, (uint64_t)&std::piecewise_construct, (long long **)&v106);
          uint64_t v39 = (std::__shared_weak_count *)v38[8];
          v38[7] = (uint64_t)(v36 + 3);
          v38[8] = (uint64_t)v36;
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v34, (unsigned __int8 *)v35, (uint64_t)v35);
          std::mutex::unlock((std::mutex *)(v34 + 64));
          uint64_t v40 = (pxrInternal__aapl__pxrReserved__::SdfPath *)realityio::WrappedRERef<REEntity *>::~WrappedRERef(&buf);
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
          uint64_t v41 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v40);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 280, v41);
          char v42 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 284, v41 + 1);
          uint64_t v44 = *((void *)this + 2);
          uint64_t v43 = (std::__shared_weak_count *)*((void *)this + 3);
          if (v43) {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v45 = (long long *)realityio::EntityBuilder::kPrimPathOutputName(v42);
          *(void *)&long long v106 = (char *)this + 280;
          realityio::Outputs::storeValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(v44, v45, (uint64_t *)&v106);
          if (v43) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v43);
          }
          goto LABEL_110;
        }
        uint64_t v46 = *(id *)(realityio::logObjects(v32) + 24);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          uint64_t v47 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v94);
          LODWORD(v106) = 136315138;
          *(void *)((char *)&v106 + 4) = v47;
          _os_log_impl(&dword_23F4EA000, v46, OS_LOG_TYPE_INFO, "Updating entity with path: %s\n", (uint8_t *)&v106, 0xCu);
        }

        unint64_t v48 = v99;
        uint64_t v50 = realityio::EntityBuilder::kInputName(v49);
        realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)v48, v50, (uint64_t)&v106);
        if ((_BYTE)v106)
        {
          uint64_t v51 = (realityio::EntityBuilder *)*((void *)&v106 + 1);
          int v93 = (void *)*((void *)&v106 + 1);
          if (*((void *)&v106 + 1))
          {
            uint64_t v52 = (realityio *)RERetain();
            goto LABEL_68;
          }
        }
        else
        {
          int v93 = 0;
        }
        uint64_t v53 = v99;
        uint64_t v54 = realityio::EntityBuilder::kRootEntityInputName(v51);
        realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)v53, v54, (uint64_t)&buf);
        if ((_BYTE)buf)
        {
          __p[0] = *((void **)&buf + 1);
          if (*((void *)&buf + 1))
          {
            RERetain();
            long long v55 = __p[0];
          }
          else
          {
            long long v55 = 0;
          }
        }
        else
        {
          long long v55 = 0;
          __p[0] = 0;
        }
        uint64_t v57 = v93;
        if (v93 != v55)
        {
          int v93 = v55;
          __p[0] = v57;
        }
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(__p);
        uint64_t v52 = (realityio *)realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&buf);
        if (!v93)
        {
          int v62 = *(id *)(realityio::logObjects(v52) + 24);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            uint64_t v86 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v94);
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v86;
            _os_log_error_impl(&dword_23F4EA000, v62, OS_LOG_TYPE_ERROR, "Unable to create entity at path (%s) because an ancestor entity does not exist.\n", (uint8_t *)&buf, 0xCu);
          }

          realityio::EntityBuilder::_clearEntity(this, v99);
          goto LABEL_109;
        }
LABEL_68:
        uint64_t v58 = v99;
        uint64_t v59 = realityio::EntityBuilder::kPrimPathInputName(v52);
        realityio::Inputs::_getValue<pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)v58, v59, (uint64_t)&buf);
        if ((_BYTE)buf)
        {
          uint64_t v60 = *((void *)&buf + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v91, *((_DWORD **)&buf + 1));
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v92, (_DWORD *)(v60 + 4));
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "/");
          MEMORY[0x2455CF7A0](&v91, __p);
          if (v101 < 0) {
            operator delete(__p[0]);
          }
        }
        char v90 = 0;
        uint64_t IsPrototype = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v95, v61);
        char v63 = pxrInternal__aapl__pxrReserved__::UsdPrim::IsInPrototype(&v95);
        uint64_t v64 = *(void *)v99;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95, __p);
        size_t v65 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v64 + 64, __p);
        BOOL v66 = (void *)(v64 + 72) != v65 && *(void **)(*(void *)(v64 + 40) + 104 * v65[5] + 24) == __p[0];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        if ((_BYTE)IsPrototype) {
          char v67 = 1;
        }
        else {
          char v67 = v66;
        }
        if (v67)
        {
          char v68 = v63 ^ 1;
          if ((_BYTE)IsPrototype) {
            char v68 = 0;
          }
          char v88 = v68;
          uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t EmptyString = (*(void *)Name & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          if (*(char *)(EmptyString + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
          }
          else
          {
            long long v79 = *(_OWORD *)EmptyString;
            v87.__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
            *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v79;
          }
          unint64_t v80 = atomic_load(MEMORY[0x263F90528]);
          if (!v80) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
          }
          if (!atomic_load(&realityio::tokens::EntityBuilderTokens)) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          uint64_t v82 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v95, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v80 + 72));
          if (v82)
          {
            uint64_t v83 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v82);
            std::string::operator=(&v87, v83);
          }
          uint64_t v84 = *((void *)v99 + 6);
          uint64_t v85 = operator new(0x50uLL);
          *uint64_t v85 = &unk_26F343A10;
          v85[1] = (char *)&IsPrototype + 1;
          v85[2] = &IsPrototype;
          v85[3] = &v99;
          v85[4] = &v93;
          v85[5] = this;
          v85[6] = &v87;
          v85[7] = &v95;
          v85[8] = &v94;
          v85[9] = &v88;
          size_t v102 = v85;
          (*(void (**)(uint64_t, void **))(*(void *)v84 + 16))(v84, __p);
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](__p);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v87.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          if (*v13 == v94) {
            realityio::EntityBuilder::_clearEntity(this, v99);
          }
          realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)((char *)&IsPrototype + 1), (uint64_t *)&v93);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 280, &v91);
          uint64_t v71 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 284, &v92);
          *((unsigned char *)this + 288) = 0;
          uint64_t v73 = *((void *)this + 2);
          int64x2_t v72 = (std::__shared_weak_count *)*((void *)this + 3);
          if (v72) {
            atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v74 = (long long *)realityio::EntityBuilder::kOutputName(v71);
          realityio::Outputs::storeValue<realityio::WrappedRERef<REEntity *> &>(v73, v74, (uint64_t *)((char *)&IsPrototype + 1));
          if (v72) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v72);
          }
          uint64_t v77 = *((void *)this + 2);
          uint64_t v76 = (std::__shared_weak_count *)*((void *)this + 3);
          if (v76) {
            atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v78 = (long long *)realityio::EntityBuilder::kPrimPathOutputName(v75);
          __p[0] = (char *)this + 280;
          realityio::Outputs::storeValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(v77, v78, (uint64_t *)__p);
          if (v76) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v76);
          }
        }
        realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)((char *)&IsPrototype + 1));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v91);
        if (!(_BYTE)buf && v105 < 0) {
          operator delete(v104);
        }
LABEL_109:
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v93);
        realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v106);
LABEL_110:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94);
        goto LABEL_111;
      }
      std::string v15 = *(id *)(realityio::logObjects(v28) + 24);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        realityio::Inputs::prim(v99, (uint64_t *)&v106);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v106, __p);
        uint64_t v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v29;
        _os_log_impl(&dword_23F4EA000, v15, OS_LOG_TYPE_INFO, "Skipping prim at path (%s) because the ancestor entity has already being returned.\n", (uint8_t *)&buf, 0xCu);
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
        pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v106);
      }
    }
  }
  else
  {
    std::string v15 = *(id *)(realityio::logObjects(IsValid) + 24);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95, &buf);
      uint64_t v56 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&buf);
      LODWORD(v106) = 136315138;
      *(void *)((char *)&v106 + 4) = v56;
      _os_log_error_impl(&dword_23F4EA000, v15, OS_LOG_TYPE_ERROR, "Skipping prim at path (%s) because the prim is invalid.\n", (uint8_t *)&v106, 0xCu);
      pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&buf);
    }
  }

LABEL_111:
  if ((v98 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v97);
  if (v96) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v96);
  }
}

void sub_23F6AB630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,uint64_t a25,__int16 a26,char a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a25);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result(v53 - 144);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a26);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a30);
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<realityio::WrappedRERef<REEntity *> &>(uint64_t a1, long long *a2, uint64_t *a3)
{
  int v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  std::allocate_shared[abi:ne180100]<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>,std::allocator<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>,realityio::WrappedRERef<REEntity *>&,void>(a3, &v10);
  uint64_t v11 = a2;
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  long long v8 = v10;
  long long v10 = 0uLL;
  uint64_t v9 = (std::__shared_weak_count *)v7[8];
  *(_OWORD *)(v7 + 7) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (*((void *)&v10 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F6AB998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(uint64_t a1, long long *a2, uint64_t *a3)
{
  int v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  uint64_t v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *uint64_t v7 = &unk_26F343990;
  uint64_t v8 = *a3;
  v7[3] = &unk_26F3439E0;
  v7[4] = v8;
  uint64_t v11 = a2;
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  long long v10 = (std::__shared_weak_count *)v9[8];
  v9[7] = (uint64_t)(v7 + 3);
  unsigned char v9[8] = (uint64_t)v7;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F6ABAAC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsInPrototype(pxrInternal__aapl__pxrReserved__ **this)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this);
    JUMPOUT(0x2455CF850);
  }
  uint64_t v3 = this[1];
  if (!v3 || (unint64_t v4 = *((void *)v3 + 7), (v4 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v3, v2);
    unint64_t v4 = *((void *)v3 + 7);
  }
  return (v4 >> 12) & 1;
}

void *realityio::EntityBuilder::_clearEntity(realityio::EntityBuilder *this, realityio::Inputs *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v6 = (std::mutex *)*((void *)this + 2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (const void **)realityio::EntityBuilder::kOutputName(this);
  uint64_t v8 = (realityio::EntityBuilder *)realityio::Outputs::getValue<realityio::WrappedRERef<REEntity *>>(v6, v7, &v27);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (!v27.__r_.__value_.__s.__data_[0]) {
    goto LABEL_13;
  }
  uint64_t v10 = *((void *)this + 2);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (const void **)realityio::EntityBuilder::kOutputName(v8);
  std::mutex::lock((std::mutex *)(v10 + 64));
  if (v10 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v10 + 40, v11))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v10 + 40), v11); {
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v10, (unsigned __int8 *)v11);
  }
  std::mutex::unlock((std::mutex *)(v10 + 64));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*((void *)a2 + 4) != *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12))
  {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
    if (v27.__r_.__value_.__l.__size_) {
      RERetain();
    }
  }
  else
  {
LABEL_13:
    std::string::size_type size = 0;
  }
  uint64_t v13 = (realityio::EntityBuilder *)realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v27);
  if (size && *((unsigned char *)this + 288))
  {
    uint64_t v14 = *((void *)a2 + 6);
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26F343A90;
    v27.__r_.__value_.__l.__size_ = (std::string::size_type)&size;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
    (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 16))(v14, &v27);
    uint64_t v13 = (realityio::EntityBuilder *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v27);
  }
  std::string v15 = (std::mutex *)*((void *)this + 2);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (const void **)realityio::EntityBuilder::kPrimPathOutputName(v13);
  realityio::Outputs::getRawValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(v15, v17, (uint64_t)&v27);
  int v19 = v27.__r_.__value_.__s.__data_[0];
  if (!v27.__r_.__value_.__s.__data_[0])
  {
    long long v25 = *(_OWORD *)&v27.__r_.__value_.__r.__words[1];
    uint64_t v18 = (realityio::EntityBuilder *)&v26;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      std::string v15 = (std::mutex *)v26.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      if (!v27.__r_.__value_.__s.__data_[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v26 = __p;
      std::string v15 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v19)
  {
    uint64_t v21 = *((void *)this + 2);
    BOOL v20 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (const void **)realityio::EntityBuilder::kPrimPathOutputName(v18);
    std::mutex::lock((std::mutex *)(v21 + 64));
    if (v21 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v21 + 40, v22))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v21 + 40), v22); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v21, (unsigned __int8 *)v22);
    }
    std::mutex::unlock((std::mutex *)(v21 + 64));
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  v27.__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 280, (int *)&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 284);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  *((unsigned char *)this + 288) = 0;
  if (!v19 && v2 < 0) {
    operator delete(v15);
  }
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef(&size);
}

void sub_23F6ABE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (!a16 && a24 < 0) {
    operator delete(__p);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a10);
  _Unwind_Resume(a1);
}

void sub_23F6ABF3C()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x23F6ABF34);
}

uint64_t realityio::EntityBuilder::clear(realityio::EntityBuilder *this, realityio::Inputs *a2)
{
  uint64_t result = (uint64_t)realityio::EntityBuilder::_clearEntity(this, a2);
  if (*((unsigned char *)this + 289))
  {
    uint64_t result = *((void *)this + 37);
    if (result) {
      uint64_t result = RERelease();
    }
    *((void *)this + 37) = 0;
  }
  return result;
}

void realityio::EntityBuilder::~EntityBuilder(realityio::EntityBuilder *this)
{
  realityio::EntityBuilder::~EntityBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26F343620;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)this + 37);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 280);
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  char v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v4 = *((void *)this + 23);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F343680;
  return result;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F343680;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(void *a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unint64_t v4 = &unk_26F32FA40;
  *(_OWORD *)(v4 + 24) = 0u;
  uint64_t v5 = (uint64_t)(v4 + 24);
  *(_OWORD *)(v4 + 40) = 0u;
  *((_DWORD *)v4 + 14) = 1065353216;
  int v6 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
  if (*a1 == *(void *)v6)
  {
    *a2 = v5;
    a2[1] = (uint64_t)v4;
  }
  else
  {
    uint64_t v7 = realityio::EntityBuilder::kInputName(v6);
    unint64_t v8 = atomic_load(&realityio::tokens::OutputIdentifiers);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
    }
    LODWORD(vrealityio::TextureBuilder::setOutput(*((uint64_t **)this + 21), *((_anonymous_namespace_ **)this + 18), (void *)this + 23) = 0;
    uint64_t v9 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    realityio::InputsDescriptor::addInputDescriptor(v5, &v25);
    uint64_t v10 = (realityio::EntityBuilder *)v26;
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    uint64_t v11 = realityio::EntityBuilder::kPrimPathInputName(v10);
    unint64_t v12 = atomic_load(&realityio::tokens::OutputIdentifiers);
    if (!v12) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
    }
    LODWORD(v21) = 1;
    uint64_t v13 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    realityio::InputsDescriptor::addInputDescriptor(v5, &v23);
    uint64_t v14 = (realityio::EntityBuilder *)v24;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    std::string v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)realityio::EntityBuilder::kRootEntityInputName(v14);
    uint64_t v16 = (uint64_t)v15;
    unint64_t v17 = atomic_load(&realityio::tokens::OutputIdentifiers);
    if (!v17) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
    }
    uint64_t v18 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v15);
    int v20 = 0;
    std::allocate_shared[abi:ne180100]<realityio::StaticPrimInputDescriptor,std::allocator<realityio::StaticPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality,void>(v16, (uint64_t *)(v17 + 64), v18, &v20, &v21);
    int v19 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    realityio::InputsDescriptor::addInputDescriptor(v5, &v21);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    *a2 = v5;
    a2[1] = (uint64_t)v4;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_23F6AC334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::make_shared[abi:ne180100]<anonymous namespace'::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(void *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  unint64_t v8 = operator new(0x48uLL);
  v8[1] = 0;
  void v8[2] = 0;
  *unint64_t v8 = &unk_26F3436F0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v9 = *a4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v12 = __p;
  }
  uint64_t v10 = v8 + 3;
  realityio::InputDescriptor::InputDescriptor((uint64_t)(v8 + 3), (long long *)&v12, a3, v9);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  void *v10 = &unk_26F343740;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = v10;
  a1[1] = v8;
}

void sub_23F6AC528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3436F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3436F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor::~ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor(_anonymous_namespace_::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

void *anonymous namespace'::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor::resolvedPrimPaths@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X2>, const realityio::internal::PrimToEntityMap *a2@<X3>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  unint64_t v8 = (char *)a2 + 48;
  uint64_t result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2 + 48, a1);
  if ((void *)((char *)a2 + 56) != result)
  {
    uint64_t v10 = *((void *)a2 + 3);
    if (v10)
    {
      uint64_t v11 = v10 + 104 * result[5];
      uint64_t v13 = *(void *)(v11 + 24);
      std::string v12 = (void *)(v11 + 24);
      if (v13 == *(void *)a1)
      {
        uint64_t result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v8, v12);
        if ((void *)((char *)a2 + 56) != result)
        {
          unint64_t v14 = result[5];
          if (v14 < (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3)
          {
            unint64_t v15 = *(void *)(*(void *)a2 + 8 * v14);
            if (v15 != -1)
            {
              uint64_t v16 = *((void *)a2 + 3);
              unint64_t v17 = 0x4EC4EC4EC4EC4EC5 * ((*((void *)a2 + 4) - v16) >> 3);
              uint64_t v18 = v16 + 104 * v15;
              if (v17 <= v15) {
                uint64_t v19 = 0;
              }
              else {
                uint64_t v19 = v18;
              }
              return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, (unsigned int *)(v19 + 24), (_DWORD *)(v19 + 24));
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_23F6AC740(_Unwind_Exception *a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F343790;
  return result;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F343790;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kOutputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v12) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 64), (int *)&v12, &v14);
  int v6 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v14);
  uint64_t v7 = (realityio::EntityBuilder *)v15;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v8 = realityio::EntityBuilder::kPrimPathOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v11 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v8, (std::string::size_type *)(v9 + 160), &v11, &v12);
  uint64_t v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F6AC95C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F343810;
  return result;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F343810;
}

char *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  char v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F343890;
  return result;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F343890;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kOutputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v12) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 64), (int *)&v12, &v14);
  int v6 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v14);
  uint64_t v7 = (realityio::EntityBuilder *)v15;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v8 = realityio::EntityBuilder::kPrimPathOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v11 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v8, (std::string::size_type *)(v9 + 160), &v11, &v12);
  uint64_t v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F6ACD30(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>,std::allocator<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>,realityio::WrappedRERef<REEntity *>&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x28uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::__shared_ptr_emplace[abi:ne180100]<realityio::WrappedRERef<REEntity *>&,std::allocator<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_23F6ACE24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::__shared_ptr_emplace[abi:ne180100]<realityio::WrappedRERef<REEntity *>&,std::allocator<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F343910;
  std::allocator<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::construct[abi:ne180100]<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>,realityio::WrappedRERef<REEntity *>&>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_23F6ACE94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F343910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F343910;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26F343960;
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 32));
}

void *std::allocator<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::construct[abi:ne180100]<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>,realityio::WrappedRERef<REEntity *>&>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v6 = v4;
  if (v4)
  {
    RERetain();
    *a2 = &unk_26F343960;
    a2[1] = v4;
    RERetain();
  }
  else
  {
    *a2 = &unk_26F343960;
    a2[1] = 0;
  }
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v6);
}

void sub_23F6ACFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<pxrInternal__aapl__pxrReserved__::SdfPath *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F343990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<pxrInternal__aapl__pxrReserved__::SdfPath *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F343990;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<pxrInternal__aapl__pxrReserved__::SdfPath *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void realityio::Inputs::_getValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (v8)
  {
    uint64_t v47 = std::__shared_weak_count::lock(v8);
    if (v47) {
      uint64_t v46 = *(void *)(a1 + 16);
    }
  }
  MEMORY[0x2455CF830](&v48, a2);
  unint64_t v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(a1 + 8), &v46);
  if (v9 == v10)
  {
    std::operator+<char>();
    uint64_t v22 = std::string::append(&v43, ") at prim path (");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    int v25 = *(char *)(String + 23);
    if (v25 >= 0) {
      std::string v26 = (const std::string::value_type *)String;
    }
    else {
      std::string v26 = *(const std::string::value_type **)String;
    }
    if (v25 >= 0) {
      std::string::size_type v27 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v27 = *(void *)(String + 8);
    }
    uint64_t v28 = std::string::append(&v44, v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v45, ")");
LABEL_22:
    long long v30 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v30;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v51, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v51;
    uint64_t v31 = *(void *)&v51[24];
    *(void *)(a3 + 24) = *(void *)&v51[16];
    *(void *)(a3 + 32) = v31;
    *(void *)(a3 + 39) = *(void *)&v51[31];
    LOBYTE(v31) = v51[39];
    memset(&v51[16], 0, 24);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v31;
    if (v50.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v32 = (std::mutex *)v43.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v32);
      goto LABEL_54;
    }
    goto LABEL_54;
  }
  uint64_t v11 = 1;
  std::string::size_type v12 = v9;
  do
  {
    std::string::size_type v12 = (void *)*v12;
    --v11;
  }
  while (v12 != v10);
  if (v11)
  {
    std::operator+<char>();
    uint64_t v13 = std::string::append(&v43, ") at prim path (");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    uint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    int v16 = *(char *)(v15 + 23);
    if (v16 >= 0) {
      unint64_t v17 = (const std::string::value_type *)v15;
    }
    else {
      unint64_t v17 = *(const std::string::value_type **)v15;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(v15 + 8);
    }
    uint64_t v19 = std::string::append(&v44, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v45, ") because more than one connected builder produced the same output type");
    goto LABEL_22;
  }
  uint64_t v33 = v9[5];
  unint64_t v35 = *(std::mutex **)(v33 + 16);
  uint64_t v34 = *(std::__shared_weak_count **)(v33 + 24);
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (const void **)((v9[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  }
  realityio::Outputs::getRawValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(v35, EmptyString, (uint64_t)v51);
  int v38 = v51[0];
  if (v51[0])
  {
    *(void *)&long long v37 = *(void *)&v51[8];
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&v51[8];
    if ((v51[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)&v51[24], *(std::string::size_type *)&v51[32]);
      if (v51[0]) {
        BOOL v40 = 0;
      }
      else {
        BOOL v40 = v51[47] < 0;
      }
      int v39 = v40;
    }
    else
    {
      int v39 = 0;
      std::string v50 = *(std::string *)&v51[24];
    }
    long long v37 = *(_OWORD *)__p;
    std::string::size_type size = v50.__r_.__value_.__l.__size_;
    unint64_t v35 = (std::mutex *)v50.__r_.__value_.__r.__words[0];
    LODWORD(v45.__r_.__value_.__l.__data_) = v50.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v45.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v50.__r_.__value_.__r.__words[2] + 3);
    char v4 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    if (v39)
    {
      long long v41 = *(_OWORD *)__p;
      operator delete(*(void **)&v51[24]);
      long long v37 = v41;
    }
  }
  if (v34)
  {
    long long v42 = v37;
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    long long v37 = v42;
  }
  if (v38)
  {
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v37;
  }
  else
  {
    *(_OWORD *)uint64_t v51 = v37;
    if (v4 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v51[16], (const std::string::value_type *)v35, size);
      *(unsigned char *)a3 = 0;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)v51;
      *(_OWORD *)(a3 + 24) = *(_OWORD *)&v51[16];
      *(void *)(a3 + 40) = *(void *)&v51[32];
      uint64_t v32 = v35;
      goto LABEL_30;
    }
    *(void *)&v51[16] = v35;
    *(void *)&unsigned char v51[24] = size;
    *(_DWORD *)&v51[32] = v45.__r_.__value_.__l.__data_;
    *(_DWORD *)&v51[35] = *(_DWORD *)((char *)v45.__r_.__value_.__r.__words + 3);
    v51[39] = v4;
    *(unsigned char *)a3 = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v51;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v51[16];
    *(void *)(a3 + 40) = *(void *)&v51[32];
  }
LABEL_54:
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
}

void sub_23F6AD46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33)
{
  operator delete(v33);
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::EntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::EntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x50uLL);
  *(void *)char v2 = &unk_26F343A10;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::EntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F343A10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<realityio::EntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = REEntityCreate();
  RENetworkComponentGetComponentType();
  *(void *)&long long buf = &unk_26F33C750;
  p_long long buf = &buf;
  uint64_t v4 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)&buf, v4);
  RENetworkMarkComponentDirty();
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](&buf);
  uint64_t v26 = v3;
  realityio::WrappedRERef<REAsset *>::operator=(*(void **)(a1 + 8), &v26);
  RERelease();
  if (**(unsigned char **)(a1 + 16)) {
    realityio::ImportSessionImpl::getPrototypeEntityRoot(*(realityio::ImportSessionImpl **)(*(void *)(**(void **)(a1 + 24) + 40)
  }
                                                                                          + 16));
  REEntitySetParent();
  *(unsigned char *)(v2 + 288) = 1;
  REEntitySetName();
  if (REComponentClassFromName())
  {
    uint64_t v5 = REEntityGetOrAddComponentByClass();
    realityio::Builder::addComponent((uint64_t *)v2, v5);
    Object = (void *)RECustomComponentGetObject();
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 56), &buf);
    uint64_t Text = (const char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&buf);
    if (*Object)
    {
      RECIntrospectionFree();
      void *Object = 0;
    }
    if (Text)
    {
      strlen(Text);
      uint64_t v8 = (char *)RECIntrospectionAlloc();
      void *Object = v8;
      strcpy(v8, Text);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 56), &buf);
  uint64_t v9 = v2 + 280;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v2 + 280, (int *)&buf);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v2 + 284);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v10 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf);
  uint64_t v12 = *(void *)(v2 + 16);
  uint64_t v11 = *(std::__shared_weak_count **)(v2 + 24);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (long long *)realityio::EntityBuilder::kOutputName(v10);
  realityio::Outputs::storeValue<realityio::WrappedRERef<REEntity *> &>(v12, v13, *(uint64_t **)(a1 + 8));
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v16 = *(void *)(v2 + 16);
  uint64_t v15 = *(std::__shared_weak_count **)(v2 + 24);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v17 = (long long *)realityio::EntityBuilder::kPrimPathOutputName(v14);
  *(void *)&long long buf = v9;
  realityio::Outputs::storeValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(v16, v17, (uint64_t *)&buf);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v19 = *(id *)(realityio::logObjects(v18) + 24);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    uint64_t v20 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 64));
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v20;
    _os_log_impl(&dword_23F4EA000, v19, OS_LOG_TYPE_INFO, "Created and parented new entity for prim path: %s\n", (uint8_t *)&buf, 0xCu);
  }

  if (**(unsigned char **)(a1 + 72))
  {
    MEMORY[0x2455CD140](**(void **)(a1 + 8), 0);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(void *)&long long buf = MEMORY[0x263F90728] + 16;
    realityio::LiveSceneManager::enableEntityOnCompletion(*(void *)(*(void *)(*(void *)(**(void **)(a1 + 24) + 40) + 16) + 40), *(uint64_t **)(a1 + 8));
    if (*((void *)&buf + 1)
      && (*(unsigned char *)(*((void *)&buf + 1) + 57) & 8) == 0
      && (*(unsigned int (**)(long long *))(buf + 32))(&buf))
    {
      uint64_t v25 = 0x7FF8000000000000;
      pxrInternal__aapl__pxrReserved__::UsdGeomImageable::ComputeVisibility(&v26, (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&buf, (const pxrInternal__aapl__pxrReserved__::UsdTimeCode *)&v25);
      MEMORY[0x2455CF810](&v24, "invisible");
      uint64_t v21 = v26;
      uint64_t v22 = (atomic_uint *)(v24 & 0xFFFFFFFFFFFFFFF8);
      if ((v24 & 7) != 0) {
        atomic_fetch_add_explicit(v22, 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFF8;
      if ((v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)v23 == v22)
      {
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RERenderOptionsComponentSetVisibilityMode();
      }
    }
    MEMORY[0x2455CEED0](&buf);
  }
}

void sub_23F6ADA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if ((a5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CEED0](va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::EntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F343A90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F343A90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0>,void ()(void)>::operator()()
{
  return REEntitySetParent();
}

uint64_t std::__function::__func<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::Outputs::getRawValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23F6ADD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void realityio::tokens::MeshBuilderTokens_StaticTokenType::~MeshBuilderTokens_StaticTokenType(realityio::tokens::MeshBuilderTokens_StaticTokenType *this)
{
  long long v17 = (void **)((char *)this + 128);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v17);
  uint64_t v2 = *((void *)this + 15);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 14);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 13);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 12);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 11);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 10);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 9);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 8);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 7);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 6);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 5);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 4);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 3);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 2);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 1);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::MeshBuilderTokens_StaticTokenType *realityio::tokens::MeshBuilderTokens_StaticTokenType::MeshBuilderTokens_StaticTokenType(realityio::tokens::MeshBuilderTokens_StaticTokenType *this)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v24 = (uint64_t *)(MEMORY[0x2455CF820](this, "displayColor", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 56, "UsdPrimvarReader_float2", 0);
  MEMORY[0x2455CF820]((char *)this + 64, "varname", 0);
  MEMORY[0x2455CF820]((char *)this + 72, "mtlx", 0);
  MEMORY[0x2455CF820]((char *)this + 80, "geomprop", 0);
  MEMORY[0x2455CF820]((char *)this + 88, "xformOp", 0);
  MEMORY[0x2455CF820]((char *)this + 96, "xformOpOrder", 0);
  MEMORY[0x2455CF820]((char *)this + 104, "material:binding", 0);
  MEMORY[0x2455CF820]((char *)this + 112, "importAllMeshAttributes", 0);
  MEMORY[0x2455CF820]((char *)this + 120, "index", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v25 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v24;
  uint64_t v26 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v27 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v28 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v29 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v30 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v31 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v32 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v33 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v34 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v35 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v36 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v37 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v37 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v38 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v39 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v40 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  std::string::size_type v18 = (char *)operator new(0x80uLL);
  uint64_t v19 = 0;
  *((void *)this + 16) = v18;
  *((void *)this + 17) = v18;
  *((void *)this + 18) = v18 + 128;
  do
  {
    uint64_t v20 = *(uint64_t *)((char *)&v25 + v19);
    *(void *)&v18[v19] = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v18[v19] &= 0xFFFFFFFFFFFFFFF8;
    }
    v19 += 8;
  }
  while (v19 != 128);
  *((void *)this + 17) = v18 + 128;
  for (uint64_t i = 120; i != -8; i -= 8)
  {
    uint64_t v22 = *(uint64_t *)((char *)&v25 + i);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F6AE494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void **a17, uint64_t a18, char a19)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a17);
  uint64_t v29 = 120;
  while (1)
  {
    uint64_t v30 = *(void *)(&a19 + v29);
    if ((v30 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v29 -= 8;
    if (v29 == -8)
    {
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F6AE6AC()
{
}

void sub_23F6AE6B4()
{
}

void sub_23F6AE6BC()
{
}

void sub_23F6AE6C4()
{
}

void sub_23F6AE6CC()
{
}

void sub_23F6AE6D4()
{
}

void sub_23F6AE6DC()
{
}

uint64_t realityio::materialBindingCallback@<X0>(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdStage *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v47, this, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v45[1] = 0;
  v45[2] = 0;
  char v46 = 0;
  uint64_t v6 = v48;
  if (!v48) {
    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(v48 + 40) & 7;
  unint64_t v8 = *(void *)(v48 + 40) & 0xFFFFFFFFFFFFFFF8;
  if (v8) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    goto LABEL_21;
  }
  if (!v7 || v8 == 0)
  {
LABEL_20:
    unint64_t v8 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v11 = *(void *)(v8 + 40);
      unint64_t v8 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 7) == 0 && v8 != 0) {
        break;
      }
      if (v8) {
        BOOL v13 = (v11 & 7) == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13) {
        goto LABEL_20;
      }
    }
  }
LABEL_21:
  UsdPrimDefaultPredicate = (void *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v5);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::_Init((uint64_t)v43, v6, v8, &v49, UsdPrimDefaultPredicate);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)v43, (uint64_t)v38);
  while (1)
  {
    uint64_t v34 = v44;
    uint64_t v35 = v43;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    LODWORD(v37) = 0;
    WORD2(v37) = 0;
    if ((unsigned char *)v38[1] == v35 && v38[0] == v34)
    {
      BOOL v15 = 1;
      if (v39 == v36 && !v40 && !v41) {
        BOOL v15 = v42 != 0;
      }
    }
    else
    {
      BOOL v15 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
    if (!v15) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)v38, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v34);
    char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v34);
    if ((v37 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
    if (v35) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v35);
    }
    if (IsValid)
    {
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)v38, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v34);
      pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(v17);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
      {
        int IsA = 1;
      }
      else
      {
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)v38, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v30);
        pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v19);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        int IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
        if ((v33 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
        if (v31) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
        }
      }
      if ((v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
      if (v35) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v35);
      }
      if (IsA)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v38, (uint64_t)&v30);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        uint64_t v37 = 0;
        uint64_t v34 = MEMORY[0x263F907A0] + 16;
        if ((v33 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
        if (v31) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
        }
        uint64_t v20 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v34, v20, 0);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v30, &v28, &v29);
        int v21 = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v30);
        if ((v33 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
        if (v31) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
        }
        if (v21)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v27, &v30);
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, &v30, &v30);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
        }
        MEMORY[0x2455CEF40](v27);
        MEMORY[0x2455CF4B0](&v34);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v38, (uint64_t)&v34);
      if (v34 == v47
        && v35 == (unsigned char *)v48
        && v36 == v49
        && (uint64_t v22 = v37, (v37 & 0xFFFFFFFFFFFFFFF8) == (v50 & 0xFFFFFFFFFFFFFFF8)))
      {
        int IsEntityProviding = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v38, (uint64_t)&v30);
        int IsEntityProviding = realityio::calculateIsEntityProviding((realityio *)&v30, v23);
        if ((v33 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
        if (v31) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
        }
        uint64_t v22 = v37;
      }
      if ((v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
      if (v35) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v35);
      }
      if (IsEntityProviding) {
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v38);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v38);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v45);
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
  uint64_t result = v48;
  if (v48) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
  }
  return result;
}

void sub_23F6AEC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, pxrInternal__aapl__pxrReserved__::SdfPath *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&a31);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v31 - 120));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(a15);
  _Unwind_Resume(a1);
}

void realityio::generateMeshDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40958, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40958))
  {
    operator new();
  }
  uint64_t v3 = unk_268C40950;
  *a1 = _MergedGlobals_39;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F6AF364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char *a48)
{
  MEMORY[0x2455D2BD0](v50, 0x10A1C40F82F910ELL);
  a48 = &a37;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  MEMORY[0x2455D2BD0](v49, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v48, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40958);
  _Unwind_Resume(a1);
}

void realityio::generateMeshAssetBuilderDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40970, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40970))
  {
    operator new();
  }
  uint64_t v3 = *(void *)algn_268C40968;
  *a1 = qword_268C40960;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F6AFA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  int v29 = *(std::__shared_weak_count **)(v27 - 88);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  a26 = (void **)&a13;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a26);
  uint64_t v30 = 24;
  while (1)
  {
    uint64_t v31 = *(std::__shared_weak_count **)(v27 - 128 + v30);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    v30 -= 16;
    if (v30 == -8)
    {
      if (a10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a10);
      }
      if (a12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a12);
      }
      *(void *)(v27 - 128) = &a16;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 128));
      MEMORY[0x2455D2BD0](v26, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_268C40970);
      _Unwind_Resume(a1);
    }
  }
}

realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor(realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *this)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor((uint64_t)this, v4, v3);
  uint64_t v5 = v3;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  v3[0] = (void **)v4;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v3);
  *(void *)this = &unk_26F343B28;
  return this;
}

void sub_23F6AFCB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v3 - 40) = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::~MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor(realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *this)
{
  *(void *)this = &unk_26F33EE30;
  uint64_t v1 = (void **)((char *)this + 8);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_26F33EE30;
  uint64_t v2 = (void **)((char *)this + 8);
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2455D2BD0](this, 0x10A1C402FEF67C7);
}

uint64_t realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v48[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v48, a7);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v47, a8);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v46, a9);
  LOBYTE(a6) = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, a2, a3, a4, a5, a6, (uint64_t)v48, (uint64_t)v47, (uint64_t)v46);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v46);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v47);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v48);
  if (a6) {
    return 1;
  }
  std::string::size_type v18 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a5 + 48, a2);
  if ((void *)(a5 + 56) != v18)
  {
    uint64_t v19 = *(void *)(a5 + 24);
    if (v19)
    {
      uint64_t v20 = v19 + 104 * v18[5];
      int v21 = *(void **)(v20 + 56);
      uint64_t v31 = (void *)(v20 + 64);
      if (v21 != (void *)(v20 + 64))
      {
        while (1)
        {
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v36, a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 28));
          unint64_t v23 = v37;
          if (!v37 || (*((unsigned char *)v37 + 57) & 8) != 0) {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v37, v22);
          }
          uint64_t v24 = *((void *)v23 + 3);
          std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v45, a7);
          std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v44, a8);
          std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v43, a9);
          LOBYTE(v24) = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 28), a3, a4, a5, v24, (uint64_t)v45, (uint64_t)v44, (uint64_t)v43);
          std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v43);
          std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v44);
          std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v45);
          if (v24) {
            break;
          }
          if (a3)
          {
            pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v32, a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 28));
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v32))
            {
              uint64_t v26 = v33;
              if (!v33 || (*((unsigned char *)v33 + 57) & 8) != 0) {
                pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v33, v25);
              }
              uint64_t v27 = *((void *)v26 + 3);
              std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v42, a7);
              std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v41, a8);
              std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v40, a9);
              LOBYTE(v27) = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 28), a3, a4, a5, v27, (uint64_t)v42, (uint64_t)v41, (uint64_t)v40);
              std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v40);
              std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v41);
              std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v42);
              if (v27)
              {
                if ((v35 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
                if (v33) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v33);
                }
                break;
              }
            }
            if ((v35 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
            if (v33) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v33);
            }
          }
          if ((v39 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
          if (v37) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v37);
          }
          uint64_t v28 = (void *)v21[1];
          if (v28)
          {
            do
            {
              int v29 = v28;
              uint64_t v28 = (void *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              int v29 = (void *)v21[2];
              BOOL v30 = *v29 == (void)v21;
              int v21 = v29;
            }
            while (!v30);
          }
          int v21 = v29;
          if (v29 == v31) {
            return 0;
          }
        }
        if ((v39 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
        if (v37) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v37);
        }
        return 1;
      }
    }
  }
  return 0;
}

void sub_23F6B018C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::description@<X0>(CFStringRef *a1@<X8>)
{
  *a1 = 0;
  CFStringRef result = CFStringCreateWithCString(0, "MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor", 0x8000100u);
  *a1 = result;
  return result;
}

void sub_23F6B02A8(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor(realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  operator new();
}

void sub_23F6B0590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  MEMORY[0x2455D2BD0](v31, 0x10E1C40C8742A8BLL);
  uint64_t v33 = (void ***)&a31;
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  while (1)
  {
    uint64_t v34 = (std::__shared_weak_count *)*(v33 - 1);
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    v33 -= 2;
    if (v33 == &a25)
    {
      a25 = (void **)&a20;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a25);
      _Unwind_Resume(a1);
    }
  }
}

void realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::~PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor(realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *this)
{
  *(void *)this = &unk_26F33EE30;
  uint64_t v1 = (void **)((char *)this + 8);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_26F33EE30;
  uint64_t v2 = (void **)((char *)this + 8);
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2455D2BD0](this, 0x10A1C402FEF67C7);
}

uint64_t realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v49[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v49, a7);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v48, a8);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v47, a9);
  LOBYTE(a6) = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, a2, a3, a4, a5, a6, (uint64_t)v49, (uint64_t)v48, (uint64_t)v47);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v47);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v48);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v49);
  if (a6) {
    return 1;
  }
  std::string::size_type v18 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a5 + 48, a2);
  if ((void *)(a5 + 56) != v18)
  {
    uint64_t v19 = *(void *)(a5 + 24);
    if (v19)
    {
      uint64_t v20 = v19 + 104 * v18[5];
      int v21 = *(void **)(v20 + 80);
      uint64_t v32 = (void *)(v20 + 88);
      if (v21 != (void *)(v20 + 88))
      {
        while (1)
        {
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v37, a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 28));
          unint64_t v23 = v38;
          if (!v38 || (*((unsigned char *)v38 + 57) & 8) != 0) {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v38, v22);
          }
          uint64_t v24 = *((void *)v23 + 3);
          std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v46, a7);
          std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v45, a8);
          std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v44, a9);
          LOBYTE(v24) = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 28), a3, a4, a5, v24, (uint64_t)v46, (uint64_t)v45, (uint64_t)v44);
          std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v44);
          std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v45);
          std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v46);
          if (v24) {
            break;
          }
          if (a3)
          {
            pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v33, a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 28));
            uint64_t v26 = v34;
            if (!v34 || (*((unsigned char *)v34 + 57) & 8) != 0) {
              pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v34, v25);
            }
            uint64_t v27 = *((void *)v26 + 3);
            std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v43, a7);
            std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v42, a8);
            std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v41, a9);
            char v28 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 28), a3, a4, a5, v27, (uint64_t)v43, (uint64_t)v42, (uint64_t)v41);
            std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v41);
            std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v42);
            std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v43);
            if ((v36 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
            if (v34) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v34);
            }
            if (v28) {
              break;
            }
          }
          if ((v40 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
          if (v38) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v38);
          }
          int v29 = (void *)v21[1];
          if (v29)
          {
            do
            {
              BOOL v30 = v29;
              int v29 = (void *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              BOOL v30 = (void *)v21[2];
              BOOL v31 = *v30 == (void)v21;
              int v21 = v30;
            }
            while (!v31);
          }
          int v21 = v30;
          if (v30 == v32) {
            return 0;
          }
        }
        if ((v40 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
        if (v38) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v38);
        }
        return 1;
      }
    }
  }
  return 0;
}

void sub_23F6B0B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23F6B0C34()
{
}

CFStringRef realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::description@<X0>(CFStringRef *a1@<X8>)
{
  *a1 = 0;
  CFStringRef result = CFStringCreateWithCString(0, "PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor", 0x8000100u);
  *a1 = result;
  return result;
}

void sub_23F6B0C7C(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F6B0D28(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C403D1A7531);
  _Unwind_Resume(a1);
}

void std::shared_ptr<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23F6B0DB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *,std::shared_ptr<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>,std::allocator<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *,std::shared_ptr<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>,std::allocator<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *,std::shared_ptr<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>,std::allocator<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23F6B0F04(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *,std::shared_ptr<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>,std::allocator<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *,std::shared_ptr<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>,std::allocator<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *,std::shared_ptr<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>,std::allocator<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

long long *RIO_MTLX::GEOM_PATH_SEPARATOR(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v, "/");
  }
  return &RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v;
}

void sub_23F6B1054(_Unwind_Exception *a1)
{
}

long long *RIO_MTLX::UNIVERSAL_GEOM_NAME(RIO_MTLX *this)
{
  {
    if (v2)
    {
      RIO_MTLX::GEOM_PATH_SEPARATOR(v2);
      if (byte_268C3F897 < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&RIO_MTLX::UNIVERSAL_GEOM_NAME(void)::v, (const std::string::value_type *)RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v, *((std::string::size_type *)&RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v + 1));
      }
      else
      {
        RIO_MTLX::UNIVERSAL_GEOM_NAME(void)::v = RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v;
        qword_268C3F8B0 = unk_268C3F890;
      }
    }
  }
  return &RIO_MTLX::UNIVERSAL_GEOM_NAME(void)::v;
}

void sub_23F6B110C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::UDIM_TOKEN(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::UDIM_TOKEN(void)::v, "<UDIM>");
  }
  return RIO_MTLX::UDIM_TOKEN(void)::v;
}

void sub_23F6B118C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::UV_TILE_TOKEN(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::UV_TILE_TOKEN(void)::v, "<UVTILE>");
  }
  return RIO_MTLX::UV_TILE_TOKEN(void)::v;
}

void sub_23F6B120C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::UDIM_SET_PROPERTY(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::UDIM_SET_PROPERTY(void)::v, "udimset");
  }
  return RIO_MTLX::UDIM_SET_PROPERTY(void)::v;
}

void sub_23F6B128C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::GeomElement::GEOM_ATTRIBUTE(RIO_MTLX::GeomElement *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::GeomElement::GEOM_ATTRIBUTE(void)::v, "geom");
  }
  return RIO_MTLX::GeomElement::GEOM_ATTRIBUTE(void)::v;
}

void sub_23F6B130C(_Unwind_Exception *a1)
{
}

void RIO_MTLX::GeomElement::COLLECTION_ATTRIBUTE(RIO_MTLX::GeomElement *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_40))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40998, "collection");
    __cxa_guard_release(&_MergedGlobals_40);
  }
}

void sub_23F6B1398(_Unwind_Exception *a1)
{
}

void RIO_MTLX::Collection::INCLUDE_GEOM_ATTRIBUTE(RIO_MTLX::Collection *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40980, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40980))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C409B0, "includegeom");
    __cxa_guard_release(&qword_268C40980);
  }
}

void sub_23F6B1424(_Unwind_Exception *a1)
{
}

void RIO_MTLX::Collection::EXCLUDE_GEOM_ATTRIBUTE(RIO_MTLX::Collection *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40988))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C409C8, "excludegeom");
    __cxa_guard_release(&qword_268C40988);
  }
}

void sub_23F6B14B0(_Unwind_Exception *a1)
{
}

uint64_t RIO_MTLX::geomStringsMatch(RIO_MTLX *a1, std::string *a2, int a3)
{
  memset(v52, 0, sizeof(v52));
  uint64_t v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)&v50);
  uint64_t v6 = v50;
  uint64_t v7 = v51;
  if (v50 != v51)
  {
    unint64_t v8 = *(void *)&v52[8];
    do
    {
      if (v8 >= *(void *)&v52[16])
      {
        uint64_t v10 = (uint64_t)(v8 - *(void *)v52) >> 5;
        if ((unint64_t)(v10 + 1) >> 59) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v11 = (uint64_t)(*(void *)&v52[16] - *(void *)v52) >> 4;
        if (v11 <= v10 + 1) {
          unint64_t v11 = v10 + 1;
        }
        if (*(void *)&v52[16] - *(void *)v52 >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        long long v55 = &v52[16];
        if (v12)
        {
          if (v12 >> 59) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v5 = (RIO_MTLX *)operator new(32 * v12);
          BOOL v13 = (void **)v5;
        }
        else
        {
          BOOL v13 = 0;
        }
        uint64_t v53 = (void ***)v13;
        *(void *)uint64_t v54 = &v13[4 * v10];
        *(void *)&char v54[8] = *(void *)v54;
        *(void *)&v54[16] = &v13[4 * v12];
        RIO_MTLX::GEOM_PATH_SEPARATOR(v5);
        RIO_MTLX::splitString((std::string *)v6, (unsigned __int8 **)&RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v, (uint64_t)&v13[4 * v10]);
        uint64_t v14 = (void *)*((unsigned __int8 *)v6 + 23);
        if ((char)v14 < 0) {
          uint64_t v14 = v6[1];
        }
        LOBYTE(v13[4 * v10 + 3]) = v14 == 0;
        uint64_t v15 = *(void *)v54;
        *(void *)&v54[8] += 32;
        uint64_t v17 = *(void *)&v52[8];
        uint64_t v16 = *(void *)v52;
        *(void *)&long long v61 = *(void *)v54;
        *((void *)&v61 + 1) = *(void *)v54;
        long long v60 = v61;
        uint64_t v56 = (std::string *)&v52[16];
        uint64_t v57 = (std::string *)&v60;
        uint64_t v58 = &v61;
        char v59 = 0;
        if (*(void *)&v52[8] != *(void *)v52)
        {
          uint64_t v18 = *(void *)&v52[8];
          do
          {
            *(void *)(v15 - 32) = 0;
            *(void *)(v15 - 24) = 0;
            *(void *)(v15 - 16) = 0;
            uint64_t v19 = *(long long **)(v18 - 32);
            uint64_t v20 = *(long long **)(v18 - 24);
            v18 -= 32;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v15 - 32), v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
            *(unsigned char *)(v15 - 8) = *(unsigned char *)(v17 - 8);
            uint64_t v15 = *((void *)&v61 + 1) - 32;
            *((void *)&v61 + 1) -= 32;
            uint64_t v17 = v18;
          }
          while (v18 != v16);
        }
        char v59 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::GeomPath>,std::reverse_iterator<RIO_MTLX::GeomPath*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v56);
        uint64_t v21 = *(void *)&v52[16];
        long long v48 = *(_OWORD *)&v54[8];
        long long v22 = *(_OWORD *)v52;
        *(void *)uint64_t v52 = v15;
        *(_OWORD *)uint64_t v54 = v22;
        *(_OWORD *)&v52[8] = v48;
        *(void *)&v54[16] = v21;
        uint64_t v53 = (void ***)v22;
        uint64_t v5 = (RIO_MTLX *)std::__split_buffer<RIO_MTLX::GeomPath>::~__split_buffer((uint64_t)&v53);
        unint64_t v8 = v48;
      }
      else
      {
        RIO_MTLX::GEOM_PATH_SEPARATOR(v5);
        RIO_MTLX::splitString((std::string *)v6, (unsigned __int8 **)&RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v, v8);
        BOOL v9 = (void *)*((unsigned __int8 *)v6 + 23);
        if ((char)v9 < 0) {
          BOOL v9 = v6[1];
        }
        *(unsigned char *)(v8 + 24) = v9 == 0;
        v8 += 32;
      }
      *(void *)&v52[8] = v8;
      v6 += 3;
    }
    while (v6 != v7);
  }
  uint64_t v53 = &v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  uint64_t v24 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(v23);
  RIO_MTLX::splitString(a2, v24, (uint64_t)&v56);
  uint64_t v26 = v56;
  for (uint64_t i = v57; v26 != i; ++v26)
  {
    RIO_MTLX::GEOM_PATH_SEPARATOR(v25);
    RIO_MTLX::splitString(v26, (unsigned __int8 **)&RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v, (uint64_t)&v53);
    if ((v26->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26->__r_.__value_.__l.__size_;
    }
    v54[16] = size == 0;
    int v29 = *(uint64_t **)&v52[8];
    char v28 = *(uint64_t **)v52;
    if (*(void *)v52 != *(void *)&v52[8])
    {
      BOOL v30 = (void **)v53;
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v54 - (void)v53) >> 3);
      do
      {
        if (*((unsigned char *)v28 + 24)) {
          BOOL v32 = 1;
        }
        else {
          BOOL v32 = size == 0;
        }
        if (!v32)
        {
          uint64_t v33 = *v28;
          unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v28[1] - *v28) >> 3);
          if (!a3 || v34 <= v31)
          {
            if (v31 >= v34) {
              unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v28[1] - *v28) >> 3);
            }
            else {
              unint64_t v35 = v31;
            }
            if (!v35)
            {
LABEL_62:
              uint64_t v50 = (void **)&v53;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v50);
              uint64_t v53 = (void ***)&v56;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
              uint64_t v44 = 1;
              goto LABEL_63;
            }
            uint64_t v36 = 0;
            while (1)
            {
              uint64_t v37 = (unsigned __int8 *)(v33 + 24 * v36);
              uint64_t v38 = &v30[3 * v36];
              uint64_t v39 = v37[23];
              if ((v39 & 0x80u) == 0) {
                uint64_t v40 = (void *)v37[23];
              }
              else {
                uint64_t v40 = (void *)*((void *)v37 + 1);
              }
              char v41 = (void *)*((unsigned __int8 *)v38 + 23);
              int v42 = (char)v41;
              if ((char)v41 < 0) {
                char v41 = v38[1];
              }
              if (v40 != v41) {
                break;
              }
              if (v42 >= 0) {
                std::string v43 = &v30[3 * v36];
              }
              else {
                std::string v43 = (void **)*v38;
              }
              if ((v39 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v37, v43, *((void *)v37 + 1))) {
                  break;
                }
              }
              else if (v37[23])
              {
                while (*v37 == *(unsigned __int8 *)v43)
                {
                  ++v37;
                  std::string v43 = (void **)((char *)v43 + 1);
                  if (!--v39) {
                    goto LABEL_58;
                  }
                }
                break;
              }
LABEL_58:
              if (++v36 == v35) {
                goto LABEL_62;
              }
            }
          }
        }
        v28 += 4;
      }
      while (v28 != v29);
    }
    uint64_t v50 = (void **)&v53;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v50);
  }
  uint64_t v53 = (void ***)&v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  uint64_t v44 = 0;
LABEL_63:
  uint64_t v53 = (void ***)v52;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  return v44;
}

void sub_23F6B1908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v17 - 128) = &a17;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 128));
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::GeomElement::getCollectionString(RIO_MTLX::GeomElement *this)
{
  RIO_MTLX::GeomElement::COLLECTION_ATTRIBUTE(this);
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)this + 20, (unsigned __int8 *)qword_268C40998);
  if (v2) {
    return (uint64_t *)(v2 + 40);
  }

  return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t RIO_MTLX::GeomElement::validate(RIO_MTLX::GeomElement *a1, std::string *a2)
{
  char v11 = 1;
  RIO_MTLX::GeomElement::COLLECTION_ATTRIBUTE(a1);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)qword_268C40998))
  {
    Collectionuint64_t String = (std::string *)RIO_MTLX::GeomElement::getCollectionString(a1);
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Collection>((uint64_t)a1, CollectionString, &v9);
    uint64_t v5 = v9;
    std::string::basic_string[abi:ne180100]<0>(__p, "Invalid collection string");
    RIO_MTLX::Element::validateRequire((uint64_t)a1, v5 != 0, &v11, a2, (const void **)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  LODWORD(result) = RIO_MTLX::Element::validate((uint64_t)a1, a2);
  if (v11) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_23F6B1AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Collection::getIncludeCollections(RIO_MTLX::Collection *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40990, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40990))
  {
    std::string::basic_string[abi:ne180100]<0>(byte_268C409E0, "includecollection");
    __cxa_guard_release(&qword_268C40990);
  }
  RIO_MTLX::Element::getTypedAttribute<std::vector<std::string>>(a2, byte_268C409E0, v7);
  uint64_t v4 = (std::string *)v7[0];
  uint64_t v5 = v7[1];
  while (v4 != (std::string *)v5)
  {
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Collection>(a2, v4, &v6);
    if ((void)v6) {
      std::vector<std::shared_ptr<RIO_MTLX::Collection>>::push_back[abi:ne180100]((uint64_t *)this, &v6);
    }
    if (*((void *)&v6 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
    }
    ++v4;
  }
  *(void *)&long long v6 = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
}

void sub_23F6B1BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_guard_abort(&qword_268C40990);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<RIO_MTLX::Collection>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<RIO_MTLX::Collection>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F6B1D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::Collection::matchesGeomString(RIO_MTLX::Collection *a1, std::string *a2)
{
  RIO_MTLX::Collection::EXCLUDE_GEOM_ATTRIBUTE(a1);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)qword_268C409C8);
  if (v4)
  {
    RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v4);
    RIO_MTLX::Element::createStringResolver();
  }
  unint64_t v5 = RIO_MTLX::EMPTY_STRING(0);
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)*v5, v5[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    v79.__r_.__value_.__r.__words[2] = v5[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = RIO_MTLX::geomStringsMatch((RIO_MTLX *)&v79, a2, 1);
  char v8 = v7;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v79.__r_.__value_.__l.__data_);
    if (v8) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  RIO_MTLX::Collection::INCLUDE_GEOM_ATTRIBUTE((RIO_MTLX::Collection *)v7);
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)a1 + 20, (unsigned __int8 *)qword_268C409B0);
  if (v10)
  {
    RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v10);
    RIO_MTLX::Element::createStringResolver();
  }
  unint64_t v11 = RIO_MTLX::EMPTY_STRING(0);
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)*v11, v11[1]);
  }
  else
  {
    long long v12 = *(_OWORD *)v11;
    v79.__r_.__value_.__r.__words[2] = v11[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v12;
  }
  char v13 = RIO_MTLX::geomStringsMatch((RIO_MTLX *)&v79, a2, 0);
  char v14 = v13;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v79.__r_.__value_.__l.__data_);
    if (v14) {
      return 1;
    }
  }
  else if (v13)
  {
    return 1;
  }
  char v68 = a2;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v76 = &v77;
  RIO_MTLX::Collection::getIncludeCollections((RIO_MTLX::Collection *)&v74, (uint64_t)a1);
  uint64_t v15 = v74;
  if (*((void *)&v74 + 1) != (void)v74)
  {
    for (unint64_t i = 0; i < (uint64_t)(*((void *)&v74 + 1) - v74) >> 4; ++i)
    {
      long long v17 = *(_OWORD *)(v15 + 16 * i);
      long long v70 = v17;
      uint64_t v18 = *(std::__shared_weak_count **)(v15 + 16 * i + 8);
      if (*((void *)&v17 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = v77;
      uint64_t v20 = &v77;
      uint64_t v21 = &v77;
      if (v77)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v20 = (uint64_t **)v19;
            unint64_t v22 = v19[4];
            if (v22 <= (unint64_t)v17) {
              break;
            }
            uint64_t v19 = *v20;
            uint64_t v21 = v20;
            if (!*v20) {
              goto LABEL_30;
            }
          }
          if (v22 >= (unint64_t)v17) {
            break;
          }
          uint64_t v19 = v20[1];
          if (!v19)
          {
            uint64_t v21 = v20 + 1;
            goto LABEL_30;
          }
        }
      }
      else
      {
LABEL_30:
        unint64_t v23 = (uint64_t *)operator new(0x30uLL);
        uint64_t v24 = v23;
        *((_OWORD *)v23 + 2) = v70;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *unint64_t v23 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v20;
        void *v21 = v23;
        if (*v76)
        {
          uint64_t v76 = (uint64_t **)*v76;
          uint64_t v24 = *v21;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v77, v24);
        ++v78;
      }
      RIO_MTLX::Collection::getIncludeCollections((RIO_MTLX::Collection *)&v72, v70);
      uint64_t v26 = v72;
      uint64_t v25 = v73;
      if ((char *)v73 - (char *)v72 < 1) {
        goto LABEL_79;
      }
      uint64_t v27 = ((char *)v73 - (char *)v72) >> 4;
      long long v28 = v74;
      uint64_t v29 = (uint64_t)(*((void *)&v74 + 1) - v74) >> 4;
      BOOL v30 = (void *)(v74 + ((*((void *)&v74 + 1) - v74) & 0xFFFFFFFFFFFFFFF0));
      if (v27 <= (uint64_t)&v75[-*((void *)&v74 + 1)] >> 4)
      {
        uint64_t v35 = (uint64_t)(*((void *)&v74 + 1) - (void)v30) >> 4;
        uint64_t v71 = (uint64_t)(*((void *)&v74 + 1) - v74) >> 4;
        if (v35 >= v27)
        {
          uint64_t v36 = &v72[2 * v27];
          uint64_t v37 = (char *)*((void *)&v74 + 1);
        }
        else
        {
          uint64_t v69 = *((void *)&v74 + 1) - (void)v30;
          v82[0] = *((void *)&v74 + 1);
          v85[0] = *((void *)&v74 + 1);
          uint64_t v36 = &v72[2 * v35];
          v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
          v79.__r_.__value_.__l.__size_ = (std::string::size_type)v85;
          v79.__r_.__value_.__r.__words[2] = (std::string::size_type)v82;
          uint64_t v37 = (char *)*((void *)&v74 + 1);
          if (v36 != v73)
          {
            uint64_t v38 = (uint64_t *)*((void *)&v74 + 1);
            uint64_t v39 = v36;
            do
            {
              *uint64_t v38 = *v39;
              uint64_t v40 = v39[1];
              v38[1] = v40;
              if (v40) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
              }
              v38 += 2;
              v37 += 16;
              v39 += 2;
            }
            while (v39 != v25);
            v82[0] = v38;
          }
          LOBYTE(v80) = 1;
          std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::shared_ptr<RIO_MTLX::InterfaceElement>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v79);
          *((void *)&v74 + 1) = v37;
          if (v69 < 1) {
            goto LABEL_79;
          }
        }
        char v41 = &v37[-16 * v27];
        int v42 = v37;
        while ((unint64_t)v41 < *((void *)&v28 + 1))
        {
          *(_OWORD *)int v42 = *(_OWORD *)v41;
          v42 += 16;
          *(void *)char v41 = 0;
          *((void *)v41 + 1) = 0;
          v41 += 16;
        }
        std::string v43 = (char *)&v30[2 * v27];
        *((void *)&v74 + 1) = v42;
        if (v37 != v43)
        {
          uint64_t v44 = (std::__shared_weak_count **)(v37 - 8);
          uint64_t v45 = v28 + 16 * v71 - 16;
          uint64_t v46 = 16 * ((v37 - v43) >> 4);
          do
          {
            uint64_t v47 = (void *)(v45 + v46);
            long long v48 = *(_OWORD *)(v45 + v46);
            *uint64_t v47 = 0;
            v47[1] = 0;
            uint64_t v49 = *v44;
            *(_OWORD *)(v44 - 1) = v48;
            if (v49) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v49);
            }
            v44 -= 2;
            v46 -= 16;
          }
          while (v46);
        }
        for (; v26 != v36; v30 += 2)
        {
          uint64_t v51 = *v26;
          uint64_t v50 = v26[1];
          if (v50) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v52 = (std::__shared_weak_count *)v30[1];
          *BOOL v30 = v51;
          v30[1] = v50;
          if (v52) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v52);
          }
          v26 += 2;
        }
      }
      else
      {
        unint64_t v31 = v29 + v27;
        if ((unint64_t)(v29 + v27) >> 60) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v32 = (uint64_t)&v75[-v74];
        if ((uint64_t)&v75[-v74] >> 3 > v31) {
          unint64_t v31 = v32 >> 3;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        uint64_t v81 = &v75;
        if (v33) {
          unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v75, v33);
        }
        else {
          unint64_t v34 = 0;
        }
        std::string::size_type v53 = (std::string::size_type)&v34[16 * v29];
        v79.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        v79.__r_.__value_.__l.__size_ = v53;
        unint64_t v80 = &v34[16 * v33];
        uint64_t v54 = (void *)v53;
        do
        {
          *uint64_t v54 = *v26;
          uint64_t v55 = v26[1];
          v54[1] = v55;
          if (v55) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
          }
          v54 += 2;
          v26 += 2;
        }
        while (v54 != (void *)(v53 + 16 * v27));
        v79.__r_.__value_.__r.__words[2] = v53 + 16 * v27;
        std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Collection>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Collection>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Collection>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Collection>*>>((uint64_t)&v75, (uint64_t)v30, v30, v74, (void *)v74, v53, v53);
        v79.__r_.__value_.__l.__size_ = v56;
        uint64_t v57 = (void *)*((void *)&v74 + 1);
        uint64_t v58 = (_OWORD *)v79.__r_.__value_.__r.__words[2];
        std::string::size_type v84 = v79.__r_.__value_.__r.__words[2];
        v85[0] = *((void *)&v79.__r_.__value_.__l + 2);
        v82[0] = &v75;
        v82[1] = &v84;
        v82[2] = v85;
        if (*((void **)&v74 + 1) != v30)
        {
          do
          {
            *v58++ = *(_OWORD *)v30;
            *BOOL v30 = 0;
            v30[1] = 0;
            v30 += 2;
          }
          while (v30 != v57);
          v85[0] = v58;
        }
        char v83 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::shared_ptr<RIO_MTLX::InterfaceElement>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v82);
        long long v59 = v74;
        *(void *)&long long v74 = v79.__r_.__value_.__l.__size_;
        *((void *)&v74 + 1) = v58;
        *(_OWORD *)&v79.__r_.__value_.__r.__words[1] = v59;
        long long v60 = v75;
        uint64_t v75 = v80;
        unint64_t v80 = v60;
        v79.__r_.__value_.__r.__words[0] = v59;
        std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)&v79.__r_.__value_.__l.__data_);
      }
LABEL_79:
      v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      uint64_t v15 = v74;
    }
  }
  long long v61 = (uint64_t *)v76;
  if (v76 == &v77)
  {
    uint64_t v9 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v62 = v61[4];
      char v63 = (std::__shared_weak_count *)v61[5];
      if (v63) {
        atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = RIO_MTLX::Collection::matchesGeomString(v62, v68);
      if (v63) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v63);
      }
      if (v9) {
        break;
      }
      uint64_t v64 = (uint64_t *)v61[1];
      if (v64)
      {
        do
        {
          size_t v65 = (uint64_t **)v64;
          uint64_t v64 = (uint64_t *)*v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          size_t v65 = (uint64_t **)v61[2];
          BOOL v66 = *v65 == v61;
          long long v61 = (uint64_t *)v65;
        }
        while (!v66);
      }
      long long v61 = (uint64_t *)v65;
      if (v65 == &v77) {
        goto LABEL_97;
      }
    }
    uint64_t v9 = 1;
  }
LABEL_97:
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(v77);
  return v9;
}

void sub_23F6B242C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

uint64_t RIO_MTLX::Collection::validate(RIO_MTLX *a1, std::string *a2)
{
  char v7 = 1;
  RIO_MTLX::UNIVERSAL_GEOM_NAME(a1);
  RIO_MTLX::Collection::matchesGeomString(a1, (std::string *)&RIO_MTLX::UNIVERSAL_GEOM_NAME(void)::v);
  std::string::basic_string[abi:ne180100]<0>(__p, "Cycle in collection include chain");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, 1, &v7, a2, (const void **)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(result) = RIO_MTLX::Element::validate((uint64_t)a1, a2);
  if (v7) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_23F6B2564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::GeomElement::~GeomElement(RIO_MTLX::GeomElement *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

void RIO_MTLX::Collection::~Collection(RIO_MTLX::Collection *this)
{
  RIO_MTLX::Element::~Element(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::GeomPath>,std::reverse_iterator<RIO_MTLX::GeomPath*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void ***)(*(void *)(a1 + 8) + 8);
    for (unint64_t i = *(void ***)(*(void *)(a1 + 16) + 8); i != v3; i += 4)
    {
      unint64_t v5 = i;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<RIO_MTLX::GeomPath>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 32);
    *(void *)(a1 + 16) = v4;
    char v6 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::Collection>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Collection>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Collection>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Collection>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Collection>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<RIO_MTLX::Collection>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Collection>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Collection>*>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Collection>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Collection>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Collection>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::Collection>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::Collection>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(*a1);
    std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[5];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

void realityio::UsdStageObserver::UsdStageObserver(void *a1, uint64_t *a2, uint64_t a3)
{
  v26[4] = *(void **)MEMORY[0x263EF8340];
  a1[1] = 0;
  uint64_t v6 = a1 + 1;
  *a1 = &unk_26F343D98;
  a1[2] = *a2;
  uint64_t v7 = a1 + 2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(a1 + 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v8 = *(void *)(a3 + 24);
  if (v8)
  {
    if (v8 == a3)
    {
      a1[9] = a1 + 6;
      (*(void (**)(void, void *))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1 + 6);
LABEL_6:
      a1[14] = 0;
      a1[11] = 0;
      a1[10] = a1 + 11;
      a1[15] = 0;
      a1[12] = 0;
      a1[13] = a1 + 14;
      long long v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
      PseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(&v19, v9);
      uint64_t v25 = (void **)&unk_26F343E70;
      v26[0] = a1;
      v26[2] = &v25;
      UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(PseudoRoot);
      uint64_t v12 = UsdPrimDefaultPredicate[1].i64[0];
      v13.i64[0] = -8193;
      v13.i64[0] = vandq_s8(*UsdPrimDefaultPredicate, v13).u64[0];
      v13.i64[1] = vorrq_s8(*UsdPrimDefaultPredicate, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
      int8x16_t v23 = v13;
      uint64_t v24 = v12;
      realityio::visitPrimHierarchy((uint64_t)&v19, (uint64_t)&v25, &v23);
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::~__value_func[abi:ne180100](&v25);
      if ((v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
      if (v20) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
      }
      if (a1[9])
      {
        uint64_t v18 = (atomic_uint *)*v7;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v18);
        v26[0] = 0;
        v26[1] = 0;
        uint64_t v25 = v26;
        realityio::UsdStageDelta::UsdStageDelta(&v19, &v18, (uint64_t)&v25);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&v25, v26[0]);
        long long v14 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v18);
        long long v15 = (realityio::UsdStageObserver *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v14);
        realityio::UsdStageObserver::_updateStageDeltaWithResyncWithRootPrim(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, v16);
        uint64_t v17 = a1[9];
        if (!v17) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v17 + 48))(v17, &v19);
        realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)&v19);
      }
      pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register(v6, (unint64_t *)&v19);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v19, a2);
      operator new();
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  a1[9] = v8;
  goto LABEL_6;
}

void sub_23F6B2CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_uint *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&a25, a26);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a9);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(*v32);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(*v31);
  std::__function::__value_func<void ()(realityio::UsdStageDelta const&)>::~__value_func[abi:ne180100](v30);
  unint64_t v34 = *(atomic_uint **)(v26 + 40);
  if (v34)
  {
    if (atomic_fetch_add_explicit(v34 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v34 + 8))(v34);
    }
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v29);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v28);
  pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase(v27, v35);
  _Unwind_Resume(a1);
}

void realityio::UsdStageObserver::_updateStageDeltaWithResyncWithRootPrim(realityio::UsdStageObserver *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, realityio::UsdStageDelta *a3)
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = v6;
  realityio::UsdPrimDelta::UsdPrimDelta((uint64_t)v7, this, 1, (uint64_t)&v5);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)&v5, v6[0]);
  realityio::UsdStageDelta::setPrimDeltaForPrimPath(a2, (const realityio::UsdPrimDelta *)v7, this);
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)v7);
}

void sub_23F6B2EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)va);
  _Unwind_Resume(a1);
}

void realityio::UsdStageObserver::_OnUsdObjectsChanged(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a2, void *a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const(a3);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (uint64_t *)(a1 + 16);
    if (pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier((uint64_t)a3))
    {
      if (!a3[1]
        || !*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a3 + 1)
                     + 14)
        || !*a3
        || *a3 != *v8)
      {
        return;
      }
    }
    else if (*v8)
    {
      return;
    }
    if (*(void *)(a1 + 72))
    {
      uint64_t ResyncedPaths = pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResyncedPaths(a2);
      uint64_t ChangedInfoOnlyPaths = pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedInfoOnlyPaths(a2);
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator,0>(&v39, *(void **)ChangedInfoOnlyPaths, (void *)(ChangedInfoOnlyPaths + 8));
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator,0>(&v36, *(void **)ResyncedPaths, (void *)(ResyncedPaths + 8));
      if (*(void *)(a1 + 24))
      {
        unint64_t v33 = 0;
        unint64_t v34 = 0;
        uint64_t v35 = 0;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(&v33, v36, v37, (v37 - v36) >> 3);
        uint64_t v29 = a2;
        uint64_t v12 = v36;
        for (uint64_t i = v37;
              i != v12;
              std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)&v38, (uint64_t)i))
        {
          i -= 8;
        }
        uint64_t v37 = v12;
        long long v15 = v33;
        for (uint64_t j = v34; v15 != j; v15 += 2)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v44, v15);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v44 + 1, v15 + 1);
          char v41 = 0;
          int v42 = 0;
          uint64_t v43 = 0;
          uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 24));
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v45, v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v44);
          uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v8);
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v50, v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v44);
          if (convertResyncToInfoChange((pxrInternal__aapl__pxrReserved__::UsdObject *)&v45, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v50, (uint64_t *)&v41))
          {
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>((uint64_t *)&v39, v40, v41, v42, (void **)v42 - v41);
          }
          else
          {
            uint64_t v18 = v37;
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v19 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v36, v44);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v37, v44);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v18 + 1, (_DWORD *)v44 + 1);
              uint64_t v19 = v18 + 8;
            }
            uint64_t v37 = v19;
          }
          if ((v53 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
          if (v51) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v51);
          }
          if ((v48 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
          if (v46) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v46);
          }
          uint64_t v45 = (char **)&v41;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
        }
        uint64_t v45 = (char **)&v33;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
        a2 = v29;
      }
      realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)v36, (pxrInternal__aapl__pxrReserved__::SdfPath *)v37, 1, v11);
      realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(a1, v39, v40, 0, v20);
      uint64_t v32 = (atomic_uint *)*v8;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v32);
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v45 = (char **)&v46;
      realityio::UsdStageDelta::UsdStageDelta(&v33, &v32, (uint64_t)&v45);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&v45, v46);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v32);
      v31[0] = 0;
      v31[1] = 0;
      BOOL v30 = (uint64_t *)v31;
      realityio::UsdStageObserver::_updateStageDelta(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)v36, (pxrInternal__aapl__pxrReserved__::SdfPath *)v37, 1, &v30, (realityio::UsdStageDelta *)&v33, a2);
      realityio::UsdStageObserver::_updateStageDelta(a1, v39, v40, 0, &v30, (realityio::UsdStageDelta *)&v33, a2);
      uint64_t v49 = (atomic_uint *)*v8;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v49);
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v45 = (char **)&v46;
      realityio::UsdStageDelta::UsdStageDelta(&v50, &v49, (uint64_t)&v45);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&v45, v46);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v49);
      uint64_t v21 = v30;
      if (v30 != (uint64_t *)v31)
      {
        do
        {
          int v42 = 0;
          uint64_t v43 = 0;
          char v41 = (void **)&v42;
          realityio::UsdPrimDelta::UsdPrimDelta((uint64_t)&v45, (_DWORD *)v21 + 8, 0, (uint64_t)&v41);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)&v41, v42);
          memset(v44, 0, sizeof(v44));
          uint64_t v22 = (uint64_t *)v21[5];
          if (v22 != v21 + 6)
          {
            do
            {
              realityio::UsdPropertyDelta::UsdPropertyDelta((realityio::UsdPropertyDelta *)&v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v22 + 4));
              realityio::UsdPrimDelta::setPropertyDeltaForPropertyName((realityio::UsdPrimDelta *)&v45, (const realityio::UsdPropertyDelta *)&v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v22 + 4), 0);
              realityio::UsdPropertyDelta::~UsdPropertyDelta((realityio::UsdPropertyDelta *)&v41);
              int8x16_t v23 = (uint64_t *)v22[1];
              if (v23)
              {
                do
                {
                  uint64_t v24 = v23;
                  int8x16_t v23 = (uint64_t *)*v23;
                }
                while (v23);
              }
              else
              {
                do
                {
                  uint64_t v24 = (uint64_t *)v22[2];
                  BOOL v25 = *v24 == (void)v22;
                  uint64_t v22 = v24;
                }
                while (!v25);
              }
              uint64_t v22 = v24;
            }
            while (v24 != v21 + 6);
          }
          realityio::UsdStageDelta::setPrimDeltaForPrimPath((realityio::UsdStageDelta *)&v50, (const realityio::UsdPrimDelta *)&v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 4));
          char v41 = (void **)v44;
          std::vector<realityio::UsdPropertyDelta>::__destroy_vector::operator()[abi:ne180100](&v41);
          realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)&v45);
          uint64_t v26 = (uint64_t *)v21[1];
          if (v26)
          {
            do
            {
              uint64_t v27 = v26;
              uint64_t v26 = (uint64_t *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v27 = (uint64_t *)v21[2];
              BOOL v25 = *v27 == (void)v21;
              uint64_t v21 = v27;
            }
            while (!v25);
          }
          uint64_t v21 = v27;
        }
        while (v27 != (uint64_t *)v31);
      }
      realityio::UsdStageDelta::updateWithStageDelta((realityio::UsdStageDelta *)&v33, (const realityio::UsdStageDelta *)&v50);
      realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)&v50);
      uint64_t v28 = *(void *)(a1 + 72);
      if (!v28) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, _DWORD **))(*(void *)v28 + 48))(v28, &v33);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy((uint64_t)&v30, v31[0]);
      realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)&v33);
      uint64_t v45 = &v36;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
      uint64_t v45 = (char **)&v39;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    }
  }
}

void sub_23F6B346C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44)
{
  a44 = (void **)&a27;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a44);
  a44 = (void **)&a30;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a44);
  _Unwind_Resume(a1);
}

void realityio::UsdStageObserver::~UsdStageObserver(realityio::UsdStageObserver *this)
{
  *(void *)this = &unk_26F343D98;
  if (pxrInternal__aapl__pxrReserved__::TfNotice::Key::IsValid((realityio::UsdStageObserver *)((char *)this + 32))) {
    pxrInternal__aapl__pxrReserved__::TfNotice::Revoke();
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(*((void **)this + 14));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(*((void **)this + 11));
  std::__function::__value_func<void ()(realityio::UsdStageDelta const&)>::~__value_func[abi:ne180100]((void *)this + 6);
  uint64_t v2 = (atomic_uint *)*((void *)this + 5);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)this + 3);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)this + 2);
  pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase((realityio::UsdStageObserver *)((char *)this + 8), v3);
}

{
  uint64_t vars8;

  realityio::UsdStageObserver::~UsdStageObserver(this);

  JUMPOUT(0x2455D2BD0);
}

CFStringRef realityio::UsdStageObserver::description@<X0>(realityio::UsdStageObserver *this@<X0>, CFStringRef *a2@<X8>)
{
  *a2 = 0;
  BOOL IsValid = pxrInternal__aapl__pxrReserved__::TfNotice::Key::IsValid((realityio::UsdStageObserver *)((char *)this + 32));
  uint64_t v5 = "false";
  if (IsValid) {
    uint64_t v5 = "true";
  }
  CFStringRef result = CFStringCreateWithFormat(0, 0, @"<UsdStageObserver: %p { stage: %p, observing stage: %s }>", this, (char *)this + 16, v5);
  *a2 = result;
  return result;
}

void sub_23F6B3730(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

uint64_t convertResyncToInfoChange(pxrInternal__aapl__pxrReserved__::UsdObject *a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t *a3)
{
  uint64_t v5 = a1;
  uint64_t v118 = *MEMORY[0x263EF8340];
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1)
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2))
  {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAllChildrenNames((uint64_t *)&v95, v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAllChildrenNames((uint64_t *)&v97, a2);
  uint64_t v6 = (void *)v95.__r_.__value_.__r.__words[0];
  char v7 = (void *)v97.__r_.__value_.__r.__words[0];
  if (v95.__r_.__value_.__l.__size_ - v95.__r_.__value_.__r.__words[0] != v97.__r_.__value_.__l.__size_
                                                                         - v97.__r_.__value_.__r.__words[0])
  {
LABEL_7:
    v91.n128_u64[0] = (unint64_t)&v97;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
    return 0;
  }
  while (v6 != (void *)v95.__r_.__value_.__l.__size_)
  {
    if ((*v6 & 0xFFFFFFFFFFFFFFF8) != (*v7 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_7;
    }
    ++v6;
    ++v7;
  }
  v91.n128_u64[0] = (unint64_t)&v97;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships((uint64_t *)&v91, v5);
  uint64_t v86 = a2;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships((uint64_t *)&v99, a2);
  unint64_t v10 = v91.n128_u64[1];
  unint64_t v11 = v91.n128_u64[0];
  std::string::size_type v84 = v5;
  if (v91.n128_u64[0] != v91.n128_u64[1])
  {
    uint64_t v12 = (char *)&v87 + 4;
    int8x16_t v13 = (_DWORD *)&v116 + 1;
    long long v14 = &v97.__r_.__value_.__s.__data_[20];
    unint64_t v85 = v91.n128_u64[1];
    while (1)
    {
      LODWORD(v95.__r_.__value_.__l.__data_) = *(_DWORD *)v11;
      std::string::size_type v15 = *(void *)(v11 + 8);
      v95.__r_.__value_.__l.__size_ = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v95.__r_.__value_.__r.__words[2], (_DWORD *)(v11 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v95.__r_.__value_.__r.__words[2] + 1, (_DWORD *)(v11 + 20));
      uint64_t v16 = *(void *)(v11 + 24);
      v96[0] = v16;
      if ((v16 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v96[0] &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95, &v87);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationshipAtPath((uint64_t *)&v97, v86, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v87);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v97))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata((uint64_t *)&v87, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v95);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata((uint64_t *)&v109, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v97);
        if (v89 == v111)
        {
          uint64_t v17 = v14;
          uint64_t v18 = v13;
          uint64_t v19 = v12;
          int8x16_t v20 = v87;
          if (v87 == &v88)
          {
LABEL_34:
            long long v106 = 0;
            uint64_t v107 = 0;
            uint64_t v108 = 0;
            uint64_t v103 = 0;
            uint64_t v104 = 0;
            uint64_t v105 = 0;
            uint64_t v12 = v19;
            int8x16_t v13 = v18;
            long long v14 = v17;
            unint64_t v10 = v85;
            if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets()
              && pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets())
            {
              uint64_t v27 = v106;
              uint64_t v28 = v103;
              if (v107 - (char *)v106 == v104 - (char *)v103)
              {
                while (v27 != (uint64_t *)v107)
                {
                  if ((void *)*v27 != *v28) {
                    goto LABEL_43;
                  }
                  ++v27;
                  ++v28;
                }
              }
              else
              {
LABEL_43:
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v97, &v116);
                unint64_t v30 = a3[1];
                if (v30 >= a3[2])
                {
                  uint64_t v31 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v116);
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v116);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v30 + 4), v13);
                  uint64_t v31 = v30 + 8;
                }
                a3[1] = v31;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v116);
              }
            }
            int v116 = &v103;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
            uint64_t v103 = (void **)&v106;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v103);
            int v29 = 0;
          }
          else
          {
            uint64_t v21 = v109;
            while (((unint64_t)v20[4] & 0xFFFFFFFFFFFFFFF8) == (v21[4] & 0xFFFFFFFFFFFFFFF8)
                 && pxrInternal__aapl__pxrReserved__::VtValue::operator==((uint64_t)(v20 + 5), (uint64_t)(v21 + 5)))
            {
              uint64_t v22 = v20[1];
              int8x16_t v23 = v20;
              if (v22)
              {
                do
                {
                  int8x16_t v20 = (char **)v22;
                  uint64_t v22 = *(char **)v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  int8x16_t v20 = (char **)v23[2];
                  BOOL v24 = *v20 == (char *)v23;
                  int8x16_t v23 = v20;
                }
                while (!v24);
              }
              BOOL v25 = (void *)v21[1];
              if (v25)
              {
                do
                {
                  uint64_t v26 = v25;
                  BOOL v25 = (void *)*v25;
                }
                while (v25);
              }
              else
              {
                do
                {
                  uint64_t v26 = (void *)v21[2];
                  BOOL v24 = *v26 == (void)v21;
                  uint64_t v21 = v26;
                }
                while (!v24);
              }
              uint64_t v21 = v26;
              if (v20 == &v88) {
                goto LABEL_34;
              }
            }
            int v29 = 1;
            uint64_t v12 = v19;
            int8x16_t v13 = v18;
            long long v14 = v17;
            unint64_t v10 = v85;
          }
        }
        else
        {
          int v29 = 1;
        }
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v109, v110);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v87, v88);
      }
      else
      {
        int v29 = 1;
      }
      if ((v98[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v98[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v97.__r_.__value_.__r.__words[2]);
      if (v97.__r_.__value_.__l.__size_) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v97.__r_.__value_.__l.__size_);
      }
      if ((v96[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v96[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v95.__r_.__value_.__r.__words[2]);
      if (v95.__r_.__value_.__l.__size_) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v95.__r_.__value_.__l.__size_);
      }
      if (v29) {
        break;
      }
      v11 += 32;
      if (v11 == v10)
      {
        unint64_t v32 = v91.n128_u64[1];
        unint64_t v11 = v91.n128_u64[0];
        uint64_t v5 = v84;
        goto LABEL_61;
      }
    }
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    return 0;
  }
  unint64_t v32 = v91.n128_u64[0];
LABEL_61:
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&v97, (uint64_t)(v32 - v11) >> 5);
  unint64_t v33 = v86;
  unint64_t v34 = v91.n128_u64[1];
  uint64_t v35 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v91.n128_u64[0];
  if (v91.n128_u64[0] != v91.n128_u64[1])
  {
    uint64_t v36 = v97.__r_.__value_.__r.__words[0];
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v35, &v95);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v36, (int *)&v95);
      uint64_t v37 = v36 + 4;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v37);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v95);
      uint64_t v35 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v35 + 32);
      uint64_t v36 = v37 + 4;
    }
    while (v35 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v34);
  }
  unint64_t v38 = 126 - 2 * __clz((uint64_t)(v97.__r_.__value_.__l.__size_ - v97.__r_.__value_.__r.__words[0]) >> 3);
  if (v97.__r_.__value_.__l.__size_ == v97.__r_.__value_.__r.__words[0]) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = v38;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *,false>((uint64_t)v97.__r_.__value_.__l.__data_, (char *)v97.__r_.__value_.__l.__size_, v39, 1);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&v87, (v100 - v99) >> 5);
  char v41 = v99;
  uint64_t v40 = (uint64_t)v100;
  if (v99 != v100)
  {
    uint64_t v42 = (uint64_t)v87;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v41, &v95);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v42, (int *)&v95);
      uint64_t v43 = v42 + 4;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v43);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v95);
      char v41 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v41 + 32);
      uint64_t v42 = v43 + 4;
    }
    while (v41 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v40);
  }
  uint64_t v109 = 0;
  int v110 = 0;
  int v116 = (void ***)v87;
  std::string::size_type v113 = v97.__r_.__value_.__r.__words[0];
  int v114 = v88;
  uint64_t v111 = 0;
  std::string::size_type size = v97.__r_.__value_.__l.__size_;
  long long v106 = (uint64_t *)&v109;
  uint64_t v107 = 0;
  std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::insert_iterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>> &>((uint64_t)&v95, (uint64_t *)&v116, &v114, (uint64_t *)&v113, &size, (uint64_t)&v106);
  uint64_t v45 = v109;
  uint64_t v44 = v110;
  if (v109 != v110)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v95, v45);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v95.__r_.__value_.__r.__words + 1, v45 + 1);
      unint64_t v46 = a3[1];
      if (v46 >= a3[2])
      {
        uint64_t v47 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, &v95);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v95);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v46 + 4), (_DWORD *)v95.__r_.__value_.__r.__words + 1);
        uint64_t v47 = v46 + 8;
      }
      a3[1] = v47;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v95);
      v45 += 2;
    }
    while (v45 != (_DWORD *)v44);
  }
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes((uint64_t *)&v87, v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes((uint64_t *)&v109, v86);
  uint64_t v49 = (char *)v87;
  uint64_t v48 = v88;
  if (v87 != (char **)v88)
  {
    while (1)
    {
      v91.n128_u32[0] = *(_DWORD *)v49;
      unint64_t v50 = *((void *)v49 + 1);
      v91.n128_u64[1] = v50;
      if (v50) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v92, (_DWORD *)v49 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v93, (_DWORD *)v49 + 5);
      unint64_t v51 = *((void *)v49 + 3);
      unint64_t v94 = v51;
      if ((v51 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v94 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v91, &v95);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributeAtPath((uint64_t *)&v99, v33, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v95);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v95);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v99))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata((uint64_t *)&v106, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v91);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata((uint64_t *)&v103, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v99);
        if (v108 == v105)
        {
          uint64_t v52 = (uint64_t)v106;
          if (v106 == (uint64_t *)&v107)
          {
LABEL_98:
            uint64_t v117 = 0;
            uint64_t v115 = 0;
            unint64_t v33 = v86;
            if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
              && pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
              && (pxrInternal__aapl__pxrReserved__::VtValue::operator==((uint64_t)&v116, (uint64_t)&v114) & 1) == 0)
            {
              if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)&v116)
                && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)&v114))
              {
                if ((v117 & 4) != 0) {
                  uint64_t v58 = (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)(*(uint64_t (**)(void ****))((v117 & 0xFFFFFFFFFFFFFFF8) + 168))(&v116);
                }
                else {
                  uint64_t v58 = (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v116;
                }
                pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v95, v58);
                if ((v115 & 4) != 0) {
                  long long v59 = (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)(*(uint64_t (**)(char **))((v115 & 0xFFFFFFFFFFFFFFF8) + 168))(&v114);
                }
                else {
                  long long v59 = (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v114;
                }
                pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v97, v59);
                if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)v96, (unsigned __int8 *)v98))
                {
                  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v99, &v113);
                  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back[abi:ne180100](a3, &v113);
                  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v113);
                }
                pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)&v97.__r_.__value_.__l.__data_);
                pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)&v95.__r_.__value_.__l.__data_);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v99, &v95);
                unint64_t v61 = a3[1];
                if (v61 >= a3[2])
                {
                  uint64_t v62 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v95);
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v95);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v61 + 4), (_DWORD *)v95.__r_.__value_.__r.__words + 1);
                  uint64_t v62 = v61 + 8;
                }
                a3[1] = v62;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v95);
              }
            }
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v114);
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v116);
            int v60 = 0;
          }
          else
          {
            uint64_t v53 = v103;
            while ((*(void *)(v52 + 32) & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v53[4] & 0xFFFFFFFFFFFFFFF8)
                 && pxrInternal__aapl__pxrReserved__::VtValue::operator==(v52 + 40, (uint64_t)(v53 + 5)))
            {
              uint64_t v54 = *(void **)(v52 + 8);
              uint64_t v55 = v52;
              if (v54)
              {
                do
                {
                  uint64_t v52 = (uint64_t)v54;
                  uint64_t v54 = (void *)*v54;
                }
                while (v54);
              }
              else
              {
                do
                {
                  uint64_t v52 = *(void *)(v55 + 16);
                  BOOL v24 = *(void *)v52 == v55;
                  uint64_t v55 = v52;
                }
                while (!v24);
              }
              std::string::size_type v56 = (void **)v53[1];
              if (v56)
              {
                do
                {
                  uint64_t v57 = v56;
                  std::string::size_type v56 = (void **)*v56;
                }
                while (v56);
              }
              else
              {
                do
                {
                  uint64_t v57 = (void **)v53[2];
                  BOOL v24 = *v57 == v53;
                  uint64_t v53 = v57;
                }
                while (!v24);
              }
              uint64_t v53 = v57;
              if ((char **)v52 == &v107) {
                goto LABEL_98;
              }
            }
            int v60 = 1;
            unint64_t v33 = v86;
          }
        }
        else
        {
          int v60 = 1;
        }
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v103, v104);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v106, v107);
      }
      else
      {
        int v60 = 1;
      }
      if ((v102 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
      if (v100) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v100);
      }
      if ((v94 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v92);
      if (v91.n128_u64[1]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v91.n128_i64[1]);
      }
      if (v60) {
        break;
      }
      v49 += 32;
      if (v49 == v48)
      {
        uint64_t v49 = (char *)v87;
        char v63 = v88;
        uint64_t v5 = v84;
        goto LABEL_135;
      }
    }
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    return 0;
  }
  char v63 = (char *)v87;
LABEL_135:
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&v97, (v63 - v49) >> 5);
  size_t v65 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v87;
  uint64_t v64 = v88;
  if (v87 != (char **)v88)
  {
    uint64_t v66 = v97.__r_.__value_.__r.__words[0];
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v65, &v95);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v66, (int *)&v95);
      uint64_t v67 = v66 + 4;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v67);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v95);
      size_t v65 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v65 + 32);
      uint64_t v66 = v67 + 4;
    }
    while (v65 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v64);
  }
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&v91, ((char *)v110 - (char *)v109) >> 5);
  uint64_t v69 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v109;
  char v68 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v110;
  if (v109 != v110)
  {
    uint64_t v70 = v91.n128_u64[0];
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v69, &v95);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v70, (int *)&v95);
      uint64_t v71 = v70 + 4;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v71);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v95);
      uint64_t v69 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v69 + 32);
      uint64_t v70 = v71 + 4;
    }
    while (v69 != v68);
  }
  BOOL v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  int v116 = (void ***)v91.n128_u64[0];
  std::string::size_type v113 = v97.__r_.__value_.__r.__words[0];
  int v114 = (char *)v91.n128_u64[1];
  std::string::size_type size = v97.__r_.__value_.__l.__size_;
  long long v106 = (uint64_t *)&v99;
  uint64_t v107 = 0;
  std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::insert_iterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>> &>((uint64_t)&v95, (uint64_t *)&v116, &v114, (uint64_t *)&v113, &size, (uint64_t)&v106);
  uint64_t v73 = v99;
  for (uint64_t i = (uint64_t)v100;
        v73 != (pxrInternal__aapl__pxrReserved__::UsdObject *)i;
        uint64_t v73 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v73 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v95, v73);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v95.__r_.__value_.__r.__words + 1, (_DWORD *)v73 + 1);
    unint64_t v74 = a3[1];
    if (v74 >= a3[2])
    {
      uint64_t v75 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, &v95);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v95);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v74 + 4), (_DWORD *)v95.__r_.__value_.__r.__words + 1);
      uint64_t v75 = v74 + 8;
    }
    a3[1] = v75;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v95);
  }
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata((uint64_t *)&v95, v5);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata((uint64_t *)&v97, v33);
  if (v95.__r_.__value_.__r.__words[2] != v97.__r_.__value_.__r.__words[2])
  {
LABEL_175:
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v97, (void *)v97.__r_.__value_.__l.__size_);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v95, (void *)v95.__r_.__value_.__l.__size_);
    return 0;
  }
  uint64_t v76 = (std::string *)v95.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v95.__r_.__value_.__l.__data_ != &v95.__r_.__value_.__r.__words[1])
  {
    uint64_t v77 = (void *)v97.__r_.__value_.__r.__words[0];
    while ((v76[1].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) == (v77[4] & 0xFFFFFFFFFFFFFFF8)
         && pxrInternal__aapl__pxrReserved__::VtValue::operator==((uint64_t)&v76[1].__r_.__value_.__r.__words[2], (uint64_t)(v77 + 5)))
    {
      uint64_t v78 = (std::string *)v76->__r_.__value_.__l.__size_;
      std::string v79 = v76;
      if (v78)
      {
        do
        {
          uint64_t v76 = v78;
          uint64_t v78 = (std::string *)v78->__r_.__value_.__r.__words[0];
        }
        while (v78);
      }
      else
      {
        do
        {
          uint64_t v76 = (std::string *)v79->__r_.__value_.__r.__words[2];
          BOOL v24 = v76->__r_.__value_.__r.__words[0] == (void)v79;
          std::string v79 = v76;
        }
        while (!v24);
      }
      unint64_t v80 = (void *)v77[1];
      if (v80)
      {
        do
        {
          uint64_t v81 = v80;
          unint64_t v80 = (void *)*v80;
        }
        while (v80);
      }
      else
      {
        do
        {
          uint64_t v81 = (void *)v77[2];
          BOOL v24 = *v81 == (void)v77;
          uint64_t v77 = v81;
        }
        while (!v24);
      }
      uint64_t v77 = v81;
      if (v76 == (std::string *)&v95.__r_.__value_.__r.__words[1]) {
        goto LABEL_162;
      }
    }
    goto LABEL_175;
  }
LABEL_162:
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v97, (void *)v97.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v95, (void *)v95.__r_.__value_.__l.__size_);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAllChildren((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v95, (uint64_t)v5);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::begin((__n128 *)&v95, (__n128 *)&v97);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::end((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *)&v95, &v91);
  while (*(_OWORD *)&v97.__r_.__value_.__l.__data_ != *(_OWORD *)&v91
       || (pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v97.__r_.__value_.__r.__words[2], (uint64_t)&v92) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v97, (uint64_t)&v99);
    uint64_t Name = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v99);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild((uint64_t *)&v87, v86, Name);
    char v83 = convertResyncToInfoChange(&v99, &v87, a3);
    if ((v90 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v89);
    if (v88) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v88);
    }
    if ((v102 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
    if (v100) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v100);
    }
    if ((v83 & 1) == 0)
    {
      uint64_t v8 = 0;
      goto LABEL_177;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v97);
  }
  uint64_t v8 = 1;
LABEL_177:
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v91);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v97);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::~UsdPrimSiblingRange((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *)&v95);
  return v8;
}

void sub_23F6B46A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v40 - 136));
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)&a34);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a24);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v40 - 128));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v40 - 112));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(v40 - 216, *(void **)(v40 - 208));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(v40 - 192, *(void **)(v40 - 184));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a40);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a19);
  a34 = (uint64_t *)(v40 - 168);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  a34 = &a15;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1[1], a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v4 + 4), a2 + 1);
    uint64_t result = v4 + 8;
  }
  a1[1] = result;
  return result;
}

{
  unint64_t v4;
  uint64_t result;

  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a1, a2);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1[1], a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v4 + 4), a2 + 1);
    uint64_t result = v4 + 8;
  }
  a1[1] = result;
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(std::string *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_23F6B4AD8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAllChildren(pxrInternal__aapl__pxrReserved__::UsdPrim *this, uint64_t a2)
{
  uint64_t UsdPrimAllPrimsPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(this);
  uint64_t v6 = *UsdPrimAllPrimsPredicate;
  uint64_t v5 = UsdPrimAllPrimsPredicate[1];
  uint64_t v7 = UsdPrimAllPrimsPredicate[2];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  v9[0] = v6;
  v9[1] = v5;
  void v9[2] = v7;
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(a2, v9, (uint64_t)this);
}

__n128 pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::begin@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  a2->n128_u64[0] = this->n128_u64[0];
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&a2->n128_u32[2], &this->n128_u32[2]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&a2->n128_u32[3], &this->n128_u32[3]);
  __n128 result = this[1];
  a2[1] = result;
  a2[2].n128_u64[0] = this[2].n128_u64[0];
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::end@<Q0>(pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *this@<X0>, __n128 *a2@<X8>)
{
  a2->n128_u64[0] = *((void *)this + 5);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&a2->n128_u32[2], (_DWORD *)this + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&a2->n128_u32[3], (_DWORD *)this + 13);
  __n128 result = *(__n128 *)((char *)this + 56);
  a2[1] = result;
  a2[2].n128_u64[0] = *((void *)this + 9);
  return result;
}

uint64_t realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(uint64_t result, pxrInternal__aapl__pxrReserved__::SdfPath *this, pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4, int8x16_t a5)
{
  v29[4] = *MEMORY[0x263EF8340];
  if (this != a3)
  {
    uint64_t v7 = this;
    uint64_t v8 = (uint64_t **)result;
    long long v9 = (uint64_t *)(result + 16);
    a5.i64[0] = -8193;
    int8x16_t v16 = a5;
    int8x16_t v17 = (int8x16_t)vdupq_n_s64(0x2000uLL);
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v28, v7);
      unint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v9);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v24, v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v24))
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(v7))
        {
          NameTokeuint64_t n = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v7);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty(&v20, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v24, NameToken);
          realityio::UsdStageObserver::_clearPreviousPropertyAndPrimMappings(v8, (const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v20);
          realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromPrimAndProperty(v8, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v24, (const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v20);
          if ((v23 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
          if (v21) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
          }
        }
        else if (a4)
        {
          IsPrimPath = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v7);
          if (IsPrimPath)
          {
            v29[0] = &unk_26F343EF0;
            v29[1] = v8;
            v29[3] = v29;
            UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(IsPrimPath);
            uint64_t v14 = UsdPrimDefaultPredicate[1].i64[0];
            *(void *)&long long v15 = vandq_s8(*UsdPrimDefaultPredicate, v16).u64[0];
            *((void *)&v15 + 1) = vorrq_s8(*UsdPrimDefaultPredicate, v17).i64[1];
            long long v18 = v15;
            uint64_t v19 = v14;
            realityio::visitPrimHierarchy((uint64_t)&v24, (uint64_t)v29, &v18);
            std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::~__value_func[abi:ne180100](v29);
          }
        }
      }
      if ((v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
      if (v25) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      __n128 result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
    }
    while (v7 != a3);
  }
  return result;
}

void sub_23F6B4E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::~__value_func[abi:ne180100]((void *)(v26 - 128));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a22);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a26);
  _Unwind_Resume(a1);
}

uint64_t realityio::UsdStageObserver::_updateStageDelta(uint64_t result, pxrInternal__aapl__pxrReserved__::SdfPath *this, pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4, uint64_t **a5, realityio::UsdStageDelta *a6, pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a7)
{
  if (this != a3)
  {
    uint64_t v8 = this;
    uint64_t v54 = (uint64_t *)(result + 16);
    uint64_t v58 = result + 104;
    uint64_t v57 = (void *)(result + 112);
    long long v9 = a5 + 1;
    uint64_t v56 = (uint64_t)a6 + 48;
    while (1)
    {
      AbsoluteRootOrPrimPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(v81, v8);
      unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(AbsoluteRootOrPrimPath);
      uint64_t v12 = v81[0];
      int8x16_t v13 = *v11;
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v54);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v77, v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v81);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v77)
        && pxrInternal__aapl__pxrReserved__::UsdPrim::IsInPrototype(&v77))
      {
        long long v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v54);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)v59, v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v81);
        while (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v59)
             && pxrInternal__aapl__pxrReserved__::UsdPrim::IsInPrototype((pxrInternal__aapl__pxrReserved__ **)v59)
             && (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)v59, v16) & 1) == 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)v59, (uint64_t)&v64);
          *(_DWORD *)long long v59 = v64;
          uint64_t v17 = v65;
          uint64_t v65 = 0;
          uint64_t v18 = *(void *)&v59[8];
          *(void *)&v59[8] = v17;
          if (v18) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v59[16], &v66);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v59[20]);
          if ((v59[24] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v59[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *(void *)&v59[24] = v67;
          uint64_t v67 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
          if (v65) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v65);
          }
        }
        uint64_t v49 = v13;
        uint64_t v19 = v8;
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetInstances((uint64_t *)&v75, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v59);
        uint64_t v20 = v76;
        if ((void **)v75 != v76)
        {
          uint64_t v21 = (void **)(v75 + 16);
          do
          {
            uint64_t v22 = v21 - 2;
            LODWORD(v70) = *((_DWORD *)v21 - 4);
            uint64_t v23 = (uint64_t)*(v21 - 1);
            uint64_t v71 = v23;
            if (v23) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 48), 1uLL, memory_order_relaxed);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v72, v21);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v73, (_DWORD *)v21 + 1);
            unint64_t v24 = (unint64_t)v21[1];
            unint64_t v74 = v24;
            if ((v24 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v74 &= 0xFFFFFFFFFFFFFFF8;
            }
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v70, &v69);
            v63[0] = 0;
            v63[1] = 0;
            uint64_t v62 = v63;
            realityio::UsdPrimDelta::UsdPrimDelta((uint64_t)&v64, &v69, 1, (uint64_t)&v62);
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)&v62, v63[0]);
            realityio::UsdStageDelta::setPrimDeltaForPrimPath(a6, (const realityio::UsdPrimDelta *)&v64, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69);
            realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)&v64);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
            if ((v74 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
            if (v71) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v71);
            }
            v21 += 4;
          }
          while (v22 + 4 != v20);
        }
        uint64_t v64 = (void **)&v75;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100](&v64);
        if ((v59[24] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v59[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        int8x16_t v13 = v49;
        uint64_t v8 = v19;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59[16]);
        if (*(void *)&v59[8]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v59[8]);
        }
      }
      *(_OWORD *)&v59[8] = 0uLL;
      *(void *)long long v59 = &v59[8];
      realityio::UsdPrimDelta::UsdPrimDelta((uint64_t)&v64, v81, 0, (uint64_t)v59);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)v59, *(void **)&v59[8]);
      if ((pxrInternal__aapl__pxrReserved__::TfToken *)v12 == v13) {
        break;
      }
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v8))
      {
        pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields((uint64_t *)v59, a7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v81);
        uint64_t v27 = *(uint64_t **)&v59[8];
        for (uint64_t i = *(uint64_t **)v59; i != v27; ++i)
          std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v68, i, i);
        goto LABEL_39;
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(v8)) {
        goto LABEL_46;
      }
      NameTokeuint64_t n = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v8);
      unint64_t v50 = NameToken;
      if ((*(void *)NameToken & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (const std::string *)((*(void *)NameToken & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
      }
      std::string::basic_string((std::string *)v59, EmptyString, 0, 3uLL, (std::allocator<char> *)&v70);
      if ((v59[23] & 0x80000000) != 0)
      {
        if (*(void *)&v59[8] != 3)
        {
          operator delete(*(void **)v59);
LABEL_88:
          uint64_t v42 = v50;
LABEL_89:
          realityio::UsdPropertyDelta::UsdPropertyDelta((realityio::UsdPropertyDelta *)v59, v42);
          pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields((uint64_t *)&v70, a7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v81);
          unint64_t v46 = (uint64_t *)v70;
          uint64_t v45 = v71;
          while (v46 != (uint64_t *)v45)
          {
            MEMORY[0x2455CF810](&v75, "default");
            uint64_t v47 = *v46;
            uint64_t v48 = (atomic_uint *)(v75 & 0xFFFFFFFFFFFFFFF8);
            if ((v75 & 7) != 0) {
              atomic_fetch_add_explicit(v48, 0xFFFFFFFE, memory_order_release);
            }
            if ((atomic_uint *)(v47 & 0xFFFFFFFFFFFFFFF8) != v48) {
              std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v59[24], v46, v46);
            }
            ++v46;
          }
          realityio::UsdPrimDelta::setPropertyDeltaForPropertyName((realityio::UsdPrimDelta *)&v64, (const realityio::UsdPropertyDelta *)v59, v50, v61 == 0);
          unint64_t v75 = (unint64_t)&v70;
          std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
          realityio::UsdPropertyDelta::~UsdPropertyDelta((realityio::UsdPropertyDelta *)v59);
LABEL_40:
          if ((pxrInternal__aapl__pxrReserved__::TfToken *)v12 == v13)
          {
            if (!a4) {
              goto LABEL_48;
            }
LABEL_47:
            realityio::UsdStageObserver::_updateStageDeltaWithResyncWithRootPrim((realityio::UsdStageObserver *)v81, a6, v29);
          }
          else
          {
LABEL_46:
            if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v8) & a4) {
              goto LABEL_47;
            }
          }
LABEL_48:
          realityio::UsdStageDelta::setPrimDeltaForPrimPath(a6, (const realityio::UsdPrimDelta *)&v64, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v81);
          int64x2_t v60 = 0u;
          memset(v59, 0, sizeof(v59));
          std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(v59, v81);
          for (; v60.i64[1]; uint64_t v8 = v34)
          {
            unint64_t v32 = (void *)(*(void *)(*(void *)&v59[8] + (((unint64_t)v60.i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * (v60.i16[0] & 0x1FF));
            std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)&v60.i64[1], (uint64_t)v32);
            int64x2_t v60 = vaddq_s64(v60, (int64x2_t)xmmword_23F7CED10);
            if (v60.i64[0] >= 0x400uLL)
            {
              operator delete(**(void ***)&v59[8]);
              *(void *)&v59[8] += 8;
              v60.i64[0] -= 512;
            }
            unint64_t v33 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v58, v32);
            unint64_t v34 = v8;
            if (v57 != v33)
            {
              uint64_t v35 = (void *)v33[5];
              uint64_t v36 = v33 + 6;
              if (v35 != v33 + 6)
              {
                do
                {
                  uint64_t v37 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v35 + 28));
                  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v75, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v35 + 28));
                  if (v9 == std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a5, &v75))std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(v59, &v75); {
                  uint64_t v70 = &v75;
                  }
                  unint64_t v38 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(a5, &v75, (uint64_t)&std::piecewise_construct, (_DWORD **)&v70);
                  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t **)v38 + 5, v37, v37);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
                  uint64_t v39 = (void *)v35[1];
                  if (v39)
                  {
                    do
                    {
                      uint64_t v40 = v39;
                      uint64_t v39 = (void *)*v39;
                    }
                    while (v39);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v40 = (void *)v35[2];
                      BOOL v41 = *v40 == (void)v35;
                      uint64_t v35 = v40;
                    }
                    while (!v41);
                  }
                  uint64_t v35 = v40;
                }
                while (v40 != v36);
              }
            }
          }
          std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::~deque[abi:ne180100](v59);
          goto LABEL_63;
        }
        BOOL v44 = **(_WORD **)v59 != 26997 || *(unsigned char *)(*(void *)v59 + 2) != 58;
        operator delete(*(void **)v59);
        uint64_t v42 = v50;
        if (v44) {
          goto LABEL_89;
        }
      }
      else
      {
        if (v59[23] != 3) {
          goto LABEL_88;
        }
        BOOL v41 = *(unsigned __int16 *)v59 == 26997 && v59[2] == 58;
        uint64_t v42 = v50;
        if (!v41) {
          goto LABEL_89;
        }
      }
LABEL_63:
      realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)&v64);
      if ((v80 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
      if (v78) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v78);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      __n128 result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v81);
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
      if (v8 == a3) {
        return result;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields((uint64_t *)v59, a7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v81);
    uint64_t v25 = *(uint64_t **)&v59[8];
    for (uint64_t j = *(uint64_t **)v59; j != v25; ++j)
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(v56, j, j);
LABEL_39:
    uint64_t v70 = (unint64_t *)v59;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    goto LABEL_40;
  }
  return result;
}

void sub_23F6B5690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  *(void *)(v47 - 152) = v47 - 184;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 152));
  realityio::UsdPropertyDelta::~UsdPropertyDelta((realityio::UsdPropertyDelta *)&a35);
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)&a47);
  uint64_t v49 = *(void *)(v47 - 104);
  if ((v49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a12);
  uint64_t v50 = *(void *)(v47 - 120);
  if (v50) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v50);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v47 - 96);
  _Unwind_Resume(a1);
}

_DWORD *std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = ((v5 - v4) << 6) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = (_DWORD *)(*(void *)(v4 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF));
  }
  long long v9 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8, a2);
  __n128 result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9 + 1, a2 + 1);
  ++a1[5];
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *result;

  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = ((v5 - v4) << 6) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = (_DWORD *)(*(void *)(v4 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF));
  }
  long long v9 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8, a2);
  __n128 result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9 + 1, a2 + 1);
  ++a1[5];
  return result;
}

uint64_t realityio::UsdStageObserver::_clearPreviousPropertyAndPrimMappings(uint64_t **this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v20);
  uint64_t v3 = this + 10;
  uint64_t v21 = &v20;
  uint64_t v4 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(this + 10, &v20, (_DWORD **)&v21);
  uint64_t v5 = (uint64_t *)v4[5];
  uint64_t v6 = v4 + 6;
  if (v5 != v4 + 6)
  {
    unint64_t v7 = this + 13;
    do
    {
      uint64_t v21 = (uint64_t *)((char *)v5 + 28);
      uint64_t v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(v7, (uint64_t *)((char *)v5 + 28), (_DWORD **)&v21);
      long long v9 = (uint64_t **)(v8 + 5);
      unint64_t v10 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)(v8 + 5), &v20);
      unint64_t v11 = v10;
      if (v8 + 6 != v10)
      {
        uint64_t v12 = (uint64_t *)v10[1];
        if (v12)
        {
          do
          {
            int8x16_t v13 = v12;
            uint64_t v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          uint64_t v14 = v10;
          do
          {
            int8x16_t v13 = (uint64_t *)v14[2];
            BOOL v15 = *v13 == (void)v14;
            uint64_t v14 = v13;
          }
          while (!v15);
        }
        if (*v9 == v10) {
          _DWORD *v9 = v13;
        }
        int8x16_t v16 = (uint64_t *)v8[6];
        --v8[7];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v16, v11);
        std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)v11 + 28);
        operator delete(v11);
        if (!v8[7]) {
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__erase_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(v7, (uint64_t *)((char *)v5 + 28));
        }
      }
      uint64_t v17 = (uint64_t *)v5[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (uint64_t *)v5[2];
          BOOL v15 = *v18 == (void)v5;
          uint64_t v5 = v18;
        }
        while (!v15);
      }
      uint64_t v5 = v18;
    }
    while (v18 != v6);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__erase_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(v3, &v20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
}

void sub_23F6B5A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromPrimAndProperty(uint64_t **this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::UsdProperty *a3)
{
  v44[0] = 0;
  v44[1] = 0;
  uint64_t v43 = (uint64_t *)v44;
  uint64_t Name = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a3);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((uint64_t *)&v39, a2, Name);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v39))
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
    uint64_t v45 = &v36;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  }
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
  if (v40) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v40);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v39, a2, Name);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v39)
    && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v39))
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
    unint64_t v7 = v36;
    for (i = v37; v7 != i; unint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v35, v7);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v43, &v35, &v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
    }
    uint64_t v45 = &v36;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  }
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
  if (v40) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v40);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a3, &v36);
  long long v9 = v43;
  if (v43 != (uint64_t *)v44)
  {
    do
    {
      uint64_t v39 = (uint64_t *)((char *)v9 + 28);
      unint64_t v10 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(this + 13, (uint64_t *)((char *)v9 + 28), (_DWORD **)&v39);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t **)v10 + 5, &v36, &v36);
      unint64_t v11 = (uint64_t *)v9[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          unint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (uint64_t *)v9[2];
          BOOL v13 = *v12 == (void)v9;
          long long v9 = v12;
        }
        while (!v13);
      }
      long long v9 = v12;
    }
    while (v12 != (uint64_t *)v44);
  }
  uint64_t v39 = (uint64_t *)&v36;
  uint64_t v14 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(this + 10, &v36, (_DWORD **)&v39);
  BOOL v15 = v14;
  int8x16_t v16 = (uint64_t **)(v14 + 5);
  if (v14 + 5 != (uint64_t *)&v43)
  {
    uint64_t v17 = v43;
    if (v14[7])
    {
      uint64_t v19 = (uint64_t **)(v14 + 6);
      uint64_t v18 = v14[6];
      uint64_t v20 = v14[5];
      v14[5] = (uint64_t)(v14 + 6);
      *(void *)(v18 + 16) = 0;
      v14[6] = 0;
      v14[7] = 0;
      if (*(void *)(v20 + 8)) {
        uint64_t v21 = *(uint64_t **)(v20 + 8);
      }
      else {
        uint64_t v21 = (uint64_t *)v20;
      }
      uint64_t v39 = v14 + 5;
      uint64_t v40 = v21;
      BOOL v41 = v21;
      if (v21)
      {
        uint64_t v40 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v21);
        if (v17 == (uint64_t *)v44)
        {
          uint64_t v26 = (uint64_t *)v44;
        }
        else
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v21 + 28, (_DWORD *)v17 + 7);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v21 + 4), (_DWORD *)v17 + 8);
            uint64_t v22 = *v19;
            uint64_t v23 = (uint64_t **)(v15 + 6);
            unint64_t v24 = (uint64_t **)(v15 + 6);
            if (*v19)
            {
              do
              {
                while (1)
                {
                  uint64_t v23 = (uint64_t **)v22;
                  if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((uint64_t *)((char *)v21 + 28), (uint64_t *)((char *)v22 + 28)))break; {
                  uint64_t v22 = *v23;
                  }
                  unint64_t v24 = v23;
                  if (!*v23) {
                    goto LABEL_36;
                  }
                }
                uint64_t v22 = v23[1];
              }
              while (v22);
              unint64_t v24 = v23 + 1;
            }
LABEL_36:
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v16, (uint64_t)v23, v24, v21);
            uint64_t v21 = v40;
            BOOL v41 = v40;
            if (v40) {
              uint64_t v40 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v40);
            }
            uint64_t v25 = (uint64_t *)v17[1];
            if (v25)
            {
              do
              {
                uint64_t v26 = v25;
                uint64_t v25 = (uint64_t *)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                uint64_t v26 = (uint64_t *)v17[2];
                BOOL v13 = *v26 == (void)v17;
                uint64_t v17 = v26;
              }
              while (!v13);
            }
            if (!v21) {
              break;
            }
            uint64_t v17 = v26;
          }
          while (v26 != (uint64_t *)v44);
        }
      }
      else
      {
        uint64_t v26 = v17;
      }
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v39);
      uint64_t v17 = v26;
    }
    if (v17 != (uint64_t *)v44)
    {
      uint64_t v27 = v15 + 6;
      do
      {
        uint64_t v28 = (uint64_t *)operator new(0x28uLL);
        uint64_t v39 = v28;
        uint64_t v40 = v27;
        int v29 = (uint64_t *)((char *)v28 + 28);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v28 + 7, (_DWORD *)v17 + 7);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v28 + 8, (_DWORD *)v17 + 8);
        LOBYTE(v41) = 1;
        unint64_t v30 = (uint64_t *)*v27;
        uint64_t v31 = (uint64_t **)v27;
        unint64_t v32 = (uint64_t **)v27;
        if (*v27)
        {
          do
          {
            while (1)
            {
              uint64_t v31 = (uint64_t **)v30;
              if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v29, (uint64_t *)((char *)v30 + 28)))break; {
              unint64_t v30 = *v31;
              }
              unint64_t v32 = v31;
              if (!*v31) {
                goto LABEL_57;
              }
            }
            unint64_t v30 = v31[1];
          }
          while (v30);
          unint64_t v32 = v31 + 1;
        }
LABEL_57:
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v16, (uint64_t)v31, v32, v39);
        uint64_t v39 = 0;
        std::unique_ptr<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)&v39, 0);
        unint64_t v33 = (uint64_t *)v17[1];
        if (v33)
        {
          do
          {
            unint64_t v34 = v33;
            unint64_t v33 = (uint64_t *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            unint64_t v34 = (uint64_t *)v17[2];
            BOOL v13 = *v34 == (void)v17;
            uint64_t v17 = v34;
          }
          while (!v13);
        }
        uint64_t v17 = v34;
      }
      while (v34 != (uint64_t *)v44);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v43, v44[0]);
}

void sub_23F6B5F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18)
{
  *(void *)(v18 - 72) = &a10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 72));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a13);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::~UsdProperty(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

void *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator,0>(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    unint64_t v6 = 0;
    unint64_t v7 = v5;
    do
    {
      uint64_t v8 = (void *)v7[1];
      if (v8)
      {
        do
        {
          long long v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          long long v9 = (void *)v7[2];
          BOOL v10 = *v9 == (void)v7;
          unint64_t v7 = v9;
        }
        while (!v10);
      }
      ++v6;
      unint64_t v7 = v9;
    }
    while (v9 != a3);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](a1, v6);
    unint64_t v11 = (_DWORD *)a1[1];
    uint64_t v18 = v11;
    uint64_t v17 = v11;
    v15[0] = a1 + 2;
    v15[1] = &v17;
    v15[2] = &v18;
    char v16 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11, (_DWORD *)v5 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11 + 1, (_DWORD *)v5 + 9);
      uint64_t v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          BOOL v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          BOOL v13 = (void *)v5[2];
          BOOL v10 = *v13 == (void)v5;
          uint64_t v5 = v13;
        }
        while (!v10);
      }
      unint64_t v11 = v18 + 2;
      v18 += 2;
      uint64_t v5 = v13;
    }
    while (v13 != a3);
    char v16 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
    a1[1] = v11;
  }
  return a1;
}

void sub_23F6B6188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__function::__value_func<void ()(realityio::UsdStageDelta const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,0>(uint64_t a1)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a1 + 8, *(void **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::UsdStageObserver::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>::~_DelivererWithSender(pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *this)
{
  *(void *)this = &unk_26F343DF8;
  uint64_t v2 = (atomic_uint *)*((void *)this + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 6);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }

  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(this);
}

{
  atomic_uint *v2;
  atomic_uint *v3;
  uint64_t vars8;

  *(void *)this = &unk_26F343DF8;
  uint64_t v2 = (atomic_uint *)*((void *)this + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 6);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::UsdStageObserver::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::_SendToListener(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9 = a1[6];
  uint64_t v8 = a1 + 6;
  if (!v9) {
    return 0;
  }
  BOOL v13 = v8 - 1;
  uint64_t v14 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v8);
  uint64_t v15 = *v13;
  BOOL v16 = !*(unsigned char *)(v14 + 14) || v15 == 0;
  if (v16
    || a1[8]
    && !*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a1 + 8)
                 + 14))
  {
    return 0;
  }
  if (*a7 != a7[1])
  {
    (*(void (**)(uint64_t *))(*a1 + 40))(a1);
    pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,realityio::UsdStageObserver>::operator->(v13);
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_BeginDelivery();
  }
  if (a4) {
    uint64_t v18 = a4 - 16;
  }
  else {
    uint64_t v18 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v23, v18);
  uint64_t v19 = (void (*)(void *, uint64_t, uint64_t *))a1[9];
  uint64_t v20 = a1[10];
  uint64_t v21 = (void *)(v15 + (v20 >> 1));
  if (v20) {
    uint64_t v19 = *(void (**)(void *, uint64_t, uint64_t *))(*v21 + v19);
  }
  v19(v21, a2, &v23);
  uint64_t v22 = v24;
  if (v24 && atomic_fetch_add_explicit((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  if (*a7 != a7[1]) {
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery();
  }
  return 1;
}

void sub_23F6B6640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::UsdStageObserver::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::GetNoticeType(uint64_t a1, const std::type_info *a2)
{
  uint64_t v2 = MEMORY[0x263F90670];
  uint64_t v3 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F90670], a2);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v14);
  if (v14[0] == v3)
  {
    v14[0] = "tf/notice.h";
    v14[1] = "GetNoticeType";
    void v14[2] = 563;
    v14[3] = "virtual TfType pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserve"
             "d__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver"
             ">, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>, void (realityio"
             "::UsdStageObserver::*)(const pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged &, const pxrIntern"
             "al__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &), pxrInternal__aapl__pxrRe"
             "served__::UsdNotice::ObjectsChanged>>::GetNoticeType() const [Derived = pxrInternal__aapl__pxrReserved__::T"
             "fNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>, pxr"
             "Internal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>, void (realityio::UsdS"
             "tageObserver::*)(const pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged &, const pxrInternal__aa"
             "pl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &), pxrInternal__aapl__pxrReserved"
             "__::UsdNotice::ObjectsChanged>]";
    char v15 = 0;
    int v16 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t *)&v10, (pxrInternal__aapl__pxrReserved__ *)(*(void *)(v2 + 8) & 0x7FFFFFFFFFFFFFFFLL), v4);
    uint64_t v5 = std::string::insert(&v10, 0, "notice type ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unint64_t v7 = std::string::append(&v11, " undefined in the TfType system");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError();
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  return v3;
}

void sub_23F6B67AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::UsdStageObserver::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::Delivers(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *))(*a1 + 24))(a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfType::IsA();
  if (result)
  {
    uint64_t v8 = a1[8];
    unint64_t v7 = a1 + 8;
    BOOL v6 = v8;
    if (v8) {
      BOOL v6 = *(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v7)
    }
                    + 14) == 0;
    uint64_t result = 0;
    if (a3)
    {
      if (!v6) {
        return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7 - 1)
      }
             + 16 == a3;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::UsdStageObserver::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::GetSenderWeakBase(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 56);
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const((void *)(a1 + 56));
  if (v3 & 1 | (unint64_t)v2) {
    return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1)
  }
         + 16;
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::UsdStageObserver::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::Clone()
{
}

void sub_23F6B69A8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x10E1C40C1C1184DLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,realityio::UsdStageObserver>::operator->(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         uint64_t result = *a1,
         v4)
      ? (BOOL v6 = result == 0)
      : (BOOL v6 = 1),
        v6))
  {
    unint64_t v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = result;
  while (2)
  {
    uint64_t v9 = a2;
    uint64_t v58 = a2 - 8;
    std::string v10 = (char *)v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = (uint64_t)v10;
          uint64_t v11 = v9 - v10;
          unint64_t v12 = (v9 - v10) >> 3;
          if (!(!v5 & v4))
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v58, (void *)v8);
                if (result)
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
                  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((void *)v8, (void *)(v8 + 8), v58);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((void *)v8, (void *)(v8 + 8), (void *)(v8 + 16), v58);
                break;
              case 5uLL:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((void *)v8, (void *)(v8 + 8), (void *)(v8 + 16), (void *)(v8 + 24), v58);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            if (a4)
            {
              if ((char *)v8 != v9)
              {
                uint64_t v24 = (void *)(v8 + 8);
                if ((char *)(v8 + 8) != a2)
                {
                  uint64_t v25 = 0;
                  uint64_t v26 = (_DWORD *)v8;
                  do
                  {
                    uint64_t v27 = v24;
                    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v24, v26);
                    uint64_t v28 = a2;
                    if (result)
                    {
                      LODWORD(v62) = *v27;
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
                      HIDWORD(v62) = v26[3];
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
                      uint64_t v29 = v25;
                      while (1)
                      {
                        uint64_t v30 = v8 + v29;
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v8 + v29 + 8, (int *)(v8 + v29));
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v8 + v29 + 12);
                        if (!v29) {
                          break;
                        }
                        v29 -= 8;
                        if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v62, (void *)(v30 - 8)) & 1) == 0)
                        {
                          uint64_t v31 = v8 + v29 + 8;
                          goto LABEL_78;
                        }
                      }
                      uint64_t v31 = v8;
LABEL_78:
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v31, (int *)&v62);
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v30 + 4);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      uint64_t v28 = a2;
                      uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
                    }
                    uint64_t v24 = v27 + 2;
                    v25 += 8;
                    uint64_t v26 = v27;
                  }
                  while (v27 + 2 != (_DWORD *)v28);
                }
              }
            }
            else if ((char *)v8 != v9)
            {
              uint64_t v53 = (void *)(v8 + 8);
              if ((char *)(v8 + 8) != a2)
              {
                uint64_t v54 = v8 + 12;
                do
                {
                  uint64_t v55 = v53;
                  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v53, (void *)v8);
                  if (result)
                  {
                    LODWORD(v62) = *v55;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
                    HIDWORD(v62) = *(_DWORD *)(v8 + 12);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
                    uint64_t v56 = v54;
                    do
                    {
                      uint64_t v57 = v56;
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v56 - 4, (int *)(v56 - 12));
                      v56 -= 8;
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v57);
                    }
                    while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v62, (void *)(v57 - 20)) & 1) != 0);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v56 - 4, (int *)&v62);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v56);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
                  }
                  uint64_t v53 = v55 + 2;
                  v54 += 8;
                  uint64_t v8 = (uint64_t)v55;
                }
                while (v55 + 2 != (_DWORD *)a2);
              }
            }
            return result;
          }
          if (!a3)
          {
            if ((char *)v8 != v9)
            {
              int64_t v59 = (v12 - 2) >> 1;
              int64_t v32 = v59;
              do
              {
                int64_t v33 = v32;
                if (v59 >= v32)
                {
                  uint64_t v34 = (2 * v32) | 1;
                  uint64_t v35 = (int *)(v8 + 8 * v34);
                  if (2 * v32 + 2 < (uint64_t)v12
                    && pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)(v8 + 8 * v34), (void *)v35 + 1))
                  {
                    v35 += 2;
                    uint64_t v34 = 2 * v33 + 2;
                  }
                  uint64_t v36 = (void *)(v8 + 8 * v33);
                  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v35, v36);
                  if ((result & 1) == 0)
                  {
                    LODWORD(v62) = *(_DWORD *)v36;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
                    HIDWORD(v62) = *(_DWORD *)(v8 + 8 * v33 + 4);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
                    do
                    {
                      uint64_t v37 = (uint64_t)v35;
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v36, v35);
                      uint64_t v38 = (uint64_t)(v35 + 1);
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v36 + 4);
                      if (v59 < v34) {
                        break;
                      }
                      uint64_t v39 = (2 * v34) | 1;
                      uint64_t v35 = (int *)(v8 + 8 * v39);
                      uint64_t v34 = 2 * v34 + 2;
                      if (v34 < (uint64_t)v12)
                      {
                        if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)(v8 + 8 * v39), (void *)v35 + 1))v35 += 2; {
                        else
                        }
                          uint64_t v34 = v39;
                      }
                      else
                      {
                        uint64_t v34 = v39;
                      }
                      uint64_t v36 = (void *)v37;
                    }
                    while (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v35, &v62));
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v37, (int *)&v62);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v38);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
                  }
                }
                int64_t v32 = v33 - 1;
              }
              while (v33);
              uint64_t v40 = (unint64_t)v11 >> 3;
              do
              {
                BOOL v41 = a2;
                if (v40 >= 2)
                {
                  v61[0] = *(_DWORD *)v8;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
                  v61[1] = *(_DWORD *)(v8 + 4);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
                  uint64_t v42 = 0;
                  uint64_t v43 = v8;
                  do
                  {
                    BOOL v44 = (int *)(v43 + 8 * v42 + 8);
                    uint64_t v45 = (2 * v42) | 1;
                    uint64_t v46 = 2 * v42 + 2;
                    if (v46 < v40
                      && pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)(v43 + 8 * v42 + 8), (void *)(v43 + 8 * v42 + 16)))
                    {
                      v44 += 2;
                      uint64_t v45 = v46;
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v43, v44);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v43 + 4);
                    uint64_t v43 = (uint64_t)v44;
                    uint64_t v42 = v45;
                  }
                  while (v45 <= (uint64_t)((unint64_t)(v40 - 2) >> 1));
                  if (v44 == (int *)(a2 - 8))
                  {
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v44, v61);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v44 + 1));
                  }
                  else
                  {
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v44, (int *)a2 - 2);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v44 + 1));
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(a2 - 8), v61);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(a2 - 4));
                    uint64_t v47 = (uint64_t)v44 - v8 + 8;
                    if (v47 >= 9)
                    {
                      unint64_t v48 = (((unint64_t)v47 >> 3) - 2) >> 1;
                      uint64_t v49 = (int *)(v8 + 8 * v48);
                      if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v49, v44))
                      {
                        LODWORD(v62) = *v44;
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
                        HIDWORD(v62) = v44[1];
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
                        do
                        {
                          uint64_t v50 = (uint64_t)v49;
                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v44, v49);
                          uint64_t v51 = (uint64_t)(v49 + 1);
                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v44 + 1));
                          if (!v48) {
                            break;
                          }
                          unint64_t v48 = (v48 - 1) >> 1;
                          uint64_t v49 = (int *)(v8 + 8 * v48);
                          BOOL v44 = (int *)v50;
                        }
                        while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v49, &v62) & 1) != 0);
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v50, (int *)&v62);
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v51);
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
                      }
                    }
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v61);
                  BOOL v41 = a2;
                }
                a2 = v41 - 8;
              }
              while ((unint64_t)v40-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (void *)(v8 + 8 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((void *)v8, (void *)(v8 + 8 * (v12 >> 1)), v58);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((void *)(v8 + 8), v14 - 1, (void *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((void *)(v8 + 16), (void *)(v8 + 8 + 8 * v13), (void *)a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(v14 - 1, v14, (void *)(v8 + 8 + 8 * v13));
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((void *)(v8 + 8 * (v12 >> 1)), (void *)v8, v58);
          }
          --a3;
          if ((a4 & 1) != 0
            || (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)(v8 - 8), (void *)v8) & 1) != 0)
          {
            break;
          }
          LODWORD(v62) = *(_DWORD *)v8;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
          HIDWORD(v62) = *(_DWORD *)(v8 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
          if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v62, v58))
          {
            std::string v10 = (char *)v8;
            do
              v10 += 8;
            while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v62, v10) & 1) == 0);
          }
          else
          {
            uint64_t v21 = (char *)(v8 + 8);
            do
            {
              std::string v10 = v21;
              if (v21 >= v9) {
                break;
              }
              int v22 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v62, v21);
              uint64_t v21 = v10 + 8;
            }
            while (!v22);
          }
          uint64_t v23 = v9;
          if (v10 < v9)
          {
            uint64_t v23 = v9;
            do
              v23 -= 8;
            while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v62, v23) & 1) != 0);
          }
          while (v10 < v23)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
            do
              v10 += 8;
            while (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v62, v10));
            do
              v23 -= 8;
            while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v62, v23) & 1) != 0);
          }
          if (v10 - 8 != (char *)v8)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v8, (int *)v10 - 2);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v8 + 4);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v10 - 8), (int *)&v62);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v10 - 4));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
          a4 = 0;
        }
        LODWORD(v62) = *(_DWORD *)v8;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
        HIDWORD(v62) = *(_DWORD *)(v8 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
        uint64_t v15 = 0;
        do
        {
          char v16 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)(v8 + v15 + 8), &v62);
          v15 += 8;
        }
        while ((v16 & 1) != 0);
        unint64_t v17 = v8 + v15;
        uint64_t v18 = a2;
        if (v15 == 8)
        {
          uint64_t v18 = a2;
          do
          {
            if (v17 >= (unint64_t)v18) {
              break;
            }
            v18 -= 8;
          }
          while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v18, &v62) & 1) == 0);
        }
        else
        {
          do
            v18 -= 8;
          while (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v18, &v62));
        }
        std::string v10 = (char *)(v8 + v15);
        if (v17 >= (unint64_t)v18)
        {
          uint64_t v9 = a2;
        }
        else
        {
          uint64_t v19 = v18;
          uint64_t v9 = a2;
          do
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
            do
              v10 += 8;
            while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v10, &v62) & 1) != 0);
            do
              v19 -= 8;
            while (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v19, &v62));
          }
          while (v10 < v19);
        }
        if (v10 - 8 != (char *)v8)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v8, (int *)v10 - 2);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v8 + 4);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v10 - 8), (int *)&v62);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v10 - 4));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
        if (v17 >= (unint64_t)v18) {
          break;
        }
LABEL_33:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *,false>(v8, v10 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((void *)v8, (void *)v10 - 1);
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(v10, v9);
      if (result) {
        break;
      }
      if (!v20) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 8;
    if (!v20) {
      continue;
    }
    return result;
  }
}

void sub_23F6B74F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(void *a1, void *a2, void *a3)
{
  char v6 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, a2);
  if (v6)
  {
    if (!result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, a2);
      if (!result) {
        return result;
      }
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, a1);
    if (!result) {
      return result;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();

  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(void *a1, void *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2 - 1, a1))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      char v6 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(a1, a1 + 1, a1 + 2);
      unint64_t v7 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v7, v6))
    {
      LODWORD(v13) = *(_DWORD *)v7;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
      HIDWORD(v13) = *((_DWORD *)v7 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
      uint64_t v10 = v8;
      while (1)
      {
        uint64_t v11 = (char *)a1 + v10;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a1 + v10 + 24, (int *)((char *)a1 + v10 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a1 + v10 + 28);
        if (v10 == -16) {
          break;
        }
        v10 -= 8;
        if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v13, (void *)v11 + 1) & 1) == 0)
        {
          uint64_t v12 = (uint64_t)a1 + v10 + 24;
          goto LABEL_12;
        }
      }
      uint64_t v12 = (uint64_t)a1;
LABEL_12:
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v12, (int *)&v13);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v11 + 20));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      ++v9;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
      if (v9 == 8) {
        return v7 + 1 == a2;
      }
    }
    char v6 = v7;
    v8 += 8;
    if (++v7 == a2) {
      return 1;
    }
  }
}

void sub_23F6B791C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(void *a1, void *a2, void *a3, void *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(a1, a2, a3);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a4, a3);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, a2);
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, a1);
      if (result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
        return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(a1, a2, a3, a4);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a5, a4);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a4, a3);
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, a2);
      if (result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
        uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, a1);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
          return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
        }
      }
    }
  }
  return result;
}

uint64_t std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::insert_iterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>> &>(uint64_t result, uint64_t *a2, char **a3, uint64_t *a4, void *a5, uint64_t a6)
{
  unint64_t v7 = (void *)result;
  uint64_t v8 = (char *)*a2;
  int v9 = *a3;
  if ((char *)*a2 == *a3)
  {
LABEL_14:
    uint64_t v18 = *(void **)a6;
    unint64_t v17 = *(_DWORD **)(a6 + 8);
    int v9 = v8;
LABEL_15:
    BOOL v20 = v8;
    goto LABEL_16;
  }
  uint64_t v13 = (void *)*a4;
  if (*a4 != *a5)
  {
    while (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v8, v13))
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)*a4, (void *)*a2);
      char v16 = a4;
      if ((result & 1) == 0)
      {
        uint64_t result = *a2;
        uint64_t v15 = a2;
        char v16 = a4;
        goto LABEL_7;
      }
LABEL_8:
      *v16 += 8;
      uint64_t v8 = (char *)*a2;
      int v9 = *a3;
      if ((char *)*a2 == *a3) {
        goto LABEL_14;
      }
      uint64_t v13 = (void *)*a4;
      if (*a4 == *a5) {
        goto LABEL_10;
      }
    }
    uint64_t result = (uint64_t)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::insert(*(void **)a6, *(_DWORD **)(a6 + 8), (_DWORD *)*a2);
    uint64_t v15 = (uint64_t *)(a6 + 8);
    char v16 = a2;
LABEL_7:
    uint64_t *v15 = result + 8;
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v18 = *(void **)a6;
  unint64_t v17 = *(_DWORD **)(a6 + 8);
  if (v8 == v9) {
    goto LABEL_15;
  }
  uint64_t v19 = v8;
  do
  {
    uint64_t result = (uint64_t)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::insert(v18, v17, v19);
    unint64_t v17 = (_DWORD *)(result + 8);
    v19 += 8;
  }
  while (v19 != v9);
  BOOL v20 = v9;
  int v9 = v8;
LABEL_16:
  *unint64_t v7 = &v9[v20 - v8];
  v7[1] = v18;
  v7[2] = v17;
  return result;
}

_DWORD *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::insert(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = a2;
  unint64_t v7 = (_DWORD *)*a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)a2 - *a1;
  uint64_t v9 = v8 >> 3;
  uint64_t v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v12 = ((uint64_t)(v6 - (void)v7) >> 3) + 1;
    if (v12 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v10 - (void)v7;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    BOOL v41 = a1 + 2;
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 2), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    char v16 = &v15[8 * v9];
    uint64_t v37 = v15;
    uint64_t v38 = v16;
    uint64_t v39 = v16;
    uint64_t v40 = &v15[8 * v14];
    if (v9 == v14)
    {
      if (v8 < 1)
      {
        if (v7 == v4) {
          unint64_t v18 = 1;
        }
        else {
          unint64_t v18 = v8 >> 2;
        }
        void v42[4] = v11;
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)v11, v18);
        uint64_t v21 = v19;
        int v22 = &v19[8 * (v18 >> 2)];
        uint64_t v23 = &v19[8 * v20];
        uint64_t v24 = v38;
        uint64_t v25 = v38;
        uint64_t v26 = v22;
        uint64_t v27 = v39 - v38;
        if (v39 != v38)
        {
          uint64_t v35 = &v22[v27 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v36 = &v19[8 * v20];
          uint64_t v28 = 8 * (v27 >> 3);
          uint64_t v29 = &v19[8 * (v18 >> 2)];
          uint64_t v30 = v38;
          do
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v29, v30);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v29 + 1, (_DWORD *)v30 + 1);
            v29 += 8;
            v30 += 8;
            v28 -= 8;
          }
          while (v28);
          uint64_t v25 = v39;
          uint64_t v26 = v35;
          uint64_t v23 = v36;
        }
        uint64_t v31 = v37;
        int64_t v32 = v40;
        uint64_t v37 = v21;
        uint64_t v38 = v22;
        v42[0] = v31;
        v42[1] = v24;
        uint64_t v39 = v26;
        uint64_t v40 = v23;
        v42[2] = v25;
        v42[3] = v32;
        std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(v42);
        char v16 = v39;
      }
      else
      {
        unint64_t v17 = v9 + 2;
        if (v9 >= -1) {
          unint64_t v17 = v9 + 1;
        }
        v16 -= 8 * (v17 >> 1);
        uint64_t v38 = v16;
        uint64_t v39 = v16;
      }
    }
    int64_t v33 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v16, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v33 + 1, a3 + 1);
    v39 += 8;
    uint64_t v4 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer((uint64_t)a1, &v37, v4);
    std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(&v37);
  }
  else if (a2 == (_DWORD *)v6)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7[2 * v9 + 1], a3 + 1);
    a1[1] = v4 + 2;
  }
  else
  {
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__move_range((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 2));
    if (v4 <= a3) {
      a3 += 2 * (a1[1] > (unint64_t)a3);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v4, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v7[2 * v9 + 1], a3 + 1);
  }
  return v4;
}

void sub_23F6B7EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (_DWORD *)v6;
  if (v7 < a3)
  {
    unint64_t v10 = (_DWORD *)(a2 + v6 - a4);
    uint64_t v8 = *(_DWORD **)(a1 + 8);
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8, v10);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8 + 1, v10 + 1);
      v10 += 2;
      v8 += 2;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)&v12, a2, v7, v6);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(v7, a3, *(_DWORD **)(a1 + 8), (_DWORD *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a4 - 8, (int *)(v7 - 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a4 - 4);
      a4 -= 8;
      v7 -= 8;
    }
    while (v7 != a2);
  }
  return a3;
}

_DWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, v6);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, v6 + 1);
      v6 += 2;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

_DWORD *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>(uint64_t *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  char v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 3;
      if (v20 >= a5)
      {
        uint64_t v21 = &a3[2 * a5];
      }
      else
      {
        uint64_t v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(v9, v21, a4, *(_DWORD **)(v9 - 8));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)&v23, a3, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 3;
      uint64_t v16 = v10 - v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v27 = v9;
      if (v17) {
        unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v9, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      uint64_t v23 = v18;
      uint64_t v24 = &v18[8 * v15];
      uint64_t v25 = v24;
      uint64_t v26 = &v18[8 * v17];
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end_with_size<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>(&v23, a3, a5);
      char v5 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer((uint64_t)a1, &v23, v5);
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(&v23);
    }
  }
  return v5;
}

void sub_23F6B82D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_DWORD *std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end_with_size<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = (_DWORD *)*((void *)result + 2);
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    uint64_t v7 = &v4[2 * a3];
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, a2);
      uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, a2 + 1);
      v4 += 2;
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
    uint64_t v4 = v7;
  }
  *((void *)v3 + 2) = v4;
  return result;
}

uint64_t std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  uint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    uint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 >> 9];
    uint64_t v7 = (uint64_t)*v6 + 8 * (v5 & 0x1FF);
    uint64_t v8 = *(uint64_t *)((char *)v3 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != v8)
    {
      do
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 8;
        if (v7 - (void)*v6 == 4096)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v3 = (void **)a1[1];
      uint64_t v4 = (void **)a1[2];
    }
  }
  void *v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 256;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 512;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_23F6B876C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<realityio::UsdPropertyDelta>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 64;
      uint64_t v7 = v4 - 64;
      uint64_t v8 = v4 - 64;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 64;
        (*v9)(v7);
        v6 -= 64;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0,std::allocator<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::~__func()
{
}

void *std::__function::__func<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0,std::allocator<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F343E70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0,std::allocator<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F343E70;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0,std::allocator<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  v6[4] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t ***)(a1 + 8);
  void v6[3] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties();
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v6);
  for (uint64_t i = (const pxrInternal__aapl__pxrReserved__::UsdProperty *)v5[0];
        i != (const pxrInternal__aapl__pxrReserved__::UsdProperty *)v5[1];
        uint64_t i = (const pxrInternal__aapl__pxrReserved__::UsdProperty *)((char *)i + 32))
  {
    realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromPrimAndProperty(v3, a2, i);
  }
  v6[0] = (void **)v5;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdProperty>::__destroy_vector::operator()[abi:ne180100](v6);
}

void sub_23F6B89B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0,std::allocator<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0,std::allocator<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::target_type()
{
}

void std::__function::__func<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0,std::allocator<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::~__func()
{
}

void *std::__function::__func<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0,std::allocator<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F343EF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0,std::allocator<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F343EF0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0,std::allocator<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  v6[4] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t ***)(a1 + 8);
  void v6[3] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties();
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v6);
  for (uint64_t i = (const pxrInternal__aapl__pxrReserved__::UsdProperty *)v5[0];
        i != (const pxrInternal__aapl__pxrReserved__::UsdProperty *)v5[1];
        uint64_t i = (const pxrInternal__aapl__pxrReserved__::UsdProperty *)((char *)i + 32))
  {
    realityio::UsdStageObserver::_clearPreviousPropertyAndPrimMappings(v3, i);
    realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromPrimAndProperty(v3, a2, i);
  }
  v6[0] = (void **)v5;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdProperty>::__destroy_vector::operator()[abi:ne180100](v6);
}

void sub_23F6B8B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0,std::allocator<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0,std::allocator<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(uint64_t **a1, void *a2, _DWORD **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v11 = *a3;
    BOOL v10 = (uint64_t *)operator new(0x40uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 8, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 9, v11 + 1);
    v10[7] = 0;
    v10[6] = 0;
    v10[5] = (uint64_t)(v10 + 6);
    uint64_t *v10 = 0;
    v10[1] = 0;
    _DWORD v10[2] = (uint64_t)v8;
    char *v6 = v10;
    uint64_t v12 = (uint64_t *)**a1;
    uint64_t v13 = v10;
    if (v12)
    {
      *a1 = v12;
      uint64_t v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v5;
      uint64_t v9 = v5 + 4;
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, v5 + 4)) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, a2)) {
      break;
    }
    uint64_t v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  BOOL v10 = *v6;
  if (!*v6) {
    goto LABEL_10;
  }
  return v10;
}

uint64_t std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(*(void *)a1, v2);
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__erase_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t **a1, void *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    unint64_t v4 = v3;
    uint64_t v5 = (uint64_t *)v3[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    else
    {
      uint64_t v7 = v3;
      do
      {
        uint64_t v6 = (uint64_t *)v7[2];
        BOOL v8 = *v6 == (void)v7;
        uint64_t v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3) {
      *a1 = v6;
    }
    uint64_t v9 = a1[1];
    a1[2] = (uint64_t *)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

realityio::EndOfUpdateBuilder *realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(realityio::EndOfUpdateBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[9] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "EndOfUpdateBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kEndOfUpdateBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40A08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40A08))
  {
    operator new();
  }
  uint64_t v5 = _MergedGlobals_41;
  uint64_t v6 = (std::__shared_weak_count *)unk_268C40A00;
  if (unk_268C40A00) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C40A00 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F3440C0;
  void v12[3] = v12;
  v11[0] = &unk_26F344140;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F343F70;
  return this;
}

void sub_23F6B9110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24,char *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t *a38)
{
  BOOL v41 = *(std::__shared_weak_count **)(v39 - 88);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  a38 = (uint64_t *)&a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  uint64_t v42 = *(std::__shared_weak_count **)(v39 - 104);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  a25 = &a28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  MEMORY[0x2455D2BD0](v38, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40A08);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void realityio::EndOfUpdateBuilder::run(realityio::EndOfUpdateBuilder *this, realityio::Inputs *a2)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "end_of_update");
  std::mutex::lock((std::mutex *)(v3 + 64));
  unint64_t v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *unint64_t v4 = &unk_26F3441C0;
  void v4[3] = &unk_26F344210;
  v4[4] = 0;
  uint64_t v9 = __p;
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v3 + 40), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v9);
  uint64_t v6 = (std::__shared_weak_count *)v5[8];
  v5[7] = (uint64_t)(v4 + 3);
  unsigned char v5[8] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v3, (unsigned __int8 *)__p, (uint64_t)__p);
  std::mutex::unlock((std::mutex *)(v3 + 64));
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_23F6B93D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex::unlock(v16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void realityio::EndOfUpdateBuilder::~EndOfUpdateBuilder(realityio::EndOfUpdateBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

realityio::_anonymous_namespace_::EndOfUpdateDirtyPrimDescriptor *realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor::EndOfUpdateDirtyPrimDescriptor(realityio::_anonymous_namespace_::EndOfUpdateDirtyPrimDescriptor *this)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor((uint64_t)this, v4, v3);
  uint64_t v5 = v3;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  v3[0] = (void **)v4;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v3);
  *(void *)this = &unk_26F343FE8;
  return this;
}

void sub_23F6B94F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v3 - 40) = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23F6B9580(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor::~EndOfUpdateDirtyPrimDescriptor(realityio::_anonymous_namespace_::EndOfUpdateDirtyPrimDescriptor *this)
{
  *(void *)this = &unk_26F33EE30;
  uint64_t v1 = (void **)((char *)this + 8);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_26F33EE30;
  uint64_t v2 = (void **)((char *)this + 8);
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2455D2BD0](this, 0x10A1C402FEF67C7);
}

BOOL realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor::validate(pxrInternal__aapl__pxrReserved__::SdfPath *a1, void *a2)
{
  return *a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
}

CFStringRef realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor::description@<X0>(CFStringRef *a1@<X8>)
{
  *a1 = 0;
  CFStringRef result = CFStringCreateWithCString(0, "EndOfUpdateDirtyPrimDescriptor", 0x8000100u);
  *a1 = result;
  return result;
}

void sub_23F6B9710(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor *,std::shared_ptr<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor,realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>,std::allocator<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor *,std::shared_ptr<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor,realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>,std::allocator<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor *,std::shared_ptr<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor,realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>,std::allocator<realityio::anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F3440C0;
  return result;
}

void std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3440C0;
}

char *std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F344140;
  return result;
}

void std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F344140;
}

void std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "end_of_update");
  unint64_t v4 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)(v4 + 56), &v7, &v11);
  uint64_t v6 = v11;
  uint64_t v5 = v12;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (v10 < 0) {
    operator delete(__p);
  }
  std::string __p = v6;
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, (std::string::size_type *)&__p);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_23F6B9A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<void *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3441C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<void *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3441C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<void *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

realityio::SpotOrPointOrAmbientLightComponentBuilder *realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(realityio::SpotOrPointOrAmbientLightComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[30] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "SpotOrPointOrAmbientLightComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSpotOrPointOrAmbientLightComponentBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40A30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40A30))
  {
    operator new();
  }
  uint64_t v5 = qword_268C40A20;
  uint64_t v6 = *(std::__shared_weak_count **)algn_268C40A28;
  if (*(void *)algn_268C40A28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C40A28 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F3442B8;
  void v12[3] = v12;
  v11[0] = &unk_26F344338;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F344240;
  *((void *)this + 35) = RECameraMovementComponentGetComponentType();
  return this;
}

void sub_23F6BA470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  MEMORY[0x2455D2BD0](v72, 0x10A1C40F82F910ELL);
  a72 = (uint64_t)&a56;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  MEMORY[0x2455D2BD0](v73, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v74, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40A30);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__ *realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::SpotOrPointOrAmbientLightComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v127 = *MEMORY[0x263EF8340];
  uint64_t v111 = a2;
  uint64_t v3 = (realityio::Inputs *)((char *)a2 + 32);
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v107, v4, v3);
  unint64_t v5 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<BOOL>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v107, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 88), (uint64_t)&buf);
  if (buf.__r_.__value_.__s.__data_[0])
  {
    int v6 = buf.__r_.__value_.__s.__data_[8];
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v6 = 1;
  }
  unint64_t v7 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<BOOL>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v107, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 80), (uint64_t)&buf);
  if (buf.__r_.__value_.__s.__data_[0])
  {
    int v8 = buf.__r_.__value_.__s.__data_[8];
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v8 = 0;
  }
  unint64_t v9 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeColor4FAndGamut((pxrInternal__aapl__pxrReserved__::UsdObject *)&v107, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v9 + 72), (__n128 *)&buf, (__n128)xmmword_23F7CD1B0);
  long long v125 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  std::string::value_type v126 = buf.__r_.__value_.__s.__data_[16];
  float v106 = 0.0;
  unint64_t v10 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v107, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 56), (uint64_t)&buf);
  if (buf.__r_.__value_.__s.__data_[0])
  {
    float v11 = *(float *)&buf.__r_.__value_.__r.__words[1];
  }
  else
  {
    float v11 = 1.0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  float v106 = v11;
  int v105 = 0;
  unint64_t v12 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v107, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v12 + 64), (uint64_t)&buf);
  if (buf.__r_.__value_.__s.__data_[0])
  {
    int v14 = buf.__r_.__value_.__r.__words[1];
  }
  else
  {
    int v14 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  int v105 = v14;
  uint64_t v15 = v108;
  if (!v108 || (*((unsigned char *)v108 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v108, v13);
  }
  uint64_t v16 = (void *)*((void *)v15 + 3);
  unint64_t v17 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v17) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*v16 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v17 + 32) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_41;
  }
  uint64_t v18 = v108;
  if (!v108 || (*((unsigned char *)v108 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v108, v13);
  }
  uint64_t v19 = (void *)*((void *)v18 + 3);
  unint64_t v20 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v20) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*v19 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v20 + 24) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_41;
  }
  uint64_t v21 = v108;
  if (!v108 || (*((unsigned char *)v108 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v108, v13);
  }
  unint64_t v22 = (void *)*((void *)v21 + 3);
  unint64_t v23 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v23) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*v22 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v23 + 16) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_41:
    float v24 = *MEMORY[0x263F36F88];
  }
  else
  {
    float v24 = *MEMORY[0x263F36F88];
    if (!v6)
    {
      int v25 = 0;
      uint64_t v26 = (float *)MEMORY[0x263F36FA8];
      goto LABEL_43;
    }
  }
  uint64_t v26 = (float *)MEMORY[0x263F36F98];
  int v25 = 1;
LABEL_43:
  if (!v8) {
    float v24 = *v26;
  }
  float v106 = v106 * v24;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v104 = 0;
  uint64_t v102 = MEMORY[0x263F90738] + 16;
  if (!v103
    || (*(unsigned char *)(v103 + 57) & 8) != 0
    || !(*(unsigned int (**)(uint64_t *))(MEMORY[0x263F90738] + 48))(&v102))
  {
    int v31 = 0;
    goto LABEL_64;
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v100);
  pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingIesFileAttr(&v95, (pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *)&v102);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95) & 1) == 0)
  {
    MEMORY[0x2455CF810](v114, "inputs:shaping:ies:file");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&buf, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v107, (const pxrInternal__aapl__pxrReserved__::TfToken *)v114);
    LODWORD(v95) = buf.__r_.__value_.__l.__data_;
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
    buf.__r_.__value_.__l.__size_ = 0;
    uint64_t v28 = v96;
    std::string::size_type v96 = size;
    if (v28) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v97, (int *)&buf.__r_.__value_.__r.__words[2]);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v98);
    if ((v99 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::string::size_type v99 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf.__r_.__value_.__r.__words[2]);
    if (buf.__r_.__value_.__l.__size_) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(buf.__r_.__value_.__l.__size_);
    }
    if ((v114[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v114 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95, &buf);
  int v29 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf);
  if (v29) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
  }
  long long v30 = (realityio *)pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&buf);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  std::string v100 = buf;
  *((unsigned char *)&buf.__r_.__value_.__s + realityio::TextureBuilder::setOutput(*((uint64_t **)this + 21), *((_anonymous_namespace_ **)this + 18), (void *)this + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v101.__r_.__value_.__l.__data_);
    std::string v101 = __p;
    *((unsigned char *)&__p.__r_.__value_.__s + realityio::TextureBuilder::setOutput(*((uint64_t **)this + 21), *((_anonymous_namespace_ **)this + 18), (void *)this + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v101 = __p;
  }
  uint64_t v39 = *(id *)(realityio::logObjects(v30) + 24);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v107, v114);
    std::string::size_type Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v114);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = Text;
    _os_log_impl(&dword_23F4EA000, v39, OS_LOG_TYPE_DEFAULT, "Error IES light is not suppoorted on light \"%s\"", (uint8_t *)&buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v114);
  }

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&buf);
  BOOL v41 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==((unsigned __int8 *)&v100, (unsigned __int8 *)&buf);
  char v42 = (char)v41;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if (v42) {
      goto LABEL_89;
    }
LABEL_91:
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v94, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
    }
    else {
      std::string v94 = v101;
    }
    pxrInternal__aapl__pxrReserved__::ArGetResolver(v41);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&buf, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
    }
    else {
      std::string buf = v101;
    }
    pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    memset(&buf, 0, sizeof(buf));
    uint64_t v122 = 0;
    uint64_t v124 = 0;
    uint64_t v123 = 0;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    v90[0] = 0;
    v90[1] = 0;
    uint64_t v91 = 0;
    (*(void (**)(unsigned char *__return_ptr))(*(void *)v92 + 24))(v114);
    uint64_t v43 = *(unsigned char **)v114;
    size_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v92 + 16))(v92);
    int v31 = realityio::RIOIESInfoLoadFromString(v43, v44, (uint64_t)&buf, 1, (uint64_t)v90);
    uint64_t v45 = *(realityio **)&v114[8];
    if (*(void *)&v114[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v114[8]);
    }
    if (v31)
    {
      float v46 = v121 * 4.0 * 3.14159265 * 683.0;
      float v106 = v46;
      uint64_t v47 = v111;
      uint64_t ServiceLocator = REEngineGetServiceLocator();
      MEMORY[0x2455CDC30]();
      MEMORY[0x2455CDC60](ServiceLocator);
      std::string v87 = 0;
      char v88 = 0;
      uint64_t v89 = 0;
      std::vector<float>::resize((uint64_t)&v87, 0x100000uLL);
      __s = "texture";
      realityio::RIOIESInfoGenerateTexture2D((realityio *)&buf, v87, (void *)0x200, 0x200u, 4, 4);
      uint64_t v49 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002D8]);
      uint64_t v50 = (char *)operator new(0x100000uLL);
      bzero(v50, 0x100000uLL);
      uint64_t v51 = 0;
      uint64_t v52 = v87;
      uint64_t v53 = (char *)v87 + 12;
      long long v54 = (char *)v87 + 8;
      long long v55 = (char *)v87 + 4;
      uint64_t v56 = v50;
      do
      {
        for (uint64_t i = 0; i != 2048; i += 4)
        {
          float v58 = *((float *)v52 + i);
          float v59 = 0.0;
          if (v58 >= 0.0)
          {
            float v59 = 1.0;
            if (v58 <= 1.0) {
              float v59 = *((float *)v52 + i);
            }
          }
          int64x2_t v60 = &v56[i];
          *int64x2_t v60 = (int)(float)(v59 * 255.0);
          v60[1] = (int)(float)(*(float *)&v55[4 * i] * 255.0);
          v60[2] = (int)(float)(*(float *)&v54[4 * i] * 255.0);
          v60[3] = (int)(float)(*(float *)&v53[4 * i] * 255.0);
        }
        ++v51;
        v53 += 0x2000;
        uint64_t v52 = (realityio::RIOIESInfo *)((char *)v52 + 0x2000);
        v54 += 0x2000;
        v56 += 2048;
        v55 += 0x2000;
      }
      while (v51 != 512);
      uint64_t v61 = CGBitmapContextCreate(v50, 0x200uLL, 0x200uLL, 8uLL, 0x800uLL, v49, 5u);
      CGBitmapContextCreateImage(v61);
      operator delete(v50);
      uint64_t v62 = REAssetManagerTextureMemoryAssetCreateWithCGImage();
      REAssetSetMetadataString();
      realityio::Builder::addAsset((uint64_t *)this, v62, 0);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v107, &v85);
      uint64_t v82 = (uint64_t)v47;
      uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v85);
      int v64 = v25;
      std::string::basic_string[abi:ne180100]<0>(v83, __s);
      uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
      REMaterialAssetBuilderCreate();
      REMaterialAssetBuilderSetMaterialDefinition();
      REMaterialAssetBuilderSetTextureFromAsset();
      REMaterialAssetBuilderBindTextureToSampler();
      int v66 = (void *)REAssetManagerMaterialAssetBuilderBuild();
      if (*(char *)(String + 23) >= 0) {
        size_t v67 = *(unsigned __int8 *)(String + 23);
      }
      else {
        size_t v67 = *(void *)(String + 8);
      }
      uint64_t v68 = v114;
      std::string::basic_string[abi:ne180100]((uint64_t)v114, v67 + 17);
      if (v114[23] < 0) {
        uint64_t v68 = *(unsigned char **)v114;
      }
      if (v67)
      {
        if (*(char *)(String + 23) >= 0) {
          int v69 = (const void *)String;
        }
        else {
          int v69 = *(const void **)String;
        }
        memmove(v68, v69, v67);
      }
      strcpy(&v68[v67], "_lightMaterialDef");
      if (v114[23] >= 0) {
        uint64_t v70 = v114;
      }
      else {
        uint64_t v70 = *(unsigned char **)v114;
      }
      realityio::Builder::addAsset((uint64_t *)this, AssetHandle, (uint64_t)v70);
      if (*(char *)(String + 23) >= 0) {
        size_t v71 = *(unsigned __int8 *)(String + 23);
      }
      else {
        size_t v71 = *(void *)(String + 8);
      }
      uint64_t v72 = v112;
      std::string::basic_string[abi:ne180100]((uint64_t)v112, v71 + 14);
      int v25 = v64;
      if (v113 < 0) {
        uint64_t v72 = (void **)v112[0];
      }
      if (v71)
      {
        if (*(char *)(String + 23) >= 0) {
          uint64_t v73 = (const void *)String;
        }
        else {
          uint64_t v73 = *(const void **)String;
        }
        memmove(v72, v73, v71);
      }
      strcpy((char *)v72 + v71, "_lightMaterial");
      if (v113 >= 0) {
        uint64_t v74 = v112;
      }
      else {
        uint64_t v74 = (void **)v112[0];
      }
      realityio::Builder::addAsset((uint64_t *)this, (uint64_t)v66, (uint64_t)v74);
      RERelease();
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if ((v114[23] & 0x80000000) != 0) {
        operator delete(*(void **)v114);
      }
      if (v84 < 0) {
        operator delete(v83[0]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v85);
      v112[0] = v66;
      if (v66) {
        RERetain();
      }
      realityio::Builder::addAsset((uint64_t *)this, (uint64_t)v66, 0);
      RERelease();
      uint64_t v75 = *(void *)(v82 + 48);
      *(void *)int v114 = &unk_26F3443B8;
      *(void *)&v114[8] = v112;
      *(void *)&v114[16] = &__s;
      uint64_t v115 = v114;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v75 + 16))(v75, v114);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v114);
      REFilterMapComponentGetComponentType();
      uint64_t v76 = (void *)REComponentCreateByClass();
      v83[0] = v76;
      if (v76) {
        RERetain();
      }
      realityio::Builder::addComponent((uint64_t *)this, (uint64_t)v76);
      RERelease();
      uint64_t v77 = (realityio::EntityBuilder *)REFilterMapComponentSetMaterial();
      uint64_t v78 = realityio::EntityBuilder::kInputName(v77);
      realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v82, v78, (uint64_t)v114);
      if (v114[0])
      {
        uint64_t v85 = *(void *)&v114[8];
        if (*(void *)&v114[8]) {
          RERetain();
        }
      }
      else
      {
        uint64_t v85 = 0;
      }
      REEntityAddExistingComponent();
      realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v85);
      realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v114);
      realityio::WrappedRERef<REComponent *>::~WrappedRERef(v83);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(v112);
      if (v87)
      {
        char v88 = v87;
        operator delete(v87);
      }
    }
    else
    {
      uint64_t v79 = *(id *)(realityio::logObjects(v45) + 24);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
      {
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v80 = &v94;
        }
        else {
          uint64_t v80 = (std::string *)v94.__r_.__value_.__r.__words[0];
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v107, v112);
        uint64_t v81 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v112);
        *(_DWORD *)int v114 = 136315394;
        *(void *)&v114[4] = v80;
        *(_WORD *)&v114[12] = 2080;
        *(void *)&v114[14] = v81;
        _os_log_impl(&dword_23F4EA000, v79, OS_LOG_TYPE_DEFAULT, "Error reading IES file \"%s\" on light \"%s\"", v114, 0x16u);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v112);
      }
    }
    if (SHIBYTE(v91) < 0) {
      operator delete(v90[0]);
    }
    if (v122)
    {
      uint64_t v123 = v122;
      operator delete(v122);
    }
    if (*((void *)&v119 + 1))
    {
      *(void *)&long long v120 = *((void *)&v119 + 1);
      operator delete(*((void **)&v119 + 1));
    }
    if ((void)v118)
    {
      *((void *)&v118 + 1) = v118;
      operator delete((void *)v118);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v93) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v93);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    goto LABEL_171;
  }
  if ((v42 & 1) == 0) {
    goto LABEL_91;
  }
LABEL_89:
  int v31 = 0;
LABEL_171:
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v97);
  if (v96) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v96);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
LABEL_64:
  if (v8)
  {
    uint64_t ComponentType = REAmbientLightComponentGetComponentType();
  }
  else if (v25)
  {
    uint64_t ComponentType = REPointLightComponentGetComponentType();
  }
  else
  {
    uint64_t ComponentType = RESpotLightComponentGetComponentType();
  }
  v100.__r_.__value_.__r.__words[0] = ComponentType;
  if (v31) {
    v100.__r_.__value_.__r.__words[0] = REPointLightComponentGetComponentType();
  }
  float v106 = realityio::scaleLightIntensityByStageUnits((realityio *)&v107, v33, v106);
  *(void *)int v114 = 0;
  uint64_t v34 = *((void *)v111 + 6);
  uint64_t v35 = operator new(0x48uLL);
  *uint64_t v35 = &unk_26F344438;
  v35[1] = &v111;
  v35[2] = &v107;
  v35[3] = &v100;
  v35[4] = this;
  v35[5] = v114;
  v35[6] = &v106;
  v35[7] = &v105;
  v35[8] = &v125;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  (*(void (**)(uint64_t, std::string *))(*(void *)v34 + 16))(v34, &buf);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&buf);
  uint64_t v37 = *((void *)this + 2);
  uint64_t v36 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40A18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40A18))
  {
    operator new();
  }
  realityio::Outputs::storeValue<REComponent *&>(v37, (long long *)_MergedGlobals_42, (uint64_t *)v114);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  MEMORY[0x2455CEF10](&v102);
  if ((v110 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v109);
  uint64_t result = v108;
  if (v108) {
    return (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v108);
  }
  return result;
}

void sub_23F6BB94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  MEMORY[0x2455D2BD0](v43, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_268C40A18);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  MEMORY[0x2455CEF10](&a37);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a42);
  _Unwind_Resume(a1);
}

void *realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::SpotOrPointOrAmbientLightComponentBuilder *this, realityio::Inputs *a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a2 + 6);
  unint64_t v4 = a2;
  v5[0] = &unk_26F344538;
  v5[1] = &v4;
  _OWORD v5[2] = this;
  void v5[3] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v5);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_23F6BBCF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::SpotOrPointOrAmbientLightComponentBuilder::~SpotOrPointOrAmbientLightComponentBuilder(realityio::SpotOrPointOrAmbientLightComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F3442B8;
  return result;
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3442B8;
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), &v7, &v8);
  int v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F6BBEB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F344338;
  return result;
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F344338;
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  unint64_t v4 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v6 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>("none", (std::string::size_type *)(v4 + 88), &v6, &v7);
  unint64_t v5 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_23F6BC0B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::getAttributeValue<BOOL>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<BOOL>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(unsigned char *)a3)
      {
        std::string::size_type v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            unint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              unint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            unint64_t v9 = "";
          }
          uint64_t v14 = *(void *)(a3 + 24);
          uint64_t v13 = a3 + 24;
          uint64_t v12 = v14;
          if (*(char *)(v13 + 23) >= 0) {
            uint64_t v12 = v13;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v12;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v15);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      uint64_t v11 = v21;
      *(void *)(a3 + 24) = *(void *)&buf[16];
      *(void *)(a3 + 32) = v11;
      *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
      LOBYTE(v11) = HIBYTE(v21);
      long long v21 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v11;
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v18);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    uint64_t v10 = v21;
    *(void *)(a3 + 24) = *(void *)&buf[16];
    *(void *)(a3 + 32) = v10;
    *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
    LOBYTE(v10) = HIBYTE(v21);
    long long v21 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v10;
    if ((v18[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F6BC378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (!*(unsigned char *)v5 && *(char *)(v5 + 47) < 0) {
    operator delete(*(void **)(v5 + 24));
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<BOOL>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      std::string::size_type v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<BOOL>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F6BC558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<BOOL>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v35 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        char v6 = *(unsigned char *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 8) = v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C230], v11))
      {
        char v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        long long v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          char v14 = *(unsigned char *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>(v13);
          *(unsigned char *)a3 = 1;
          *(unsigned char *)(a3 + 8) = v14;
        }
        else
        {
          uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          uint64_t v25 = v32;
          *(void *)(a3 + 24) = v31;
          *(void *)(a3 + 32) = v25;
          *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          long long v32 = 0uLL;
          uint64_t v31 = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      uint64_t v23 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(vrealityio::TextureBuilder::setOutput(*((uint64_t **)this + 21), *((_anonymous_namespace_ **)this + 18), (void *)this + 23) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      uint64_t v22 = __p[0];
    }
    else
    {
      unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      std::operator+<char>();
      long long v15 = std::string::append(&v27, ") at the given time: ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v17 = &v26;
      }
      else {
        unint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v26.__r_.__value_.__l.__size_;
      }
      uint64_t v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      std::string::size_type v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      uint64_t v21 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v21;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      uint64_t v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  std::string::size_type v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  uint64_t v9 = v32;
  *(void *)(a3 + 24) = v31;
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  long long v32 = 0uLL;
  uint64_t v31 = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F6BC97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F3443B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3443B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  return MEMORY[0x270F1E738](**(void **)(a1 + 8), **(void **)(a1 + 16), "fallback", "bilinear");
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_26F344438;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F344438;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = **(void **)(a1 + 8);
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v3, v4, (uint64_t)v18);
  if (v18[0])
  {
    uint64_t v5 = v19;
    unint64_t v17 = v19;
    if (v19)
    {
      RERetain();
      uint64_t v6 = *(void *)(v2 + 280);
      if (**(void **)(a1 + 24) != v6 && v6 != RECameraMovementComponentGetComponentType()) {
        REEntityRemoveComponentByClass();
      }
      *(void *)(v2 + 280) = **(void **)(a1 + 24);
      uint64_t v7 = *(void *)(a1 + 40);
      long long v15 = *(_OWORD *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 64);
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v22 = 0;
      uint64_t v10 = (char *)operator new(0x38uLL);
      *(void *)uint64_t v10 = &unk_26F3444A8;
      *((void *)v10 + 1) = v7;
      *((void *)v10 + 2) = v2;
      *(_OWORD *)(v10 + 24) = v15;
      *((void *)v10 + 5) = v8;
      *((void *)v10 + 6) = v9;
      uint64_t v22 = v10;
      uint64_t v11 = REEntityGetOrAddComponentByClass();
      std::function<void ()(REComponent *)>::operator()((uint64_t)buf, v11);
      RENetworkMarkComponentDirty();
      std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](buf);
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v17 = 0;
  }
  char v12 = *(id *)(realityio::logObjects(v5) + 24);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), &v16);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16);
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v21 = Text;
    _os_log_impl(&dword_23F4EA000, v12, OS_LOG_TYPE_DEFAULT, "Stopping operation to set spot/point/ambient light component because entity no longer exists for prim \"%s\"", buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  }

LABEL_11:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v17);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v18);
}

void sub_23F6BCDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26F3444A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3444A8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  **(void **)(a1 + 8) = *a2;
  realityio::Builder::addComponent(v4, v3);
  uint64_t v5 = v4[35];
  if (v5 == REPointLightComponentGetComponentType())
  {
    exp2f(**(float **)(a1 + 32));
    REPointLightComponentSetIntensity();
    REPointLightComponentSetColorGamut3F();
    v11.n128_u32[0] = 1232348160;
    return MEMORY[0x270F1F3D8](v3, v11);
  }
  else
  {
    uint64_t v6 = v4[35];
    uint64_t ComponentType = RESpotLightComponentGetComponentType();
    exp2f(**(float **)(a1 + 32));
    if (v6 == ComponentType)
    {
      RESpotLightComponentSetIntensity();
      RESpotLightComponentSetColorGamut3F();
      unint64_t v12 = atomic_load(&realityio::tokens::LightBuilderTokens);
      if (!v12) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      long long v13 = *(atomic_uint **)(v12 + 120);
      unint64_t v21 = (unint64_t)v13;
      if ((v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v21 &= 0xFFFFFFFFFFFFFFF8;
      }
      realityio::getAttributeValue<float>(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, (uint64_t)v22);
      if (!v22[0] && v24 < 0) {
        operator delete(__p);
      }
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      RESpotLightComponentSetOuterAngle();
      unint64_t v14 = atomic_load(&realityio::tokens::LightBuilderTokens);
      if (!v14) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      long long v15 = *(atomic_uint **)(v14 + 128);
      unint64_t v21 = (unint64_t)v15;
      if ((v15 & 7) != 0)
      {
        int v16 = (atomic_uint *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v16, 2u, memory_order_relaxed) & 1) == 0) {
          unint64_t v21 = (unint64_t)v16;
        }
      }
      realityio::getAttributeValue<float>(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, (uint64_t)v22);
      if (!v22[0] && v24 < 0) {
        operator delete(__p);
      }
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v17 = atomic_load(&realityio::tokens::LightBuilderTokens);
      if (!v17) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      uint64_t v18 = *(atomic_uint **)(v17 + 136);
      unint64_t v21 = (unint64_t)v18;
      if ((v18 & 7) != 0)
      {
        uint64_t v19 = (atomic_uint *)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v19, 2u, memory_order_relaxed) & 1) == 0) {
          unint64_t v21 = (unint64_t)v19;
        }
      }
      realityio::getAttributeValue<float>(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, (uint64_t)v22);
      if (!v22[0] && v24 < 0) {
        operator delete(__p);
      }
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      return RESpotLightComponentSetInnerAngle();
    }
    else
    {
      REAmbientLightComponentSetIntensity();
      uint64_t v8 = *(__n128 **)(a1 + 40);
      __n128 v9 = *v8;
      uint64_t v10 = v8[1].n128_u8[0];
      return MEMORY[0x270F1BF38](v3, v10, v9);
    }
  }
}

void sub_23F6BD29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F344538;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F344538;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::EntityBuilder *a1)
{
  uint64_t v1 = **((void **)a1 + 1);
  uint64_t v2 = realityio::EntityBuilder::kInputName(a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v1, v2, (uint64_t)v5);
  if (v5[0])
  {
    uint64_t v4 = v6;
    if (v6)
    {
      RERetain();
      REEntityRemoveComponentByClass();
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v4);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v5);
}

void sub_23F6BD420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

std::string *ExecFault::fromString@<X0>(int a1@<W0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)a3 = a1;
  return std::string::operator=((std::string *)(a3 + 8), a2);
}

void sub_23F6BD4C8(_Unwind_Exception *a1)
{
  ExecFault::~ExecFault(v1);
  _Unwind_Resume(a1);
}

std::string *ExecFault::fromError@<X0>(int a1@<W0>, const std::string *a2@<X1>, __CFError *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = 0;
  uint64_t v5 = (std::string *)(a4 + 8);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 40) = 0;
  *(_DWORD *)a4 = a1;
  __n128 result = std::string::operator=((std::string *)(a4 + 8), a2);
  if (a3)
  {
    uint64_t v7 = (__CFString *)CFErrorCopyDescription(a3);
    CFTypeRef cf = v7;
    if (!v7) {
      goto LABEL_20;
    }
    realityio::CFStringCopyUTF8String(v7, (uint64_t)v13);
    if (!v13[0]) {
      goto LABEL_20;
    }
    int v8 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    {
      __n128 v9 = (void *)v14.__r_.__value_.__r.__words[0];
      if (!v14.__r_.__value_.__l.__size_)
      {
LABEL_19:
        operator delete(v9);
        goto LABEL_20;
      }
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((unsigned char *)&v14.__r_.__value_.__s + 23))
      {
LABEL_20:
        CFRelease(a3);
        return (std::string *)realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
      }
      std::string __p = v14;
    }
    std::string::append(v5, ": ");
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(v5, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    __n128 v9 = (void *)v14.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }
  return result;
}

void sub_23F6BD60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19)
{
  operator delete(v20);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&a19);
  ExecFault::~ExecFault(v19);
  _Unwind_Resume(a1);
}

void ExecFault::stringValue(int a1@<W0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  ExecFault::fromString(a1, a2, (uint64_t)v4);
  *(void *)(a3 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<ExecFault>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>::_PlaceCopy();
}

void sub_23F6BD6F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ExecFault::~ExecFault((void **)va);
  _Unwind_Resume(a1);
}

void ExecFault::errorValue(int a1@<W0>, const std::string *a2@<X1>, __CFError *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  ExecFault::fromError(a1, a2, a3, (uint64_t)v5);
  *(void *)(a4 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<ExecFault>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>::_PlaceCopy();
}

void sub_23F6BD7A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ExecFault::~ExecFault((void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrTfTokenGetTypeID()
{
  if (RIOPxrTfTokenGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrTfTokenGetTypeID::onceToken, &__block_literal_global_25);
  }
  return RIOPxrTfTokenGetTypeID::typeID;
}

void __RIOPxrTfTokenGetTypeID_block_invoke()
{
  if (!RIOPxrTfTokenGetTypeID::typeID) {
    RIOPxrTfTokenGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrTfTokenCreateWithCString(unsigned char *a1, int a2)
{
  if (a1 && *a1)
  {
    if (a2) {
      MEMORY[0x2455CF820](&v3, a1, 0);
    }
    else {
      MEMORY[0x2455CF810](&v3, a1);
    }
    uint64_t result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v3);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1) {
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_2_2);
    }
    return RIOPxrTfTokenEmpty::tokenRef;
  }
  return result;
}

void sub_23F6BD8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t RIOPxrTfTokenEmpty()
{
  if (RIOPxrTfTokenEmpty::onceToken != -1) {
    dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_2_2);
  }
  return RIOPxrTfTokenEmpty::tokenRef;
}

uint64_t __RIOPxrTfTokenEmpty_block_invoke()
{
  uint64_t v1 = 0;
  uint64_t result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v1);
  RIOPxrTfTokenEmpty::tokenRef = result;
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

CFStringRef RIOPxrTfTokenCopyString(uint64_t a1)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  unint64_t v1 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
  if (v1)
  {
    uint64_t v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0) {
      uint64_t v2 = *(const char **)v2;
    }
  }
  else
  {
    uint64_t v2 = "";
  }
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

uint64_t RIOPxrTfTokenIsImmortal(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      if ((v1 & 7) == 0) {
        return 1;
      }
      uint64_t v2 = (_DWORD *)(v1 & 0xFFFFFFFFFFFFFFF8);
      if ((*v2 & 1) == 0)
      {
        *(void *)(result + 16) = v2;
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL RIOPxrTfTokenIsEmpty(uint64_t a1)
{
  return !a1 || *(void *)(a1 + 16) == 0;
}

uint64_t RIOPxrTfTokenGetLength(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = *(void *)(result + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v1)
    {
      if (*(char *)(v1 + 39) < 0) {
        return *(void *)(v1 + 24);
      }
      else {
        return *(unsigned __int8 *)(v1 + 39);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFArray *RIOPxrTfTokenCopyTypeSchemaPropertyNames(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    uint64_t v40 = 0;
    BOOL v41 = 0;
    uint64_t v42 = 0;
    unint64_t v3 = atomic_load((unint64_t *)off_265071680);
    if (!v3) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
    }
    int8x8_t v4 = *(int8x8_t *)(v3 + 40);
    if (v4)
    {
      unint64_t v5 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
      uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
      v7.i16[0] = vaddlv_u8(v7);
      if (v7.u32[0] > 1uLL)
      {
        unint64_t v8 = v6;
        if (v6 >= *(void *)&v4) {
          unint64_t v8 = v6 % *(void *)&v4;
        }
      }
      else
      {
        unint64_t v8 = v6 & (*(void *)&v4 - 1);
      }
      __n128 v9 = *(void **)(*(void *)(v3 + 32) + 8 * v8);
      if (v9)
      {
        for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
        {
          unint64_t v11 = i[1];
          if (v6 == v11)
          {
            if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v5)
            {
              uint64_t v12 = i[3];
              if (v12) {
                BOOL v13 = &v40 == (char **)(v12 + 80);
              }
              else {
                BOOL v13 = 1;
              }
              if (!v13)
              {
                long long v15 = *(uint64_t **)(v12 + 80);
                std::string v14 = *(uint64_t **)(v12 + 88);
                unint64_t v16 = v14 - v15;
                unint64_t v17 = v40;
                if (v16 <= (v42 - (uint64_t)v40) >> 3)
                {
                  uint64_t v20 = v41;
                  unint64_t v21 = (v41 - v40) >> 3;
                  if (v21 >= v16)
                  {
                    if (v15 == v14)
                    {
                      char v24 = (uint64_t *)v40;
                    }
                    else
                    {
                      char v24 = (uint64_t *)v40;
                      do
                      {
                        pxrInternal__aapl__pxrReserved__::TfToken::operator=(v17, v15++);
                        v17 += 8;
                        ++v24;
                      }
                      while (v15 != v14);
                      uint64_t v20 = v41;
                    }
                    while (v20 != (char *)v24)
                    {
                      uint64_t v26 = *((void *)v20 - 1);
                      v20 -= 8;
                      uint64_t v25 = v26;
                      if ((v26 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                    }
                  }
                  else
                  {
                    for (uint64_t j = &v15[v21]; j != v14; v17 += 8)
                    {
                      uint64_t v23 = *j;
                      *(void *)unint64_t v17 = *j;
                      if ((v23 & 7) != 0
                        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                      {
                        *(void *)v17 &= 0xFFFFFFFFFFFFFFF8;
                      }
                      ++j;
                    }
                    char v24 = (uint64_t *)v17;
                  }
                  BOOL v41 = (char *)v24;
                }
                else
                {
                  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vdeallocate((void **)&v40);
                  if ((char *)v14 - (char *)v15 < 0) {
                    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v18 = (v42 - (uint64_t)v40) >> 2;
                  if (v18 <= v16) {
                    unint64_t v18 = v14 - v15;
                  }
                  if ((unint64_t)(v42 - (void)v40) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v19 = v18;
                  }
                  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vallocate[abi:ne180100](&v40, v19);
                  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_at_end<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>((uint64_t)&v40, v15, v14);
                }
              }
              break;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= *(void *)&v4) {
                v11 %= *(void *)&v4;
              }
            }
            else
            {
              v11 &= *(void *)&v4 - 1;
            }
            if (v11 != v8) {
              break;
            }
          }
        }
      }
    }
    if (v40 != v41)
    {
      std::__introsort<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *,false>((uint64_t)v40, (uint64_t *)v41, (uint64_t)&v43, 126 - 2 * __clz((v41 - v40) >> 3), 1);
      uint64_t v28 = (uint64_t *)v40;
      std::string v27 = v41;
      if (v40 != v41)
      {
        std::string::size_type v29 = (uint64_t *)(v40 + 8);
        do
        {
          if (v29 == (uint64_t *)v41) {
            goto LABEL_69;
          }
          unint64_t v30 = *(v29 - 1) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v31 = *v29++ & 0xFFFFFFFFFFFFFFF8;
        }
        while (v30 != v31);
        long long v32 = v29 - 2;
        if (v29 != (uint64_t *)v41)
        {
          do
          {
            uint64_t v33 = *v29;
            if ((*v32 & 0xFFFFFFFFFFFFFFF8) != (*v29 & 0xFFFFFFFFFFFFFFF8))
            {
              uint64_t v34 = v32 + 1;
              if (v29 - 1 != v32)
              {
                if ((*v34 & 7) != 0)
                {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  uint64_t v33 = *v29;
                }
                uint64_t *v34 = v33;
                uint64_t *v29 = 0;
              }
              ++v32;
            }
            ++v29;
          }
          while (v29 != (uint64_t *)v27);
          uint64_t v28 = (uint64_t *)v40;
          std::string v27 = v41;
        }
        uint64_t v35 = (char *)(v32 + 1);
        if (v32 + 1 == (uint64_t *)v27)
        {
LABEL_69:
          uint64_t v35 = v27;
          goto LABEL_71;
        }
        do
        {
          uint64_t v37 = *((void *)v27 - 1);
          v27 -= 8;
          uint64_t v36 = v37;
          if ((v37 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        while (v27 != v35);
        BOOL v41 = (char *)(v32 + 1);
        uint64_t v28 = (uint64_t *)v40;
LABEL_71:
        while (v28 != (uint64_t *)v35)
        {
          uint64_t v38 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v28);
          CFArrayAppendValue(Mutable, v38);
          CFRelease(v38);
          ++v28;
        }
      }
    }
    size_t v44 = &v40;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  }
  return Mutable;
}

void sub_23F6BDEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t _RIOPxrTfTokenCFFinalize(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

BOOL _RIOPxrTfTokenCFEqual(void *a1, void *a2)
{
  return (a1[2] & 0xFFFFFFFFFFFFFFF8) == (a2[2] & 0xFFFFFFFFFFFFFFF8);
}

unint64_t _RIOPxrTfTokenCFHash(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * (a1[2] & 0xFFFFFFFFFFFFFFF8));
}

CFStringRef _RIOPxrTfTokenCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrTfToken %p>", a1);
}

CFStringRef _RIOPxrTfTokenCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrTfToken %p>", a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v8 = (uint64_t *)result;
LABEL_2:
  int64_t v328 = a2 - 1;
  uint64_t i = v8;
  while (1)
  {
    unint64_t v8 = i;
    uint64_t v10 = (char *)a2 - (char *)i;
    uint64_t v11 = a2 - i;
    if (v6 || !v5)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return result;
        case 2:
          if ((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v157 = (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v157 = result;
          }
          if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v314 = (*v8 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v314 = result;
          }
          if (*(char *)(v157 + 23) >= 0) {
            uint64_t v315 = (char *)v157;
          }
          else {
            uint64_t v315 = *(char **)v157;
          }
          int v316 = *v315;
          if (*(char *)(v314 + 23) >= 0) {
            v317 = (char *)v314;
          }
          else {
            v317 = *(char **)v314;
          }
          if (v316 < 0
            || (int v318 = *v317, v318 < 0)
            || ((unsigned int v319 = v316,
                 unsigned int v320 = v318,
                 unsigned int v321 = (v318 ^ v319) & 0xFFFFFFDF,
                 v319 >= 0x40)
              ? (BOOL v322 = v321 == 0)
              : (BOOL v322 = 1),
                v322 || v320 < 0x40))
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            if (!result) {
              return result;
            }
          }
          else if ((((_BYTE)v319 + 5) & 0x1Fu) >= (((_BYTE)v320 + 5) & 0x1Fu))
          {
            return result;
          }
          uint64_t v323 = *v8;
          *unint64_t v8 = *(a2 - 1);
          *(a2 - 1) = v323;
          return result;
        case 3:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)v8, v8 + 1, v328);
        case 4:
          return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(v8, v8 + 1, v8 + 2, v328);
        case 5:
          return (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(v8, v8 + 1, v8 + 2, v8 + 3, v328);
        default:
          JUMPOUT(0);
      }
    }
    if (v10 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v8 == a2) {
        return result;
      }
      int64_t v191 = (unint64_t)(v11 - 2) >> 1;
      int64_t v330 = v191;
      while (1)
      {
        int64_t v192 = v191;
        if (v330 < v191) {
          goto LABEL_480;
        }
        uint64_t v193 = (2 * v191) | 1;
        int v194 = &v8[v193];
        if (2 * v191 + 2 < v11)
        {
          if ((*v194 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v195 = (*v194 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v195 = result;
          }
          if ((v194[1] & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v196 = (v194[1] & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v196 = result;
          }
          if (*(char *)(v195 + 23) >= 0) {
            long long v197 = (char *)v195;
          }
          else {
            long long v197 = *(char **)v195;
          }
          int v198 = *v197;
          if (*(char *)(v196 + 23) >= 0) {
            unint64_t v199 = (char *)v196;
          }
          else {
            unint64_t v199 = *(char **)v196;
          }
          if ((v198 & 0x80000000) == 0)
          {
            int v200 = *v199;
            if ((v200 & 0x80000000) == 0)
            {
              unsigned int v201 = v198;
              unsigned int v202 = v200;
              unsigned int v203 = (v200 ^ v201) & 0xFFFFFFDF;
              BOOL v204 = v201 < 0x40 || v203 == 0;
              if (!v204 && v202 >= 0x40)
              {
                if ((((_BYTE)v201 + 5) & 0x1Fu) >= (((_BYTE)v202 + 5) & 0x1Fu)) {
                  goto LABEL_405;
                }
LABEL_404:
                ++v194;
                uint64_t v193 = 2 * v192 + 2;
                goto LABEL_405;
              }
            }
          }
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
          if (result) {
            goto LABEL_404;
          }
        }
LABEL_405:
        if ((*v194 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          unint64_t v205 = (*v194 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          unint64_t v205 = result;
        }
        int v206 = &v8[v192];
        if ((*v206 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          unint64_t v207 = (*v206 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          unint64_t v207 = result;
        }
        if (*(char *)(v205 + 23) >= 0) {
          std::string::size_type v208 = (char *)v205;
        }
        else {
          std::string::size_type v208 = *(char **)v205;
        }
        int v209 = *v208;
        if (*(char *)(v207 + 23) >= 0) {
          uint64_t v210 = (char *)v207;
        }
        else {
          uint64_t v210 = *(char **)v207;
        }
        if (v209 < 0
          || (int v211 = *v210, v211 < 0)
          || ((unsigned int v212 = v209,
               unsigned int v213 = v211,
               unsigned int v214 = (v211 ^ v212) & 0xFFFFFFDF,
               v212 >= 0x40)
            ? (BOOL v215 = v214 == 0)
            : (BOOL v215 = 1),
              v215 || v213 < 0x40))
        {
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
          if (result) {
            goto LABEL_480;
          }
        }
        else if ((((_BYTE)v212 + 5) & 0x1Fu) < (((_BYTE)v213 + 5) & 0x1Fu))
        {
          goto LABEL_480;
        }
        uint64_t v216 = *v206;
        *int v206 = 0;
        int64_t v324 = v192;
        uint64_t v325 = v216;
        unint64_t v217 = v216 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v327 = (v216 & 0xFFFFFFFFFFFFFFF8) + 16;
        while (1)
        {
          uint64_t v218 = v194;
          if (v194 != v206)
          {
            if ((*v206 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*v206 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *int v206 = *v194;
            *int v194 = 0;
          }
          if (v330 < v193) {
            break;
          }
          uint64_t v219 = 2 * v193;
          uint64_t v193 = (2 * v193) | 1;
          int v194 = &v8[v193];
          uint64_t v220 = v219 + 2;
          if (v219 + 2 < v11)
          {
            if ((*v194 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              unint64_t v221 = (*v194 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              unint64_t v221 = result;
            }
            if ((v194[1] & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              unint64_t v222 = (v194[1] & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              unint64_t v222 = result;
            }
            if (*(char *)(v221 + 23) >= 0) {
              std::string::size_type v223 = (char *)v221;
            }
            else {
              std::string::size_type v223 = *(char **)v221;
            }
            int v224 = *v223;
            if (*(char *)(v222 + 23) >= 0) {
              int v225 = (char *)v222;
            }
            else {
              int v225 = *(char **)v222;
            }
            if (v224 < 0
              || (int v226 = *v225, v226 < 0)
              || ((unsigned int v227 = v224,
                   unsigned int v228 = v226,
                   unsigned int v229 = (v226 ^ v227) & 0xFFFFFFDF,
                   v227 >= 0x40)
                ? (BOOL v230 = v229 == 0)
                : (BOOL v230 = 1),
                  v230 || v228 < 0x40))
            {
              uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
              if (!result) {
                goto LABEL_453;
              }
LABEL_452:
              ++v194;
              uint64_t v193 = v220;
              goto LABEL_453;
            }
            if ((((_BYTE)v227 + 5) & 0x1Fu) < (((_BYTE)v228 + 5) & 0x1Fu)) {
              goto LABEL_452;
            }
          }
LABEL_453:
          if ((*v194 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v231 = (*v194 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v231 = result;
          }
          BOOL v232 = (char *)v327;
          if (!v217)
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            BOOL v232 = (char *)result;
          }
          if (*(char *)(v231 + 23) >= 0) {
            uint64_t v233 = (char *)v231;
          }
          else {
            uint64_t v233 = *(char **)v231;
          }
          int v234 = *v233;
          if (v232[23] >= 0) {
            uint64_t v235 = v232;
          }
          else {
            uint64_t v235 = *(char **)v232;
          }
          if (v234 < 0
            || (int v236 = *v235, v236 < 0)
            || ((unsigned int v237 = v234,
                 unsigned int v238 = v236,
                 unsigned int v239 = (v236 ^ v237) & 0xFFFFFFDF,
                 v237 >= 0x40)
              ? (BOOL v240 = v239 == 0)
              : (BOOL v240 = 1),
                v240 || v238 < 0x40))
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            int v206 = v218;
            if (result) {
              break;
            }
          }
          else
          {
            int v206 = v218;
            if ((((_BYTE)v237 + 5) & 0x1Fu) < (((_BYTE)v238 + 5) & 0x1Fu)) {
              break;
            }
          }
        }
        if ((*v218 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v218 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        int64_t v192 = v324;
        *uint64_t v218 = v325;
LABEL_480:
        int64_t v191 = v192 - 1;
        if (!v192)
        {
          uint64_t v241 = (unint64_t)v10 >> 3;
          while (1)
          {
            uint64_t v242 = 0;
            uint64_t v243 = *v8;
            *unint64_t v8 = 0;
            uint64_t v244 = v241 - 2;
            uint64_t v331 = v243;
            if (v241 < 2) {
              uint64_t v244 = v241 - 1;
            }
            uint64_t v245 = v244 >> 1;
            v246 = v8;
            do
            {
              v247 = &v246[v242 + 1];
              uint64_t v248 = 2 * v242;
              uint64_t v242 = (2 * v242) | 1;
              uint64_t v249 = v248 + 2;
              if (v248 + 2 >= v241) {
                goto LABEL_511;
              }
              if ((*v247 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                unint64_t v250 = (*v247 & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                unint64_t v250 = result;
              }
              if ((v247[1] & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                unint64_t v251 = (v247[1] & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                unint64_t v251 = result;
              }
              if (*(char *)(v250 + 23) >= 0) {
                int v252 = (char *)v250;
              }
              else {
                int v252 = *(char **)v250;
              }
              int v253 = *v252;
              if (*(char *)(v251 + 23) >= 0) {
                v254 = (char *)v251;
              }
              else {
                v254 = *(char **)v251;
              }
              if ((v253 & 0x80000000) == 0)
              {
                int v255 = *v254;
                if ((v255 & 0x80000000) == 0)
                {
                  unsigned int v256 = v253;
                  unsigned int v257 = v255;
                  unsigned int v258 = (v255 ^ v256) & 0xFFFFFFDF;
                  BOOL v259 = v256 < 0x40 || v258 == 0;
                  if (!v259 && v257 >= 0x40)
                  {
                    if ((((_BYTE)v256 + 5) & 0x1Fu) >= (((_BYTE)v257 + 5) & 0x1Fu)) {
                      goto LABEL_511;
                    }
LABEL_510:
                    ++v247;
                    uint64_t v242 = v249;
                    goto LABEL_511;
                  }
                }
              }
              uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
              if (result) {
                goto LABEL_510;
              }
LABEL_511:
              if (v247 != v246)
              {
                if ((*v246 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*v246 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                uint64_t *v246 = *v247;
                uint64_t *v247 = 0;
              }
              v246 = v247;
            }
            while (v242 <= v245);
            uint64_t v260 = *v247;
            uint64_t v261 = *v247 & 7;
            if (v247 == --a2)
            {
              if (v261) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v260 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t *v247 = v331;
            }
            else
            {
              if (v261) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v260 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t *v247 = *a2;
              *a2 = v331;
              uint64_t v262 = (char *)v247 - (char *)v8 + 8;
              if (v262 >= 9)
              {
                unint64_t v263 = (((unint64_t)v262 >> 3) - 2) >> 1;
                long long v264 = &v8[v263];
                if ((*v264 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  unint64_t v265 = (*v264 & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else
                {
                  uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  unint64_t v265 = result;
                }
                if ((*v247 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  unint64_t v266 = (*v247 & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else
                {
                  uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  unint64_t v266 = result;
                }
                if (*(char *)(v265 + 23) >= 0) {
                  uint64_t v267 = (char *)v265;
                }
                else {
                  uint64_t v267 = *(char **)v265;
                }
                int v268 = *v267;
                if (*(char *)(v266 + 23) >= 0) {
                  uint64_t v269 = (char *)v266;
                }
                else {
                  uint64_t v269 = *(char **)v266;
                }
                if (v268 < 0
                  || (int v270 = *v269, v270 < 0)
                  || ((unsigned int v271 = v268,
                       unsigned int v272 = v270,
                       unsigned int v273 = (v270 ^ v271) & 0xFFFFFFDF,
                       v271 >= 0x40)
                    ? (BOOL v274 = v273 == 0)
                    : (BOOL v274 = 1),
                      v274 || v272 < 0x40))
                {
                  uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
                  if (result) {
                    goto LABEL_546;
                  }
                }
                else if ((((_BYTE)v271 + 5) & 0x1Fu) < (((_BYTE)v272 + 5) & 0x1Fu))
                {
LABEL_546:
                  uint64_t v275 = *v247;
                  uint64_t *v247 = 0;
                  uint64_t v332 = v275;
                  unint64_t v276 = v275 & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v277 = (v275 & 0xFFFFFFFFFFFFFFF8) + 16;
                  while (1)
                  {
                    int v278 = v264;
                    if (v264 != v247)
                    {
                      if ((*v247 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(*v247 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      uint64_t *v247 = *v264;
                      *long long v264 = 0;
                    }
                    if (!v263) {
                      break;
                    }
                    unint64_t v263 = (v263 - 1) >> 1;
                    long long v264 = &v8[v263];
                    if ((*v264 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      unint64_t v279 = (*v264 & 0xFFFFFFFFFFFFFFF8) + 16;
                    }
                    else
                    {
                      uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                      unint64_t v279 = result;
                    }
                    v280 = (char *)v277;
                    if (!v276)
                    {
                      uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                      v280 = (char *)result;
                    }
                    if (*(char *)(v279 + 23) >= 0) {
                      v281 = (char *)v279;
                    }
                    else {
                      v281 = *(char **)v279;
                    }
                    int v282 = *v281;
                    if (v280[23] >= 0) {
                      int64_t v283 = v280;
                    }
                    else {
                      int64_t v283 = *(char **)v280;
                    }
                    if (v282 < 0
                      || (int v284 = *v283, v284 < 0)
                      || ((unsigned int v285 = v282,
                           unsigned int v286 = v284,
                           unsigned int v287 = (v284 ^ v285) & 0xFFFFFFDF,
                           v285 >= 0x40)
                        ? (BOOL v288 = v287 == 0)
                        : (BOOL v288 = 1),
                          v288 || v286 < 0x40))
                    {
                      uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
                      v247 = v278;
                      if ((result & 1) == 0) {
                        break;
                      }
                    }
                    else
                    {
                      v247 = v278;
                      if ((((_BYTE)v285 + 5) & 0x1Fu) >= (((_BYTE)v286 + 5) & 0x1Fu)) {
                        break;
                      }
                    }
                  }
                  if ((*v278 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*v278 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  *int v278 = v332;
                }
              }
            }
            if (v241-- <= 2) {
              return result;
            }
          }
        }
      }
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    BOOL v13 = &v8[(unint64_t)v11 >> 1];
    if ((unint64_t)v10 < 0x401)
    {
      uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)v13, v8, v328);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)v8, v13, v328);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)(v8 + 1), v13 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)(v8 + 2), &v8[v12 + 1], a2 - 3);
      uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)(v13 - 1), v13, &v8[v12 + 1]);
      uint64_t v14 = *v8;
      *unint64_t v8 = *v13;
      uint64_t *v13 = v14;
    }
    --a4;
    if (a5) {
      goto LABEL_31;
    }
    if ((*(v8 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      unint64_t v15 = (*(v8 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      unint64_t v15 = result;
    }
    if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      unint64_t v16 = (*v8 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      unint64_t v16 = result;
    }
    if (*(char *)(v15 + 23) >= 0) {
      unint64_t v17 = (char *)v15;
    }
    else {
      unint64_t v17 = *(char **)v15;
    }
    int v18 = *v17;
    if (*(char *)(v16 + 23) >= 0) {
      unint64_t v19 = (char *)v16;
    }
    else {
      unint64_t v19 = *(char **)v16;
    }
    if (v18 < 0
      || (int v20 = *v19, v20 < 0)
      || ((unsigned int v21 = v18,
           unsigned int v22 = v20,
           unsigned int v23 = (v20 ^ v21) & 0xFFFFFFDF,
           v21 >= 0x40)
        ? (BOOL v24 = v23 == 0)
        : (BOOL v24 = 1),
          v24 || v22 < 0x40))
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
      if (result) {
        goto LABEL_31;
      }
      goto LABEL_161;
    }
    if ((((_BYTE)v21 + 5) & 0x1Fu) >= (((_BYTE)v22 + 5) & 0x1Fu))
    {
LABEL_161:
      uint64_t v90 = *v8;
      *unint64_t v8 = 0;
      unint64_t v91 = v90 & 0xFFFFFFFFFFFFFFF8;
      if ((v90 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v92 = (char *)(v91 + 16);
      }
      else
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v92 = (char *)result;
      }
      if ((*v328 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        unint64_t v93 = (*v328 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        unint64_t v93 = result;
      }
      if (v92[23] >= 0) {
        std::string v94 = v92;
      }
      else {
        std::string v94 = *(char **)v92;
      }
      int v95 = *v94;
      if (*(char *)(v93 + 23) >= 0) {
        std::string::size_type v96 = (char *)v93;
      }
      else {
        std::string::size_type v96 = *(char **)v93;
      }
      if (v95 < 0
        || (int v97 = *v96, v97 < 0)
        || ((unsigned int v98 = v95,
             unsigned int v99 = v97,
             unsigned int v100 = (v97 ^ v98) & 0xFFFFFFDF,
             v98 >= 0x40)
          ? (BOOL v101 = v100 == 0)
          : (BOOL v101 = 1),
            v101 || v99 < 0x40))
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
        if (result)
        {
LABEL_181:
          for (uint64_t i = v8 + 1; ; ++i)
          {
            uint64_t v102 = (char *)(v91 + 16);
            if (!v91)
            {
              uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              uint64_t v102 = (char *)result;
            }
            if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              unint64_t v103 = (*i & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              unint64_t v103 = result;
            }
            if (v102[23] >= 0) {
              uint64_t v104 = v102;
            }
            else {
              uint64_t v104 = *(char **)v102;
            }
            int v105 = *v104;
            if (*(char *)(v103 + 23) >= 0) {
              float v106 = (char *)v103;
            }
            else {
              float v106 = *(char **)v103;
            }
            if (v105 < 0
              || (int v107 = *v106, v107 < 0)
              || ((unsigned int v108 = v105,
                   unsigned int v109 = v107,
                   unsigned int v110 = (v107 ^ v108) & 0xFFFFFFDF,
                   v108 >= 0x40)
                ? (BOOL v111 = v110 == 0)
                : (BOOL v111 = 1),
                  v111 || v109 < 0x40))
            {
              uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
              if (result) {
                goto LABEL_228;
              }
            }
            else if ((((_BYTE)v108 + 5) & 0x1Fu) < (((_BYTE)v109 + 5) & 0x1Fu))
            {
              goto LABEL_228;
            }
          }
        }
      }
      else if ((((_BYTE)v98 + 5) & 0x1Fu) < (((_BYTE)v99 + 5) & 0x1Fu))
      {
        goto LABEL_181;
      }
      for (uint64_t i = v8 + 1; i < a2; ++i)
      {
        int v112 = (char *)(v91 + 16);
        if (!v91)
        {
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          int v112 = (char *)result;
        }
        if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          unint64_t v113 = (*i & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          unint64_t v113 = result;
        }
        if (v112[23] >= 0) {
          int v114 = v112;
        }
        else {
          int v114 = *(char **)v112;
        }
        int v115 = *v114;
        if (*(char *)(v113 + 23) >= 0) {
          int v116 = (char *)v113;
        }
        else {
          int v116 = *(char **)v113;
        }
        if (v115 < 0
          || (int v117 = *v116, v117 < 0)
          || ((unsigned int v118 = v115,
               unsigned int v119 = v117,
               unsigned int v120 = (v117 ^ v118) & 0xFFFFFFDF,
               v118 >= 0x40)
            ? (BOOL v121 = v120 == 0)
            : (BOOL v121 = 1),
              v121 || v119 < 0x40))
        {
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
          if (result) {
            break;
          }
        }
        else if ((((_BYTE)v118 + 5) & 0x1Fu) < (((_BYTE)v119 + 5) & 0x1Fu))
        {
          break;
        }
      }
LABEL_228:
      uint64_t j = a2;
      if (i < a2)
      {
        for (uint64_t j = a2 - 1; ; --j)
        {
          uint64_t v123 = (char *)(v91 + 16);
          if (!v91)
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v123 = (char *)result;
          }
          if ((*j & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v124 = (*j & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v124 = result;
          }
          if (v123[23] >= 0) {
            long long v125 = v123;
          }
          else {
            long long v125 = *(char **)v123;
          }
          int v126 = *v125;
          if (*(char *)(v124 + 23) >= 0) {
            uint64_t v127 = (char *)v124;
          }
          else {
            uint64_t v127 = *(char **)v124;
          }
          if (v126 < 0
            || (int v128 = *v127, v128 < 0)
            || ((unsigned int v129 = v126,
                 unsigned int v130 = v128,
                 unsigned int v131 = (v128 ^ v129) & 0xFFFFFFDF,
                 v129 >= 0x40)
              ? (BOOL v132 = v131 == 0)
              : (BOOL v132 = 1),
                v132 || v130 < 0x40))
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            if (!result) {
              break;
            }
          }
          else if ((((_BYTE)v129 + 5) & 0x1Fu) >= (((_BYTE)v130 + 5) & 0x1Fu))
          {
            break;
          }
        }
      }
      if (i >= j) {
        goto LABEL_296;
      }
      do
      {
        uint64_t v133 = *i;
        *i++ = *j;
        *uint64_t j = v133;
        while (1)
        {
          uint64_t v134 = v91 + 16;
          if (!v91)
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v134 = result;
          }
          if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v135 = (*i & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v135 = result;
          }
          BOOL v136 = *(char *)(v134 + 23) >= 0 ? (char *)v134 : *(char **)v134;
          int v137 = *v136;
          uint64_t v138 = *(char *)(v135 + 23) >= 0 ? (char *)v135 : *(char **)v135;
          if (v137 < 0) {
            break;
          }
          int v139 = *v138;
          if (v139 < 0) {
            break;
          }
          unsigned int v140 = v137;
          unsigned int v141 = v139;
          unsigned int v142 = (v139 ^ v140) & 0xFFFFFFDF;
          BOOL v143 = v140 < 0x40 || v142 == 0;
          if (v143 || v141 < 0x40) {
            break;
          }
          if ((((_BYTE)v140 + 5) & 0x1Fu) < (((_BYTE)v141 + 5) & 0x1Fu)) {
            goto LABEL_274;
          }
LABEL_272:
          ++i;
        }
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
        if ((result & 1) == 0) {
          goto LABEL_272;
        }
        do
        {
          while (1)
          {
LABEL_274:
            --j;
            uint64_t v144 = v91 + 16;
            if (!v91)
            {
              uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              uint64_t v144 = result;
            }
            if ((*j & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              unint64_t v145 = (*j & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              unint64_t v145 = result;
            }
            size_t v146 = *(char *)(v144 + 23) >= 0 ? (char *)v144 : *(char **)v144;
            int v147 = *v146;
            size_t v148 = *(char *)(v145 + 23) >= 0 ? (char *)v145 : *(char **)v145;
            if (v147 < 0) {
              break;
            }
            int v149 = *v148;
            if (v149 < 0) {
              break;
            }
            unsigned int v150 = v147;
            unsigned int v151 = v149;
            unsigned int v152 = (v149 ^ v150) & 0xFFFFFFDF;
            BOOL v153 = v150 < 0x40 || v152 == 0;
            if (v153 || v151 < 0x40) {
              break;
            }
            if ((((_BYTE)v150 + 5) & 0x1Fu) >= (((_BYTE)v151 + 5) & 0x1Fu)) {
              goto LABEL_295;
            }
          }
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
        }
        while (result);
LABEL_295:
        ;
      }
      while (i < j);
LABEL_296:
      int v154 = i - 1;
      uint64_t v155 = *v8;
      uint64_t v156 = *v8 & 7;
      BOOL v5 = i - 1 >= v8;
      BOOL v6 = i - 1 == v8;
      if (i - 1 == v8)
      {
        if (v156) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v155 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (v156) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v155 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *unint64_t v8 = *v154;
        uint64_t *v154 = 0;
      }
      a5 = 0;
      uint64_t *v154 = v90;
    }
    else
    {
LABEL_31:
      uint64_t v25 = 0;
      uint64_t v26 = *v8;
      *unint64_t v8 = 0;
      unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        if ((v8[v25 + 1] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          unint64_t v28 = (v8[v25 + 1] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          unint64_t v28 = result;
        }
        unint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 16;
        if (!v27)
        {
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          unint64_t v29 = result;
        }
        unint64_t v30 = *(char *)(v28 + 23) >= 0 ? (char *)v28 : *(char **)v28;
        int v31 = *v30;
        long long v32 = *(char *)(v29 + 23) >= 0 ? (char *)v29 : *(char **)v29;
        if (v31 < 0) {
          break;
        }
        int v33 = *v32;
        if (v33 < 0) {
          break;
        }
        unsigned int v34 = v31;
        unsigned int v35 = v33;
        unsigned int v36 = (v33 ^ v34) & 0xFFFFFFDF;
        BOOL v37 = v34 < 0x40 || v36 == 0;
        if (v37 || v35 < 0x40) {
          break;
        }
        if ((((_BYTE)v34 + 5) & 0x1Fu) >= (((_BYTE)v35 + 5) & 0x1Fu)) {
          goto LABEL_53;
        }
LABEL_51:
        ++v25;
      }
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
      if (result) {
        goto LABEL_51;
      }
LABEL_53:
      uint64_t v38 = &v8[v25];
      unint64_t v39 = (unint64_t)&v8[v25 + 1];
      uint64_t k = a2 - 1;
      if (v25 * 8)
      {
        while (1)
        {
          if ((*k & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v41 = (*k & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v41 = result;
          }
          unint64_t v42 = (v26 & 0xFFFFFFFFFFFFFFF8) + 16;
          if (!v27)
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v42 = result;
          }
          if (*(char *)(v41 + 23) >= 0) {
            char v43 = (char *)v41;
          }
          else {
            char v43 = *(char **)v41;
          }
          int v44 = *v43;
          if (*(char *)(v42 + 23) >= 0) {
            uint64_t v45 = (char *)v42;
          }
          else {
            uint64_t v45 = *(char **)v42;
          }
          if (v44 < 0
            || (int v46 = *v45, v46 < 0)
            || ((unsigned int v47 = v44,
                 unsigned int v48 = v46,
                 unsigned int v49 = (v46 ^ v47) & 0xFFFFFFDF,
                 v47 >= 0x40)
              ? (BOOL v50 = v49 == 0)
              : (BOOL v50 = 1),
                v50 || v48 < 0x40))
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            if (result) {
              goto LABEL_103;
            }
          }
          else if ((((_BYTE)v47 + 5) & 0x1Fu) < (((_BYTE)v48 + 5) & 0x1Fu))
          {
            goto LABEL_103;
          }
          --k;
        }
      }
      uint64_t k = a2;
      if (v39 < (unint64_t)a2)
      {
        for (uint64_t k = a2 - 1; ; --k)
        {
          if ((*k & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v51 = (*k & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v51 = result;
          }
          unint64_t v52 = (v26 & 0xFFFFFFFFFFFFFFF8) + 16;
          if (!v27)
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v52 = result;
          }
          if (*(char *)(v51 + 23) >= 0) {
            uint64_t v53 = (char *)v51;
          }
          else {
            uint64_t v53 = *(char **)v51;
          }
          int v54 = *v53;
          if (*(char *)(v52 + 23) >= 0) {
            long long v55 = (char *)v52;
          }
          else {
            long long v55 = *(char **)v52;
          }
          if (v54 < 0
            || (int v56 = *v55, v56 < 0)
            || ((unsigned int v57 = v54,
                 unsigned int v58 = v56,
                 unsigned int v59 = (v56 ^ v57) & 0xFFFFFFDF,
                 v57 >= 0x40)
              ? (BOOL v60 = v59 == 0)
              : (BOOL v60 = 1),
                v60 || v58 < 0x40))
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            if (v39 >= (unint64_t)k) {
              char v61 = 1;
            }
            else {
              char v61 = result;
            }
            if (v61) {
              break;
            }
          }
          else if (v39 >= (unint64_t)k || (((_BYTE)v57 + 5) & 0x1Fu) < (((_BYTE)v58 + 5) & 0x1Fu))
          {
            break;
          }
        }
      }
LABEL_103:
      if (v39 >= (unint64_t)k) {
        goto LABEL_150;
      }
      uint64_t v62 = &v8[v25 + 1];
      char v63 = k;
      while (2)
      {
        uint64_t v64 = *v62;
        *v62++ = *v63;
        *char v63 = v64;
        while (2)
        {
          if ((*v62 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v65 = (*v62 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v65 = result;
          }
          unint64_t v66 = (v26 & 0xFFFFFFFFFFFFFFF8) + 16;
          if (!v27)
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v66 = result;
          }
          if (*(char *)(v65 + 23) >= 0) {
            size_t v67 = (char *)v65;
          }
          else {
            size_t v67 = *(char **)v65;
          }
          int v68 = *v67;
          if (*(char *)(v66 + 23) >= 0) {
            int v69 = (char *)v66;
          }
          else {
            int v69 = *(char **)v66;
          }
          if ((v68 & 0x80000000) == 0)
          {
            int v70 = *v69;
            if ((v70 & 0x80000000) == 0)
            {
              unsigned int v71 = v68;
              unsigned int v72 = v70;
              unsigned int v73 = (v70 ^ v71) & 0xFFFFFFDF;
              BOOL v74 = v71 < 0x40 || v73 == 0;
              if (!v74 && v72 >= 0x40)
              {
                if ((((_BYTE)v71 + 5) & 0x1Fu) >= (((_BYTE)v72 + 5) & 0x1Fu)) {
                  goto LABEL_127;
                }
                goto LABEL_125;
              }
            }
          }
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
          if (result)
          {
LABEL_125:
            ++v62;
            continue;
          }
          break;
        }
        do
        {
          while (1)
          {
LABEL_127:
            uint64_t v75 = *--v63;
            unint64_t v76 = v75 & 0xFFFFFFFFFFFFFFF8;
            if ((v75 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v77 = v76 + 16;
            }
            else
            {
              uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              uint64_t v77 = result;
            }
            unint64_t v78 = (v26 & 0xFFFFFFFFFFFFFFF8) + 16;
            if (!v27)
            {
              uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              unint64_t v78 = result;
            }
            uint64_t v79 = *(char *)(v77 + 23) >= 0 ? (char *)v77 : *(char **)v77;
            int v80 = *v79;
            uint64_t v81 = *(char *)(v78 + 23) >= 0 ? (char *)v78 : *(char **)v78;
            if (v80 < 0) {
              break;
            }
            int v82 = *v81;
            if (v82 < 0) {
              break;
            }
            unsigned int v83 = v80;
            unsigned int v84 = v82;
            unsigned int v85 = (v82 ^ v83) & 0xFFFFFFDF;
            BOOL v86 = v83 < 0x40 || v85 == 0;
            if (v86 || v84 < 0x40) {
              break;
            }
            if ((((_BYTE)v83 + 5) & 0x1Fu) < (((_BYTE)v84 + 5) & 0x1Fu)) {
              goto LABEL_148;
            }
          }
          uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
        }
        while ((result & 1) == 0);
LABEL_148:
        if (v62 < v63) {
          continue;
        }
        break;
      }
      uint64_t v38 = v62 - 1;
LABEL_150:
      uint64_t v87 = *v8;
      uint64_t v88 = *v8 & 7;
      if (v38 == v8)
      {
        if (v88) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (v88) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *unint64_t v8 = *v38;
        *uint64_t v38 = 0;
      }
      *uint64_t v38 = v26;
      if (v39 < (unint64_t)k)
      {
LABEL_159:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *,false>(v8, v38, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t i = v38 + 1;
      }
      else
      {
        char v89 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(v8, v38);
        uint64_t i = v38 + 1;
        uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(v38 + 1, a2);
        if (result)
        {
          a2 = v38;
          if (v89) {
            return result;
          }
          goto LABEL_2;
        }
        if ((v89 & 1) == 0) {
          goto LABEL_159;
        }
      }
    }
  }
  int v158 = v8 + 1;
  BOOL v160 = v8 == a2 || v158 == a2;
  if (a5)
  {
    if (v160) {
      return result;
    }
    uint64_t v161 = 0;
    int v162 = v8;
    while (2)
    {
      size_t v163 = v162;
      int v162 = v158;
      if ((v163[1] & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        unint64_t v164 = (v163[1] & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        unint64_t v164 = result;
      }
      if ((*v163 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        unint64_t v165 = (*v163 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        unint64_t v165 = result;
      }
      if (*(char *)(v164 + 23) >= 0) {
        uint64_t v166 = (char *)v164;
      }
      else {
        uint64_t v166 = *(char **)v164;
      }
      int v167 = *v166;
      if (*(char *)(v165 + 23) >= 0) {
        uint64_t v168 = (char *)v165;
      }
      else {
        uint64_t v168 = *(char **)v165;
      }
      if (v167 < 0
        || (int v169 = *v168, v169 < 0)
        || ((unsigned int v170 = v167,
             unsigned int v171 = v169,
             unsigned int v172 = (v169 ^ v170) & 0xFFFFFFDF,
             v170 >= 0x40)
          ? (BOOL v173 = v172 == 0)
          : (BOOL v173 = 1),
            v173 || v171 < 0x40))
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
        if (result) {
          goto LABEL_346;
        }
      }
      else if ((((_BYTE)v170 + 5) & 0x1Fu) < (((_BYTE)v171 + 5) & 0x1Fu))
      {
LABEL_346:
        uint64_t v174 = 0;
        uint64_t v175 = *v162;
        *int v162 = 0;
        uint64_t v329 = v175;
        unint64_t v176 = v175 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v177 = (v175 & 0xFFFFFFFFFFFFFFF8) + 16;
        for (uint64_t m = v161; ; m -= 8)
        {
          if ((v174 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          size_t v179 = (uint64_t *)((char *)v8 + m);
          uint64_t v180 = *(uint64_t *)((char *)v8 + m);
          uint64_t *v179 = 0;
          v179[1] = v180;
          if (!m) {
            break;
          }
          BOOL v181 = (char *)v177;
          if (!v176)
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            BOOL v181 = (char *)result;
          }
          if ((*(uint64_t *)((char *)v8 + m - 8) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v182 = (*(uint64_t *)((char *)v8 + m - 8) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            unint64_t v182 = result;
          }
          if (v181[23] >= 0) {
            uint64_t v183 = v181;
          }
          else {
            uint64_t v183 = *(char **)v181;
          }
          int v184 = *v183;
          if (*(char *)(v182 + 23) >= 0) {
            uint64_t v185 = (char *)v182;
          }
          else {
            uint64_t v185 = *(char **)v182;
          }
          if (v184 < 0
            || (int v186 = *v185, v186 < 0)
            || ((unsigned int v187 = v184,
                 unsigned int v188 = v186,
                 unsigned int v189 = (v186 ^ v187) & 0xFFFFFFDF,
                 v187 >= 0x40)
              ? (BOOL v190 = v189 == 0)
              : (BOOL v190 = 1),
                v190 || v188 < 0x40))
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            if (!result)
            {
              size_t v163 = (uint64_t *)((char *)v8 + m);
              goto LABEL_373;
            }
          }
          else if ((((_BYTE)v187 + 5) & 0x1Fu) >= (((_BYTE)v188 + 5) & 0x1Fu))
          {
            goto LABEL_373;
          }
          --v163;
          uint64_t v174 = *v179;
        }
        size_t v163 = v8;
LABEL_373:
        if ((*v163 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v163 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *size_t v163 = v329;
      }
      int v158 = v162 + 1;
      v161 += 8;
      if (v162 + 1 == a2) {
        return result;
      }
      continue;
    }
  }
  if (v160) {
    return result;
  }
  while (2)
  {
    v290 = v8;
    unint64_t v8 = v158;
    if ((v290[1] & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      unint64_t v291 = (v290[1] & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      unint64_t v291 = result;
    }
    if ((*v290 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      unint64_t v292 = (*v290 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      unint64_t v292 = result;
    }
    if (*(char *)(v291 + 23) >= 0) {
      v293 = (char *)v291;
    }
    else {
      v293 = *(char **)v291;
    }
    int v294 = *v293;
    if (*(char *)(v292 + 23) >= 0) {
      uint64_t v295 = (char *)v292;
    }
    else {
      uint64_t v295 = *(char **)v292;
    }
    if (v294 < 0
      || (int v296 = *v295, v296 < 0)
      || ((unsigned int v297 = v294,
           unsigned int v298 = v296,
           unsigned int v299 = (v296 ^ v297) & 0xFFFFFFDF,
           v297 >= 0x40)
        ? (BOOL v300 = v299 == 0)
        : (BOOL v300 = 1),
          v300 || v298 < 0x40))
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
      if (!result) {
        goto LABEL_629;
      }
    }
    else if ((((_BYTE)v297 + 5) & 0x1Fu) >= (((_BYTE)v298 + 5) & 0x1Fu))
    {
      goto LABEL_629;
    }
    uint64_t v301 = 0;
    uint64_t v302 = *v8;
    *unint64_t v8 = 0;
    while (2)
    {
      if ((v301 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v301 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v303 = *v290;
      uint64_t *v290 = 0;
      v290[1] = v303;
      unint64_t v304 = (v302 & 0xFFFFFFFFFFFFFFF8) + 16;
      if ((v302 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        unint64_t v304 = result;
      }
      if ((*(v290 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        unint64_t v305 = (*(v290 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        unint64_t v305 = result;
      }
      if (*(char *)(v304 + 23) >= 0) {
        uint64_t v306 = (char *)v304;
      }
      else {
        uint64_t v306 = *(char **)v304;
      }
      int v307 = *v306;
      if (*(char *)(v305 + 23) >= 0) {
        v308 = (char *)v305;
      }
      else {
        v308 = *(char **)v305;
      }
      if ((v307 & 0x80000000) == 0)
      {
        int v309 = *v308;
        if ((v309 & 0x80000000) == 0)
        {
          unsigned int v310 = v307;
          unsigned int v311 = v309;
          unsigned int v312 = (v309 ^ v310) & 0xFFFFFFDF;
          BOOL v313 = v310 < 0x40 || v312 == 0;
          if (!v313 && v311 >= 0x40)
          {
            if ((((_BYTE)v310 + 5) & 0x1Fu) >= (((_BYTE)v311 + 5) & 0x1Fu)) {
              break;
            }
            goto LABEL_624;
          }
        }
      }
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
      if (result)
      {
LABEL_624:
        uint64_t v301 = *v290--;
        continue;
      }
      break;
    }
    if ((*v290 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v290 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t *v290 = v302;
LABEL_629:
    int v158 = v8 + 1;
    if (v8 + 1 != a2) {
      continue;
    }
    return result;
  }
}

void sub_23F6BF86C(_Unwind_Exception *a1)
{
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit(v1, 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int8x8_t v4 = a2;
  BOOL v5 = (uint64_t *)result;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v6 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    unint64_t v6 = result;
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v7 = (*v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    unint64_t v7 = result;
  }
  if (*(char *)(v6 + 23) >= 0) {
    unint64_t v8 = (char *)v6;
  }
  else {
    unint64_t v8 = *(char **)v6;
  }
  int v9 = *v8;
  if (*(char *)(v7 + 23) >= 0) {
    uint64_t v10 = (char *)v7;
  }
  else {
    uint64_t v10 = *(char **)v7;
  }
  if (v9 < 0
    || (int v11 = *v10, v11 < 0)
    || ((unsigned int v12 = v9,
         unsigned int v13 = v11,
         unsigned int v14 = (v11 ^ v12) & 0xFFFFFFDF,
         v12 >= 0x40)
      ? (BOOL v15 = v14 == 0)
      : (BOOL v15 = 1),
        v15 || v13 < 0x40))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (result) {
      goto LABEL_21;
    }
  }
  else if ((((_BYTE)v12 + 5) & 0x1Fu) < (((_BYTE)v13 + 5) & 0x1Fu))
  {
LABEL_21:
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      unint64_t v16 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      unint64_t v16 = result;
    }
    if ((*v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      unint64_t v17 = (*v4 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      unint64_t v17 = result;
    }
    if (*(char *)(v16 + 23) >= 0) {
      int v18 = (char *)v16;
    }
    else {
      int v18 = *(char **)v16;
    }
    int v19 = *v18;
    if (*(char *)(v17 + 23) >= 0) {
      int v20 = (char *)v17;
    }
    else {
      int v20 = *(char **)v17;
    }
    if (v19 < 0
      || (int v21 = *v20, v21 < 0)
      || ((unsigned int v22 = v19,
           unsigned int v23 = v21,
           unsigned int v24 = (v21 ^ v22) & 0xFFFFFFDF,
           v22 >= 0x40)
        ? (BOOL v25 = v24 == 0)
        : (BOOL v25 = 1),
          v25 || v23 < 0x40))
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
      if (result) {
        goto LABEL_41;
      }
    }
    else if ((((_BYTE)v22 + 5) & 0x1Fu) < (((_BYTE)v23 + 5) & 0x1Fu))
    {
LABEL_41:
      int8x8_t v4 = a3;
LABEL_105:
      uint64_t v61 = *v5;
      *BOOL v5 = *v4;
      *int8x8_t v4 = v61;
      return result;
    }
    uint64_t v49 = *v5;
    *BOOL v5 = *v4;
    *int8x8_t v4 = v49;
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      unint64_t v50 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      unint64_t v50 = result;
      uint64_t v49 = *v4;
    }
    unint64_t v51 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (v51)
    {
      unint64_t v52 = (char *)(v51 + 16);
    }
    else
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      unint64_t v52 = (char *)result;
    }
    if (*(char *)(v50 + 23) >= 0) {
      uint64_t v53 = (char *)v50;
    }
    else {
      uint64_t v53 = *(char **)v50;
    }
    int v54 = *v53;
    if (v52[23] >= 0) {
      long long v55 = v52;
    }
    else {
      long long v55 = *(char **)v52;
    }
    if (v54 < 0
      || (int v56 = *v55, v56 < 0)
      || ((unsigned int v57 = v54,
           unsigned int v58 = v56,
           unsigned int v59 = (v56 ^ v57) & 0xFFFFFFDF,
           v57 >= 0x40)
        ? (BOOL v60 = v59 == 0)
        : (BOOL v60 = 1),
          v60 || v58 < 0x40))
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
      BOOL v5 = v4;
      int8x8_t v4 = a3;
      if (!result) {
        return result;
      }
      goto LABEL_105;
    }
    unsigned int v47 = ((_BYTE)v57 + 5) & 0x1F;
    unsigned int v48 = ((_BYTE)v58 + 5) & 0x1F;
    BOOL v5 = v4;
    int8x8_t v4 = a3;
LABEL_104:
    if (v47 >= v48) {
      return result;
    }
    goto LABEL_105;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v26 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    unint64_t v26 = result;
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v27 = (*v4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    unint64_t v27 = result;
  }
  if (*(char *)(v26 + 23) >= 0) {
    unint64_t v28 = (char *)v26;
  }
  else {
    unint64_t v28 = *(char **)v26;
  }
  int v29 = *v28;
  if (*(char *)(v27 + 23) >= 0) {
    unint64_t v30 = (char *)v27;
  }
  else {
    unint64_t v30 = *(char **)v27;
  }
  if (v29 < 0
    || (int v31 = *v30, v31 < 0)
    || ((unsigned int v32 = v29,
         unsigned int v33 = v31,
         unsigned int v34 = (v31 ^ v32) & 0xFFFFFFDF,
         v32 >= 0x40)
      ? (BOOL v35 = v34 == 0)
      : (BOOL v35 = 1),
        v35 || v33 < 0x40))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v32 + 5) & 0x1Fu) >= (((_BYTE)v33 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v36 = *v4;
  *int8x8_t v4 = *a3;
  *a3 = v36;
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v37 = (*v4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    unint64_t v37 = result;
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v38 = (*v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    unint64_t v38 = result;
  }
  if (*(char *)(v37 + 23) >= 0) {
    unint64_t v39 = (char *)v37;
  }
  else {
    unint64_t v39 = *(char **)v37;
  }
  int v40 = *v39;
  if (*(char *)(v38 + 23) >= 0) {
    unint64_t v41 = (char *)v38;
  }
  else {
    unint64_t v41 = *(char **)v38;
  }
  if ((v40 & 0x80000000) == 0)
  {
    int v42 = *v41;
    if ((v42 & 0x80000000) == 0)
    {
      unsigned int v43 = v40;
      unsigned int v44 = v42;
      unsigned int v45 = (v42 ^ v43) & 0xFFFFFFDF;
      BOOL v46 = v43 < 0x40 || v45 == 0;
      if (!v46 && v44 >= 0x40)
      {
        unsigned int v47 = ((_BYTE)v43 + 5) & 0x1F;
        unsigned int v48 = ((_BYTE)v44 + 5) & 0x1F;
        goto LABEL_104;
      }
    }
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
  if (result) {
    goto LABEL_105;
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(uint64_t *a1, uint64_t *a2)
{
  char v2 = a2;
  uint64_t v4 = a2 - a1;
  uint64_t result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        unint64_t v6 = (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)1);
        unint64_t v6 = result;
      }
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      }
      if (*(char *)(v6 + 23) >= 0) {
        int v40 = (char *)v6;
      }
      else {
        int v40 = *(char **)v6;
      }
      int v41 = *v40;
      if (*(char *)(EmptyString + 23) >= 0) {
        int v42 = (char *)EmptyString;
      }
      else {
        int v42 = *(char **)EmptyString;
      }
      if ((v41 & 0x80000000) == 0)
      {
        int v43 = *v42;
        if ((v43 & 0x80000000) == 0)
        {
          unsigned int v44 = v41;
          unsigned int v45 = v43;
          unsigned int v46 = (v43 ^ v44) & 0xFFFFFFDF;
          BOOL v47 = v44 < 0x40 || v46 == 0;
          if (!v47 && v45 >= 0x40)
          {
            if ((((_BYTE)v44 + 5) & 0x1Fu) >= (((_BYTE)v45 + 5) & 0x1Fu)) {
              return 1;
            }
            goto LABEL_81;
          }
        }
      }
      if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl())
      {
LABEL_81:
        uint64_t v48 = *a1;
        *a1 = *(v2 - 1);
        *(v2 - 1) = v48;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v7 = a1 + 2;
      unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == v2) {
        return 1;
      }
      uint64_t v49 = v2;
      uint64_t v10 = 0;
      int v11 = 0;
      while (2)
      {
        if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          unint64_t v12 = (*v9 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
          unint64_t v12 = (unint64_t)v8;
        }
        if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          unint64_t v13 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
          unint64_t v13 = (unint64_t)v8;
        }
        if (*(char *)(v12 + 23) >= 0) {
          unsigned int v14 = (char *)v12;
        }
        else {
          unsigned int v14 = *(char **)v12;
        }
        int v15 = *v14;
        if (*(char *)(v13 + 23) >= 0) {
          unint64_t v16 = (char *)v13;
        }
        else {
          unint64_t v16 = *(char **)v13;
        }
        if (v15 < 0
          || (int v17 = *v16, v17 < 0)
          || ((unsigned int v18 = v15,
               unsigned int v19 = v17,
               unsigned int v20 = (v17 ^ v18) & 0xFFFFFFDF,
               v18 >= 0x40)
            ? (BOOL v21 = v20 == 0)
            : (BOOL v21 = 1),
              v21 || v19 < 0x40))
        {
          unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
          if (!v8) {
            goto LABEL_56;
          }
        }
        else if ((((_BYTE)v18 + 5) & 0x1Fu) >= (((_BYTE)v19 + 5) & 0x1Fu))
        {
          goto LABEL_56;
        }
        uint64_t v22 = *v9;
        uint64_t *v9 = 0;
        uint64_t v50 = v22;
        unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 16;
        for (uint64_t i = v10; ; i -= 8)
        {
          unint64_t v26 = (char *)a1 + i;
          uint64_t v27 = *(uint64_t *)((char *)a1 + i + 24);
          if ((v27 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v28 = *((void *)v26 + 2);
          *((void *)v26 + 2) = 0;
          *((void *)v26 + 3) = v28;
          if (i == -16) {
            break;
          }
          int v29 = (char *)v24;
          if (!v23)
          {
            unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
            int v29 = (char *)v8;
          }
          if ((*(uint64_t *)((char *)a1 + i + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v30 = (*(uint64_t *)((char *)a1 + i + 8) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
            unint64_t v30 = (unint64_t)v8;
          }
          if (v29[23] >= 0) {
            int v31 = v29;
          }
          else {
            int v31 = *(char **)v29;
          }
          int v32 = *v31;
          if (*(char *)(v30 + 23) >= 0) {
            unsigned int v33 = (char *)v30;
          }
          else {
            unsigned int v33 = *(char **)v30;
          }
          if (v32 < 0
            || (int v34 = *v33, v34 < 0)
            || ((unsigned int v35 = v32,
                 unsigned int v36 = v34,
                 unsigned int v37 = (v34 ^ v35) & 0xFFFFFFDF,
                 v35 >= 0x40)
              ? (BOOL v38 = v37 == 0)
              : (BOOL v38 = 1),
                v38 || v36 < 0x40))
          {
            unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            if (!v8)
            {
              unint64_t v7 = (uint64_t *)((char *)a1 + i + 16);
              goto LABEL_53;
            }
          }
          else if ((((_BYTE)v35 + 5) & 0x1Fu) >= (((_BYTE)v36 + 5) & 0x1Fu))
          {
            goto LABEL_53;
          }
          --v7;
        }
        unint64_t v7 = a1;
LABEL_53:
        char v2 = v49;
        if ((*v7 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *unint64_t v7 = v50;
        if (++v11 != 8)
        {
LABEL_56:
          unint64_t v7 = v9;
          v10 += 8;
          if (++v9 == v2) {
            return 1;
          }
          continue;
        }
        return v9 + 1 == v49;
      }
  }
}

pxrInternal__aapl__pxrReserved__::TfToken *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)a1, a2, a3);
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v9 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v9 = (unint64_t)result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v10 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v10 = (unint64_t)result;
  }
  if (*(char *)(v9 + 23) >= 0) {
    int v11 = (char *)v9;
  }
  else {
    int v11 = *(char **)v9;
  }
  int v12 = *v11;
  if (*(char *)(v10 + 23) >= 0) {
    unint64_t v13 = (char *)v10;
  }
  else {
    unint64_t v13 = *(char **)v10;
  }
  if (v12 < 0
    || (int v14 = *v13, v14 < 0)
    || ((unsigned int v15 = v12,
         unsigned int v16 = v14,
         unsigned int v17 = (v14 ^ v15) & 0xFFFFFFDF,
         v15 >= 0x40)
      ? (BOOL v18 = v17 == 0)
      : (BOOL v18 = 1),
        v18 || v16 < 0x40))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v15 + 5) & 0x1Fu) >= (((_BYTE)v16 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v19 = *a3;
  *a3 = *a4;
  *a4 = v19;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v20 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v20 = (unint64_t)result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v21 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v21 = (unint64_t)result;
  }
  if (*(char *)(v20 + 23) >= 0) {
    uint64_t v22 = (char *)v20;
  }
  else {
    uint64_t v22 = *(char **)v20;
  }
  int v23 = *v22;
  if (*(char *)(v21 + 23) >= 0) {
    unint64_t v24 = (char *)v21;
  }
  else {
    unint64_t v24 = *(char **)v21;
  }
  if (v23 < 0
    || (int v25 = *v24, v25 < 0)
    || ((unsigned int v26 = v23,
         unsigned int v27 = v25,
         unsigned int v28 = (v25 ^ v26) & 0xFFFFFFDF,
         v26 >= 0x40)
      ? (BOOL v29 = v28 == 0)
      : (BOOL v29 = 1),
        v29 || v27 < 0x40))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v26 + 5) & 0x1Fu) >= (((_BYTE)v27 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v30 = *a2;
  *a2 = *a3;
  *a3 = v30;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v31 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v31 = (unint64_t)result;
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v32 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v32 = (unint64_t)result;
  }
  if (*(char *)(v31 + 23) >= 0) {
    unsigned int v33 = (char *)v31;
  }
  else {
    unsigned int v33 = *(char **)v31;
  }
  int v34 = *v33;
  if (*(char *)(v32 + 23) >= 0) {
    unsigned int v35 = (char *)v32;
  }
  else {
    unsigned int v35 = *(char **)v32;
  }
  if (v34 < 0
    || (int v36 = *v35, v36 < 0)
    || v34 < 0x40u
    || ((v36 ^ v34) & 0xFFFFFFDF) == 0
    || v36 < 0x40u)
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v34 + 5) & 0x1Fu) >= (((_BYTE)v36 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v37 = *a1;
  *a1 = *a2;
  *a2 = v37;
  return result;
}

pxrInternal__aapl__pxrReserved__::TfToken *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(a1, a2, a3, a4);
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v11 = (*a5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v11 = (unint64_t)result;
  }
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v12 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v12 = (unint64_t)result;
  }
  if (*(char *)(v11 + 23) >= 0) {
    unint64_t v13 = (char *)v11;
  }
  else {
    unint64_t v13 = *(char **)v11;
  }
  int v14 = *v13;
  if (*(char *)(v12 + 23) >= 0) {
    unsigned int v15 = (char *)v12;
  }
  else {
    unsigned int v15 = *(char **)v12;
  }
  if (v14 < 0
    || (int v16 = *v15, v16 < 0)
    || ((unsigned int v17 = v14,
         unsigned int v18 = v16,
         unsigned int v19 = (v16 ^ v17) & 0xFFFFFFDF,
         v17 >= 0x40)
      ? (BOOL v20 = v19 == 0)
      : (BOOL v20 = 1),
        v20 || v18 < 0x40))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v17 + 5) & 0x1Fu) >= (((_BYTE)v18 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v21 = *a4;
  *a4 = *a5;
  *a5 = v21;
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v22 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v22 = (unint64_t)result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v23 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v23 = (unint64_t)result;
  }
  if (*(char *)(v22 + 23) >= 0) {
    unint64_t v24 = (char *)v22;
  }
  else {
    unint64_t v24 = *(char **)v22;
  }
  int v25 = *v24;
  if (*(char *)(v23 + 23) >= 0) {
    unsigned int v26 = (char *)v23;
  }
  else {
    unsigned int v26 = *(char **)v23;
  }
  if (v25 < 0
    || (int v27 = *v26, v27 < 0)
    || ((unsigned int v28 = v25,
         unsigned int v29 = v27,
         unsigned int v30 = (v27 ^ v28) & 0xFFFFFFDF,
         v28 >= 0x40)
      ? (BOOL v31 = v30 == 0)
      : (BOOL v31 = 1),
        v31 || v29 < 0x40))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v28 + 5) & 0x1Fu) >= (((_BYTE)v29 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v32 = *a3;
  *a3 = *a4;
  *a4 = v32;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v33 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v33 = (unint64_t)result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v34 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v34 = (unint64_t)result;
  }
  if (*(char *)(v33 + 23) >= 0) {
    unsigned int v35 = (char *)v33;
  }
  else {
    unsigned int v35 = *(char **)v33;
  }
  int v36 = *v35;
  if (*(char *)(v34 + 23) >= 0) {
    uint64_t v37 = (char *)v34;
  }
  else {
    uint64_t v37 = *(char **)v34;
  }
  if (v36 < 0
    || (int v38 = *v37, v38 < 0)
    || v36 < 0x40u
    || ((v38 ^ v36) & 0xFFFFFFDF) == 0
    || v38 < 0x40u)
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v36 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v39 = *a2;
  *a2 = *a3;
  *a3 = v39;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v40 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v40 = (unint64_t)result;
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v41 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    unint64_t v41 = (unint64_t)result;
  }
  if (*(char *)(v40 + 23) >= 0) {
    int v42 = (char *)v40;
  }
  else {
    int v42 = *(char **)v40;
  }
  int v43 = *v42;
  if (*(char *)(v41 + 23) >= 0) {
    unsigned int v44 = (char *)v41;
  }
  else {
    unsigned int v44 = *(char **)v41;
  }
  if (v43 < 0
    || (int v45 = *v44, v45 < 0)
    || v43 < 0x40u
    || ((v45 ^ v43) & 0xFFFFFFDF) == 0
    || v45 < 0x40u)
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v43 + 5) & 0x1Fu) >= (((_BYTE)v45 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v46 = *a1;
  *a1 = *a2;
  *a2 = v46;
  return result;
}

uint64_t RIOPxrUsdEditTargetGetTypeID()
{
  if (RIOPxrUsdEditTargetGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdEditTargetGetTypeID::onceToken, &__block_literal_global_26);
  }
  return RIOPxrUsdEditTargetGetTypeID::typeID;
}

void __RIOPxrUsdEditTargetGetTypeID_block_invoke()
{
  if (!RIOPxrUsdEditTargetGetTypeID::typeID) {
    RIOPxrUsdEditTargetGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrUsdEditTargetCreateEmpty()
{
  v5[7] = *MEMORY[0x263EF8340];
  MEMORY[0x2455CEA40](&v3);
  uint64_t v0 = RIOPxrUsdEditTargetCreate<pxrInternal__aapl__pxrReserved__::UsdEditTarget>((uint64_t)&v3);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)v5);
  uint64_t v1 = v4;
  if (v4 && atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  return v0;
}

void sub_23F6C087C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RIOPxrUsdEditTargetCreateWithLayer(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v6, 0.0, 1.0);
    MEMORY[0x2455CEA30](&v7, v1 + 16, v6[0], v6[1]);
    if (RIOPxrUsdEditTargetGetTypeID::onceToken != -1) {
      dispatch_once(&RIOPxrUsdEditTargetGetTypeID::onceToken, &__block_literal_global_26);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v1 = Instance;
    if (Instance)
    {
      uint64_t v3 = v8;
      *(void *)(Instance + 16) = v7;
      *(void *)(Instance + 24) = v3;
      if (v3) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::_Data((_DWORD *)(Instance + 32), (uint64_t)v9);
      *(_OWORD *)(v1 + 72) = *(_OWORD *)&v9[40];
    }
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)v9);
    uint64_t v4 = v8;
    if (v8 && atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  return v1;
}

void sub_23F6C09E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  BOOL v5 = *(atomic_uint **)(v3 + 24);
  if (v5)
  {
    if (atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::~UsdEditTarget((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdEditTargetIsNull(uint64_t a1)
{
  v6[7] = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  MEMORY[0x2455CEA40](&v4);
  uint64_t v1 = pxrInternal__aapl__pxrReserved__::UsdEditTarget::operator==();
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)v6);
  uint64_t v2 = v5;
  if (v5 && atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return v1;
}

void sub_23F6C0B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, atomic_uint *a10)
{
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)(v10 + 16));
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(a1);
}

BOOL RIOPxrUsdEditTargetIsValid(BOOL result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator pxrInternal__aapl__pxrReserved__::SdfLayer* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::*)(void)const((void *)(result + 16));
    return (v2 & 1 | (unint64_t)v1) != 0;
  }
  return result;
}

uint64_t RIOPxrUsdEditTargetGetLayer(uint64_t result)
{
  if (result) {
    return RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>((uint64_t *)(result + 16));
  }
  return result;
}

uint64_t RIOPxrUsdEditTargetCopyLayer(uint64_t result)
{
  if (result) {
    return RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>((uint64_t *)(result + 16));
  }
  return result;
}

uint64_t RIOPxrUsdEditTargetCopyPrimSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPrimSpecForScenePath((uint64_t *)&v4, (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4)) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = RIOPxrSdfPrimSpecCreate<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec> &>(&v4);
    }
    MEMORY[0x2455CF7B0](&v4);
  }
  return v2;
}

uint64_t RIOPxrSdfPrimSpecCreate<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec> &>(atomic_uint **a1)
{
  if (RIOPxrSdfPrimSpecGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfPrimSpecGetTypeID::onceToken, &__block_literal_global_3);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result)
  {
    uint64_t v3 = *a1;
    *(void *)(result + 16) = *a1;
    if (v3) {
      atomic_fetch_add(v3, 1u);
    }
  }
  return result;
}

atomic_uint *_RIOPxrUsdEditTargetCFFinalize(void *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)(a1 + 4));
  uint64_t result = (atomic_uint *)a1[3];
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v3();
  }
  return result;
}

BOOL _RIOPxrUsdEditTargetCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrUsdEditTargetCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrUsdEditTargetCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdEditTarget %p>", a1);
}

CFStringRef _RIOPxrUsdEditTargetCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdEditTarget %p>", a1);
}

uint64_t realityio::UsdPrimDelta::UsdPrimDelta(uint64_t a1, _DWORD *a2, int a3, uint64_t a4)
{
  *(void *)a1 = &unk_26F3446D8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a2 + 1);
  *(unsigned char *)(a1 + 16) = a3;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>::map[abi:ne180100]((uint64_t *)(a1 + 24), a4);
  memset(v9, 0, sizeof(v9));
  int v10 = 1065353216;
  *(void *)(a1 + 48) = &unk_26F341FE8;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(a1 + 56, (uint64_t)v9);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v9);
  if (a3) {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_unique<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const*>((uint64_t **)(a1 + 24), 0, 0);
  }
  return a1;
}

void sub_23F6C0EB8(_Unwind_Exception *a1)
{
  void *v6 = v4;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v5);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(v3, *(void **)(v2 + 32));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

void realityio::UsdPrimDelta::setPropertyDeltaForPropertyName(realityio::UsdPrimDelta *this, const realityio::UsdPropertyDelta *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  unint64_t v9 = (uint64_t **)((char *)this + 32);
  uint64_t v8 = (void *)*((void *)this + 4);
  if (v8)
  {
    int v10 = (uint64_t **)((char *)this + 32);
    do
    {
      int v11 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)this + 40, v8 + 4, (uint64_t *)a3);
      unint64_t v12 = v8 + 1;
      if (!v11)
      {
        unint64_t v12 = v8;
        int v10 = (uint64_t **)v8;
      }
      uint64_t v8 = (void *)*v12;
    }
    while (*v12);
    if (v10 != v9
      && !std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)this + 40, (uint64_t *)a3, (uint64_t *)v10 + 4))
    {
      unsigned int v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)realityio::UsdPropertyDelta::updateWithPropertyDelta(v10 + 5, a2);
      if (!a4) {
        return;
      }
      goto LABEL_16;
    }
  }
  unint64_t v13 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)(v9 - 1), &v24, (uint64_t *)a3);
  int v14 = *v13;
  if (!*v13)
  {
    unsigned int v15 = v13;
    int v16 = (uint64_t *)operator new(0x68uLL);
    int v14 = v16;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
    __str.__r_.__value_.__s.__data_[16] = 0;
    uint64_t v17 = *(void *)a3;
    v16[4] = *(void *)a3;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16[4] &= 0xFFFFFFFFFFFFFFF8;
    }
    v22.__r_.__value_.__r.__words[0] = 0;
    realityio::UsdPropertyDelta::UsdPropertyDelta((realityio::UsdPropertyDelta *)(v16 + 5), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v9 - 1, v24, v15, v14);
  }
  unsigned int v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::operator=(v14 + 6, (void *)a2 + 1);
  if (v14 + 5 != (uint64_t *)a2)
  {
    *((_DWORD *)v14 + 24) = *((_DWORD *)a2 + 14);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>(v14 + 8, *((void **)a2 + 5), 0);
  }
  if (a4)
  {
LABEL_16:
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t EmptyString = (*(void *)a3 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else {
      unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
    }
    if (*(char *)(EmptyString + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
    }
    else
    {
      long long v20 = *(_OWORD *)EmptyString;
      __str.__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
    }
    std::string::size_type v21 = std::string::rfind(&__str, 58, 0xFFFFFFFFFFFFFFFFLL);
    if (v21 != -1)
    {
      std::string::basic_string(&v22, &__str, 0, v21, (std::allocator<char> *)&v24);
      MEMORY[0x2455CF830](&v24, &v22);
      realityio::UsdPrimDelta::setPropertyDeltaForPropertyName(this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, 1);
      if ((v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23F6C1140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  uint64_t v25 = v22[4];
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>>>::operator()[abi:ne180100](v23, v22);
  _Unwind_Resume(a1);
}

void realityio::UsdPrimDelta::updateWithPrimDelta(uint64_t **this, const realityio::UsdPrimDelta *a2)
{
  if (this[1] == *((uint64_t **)a2 + 1))
  {
    if (*((unsigned char *)a2 + 16))
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_unique<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const*>(this + 3, 0, 0);
      memset(v10, 0, sizeof(v10));
      int v11 = 1065353216;
      unint64_t v12 = &unk_26F341FE8;
      std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)v13, (uint64_t)v10);
      if (this + 6 != (uint64_t **)&v12)
      {
        *((_DWORD *)this + 22) = v14;
        std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>(this + 7, v13[2], 0);
      }
      unint64_t v12 = &unk_26F341FE8;
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v13);
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v10);
      *((unsigned char *)this + 16) = 1;
    }
    else
    {
      for (uint64_t i = (void *)*((void *)a2 + 9); i; uint64_t i = (void *)*i)
        std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)(this + 7), i + 2, i + 2);
      uint64_t v5 = (char *)*((void *)a2 + 3);
      unint64_t v6 = (char *)a2 + 32;
      if (v5 != v6)
      {
        do
        {
          realityio::UsdPrimDelta::setPropertyDeltaForPropertyName((realityio::UsdPrimDelta *)this, (const realityio::UsdPropertyDelta *)(v5 + 40), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 32), 0);
          uint64_t v7 = (char *)*((void *)v5 + 1);
          if (v7)
          {
            do
            {
              uint64_t v8 = v7;
              uint64_t v7 = *(char **)v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              uint64_t v8 = (char *)*((void *)v5 + 2);
              BOOL v9 = *(void *)v8 == (void)v5;
              uint64_t v5 = v8;
            }
            while (!v9);
          }
          uint64_t v5 = v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_23F6C1328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v9);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void **realityio::UsdPrimDelta::description@<X0>(realityio::UsdPrimDelta *this@<X0>, CFStringRef *a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  v20[0] = &unk_26F344718;
  std::string::size_type v21 = v20;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  unint64_t v6 = (realityio::UsdPrimDelta *)*((void *)this + 3);
  if (v6 != (realityio::UsdPrimDelta *)((char *)this + 32))
  {
    uint64_t v7 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    do
    {
      uint64_t v8 = CFArrayCreateMutable(0, 0, v7);
      if (!v21) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void **__return_ptr))(*v21 + 48))(&value);
      CFArrayAppendValue(v8, value);
      (*(void (**)(void **__return_ptr))(*((void *)v6 + 5) + 16))(&v18);
      CFArrayAppendValue(v8, v18);
      CFStringRef v10 = realityio::joinAsCFStringRef(v8, (const __CFArray *)": ", v9);
      CFRelease(v8);
      CFArrayAppendValue(Mutable, v10);
      CFRelease(v10);
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v18);
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
      int v11 = (realityio::UsdPrimDelta *)*((void *)v6 + 1);
      if (v11)
      {
        do
        {
          unint64_t v12 = v11;
          int v11 = *(realityio::UsdPrimDelta **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v12 = (realityio::UsdPrimDelta *)*((void *)v6 + 2);
          BOOL v13 = *(void *)v12 == (void)v6;
          unint64_t v6 = v12;
        }
        while (!v13);
      }
      unint64_t v6 = v12;
    }
    while (v12 != (realityio::UsdPrimDelta *)((char *)this + 32));
  }
  CFStringRef v14 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v4);
  CFRelease(Mutable);
  CFTypeRef cf = v14;
  std::__function::__value_func<realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v20);
  *a2 = 0;
  uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((realityio::UsdPrimDelta *)((char *)this + 8));
  realityio::UsdMetadataDelta::description((realityio::UsdPrimDelta *)((char *)this + 48), (CFStringRef *)&value);
  *a2 = CFStringCreateWithFormat(0, 0, @"<UsdPrimDelta: %p { primPath: %s, metadata: %@, property deltas: (%lu) [ %@ ] }>", this, Text, value, *((void *)this + 5), cf);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_23F6C15C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, const void *);
  uint64_t v11 = va_arg(va1, void);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va1);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v7);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_unique<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const*>(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    unint64_t v6 = *result;
    uint64_t v7 = result[1];
    atomic_uint *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    CFStringRef v10 = result;
    uint64_t v11 = v8;
    unint64_t v12 = v8;
    if (v8)
    {
      uint64_t v11 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__node_assign_unique(v5, a2, v8);
        if (v9)
        {
          uint64_t v8 = v11;
          unint64_t v12 = v11;
          if (!v11)
          {
            a2 += 9;
            break;
          }
          uint64_t v11 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v11);
        }
        else
        {
          uint64_t v8 = v12;
        }
        a2 += 9;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>(v5, a2, a2);
    a2 += 9;
  }
  return result;
}

void sub_23F6C175C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__node_assign_unique(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v9, a2);
  if (*v6) {
    return *v6;
  }
  uint64_t v7 = v6;
  v10[0] = a3 + 4;
  v10[1] = a3 + 5;
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken &,realityio::UsdPropertyDelta &>::operator=[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta,(void *)0>((uint64_t)v10, (uint64_t)a2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v9, v7, a3);
  return a3;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void std::__function::__func<realityio::UsdPrimDelta::description(void)::$_0,std::allocator<realityio::UsdPrimDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
}

void *std::__function::__func<realityio::UsdPrimDelta::description(void)::$_0,std::allocator<realityio::UsdPrimDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F344718;
  return result;
}

void std::__function::__func<realityio::UsdPrimDelta::description(void)::$_0,std::allocator<realityio::UsdPrimDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F344718;
}

void std::__function::__func<realityio::UsdPrimDelta::description(void)::$_0,std::allocator<realityio::UsdPrimDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, void *a2@<X1>, CFStringRef *a3@<X8>)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t EmptyString = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    uint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }

  realityio::asWrappedCFStringRef(EmptyString, a3);
}

uint64_t std::__function::__func<realityio::UsdPrimDelta::description(void)::$_0,std::allocator<realityio::UsdPrimDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::UsdPrimDelta::description(void)::$_0,std::allocator<realityio::UsdPrimDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void *std::__function::__value_func<realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t shouldForceDisableSubdsIfHighGeometricComplexity(uint64_t *a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  PseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(&v19, v1);
  uint64_t UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(PseudoRoot);
  unint64_t v5 = *(void *)UsdPrimAllPrimsPredicate;
  uint64_t v4 = *(void *)(UsdPrimAllPrimsPredicate + 8);
  uint64_t v6 = *(void *)(UsdPrimAllPrimsPredicate + 16);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  uint64_t v37 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v5;
  uint64_t v38 = v4;
  *(void *)&long long v39 = v6;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v19, (uint64_t *)&v37, (uint64_t)&v41);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  if (v20) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  }
  uint64_t v37 = v41;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v38, &v42);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v38 + 1, &v43);
  long long v39 = v44;
  uint64_t v40 = v45;
  unint64_t v33 = v46;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v34, &v47);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v34 + 1, &v48);
  unint64_t v7 = 0;
  long long v35 = v49;
  uint64_t v36 = v50;
  while (v37 != v33
       || v38 != v34
       || (pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v39, (uint64_t)&v35) & 1) == 0)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v37, (uint64_t)v29);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v8);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v28[0] = MEMORY[0x263F90690] + 16;
      if (!realityio::isCatmullClarkSurface((realityio *)v28, v9)) {
        goto LABEL_35;
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(&v24, (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v28);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v24))
      {
        FaceCFIndex Count = pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceCount();
        realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v24, (uint64_t)&v19);
        v7 += FaceCount;
        if ((_BYTE)v19)
        {
          uint64_t v11 = v20;
          if (v20)
          {
            uint64_t v12 = 0;
            do
            {
              pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
              uint64_t v13 = *(int *)(v23 + 4 * v12);
              if (v13 <= 1 || v13 == 4) {
                uint64_t v15 = 0;
              }
              else {
                uint64_t v15 = v13 - 1;
              }
              v7 += v15;
              ++v12;
            }
            while (v11 != v12);
          }
        }
        BOOL v16 = v7 > 0x88B7;
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)&v19);
      }
      else
      {
        BOOL v16 = 1;
      }
      if ((v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
      if (v25) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
      }
      if (v16) {
        int v17 = 1;
      }
      else {
LABEL_35:
      }
        int v17 = 0;
      MEMORY[0x2455CE7A0](v28);
    }
    else
    {
      int v17 = 3;
    }
    if ((v32 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v17 != 3 && v17)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
      return 1;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v37);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
  return 0;
}

void sub_23F6C1E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneUpdate::makeFromTrackedStageState(void **this@<X0>, realityio::UsdStageStateTracker *a2@<X1>, uint64_t a3@<X8>)
{
  __p[0] = this[1];
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)__p);
  unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)__p);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)__p);
  __p[0] = this[1];
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)__p);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)__p);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v8);
  double v10 = v9;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)__p);
  if (v10 == 0.0)
  {
    realityio::UsdStageStateTracker::getAndCleanAccumulatedStageDelta((realityio::UsdStageStateTracker *)this, v59);
    memset(__p, 0, 24);
    unsigned int v57 = 0;
    uint64_t v58 = 0;
    int v56 = (void **)&v57;
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous();
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v56, v57);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)__p, (uint64_t *)v37);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open();
    uint64_t v11 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v11 + 8))(v11);
    }
    long long v55 = (atomic_uint *)this[1];
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v55);
    uint64_t v13 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v55);
    if (isDetailedResyncEnabled)
    {
      CFStringRef v14 = *(void **)(*((void *)a2 + 2) + 24);
      uint64_t v15 = (atomic_uint *)v14[3];
      v14 += 3;
      *CFStringRef v14 = v34;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v34);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)v14, v15);
    }
    memset(__p, 0, sizeof(__p));
    unint64_t v51 = v52;
    v52[0] = 0;
    v54[0] = 0;
    v54[1] = 0;
    v52[1] = 0;
    uint64_t v53 = v54;
    unsigned int v57 = 0;
    uint64_t v58 = 0;
    int v56 = (void **)&v57;
    v49[0] = 0;
    v49[1] = 0;
    uint64_t v47 = 0;
    int v48 = v49;
    uint64_t v45 = &v46;
    uint64_t v46 = 0;
    BOOL v16 = *(NSObject **)realityio::logObjects((realityio *)v13);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_23F4EA000, v16, OS_LOG_TYPE_ERROR, "Invalid Stage.timeCodesPerSecond == 0 - No conversion performed", buf, 2u);
    }
    realityio::LiveSceneUpdate::LiveSceneUpdate(a3, &v34, (uint64_t)v59, (uint64_t)__p, &v56, &v48, &v45, atomic_fetch_add(&realityio::LiveSceneUpdate::makeFromTrackedStageState(realityio::UsdStageStateTracker &,realityio::ImportSession const&)::nextUniqueIdentifier, 1uLL), 0);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy((uint64_t)&v45, v46);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)&v48, v49[0]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)&v56, v57);
    std::__tree<std::string>::destroy((uint64_t)&v53, v54[0]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&v51, v52[0]);
    int v56 = &__p[3];
    std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](&v56);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v34);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(v37);
LABEL_42:
    realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)v59);
    return;
  }
  if (*((_DWORD *)a2 + 15))
  {
    realityio::UsdStageStateTracker::getAndCleanAccumulatedStageDelta((realityio::UsdStageStateTracker *)this, v59);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)__p, v7);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open();
    int v17 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v17 + 8))(v17);
    }
    if (*((unsigned char *)a2 + 273))
    {
      uint64_t v32 = v37[0];
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v32);
      int v18 = shouldForceDisableSubdsIfHighGeometricComplexity((uint64_t *)&v32) ^ 1;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v32);
    }
    else
    {
      int v18 = 0;
    }
    uint64_t v31 = v37[0];
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v31);
    realityio::internal::PrimToEntityMap::makePrimToEntityMap((uint64_t *)&v31, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v31);
    uint64_t v30 = v37[0];
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v30);
    realityio::internal::TexturePrimToMaterialPrimMap::makeTexturePrimToMaterialMap((uint64_t *)&v30, &v56);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v30);
    uint64_t v26 = *((void *)a2 + 2);
    unsigned int v29 = v37[0];
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v29);
    realityio::makeSdfAssetPathToTextureImportSettingsMapWithSpecifiedSemantics((const std::string *)(v26 + 328), (uint64_t *)&v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v48);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v29);
    if (v18)
    {
      unsigned int v28 = v37[0];
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v28);
      realityio::internal::makeMaterialPrimToBoundSurfaceUsageMap((uint64_t *)&v28, (uint64_t)&v45);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v28);
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v45 = &v46;
    }
    realityio::LiveSceneUpdate::LiveSceneUpdate(a3, v37, (uint64_t)v59, (uint64_t)__p, &v56, &v48, &v45, atomic_fetch_add(&realityio::LiveSceneUpdate::makeFromTrackedStageState(realityio::UsdStageStateTracker &,realityio::ImportSession const&)::nextUniqueIdentifier, 1uLL), v18);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy((uint64_t)&v45, v46);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)&v48, v49[0]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)&v56, v57);
    std::__tree<std::string>::destroy((uint64_t)&v53, v54[0]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&v51, v52[0]);
    int v56 = &__p[3];
    std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](&v56);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v37);
    goto LABEL_42;
  }
  std::chrono::steady_clock::now();
  pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(v7);
  realityio::MultipleLayerMutex::MultipleLayerMutex<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>>((uint64_t *)&v48, (long long *)v56, v57);
  realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)&v48);
  pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(v7);
  realityio::UsdStageStateTracker::getAndCleanAccumulatedStageDelta((realityio::UsdStageStateTracker *)this, v59);
  memset(__p, 0, 24);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = &v46;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous();
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v45, v46);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v43);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer((uint64_t *)__p, v7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent();
  uint64_t v19 = __p[1];
  if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(void *))(*(void *)v19 + 8))(v19);
  }
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)&v48);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)__p, (uint64_t *)buf);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v45, (uint64_t *)&v43);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  uint64_t v20 = v46;
  if (v46 && atomic_fetch_add_explicit(v46 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = __p[1];
  if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(void *))(*(void *)v21 + 8))(v21);
  }
  unint64_t v41 = (atomic_uint *)this[1];
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v41);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v41);
  if (v22)
  {
    uint64_t v23 = *(void **)(*((void *)a2 + 2) + 24);
    uint64_t v24 = (atomic_uint *)v23[3];
    v23 += 3;
    *uint64_t v23 = v42;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v42);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)v23, v24);
  }
  if (*((unsigned char *)a2 + 273))
  {
    uint64_t v40 = v42;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v40);
    int v25 = shouldForceDisableSubdsIfHighGeometricComplexity((uint64_t *)&v40) ^ 1;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v40);
  }
  else
  {
    int v25 = 0;
  }
  long long v39 = v42;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v39);
  realityio::internal::PrimToEntityMap::makePrimToEntityMap((uint64_t *)&v39, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v39);
  uint64_t v38 = v42;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v38);
  realityio::internal::TexturePrimToMaterialPrimMap::makeTexturePrimToMaterialMap((uint64_t *)&v38, &v45);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v38);
  uint64_t v27 = *((void *)a2 + 2);
  uint64_t v36 = v42;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v36);
  realityio::makeSdfAssetPathToTextureImportSettingsMapWithSpecifiedSemantics((const std::string *)(v27 + 328), (uint64_t *)&v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, v37);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v36);
  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  if (v25)
  {
    unint64_t v33 = v42;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v33);
    realityio::internal::makeMaterialPrimToBoundSurfaceUsageMap((uint64_t *)&v33, (uint64_t)&v34);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v33);
  }
  else
  {
    v35[0] = 0;
    v35[1] = 0;
    uint64_t v34 = (atomic_uint *)v35;
  }
  realityio::LiveSceneUpdate::LiveSceneUpdate(a3, &v42, (uint64_t)v59, (uint64_t)__p, &v45, v37, &v34, atomic_fetch_add(&realityio::LiveSceneUpdate::makeFromTrackedStageState(realityio::UsdStageStateTracker &,realityio::ImportSession const&)::nextUniqueIdentifier, 1uLL), v25);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy((uint64_t)&v34, v35[0]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)v37, (void *)v37[1]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)&v45, v46);
  std::__tree<std::string>::destroy((uint64_t)&v53, v54[0]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&v51, v52[0]);
  uint64_t v45 = (atomic_uint **)&__p[3];
  std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v42);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v43);
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)v59);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr((atomic_uint **)buf);
  __p[0] = &v48;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v56;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_23F6C2740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, atomic_uint *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int16 a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,atomic_uint *a27,atomic_uint *a28,atomic_uint *a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a15);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)&a20, (void *)a21);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)&a31, (void *)a32);
  realityio::internal::PrimToEntityMap::~PrimToEntityMap((char **)&__p);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a27);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a28);
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)(v37 - 152));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a29);
  std::string __p = &a34;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v37 - 176);
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::isDetailedResyncEnabled(uint64_t *a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&__p, v1);
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v11, v2);
  uint64_t v3 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "realityio:enableDetailedResync");
  uint64_t ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  uint64_t v5 = ValueAtPath;
  if (v10 < 0)
  {
    operator delete(__p);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else if (!ValueAtPath)
  {
    goto LABEL_13;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if ((v6 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    uint64_t v5 = *(unsigned char *)v5 != 0;
  }
  else
  {
    uint64_t v5 = 0;
  }
LABEL_13:
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v11, 0);
  return v5;
}

void sub_23F6C2C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
}

pxrInternal__aapl__pxrReserved__::SdfPath *realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(pxrInternal__aapl__pxrReserved__::SdfPath *result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 24))
  {
    uint64_t v4 = result;
    memset(v21, 0, sizeof(v21));
    int v22 = 1065353216;
    uint64_t v19 = a3;
    uint64_t v20 = v21;
    int v17 = &v19;
    int v18 = &v19;
    uint64_t v5 = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(result);
    if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v20, v5))
    {
      uint64_t v6 = *(void *)(v19 + 24);
      if (!v6) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, unsigned int *))(*(void *)v6 + 48))(v6, v5);
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t)v20, v5, v5);
    }
    unint64_t v7 = (unsigned int *)*((void *)v4 + 25);
    uint64_t v8 = (unsigned int *)((char *)v4 + 208);
    if (v7 != (unsigned int *)((char *)v4 + 208))
    {
      uint64_t v9 = (uint64_t *)((char *)v4 + 8);
      do
      {
        if (*((unsigned char *)v7 + 56))
        {
          if (a2)
          {
            char v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a2 + 8));
            realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(realityio::LiveSceneUpdate const*,std::function<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>)const::$_1::operator()(&v18, v7 + 8, v10);
          }
          uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v9);
          realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(realityio::LiveSceneUpdate const*,std::function<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>)const::$_1::operator()(&v18, v7 + 8, v11);
        }
        else
        {
          if (a2)
          {
            uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a2 + 8));
            realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(realityio::LiveSceneUpdate const*,std::function<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>)const::$_2::operator()(&v17, (uint64_t)(v7 + 10), v12);
          }
          uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v9);
          realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(realityio::LiveSceneUpdate const*,std::function<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>)const::$_2::operator()(&v17, (uint64_t)(v7 + 10), v13);
        }
        CFStringRef v14 = (unsigned int *)*((void *)v7 + 1);
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            CFStringRef v14 = *(unsigned int **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (unsigned int *)*((void *)v7 + 2);
            BOOL v16 = *(void *)v15 == (void)v7;
            unint64_t v7 = v15;
          }
          while (!v16);
        }
        unint64_t v7 = v15;
      }
      while (v15 != v8);
    }
    return (pxrInternal__aapl__pxrReserved__::SdfPath *)std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)v21);
  }
  return result;
}

void sub_23F6C2E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(realityio::LiveSceneUpdate const*,std::function<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>)const::$_1::operator()(uint64_t **a1, unsigned int *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3)
{
  uint64_t v6 = *a1;
  if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((void *)(*a1)[1], a2))
  {
    uint64_t v7 = *(void *)(*v6 + 24);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, unsigned int *))(*(void *)v7 + 48))(v7, a2);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v6[1], a2, a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v50, a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v50))
  {
    long long v42 = 0uLL;
    LOBYTE(v43) = 0;
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v42, 0);
    long long v39 = *(_OWORD *)v8;
    *(void *)&long long v40 = *(void *)(v8 + 16);
    long long v42 = v39;
    LOBYTE(v43) = v40;
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v42, 1);
    long long v36 = *(_OWORD *)v9;
    *(void *)&long long v37 = *(void *)(v9 + 16);
    long long v42 = v36;
    LOBYTE(v43) = v37;
    char v10 = (uint64_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v42, 0x100000005);
    uint64_t v12 = *v10;
    uint64_t v11 = v10[1];
    uint64_t v13 = v10[2];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v28 = v11 | 0x2000;
    *(void *)&long long v39 = v12 & 0xFFFFFFFFFFFFDFFFLL;
    *((void *)&v39 + 1) = v11 | 0x2000;
    uint64_t v29 = v13;
    *(void *)&long long v40 = v13;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v50, (uint64_t *)&v39, (uint64_t)&v42);
    *(void *)&long long v39 = v42;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v39 + 2, (_DWORD *)&v42 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v39 + 3, (_DWORD *)&v42 + 3);
    long long v40 = v43;
    uint64_t v41 = v44;
    *(void *)&long long v36 = v45;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v36 + 2, &v46);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v36 + 3, &v47);
    long long v37 = v48;
    uint64_t v38 = v49;
    while (v39 != v36 || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v40, (uint64_t)&v37))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v39, (uint64_t)v32);
      CFStringRef v14 = *a1;
      PrimPath = (unsigned int *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v32);
      if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((void *)v14[1], PrimPath))
      {
        uint64_t v16 = *(void *)(*v14 + 24);
        if (!v16) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, unsigned int *))(*(void *)v16 + 48))(v16, PrimPath);
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v14[1], PrimPath, PrimPath);
      }
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
      if (v33) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v33);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v39);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36 + 8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39 + 8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42 + 8);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v50))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v50);
      int v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v42);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrototypes((uint64_t *)&v30, v17);
      uint64_t v18 = *((void *)&v42 + 1);
      if (*((void *)&v42 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      uint64_t v19 = v30;
      for (i = v31; v19 != i; uint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v19 + 32))
      {
        uint64_t v20 = *a1;
        uint64_t v21 = (unsigned int *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath(v19);
        if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((void *)v20[1], v21))
        {
          uint64_t v22 = *(void *)(*v20 + 24);
          if (!v22) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, unsigned int *))(*(void *)v22 + 48))(v22, v21);
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v20[1], v21, v21);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
        *(void *)&long long v39 = v12 & 0xFFFFFFFFFFFFDFFFLL;
        *((void *)&v39 + 1) = v28;
        *(void *)&long long v40 = v29;
        pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)v19, (uint64_t *)&v39, (uint64_t)&v42);
        *(void *)&long long v39 = v42;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v39 + 2, (_DWORD *)&v42 + 2);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v39 + 3, (_DWORD *)&v42 + 3);
        long long v40 = v43;
        uint64_t v41 = v44;
        *(void *)&long long v36 = v45;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v36 + 2, &v46);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v36 + 3, &v47);
        long long v37 = v48;
        uint64_t v38 = v49;
        while (v39 != v36 || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v40, (uint64_t)&v37))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v39, (uint64_t)v32);
          uint64_t v23 = *a1;
          uint64_t v24 = (unsigned int *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v32);
          if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((void *)v23[1], v24))
          {
            uint64_t v25 = *(void *)(*v23 + 24);
            if (!v25) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            (*(void (**)(uint64_t, unsigned int *))(*(void *)v25 + 48))(v25, v24);
            std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v23[1], v24, v24);
          }
          if ((v35 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
          if (v33) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v33);
          }
          pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v39);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42 + 8);
      }
      *(void *)&long long v42 = &v30;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    }
  }
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
  uint64_t result = v51;
  if (v51) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v51);
  }
  return result;
}

void sub_23F6C34D4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(realityio::LiveSceneUpdate const*,std::function<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>)const::$_2::operator()(uint64_t **a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  uint64_t v6 = (unsigned int *)(a2 + 8);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v70, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8));
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v69 = 0;
  uint64_t v67 = MEMORY[0x263F90778] + 16;
  if (!v68
    || (*(unsigned char *)(v68 + 57) & 8) != 0
    || !(*(unsigned int (**)(uint64_t))(MEMORY[0x263F90778] + 48))(v7)
    || (long long v37 = this,
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars((uint64_t *)&v50, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v67), uint64_t v8 = v50, v9 = v51, v46 = (void **)&v50, std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100](&v46), v8 == (void **)v9))
  {
    uint64_t v16 = *a1;
    if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((void *)(*a1)[1], v6))
    {
      uint64_t v17 = *(void *)(*v16 + 24);
      if (!v17) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, unsigned int *))(*(void *)v17 + 48))(v17, v6);
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v16[1], v6, v6);
    }
  }
  else
  {
    char v10 = *(void **)(a2 + 24);
    uint64_t v11 = (void *)(a2 + 32);
    if (v10 == (void *)(a2 + 32))
    {
      int IsPrimvar = 0;
    }
    else
    {
      while (1)
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar((uint64_t *)&v50, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v67, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 4));
        int IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
        if ((v53 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((BYTE8(v52) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v52 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
        if (v51) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v51);
        }
        if (IsPrimvar) {
          break;
        }
        uint64_t v13 = (void *)v10[1];
        if (v13)
        {
          do
          {
            CFStringRef v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            CFStringRef v14 = (void *)v10[2];
            BOOL v15 = *v14 == (void)v10;
            char v10 = v14;
          }
          while (!v15);
        }
        char v10 = v14;
        if (v14 == v11) {
          goto LABEL_25;
        }
      }
      int IsPrimvar = 1;
    }
LABEL_25:
    uint64_t v64 = &v64;
    unint64_t v65 = (uint64_t *)&v64;
    uint64_t v66 = 0;
    uint64_t v18 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v6);
    uint64_t v19 = (uint64_t)v64;
    *uint64_t v18 = v64;
    v18[1] = &v64;
    *(void *)(v19 + 8) = v18;
    BOOL v20 = __CFADD__(v66, 1);
    uint64_t v64 = v18;
    ++v66;
    uint64_t v21 = v37;
    if (!v20)
    {
      do
      {
        uint64_t v22 = v65;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v63, (_DWORD *)v65 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v63 + 1, (_DWORD *)v22 + 5);
        uint64_t v23 = v65;
        uint64_t v24 = *v65;
        *(void *)(v24 + 8) = v65[1];
        *(void *)v23[1] = v24;
        --v66;
        std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)(v23 + 2));
        operator delete(v23);
        PrimAtPath = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v59, v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v63);
        if (IsPrimvar)
        {
          uint64_t UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(PrimAtPath);
          unint64_t v28 = *(void *)UsdPrimAllPrimsPredicate;
          uint64_t v27 = *(void *)(UsdPrimAllPrimsPredicate + 8);
          uint64_t v29 = *(void *)(UsdPrimAllPrimsPredicate + 16);
          if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
            && ((v28 & 0x2000) != 0 || (v27 & 0x2000) == 0))
          {
            v28 |= 0x2000uLL;
            v27 &= ~0x2000uLL;
          }
          int v46 = (void **)v28;
          uint64_t v47 = v27;
          *(void *)&long long v48 = v29;
          pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v59, (uint64_t *)&v46, (uint64_t)&v50);
          int v46 = v50;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v47, &v51);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v47 + 1, (_DWORD *)&v51 + 1);
          long long v48 = v52;
          uint64_t v49 = v53;
          long long v42 = v54;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v43, &v55);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v43 + 1, &v56);
          long long v44 = v57;
          uint64_t v45 = v58;
          uint64_t v21 = v37;
          while (v46 != v42
               || v47 != v43
               || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v48, (uint64_t)&v44))
          {
            pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v46, (uint64_t)v38);
            PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v38);
            uint64_t v31 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath const&>(PrimPath);
            uint64_t v32 = (uint64_t)v64;
            *uint64_t v31 = v64;
            v31[1] = &v64;
            *(void *)(v32 + 8) = v31;
            uint64_t v64 = v31;
            ++v66;
            if ((v41 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
            if (v39) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
            }
            pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v46);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          PrimAtPath = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
        }
        uint64_t v33 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(PrimAtPath);
        if (v63 != *v33)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v59))
          {
            uint64_t v34 = *a1;
            if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((void *)(*a1)[1], (unsigned int *)&v63))
            {
              uint64_t v35 = *(void *)(*v34 + 24);
              if (!v35) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              (*(void (**)(uint64_t, uint64_t *))(*(void *)v35 + 48))(v35, &v63);
              std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v34[1], (unsigned int *)&v63, &v63);
            }
          }
        }
        if ((v62 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
        if (v60) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v60);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
      }
      while (v66);
    }
    std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::clear((uint64_t *)&v64);
  }
  MEMORY[0x2455CF0D0](&v67);
  if ((v73 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
  uint64_t result = v71;
  if (v71) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v71);
  }
  return result;
}

void sub_23F6C3BF0(_Unwind_Exception *a1)
{
  std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::clear((uint64_t *)(v1 - 176));
  MEMORY[0x2455CF0D0](v1 - 152);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t realityio::LiveSceneUpdate::isStageMetadataDirty(realityio::LiveSceneUpdate *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v2 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!v2) {
    return 1;
  }
  if (*(char *)(v2 + 39) < 0)
  {
    if (!*(void *)(v2 + 24)) {
      return 1;
    }
  }
  else if (!*(unsigned char *)(v2 + 39))
  {
    return 1;
  }
  if (std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>((void *)this + 29, a2))
  {
    return 1;
  }
  uint64_t v7 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(0);
  uint64_t v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, v7);
  if ((void *)((char *)this + 208) == v8) {
    return 0;
  }
  realityio::UsdPrimDelta::UsdPrimDelta((realityio::UsdPrimDelta *)v10, (const realityio::UsdPrimDelta *)(v8 + 5));
  if (v10[16])
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)this + 1);
    Hasunsigned int Metadata = pxrInternal__aapl__pxrReserved__::UsdStage::HasMetadata(v9, a2);
  }
  else
  {
    Hasunsigned int Metadata = 0;
  }
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)v10);
  return HasMetadata;
}

void sub_23F6C3DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::LiveSceneUpdate::isPrimMetadataDirty(realityio::LiveSceneUpdate *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  v10[0] = this;
  v10[1] = a2;
  void v10[2] = a3;
  uint64_t v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, a2);
  if ((void *)((char *)this + 208) != v6)
  {
    unint64_t v7 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      if (*(char *)(v7 + 39) < 0)
      {
        if (*(void *)(v7 + 24))
        {
LABEL_5:
          if (*((unsigned char *)v6 + 56)) {
            return realityio::LiveSceneUpdate::isPrimMetadataDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(v10);
          }
          else {
            return std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v6 + 12, a3) != 0;
          }
        }
      }
      else if (*(unsigned char *)(v7 + 39))
      {
        goto LABEL_5;
      }
    }
    return 1;
  }
  uint64_t result = realityio::LiveSceneUpdate::isPrimMetadataDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(v10);
  if (result)
  {
  }
  return result;
}

uint64_t realityio::LiveSceneUpdate::isPrimMetadataDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(const pxrInternal__aapl__pxrReserved__::SdfPath **a1)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a1 + 1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v5, v2, a1[1]);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5)) {
    Hasunsigned int Metadata = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5, a1[2]);
  }
  else {
    Hasunsigned int Metadata = 0;
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (v6) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  }
  return HasMetadata;
}

void sub_23F6C3F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t anonymous namespace'::isPrimPathPartOfResyncedSubtreeInStageDelta(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const realityio::UsdStageDelta *a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v11, v5);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v10, this);
  if (v10 == v11)
  {
LABEL_5:
    uint64_t v8 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2 + 16, &v10);
      if ((void *)((char *)a2 + 24) != v6)
      {
        realityio::UsdPrimDelta::UsdPrimDelta((realityio::UsdPrimDelta *)v12, (const realityio::UsdPrimDelta *)(v6 + 5));
        int v7 = v13;
        realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)v12);
        if (v7) {
          break;
        }
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v10, (int *)v12);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v10 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v12);
      if (v10 == v11) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  return v8;
}

void sub_23F6C40B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::LiveSceneUpdate::isPropertyDirty(realityio::LiveSceneUpdate *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  v10[0] = this;
  v10[1] = a2;
  void v10[2] = a3;
  uint64_t v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, a2);
  if ((char *)this + 208 != v6)
  {
    unint64_t v7 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      if (*(char *)(v7 + 39) < 0)
      {
        if (*(void *)(v7 + 24))
        {
LABEL_5:
          if (v6[56]) {
            return realityio::LiveSceneUpdate::isPropertyDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(v10);
          }
          else {
            return v6 + 72 != (unsigned char *)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)(v6 + 64), (uint64_t *)a3);
          }
        }
      }
      else if (*(unsigned char *)(v7 + 39))
      {
        goto LABEL_5;
      }
    }
    return 1;
  }
  uint64_t result = realityio::LiveSceneUpdate::isPropertyDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(v10);
  if (result)
  {
  }
  return result;
}

uint64_t realityio::LiveSceneUpdate::isPropertyDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(const pxrInternal__aapl__pxrReserved__::SdfPath **a1)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a1 + 1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v5, v2, a1[1]);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5)
    && (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5) & 1) == 0)
  {
    uint64_t HasProperty = pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5, a1[2]);
  }
  else
  {
    uint64_t HasProperty = 0;
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (v6) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  }
  return HasProperty;
}

void sub_23F6C4278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::LiveSceneUpdate::isPropertyMetadataDirty(realityio::LiveSceneUpdate *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  v23[0] = a3;
  v23[1] = this;
  v23[2] = a2;
  v23[3] = a4;
  uint64_t v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, a2);
  if ((void *)((char *)this + 208) == v8)
  {
    uint64_t result = realityio::LiveSceneUpdate::isPropertyMetadataDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()((uint64_t)v23);
    if (result)
    {
    }
    return result;
  }
  uint64_t v9 = v8;
  if (*((unsigned char *)v8 + 56)) {
    return realityio::LiveSceneUpdate::isPropertyMetadataDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()((uint64_t)v23);
  }
  unint64_t v12 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (v12)
  {
    if (*(char *)(v12 + 39) < 0)
    {
      if (*(void *)(v12 + 24))
      {
LABEL_11:
        unsigned __int8 v13 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)(v8 + 8), (uint64_t *)a3);
        if (v9 + 9 != v13)
        {
          unint64_t v14 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
          if (v14)
          {
            if (*(char *)(v14 + 39) < 0 ? *(void *)(v14 + 24) : *(unsigned __int8 *)(v14 + 39)) {
              return std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v13 + 8, a4) != 0;
            }
          }
          return 1;
        }
        return 0;
      }
    }
    else if (*(unsigned char *)(v12 + 39))
    {
      goto LABEL_11;
    }
  }
  unint64_t v16 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
  if (!v16) {
    return 1;
  }
  if ((*(char *)(v16 + 39) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v16 + 39)) {
      return 1;
    }
    goto LABEL_21;
  }
  if (!*(void *)(v16 + 24)) {
    return 1;
  }
LABEL_21:
  uint64_t v17 = (void *)v8[8];
  uint64_t v18 = v8 + 9;
  if (v17 == v8 + 9) {
    return 0;
  }
  do
  {
    uint64_t v19 = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v17 + 8, a4);
    uint64_t result = v19 != 0;
    if (v19) {
      break;
    }
    BOOL v20 = (void *)v17[1];
    if (v20)
    {
      do
      {
        uint64_t v21 = v20;
        BOOL v20 = (void *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        uint64_t v21 = (void *)v17[2];
        BOOL v22 = *v21 == (void)v17;
        uint64_t v17 = v21;
      }
      while (!v22);
    }
    uint64_t v17 = v21;
  }
  while (v21 != v18);
  return result;
}

uint64_t realityio::LiveSceneUpdate::isPropertyMetadataDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(uint64_t a1)
{
  unint64_t v1 = **(void **)a1 & 0xFFFFFFFFFFFFFFF8;
  if (!v1) {
    return 1;
  }
  if ((*(char *)(v1 + 39) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v1 + 39)) {
      goto LABEL_4;
    }
    return 1;
  }
  if (!*(void *)(v1 + 24)) {
    return 1;
  }
LABEL_4:
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)(a1 + 8) + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v10, v3, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 16));
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10) & 1) != 0
    && pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, *(const pxrInternal__aapl__pxrReserved__::TfToken **)a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty(&v6, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, *(const pxrInternal__aapl__pxrReserved__::TfToken **)a1);
    Hasunsigned int Metadata = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6, *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a1 + 24));
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
    if (v7) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
    }
  }
  else
  {
    Hasunsigned int Metadata = 0;
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  }
  return HasMetadata;
}

void sub_23F6C4580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

CFStringRef realityio::LiveSceneUpdate::description@<X0>(realityio::LiveSceneUpdate *this@<X0>, CFStringRef *a2@<X8>)
{
  *a2 = 0;
  CFStringRef result = CFStringCreateWithFormat(0, 0, @"<LiveSceneUpdate: %p>", this);
  *a2 = result;
  return result;
}

void sub_23F6C45F4(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneUpdate::~LiveSceneUpdate(realityio::LiveSceneUpdate *this)
{
  realityio::LiveSceneUpdate::~LiveSceneUpdate(this);

  JUMPOUT(0x2455D2BD0);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_26F3447A8;
  realityio::UsdStageDelta::~UsdStageDelta((realityio::LiveSceneUpdate *)((char *)this + 184));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy((uint64_t)this + 160, *((void **)this + 21));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)this + 136, *((void **)this + 18));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)this + 112, *((void **)this + 15));
  std::__tree<std::string>::destroy((uint64_t)this + 88, *((char **)this + 12));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  uint64_t v3 = (void **)((char *)this + 40);
  std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)this + 1);
}

uint64_t realityio::LiveSceneUpdate::LiveSceneUpdate(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, uint64_t a8, char a9)
{
  *(void *)(a1 + 8) = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26F3447A8;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(void *)(a1 + 32) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a4 + 24);
  uint64_t v12 = a4 + 40;
  *(void *)(a1 + 56) = *(void *)(a4 + 40);
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  uint64_t v13 = (void *)(a4 + 48);
  *(void *)(a1 + 64) = *(void *)(a4 + 48);
  BOOL v15 = (void *)(a4 + 56);
  uint64_t v14 = *(void *)(a4 + 56);
  *(void *)(a1 + 72) = v14;
  uint64_t v16 = a1 + 72;
  uint64_t v17 = *(void *)(a4 + 64);
  *(void *)(a1 + 80) = v17;
  if (v17)
  {
    *(void *)(v14 + 16) = v16;
    void *v13 = v15;
    void *v15 = 0;
    *(void *)(a4 + 64) = 0;
  }
  else
  {
    *(void *)(a1 + 64) = v16;
  }
  *(void *)(a1 + 88) = *(void *)(a4 + 72);
  uint64_t v19 = (void *)(a4 + 80);
  uint64_t v18 = *(void *)(a4 + 80);
  *(void *)(a1 + 96) = v18;
  uint64_t v20 = a1 + 96;
  uint64_t v21 = *(void *)(a4 + 88);
  *(void *)(a1 + 104) = v21;
  if (v21)
  {
    *(void *)(v18 + 16) = v20;
    *(void *)(a4 + 72) = v19;
    *uint64_t v19 = 0;
    *(void *)(a4 + 88) = 0;
  }
  else
  {
    *(void *)(a1 + 88) = v20;
  }
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v23 = *(void *)(a4 + 24);
  for (uint64_t i = *(void *)(a4 + 32);
        i != v23;
        std::allocator<realityio::internal::PrimToEntityMap::EntityData>::destroy[abi:ne180100](v12, i))
  {
    i -= 104;
  }
  *(void *)(a4 + 32) = v23;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)v13, *(void **)(a4 + 56));
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 48) = v15;
  std::__tree<std::string>::destroy(a4 + 72, *(char **)(a4 + 80));
  *(void *)(a4 + 80) = 0;
  *(void *)(a4 + 88) = 0;
  *(void *)(a4 + 72) = v19;
  *(void *)(a1 + 112) = *a5;
  uint64_t v24 = a5 + 1;
  uint64_t v25 = a5[1];
  *(void *)(a1 + 120) = v25;
  uint64_t v26 = a1 + 120;
  uint64_t v27 = a5[2];
  *(void *)(a1 + 128) = v27;
  if (v27)
  {
    *(void *)(v25 + 16) = v26;
    *a5 = v24;
    *uint64_t v24 = 0;
    a5[2] = 0;
  }
  else
  {
    *(void *)(a1 + 112) = v26;
  }
  *(void *)(a1 + 136) = *a6;
  unint64_t v28 = a6 + 1;
  uint64_t v29 = a6[1];
  *(void *)(a1 + 144) = v29;
  uint64_t v30 = a1 + 144;
  uint64_t v31 = a6[2];
  *(void *)(a1 + 152) = v31;
  if (v31)
  {
    *(void *)(v29 + 16) = v30;
    *a6 = v28;
    void *v28 = 0;
    a6[2] = 0;
  }
  else
  {
    *(void *)(a1 + 136) = v30;
  }
  *(void *)(a1 + 160) = *a7;
  uint64_t v32 = a7 + 1;
  uint64_t v33 = a7[1];
  *(void *)(a1 + 168) = v33;
  uint64_t v34 = a1 + 168;
  uint64_t v35 = a7[2];
  *(void *)(a1 + 176) = v35;
  if (v35)
  {
    *(void *)(v33 + 16) = v34;
    *a7 = v32;
    *uint64_t v32 = 0;
    a7[2] = 0;
  }
  else
  {
    *(void *)(a1 + 160) = v34;
  }
  *(void *)(a1 + 192) = *(void *)(a3 + 8);
  *(void *)(a1 + 184) = &unk_26F335EC8;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(a1 + 192));
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::map[abi:ne180100]((uint64_t *)(a1 + 200), a3 + 16);
  *(void *)(a1 + 224) = &unk_26F341FE8;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(a1 + 232, a3 + 48);
  *(void *)(a1 + 272) = a8;
  *(unsigned char *)(a1 + 280) = a9;
  return a1;
}

void sub_23F6C4924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, atomic_uint **a10)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(v14, *(void **)(v13 + 208));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v10);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(v15, *v12);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy(v17, *v18);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(v16, *v11);
  realityio::internal::PrimToEntityMap::~PrimToEntityMap(a9);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(a10);
  _Unwind_Resume(a1);
}

void *std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath const&>(_DWORD *a1)
{
  unint64_t v2 = operator new(0x18uLL);
  void *v2 = 0;
  v2[1] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v2 + 4, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v2 + 5, a1 + 1);
  return v2;
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v3);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v4;
    if (v4 >= *(void *)&v2) {
      unint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = v4 & (*(void *)&v2 - 1);
  }
  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  CFStringRef result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v4 == v9)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v3) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v2) {
            v9 %= *(void *)&v2;
          }
        }
        else
        {
          v9 &= *(void *)&v2 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      CFStringRef result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t RIOBuilderDirtyMetadataDescriptorGetTypeID()
{
  if (RIOBuilderDirtyMetadataDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderDirtyMetadataDescriptorGetTypeID::onceToken, &__block_literal_global_27);
  }
  return RIOBuilderDirtyMetadataDescriptorGetTypeID::typeID;
}

void __RIOBuilderDirtyMetadataDescriptorGetTypeID_block_invoke()
{
  if (!RIOBuilderDirtyMetadataDescriptorGetTypeID::typeID) {
    RIOBuilderDirtyMetadataDescriptorGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOBuilderDirtyMetadataDescriptorCreateWithMetadata(uint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = *(std::__shared_weak_count_vtbl **)(a1 + 16);
    if ((v1 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v1 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      unint64_t v1 = (std::__shared_weak_count_vtbl *)((unint64_t)v1 & 0xFFFFFFFFFFFFFFF8);
    }
  }
  else
  {
    unint64_t v1 = 0;
  }
  int8x8_t v2 = (std::__shared_weak_count *)operator new(0x28uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F344868;
  v2[1].__vftable = v1;
  unint64_t v3 = (std::__shared_weak_count_vtbl **)&v2[1];
  unint64_t v4 = v1;
  if ((v1 & 7) != 0)
  {
    char add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v1 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
    unint64_t v4 = *v3;
    if ((add_explicit & 1) == 0)
    {
      unint64_t v4 = (std::__shared_weak_count_vtbl *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v3 = v4;
    }
  }
  LOBYTE(v2[1].__shared_owners_) = v4 == 0;
  uint64_t v8 = v2 + 1;
  unint64_t v9 = v2;
  uint64_t v6 = RIOBuilderDirtyMetadataDescriptorCreate<std::shared_ptr<realityio::DirtyMetadataDescriptor const> &>(&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v6;
}

void sub_23F6C4CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderDirtyMetadataDescriptorCopyMetadata(uint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = *(uint64_t **)(a1 + 16);
    int8x8_t v2 = *(std::__shared_weak_count **)(a1 + 24);
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v1)
    {
      uint64_t v3 = *v1;
      uint64_t v7 = v3;
      if ((v3 & 7) != 0)
      {
        unint64_t v4 = (atomic_uint *)(v3 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
          uint64_t v7 = (uint64_t)v4;
        }
      }
      uint64_t v5 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v7);
      if ((v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (!v2) {
        return v5;
      }
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
      return v5;
    }
    if (RIOPxrTfTokenEmpty::onceToken != -1) {
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_2_2);
    }
    uint64_t v5 = RIOPxrTfTokenEmpty::tokenRef;
    if (v2) {
      goto LABEL_18;
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1) {
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_2_2);
    }
    return RIOPxrTfTokenEmpty::tokenRef;
  }
  return v5;
}

void sub_23F6C4DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void _RIOBuilderDirtyMetadataDescriptorCFFinalize(void *a1)
{
  unint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

BOOL _RIOBuilderDirtyMetadataDescriptorCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderDirtyMetadataDescriptorCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderDirtyMetadataDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderDirtyMetadataDescriptor %p>", a1);
}

CFStringRef _RIOBuilderDirtyMetadataDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderDirtyMetadataDescriptor %p>", a1);
}

void std::__shared_ptr_emplace<realityio::DirtyMetadataDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F344868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::DirtyMetadataDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F344868;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::DirtyMetadataDescriptor>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t RIOBuilderInputDescriptorGetTypeID()
{
  if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
  }
  return RIOBuilderInputDescriptorGetTypeID::typeID;
}

void __RIOBuilderInputDescriptorGetTypeID_block_invoke()
{
  if (!RIOBuilderInputDescriptorGetTypeID::typeID) {
    RIOBuilderInputDescriptorGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOBuilderCurrentPrimInputDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3)
{
  realityio::CFStringCopyUTF8String(a1, (uint64_t)v12);
  if (v12[0])
  {
    int v5 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v13;
    }
    if (a2)
    {
      BOOL v7 = a3 == 0;
      uint64_t v8 = (std::__shared_weak_count *)operator new(0x48uLL);
      v8->__shared_owners_ = 0;
      v8->__shared_weak_owners_ = 0;
      v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330630;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v14 = __p;
      }
      realityio::CurrentPrimInputDescriptor::CurrentPrimInputDescriptor(&v8[1].__vftable, (uint64_t)&v14, (uint64_t *)(a2 + 16), v7);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1) {
        dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      uint64_t v6 = Instance;
      if (Instance)
      {
        *(void *)(Instance + 16) = v8 + 1;
        *(void *)(Instance + 24) = v8;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    else
    {
      uint64_t v6 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v5 & 0x80000000) == 0) {
        return v6;
      }
    }
    else if ((v5 & 0x80000000) == 0)
    {
      return v6;
    }
    operator delete(v13.__r_.__value_.__l.__data_);
    return v6;
  }
  return 0;
}

void sub_23F6C51A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v28);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v26 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderCurrentPrimInputDescriptorCopyInputName(uint64_t a1)
{
}

CFStringRef anonymous namespace'::inputNameRefFromInputDescriptorRef(uint64_t a1, std::__shared_weak_count *a2)
{
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v3 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    unint64_t v3 = *(const char **)v3;
  }
  CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  if (a2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a2);
  }
  return v4;
}

void sub_23F6C5288(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::outputIdentifierRefFromInputDescriptorRef(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 16);
    unint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v3 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(v1 + 32));
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1) {
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_2_2);
    }
    return RIOPxrTfTokenEmpty::tokenRef;
  }
  return v3;
}

void sub_23F6C5328(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL RIOBuilderCurrentPrimInputDescriptorCopyOptionality(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    int v3 = *(_DWORD *)(v2 + 40);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  else
  {
    int v3 = *(_DWORD *)(v2 + 40);
  }
  return v3 != 1;
}

uint64_t RIOBuilderChildPrimInputDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  realityio::CFStringCopyUTF8String(a1, (uint64_t)v15);
  if (!v15[0]) {
    return 0;
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v16;
  }
  if (a2)
  {
    BOOL v8 = a4 == 0;
    unint64_t v9 = (std::__shared_weak_count *)operator new(0x50uLL);
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F334658;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v18 = __p;
    }
    uint64_t v10 = *(void *)(a3 + 16);
    uint64_t v17 = v10;
    if ((v10 & 7) != 0)
    {
      uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v11, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v17 = (uint64_t)v11;
      }
    }
    realityio::ChildPrimInputDescriptor::ChildPrimInputDescriptor(&v9[1].__vftable, (uint64_t)&v18, (uint64_t *)(a2 + 16), &v17, v8);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1) {
      dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v7 = Instance;
    if (Instance)
    {
      *(void *)(Instance + 16) = v9 + 1;
      *(void *)(Instance + 24) = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v15[0] && SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_23F6C5570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v30);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDescendantPrimInputDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  realityio::CFStringCopyUTF8String(a1, (uint64_t)v14);
  if (v14[0])
  {
    int v7 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v13 = __p;
    }
    if (a2)
    {
      BOOL v9 = a4 == 0;
      uint64_t v10 = (std::__shared_weak_count *)operator new(0x60uLL);
      v10->__shared_owners_ = 0;
      v10->__shared_weak_owners_ = 0;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3326A8;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v16, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      }
      else {
        std::string v16 = v13;
      }
      realityio::DescendantPrimInputDescriptor::DescendantPrimInputDescriptor(&v10[1].__vftable, (uint64_t)&v16, (uint64_t *)(a2 + 16), (uint64_t *)(a3 + 16), v9);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      v12[0] = v10 + 1;
      v12[1] = v10;
      uint64_t v8 = RIOBuilderInputDescriptorCreate<std::shared_ptr<realityio::InputDescriptor const> &>(v12);
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v13.__r_.__value_.__l.__data_);
      if ((v7 & 0x80000000) == 0) {
        return v8;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      return v8;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    return v8;
  }
  return 0;
}

void sub_23F6C5760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v30);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v28 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDescendantPrimsInputDescriptorCreate(__CFString *a1, uint64_t a2, const __CFArray *a3, uint64_t a4)
{
  realityio::CFStringCopyUTF8String(a1, (uint64_t)v18);
  if (v18[0])
  {
    int v7 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v17 = __p;
    }
    if (a2)
    {
      v16[0] = 0;
      v16[1] = 0;
      uint64_t v15 = v16;
      CFIndex Count = CFArrayGetCount(a3);
      if (Count >= 1)
      {
        CFIndex v9 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a3, v9);
          std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v15, ValueAtIndex + 2, ValueAtIndex + 2);
          ++v9;
        }
        while (Count != v9);
      }
      BOOL v11 = a4 == 0;
      uint64_t v12 = (std::__shared_weak_count *)operator new(0x60uLL);
      v12->__shared_owners_ = 0;
      v12->__shared_weak_owners_ = 0;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3326A8;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v20, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
      }
      else {
        std::string v20 = v17;
      }
      realityio::DescendantPrimInputDescriptor::DescendantPrimInputDescriptor(&v12[1].__vftable, (uint64_t)&v20, (uint64_t *)(a2 + 16), (uint64_t)&v15, v11);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      v14[0] = v12 + 1;
      v14[1] = v12;
      a2 = RIOBuilderInputDescriptorCreate<std::shared_ptr<realityio::InputDescriptor const> &>(v14);
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&v15, v16[0]);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v17.__r_.__value_.__l.__data_);
      if ((v7 & 0x80000000) == 0) {
        return a2;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      return a2;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    return a2;
  }
  return 0;
}

void sub_23F6C5984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23)
{
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v26);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&a12, a13);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderChildPrimInputDescriptorCopyInputName(uint64_t a1)
{
}

uint64_t RIOBuilderChildPrimInputDescriptorCopyChildPrimType(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  int v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v4 + 6);
    if (v3)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_12:
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1) {
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_2_2);
    }
    uint64_t v5 = RIOPxrTfTokenEmpty::tokenRef;
    if (v3) {
      goto LABEL_12;
    }
  }
  return v5;
}

void sub_23F6C5B04(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL RIOBuilderChildPrimInputDescriptorCopyOptionality(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    int v3 = *(_DWORD *)(v2 + 40);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  else
  {
    int v3 = *(_DWORD *)(v2 + 40);
  }
  return v3 != 1;
}

uint64_t RIOBuilderParentPrimInputDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3)
{
  realityio::CFStringCopyUTF8String(a1, (uint64_t)v14);
  if (v14[0])
  {
    int v5 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v15;
    }
    if (a2)
    {
      BOOL v7 = a3 == 0;
      uint64_t v8 = (std::__shared_weak_count *)operator new(0x48uLL);
      v8->__shared_owners_ = 0;
      v8->__shared_weak_owners_ = 0;
      v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F344938;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v16 = __p;
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v17, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      }
      else {
        std::string v17 = v16;
      }
      CFIndex v9 = (uint64_t *)(a2 + 16);
      uint64_t v10 = &v8[1].__vftable;
      realityio::InputDescriptor::InputDescriptor((uint64_t)&v8[1], (long long *)&v17, v9, v7);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      void *v10 = &unk_26F344988;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1) {
        dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      uint64_t v6 = Instance;
      if (Instance)
      {
        *(void *)(Instance + 16) = v10;
        *(void *)(Instance + 24) = v8;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    else
    {
      uint64_t v6 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v5 & 0x80000000) == 0) {
        return v6;
      }
    }
    else if ((v5 & 0x80000000) == 0)
    {
      return v6;
    }
    operator delete(v15.__r_.__value_.__l.__data_);
    return v6;
  }
  return 0;
}

void sub_23F6C5D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v28);
  if (a14 < 0) {
    operator delete(a9);
  }
  if (v26 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderParentPrimInputDescriptorCopyInputName(uint64_t a1)
{
}

BOOL RIOBuilderParentPrimInputDescriptorCopyOptionality(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    int v3 = *(_DWORD *)(v2 + 40);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  else
  {
    int v3 = *(_DWORD *)(v2 + 40);
  }
  return v3 != 1;
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  realityio::CFStringCopyUTF8String(a1, (uint64_t)v15);
  if (!v15[0]) {
    return 0;
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v16;
  }
  if (a2)
  {
    BOOL v8 = a4 == 0;
    CFIndex v9 = (std::__shared_weak_count *)operator new(0x50uLL);
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3345C8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v18 = __p;
    }
    uint64_t v10 = *(void *)(a3 + 16);
    uint64_t v17 = v10;
    if ((v10 & 7) != 0)
    {
      BOOL v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v11, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v17 = (uint64_t)v11;
      }
    }
    realityio::RelatedPrimInputDescriptor::RelatedPrimInputDescriptor(&v9[1].__vftable, (uint64_t)&v18, (uint64_t *)(a2 + 16), &v17, v8);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1) {
      dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v7 = Instance;
    if (Instance)
    {
      *(void *)(Instance + 16) = v9 + 1;
      *(void *)(Instance + 24) = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v15[0] && SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_23F6C602C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v30);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderRelatedPrimInputDescriptorCopyInputName(uint64_t a1)
{
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCopyPropertyNameOnCurrentPrimWithRelationship(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  int v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v4 + 6);
    if (v3)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_12:
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1) {
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_2_2);
    }
    uint64_t v5 = RIOPxrTfTokenEmpty::tokenRef;
    if (v3) {
      goto LABEL_12;
    }
  }
  return v5;
}

void sub_23F6C61B8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL RIOBuilderRelatedPrimInputDescriptorCopyOptionality(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    int v3 = *(_DWORD *)(v2 + 40);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  else
  {
    int v3 = *(_DWORD *)(v2 + 40);
  }
  return v3 != 1;
}

uint64_t RIOBuilderStaticPrimInputDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  realityio::CFStringCopyUTF8String(a1, (uint64_t)v14);
  if (v14[0])
  {
    int v7 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v15;
    }
    if (a2)
    {
      BOOL v9 = a4 == 0;
      uint64_t v10 = (std::__shared_weak_count *)operator new(0x50uLL);
      v10->__shared_owners_ = 0;
      v10->__shared_weak_owners_ = 0;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F332BC8;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v18 = __p;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, (_DWORD *)(a3 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, (_DWORD *)(a3 + 20));
      realityio::StaticPrimInputDescriptor::StaticPrimInputDescriptor((uint64_t)&v10[1], (uint64_t)&v18, (uint64_t *)(a2 + 16), &v16, v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1) {
        dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      uint64_t v8 = Instance;
      if (Instance)
      {
        *(void *)(Instance + 16) = v10 + 1;
        *(void *)(Instance + 24) = v10;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v7 & 0x80000000) == 0) {
        return v8;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      return v8;
    }
    operator delete(v15.__r_.__value_.__l.__data_);
    return v8;
  }
  return 0;
}

void sub_23F6C6410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v28);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v26 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderStaticPrimInputDescriptorCopyInputName(uint64_t a1)
{
}

uint64_t RIOBuilderStaticPrimInputDescriptorCopyPrimPath(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  int v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t EmptyPath = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4 + 11);
    if (v3)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_10:
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else
  {
    uint64_t EmptyPath = RIOPxrSdfPathCreateEmptyPath();
    if (v3) {
      goto LABEL_10;
    }
  }
  return EmptyPath;
}

void sub_23F6C6560(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL RIOBuilderStaticPrimInputDescriptorCopyOptionality(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    int v3 = *(_DWORD *)(v2 + 40);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  else
  {
    int v3 = *(_DWORD *)(v2 + 40);
  }
  return v3 != 1;
}

uint64_t RIOBuilderEntityGeneratingPrimDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3)
{
  realityio::CFStringCopyUTF8String(a1, (uint64_t)v12);
  if (v12[0])
  {
    int v5 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v13;
    }
    if (a2)
    {
      BOOL v7 = a3 == 0;
      uint64_t v8 = (std::__shared_weak_count *)operator new(0x48uLL);
      v8->__shared_owners_ = 0;
      v8->__shared_weak_owners_ = 0;
      v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E878;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v14 = __p;
      }
      realityio::EntityGeneratingOwningPrimInputDescriptor::EntityGeneratingOwningPrimInputDescriptor(&v8[1].__vftable, (uint64_t)&v14, (uint64_t *)(a2 + 16), v7);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1) {
        dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      uint64_t v6 = Instance;
      if (Instance)
      {
        *(void *)(Instance + 16) = v8 + 1;
        *(void *)(Instance + 24) = v8;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    else
    {
      uint64_t v6 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v5 & 0x80000000) == 0) {
        return v6;
      }
    }
    else if ((v5 & 0x80000000) == 0)
    {
      return v6;
    }
    operator delete(v13.__r_.__value_.__l.__data_);
    return v6;
  }
  return 0;
}

void sub_23F6C6778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v28);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v26 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderEntityGeneratingPrimInputDescriptorCopyInputName(uint64_t a1)
{
}

BOOL RIOBuilderEntityGeneratingPrimInputDescriptorCopyOptionality(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    int v3 = *(_DWORD *)(v2 + 40);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  else
  {
    int v3 = *(_DWORD *)(v2 + 40);
  }
  return v3 != 1;
}

uint64_t RIOBuilderCustomCallbackInputDescriptorCreate(__CFString *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  realityio::CFStringCopyUTF8String(a1, (uint64_t)v16);
  if (v16[0])
  {
    int v8 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v17;
    }
    if (a2)
    {
      BOOL v10 = a4 == 0;
      BOOL v11 = (std::__shared_weak_count *)operator new(0x50uLL);
      v11->__shared_owners_ = 0;
      v11->__shared_weak_owners_ = 0;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3449C8;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v18 = __p;
      }
      id v12 = v7;
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v19, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v19 = v18;
      }
      realityio::InputDescriptor::InputDescriptor((uint64_t)&v11[1], (long long *)&v19, (uint64_t *)(a2 + 16), v10);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      v11[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3321D0;
      v11[3].__vftable = (std::__shared_weak_count_vtbl *)MEMORY[0x2455D3180](v12);

      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1) {
        dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      uint64_t v9 = Instance;
      if (Instance)
      {
        *(void *)(Instance + 16) = v11 + 1;
        *(void *)(Instance + 24) = v11;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    else
    {
      uint64_t v9 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
    else if ((v8 & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v17.__r_.__value_.__l.__data_);
    goto LABEL_25;
  }
  uint64_t v9 = 0;
LABEL_25:

  return v9;
}

void sub_23F6C6A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v26);
  operator delete(v30);
  if (a14 < 0) {
    operator delete(a9);
  }
  if (v28 < 0) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderCustomCallbackInputDescriptorCopyInputName(uint64_t a1)
{
}

BOOL RIOBuilderCustomCallbackInputDescriptorCopyOptionality(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    int v3 = *(_DWORD *)(v2 + 40);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  else
  {
    int v3 = *(_DWORD *)(v2 + 40);
  }
  return v3 != 1;
}

id RIOBuilderCustomCallbackInputDescriptorCopyCallbackFunction(uint64_t a1)
{
  int v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    CFStringRef v4 = (void *)MEMORY[0x2455D3180](v2[6]);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    CFStringRef v4 = (void *)MEMORY[0x2455D3180](v2[6]);
  }

  return v4;
}

void *std::dynamic_pointer_cast[abi:ne180100]<realityio::ObjCCustomInputDescriptor const,realityio::InputDescriptor const>(void *result, void *lpsrc, uint64_t a3)
{
  int v3 = result;
  if (lpsrc
  {
    *int v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *int v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t RIOBuilderInputDescriptorCopyType(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v2) {
    goto LABEL_30;
  }
  {
    uint64_t v2 = 1;
    if (!v1) {
      return v2;
    }
    goto LABEL_20;
  }
  {
    uint64_t v2 = 2;
    if (!v1) {
      return v2;
    }
    goto LABEL_20;
  }
  {
    uint64_t v2 = 3;
    if (!v1) {
      return v2;
    }
    goto LABEL_20;
  }
  {
    uint64_t v2 = 4;
    if (!v1) {
      return v2;
    }
    goto LABEL_20;
  }
  {
    std::dynamic_pointer_cast[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor const,realityio::InputDescriptor const>(&v6, (void *)v2, (uint64_t)v1);
    if (v6)
    {
      uint64_t v2 = 6;
    }
    else
    {
      std::dynamic_pointer_cast[abi:ne180100]<realityio::ObjCCustomInputDescriptor const,realityio::InputDescriptor const>(&v4, (void *)v2, (uint64_t)v1);
      if (v4) {
        uint64_t v2 = 7;
      }
      else {
        uint64_t v2 = 0;
      }
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
LABEL_30:
    if (v1) {
      goto LABEL_31;
    }
    return v2;
  }
  uint64_t v2 = 5;
  if (v1)
  {
LABEL_20:
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
LABEL_31:
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v2;
}

void *std::dynamic_pointer_cast[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor const,realityio::InputDescriptor const>(void *result, void *lpsrc, uint64_t a3)
{
  int v3 = result;
  if (lpsrc
  {
    *int v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *int v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void _RIOBuilderInputDescriptorCFFinalize(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

BOOL _RIOBuilderInputDescriptorCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderInputDescriptorCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderInputDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderInputDescriptor %p>", a1);
}

CFStringRef _RIOBuilderInputDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderInputDescriptor %p>", a1);
}

void *realityio::DescendantPrimInputDescriptor::DescendantPrimInputDescriptor(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (long long *)&__p, a3, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_26F3326F8;
  std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100](a1 + 6, a4);
  return a1;
}

void sub_23F6C708C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  realityio::InputDescriptor::~InputDescriptor(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::ParentPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F344938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ParentPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F344938;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::ParentPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void realityio::ParentPrimInputDescriptor::~ParentPrimInputDescriptor(realityio::ParentPrimInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

void *realityio::ParentPrimInputDescriptor::resolvedPrimPaths@<X0>(realityio::ParentPrimInputDescriptor *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  CFStringRef result = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  if (*(void *)a2 != *result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v8, a2);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, (unsigned int *)&v8, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return (void *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  }
  return result;
}

void sub_23F6C7214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::ObjCCustomInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3449C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ObjCCustomInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3449C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::ObjCCustomInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

realityio::ArbitraryComponentStructBuilder *realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(realityio::ArbitraryComponentStructBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[13] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "ArbitraryComponentStructBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kArbitraryComponentStructBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40A48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40A48))
  {
    operator new();
  }
  uint64_t v5 = _MergedGlobals_43;
  uint64_t v6 = (std::__shared_weak_count *)unk_268C40A40;
  if (unk_268C40A40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C40A40 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F344B68;
  void v12[3] = v12;
  v11[0] = &unk_26F344BE8;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F344A18;
  return this;
}

void sub_23F6C7774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char ***a24,uint64_t a25,uint64_t a26,char **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,char *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,std::__shared_weak_count *a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  int v55 = *(std::__shared_weak_count **)(v53 - 104);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (a52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a52);
  }
  *(void *)(v53 - 232) = &a45;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 232));
  uint64_t v56 = 40;
  while (1)
  {
    long long v57 = *(std::__shared_weak_count **)(v53 - 160 + v56);
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    v56 -= 16;
    if (v56 == -8)
    {
      if (a32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a32);
      }
      *(void *)(v53 - 232) = &a24;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 232));
      a24 = &a27;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
      if ((a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (a42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a42);
      }
      a27 = &a34;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
      a34 = &a37;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
      if ((a40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (a44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a44);
      }
      *(void *)(v53 - 160) = &a48;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 160));
      MEMORY[0x2455D2BD0](v52, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_268C40A48);
      if (a17 < 0) {
        operator delete(__p);
      }
      if (a23 < 0) {
        operator delete(a18);
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::ArbitraryComponentStructBuilder::run(realityio::ArbitraryComponentStructBuilder *this, realityio::Inputs *a2)
{
  uint64_t v5 = *((void *)this + 2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentStructPrimPath");
  uint64_t v6 = (_DWORD *)((char *)this + 8);
  std::allocate_shared[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath const&,void>(&v21, (_DWORD *)this + 2);
  realityio::Outputs::storeValue<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>(v5, &__p, &v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v19 < 0) {
    operator delete((void *)__p);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  id v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&__p, v7, (realityio::Inputs *)((char *)a2 + 32));
  if (!*((void *)&__p + 1) || (*(unsigned char *)(*((void *)&__p + 1) + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&__p + 1), v8);
  }
  int v9 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v18);
  if (*((void *)&__p + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  if (v9)
  {
    uint64_t v11 = *((void *)this + 2);
    char v10 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentAnimationFilePrimPath");
    std::allocate_shared[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath const&,void>(&v21, (_DWORD *)this + 2);
    realityio::Outputs::storeValue<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>(v11, &__p, &v21);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (v19 < 0) {
      operator delete((void *)__p);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  id v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&__p, v12, (realityio::Inputs *)((char *)a2 + 32));
  if (!*((void *)&__p + 1) || (*(unsigned char *)(*((void *)&__p + 1) + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&__p + 1), v13);
  }
  int v14 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v18);
  if (*((void *)&__p + 1)) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  if (v14)
  {
    uint64_t v16 = *((void *)this + 2);
    std::string v15 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentClipDefinitionPrimPath");
    std::allocate_shared[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath const&,void>(&v21, v6);
    realityio::Outputs::storeValue<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>(v16, &__p, &v21);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (v19 < 0) {
      operator delete((void *)__p);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_23F6C7D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void realityio::Outputs::storeValue<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  id v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *id v7 = &unk_26F344CB8;
  uint64_t v9 = *a3;
  char v8 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v7[3] = &unk_26F344D08;
  v7[4] = v9;
  v7[5] = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  id v12 = a2;
  char v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
  uint64_t v11 = (std::__shared_weak_count *)v10[8];
  v10[7] = (uint64_t)(v7 + 3);
  unsigned char v10[8] = (uint64_t)v7;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F6C7EF0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::ArbitraryComponentStructBuilder::clear(realityio::ArbitraryComponentStructBuilder *this, realityio::Inputs *a2)
{
  uint64_t v4 = (std::mutex *)*((void *)this + 2);
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentStructPrimPath");
  std::mutex::lock(v4 + 1);
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v4->__m_.__opaque[32], (const void **)__p);
  std::mutex::unlock(v4 + 1);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (&v4->__m_.__opaque[40] != (char *)v5)
  {
    uint64_t v7 = *((void *)this + 2);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentStructPrimPath");
    std::mutex::lock((std::mutex *)(v7 + 64));
    if (v7 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v7 + 40, (const void **)__p))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v7 + 40), (const void **)__p); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v7, (unsigned __int8 *)__p);
    }
    std::mutex::unlock((std::mutex *)(v7 + 64));
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  uint64_t v9 = (std::mutex *)*((void *)this + 2);
  char v8 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentAnimationFilePrimPath");
  std::mutex::lock(v9 + 1);
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v9->__m_.__opaque[32], (const void **)__p);
  std::mutex::unlock(v9 + 1);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (&v9->__m_.__opaque[40] != (char *)v10)
  {
    uint64_t v12 = *((void *)this + 2);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentAnimationFilePrimPath");
    std::mutex::lock((std::mutex *)(v12 + 64));
    if (v12 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v12 + 40, (const void **)__p))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v12 + 40), (const void **)__p); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v12, (unsigned __int8 *)__p);
    }
    std::mutex::unlock((std::mutex *)(v12 + 64));
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  int v14 = (std::mutex *)*((void *)this + 2);
  std::string v13 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentClipDefinitionPrimPath");
  std::mutex::lock(v14 + 1);
  uint64_t v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v14->__m_.__opaque[32], (const void **)__p);
  std::mutex::unlock(v14 + 1);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (&v14->__m_.__opaque[40] != (char *)v15)
  {
    uint64_t v17 = *((void *)this + 2);
    uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentClipDefinitionPrimPath");
    std::mutex::lock((std::mutex *)(v17 + 64));
    if (v17 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v17 + 40, (const void **)__p))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v17 + 40), (const void **)__p); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v17, (unsigned __int8 *)__p);
    }
    std::mutex::unlock((std::mutex *)(v17 + 64));
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_23F6C8238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex::unlock(v16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void realityio::ArbitraryComponentStructBuilder::~ArbitraryComponentStructBuilder(realityio::ArbitraryComponentStructBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

_anonymous_namespace_::ArbitraryComponentStructDirtyPrimDescriptor *anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor::ArbitraryComponentStructDirtyPrimDescriptor(_anonymous_namespace_::ArbitraryComponentStructDirtyPrimDescriptor *this)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor((uint64_t)this, v4, v3);
  uint64_t v5 = v3;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  v3[0] = (void **)v4;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v3);
  *(void *)this = &unk_26F344A90;
  return this;
}

void sub_23F6C8390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v3 - 40) = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23F6C841C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor::~ArbitraryComponentStructDirtyPrimDescriptor(_anonymous_namespace_::ArbitraryComponentStructDirtyPrimDescriptor *this)
{
  *(void *)this = &unk_26F33EE30;
  uint64_t v1 = (void **)((char *)this + 8);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_26F33EE30;
  uint64_t v2 = (void **)((char *)this + 8);
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2455D2BD0](this, 0x10A1C402FEF67C7);
}

uint64_t anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *a4, int a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v73[4] = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](&v63, "RealityKitStruct");
  uint64_t v17 = v63;
  if ((*a6 & 0xFFFFFFFFFFFFFFF8) == (v63 & 0xFFFFFFFFFFFFFFF8))
  {
    BOOL v20 = 0;
  }
  else
  {
    MEMORY[0x2455CF810](&v59, "RealityKitDict");
    uint64_t v18 = v59;
    if ((*a6 & 0xFFFFFFFFFFFFFFF8) == (v59 & 0xFFFFFFFFFFFFFFF8))
    {
      BOOL v20 = 0;
    }
    else
    {
      MEMORY[0x2455CF810](&v53, "Struct");
      uint64_t v19 = v53;
      if ((*a6 & 0xFFFFFFFFFFFFFFF8) == (v53 & 0xFFFFFFFFFFFFFFF8))
      {
        BOOL v20 = 0;
      }
      else
      {
        MEMORY[0x2455CF810](&v47, "Dict");
        BOOL v20 = (*a6 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8);
        if ((v47 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v19 = v53;
      }
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v18 = v59;
    }
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v17 = v63;
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v20) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v59, a4, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v59, (uint64_t)&v63);
  if ((v62 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v45 = a8;
  int v46 = a3;
  int v44 = (int)a6;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
  uint64_t v22 = (uint64_t)v60;
  if (v60) {
LABEL_23:
  }
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  while (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v63))
  {
    int v24 = v64;
    if (!v64 || (*((unsigned char *)v64 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v64, v23);
    }
    uint64_t v25 = (void *)*((void *)v24 + 3);
    MEMORY[0x2455CF810](&v59, "RealityKitComponent");
    uint64_t v26 = v59;
    if ((*v25 & 0xFFFFFFFFFFFFFFF8) == (v59 & 0xFFFFFFFFFFFFFFF8))
    {
      BOOL v29 = 1;
    }
    else
    {
      MEMORY[0x2455CF810](&v53, "RealityKitCustomComponent");
      uint64_t v27 = v53;
      if ((*v25 & 0xFFFFFFFFFFFFFFF8) == (v53 & 0xFFFFFFFFFFFFFFF8))
      {
        BOOL v29 = 1;
      }
      else
      {
        MEMORY[0x2455CF810](&v47, "Component");
        uint64_t v28 = v47;
        if ((*v25 & 0xFFFFFFFFFFFFFFF8) == (v47 & 0xFFFFFFFFFFFFFFF8))
        {
          BOOL v29 = 1;
        }
        else
        {
          MEMORY[0x2455CF810](&v58, "CustomComponent");
          BOOL v29 = (*v25 & 0xFFFFFFFFFFFFFFF8) == (v58 & 0xFFFFFFFFFFFFFFF8);
          if ((v58 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v28 = v47;
        }
        if ((v28 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v27 = v53;
      }
      if ((v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v26 = v59;
    }
    if ((v26 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v29)
    {
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v73, a7);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v72, v45);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v71, a9);
      char v32 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, a2, a3, a4, a5, (int)a6, (uint64_t)v73, (uint64_t)v72, (uint64_t)v71);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v71);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v72);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v73);
      if (v32)
      {
        uint64_t IsValid = 1;
        goto LABEL_98;
      }
      break;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v63, (uint64_t)&v59);
    LODWORD(v63) = v59;
    uint64_t v30 = v60;
    uint64_t v60 = 0;
    uint64_t v31 = v64;
    uint64_t v64 = v30;
    if (v31) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v31);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v65, &v61);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v66);
    if ((v67 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v67 = v62;
    uint64_t v62 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
    uint64_t v22 = (uint64_t)v60;
    if (v60) {
      goto LABEL_23;
    }
  }
  if (!a3) {
    goto LABEL_97;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v59, a3, a2);
  uint64_t IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v59);
  if (IsValid)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v59, (uint64_t)&v53);
    while (1)
    {
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53))
      {
        int v42 = 0;
        goto LABEL_88;
      }
      uint64_t v34 = v54;
      if (!v54 || (*((unsigned char *)v54 + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v54, v33);
      }
      uint64_t v35 = (void *)*((void *)v34 + 3);
      MEMORY[0x2455CF810](&v47, "RealityKitComponent");
      uint64_t v36 = v47;
      if ((*v35 & 0xFFFFFFFFFFFFFFF8) == (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        BOOL v39 = 1;
      }
      else
      {
        MEMORY[0x2455CF810](&v58, "RealityKitCustomComponent");
        uint64_t v37 = v58;
        if ((*v35 & 0xFFFFFFFFFFFFFFF8) == (v58 & 0xFFFFFFFFFFFFFFF8))
        {
          BOOL v39 = 1;
        }
        else
        {
          MEMORY[0x2455CF810](&v52, "Component");
          uint64_t v38 = v52;
          if ((*v35 & 0xFFFFFFFFFFFFFFF8) == (v52 & 0xFFFFFFFFFFFFFFF8))
          {
            BOOL v39 = 1;
          }
          else
          {
            MEMORY[0x2455CF810](&v51, "CustomComponent");
            BOOL v39 = (*v35 & 0xFFFFFFFFFFFFFFF8) == (v51 & 0xFFFFFFFFFFFFFFF8);
            if ((v51 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v38 = v52;
          }
          if ((v38 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v37 = v58;
        }
        if ((v37 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v36 = v47;
      }
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v39) {
        break;
      }
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v53, (uint64_t)&v47);
      LODWORD(v53) = v47;
      uint64_t v40 = v48;
      long long v48 = 0;
      uint64_t v41 = v54;
      int v54 = v40;
      if (v41) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v41);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v55, &v49);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v56);
      if ((v57 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v57 = v50;
      uint64_t v50 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
      if (v48) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v48);
      }
    }
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v70, a7);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v69, v45);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v68, a9);
    int v42 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, a2, v46, a4, a5, v44, (uint64_t)v70, (uint64_t)v69, (uint64_t)v68);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v68);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v69);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v70);
LABEL_88:
    if ((v57 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v55);
    if (v54) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v54);
    }
  }
  else
  {
    int v42 = 1;
  }
  if ((v62 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
  if (v60) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v60);
  }
  if (!v42) {
LABEL_97:
  }
    uint64_t IsValid = 0;
LABEL_98:
  if ((v67 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v65);
  if (v64) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v64);
  }
  return IsValid;
}

void sub_23F6C8CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](&a39);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100]((void *)(v39 - 256));
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100]((void *)(v39 - 224));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a26);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a31);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a35);
  _Unwind_Resume(a1);
}

CFStringRef anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor::description@<X0>(CFStringRef *a1@<X8>)
{
  *a1 = 0;
  CFStringRef result = CFStringCreateWithCString(0, "ArbitraryComponentStructDirtyPrimDescriptor", 0x8000100u);
  *a1 = result;
  return result;
}

void sub_23F6C8F08(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor *,std::shared_ptr<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>::__shared_ptr_default_delete<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor,anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>,std::allocator<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor *,std::shared_ptr<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>::__shared_ptr_default_delete<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor,anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>,std::allocator<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor *,std::shared_ptr<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>::__shared_ptr_default_delete<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor,anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>,std::allocator<anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F344B68;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F344B68;
}

char *std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F344BE8;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F344BE8;
}

void std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentStructPrimPath");
  unint64_t v4 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v16) = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)(v4 + 8), (int *)&v16, &v21);
  std::string::size_type v6 = v21;
  uint64_t v5 = v22;
  std::string::size_type v21 = 0;
  uint64_t v22 = 0;
  if (v20 < 0) {
    operator delete(__p);
  }
  std::string::size_type v21 = v6;
  uint64_t v22 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentAnimationFilePrimPath");
  unint64_t v7 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v14) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)(v7 + 32), (int *)&v14, &v16);
  std::string::size_type v9 = v16;
  char v8 = v17;
  std::string::size_type v16 = 0;
  uint64_t v17 = 0;
  if (v20 < 0) {
    operator delete(__p);
  }
  std::string::size_type v16 = v9;
  uint64_t v17 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentClipDefinitionPrimPath");
  unint64_t v10 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v13 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)(v10 + 40), &v13, &v14);
  uint64_t v12 = v14;
  uint64_t v11 = v15;
  int v14 = 0;
  uint64_t v15 = 0;
  if (v20 < 0) {
    operator delete(__p);
  }
  long long __p = v12;
  uint64_t v19 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, (std::string::size_type *)&__p);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_23F6C93C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

_DWORD *std::allocate_shared[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath const&,void>(void *a1, _DWORD *a2)
{
  unint64_t v4 = operator new(0x20uLL);
  v4[1] = 0;
  v4[2] = 0;
  *unint64_t v4 = &unk_26F344C68;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v4 + 6, a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v4 + 7, a2 + 1);
  *a1 = v4 + 3;
  a1[1] = v4;
  return result;
}

void std::__shared_ptr_emplace<pxrInternal__aapl__pxrReserved__::SdfPath>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F344C68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<pxrInternal__aapl__pxrReserved__::SdfPath>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F344C68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<pxrInternal__aapl__pxrReserved__::SdfPath>::__on_zero_shared(uint64_t a1)
{
  return std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F344CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F344CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26F344D08;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>::getRawValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v2;
}

realityio::SkeletalAnimationAggregationBuilder *realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(realityio::SkeletalAnimationAggregationBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "SkeletalAnimationAggregationBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSkeletalAnimationAggregationBuilderIdentifier);
  realityio::generateSkeletalMeshDirtyStageSubscription(&v5);
  v12[0] = &unk_26F344DB0;
  void v12[3] = v12;
  v11[0] = &unk_26F344EC0;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F344D38;
  return this;
}

void sub_23F6C9820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAggregationBuilder::createSkeletalAnimationAssetsAndAppendToArrayHelper(uint64_t result, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, std::vector<std::string>::size_type *a5, uint64_t *a6, void **a7)
{
  unint64_t v7 = (void *)(a3 + 72);
  char v8 = *(void **)(a3 + 72);
  if (v8)
  {
    int v13 = (uint64_t *)result;
    int v14 = (void *)(a3 + 72);
    do
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)((char *)v8 + 28), a4);
      uint64_t v15 = v8 + 1;
      if (!result)
      {
        uint64_t v15 = v8;
        int v14 = v8;
      }
      char v8 = (void *)*v15;
    }
    while (*v15);
    if (v14 != v7)
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a4, (void *)((char *)v14 + 28));
      if ((result & 1) == 0)
      {
        uint64_t v16 = *((unsigned int *)v14 + 9);
        if (v16 != -1)
        {
          uint64_t SkeletonAtIndex = REMeshAssetGetSkeletonAtIndex();
          uint64_t result = realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::createTimelineDefinitionRef(a5, v16, SkeletonAtIndex);
          if (result)
          {
            uint64_t ServiceLocator = REEngineGetServiceLocator();
            MEMORY[0x2455CDC30](ServiceLocator);
            uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
            if (TimelineAsset)
            {
              uint64_t v20 = TimelineAsset;
              uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a4);
              uint64_t v22 = (char *)String;
              if (*(char *)(String + 23) >= 0) {
                size_t v23 = *(unsigned __int8 *)(String + 23);
              }
              else {
                size_t v23 = *(void *)(String + 8);
              }
              std::string::basic_string[abi:ne180100]((uint64_t)__p, v23 + 23);
              if (v51 >= 0) {
                uint64_t v24 = __p;
              }
              else {
                uint64_t v24 = (void **)__p[0];
              }
              if (v23)
              {
                if (v22[23] >= 0) {
                  uint64_t v25 = v22;
                }
                else {
                  uint64_t v25 = *(char **)v22;
                }
                memmove(v24, v25, v23);
              }
              strcpy((char *)v24 + v23, "_skeletalAnimationAsset");
              if (v51 >= 0) {
                uint64_t v26 = __p;
              }
              else {
                uint64_t v26 = (void **)__p[0];
              }
              realityio::Builder::addAsset(v13, v20, (uint64_t)v26);
              uint64_t v49 = v20;
              RERetain();
              unint64_t v27 = a6[2];
              uint64_t v28 = (uint64_t *)a6[1];
              if ((unint64_t)v28 >= v27)
              {
                uint64_t v30 = ((uint64_t)v28 - *a6) >> 3;
                if ((unint64_t)(v30 + 1) >> 61) {
                  std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v31 = v27 - *a6;
                uint64_t v32 = v31 >> 2;
                if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
                  uint64_t v32 = v30 + 1;
                }
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v33 = v32;
                }
                v52[4] = a6 + 2;
                if (v33) {
                  uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a6 + 2), v33);
                }
                else {
                  uint64_t v34 = 0;
                }
                uint64_t v35 = (uint64_t *)&v34[8 * v30];
                v52[0] = v34;
                v52[1] = v35;
                v52[3] = &v34[8 * v33];
                *uint64_t v35 = v49;
                uint64_t v49 = 0;
                v52[2] = v35 + 1;
                std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer(a6, v52);
                BOOL v29 = (void *)a6[1];
                std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)v52);
              }
              else
              {
                uint64_t *v28 = v49;
                BOOL v29 = v28 + 1;
                uint64_t v49 = 0;
                a6[1] = (uint64_t)v29;
              }
              a6[1] = (uint64_t)v29;
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v49);
              uint64_t v37 = (std::vector<std::string>::size_type **)a7[1];
              unint64_t v36 = (unint64_t)a7[2];
              if ((unint64_t)v37 >= v36)
              {
                uint64_t v39 = ((char *)v37 - (unsigned char *)*a7) >> 3;
                if ((unint64_t)(v39 + 1) >> 61) {
                  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v40 = v36 - (void)*a7;
                uint64_t v41 = v40 >> 2;
                if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
                  uint64_t v41 = v39 + 1;
                }
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v42 = v41;
                }
                if (v42) {
                  unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v42);
                }
                else {
                  uint64_t v43 = 0;
                }
                int v44 = (std::vector<std::string>::size_type **)(v42 + 8 * v39);
                unint64_t v45 = v42 + 8 * v43;
                *int v44 = a5;
                uint64_t v38 = v44 + 1;
                uint64_t v47 = (char *)*a7;
                int v46 = (char *)a7[1];
                if (v46 != *a7)
                {
                  do
                  {
                    long long v48 = (std::vector<std::string>::size_type *)*((void *)v46 - 1);
                    v46 -= 8;
                    *--int v44 = v48;
                  }
                  while (v46 != v47);
                  int v46 = (char *)*a7;
                }
                *a7 = v44;
                a7[1] = v38;
                a7[2] = (void *)v45;
                if (v46) {
                  operator delete(v46);
                }
              }
              else
              {
                *uint64_t v37 = a5;
                uint64_t v38 = v37 + 1;
              }
              a7[1] = v38;
              RERelease();
              if (v51 < 0) {
                operator delete(__p[0]);
              }
            }
            return RERelease();
          }
        }
      }
    }
  }
  return result;
}

void sub_23F6C9BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfPath *pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return this;
}

uint64_t realityio::SkeletalAnimationAggregationBuilder::kOutputName(realityio::SkeletalAnimationAggregationBuilder *this)
{
  {
    operator new();
  }
  return realityio::SkeletalAnimationAggregationBuilder::kOutputName(void)::kOutputName;
}

void sub_23F6C9CB4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(realityio::SkeletalAnimationAggregationBuilder *this)
{
  {
    operator new();
  }
  return realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(void)::kOutputName;
}

void sub_23F6C9D6C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAggregationBuilder::run(realityio::SkeletalAnimationAggregationBuilder *this, realityio::Inputs *a2)
{
  uint64_t v221 = *MEMORY[0x263EF8340];
  unint64_t v199 = a2;
  unint64_t v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v195, v5, v4);
  uint64_t v6 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v195, &v193);
  unint64_t v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v6 + 64, &v193);
  BOOL v8 = (void *)(v6 + 72) != v7 && *(void *)(*(void *)(v6 + 40) + 104 * v7[5] + 24) == v193;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  std::string::size_type v9 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v193);
  if (v8)
  {
    uint64_t v10 = (uint64_t)v199;
    uint64_t v11 = realityio::EntityBuilder::kOutputName(v9);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v10, v11, (uint64_t)&v193);
    int v13 = &v211;
    if (!(_BYTE)v193 || !v194)
    {
      int v55 = v199;
      int v56 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)v199 + 8));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)buf, v56, (realityio::Inputs *)((char *)v55 + 32));
      PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)buf);
      if ((v220 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v220 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v219);
      uint64_t v58 = *(realityio **)&v218[4];
      if (*(void *)&v218[4]) {
        uint64_t v58 = (realityio *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v218[4]);
      }
      uint64_t v59 = *(id *)(realityio::logObjects(v58) + 24);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
        *(_DWORD *)std::string buf = 136315138;
        *(void *)uint64_t v218 = Text;
        _os_log_error_impl(&dword_23F4EA000, v59, OS_LOG_TYPE_ERROR, "Stopping operation to set skeletal components because the entity does not exist at path (%s).\n", buf, 0xCu);
      }

      goto LABEL_232;
    }
    uint64_t v192 = v194;
    uint64_t v14 = (uint64_t)v199;
    uint64_t v15 = realityio::MeshAssetBuilder::kOutputName(v12);
    realityio::Inputs::_getValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>(v14, v15, (uint64_t)buf);
    if (!buf[0] || (uint64_t v16 = *(void *)&v218[4]) == 0)
    {
LABEL_231:
      realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)buf);
LABEL_232:
      realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v193);
      goto LABEL_233;
    }
    uint64_t v191 = *(void *)(**(void **)&v218[4] + 8);
    if (v191) {
      RERetain();
    }
    uint64_t v190 = 0;
    uint64_t v17 = *((void *)v199 + 6);
    unsigned int v213 = &unk_26F344F40;
    *(void *)&long long v214 = &v192;
    *(void *)BOOL v215 = &v213;
    (*(void (**)(uint64_t, void **))(*(void *)v17 + 16))(v17, &v213);
    uint64_t v18 = (realityio::SkeletalAnimationAssetBuilder *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v213);
    if (!*(void *)(v16 + 80)) {
      goto LABEL_145;
    }
    realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v188, 2030, (uint64_t)this);
    uint64_t v19 = *((void *)v199 + 6);
    unsigned int v213 = &unk_26F345040;
    *(void *)&long long v214 = &v192;
    *((void *)&v214 + 1) = this;
    *(void *)BOOL v215 = &v213;
    (*(void (**)(uint64_t, void **))(*(void *)v19 + 16))(v19, &v213);
    uint64_t v20 = (realityio::SkeletonPoseDefinitionBuilder *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v213);
    std::string::size_type v21 = v199;
    uint64_t v22 = realityio::SkeletonPoseDefinitionBuilder::kOutputName(v20);
    *(_OWORD *)&v202.__r_.__value_.__l.__data_ = 0uLL;
    size_t v23 = (std::__shared_weak_count *)*((void *)v21 + 3);
    if (v23)
    {
      v202.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v23);
      if (v202.__r_.__value_.__l.__size_) {
        v202.__r_.__value_.__r.__words[0] = *((void *)v21 + 2);
      }
    }
    MEMORY[0x2455CF830](&v202.__r_.__value_.__r.__words[2], v22);
    unint64_t v24 = (unint64_t)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((void **)v21 + 1), &v202);
    uint64_t v25 = (void *)v24;
    unint64_t v27 = v26;
    if ((void *)v24 != v26)
    {
      uint64_t v168 = this;
      uint64_t v170 = v16;
      uint64_t v28 = 0;
      BOOL v29 = 0;
      unint64_t v175 = 0;
      while (1)
      {
        uint64_t v30 = v25[5];
        uint64_t v32 = *(std::mutex **)(v30 + 16);
        uint64_t v31 = *(std::__shared_weak_count **)(v30 + 24);
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v33 = (const void **)((v25[7] & 0xFFFFFFFFFFFFFFF8) != 0
                            ? (v25[7] & 0xFFFFFFFFFFFFFFF8) + 16
                            : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v24));
        uint64_t v34 = v32 + 1;
        std::mutex::lock(v32 + 1);
        uint64_t v35 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v32->__m_.__opaque[32], v33);
        uint64_t v36 = v35;
        uint64_t v37 = &v32->__m_.__opaque[40];
        if (v37 == (char *)v35) {
          break;
        }
        uint64_t v38 = *(void *)(*(void *)(v35 + 56) + 8);
        std::mutex::unlock(v34);
        if (v31) {
          goto LABEL_24;
        }
LABEL_25:
        if (v37 == (char *)v36)
        {
          if ((v174 & 0x80) != 0) {
            operator delete(v13);
          }
        }
        else if ((unint64_t)v29 >= v175)
        {
          uint64_t v42 = (v29 - v28) >> 3;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v175 - (void)v28) >> 2 > v43) {
            unint64_t v43 = (uint64_t)(v175 - (void)v28) >> 2;
          }
          if (v175 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v43;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v24);
          }
          else {
            uint64_t v44 = 0;
          }
          int v46 = (char *)(v24 + 8 * v42);
          *(void *)int v46 = v38;
          uint64_t v47 = v46 + 8;
          while (v29 != v28)
          {
            uint64_t v48 = *((void *)v29 - 1);
            v29 -= 8;
            *((void *)v46 - 1) = v48;
            v46 -= 8;
          }
          unint64_t v175 = v24 + 8 * v44;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v28 = v46;
          BOOL v29 = v47;
        }
        else
        {
          *(void *)BOOL v29 = v38;
          v29 += 8;
        }
        uint64_t v25 = (void *)*v25;
        if (v25 == v27)
        {
          int64_t v50 = v29 - v28;
          BOOL v49 = v29 == v28;
          uint64_t v16 = v170;
          if (v49)
          {
            char v51 = 0;
            int v54 = 0;
            uint64_t v53 = 0;
            this = v168;
            int v13 = &v211;
          }
          else
          {
            if (v50 < 0) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            this = v168;
            int v13 = &v211;
            char v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v50 >> 3);
            uint64_t v53 = &v51[8 * v52];
            memmove(v51, v28, v50);
            int v54 = &v51[8 * (v50 >> 3)];
          }
          LOBYTE(v213) = 1;
          *(void *)&long long v214 = v51;
          *((void *)&v214 + 1) = v54;
          *(void *)BOOL v215 = v53;
          if (v28)
          {
            uint64_t v72 = v28;
LABEL_82:
            operator delete(v72);
          }
          goto LABEL_83;
        }
      }
      std::operator+<char>();
      uint64_t v39 = std::string::append(&v204, "\" does not exist in the builder outputs");
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      std::string::size_type v208 = (realityio::SkeletalAnimationAggregationBuilder *)v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v211, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      long long v172 = v211;
      std::string::size_type size = v212.__r_.__value_.__l.__size_;
      int v13 = (long long *)v212.__r_.__value_.__r.__words[0];
      int v174 = SHIBYTE(v212.__r_.__value_.__r.__words[2]);
      memset(&v212, 0, sizeof(v212));
      if (SHIBYTE(v208) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v204.__r_.__value_.__l.__data_);
      }
      std::mutex::unlock(v34);
      long long v211 = v172;
      if (v174 < 0)
      {
        std::string::__init_copy_ctor_external(&v212, (const std::string::value_type *)v13, size);
        uint64_t v38 = v211;
        std::string::size_type v45 = v212.__r_.__value_.__r.__words[0];
        LOBYTE(v174) = *((unsigned char *)&v212.__r_.__value_.__s + 23);
        operator delete(v13);
        int v13 = (long long *)v45;
        if (!v31) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v38 = v172;
        if (!v31) {
          goto LABEL_25;
        }
      }
LABEL_24:
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      goto LABEL_25;
    }
    std::operator+<char>();
    int v61 = std::string::append(&v200, ") at prim path (");
    long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v201.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::Inputs *)((char *)v21 + 32));
    int v64 = *(char *)(String + 23);
    if (v64 >= 0) {
      unint64_t v65 = (const std::string::value_type *)String;
    }
    else {
      unint64_t v65 = *(const std::string::value_type **)String;
    }
    if (v64 >= 0) {
      std::string::size_type v66 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v66 = *(void *)(String + 8);
    }
    uint64_t v67 = std::string::append(&v201, v65, v66);
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v204.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    uint64_t v69 = std::string::append(&v204, ")");
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    std::string::size_type v208 = (realityio::SkeletalAnimationAggregationBuilder *)v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v211, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    long long v214 = v211;
    *(_OWORD *)BOOL v215 = *(_OWORD *)&v212.__r_.__value_.__l.__data_;
    *(void *)&v215[15] = *(std::string::size_type *)((char *)&v212.__r_.__value_.__r.__words[1] + 7);
    char v71 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
    memset(&v212, 0, sizeof(v212));
    LOBYTE(v213) = 0;
    char v216 = v71;
    if (SHIBYTE(v208) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v204.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v201.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v72 = (char *)v200.__r_.__value_.__r.__words[0];
      goto LABEL_82;
    }
LABEL_83:
    if ((v202.__r_.__value_.__s.__data_[16] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v202.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v202.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v202.__r_.__value_.__l.__size_);
    }
    if (!(_BYTE)v213 || (void)v214 == *((void *)&v214 + 1))
    {
      int v111 = 1;
      goto LABEL_144;
    }
    memset(&v201, 0, sizeof(v201));
    memset(&v200, 0, sizeof(v200));
    int v186 = 0;
    uint64_t v187 = 0;
    uint64_t v184 = 0;
    uint64_t v185 = &v186;
    unint64_t v182 = (uint64_t *)&v183;
    uint64_t v183 = 0;
    uint64_t v73 = *((void *)v199 + 6);
    BOOL v74 = operator new(0x40uLL);
    *BOOL v74 = &unk_26F345140;
    v74[1] = &v213;
    v74[2] = this;
    void v74[3] = &v199;
    uint64_t v74[4] = v16;
    v74[5] = &v201;
    v74[6] = &v200;
    v74[7] = &v185;
    v212.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
    (*(void (**)(uint64_t, long long *))(*(void *)v73 + 16))(v73, &v211);
    uint64_t v75 = (realityio::SkeletalAnimationAssetBuilder *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v211);
    uint64_t v76 = (uint64_t)v199;
    uint64_t v77 = realityio::SkeletalAnimationAssetBuilder::kOutputName(v75);
    realityio::Inputs::getAccumulatedValues<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>((uint64_t)&v211, v76, v77);
    if ((_BYTE)v211)
    {
      unint64_t v78 = (_DWORD **)*((void *)&v211 + 1);
      for (std::string::size_type i = v212.__r_.__value_.__r.__words[0]; v78 != (_DWORD **)i; ++v78)
      {
        int v80 = *v78;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, *v78);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)__p + 1, v80 + 1);
        __p[1] = v80;
        uint64_t v81 = v183;
        int v82 = &v183;
        unsigned int v83 = &v183;
        if (!v183) {
          goto LABEL_100;
        }
        int v82 = &v183;
        while (1)
        {
          while (1)
          {
            unsigned int v83 = (uint64_t **)v81;
            unsigned int v84 = v81 + 4;
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(__p, v81 + 4)) {
              break;
            }
            uint64_t v81 = *v83;
            int v82 = v83;
            if (!*v83) {
              goto LABEL_100;
            }
          }
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v84, __p)) {
            break;
          }
          int v82 = v83 + 1;
          uint64_t v81 = v83[1];
          if (!v81) {
            goto LABEL_100;
          }
        }
        if (!*v82)
        {
LABEL_100:
          unsigned int v85 = (void **)operator new(0x30uLL);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v85 + 8, __p);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v85 + 9, (_DWORD *)__p + 1);
          v85[5] = __p[1];
          *unsigned int v85 = 0;
          v85[1] = 0;
          void v85[2] = v83;
          *int v82 = (uint64_t *)v85;
          if (*v182)
          {
            unint64_t v182 = (uint64_t *)*v182;
            unsigned int v85 = (void **)*v82;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v183, (uint64_t *)v85);
          ++v184;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      }
    }
    uint64_t v86 = *((void *)v199 + 6);
    uint64_t v87 = operator new(0x40uLL);
    *uint64_t v87 = &unk_26F3451C0;
    v87[1] = &v185;
    v87[2] = v16;
    v87[3] = &v182;
    v87[4] = this;
    v87[5] = &v199;
    v87[6] = &v201;
    v87[7] = &v200;
    int v209 = v87;
    (*(void (**)(uint64_t, void **))(*(void *)v86 + 16))(v86, __p);
    uint64_t v88 = (realityio *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](__p);
    char v89 = *(NSObject **)(realityio::logObjects(v88) + 24);
    if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_23F4EA000, v89, OS_LOG_TYPE_INFO, "Updating entity with skeletal component and data.", (uint8_t *)__p, 2u);
    }
    uint64_t v90 = *((void *)v199 + 6);
    __p[0] = &unk_26F345240;
    __p[1] = &v192;
    std::string::size_type v208 = this;
    int v209 = __p;
    (*(void (**)(uint64_t, void **))(*(void *)v90 + 16))(v90, __p);
    unint64_t v91 = (realityio::SkeletalAnimationAssetBuilder *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](__p);
    uint64_t v92 = (uint64_t)v199;
    uint64_t v93 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v91);
    realityio::Inputs::_getValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v92, v93, (uint64_t)__p);
    uint64_t v94 = (uint64_t)v199;
    uint64_t v96 = realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(v95);
    realityio::Inputs::_getValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v94, v96, (uint64_t)&v204);
    int v97 = __p[1];
    if (!LOBYTE(__p[0]) || !__p[1])
    {
      if (!v204.__r_.__value_.__s.__data_[0] || !v204.__r_.__value_.__l.__size_)
      {
        unint64_t v164 = (realityio::SkeletalAnimationAggregationBuilder *)std::allocate_shared[abi:ne180100]<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,REEntity *&,REAsset *,std::vector<realityio::WrappedRERef<REAsset *>> &,std::vector<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*> &,void>(&v202, v192, v190, (uint64_t *)&v201, (uint64_t)&v200);
        uint64_t v166 = *((void *)this + 2);
        unint64_t v165 = (std::__shared_weak_count *)*((void *)this + 3);
        if (v165) {
          atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v167 = (long long *)realityio::SkeletalAnimationAggregationBuilder::kOutputName(v164);
        realityio::Outputs::storeValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>(v166, v167, (uint64_t *)&v202);
        if (v165) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v165);
        }
        unsigned int v110 = (std::__shared_weak_count *)v202.__r_.__value_.__l.__size_;
        if (!v202.__r_.__value_.__l.__size_) {
          goto LABEL_130;
        }
        goto LABEL_129;
      }
      if (!LOBYTE(__p[0])) {
        int v97 = 0;
      }
    }
    unsigned int v98 = (realityio::SkeletalAnimationAggregationBuilder *)std::allocate_shared[abi:ne180100]<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,REEntity *&,REAsset *,std::vector<realityio::WrappedRERef<REAsset *>> &,std::vector<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*> &,void>(&v180, v192, v190, (uint64_t *)&v201, (uint64_t)&v200);
    uint64_t v100 = *((void *)this + 2);
    unsigned int v99 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v99) {
      atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v101 = (long long *)realityio::SkeletalAnimationAggregationBuilder::kOutputName(v98);
    realityio::Outputs::storeValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>(v100, v101, &v180);
    if (v99) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v99);
    }
    if (!v97 && (int v97 = (void *)v204.__r_.__value_.__l.__size_) == 0 || !v97[2])
    {
      if (v181) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v181);
      }
      int v111 = 1;
      goto LABEL_135;
    }
    uint64_t v179 = REAnimationLibraryDefinitionCreate();
    uint64_t v104 = (long long *)*v97;
    uint64_t v102 = (long long *)(v97 + 1);
    unint64_t v103 = v104;
    if (v104 != v102)
    {
      do
      {
        std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100](&v202, v103 + 2);
        REAnimationLibraryDefinitionAddEntryAsset();
        REAnimationLibraryDefinitionAddKeyedEntryIndex();
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v203);
        if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v202.__r_.__value_.__l.__data_);
        }
        int v105 = (long long *)*((void *)v103 + 1);
        if (v105)
        {
          do
          {
            float v106 = v105;
            int v105 = *(long long **)v105;
          }
          while (v105);
        }
        else
        {
          do
          {
            float v106 = (long long *)*((void *)v103 + 2);
            BOOL v49 = *(void *)v106 == (void)v103;
            unint64_t v103 = v106;
          }
          while (!v49);
        }
        unint64_t v103 = v106;
      }
      while (v106 != v102);
    }
    uint64_t ServiceLocator = REEngineGetServiceLocator();
    uint64_t v177 = 0;
    uint64_t v178 = MEMORY[0x2455CDC30](ServiceLocator);
    uint64_t v108 = *((void *)v199 + 6);
    unsigned int v109 = operator new(0x40uLL);
    *unsigned int v109 = &unk_26F345510;
    v109[1] = &v177;
    v109[2] = &v179;
    uint64_t v109[3] = &v178;
    v109[4] = &v199;
    v109[5] = &v195;
    v109[6] = this;
    v109[7] = &v192;
    unsigned int v203 = v109;
    (*(void (**)(uint64_t, std::string *))(*(void *)v108 + 16))(v108, &v202);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v202);
    realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&v179);
    unsigned int v110 = v181;
    if (!v181)
    {
LABEL_130:
      int v111 = 0;
LABEL_135:
      if (!v204.__r_.__value_.__s.__data_[0] && v206 < 0) {
        operator delete(v205);
      }
      if (!LOBYTE(__p[0]) && v210 < 0) {
        operator delete(v209);
      }
      realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&v211);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>>>::destroy(v183);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v185, v186);
      if (v200.__r_.__value_.__r.__words[0])
      {
        v200.__r_.__value_.__l.__size_ = v200.__r_.__value_.__r.__words[0];
        operator delete(v200.__r_.__value_.__l.__data_);
      }
      *(void *)&long long v211 = &v201;
      std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v211);
LABEL_144:
      realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&v213);
      realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v188);
      if (v111)
      {
LABEL_230:
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v190);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v191);
        goto LABEL_231;
      }
LABEL_145:
      int v186 = 0;
      uint64_t v187 = 0;
      uint64_t v185 = &v186;
      int v112 = v199;
      uint64_t v113 = realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v18);
      *(_OWORD *)&v202.__r_.__value_.__l.__data_ = 0uLL;
      int v114 = (std::__shared_weak_count *)*((void *)v112 + 3);
      if (v114)
      {
        v202.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v114);
        if (v202.__r_.__value_.__l.__size_) {
          v202.__r_.__value_.__r.__words[0] = *((void *)v112 + 2);
        }
      }
      MEMORY[0x2455CF830](&v202.__r_.__value_.__r.__words[2], v113);
      unint64_t v115 = (unint64_t)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((void **)v112 + 1), &v202);
      int v116 = (void *)v115;
      unsigned int v118 = v117;
      if ((void *)v115 != v117)
      {
        int v169 = this;
        uint64_t v171 = v16;
        unsigned int v119 = 0;
        unsigned int v120 = 0;
        unint64_t v176 = 0;
        while (1)
        {
          uint64_t v121 = v116[5];
          uint64_t v123 = *(std::mutex **)(v121 + 16);
          uint64_t v122 = *(std::__shared_weak_count **)(v121 + 24);
          if (v122) {
            atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v124 = (const void **)((v116[7] & 0xFFFFFFFFFFFFFFF8) != 0
                               ? (v116[7] & 0xFFFFFFFFFFFFFFF8) + 16
                               : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v115));
          long long v125 = v123 + 1;
          std::mutex::lock(v123 + 1);
          uint64_t v126 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v123->__m_.__opaque[32], v124);
          uint64_t v127 = v126;
          int v128 = &v123->__m_.__opaque[40];
          if (v128 == (char *)v126) {
            break;
          }
          uint64_t v129 = *(void *)(*(void *)(v126 + 56) + 8);
          std::mutex::unlock(v125);
          if (v122) {
            goto LABEL_157;
          }
LABEL_158:
          if (v128 == (char *)v127)
          {
            if ((v174 & 0x80) != 0) {
              operator delete(v13);
            }
          }
          else if ((unint64_t)v120 >= v176)
          {
            uint64_t v133 = (v120 - v119) >> 3;
            unint64_t v134 = v133 + 1;
            if ((unint64_t)(v133 + 1) >> 61) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v176 - (void)v119) >> 2 > v134) {
              unint64_t v134 = (uint64_t)(v176 - (void)v119) >> 2;
            }
            if (v176 - (unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v115 = v134;
            }
            if (v115) {
              unint64_t v115 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v115);
            }
            else {
              uint64_t v135 = 0;
            }
            int v137 = (char *)(v115 + 8 * v133);
            *(void *)int v137 = v129;
            uint64_t v138 = v137 + 8;
            while (v120 != v119)
            {
              uint64_t v139 = *((void *)v120 - 1);
              v120 -= 8;
              *((void *)v137 - 1) = v139;
              v137 -= 8;
            }
            unint64_t v176 = v115 + 8 * v135;
            if (v119) {
              operator delete(v119);
            }
            unsigned int v119 = v137;
            unsigned int v120 = v138;
          }
          else
          {
            *(void *)unsigned int v120 = v129;
            v120 += 8;
          }
          int v116 = (void *)*v116;
          if (v116 == v118)
          {
            long long v211 = 0uLL;
            v212.__r_.__value_.__r.__words[0] = 0;
            std::vector<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(&v211, v119, (uint64_t)v120, (v120 - v119) >> 3);
            LOBYTE(v213) = 1;
            long long v214 = v211;
            *(void *)BOOL v215 = v212.__r_.__value_.__r.__words[0];
            this = v169;
            uint64_t v16 = v171;
            if (v119)
            {
              unsigned int v140 = v119;
              goto LABEL_204;
            }
            goto LABEL_205;
          }
        }
        std::operator+<char>();
        unsigned int v130 = std::string::append(&v204, "\" does not exist in the builder outputs");
        long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
        std::string::size_type v208 = (realityio::SkeletalAnimationAggregationBuilder *)v130->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long __p = v131;
        v130->__r_.__value_.__l.__size_ = 0;
        v130->__r_.__value_.__r.__words[2] = 0;
        v130->__r_.__value_.__r.__words[0] = 0;
        realityio::DetailedError::DetailedError(&v211, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
        long long v173 = v211;
        std::string::size_type v132 = v212.__r_.__value_.__l.__size_;
        int v13 = (long long *)v212.__r_.__value_.__r.__words[0];
        int v174 = SHIBYTE(v212.__r_.__value_.__r.__words[2]);
        memset(&v212, 0, sizeof(v212));
        if (SHIBYTE(v208) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v204.__r_.__value_.__l.__data_);
        }
        std::mutex::unlock(v125);
        long long v211 = v173;
        if (v174 < 0)
        {
          std::string::__init_copy_ctor_external(&v212, (const std::string::value_type *)v13, v132);
          uint64_t v129 = v211;
          std::string::size_type v136 = v212.__r_.__value_.__r.__words[0];
          LOBYTE(v174) = *((unsigned char *)&v212.__r_.__value_.__s + 23);
          operator delete(v13);
          int v13 = (long long *)v136;
          if (!v122) {
            goto LABEL_158;
          }
        }
        else
        {
          uint64_t v129 = v173;
          if (!v122) {
            goto LABEL_158;
          }
        }
LABEL_157:
        std::__shared_weak_count::__release_shared[abi:ne180100](v122);
        goto LABEL_158;
      }
      std::operator+<char>();
      unsigned int v141 = std::string::append(&v200, ") at prim path (");
      long long v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
      v201.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v142;
      v141->__r_.__value_.__l.__size_ = 0;
      v141->__r_.__value_.__r.__words[2] = 0;
      v141->__r_.__value_.__r.__words[0] = 0;
      uint64_t v143 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::Inputs *)((char *)v112 + 32));
      int v144 = *(char *)(v143 + 23);
      if (v144 >= 0) {
        unint64_t v145 = (const std::string::value_type *)v143;
      }
      else {
        unint64_t v145 = *(const std::string::value_type **)v143;
      }
      if (v144 >= 0) {
        std::string::size_type v146 = *(unsigned __int8 *)(v143 + 23);
      }
      else {
        std::string::size_type v146 = *(void *)(v143 + 8);
      }
      int v147 = std::string::append(&v201, v145, v146);
      long long v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
      v204.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v148;
      v147->__r_.__value_.__l.__size_ = 0;
      v147->__r_.__value_.__r.__words[2] = 0;
      v147->__r_.__value_.__r.__words[0] = 0;
      int v149 = std::string::append(&v204, ")");
      long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
      std::string::size_type v208 = (realityio::SkeletalAnimationAggregationBuilder *)v149->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v150;
      v149->__r_.__value_.__l.__size_ = 0;
      v149->__r_.__value_.__r.__words[2] = 0;
      v149->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v211, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      long long v214 = v211;
      *(_OWORD *)BOOL v215 = *(_OWORD *)&v212.__r_.__value_.__l.__data_;
      *(void *)&v215[15] = *(std::string::size_type *)((char *)&v212.__r_.__value_.__r.__words[1] + 7);
      char v151 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
      memset(&v212, 0, sizeof(v212));
      LOBYTE(v213) = 0;
      char v216 = v151;
      if (SHIBYTE(v208) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v204.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v201.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      {
        unsigned int v140 = (char *)v200.__r_.__value_.__r.__words[0];
LABEL_204:
        operator delete(v140);
      }
LABEL_205:
      if ((v202.__r_.__value_.__s.__data_[16] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v202.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v202.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v202.__r_.__value_.__l.__size_);
      }
      if ((_BYTE)v213 && *(unsigned char *)(v16 + 168))
      {
        memset(&v202, 0, sizeof(v202));
        std::vector<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(&v202, (const void *)v214, *((uint64_t *)&v214 + 1), (uint64_t)(*((void *)&v214 + 1) - v214) >> 3);
        std::sort[abi:ne180100]<std::__wrap_iter<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2>((uint64_t)v202.__r_.__value_.__l.__data_, (uint64_t *)v202.__r_.__value_.__l.__size_);
        memset(&v201, 0, sizeof(v201));
        memset(&v200, 0, sizeof(v200));
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v212.__r_.__value_.__l.__size_ = 0;
        *(void *)&long long v211 = MEMORY[0x263F90768] + 16;
        pxrInternal__aapl__pxrReserved__::UsdPrim::UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
        if (*((void *)&v211 + 1)
          && (*(unsigned char *)(*((void *)&v211 + 1) + 57) & 8) == 0
          && (*(unsigned int (**)(long long *))(v211 + 32))(&v211))
        {
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSource((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v211, (pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
        }
        uint64_t v152 = *((void *)v199 + 6);
        BOOL v153 = operator new(0x38uLL);
        *BOOL v153 = &unk_26F345610;
        v153[1] = &v202;
        v153[2] = this;
        v153[3] = &v199;
        v153[4] = v16;
        v153[5] = &v201;
        v153[6] = &v200;
        unint64_t v205 = v153;
        (*(void (**)(uint64_t, std::string *))(*(void *)v152 + 16))(v152, &v204);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v204);
        pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v188);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)__p))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)__p, &v204);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v188, (int *)&v204);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v189);
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v204);
        }
        uint64_t v154 = v190;
        uint64_t v155 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v188);
        std::allocate_shared[abi:ne180100]<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT,std::allocator<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>,REEntity *&,REAsset *,std::vector<realityio::WrappedRERef<REAsset *>> &,std::vector<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*> &,std::string const&,void>(&v182, v192, v154, (uint64_t *)&v201, (uint64_t)&v200, v155);
        uint64_t v158 = *((void *)this + 2);
        unint64_t v157 = (std::__shared_weak_count *)*((void *)this + 3);
        if (v157) {
          atomic_fetch_add_explicit(&v157->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        size_t v159 = (long long *)realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(v156);
        realityio::Outputs::storeValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>(v158, v159, (uint64_t *)&v182);
        if (v157) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v157);
        }
        uint64_t v161 = *(NSObject **)(realityio::logObjects(v160) + 24);
        if (os_log_type_enabled(v161, OS_LOG_TYPE_INFO))
        {
          LOWORD(v204.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_23F4EA000, v161, OS_LOG_TYPE_INFO, "Updating entity with blend shape component and data.", (uint8_t *)&v204, 2u);
        }
        uint64_t v162 = *((void *)v199 + 6);
        v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26F345760;
        v204.__r_.__value_.__l.__size_ = (std::string::size_type)&v192;
        v204.__r_.__value_.__r.__words[2] = (std::string::size_type)this;
        unint64_t v205 = &v204;
        (*(void (**)(uint64_t, std::string *))(*(void *)v162 + 16))(v162, &v204);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v204);
        if (v183) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v183);
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v188);
        pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
        MEMORY[0x2455CF050](&v211);
        if (v200.__r_.__value_.__r.__words[0])
        {
          v200.__r_.__value_.__l.__size_ = v200.__r_.__value_.__r.__words[0];
          operator delete(v200.__r_.__value_.__l.__data_);
        }
        *(void *)&long long v211 = &v201;
        std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v211);
        if (v202.__r_.__value_.__r.__words[0])
        {
          v202.__r_.__value_.__l.__size_ = v202.__r_.__value_.__r.__words[0];
          operator delete(v202.__r_.__value_.__l.__data_);
        }
      }
      realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&v213);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>>>::destroy(v186);
      goto LABEL_230;
    }
LABEL_129:
    std::__shared_weak_count::__release_shared[abi:ne180100](v110);
    goto LABEL_130;
  }
LABEL_233:
  if ((v198 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v198 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v197);
  uint64_t result = v196;
  if (v196) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v196);
  }
  return result;
}

void sub_23F6CB2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (!(_BYTE)a55 && a63 < 0) {
    operator delete(__p);
  }
  if (!a64 && a72 < 0) {
    operator delete(a67);
  }
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result(v72 - 256);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>>>::destroy(a23);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a25, (void *)a26);
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  *(void *)(v72 - 256) = &a47;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 256));
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result(v72 - 208);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a28);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a30);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a31);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result(v72 - 160);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a33);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a39);
  _Unwind_Resume(a1);
}

void realityio::Inputs::getAccumulatedValues<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v53[2] = *MEMORY[0x263EF8340];
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  unint64_t v7 = *(std::__shared_weak_count **)(a2 + 24);
  if (v7)
  {
    uint64_t v47 = std::__shared_weak_count::lock(v7);
    if (v47) {
      uint64_t v46 = *(void *)(a2 + 16);
    }
  }
  MEMORY[0x2455CF830](&v48, a3);
  unint64_t v8 = (unint64_t)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(a2 + 8), &v46);
  std::string::size_type v9 = (void *)v8;
  uint64_t v11 = v10;
  if ((void *)v8 == v10)
  {
    std::operator+<char>();
    uint64_t v28 = std::string::append(&v43, ") at prim path (");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    int v31 = *(char *)(String + 23);
    if (v31 >= 0) {
      uint64_t v32 = (const std::string::value_type *)String;
    }
    else {
      uint64_t v32 = *(const std::string::value_type **)String;
    }
    if (v31 >= 0) {
      std::string::size_type v33 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v33 = *(void *)(String + 8);
    }
    uint64_t v34 = std::string::append(&v44, v32, v33);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    uint64_t v36 = std::string::append(&v45, ")");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[0] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)BOOL v49 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v51, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v49);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v51;
    uint64_t v38 = *(void *)&v51[16];
    v53[0] = v52.__r_.__value_.__r.__words[0];
    *(void *)((char *)v53 + 7) = *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 7);
    std::string::value_type v39 = v52.__r_.__value_.__s.__data_[15];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
    *(void *)&v51[16] = 0;
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 39) = *(void *)((char *)v53 + 7);
    uint64_t v40 = v53[0];
    *(void *)(a1 + 24) = v38;
    *(void *)(a1 + 32) = v40;
    *(unsigned char *)(a1 + 47) = v39;
    if (v50.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(v49[0]);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v27 = (char *)v43.__r_.__value_.__r.__words[0];
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v41 = a1;
    uint64_t v12 = 0;
    int v13 = 0;
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = v9[5];
      uint64_t v17 = *(std::mutex **)(v15 + 16);
      uint64_t v16 = *(std::__shared_weak_count **)(v15 + 24);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t EmptyString = (const void **)((v9[7] & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
      }
      realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>(v17, EmptyString, (uint64_t)v51);
      int v19 = v51[0];
      if (v51[0])
      {
        uint64_t v20 = *(void **)&v51[8];
      }
      else
      {
        *(_OWORD *)BOOL v49 = *(_OWORD *)&v51[8];
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v50, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
          uint64_t v20 = v49[0];
          long long __p = (void *)v50.__r_.__value_.__r.__words[0];
          char v3 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
          if (!v51[0] && SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v52.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string v50 = v52;
          uint64_t v20 = v49[0];
          long long __p = (void *)v52.__r_.__value_.__r.__words[0];
          char v3 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
        }
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (v19)
      {
        if ((unint64_t)v13 >= v14)
        {
          uint64_t v21 = (v13 - v12) >> 3;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v14 - (void)v12) >> 2 > v22) {
            unint64_t v22 = (uint64_t)(v14 - (void)v12) >> 2;
          }
          if (v14 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v8 = v22;
          }
          if (v8) {
            unint64_t v8 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v8);
          }
          else {
            uint64_t v23 = 0;
          }
          unint64_t v24 = (char *)(v8 + 8 * v21);
          *(void *)unint64_t v24 = v20;
          uint64_t v25 = v24 + 8;
          while (v13 != v12)
          {
            uint64_t v26 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v24 - 1) = v26;
            v24 -= 8;
          }
          unint64_t v14 = v8 + 8 * v23;
          if (v12) {
            operator delete(v12);
          }
          uint64_t v12 = v24;
          int v13 = v25;
        }
        else
        {
          *(void *)int v13 = v20;
          v13 += 8;
        }
      }
      else if (v3 < 0)
      {
        operator delete(__p);
      }
      std::string::size_type v9 = (void *)*v9;
    }
    while (v9 != v11);
    memset(v51, 0, sizeof(v51));
    std::vector<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const**>(v51, v12, (uint64_t)v13, (v13 - v12) >> 3);
    *(unsigned char *)uint64_t v41 = 1;
    *(_OWORD *)(v41 + 8) = *(_OWORD *)v51;
    *(void *)(v41 + 24) = *(void *)&v51[16];
    if (v12)
    {
      unint64_t v27 = v12;
LABEL_57:
      operator delete(v27);
    }
  }
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
}

void sub_23F6CBBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if ((a35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void realityio::Outputs::storeValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  unint64_t v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *unint64_t v7 = &unk_26F345490;
  uint64_t v9 = *a3;
  unint64_t v8 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v7[3] = &unk_26F3454E0;
  v7[4] = v9;
  v7[5] = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v12 = a2;
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
  uint64_t v11 = (std::__shared_weak_count *)v10[8];
  v10[7] = (uint64_t)(v7 + 3);
  unsigned char v10[8] = (uint64_t)v7;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F6CBDFC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::sort[abi:ne180100]<std::__wrap_iter<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2>(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3);
  if (a2 == (uint64_t *)a1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  return std::__introsort<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,false>(a1, a2, v3, 1);
}

pxrInternal__aapl__pxrReserved__::UsdPrim *pxrInternal__aapl__pxrReserved__::UsdPrim::UsdPrim(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  *(_DWORD *)this = 1;
  *((void *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((void *)this + 3) = 0;
  return this;
}

void realityio::Outputs::storeValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  unint64_t v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *unint64_t v7 = &unk_26F3456E0;
  uint64_t v9 = *a3;
  unint64_t v8 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v7[3] = &unk_26F345730;
  v7[4] = v9;
  v7[5] = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v12 = a2;
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
  uint64_t v11 = (std::__shared_weak_count *)v10[8];
  v10[7] = (uint64_t)(v7 + 3);
  unsigned char v10[8] = (uint64_t)v7;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F6CBF98(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAggregationBuilder::clear(realityio::SkeletalAnimationAggregationBuilder *this, realityio::Inputs *a2)
{
  unint64_t v4 = (std::mutex *)*((void *)this + 2);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (const void **)realityio::SkeletalAnimationAggregationBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>(v4, v5, (uint64_t)v28);
  if (v28[0])
  {
    long long v6 = v29;
    if (*((void *)&v29 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 1uLL, memory_order_relaxed);
      v22[0] = 1;
      long long v23 = v6;
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
    }
    else
    {
      v22[0] = 1;
      long long v23 = (unint64_t)v29;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v21 = v29;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)&v21[16], v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)&v21[16] = v30;
    }
    v22[0] = 0;
    long long v23 = *(_OWORD *)v21;
    long long v24 = *(_OWORD *)&v21[16];
    uint64_t v25 = *(void *)&v21[32];
  }
  unint64_t v7 = (realityio::SkeletalAnimationAggregationBuilder *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v28);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v22[0])
  {
    uint64_t v9 = *((void *)this + 2);
    unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (const void **)realityio::SkeletalAnimationAggregationBuilder::kOutputName(v7);
    std::mutex::lock((std::mutex *)(v9 + 64));
    if (v9 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v9 + 40, v10))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v9 + 40), v10); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v9, (unsigned __int8 *)v10);
    }
    std::mutex::unlock((std::mutex *)(v9 + 64));
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  uint64_t v12 = (std::mutex *)*((void *)this + 2);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = (const void **)realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(v7);
  realityio::Outputs::getRawValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>(v12, v13, (uint64_t)v28);
  int v14 = v28[0];
  if (v28[0])
  {
    long long v15 = v29;
    if (*((void *)&v29 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      v21[0] = 1;
      *(_OWORD *)&v21[8] = v15;
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
    else
    {
      v21[0] = 1;
      *(void *)&v21[8] = v29;
      *(void *)&v21[16] = 0;
    }
  }
  else
  {
    long long v26 = v29;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v27, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    }
    else {
      std::string v27 = v30;
    }
    v21[0] = 0;
    *(_OWORD *)&v21[8] = v26;
    *(std::string *)&v21[24] = v27;
  }
  uint64_t v16 = (realityio::SkeletalAnimationAggregationBuilder *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v28);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v14)
  {
    uint64_t v18 = *((void *)this + 2);
    uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v19 = (const void **)realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(v16);
    std::mutex::lock((std::mutex *)(v18 + 64));
    if (v18 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v18 + 40, v19))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v18 + 40), v19); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v18, (unsigned __int8 *)v19);
    }
    std::mutex::unlock((std::mutex *)(v18 + 64));
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v21);
  return realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v22);
}

void sub_23F6CC2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result(v8 - 112);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

void realityio::SkeletalAnimationAggregationBuilder::~SkeletalAnimationAggregationBuilder(realityio::SkeletalAnimationAggregationBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void *std::vector<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(a4);
    unint64_t v7 = result;
    *unint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_23F6CC3FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F344DB0;
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F344DB0;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)operator new(0x40uLL);
  *((void *)v1 + 1) = 0;
  *((void *)v1 + 2) = 0;
  *(void *)uint64_t v1 = &unk_26F32FA40;
  *(_OWORD *)(v1 + 24) = 0u;
  uint64_t v2 = (uint64_t)(v1 + 24);
  *(_OWORD *)(v1 + 40) = 0u;
  *((_DWORD *)v1 + 14) = 1065353216;
  uint64_t v3 = realityio::EntityBuilder::kOutputName((realityio::EntityBuilder *)v1);
  unint64_t v4 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v50) = 0;
  std::allocate_shared[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v3, (uint64_t *)(v4 + 64), (int *)&v50, &v63);
  uint64_t v5 = v64;
  uint64_t v59 = v63;
  uint64_t v60 = v64;
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = v5;
  realityio::InputsDescriptor::addInputDescriptor(v2, &v59);
  long long v6 = (realityio::MeshAssetBuilder *)v60;
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  uint64_t v7 = realityio::MeshAssetBuilder::kOutputName(v6);
  unint64_t v8 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v50) = 0;
  std::allocate_shared[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v7, (uint64_t *)(v8 + 96), (int *)&v50, &v63);
  size_t v9 = v64;
  uint64_t v57 = v63;
  uint64_t v58 = v64;
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v2, &v57);
  uint64_t v10 = (realityio::SkeletonPoseDefinitionBuilder *)v58;
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  uint64_t v11 = realityio::SkeletonPoseDefinitionBuilder::kOutputName(v10);
  unint64_t v12 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v50) = 1;
  std::allocate_shared[abi:ne180100]<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v11, (uint64_t *)(v12 + 224), (int *)&v50, &v63);
  int v13 = v64;
  uint64_t v55 = v63;
  int v56 = v64;
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v2, &v55);
  int v14 = (realityio::SkeletalAnimationAssetBuilder *)v56;
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  uint64_t v15 = realityio::SkeletalAnimationAssetBuilder::kOutputName(v14);
  unint64_t v16 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v16) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  uint64_t v17 = (unint64_t *)MEMORY[0x263F90540];
  unint64_t v18 = atomic_load(MEMORY[0x263F90540]);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
  }
  LODWORD(v50) = 1;
  std::allocate_shared[abi:ne180100]<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(&v63, v15, (uint64_t *)(v16 + 200), (uint64_t *)(v18 + 136), (int *)&v50);
  int v19 = v64;
  uint64_t v53 = v63;
  int v54 = v64;
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v2, &v53);
  uint64_t v20 = (realityio::SkeletalAnimationAssetBuilder *)v54;
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  uint64_t v21 = realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v20);
  unint64_t v22 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v22) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v23 = atomic_load(v17);
  if (!v23) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
  }
  LODWORD(v50) = 1;
  std::allocate_shared[abi:ne180100]<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(&v63, v21, (uint64_t *)(v22 + 240), (uint64_t *)(v23 + 136), (int *)&v50);
  uint64_t v24 = v63;
  uint64_t v25 = v64;
  uint64_t v27 = realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v26);
  unint64_t v28 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v28) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  long long v29 = (uint64_t *)atomic_load(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
  if (!v29) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v50) = 1;
  std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v27, (uint64_t *)(v28 + 240), v29, (int *)&v50, &v63);
  uint64_t v30 = v63;
  int v31 = v64;
  uint64_t v63 = v24;
  int v64 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v65 = v30;
  std::string::size_type v66 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v50 = 0;
  char v51 = 0;
  p_shared_owners = 0;
  int v61 = &v50;
  LOBYTE(v62) = 0;
  std::string v50 = (std::__shared_weak_count *)operator new(0x20uLL);
  char v51 = v50;
  p_shared_owners = &v50[1].__shared_owners_;
  char v51 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<realityio::InputDescriptor const>>,std::shared_ptr<realityio::InputDescriptor const>*,std::shared_ptr<realityio::InputDescriptor const>*,std::shared_ptr<realityio::InputDescriptor const>*>((uint64_t)&p_shared_owners, &v63, &v67, v50);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    std::string::size_type v33 = *(std::__shared_weak_count **)((char *)&v63 + i);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
  }
  uint64_t v34 = realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName((realityio::SkeletalAnimationAssetBuilder *)v33);
  unint64_t v35 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v35) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v61) = 1;
  std::allocate_shared[abi:ne180100]<realityio::UnionInputDescriptor,std::allocator<realityio::UnionInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &,void>(v34, (uint64_t *)(v35 + 240), (int *)&v61, (void **)&v50, &v63);
  uint64_t v36 = v64;
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v2, &v63);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  int v61 = &v50;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v38 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v37);
  unint64_t v39 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v39) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v40 = atomic_load(MEMORY[0x263F90540]);
  if (!v40) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
  }
  LODWORD(v61) = 1;
  std::allocate_shared[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::allocator<realityio::RelatedPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(v38, (uint64_t *)(v39 + 208), (uint64_t *)(v40 + 136), (int *)&v61, &v50);
  uint64_t v41 = v51;
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v2, &v50);
  uint64_t v42 = (realityio::SkeletonPoseDefinitionBuilder *)v51;
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  uint64_t v43 = realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(v42);
  unint64_t v44 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v44) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v45 = atomic_load(MEMORY[0x263F90540]);
  if (!v45) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData();
  }
  int v49 = 1;
  std::allocate_shared[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::allocator<realityio::RelatedPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(v43, (uint64_t *)(v44 + 208), (uint64_t *)(v45 + 168), &v49, &v61);
  uint64_t v46 = v62;
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v2, &v61);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  *a1 = v2;
  a1[1] = (uint64_t)v1;
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
}

void sub_23F6CCAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void sub_23F6CCBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a17) {
    JUMPOUT(0x23F6CCBA0);
  }
  JUMPOUT(0x23F6CCB94);
}

void sub_23F6CCBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a19) {
    JUMPOUT(0x23F6CCBACLL);
  }
  JUMPOUT(0x23F6CCBA8);
}

void sub_23F6CCC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (!a21) {
    JUMPOUT(0x23F6CCBB8);
  }
  JUMPOUT(0x23F6CCBB4);
}

void sub_23F6CCC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (!a23) {
    JUMPOUT(0x23F6CCBC4);
  }
  JUMPOUT(0x23F6CCBC0);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  unint64_t v8 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_23F6CCCF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,0>(void *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F345860;
  std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::construct[abi:ne180100]<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>((uint64_t)&v6, a1 + 3, a2, a3, a4);
  return a1;
}

void sub_23F6CCD68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345860;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::construct[abi:ne180100]<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, int *a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor(a2, (uint64_t)&__p, a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F6CCE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor(void *a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (long long *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_26F3458B0;
  return a1;
}

void sub_23F6CCF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor::~SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor(realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

void realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor::resolvedPrimPaths(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X2>, const realityio::internal::PrimToEntityMap *a2@<X3>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  unint64_t v8 = (char *)a2 + 48;
  size_t v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2 + 48, a1);
  if ((void *)((char *)a2 + 56) != v9 && *(void *)(*((void *)a2 + 3) + 104 * v9[5] + 24) == *(void *)a1)
  {
    uint64_t v10 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v8, a1);
    if ((void *)((char *)a2 + 56) != v10)
    {
      uint64_t v11 = *((void *)a2 + 3);
      if (v11)
      {
        unint64_t v12 = (void *)(v11 + 104 * v10[5]);
        int v13 = (unsigned int *)v12[4];
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a3, vcvtps_u32_f32((float)(unint64_t)v12[9] / *(float *)(a3 + 32)));
        int v14 = (unsigned int *)(v12 + 5);
        if (v13 != v14)
        {
          do
          {
            std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, v13 + 7, v13 + 7);
            uint64_t v15 = (unsigned int *)*((void *)v13 + 1);
            if (v15)
            {
              do
              {
                unint64_t v16 = v15;
                uint64_t v15 = *(unsigned int **)v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                unint64_t v16 = (unsigned int *)*((void *)v13 + 2);
                BOOL v17 = *(void *)v16 == (void)v13;
                int v13 = v16;
              }
              while (!v17);
            }
            int v13 = v16;
          }
          while (v16 != v14);
        }
      }
    }
  }
}

void sub_23F6CD0D8(_Unwind_Exception *a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  uint64_t v10 = operator new(0x50uLL);
  v10[1] = 0;
  void v10[2] = 0;
  void *v10 = &unk_26F344E20;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v11 = *a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = __p;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)(v10 + 3), (long long *)&v14, a3, v11);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  uint64_t v10[3] = &unk_26F344E70;
  uint64_t v12 = *a4;
  unsigned char v10[9] = *a4;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10[9] &= 0xFFFFFFFFFFFFFFF8;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_23F6CD244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F344E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F344E20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor::~RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor(realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor *this)
{
  *(void *)this = &unk_26F344E70;
  uint64_t v1 = *((void *)this + 6);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::InputDescriptor::~InputDescriptor(this);
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_26F344E70;
  uint64_t v1 = *((void *)this + 6);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

void realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor::resolvedPrimPaths(realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdStage *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, const realityio::internal::PrimToEntityMap *a4@<X3>, uint64_t a5@<X8>)
{
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  uint64_t v10 = (char *)a4 + 48;
  int v11 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a4 + 48, a3);
  if ((void *)((char *)a4 + 56) != v11 && *(void *)(*((void *)a4 + 3) + 104 * v11[5] + 24) == *(void *)a3)
  {
    uint64_t v12 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v10, a3);
    if ((void *)((char *)a4 + 56) != v12)
    {
      uint64_t v13 = *((void *)a4 + 3);
      if (v13)
      {
        std::string v14 = (void *)(v13 + 104 * v12[5]);
        uint64_t v15 = (void *)v14[7];
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a5, vcvtps_u32_f32((float)(unint64_t)v14[9] / *(float *)(a5 + 32)));
        unint64_t v16 = v14 + 8;
        if (v15 != v14 + 8)
        {
          BOOL v17 = (realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor *)((char *)this + 48);
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v32, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 28));
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v32))
            {
              if (pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v32, v17))
              {
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(&v28, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v32, v17);
                uint64_t v25 = 0;
                long long v26 = 0;
                uint64_t v27 = 0;
                pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
                int v19 = v25;
                unint64_t v18 = v26;
                while (v19 != v18)
                {
                  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, v19, v19);
                  v19 += 2;
                }
                uint64_t v36 = &v25;
                std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
                if ((v31 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v28, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v32, v17);
                uint64_t v25 = 0;
                long long v26 = 0;
                uint64_t v27 = 0;
                pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
                uint64_t v21 = v25;
                uint64_t v20 = v26;
                while (v21 != v20)
                {
                  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, v21, v21);
                  v21 += 2;
                }
                uint64_t v36 = &v25;
                std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
                if ((v31 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
              if (v29) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
              }
            }
            if ((v35 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
            if (v33) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v33);
            }
            unint64_t v22 = (void *)v15[1];
            if (v22)
            {
              do
              {
                unint64_t v23 = v22;
                unint64_t v22 = (void *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                unint64_t v23 = (void *)v15[2];
                BOOL v24 = *v23 == (void)v15;
                uint64_t v15 = v23;
              }
              while (!v24);
            }
            uint64_t v15 = v23;
          }
          while (v23 != v16);
        }
      }
    }
  }
}

void sub_23F6CD684(_Unwind_Exception *a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F344EC0;
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F344EC0;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::SkeletalAnimationAggregationBuilder::kOutputName((realityio::SkeletalAnimationAggregationBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v12) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 216), (int *)&v12, &v14);
  char v6 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v14);
  uint64_t v7 = (realityio::SkeletalAnimationAggregationBuilder *)v15;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v8 = realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v11 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v8, (std::string::size_type *)(v9 + 256), &v11, &v12);
  uint64_t v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F6CD910(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F344F40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F344F40;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()()
{
  v2[4] = *MEMORY[0x263EF8340];
  REAnimationLibraryComponentGetComponentType();
  v2[0] = &unk_26F344FB0;
  v2[3] = v2;
  ComponentByuint64_t Class = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    std::function<void ()(REComponent *)>::operator()((uint64_t)v2, ComponentByClass);
    RENetworkMarkComponentDirty();
  }
  return std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v2);
}

void sub_23F6CDAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F344FB0;
  return result;
}

void _ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26F344FB0;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_()
{
  return REAnimationLibraryComponentAssignAnimationLibraryAsset();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F345040;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F345040;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3>,void ()(void)>::operator()(uint64_t a1)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 16);
  RESkeletalPoseComponentGetComponentType();
  v4[0] = &unk_26F3450B0;
  v4[1] = v1;
  void v4[3] = v4;
  uint64_t v2 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v4, v2);
  RENetworkMarkComponentDirty();
  return std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v4);
}

void sub_23F6CDD68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::~__func()
{
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F3450B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3450B0;
  a2[1] = v2;
  return result;
}

uint64_t *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target_type()
{
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>>>::destroy(a1[1]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26F345140;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F345140;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = *(uint64_t **)(v1 + 8);
  long long v3 = *(uint64_t **)(v1 + 16);
  if (v2 != v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 16);
    do
    {
      uint64_t v6 = *v2;
      uint64_t v7 = *(std::vector<std::string>::size_type **)(*v2 + 8);
      if (v7) {
        __n128 result = realityio::SkeletalAnimationAggregationBuilder::createSkeletalAnimationAssetsAndAppendToArrayHelper(v5, *(void *)(*(void *)(*(void *)(**(void **)(v4 + 24) + 40) + 16) + 16), *(void *)(v4 + 32), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 16), v7, *(uint64_t **)(v4 + 40), *(void ***)(v4 + 48));
      }
      else {
        __n128 result = (uint64_t)std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(*(uint64_t ***)(v4 + 56), (void *)(v6 + 16), (_DWORD *)(v6 + 16));
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4>,void ()(void)>::target_type()
{
}

void *std::vector<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    __n128 result = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(a4);
    uint64_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      __n128 result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_23F6CE12C(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26F3451C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3451C0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 8);
  long long v4 = (void *)*v1;
  uint64_t v2 = v1 + 1;
  long long v3 = v4;
  if (v4 != v2)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 32);
    do
    {
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v7 + 88, (void *)((char *)v3 + 28));
      if ((void *)(v7 + 96) == v8)
      {
        uint64_t v20 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      }
      else
      {
        size_t v9 = v8;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, (_DWORD *)v8 + 9);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v20 + 1, (_DWORD *)v9 + 10);
      }
      uint64_t v10 = *(void *)(v5 + 24);
      uint64_t v13 = *(void **)(v10 + 8);
      int v11 = (void *)(v10 + 8);
      std::string::size_type v12 = v13;
      if (!v13) {
        goto LABEL_13;
      }
      std::string::size_type v14 = v11;
      do
      {
        int v15 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v12 + 4, &v20);
        unint64_t v16 = v12 + 1;
        if (!v15)
        {
          unint64_t v16 = v12;
          std::string::size_type v14 = v12;
        }
        std::string::size_type v12 = (void *)*v16;
      }
      while (*v16);
      if (v14 == v11 || pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v20, v14 + 4)) {
LABEL_13:
      }
        std::string::size_type v14 = v11;
      if ((void *)(*(void *)(v5 + 24) + 8) != v14) {
        realityio::SkeletalAnimationAggregationBuilder::createSkeletalAnimationAssetsAndAppendToArrayHelper(v6, *(void *)(*(void *)(*(void *)(**(void **)(v5 + 40) + 40) + 16) + 16), *(void *)(v5 + 16), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 28), (std::vector<std::string>::size_type *)v14[5], *(uint64_t **)(v5 + 48), *(void ***)(v5 + 56));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      __n128 result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
      BOOL v17 = (void *)v3[1];
      if (v17)
      {
        do
        {
          unint64_t v18 = v17;
          BOOL v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unint64_t v18 = (void *)v3[2];
          BOOL v19 = *v18 == (void)v3;
          long long v3 = v18;
        }
        while (!v19);
      }
      long long v3 = v18;
    }
    while (v18 != v2);
  }
  return result;
}

void sub_23F6CE3A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F345240;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F345240;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6>,void ()(void)>::operator()(uint64_t a1)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 16);
  RERigComponentGetComponentType();
  v8[0] = &unk_26F3452B0;
  v8[1] = v1;
  void v8[3] = v8;
  uint64_t v2 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v8, v2);
  RENetworkMarkComponentDirty();
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v8);
  REMeshDeformationComponentGetComponentType();
  v7[0] = &unk_26F345330;
  v7[1] = v1;
  uint64_t v7[3] = v7;
  uint64_t v3 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v7, v3);
  RENetworkMarkComponentDirty();
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v7);
  REAnimationComponentGetComponentType();
  v6[0] = &unk_26F3453B0;
  v6[1] = v1;
  void v6[3] = v6;
  uint64_t v4 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v6, v4);
  RENetworkMarkComponentDirty();
  return std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v6);
}

void sub_23F6CE618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::~__func()
{
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F3452B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3452B0;
  a2[1] = v2;
  return result;
}

uint64_t *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::~__func()
{
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F345330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F345330;
  a2[1] = v2;
  return result;
}

uint64_t *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3}>,void ()(REComponent *)>::~__func()
{
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F3453B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3}>,void ()(REComponent *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3453B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  uint64_t result = REAnimationComponentActiveAnimationCount();
  if (result)
  {
    return MEMORY[0x270F1C1F0](v2);
  }
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3}>,void ()(REComponent *)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,REEntity *&,REAsset *,std::vector<realityio::WrappedRERef<REAsset *>> &,std::vector<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*> &,void>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10 = operator new(0x58uLL);
  v10[1] = 0;
  void v10[2] = 0;
  void *v10 = &unk_26F345440;
  uint64_t v10[3] = a2;
  if (a2) {
    RERetain();
  }
  void v10[4] = a3;
  if (a3) {
    RERetain();
  }
  v10[5] = 0;
  v10[6] = 0;
  v10[7] = 0;
  std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(v10 + 5, *a4, a4[1], (a4[1] - *a4) >> 3);
  unsigned char v10[8] = 0;
  unsigned char v10[9] = 0;
  v10[10] = 0;
  uint64_t result = std::vector<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const**>(v10 + 8, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_23F6CEA74(_Unwind_Exception *a1)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345440;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v4);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(a1 + 32));
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 24));
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345490;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26F3454E0;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::getRawValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v2;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26F345510;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F345510;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  v13[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 48);
  **(void **)(a1 + 8) = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
  if (**(void **)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 40), v13);
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v13);
    long long v4 = (char *)String;
    if (*(char *)(String + 23) >= 0) {
      size_t v5 = *(unsigned __int8 *)(String + 23);
    }
    else {
      size_t v5 = *(void *)(String + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 17);
    if (v12 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    if (v5)
    {
      if (v4[23] >= 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = *(char **)v4;
      }
      memmove(v6, v7, v5);
    }
    strcpy((char *)v6 + v5, "_animationLibrary");
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v13);
    if (v12 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    realityio::Builder::addAsset(v2, **(void **)(a1 + 8), (uint64_t)v8);
    REAnimationLibraryComponentGetComponentType();
    uint64_t v9 = *(void *)(a1 + 8);
    v13[0] = &unk_26F345580;
    v13[1] = v2;
    _OWORD v13[2] = v9;
    _OWORD v13[3] = v13;
    uint64_t v10 = REEntityGetOrAddComponentByClass();
    std::function<void ()(REComponent *)>::operator()((uint64_t)v13, v10);
    RENetworkMarkComponentDirty();
    std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v13);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F6CEEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__1clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__1clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F345580;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__1clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F345580;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__1clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  REAnimationLibraryComponentAssignAnimationLibraryAsset();

  return RERelease();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__1clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS_6InputsEENK3__1clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__1clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS_6InputsEENK3__1clEvEUlT_E_;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>>>::destroy(a1[1]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v40 = *(a2 - 1);
                uint64_t v41 = *v10;
                if (*(_DWORD *)(v40 + 8) < *(_DWORD *)(*v10 + 8))
                {
                  uint64_t *v10 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3uLL:
                __n128 result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                __n128 result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                uint64_t v42 = v10 + 1;
                uint64_t v43 = v10 + 2;
                unint64_t v44 = v10 + 3;
                __n128 result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v45 = *(a2 - 1);
                uint64_t v46 = v10[3];
                if (*(_DWORD *)(v45 + 8) < *(_DWORD *)(v46 + 8))
                {
                  *unint64_t v44 = v45;
                  *(a2 - 1) = v46;
                  uint64_t v47 = *v44;
                  uint64_t v48 = *v43;
                  unsigned int v49 = *(_DWORD *)(*v44 + 8);
                  if (v49 < *(_DWORD *)(*v43 + 8))
                  {
                    *uint64_t v43 = v47;
                    *unint64_t v44 = v48;
                    uint64_t v50 = *v42;
                    if (v49 < *(_DWORD *)(*v42 + 8))
                    {
                      v10[1] = v47;
                      void v10[2] = v50;
                      uint64_t v51 = *v10;
                      if (v49 < *(_DWORD *)(*v10 + 8))
                      {
                        uint64_t *v10 = v47;
                        v10[1] = v51;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            std::string v52 = v10 + 1;
            BOOL v54 = v10 == a2 || v52 == a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 8;
                int v56 = v10;
                do
                {
                  uint64_t v58 = *v56;
                  uint64_t v57 = v56[1];
                  int v56 = v52;
                  unsigned int v59 = *(_DWORD *)(v57 + 8);
                  if (v59 < *(_DWORD *)(v58 + 8))
                  {
                    uint64_t v60 = v55;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v60) = v58;
                      uint64_t v61 = v60 - 8;
                      if (v60 == 8)
                      {
                        long long v62 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v58 = *(uint64_t *)((char *)v10 + v60 - 16);
                      v60 -= 8;
                    }
                    while (v59 < *(_DWORD *)(v58 + 8));
                    long long v62 = (uint64_t *)((char *)v10 + v61);
LABEL_85:
                    *long long v62 = v57;
                  }
                  std::string v52 = v56 + 1;
                  v55 += 8;
                }
                while (v56 + 1 != a2);
              }
            }
            else if (!v54)
            {
              do
              {
                uint64_t v93 = *v9;
                uint64_t v92 = v9[1];
                uint64_t v9 = v52;
                unsigned int v94 = *(_DWORD *)(v92 + 8);
                if (v94 < *(_DWORD *)(v93 + 8))
                {
                  do
                  {
                    *std::string v52 = v93;
                    uint64_t v93 = *(v52 - 2);
                    --v52;
                  }
                  while (v94 < *(_DWORD *)(v93 + 8));
                  *std::string v52 = v92;
                }
                std::string v52 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v63 = (v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  uint64_t v67 = &v10[v66];
                  uint64_t v68 = *v67;
                  if (2 * v65 + 2 < (uint64_t)v12)
                  {
                    __n128 result = *(unsigned int *)(v68 + 8);
                    if (result < *(_DWORD *)(v67[1] + 8))
                    {
                      uint64_t v68 = v67[1];
                      ++v67;
                      uint64_t v66 = 2 * v65 + 2;
                    }
                  }
                  uint64_t v69 = &v10[v65];
                  uint64_t v70 = *v69;
                  unsigned int v71 = *(_DWORD *)(*v69 + 8);
                  if (*(_DWORD *)(v68 + 8) >= v71)
                  {
                    do
                    {
                      uint64_t v72 = v67;
                      *uint64_t v69 = v68;
                      if (v63 < v66) {
                        break;
                      }
                      __n128 result = (2 * v66) | 1;
                      uint64_t v67 = &v10[result];
                      uint64_t v73 = 2 * v66 + 2;
                      uint64_t v68 = *v67;
                      if (v73 < (uint64_t)v12 && *(_DWORD *)(v68 + 8) < *(_DWORD *)(v67[1] + 8))
                      {
                        uint64_t v68 = v67[1];
                        ++v67;
                        __n128 result = v73;
                      }
                      uint64_t v69 = v72;
                      uint64_t v66 = result;
                    }
                    while (*(_DWORD *)(v68 + 8) >= v71);
                    *uint64_t v72 = v70;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              uint64_t v74 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v75 = 0;
                uint64_t v76 = *v10;
                uint64_t v77 = v10;
                do
                {
                  unint64_t v78 = &v77[v75];
                  uint64_t v81 = v78[1];
                  uint64_t v79 = v78 + 1;
                  uint64_t v80 = v81;
                  uint64_t v82 = (2 * v75) | 1;
                  uint64_t v83 = 2 * v75 + 2;
                  if (v83 < v74)
                  {
                    __n128 result = *(unsigned int *)(v80 + 8);
                    if (result < *(_DWORD *)(v79[1] + 8))
                    {
                      uint64_t v80 = v79[1];
                      ++v79;
                      uint64_t v82 = v83;
                    }
                  }
                  *uint64_t v77 = v80;
                  uint64_t v77 = v79;
                  uint64_t v75 = v82;
                }
                while (v82 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
                if (v79 == --a2)
                {
                  uint64_t *v79 = v76;
                }
                else
                {
                  uint64_t *v79 = *a2;
                  *a2 = v76;
                  uint64_t v84 = (char *)v79 - (char *)v10 + 8;
                  if (v84 >= 9)
                  {
                    unint64_t v85 = (((unint64_t)v84 >> 3) - 2) >> 1;
                    uint64_t v86 = &v10[v85];
                    uint64_t v87 = *v86;
                    uint64_t v88 = *v79;
                    unsigned int v89 = *(_DWORD *)(*v79 + 8);
                    if (*(_DWORD *)(*v86 + 8) < v89)
                    {
                      do
                      {
                        uint64_t v90 = v86;
                        uint64_t *v79 = v87;
                        if (!v85) {
                          break;
                        }
                        unint64_t v85 = (v85 - 1) >> 1;
                        uint64_t v86 = &v10[v85];
                        uint64_t v87 = *v86;
                        uint64_t v79 = v90;
                      }
                      while (*(_DWORD *)(*v86 + 8) < v89);
                      *uint64_t v90 = v88;
                    }
                  }
                }
              }
              while (v74-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          std::string::size_type v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v9 + 2, &v9[v13 + 1], a2 - 3);
            __n128 result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            uint64_t *v9 = *v14;
            *std::string::size_type v14 = v15;
          }
          else
          {
            __n128 result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unsigned int v17 = *(_DWORD *)(v16 + 8);
          if (*(_DWORD *)(*(v9 - 1) + 8) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(_DWORD *)(*(a2 - 1) + 8))
          {
            uint64_t v32 = v9 + 1;
            do
            {
              uint64_t v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= *(_DWORD *)(*v10 + 8));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v31 = v10[1];
              ++v10;
            }
            while (v17 >= *(_DWORD *)(v31 + 8));
          }
          uint64_t v33 = a2;
          if (v10 < a2)
          {
            uint64_t v33 = a2;
            do
              uint64_t v34 = *--v33;
            while (v17 < *(_DWORD *)(v34 + 8));
          }
          if (v10 < v33)
          {
            uint64_t v35 = *v10;
            uint64_t v36 = *v33;
            do
            {
              uint64_t *v10 = v36;
              *uint64_t v33 = v35;
              do
              {
                uint64_t v37 = v10[1];
                ++v10;
                uint64_t v35 = v37;
              }
              while (v17 >= *(_DWORD *)(v37 + 8));
              do
              {
                uint64_t v38 = *--v33;
                uint64_t v36 = v38;
              }
              while (v17 < *(_DWORD *)(v38 + 8));
            }
            while (v10 < v33);
          }
          unint64_t v39 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            uint64_t *v9 = *v39;
          }
          a4 = 0;
          *unint64_t v39 = v16;
        }
        unsigned int v17 = *(_DWORD *)(v16 + 8);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(_DWORD *)(v19 + 8) < v17);
        uint64_t v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(_DWORD *)(v23 + 8) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(_DWORD *)(v22 + 8) >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v29 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v25 = &v9[v18];
          long long v26 = v21;
          do
          {
            *uint64_t v25 = v24;
            *long long v26 = v19;
            do
            {
              uint64_t v27 = v25[1];
              ++v25;
              uint64_t v19 = v27;
            }
            while (*(_DWORD *)(v27 + 8) < v17);
            do
            {
              uint64_t v28 = *--v26;
              uint64_t v24 = v28;
            }
            while (*(_DWORD *)(v28 + 8) >= v17);
          }
          while (v25 < v26);
          uint64_t v29 = v25 - 1;
        }
        if (v29 != v9) {
          uint64_t *v9 = *v29;
        }
        uint64_t *v29 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,false>(v9, v29, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v29 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v9, v29);
      uint64_t v10 = v29 + 1;
      __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unsigned int v5 = *(_DWORD *)(*a2 + 8);
  unsigned int v6 = *(_DWORD *)(*result + 8);
  uint64_t v7 = *a3;
  unsigned int v8 = *(_DWORD *)(*a3 + 8);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(_DWORD *)(*a2 + 8) < *(_DWORD *)(*result + 8))
      {
        void *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      void *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 8) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      void *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)(v6 + 8) < *(_DWORD *)(*a1 + 8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      uint64_t v20 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(_DWORD *)(v21 + 8) < *(_DWORD *)(v22 + 8))
      {
        uint64_t *v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        unsigned int v25 = *(_DWORD *)(*v20 + 8);
        if (v25 < *(_DWORD *)(*v19 + 8))
        {
          *uint64_t v19 = v23;
          uint64_t *v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 8))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 8))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unsigned int v14 = *(_DWORD *)(*v9 + 8);
    if (v14 < *(_DWORD *)(*v8 + 8))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 8))
        {
          unsigned int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unsigned int v17 = a1;
LABEL_13:
      *unsigned int v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(_DWORD *)(*a4 + 8) < *(_DWORD *)(*a3 + 8))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(_DWORD *)(*a3 + 8) < *(_DWORD *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(_DWORD *)(*a2 + 8) < *(_DWORD *)(*a1 + 8))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26F345610;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F345610;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7>,void ()(void)>::operator()(void *result)
{
  uint64_t v1 = (realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT ***)result[1];
  uint64_t v2 = *v1;
  long long v3 = v1[1];
  if (*v1 != v3)
  {
    uint64_t v4 = result;
    unsigned int v5 = (uint64_t *)result[2];
    do
    {
      uint64_t v6 = *v2;
      uint64_t v7 = (uint64_t *)v4[5];
      unsigned int v8 = (void **)v4[6];
      uint64_t v37 = 0;
      uint64_t TimelineDefinitionRef = realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::createTimelineDefinitionRef(v6);
      if (v37) {
        RERelease();
      }
      uint64_t v37 = TimelineDefinitionRef;
      if (TimelineDefinitionRef)
      {
        uint64_t ServiceLocator = REEngineGetServiceLocator();
        MEMORY[0x2455CDC30](ServiceLocator);
        uint64_t v36 = 0;
        uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (v36) {
          RERelease();
        }
        uint64_t v36 = TimelineAsset;
        if (TimelineAsset)
        {
          uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v6);
          uint64_t v13 = (char *)String;
          if (*(char *)(String + 23) >= 0) {
            size_t v14 = *(unsigned __int8 *)(String + 23);
          }
          else {
            size_t v14 = *(void *)(String + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 25);
          if (v35 >= 0) {
            uint64_t v15 = __p;
          }
          else {
            uint64_t v15 = (void **)__p[0];
          }
          if (v14)
          {
            if (v13[23] >= 0) {
              uint64_t v16 = v13;
            }
            else {
              uint64_t v16 = *(char **)v13;
            }
            memmove(v15, v16, v14);
          }
          strcpy((char *)v15 + v14, "_blendShapeAnimationAsset");
          uint64_t v33 = v36;
          if (v36) {
            RERetain();
          }
          if (v35 >= 0) {
            unsigned int v17 = __p;
          }
          else {
            unsigned int v17 = (void **)__p[0];
          }
          realityio::Builder::addAsset(v5, &v33, (uint64_t)v17);
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v33);
          uint64_t v18 = (void *)v7[1];
          if ((unint64_t)v18 >= v7[2])
          {
            uint64_t v20 = std::vector<realityio::WrappedRERef<REAsset *>>::__push_back_slow_path<realityio::WrappedRERef<REAsset *> const&>(v7, &v36);
          }
          else
          {
            uint64_t v19 = v36;
            *uint64_t v18 = v36;
            if (v19) {
              RERetain();
            }
            uint64_t v20 = (uint64_t)(v18 + 1);
            v7[1] = (uint64_t)(v18 + 1);
          }
          v7[1] = v20;
          uint64_t v22 = (realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT **)v8[1];
          unint64_t v21 = (unint64_t)v8[2];
          if ((unint64_t)v22 >= v21)
          {
            uint64_t v24 = ((char *)v22 - (unsigned char *)*v8) >> 3;
            if ((unint64_t)(v24 + 1) >> 61) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v25 = v21 - (void)*v8;
            uint64_t v26 = v25 >> 2;
            if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
              uint64_t v26 = v24 + 1;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v26;
            }
            if (v27) {
              unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v27);
            }
            else {
              uint64_t v28 = 0;
            }
            uint64_t v29 = (realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT **)(v27 + 8 * v24);
            uint64_t *v29 = v6;
            uint64_t v23 = v29 + 1;
            uint64_t v31 = (char *)*v8;
            BOOL v30 = (char *)v8[1];
            if (v30 != *v8)
            {
              do
              {
                uint64_t v32 = (realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)*((void *)v30 - 1);
                v30 -= 8;
                *--uint64_t v29 = v32;
              }
              while (v30 != v31);
              BOOL v30 = (char *)*v8;
            }
            *unsigned int v8 = v29;
            v8[1] = v23;
            void v8[2] = (void *)(v27 + 8 * v28);
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *uint64_t v22 = v6;
            uint64_t v23 = v22 + 1;
          }
          v8[1] = v23;
          if (v35 < 0) {
            operator delete(__p[0]);
          }
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v36);
      }
      __n128 result = realityio::WrappedRERef<RETimelineDefinition *>::~WrappedRERef(&v37);
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_23F6CFEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a16);
  realityio::WrappedRERef<RETimelineDefinition *>::~WrappedRERef(&a17);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7>,void ()(void)>::target_type()
{
}

void std::allocate_shared[abi:ne180100]<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT,std::allocator<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>,REEntity *&,REAsset *,std::vector<realityio::WrappedRERef<REAsset *>> &,std::vector<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*> &,std::string const&,void>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = operator new(0x70uLL);
  v12[1] = 0;
  void v12[2] = 0;
  *uint64_t v12 = &unk_26F345690;
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string __p = *(std::string *)a6;
  }
  void v12[3] = a2;
  if (a2) {
    RERetain();
  }
  v12[4] = a3;
  if (a3) {
    RERetain();
  }
  void v12[5] = 0;
  v12[6] = 0;
  v12[7] = 0;
  std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(v12 + 5, *a4, a4[1], (a4[1] - *a4) >> 3);
  char v12[8] = 0;
  v12[9] = 0;
  void v12[10] = 0;
  std::vector<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v12 + 8, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
  uint64_t v13 = (std::string *)(v12 + 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v12[13] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *a1 = v12 + 3;
  a1[1] = v12;
}

void sub_23F6D0100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v20 = (std::__shared_weak_count_vtbl *)*v18;
  if (*v18)
  {
    v15[3].__vftable = v20;
    operator delete(v20);
  }
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v17);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v16);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345690;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v4);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(a1 + 32));
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 24));
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3456E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3456E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26F345730;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>::getRawValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v2;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F345760;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F345760;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8>,void ()(void)>::operator()(uint64_t a1)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 16);
  REAnimationComponentGetComponentType();
  v4[0] = &unk_26F3457D0;
  v4[1] = v1;
  void v4[3] = v4;
  uint64_t v2 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v4, v2);
  RENetworkMarkComponentDirty();
  return std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v4);
}

void sub_23F6D0480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::~__func()
{
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F3457D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3457D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  uint64_t result = REAnimationComponentActiveAnimationCount();
  if (result)
  {
    return MEMORY[0x270F1C1F0](v2);
  }
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target_type()
{
}

const void *RIO_MTLX::Value::isA<int>(const void *result)
{
  if (result) {
  return result;
  }
}

void *RIO_MTLX::TypedValue<int>::TYPE()
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<int>::TYPE(void)::v, "integer");
  }
  return RIO_MTLX::TypedValue<int>::TYPE(void)::v;
}

void sub_23F6D06DC(_Unwind_Exception *a1)
{
}

uint64_t RIO_MTLX::toValueString<int>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_23F6D0724(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIO_MTLX::anonymous namespace'::dataToString<int>(uint64_t a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v3 = v8[0];
  *(_DWORD *)((char *)&v8[1] + *(void *)(v8[0] - 24)) &= 0xFFFFFEFB;
  *(void *)((char *)&v8[2] + *(void *)(v3 - 24)) = 6;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  v8[0] = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  void v8[2] = v4;
  void v8[3] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2455D2B30](&v10);
}

void sub_23F6D0934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::anonymous namespace'::stringToData<int>(const std::string *a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v5, a1, 24);
  MEMORY[0x2455D2890](v5, a2);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  _OWORD v5[2] = v3;
  void v5[3] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2455D2B30](&v7);
}

void sub_23F6D0AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void RIO_MTLX::TypedValue<BOOL>::TYPE()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_44, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_44))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40A80, "BOOLean");
    __cxa_guard_release(&_MergedGlobals_44);
  }
}

void sub_23F6D0B34(_Unwind_Exception *a1)
{
}

std::string *RIO_MTLX::toValueString<BOOL>@<X0>(RIO_MTLX *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
}

void sub_23F6D0B7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *RIO_MTLX::anonymous namespace'::dataToString<BOOL>(RIO_MTLX *a1, std::string *a2)
{
  if (*(unsigned char *)a1) {
    uint64_t v3 = (const std::string *)RIO_MTLX::VALUE_STRING_TRUE(a1);
  }
  else {
    uint64_t v3 = (const std::string *)RIO_MTLX::VALUE_STRING_FALSE(a1);
  }

  return std::string::operator=(a2, v3);
}

RIO_MTLX *RIO_MTLX::anonymous namespace'::stringToData<BOOL>(RIO_MTLX *a1, unsigned char *a2)
{
  uint64_t v3 = a1;
  uint64_t result = (RIO_MTLX *)RIO_MTLX::VALUE_STRING_TRUE(a1);
  uint64_t v5 = *((unsigned __int8 *)v3 + 23);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    uint64_t v6 = *((void *)v3 + 1);
  }
  uint64_t v7 = *((unsigned __int8 *)result + 23);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)result + 1);
  }
  if (v6 != v7) {
    goto LABEL_17;
  }
  if (v8 >= 0) {
    char v9 = (unsigned __int8 *)result;
  }
  else {
    char v9 = *(unsigned __int8 **)result;
  }
  if ((v5 & 0x80) != 0)
  {
    uint64_t result = (RIO_MTLX *)memcmp(*(const void **)v3, v9, *((void *)v3 + 1));
    if (result) {
      goto LABEL_17;
    }
LABEL_31:
    LOBYTE(v11) = 1;
    goto LABEL_32;
  }
  if (!*((unsigned char *)v3 + 23)) {
    goto LABEL_31;
  }
  uint64_t v10 = v3;
  while (*(unsigned __int8 *)v10 == *v9)
  {
    uint64_t v10 = (RIO_MTLX *)((char *)v10 + 1);
    ++v9;
    if (!--v5) {
      goto LABEL_31;
    }
  }
LABEL_17:
  uint64_t result = (RIO_MTLX *)RIO_MTLX::VALUE_STRING_FALSE(result);
  uint64_t v11 = *((unsigned __int8 *)v3 + 23);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    uint64_t v12 = *((void *)v3 + 1);
  }
  uint64_t v13 = *((unsigned __int8 *)result + 23);
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)result + 1);
  }
  if (v12 != v13) {
    return result;
  }
  if (v14 >= 0) {
    uint64_t v15 = (unsigned __int8 *)result;
  }
  else {
    uint64_t v15 = *(unsigned __int8 **)result;
  }
  if ((v11 & 0x80) != 0)
  {
    uint64_t result = (RIO_MTLX *)memcmp(*(const void **)v3, v15, *((void *)v3 + 1));
    if (result) {
      return result;
    }
    LOBYTE(v11) = 0;
LABEL_32:
    *a2 = v11;
    return result;
  }
  if (!*((unsigned char *)v3 + 23)) {
    goto LABEL_32;
  }
  while (*(unsigned __int8 *)v3 == *v15)
  {
    uint64_t v3 = (RIO_MTLX *)((char *)v3 + 1);
    ++v15;
    if (!--v11) {
      goto LABEL_32;
    }
  }
  return result;
}

const void *RIO_MTLX::Value::isA<float>(const void *result)
{
  if (result) {
  return result;
  }
}

void *RIO_MTLX::TypedValue<float>::TYPE()
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<float>::TYPE(void)::v, "float");
  }
  return RIO_MTLX::TypedValue<float>::TYPE(void)::v;
}

void sub_23F6D0DD8(_Unwind_Exception *a1)
{
}

uint64_t RIO_MTLX::toValueString<float>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_23F6D0E20(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIO_MTLX::anonymous namespace'::dataToString<float>(uint64_t a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v3 = v8[0];
  *(_DWORD *)((char *)&v8[1] + *(void *)(v8[0] - 24)) &= 0xFFFFFEFB;
  *(void *)((char *)&v8[2] + *(void *)(v3 - 24)) = 6;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  v8[0] = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  void v8[2] = v4;
  void v8[3] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2455D2B30](&v10);
}

void sub_23F6D1030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::anonymous namespace'::stringToData<float>(const std::string *a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v5, a1, 24);
  MEMORY[0x2455D2880](v5, a2);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  _OWORD v5[2] = v3;
  void v5[3] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2455D2B30](&v7);
}

void sub_23F6D11A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

const void *RIO_MTLX::Value::isA<RIO_MTLX::Color3>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<RIO_MTLX::Color3>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE()
{
  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v, "color3");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v;
}

void sub_23F6D12E8(_Unwind_Exception *a1)
{
}

void RIO_MTLX::toValueString<RIO_MTLX::Color3>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v4 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    std::string __p = 0;
    std::string::size_type v13 = 0;
    uint64_t v14 = 0;
    if (v14 >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if (v14 >= 0) {
      std::string::size_type v6 = HIBYTE(v14);
    }
    else {
      std::string::size_type v6 = v13;
    }
    uint64_t v7 = std::string::append(a2, p_p, v6);
    if (v4 <= 1)
    {
      int v8 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v7);
      int v9 = v8[23];
      if (v9 >= 0) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = *(const std::string::value_type **)v8;
      }
      if (v9 >= 0) {
        std::string::size_type v11 = *((unsigned __int8 *)v8 + 23);
      }
      else {
        std::string::size_type v11 = *((void *)v8 + 1);
      }
      std::string::append(a2, v10, v11);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(__p);
    }
    ++v4;
    a1 += 4;
  }
  while (v4 != 3);
}

void sub_23F6D13C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

const void *RIO_MTLX::Value::isA<RIO_MTLX::Color4>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<RIO_MTLX::Color4>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE()
{
  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v, "color4");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v;
}

void sub_23F6D151C(_Unwind_Exception *a1)
{
}

const void *RIO_MTLX::Value::isA<RIO_MTLX::Vector2>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<RIO_MTLX::Vector2>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE()
{
  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v, "vector2");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v;
}

void sub_23F6D1660(_Unwind_Exception *a1)
{
}

void RIO_MTLX::toValueString<RIO_MTLX::Vector2>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  char v5 = 1;
  do
  {
    char v6 = v5;
    std::string __p = 0;
    std::string::size_type v15 = 0;
    uint64_t v16 = 0;
    if (v16 >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if (v16 >= 0) {
      std::string::size_type v8 = HIBYTE(v16);
    }
    else {
      std::string::size_type v8 = v15;
    }
    int v9 = std::string::append(a2, p_p, v8);
    if (v6)
    {
      uint64_t v10 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v9);
      int v11 = v10[23];
      if (v11 >= 0) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = *(const std::string::value_type **)v10;
      }
      if (v11 >= 0) {
        std::string::size_type v13 = *((unsigned __int8 *)v10 + 23);
      }
      else {
        std::string::size_type v13 = *((void *)v10 + 1);
      }
      std::string::append(a2, v12, v13);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(__p);
    }
    char v5 = 0;
    uint64_t v4 = 1;
  }
  while ((v6 & 1) != 0);
}

void sub_23F6D173C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

const void *RIO_MTLX::Value::isA<RIO_MTLX::Vector3>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<RIO_MTLX::Vector3>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE()
{
  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v, "vector3");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v;
}

void sub_23F6D1894(_Unwind_Exception *a1)
{
}

void RIO_MTLX::toValueString<RIO_MTLX::Vector3>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v4 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    std::string __p = 0;
    std::string::size_type v13 = 0;
    uint64_t v14 = 0;
    if (v14 >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if (v14 >= 0) {
      std::string::size_type v6 = HIBYTE(v14);
    }
    else {
      std::string::size_type v6 = v13;
    }
    uint64_t v7 = std::string::append(a2, p_p, v6);
    if (v4 <= 1)
    {
      std::string::size_type v8 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v7);
      int v9 = v8[23];
      if (v9 >= 0) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = *(const std::string::value_type **)v8;
      }
      if (v9 >= 0) {
        std::string::size_type v11 = *((unsigned __int8 *)v8 + 23);
      }
      else {
        std::string::size_type v11 = *((void *)v8 + 1);
      }
      std::string::append(a2, v10, v11);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(__p);
    }
    ++v4;
    a1 += 4;
  }
  while (v4 != 3);
}

void sub_23F6D1970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

float RIO_MTLX::fromValueString<RIO_MTLX::Vector3>(RIO_MTLX *a1)
{
  int v7 = 0;
  uint64_t v6 = 0;
  uint64_t v2 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v2, (uint64_t)v8);
  uint64_t v3 = 0;
  unint64_t v4 = &v6;
  do
  {
    v3 += 24;
    unint64_t v4 = (uint64_t *)((char *)v4 + 4);
  }
  while (v3 != 72);
  int v9 = (void **)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  return *(float *)&v6;
}

void sub_23F6D1A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  *(void *)(v11 - 24) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 24));
  _Unwind_Resume(a1);
}

const void *RIO_MTLX::Value::isA<RIO_MTLX::Vector4>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<RIO_MTLX::Vector4>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE()
{
  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v, "vector4");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v;
}

void sub_23F6D1B68(_Unwind_Exception *a1)
{
}

const void *RIO_MTLX::Value::isA<RIO_MTLX::Matrix33>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<RIO_MTLX::Matrix33>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE()
{
  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v, "matrix33");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v;
}

void sub_23F6D1CAC(_Unwind_Exception *a1)
{
}

const void *RIO_MTLX::Value::isA<RIO_MTLX::Matrix44>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<RIO_MTLX::Matrix44>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE()
{
  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v, "matrix44");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v;
}

void sub_23F6D1DF0(_Unwind_Exception *a1)
{
}

const void *RIO_MTLX::Value::isA<std::string>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<std::string>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

void *RIO_MTLX::TypedValue<std::string>::TYPE()
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<std::string>::TYPE(void)::v, "string");
  }
  return RIO_MTLX::TypedValue<std::string>::TYPE(void)::v;
}

void sub_23F6D1F34(_Unwind_Exception *a1)
{
}

std::string *RIO_MTLX::toValueString<std::string>@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::operator=(a2, __str);
}

void sub_23F6D1F80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *RIO_MTLX::fromValueString<std::string>@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::operator=(a2, __str);
}

void sub_23F6D1FD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

const void *RIO_MTLX::Value::isA<std::vector<int>>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<std::vector<int>>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

void RIO_MTLX::TypedValue<std::vector<int>>::TYPE()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40A58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40A58))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40A98, "integerarray");
    __cxa_guard_release(&qword_268C40A58);
  }
}

void sub_23F6D2124(_Unwind_Exception *a1)
{
}

const void *RIO_MTLX::Value::isA<std::vector<BOOL>>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<std::vector<BOOL>>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

void RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40A60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40A60))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40AB0, "BOOLeanarray");
    __cxa_guard_release(&qword_268C40A60);
  }
}

void sub_23F6D2274(_Unwind_Exception *a1)
{
}

const void *RIO_MTLX::Value::isA<std::vector<float>>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<std::vector<float>>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

void RIO_MTLX::TypedValue<std::vector<float>>::TYPE()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40A68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40A68))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40AC8, "floatarray");
    __cxa_guard_release(&qword_268C40A68);
  }
}

void sub_23F6D23C4(_Unwind_Exception *a1)
{
}

const void *RIO_MTLX::Value::isA<std::vector<std::string>>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<std::vector<std::string>>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

void *RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE()
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v, "stringarray");
  }
  return RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v;
}

void sub_23F6D2508(_Unwind_Exception *a1)
{
}

void RIO_MTLX::toValueString<std::vector<std::string>>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      memset(&v14, 0, sizeof(v14));
      std::string::operator=(&v14, (const std::string *)(v3 + v5));
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v7 = &v14;
      }
      else {
        int v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
      }
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v14.__r_.__value_.__l.__size_;
      }
      int v9 = std::string::append(a2, (const std::string::value_type *)v7, size);
      if (++v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3))
      {
        uint64_t v10 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v9);
        int v11 = v10[23];
        if (v11 >= 0) {
          uint64_t v12 = v10;
        }
        else {
          uint64_t v12 = *(const std::string::value_type **)v10;
        }
        if (v11 >= 0) {
          std::string::size_type v13 = *((unsigned __int8 *)v10 + 23);
        }
        else {
          std::string::size_type v13 = *((void *)v10 + 1);
        }
        std::string::append(a2, v12, v13);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = *a1;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
}

void sub_23F6D2624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::fromValueString<std::vector<std::string>>(RIO_MTLX *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v11);
  uint64_t v5 = (const std::string *)v11[0];
  unint64_t v6 = (const std::string *)v11[1];
  while (v5 != v6)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::operator=(&__p, v5);
    unint64_t v7 = a2[1];
    if (v7 >= a2[2])
    {
      uint64_t v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (long long *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v7 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v7 = v8;
      }
      uint64_t v9 = v7 + 24;
      a2[1] = v7 + 24;
    }
    a2[1] = v9;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    ++v5;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_23F6D2738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

const void *RIO_MTLX::Value::isA<long>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<long>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

void RIO_MTLX::TypedValue<long>::TYPE()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40A70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40A70))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40AE0, "integer");
    __cxa_guard_release(&qword_268C40A70);
  }
}

void sub_23F6D28BC(_Unwind_Exception *a1)
{
}

const void *RIO_MTLX::Value::isA<double>(const void *result)
{
  if (result) {
  return result;
  }
}

char *RIO_MTLX::Value::asA<double>(char *a1)
{
  if (a1) {
  return a1 + 8;
  }
}

void RIO_MTLX::TypedValue<double>::TYPE()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40A78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40A78))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40AF8, "float");
    __cxa_guard_release(&qword_268C40A78);
  }
}

void sub_23F6D2A0C(_Unwind_Exception *a1)
{
}

long long *RIO_MTLX::Value::_creatorMap(RIO_MTLX::Value *this)
{
  {
    RIO_MTLX::Value::_creatorMap(void)::v = 0u;
    *(_OWORD *)&qword_268C3F9C0 = 0u;
    dword_268C3F9D0 = 1065353216;
  }
  return &RIO_MTLX::Value::_creatorMap(void)::v;
}

void RIO_MTLX::Value::createValueFromStrings(RIO_MTLX::Value *a1@<X0>, unsigned __int8 *a2@<X1>, _OWORD *a3@<X8>)
{
  RIO_MTLX::Value::_creatorMap(a1);
  unint64_t v6 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, a2);
  RIO_MTLX::Value::_creatorMap((RIO_MTLX::Value *)v6);
  if (v6)
  {
    unint64_t v7 = (void (*)(RIO_MTLX::Value *))*((void *)v6 + 5);
    v7(a1);
  }
  else
  {
    RIO_MTLX::TypedValue<std::string>::createFromString((std::string *)a1, a3);
  }
}

void RIO_MTLX::TypedValue<std::string>::createFromString(std::string *a1@<X0>, _OWORD *a2@<X8>)
{
  RIO_MTLX::fromValueString<std::string>(a1, &__p);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::string>,std::allocator<RIO_MTLX::TypedValue<std::string>>,std::string const&,void>((long long *)&__p, &v4);
  *a2 = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F6D2B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::TypedValue<int>::getTypeString()
{
  return RIO_MTLX::TypedValue<int>::TYPE(void)::v;
}

uint64_t RIO_MTLX::TypedValue<int>::getValueString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return RIO_MTLX::toValueString<int>(a1 + 8, a2);
}

void *RIO_MTLX::registryint(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<int>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryint(void)::registryint);
  }
  return &RIO_MTLX::registryint(void)::registryint;
}

void sub_23F6D2C18(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::TypedValue<BOOL>::getTypeString()
{
  return qword_268C40A80;
}

std::string *RIO_MTLX::TypedValue<BOOL>::getValueString@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return RIO_MTLX::toValueString<BOOL>((RIO_MTLX *)(a1 + 8), a2);
}

void *RIO_MTLX::registryBOOL(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<BOOL>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryBOOL(void)::registryBOOL);
  }
  return &RIO_MTLX::registryBOOL(void)::registryBOOL;
}

void sub_23F6D2CB8(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::TypedValue<float>::getTypeString()
{
  return RIO_MTLX::TypedValue<float>::TYPE(void)::v;
}

uint64_t RIO_MTLX::TypedValue<float>::getValueString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return RIO_MTLX::toValueString<float>(a1 + 8, a2);
}

void *RIO_MTLX::registryfloat(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<float>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryfloat(void)::registryfloat);
  }
  return &RIO_MTLX::registryfloat(void)::registryfloat;
}

void sub_23F6D2D58(_Unwind_Exception *a1)
{
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Color3>::getTypeString()
{
  return &RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Color3>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
}

void *RIO_MTLX::registryColor3(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Color3>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryColor3(void)::registryColor3);
  }
  return &RIO_MTLX::registryColor3(void)::registryColor3;
}

void sub_23F6D2DF8(_Unwind_Exception *a1)
{
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Color4>::getTypeString()
{
  return &RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Color4>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = 0;
  uint64_t v4 = a1 + 8;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    std::string __p = 0;
    std::string::size_type v13 = 0;
    uint64_t v14 = 0;
    if (v14 >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if (v14 >= 0) {
      std::string::size_type v6 = HIBYTE(v14);
    }
    else {
      std::string::size_type v6 = v13;
    }
    unint64_t v7 = std::string::append(a2, p_p, v6);
    if (v3 <= 2)
    {
      long long v8 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v7);
      int v9 = v8[23];
      if (v9 >= 0) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = *(const std::string::value_type **)v8;
      }
      if (v9 >= 0) {
        std::string::size_type v11 = *((unsigned __int8 *)v8 + 23);
      }
      else {
        std::string::size_type v11 = *((void *)v8 + 1);
      }
      std::string::append(a2, v10, v11);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(__p);
    }
    ++v3;
    v4 += 4;
  }
  while (v3 != 4);
}

void sub_23F6D2EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryColor4(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Color4>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryColor4(void)::registryColor4);
  }
  return &RIO_MTLX::registryColor4(void)::registryColor4;
}

void sub_23F6D2F80(_Unwind_Exception *a1)
{
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::getTypeString()
{
  return &RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
}

void *RIO_MTLX::registryVector2(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Vector2>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryVector2(void)::registryVector2);
  }
  return &RIO_MTLX::registryVector2(void)::registryVector2;
}

void sub_23F6D3020(_Unwind_Exception *a1)
{
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::getTypeString()
{
  return &RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
}

void *RIO_MTLX::registryVector3(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Vector3>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryVector3(void)::registryVector3);
  }
  return &RIO_MTLX::registryVector3(void)::registryVector3;
}

void sub_23F6D30C0(_Unwind_Exception *a1)
{
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::getTypeString()
{
  return &RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = 0;
  uint64_t v4 = a1 + 8;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    std::string __p = 0;
    std::string::size_type v13 = 0;
    uint64_t v14 = 0;
    if (v14 >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if (v14 >= 0) {
      std::string::size_type v6 = HIBYTE(v14);
    }
    else {
      std::string::size_type v6 = v13;
    }
    unint64_t v7 = std::string::append(a2, p_p, v6);
    if (v3 <= 2)
    {
      long long v8 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v7);
      int v9 = v8[23];
      if (v9 >= 0) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = *(const std::string::value_type **)v8;
      }
      if (v9 >= 0) {
        std::string::size_type v11 = *((unsigned __int8 *)v8 + 23);
      }
      else {
        std::string::size_type v11 = *((void *)v8 + 1);
      }
      std::string::append(a2, v10, v11);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(__p);
    }
    ++v3;
    v4 += 4;
  }
  while (v3 != 4);
}

void sub_23F6D31BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryVector4(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Vector4>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryVector4(void)::registryVector4);
  }
  return &RIO_MTLX::registryVector4(void)::registryVector4;
}

void sub_23F6D3248(_Unwind_Exception *a1)
{
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::getTypeString()
{
  return &RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = 0;
  uint64_t v4 = a1 + 8;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    unint64_t v5 = 0;
    uint64_t v6 = v4;
    do
    {
      std::string __p = 0;
      std::string::size_type v15 = 0;
      uint64_t v16 = 0;
      if (v16 >= 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if (v16 >= 0) {
        std::string::size_type v8 = HIBYTE(v16);
      }
      else {
        std::string::size_type v8 = v15;
      }
      int v9 = std::string::append(a2, p_p, v8);
      if (v3 < 2 || v5 <= 1)
      {
        uint64_t v10 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v9);
        int v11 = v10[23];
        if (v11 >= 0) {
          uint64_t v12 = v10;
        }
        else {
          uint64_t v12 = *(const std::string::value_type **)v10;
        }
        if (v11 >= 0) {
          std::string::size_type v13 = *((unsigned __int8 *)v10 + 23);
        }
        else {
          std::string::size_type v13 = *((void *)v10 + 1);
        }
        std::string::append(a2, v12, v13);
      }
      if (SHIBYTE(v16) < 0) {
        operator delete(__p);
      }
      ++v5;
      v6 += 4;
    }
    while (v5 != 3);
    ++v3;
    v4 += 12;
  }
  while (v3 != 3);
}

void sub_23F6D336C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryMatrix33(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Matrix33>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryMatrix33(void)::registryMatrix33);
  }
  return &RIO_MTLX::registryMatrix33(void)::registryMatrix33;
}

void sub_23F6D33F8(_Unwind_Exception *a1)
{
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::getTypeString()
{
  return &RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = 0;
  uint64_t v4 = a1 + 8;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    unint64_t v5 = 0;
    uint64_t v6 = v4;
    do
    {
      std::string __p = 0;
      std::string::size_type v15 = 0;
      uint64_t v16 = 0;
      if (v16 >= 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if (v16 >= 0) {
        std::string::size_type v8 = HIBYTE(v16);
      }
      else {
        std::string::size_type v8 = v15;
      }
      int v9 = std::string::append(a2, p_p, v8);
      if (v3 < 3 || v5 <= 2)
      {
        uint64_t v10 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v9);
        int v11 = v10[23];
        if (v11 >= 0) {
          uint64_t v12 = v10;
        }
        else {
          uint64_t v12 = *(const std::string::value_type **)v10;
        }
        if (v11 >= 0) {
          std::string::size_type v13 = *((unsigned __int8 *)v10 + 23);
        }
        else {
          std::string::size_type v13 = *((void *)v10 + 1);
        }
        std::string::append(a2, v12, v13);
      }
      if (SHIBYTE(v16) < 0) {
        operator delete(__p);
      }
      ++v5;
      v6 += 4;
    }
    while (v5 != 4);
    ++v3;
    v4 += 16;
  }
  while (v3 != 4);
}

void sub_23F6D351C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryMatrix44(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Matrix44>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryMatrix44(void)::registryMatrix44);
  }
  return &RIO_MTLX::registryMatrix44(void)::registryMatrix44;
}

void sub_23F6D35A8(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::TypedValue<std::string>::getTypeString()
{
  return RIO_MTLX::TypedValue<std::string>::TYPE(void)::v;
}

std::string *RIO_MTLX::TypedValue<std::string>::getValueString@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return RIO_MTLX::toValueString<std::string>((std::string *)(a1 + 8), a2);
}

void *RIO_MTLX::registrystring(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<std::string>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registrystring(void)::registrystring);
  }
  return &RIO_MTLX::registrystring(void)::registrystring;
}

void sub_23F6D3648(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::TypedValue<std::vector<int>>::getTypeString()
{
  return qword_268C40A98;
}

void RIO_MTLX::TypedValue<std::vector<int>>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      std::string __p = 0;
      std::string::size_type v15 = 0;
      uint64_t v16 = 0;
      if (v16 >= 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if (v16 >= 0) {
        std::string::size_type v8 = HIBYTE(v16);
      }
      else {
        std::string::size_type v8 = v15;
      }
      int v9 = std::string::append(a2, p_p, v8);
      if (++v6 < (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2)
      {
        uint64_t v10 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v9);
        int v11 = v10[23];
        if (v11 >= 0) {
          uint64_t v12 = v10;
        }
        else {
          uint64_t v12 = *(const std::string::value_type **)v10;
        }
        if (v11 >= 0) {
          std::string::size_type v13 = *((unsigned __int8 *)v10 + 23);
        }
        else {
          std::string::size_type v13 = *((void *)v10 + 1);
        }
        std::string::append(a2, v12, v13);
      }
      if (SHIBYTE(v16) < 0) {
        operator delete(__p);
      }
      uint64_t v3 = *(void *)(a1 + 8);
      v5 += 4;
    }
    while (v6 < (*(void *)(a1 + 16) - v3) >> 2);
  }
}

void sub_23F6D376C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryIntVec(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<std::vector<int>>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryIntVec(void)::registryIntVec);
  }
  return &RIO_MTLX::registryIntVec(void)::registryIntVec;
}

void sub_23F6D37F8(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::TypedValue<std::vector<BOOL>>::getTypeString()
{
  return qword_268C40AB0;
}

void RIO_MTLX::TypedValue<std::vector<BOOL>>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(void *)(a1 + 16))
  {
    unint64_t v4 = 0;
    do
    {
      memset(&__p, 0, sizeof(__p));
      char v12 = (*(void *)(*(void *)(a1 + 8) + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      unint64_t v7 = std::string::append(a2, (const std::string::value_type *)p_p, size);
      if (++v4 < *(void *)(a1 + 16))
      {
        std::string::size_type v8 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v7);
        int v9 = v8[23];
        if (v9 >= 0) {
          uint64_t v10 = v8;
        }
        else {
          uint64_t v10 = *(const std::string::value_type **)v8;
        }
        if (v9 >= 0) {
          std::string::size_type v11 = *((unsigned __int8 *)v8 + 23);
        }
        else {
          std::string::size_type v11 = *((void *)v8 + 1);
        }
        std::string::append(a2, v10, v11);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    while (v4 < *(void *)(a1 + 16));
  }
}

void sub_23F6D391C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryBoolVec(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<std::vector<BOOL>>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryBoolVec(void)::registryBoolVec);
  }
  return &RIO_MTLX::registryBoolVec(void)::registryBoolVec;
}

void sub_23F6D39AC(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::TypedValue<std::vector<float>>::getTypeString()
{
  return qword_268C40AC8;
}

void RIO_MTLX::TypedValue<std::vector<float>>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      std::string __p = 0;
      std::string::size_type v15 = 0;
      uint64_t v16 = 0;
      if (v16 >= 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if (v16 >= 0) {
        std::string::size_type v8 = HIBYTE(v16);
      }
      else {
        std::string::size_type v8 = v15;
      }
      int v9 = std::string::append(a2, p_p, v8);
      if (++v6 < (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2)
      {
        uint64_t v10 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v9);
        int v11 = v10[23];
        if (v11 >= 0) {
          char v12 = v10;
        }
        else {
          char v12 = *(const std::string::value_type **)v10;
        }
        if (v11 >= 0) {
          std::string::size_type v13 = *((unsigned __int8 *)v10 + 23);
        }
        else {
          std::string::size_type v13 = *((void *)v10 + 1);
        }
        std::string::append(a2, v12, v13);
      }
      if (SHIBYTE(v16) < 0) {
        operator delete(__p);
      }
      uint64_t v3 = *(void *)(a1 + 8);
      v5 += 4;
    }
    while (v6 < (*(void *)(a1 + 16) - v3) >> 2);
  }
}

void sub_23F6D3AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryFloatVec(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<std::vector<float>>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryFloatVec(void)::registryFloatVec);
  }
  return &RIO_MTLX::registryFloatVec(void)::registryFloatVec;
}

void sub_23F6D3B5C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::TypedValue<std::vector<std::string>>::getTypeString()
{
  return RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<std::vector<std::string>>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
}

void *RIO_MTLX::registryStringVec(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<std::vector<std::string>>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryStringVec(void)::registryStringVec);
  }
  return &RIO_MTLX::registryStringVec(void)::registryStringVec;
}

void sub_23F6D3BFC(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::TypedValue<long>::getTypeString()
{
  return qword_268C40AE0;
}

uint64_t RIO_MTLX::TypedValue<long>::getValueString@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  uint64_t v2 = v7[0];
  *(_DWORD *)((char *)&v7[1] + *(void *)(v7[0] - 24)) &= 0xFFFFFEFB;
  *(void *)((char *)&v7[2] + *(void *)(v2 - 24)) = 6;
  std::ostream::operator<<();
  std::stringbuf::str();
  *(_OWORD *)a1 = v5;
  a1[2] = v6;
  v7[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v7[2] = v3;
  uint64_t v7[3] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2455D2B30](&v9);
}

void sub_23F6D3E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  a12 = *MEMORY[0x263F8C2B8];
  uint64_t v32 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)&a12 + *(void *)(a12 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  a14 = v32;
  a15 = MEMORY[0x263F8C318] + 16;
  if (a28 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2455D2B30](&a31);
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registrylong(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<long>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registrylong(void)::registrylong);
  }
  return &RIO_MTLX::registrylong(void)::registrylong;
}

void sub_23F6D3F9C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::TypedValue<double>::getTypeString()
{
  return qword_268C40AF8;
}

uint64_t RIO_MTLX::TypedValue<double>::getValueString@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  uint64_t v2 = v7[0];
  *(_DWORD *)((char *)&v7[1] + *(void *)(v7[0] - 24)) &= 0xFFFFFEFB;
  *(void *)((char *)&v7[2] + *(void *)(v2 - 24)) = 6;
  std::ostream::operator<<();
  std::stringbuf::str();
  *(_OWORD *)a1 = v5;
  a1[2] = v6;
  v7[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v7[2] = v3;
  uint64_t v7[3] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2455D2B30](&v9);
}

void sub_23F6D41C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  a12 = *MEMORY[0x263F8C2B8];
  uint64_t v32 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)&a12 + *(void *)(a12 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  a14 = v32;
  a15 = MEMORY[0x263F8C318] + 16;
  if (a28 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2455D2B30](&a31);
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registrydouble(RIO_MTLX *this)
{
  {
    RIO_MTLX::ValueRegistry<double>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registrydouble(void)::registrydouble);
  }
  return &RIO_MTLX::registrydouble(void)::registrydouble;
}

void sub_23F6D433C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::Value::initValueTypeRegistry(RIO_MTLX::Value *this)
{
  uint64_t v1 = (RIO_MTLX *)RIO_MTLX::registryint(this);
  uint64_t v2 = (RIO_MTLX *)RIO_MTLX::registryBOOL(v1);
  uint64_t v3 = (RIO_MTLX *)RIO_MTLX::registryfloat(v2);
  unint64_t v4 = (RIO_MTLX *)RIO_MTLX::registryColor3(v3);
  long long v5 = (RIO_MTLX *)RIO_MTLX::registryColor4(v4);
  uint64_t v6 = (RIO_MTLX *)RIO_MTLX::registryVector2(v5);
  unint64_t v7 = (RIO_MTLX *)RIO_MTLX::registryVector3(v6);
  char v8 = (RIO_MTLX *)RIO_MTLX::registryVector4(v7);
  uint64_t v9 = (RIO_MTLX *)RIO_MTLX::registryMatrix33(v8);
  uint64_t v10 = (RIO_MTLX *)RIO_MTLX::registryMatrix44(v9);
  int v11 = (RIO_MTLX *)RIO_MTLX::registrystring(v10);
  char v12 = (RIO_MTLX *)RIO_MTLX::registryIntVec(v11);
  std::string::size_type v13 = (RIO_MTLX *)RIO_MTLX::registryBoolVec(v12);
  uint64_t v14 = (RIO_MTLX *)RIO_MTLX::registryFloatVec(v13);
  uint64_t v15 = (RIO_MTLX *)RIO_MTLX::registryStringVec(v14);
  uint64_t v16 = (RIO_MTLX *)RIO_MTLX::registrylong(v15);

  return RIO_MTLX::registrydouble(v16);
}

void *std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::string>,std::allocator<RIO_MTLX::TypedValue<std::string>>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x38uLL);
  uint64_t result = std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::string>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<RIO_MTLX::TypedValue<std::string>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_23F6D4400(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::string>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<RIO_MTLX::TypedValue<std::string>>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F345A98;
  RIO_MTLX::TypedValue<std::string>::TypedValue(a1 + 3, a2);
  return a1;
}

void sub_23F6D445C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345A98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *RIO_MTLX::TypedValue<std::string>::TypedValue(void *a1, long long *a2)
{
  *a1 = &unk_26F345AE8;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

uint64_t RIO_MTLX::TypedValue<std::string>::~TypedValue(uint64_t a1)
{
  *(void *)a1 = &unk_26F345AE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::string>::~TypedValue(uint64_t a1)
{
  *(void *)a1 = &unk_26F345AE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x2455D2BD0);
}

double RIO_MTLX::TypedValue<std::string>::copy@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::string>,std::allocator<RIO_MTLX::TypedValue<std::string>>,std::string const&,void>((long long *)(a1 + 8), v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C328] + 104;
  a1[16] = MEMORY[0x263F8C328] + 104;
  unint64_t v7 = a1 + 2;
  uint64_t v8 = MEMORY[0x263F8C328] + 64;
  a1[2] = MEMORY[0x263F8C328] + 64;
  uint64_t v9 = (uint64_t)(a1 + 3);
  uint64_t v10 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *a1 = v12;
  *(uint64_t *)((char *)a1 + *(void *)(v12 - 24)) = v11;
  a1[1] = 0;
  std::string::size_type v13 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v13, a1 + 3);
  uint64_t v14 = MEMORY[0x263F8C328] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v15 = v10[5];
  uint64_t v16 = v10[4];
  a1[2] = v16;
  *(void *)((char *)v7 + *(void *)(v16 - 24)) = v15;
  uint64_t v17 = v10[1];
  *a1 = v17;
  *(uint64_t *)((char *)a1 + *(void *)(v17 - 24)) = v10[6];
  *a1 = v14;
  a1[16] = v6;
  a1[2] = v8;
  std::stringbuf::basic_stringbuf[abi:ne180100](v9, a2, a3);
  return a1;
}

void sub_23F6D4910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<int>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<int>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)RIO_MTLX::TypedValue<int>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<int>::TYPE();
    uint64_t v3 = (long long *)RIO_MTLX::TypedValue<int>::TYPE(void)::v;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::TypedValue<int>::TYPE(void)::v, &v3)+ 5) = RIO_MTLX::TypedValue<int>::createFromString;
  }
  return a1;
}

void *RIO_MTLX::TypedValue<int>::createFromString@<X0>(const std::string *a1@<X0>, void *a2@<X8>)
{
  int v5 = 0;
  int v3 = v5;
  double result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F345B20;
  result[3] = &unk_26F345B70;
  *((_DWORD *)result + 8) = v3;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>(unsigned __int8 *a1)
{
  unint64_t v2 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_268C3F9C8, (uint64_t)a1);
  unint64_t v3 = *((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1);
  if (!*((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1)) {
    return 0;
  }
  unint64_t v4 = v2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&RIO_MTLX::Value::_creatorMap(void)::v + 8));
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v2;
    if (v2 >= *((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1)) {
      unint64_t v7 = v2 % *((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1);
    }
  }
  else
  {
    unint64_t v7 = (*((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1) - 1) & v2;
  }
  uint64_t v8 = *(unsigned __int8 ***)(RIO_MTLX::Value::_creatorMap(void)::v + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t i = *v8; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v10 = *((void *)i + 1);
    if (v4 == v10)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_268C3F9D0, i + 16, a1)) {
        return i;
      }
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3) {
          v10 %= v3;
        }
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return i;
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345B20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypedValue<int>::~TypedValue()
{
}

void *RIO_MTLX::TypedValue<int>::copy@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F345B20;
  result[3] = &unk_26F345B70;
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 8);
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

char *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(unsigned __int8 *a1, long long **a2)
{
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_268C3F9C8, (uint64_t)a1);
  unint64_t v6 = v5;
  unint64_t v7 = *((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1);
  if (*((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1))
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&RIO_MTLX::Value::_creatorMap(void)::v + 8));
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v2 = v5;
      if (v5 >= *((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1)) {
        unint64_t v2 = v5 % *((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1);
      }
    }
    else
    {
      unint64_t v2 = (*((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1) - 1) & v5;
    }
    unint64_t v10 = *(void ***)(RIO_MTLX::Value::_creatorMap(void)::v + 8 * v2);
    if (v10)
    {
      uint64_t v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v6)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_268C3F9D0, (unsigned __int8 *)v11 + 16, a1))return v11; {
          }
            }
          else
          {
            if (v9 > 1)
            {
              if (v12 >= v7) {
                v12 %= v7;
              }
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  std::string::size_type v13 = *a2;
  uint64_t v11 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = v6;
  uint64_t v14 = (std::string *)(v11 + 16);
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v13, *((void *)v13 + 1));
  }
  else
  {
    long long v15 = *v13;
    *((void *)v11 + 4) = *((void *)v13 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  *((void *)v11 + 5) = 0;
  float v16 = (float)(unint64_t)(qword_268C3F9C8 + 1);
  if (!v7 || (float)(*(float *)&dword_268C3F9D0 * (float)v7) < v16)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v16 / *(float *)&dword_268C3F9D0);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v7 = *((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1);
    if (*(void *)&prime > *((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1)) {
      goto LABEL_33;
    }
    if (*(void *)&prime < *((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1))
    {
      unint64_t v27 = vcvtps_u32_f32((float)(unint64_t)qword_268C3F9C8 / *(float *)&dword_268C3F9D0);
      if (*((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1) < 3uLL
        || (uint8x8_t v28 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&RIO_MTLX::Value::_creatorMap(void)::v + 8)),
            v28.i16[0] = vaddlv_u8(v28),
            v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v21 = operator new(8 * *(void *)&prime);
          uint64_t v22 = (void *)RIO_MTLX::Value::_creatorMap(void)::v;
          *(void *)&RIO_MTLX::Value::_creatorMap(void)::v = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)&RIO_MTLX::Value::_creatorMap(void)::v + 1) = prime;
          do
            *(void *)(RIO_MTLX::Value::_creatorMap(void)::v + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          uint64_t v24 = (void **)qword_268C3F9C0;
          if (qword_268C3F9C0)
          {
            unint64_t v25 = *(void *)(qword_268C3F9C0 + 8);
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(RIO_MTLX::Value::_creatorMap(void)::v + 8 * v25) = &qword_268C3F9C0;
            for (i = *v24; i; unint64_t v25 = v31)
            {
              unint64_t v31 = i[1];
              if (v26.u32[0] > 1uLL)
              {
                if (v31 >= *(void *)&prime) {
                  v31 %= *(void *)&prime;
                }
              }
              else
              {
                v31 &= *(void *)&prime - 1;
              }
              if (v31 != v25)
              {
                if (!*(void *)(RIO_MTLX::Value::_creatorMap(void)::v + 8 * v31))
                {
                  *(void *)(RIO_MTLX::Value::_creatorMap(void)::v + 8 * v31) = v24;
                  goto LABEL_58;
                }
                *uint64_t v24 = (void *)*i;
                *uint64_t i = **(void **)(RIO_MTLX::Value::_creatorMap(void)::v + 8 * v31);
                **(void **)(RIO_MTLX::Value::_creatorMap(void)::v + 8 * v31) = i;
                uint64_t i = v24;
              }
              unint64_t v31 = v25;
LABEL_58:
              uint64_t v24 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v36 = (void *)RIO_MTLX::Value::_creatorMap(void)::v;
        *(void *)&RIO_MTLX::Value::_creatorMap(void)::v = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v7 = 0;
        *((void *)&RIO_MTLX::Value::_creatorMap(void)::v + 1) = 0;
      }
    }
LABEL_62:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v2 = v6 % v7;
      }
      else {
        unint64_t v2 = v6;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }
  }
  uint64_t v32 = RIO_MTLX::Value::_creatorMap(void)::v;
  uint64_t v33 = *(void **)(RIO_MTLX::Value::_creatorMap(void)::v + 8 * v2);
  if (v33)
  {
    *(void *)uint64_t v11 = *v33;
LABEL_75:
    *uint64_t v33 = v11;
    goto LABEL_76;
  }
  *(void *)uint64_t v11 = qword_268C3F9C0;
  qword_268C3F9C0 = (uint64_t)v11;
  *(void *)(v32 + 8 * v2) = &qword_268C3F9C0;
  if (*(void *)v11)
  {
    unint64_t v34 = *(void *)(*(void *)v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v34 >= v7) {
        v34 %= v7;
      }
    }
    else
    {
      v34 &= v7 - 1;
    }
    uint64_t v33 = (void *)(RIO_MTLX::Value::_creatorMap(void)::v + 8 * v34);
    goto LABEL_75;
  }
LABEL_76:
  ++qword_268C3F9C8;
  return v11;
}

void sub_23F6D50C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<BOOL>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<BOOL>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)qword_268C40A80))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<BOOL>::TYPE();
    unint64_t v3 = (long long *)qword_268C40A80;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40A80, &v3)+ 5) = RIO_MTLX::TypedValue<BOOL>::createFromString;
  }
  return a1;
}

void *RIO_MTLX::TypedValue<BOOL>::createFromString@<X0>(RIO_MTLX *a1@<X0>, void *a2@<X8>)
{
  char v5 = 0;
  char v3 = v5;
  double result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F345BA8;
  result[3] = &unk_26F345BF8;
  *((unsigned char *)result + 32) = v3;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<BOOL>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypedValue<BOOL>::~TypedValue()
{
}

void *RIO_MTLX::TypedValue<BOOL>::copy@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F345BA8;
  result[3] = &unk_26F345BF8;
  *((unsigned char *)result + 32) = *(unsigned char *)(a1 + 8);
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<float>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<float>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)RIO_MTLX::TypedValue<float>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<float>::TYPE();
    char v3 = (long long *)RIO_MTLX::TypedValue<float>::TYPE(void)::v;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::TypedValue<float>::TYPE(void)::v, &v3)+ 5) = RIO_MTLX::TypedValue<float>::createFromString;
  }
  return a1;
}

void *RIO_MTLX::TypedValue<float>::createFromString@<X0>(const std::string *a1@<X0>, void *a2@<X8>)
{
  int v5 = 0;
  int v3 = v5;
  double result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F345C30;
  result[3] = &unk_26F345C80;
  *((_DWORD *)result + 8) = v3;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345C30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypedValue<float>::~TypedValue()
{
}

float RIO_MTLX::TypedValue<float>::copy@<S0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (float *)operator new(0x28uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unint64_t v4 = &unk_26F345C30;
  *((void *)v4 + 3) = &unk_26F345C80;
  float result = *(float *)(a1 + 8);
  unsigned char v4[8] = result;
  *a2 = v4 + 6;
  a2[1] = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Color3>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE();
    int v3 = (long long *)&RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Color3>::createFromString;
  }
  return a1;
}

void *RIO_MTLX::TypedValue<RIO_MTLX::Color3>::createFromString@<X0>(RIO_MTLX *a1@<X0>, void *a2@<X8>)
{
  int v11 = 0;
  uint64_t v10 = 0;
  unint64_t v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v12);
  uint64_t v5 = 0;
  unint64_t v6 = &v10;
  do
  {
    v5 += 24;
    unint64_t v6 = (uint64_t *)((char *)v6 + 4);
  }
  while (v5 != 72);
  std::string::size_type v13 = (void **)v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
  int v7 = v11;
  uint64_t v8 = v10;
  float result = operator new(0x30uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F345CB8;
  result[3] = &unk_26F345D08;
  result[4] = v8;
  *((_DWORD *)result + 10) = v7;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void sub_23F6D5694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Color3>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Color3>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Color3>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypedValue<RIO_MTLX::Color3>::~TypedValue()
{
}

void *RIO_MTLX::TypedValue<RIO_MTLX::Color3>::copy@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  float result = operator new(0x30uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F345CB8;
  uint64_t v5 = *(void *)(a1 + 8);
  result[3] = &unk_26F345D08;
  result[4] = v5;
  *((_DWORD *)result + 10) = *(_DWORD *)(a1 + 16);
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Color4>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE();
    int v3 = (long long *)&RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Color4>::createFromString;
  }
  return a1;
}

__n128 RIO_MTLX::TypedValue<RIO_MTLX::Color4>::createFromString@<Q0>(RIO_MTLX *a1@<X0>, void *a2@<X8>)
{
  __n128 v10 = 0uLL;
  unint64_t v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v11);
  uint64_t v5 = 0;
  unint64_t v6 = &v10;
  do
  {
    v5 += 24;
    unint64_t v6 = (__n128 *)((char *)v6 + 4);
  }
  while (v5 != 96);
  unint64_t v12 = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  __n128 v9 = v10;
  int v7 = (__n128 *)operator new(0x30uLL);
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  v7->n128_u64[0] = (unint64_t)&unk_26F345D40;
  v7[1].n128_u64[1] = (unint64_t)&unk_26F345D90;
  __n128 result = v9;
  v7[2] = v9;
  *a2 = (char *)v7 + 24;
  a2[1] = v7;
  return result;
}

void sub_23F6D5930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Color4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Color4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345D40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Color4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypedValue<RIO_MTLX::Color4>::~TypedValue()
{
}

__n128 RIO_MTLX::TypedValue<RIO_MTLX::Color4>::copy@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (__n128 *)operator new(0x30uLL);
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  v4->n128_u64[0] = (unint64_t)&unk_26F345D40;
  v4[1].n128_u64[1] = (unint64_t)&unk_26F345D90;
  __n128 result = *(__n128 *)(a1 + 8);
  v4[2] = result;
  *a2 = (char *)v4 + 24;
  a2[1] = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Vector2>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE();
    int v3 = (long long *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::createFromString;
  }
  return a1;
}

void *RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::createFromString@<X0>(RIO_MTLX *a1@<X0>, void *a2@<X8>)
{
  uint64_t v10 = 0;
  unint64_t v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v11);
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    char v7 = v6;
    char v6 = 0;
    uint64_t v5 = 1;
  }
  while ((v7 & 1) != 0);
  unint64_t v12 = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v8 = v10;
  __n128 result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F345DC8;
  result[3] = &unk_26F345E18;
  result[4] = v8;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void sub_23F6D5BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::~TypedValue()
{
}

void *RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::copy@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F345DC8;
  uint64_t v5 = *(void *)(a1 + 8);
  result[3] = &unk_26F345E18;
  result[4] = v5;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Vector3>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE();
    int v3 = (long long *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::createFromString;
  }
  return a1;
}

float *RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::createFromString@<X0>(RIO_MTLX *a1@<X0>, void *a2@<X8>)
{
  float v3 = RIO_MTLX::fromValueString<RIO_MTLX::Vector3>(a1);
  int v5 = v4;
  int v7 = v6;
  __n128 result = (float *)operator new(0x30uLL);
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  *(void *)__n128 result = &unk_26F345E50;
  *((void *)result + 3) = &unk_26F345EA0;
  result[8] = v3;
  *((_DWORD *)result + 9) = v5;
  *((_DWORD *)result + 10) = v7;
  *a2 = result + 6;
  a2[1] = result;
  return result;
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector3>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector3>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345E50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector3>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::~TypedValue()
{
}

void *RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::copy@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x30uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F345E50;
  uint64_t v5 = *(void *)(a1 + 8);
  result[3] = &unk_26F345EA0;
  result[4] = v5;
  *((_DWORD *)result + 10) = *(_DWORD *)(a1 + 16);
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Vector4>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE();
    float v3 = (long long *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::createFromString;
  }
  return a1;
}

__n128 RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::createFromString@<Q0>(RIO_MTLX *a1@<X0>, void *a2@<X8>)
{
  __n128 v10 = 0uLL;
  int v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v11);
  uint64_t v5 = 0;
  int v6 = &v10;
  do
  {
    v5 += 24;
    int v6 = (__n128 *)((char *)v6 + 4);
  }
  while (v5 != 96);
  unint64_t v12 = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  __n128 v9 = v10;
  int v7 = (__n128 *)operator new(0x30uLL);
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  v7->n128_u64[0] = (unint64_t)&unk_26F345ED8;
  v7[1].n128_u64[1] = (unint64_t)&unk_26F345F28;
  __n128 result = v9;
  v7[2] = v9;
  *a2 = (char *)v7 + 24;
  a2[1] = v7;
  return result;
}

void sub_23F6D6098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::~TypedValue()
{
}

__n128 RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::copy@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = (__n128 *)operator new(0x30uLL);
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  v4->n128_u64[0] = (unint64_t)&unk_26F345ED8;
  v4[1].n128_u64[1] = (unint64_t)&unk_26F345F28;
  __n128 result = *(__n128 *)(a1 + 8);
  v4[2] = result;
  *a2 = (char *)v4 + 24;
  a2[1] = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Matrix33>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE();
    float v3 = (long long *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::createFromString;
  }
  return a1;
}

double RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::createFromString@<D0>(RIO_MTLX *a1@<X0>, void *a2@<X8>)
{
  int v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  int v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v16);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  int v7 = &v13;
  do
  {
    uint64_t v8 = 0;
    uint64_t v9 = v5;
    do
    {
      v8 += 4;
      v9 += 24;
    }
    while (v8 != 12);
    ++v6;
    int v7 = (long long *)((char *)v7 + 12);
    v5 += 72;
  }
  while (v6 != 3);
  BOOL v17 = (void **)v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  __n128 v10 = operator new(0x48uLL);
  v10[1] = 0;
  void v10[2] = 0;
  void *v10 = &unk_26F345F60;
  uint64_t v10[3] = &unk_26F345FB0;
  double result = *(double *)&v13;
  long long v12 = v14;
  *((_OWORD *)v10 + 2) = v13;
  *((_OWORD *)v10 + 3) = v12;
  *((_DWORD *)v10 + 16) = v15;
  *a2 = v10 + 3;
  a2[1] = v10;
  return result;
}

void sub_23F6D6360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v15 - 56) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 56));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345F60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::~TypedValue()
{
}

__n128 RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::copy@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = (__n128 *)operator new(0x48uLL);
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  v4->n128_u64[0] = (unint64_t)&unk_26F345F60;
  v4[1].n128_u64[1] = (unint64_t)&unk_26F345FB0;
  __n128 result = *(__n128 *)(a1 + 8);
  __n128 v6 = *(__n128 *)(a1 + 24);
  v4[2] = result;
  double v4[3] = v6;
  v4[4].n128_u32[0] = *(_DWORD *)(a1 + 40);
  *a2 = (char *)v4 + 24;
  a2[1] = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Matrix44>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE();
    float v3 = (long long *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::createFromString;
  }
  return a1;
}

double RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::createFromString@<D0>(RIO_MTLX *a1@<X0>, void *a2@<X8>)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  int v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v18);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  int v7 = &v14;
  do
  {
    uint64_t v8 = 0;
    uint64_t v9 = v5;
    do
    {
      v8 += 4;
      v9 += 24;
    }
    while (v8 != 16);
    ++v6;
    ++v7;
    v5 += 96;
  }
  while (v6 != 4);
  unint64_t v19 = (void **)v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  __n128 v10 = operator new(0x60uLL);
  v10[1] = 0;
  void v10[2] = 0;
  void *v10 = &unk_26F345FE8;
  uint64_t v10[3] = &unk_26F346038;
  long long v11 = v15;
  *((_OWORD *)v10 + 2) = v14;
  *((_OWORD *)v10 + 3) = v11;
  double result = *(double *)&v16;
  long long v13 = v17;
  *((_OWORD *)v10 + 4) = v16;
  *((_OWORD *)v10 + 5) = v13;
  *a2 = v10 + 3;
  a2[1] = v10;
  return result;
}

void sub_23F6D6634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v17 - 56) = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345FE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F345FE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::~TypedValue()
{
}

__n128 RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::copy@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = (__n128 *)operator new(0x60uLL);
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  v4->n128_u64[0] = (unint64_t)&unk_26F345FE8;
  v4[1].n128_u64[1] = (unint64_t)&unk_26F346038;
  __n128 v5 = *(__n128 *)(a1 + 24);
  v4[2] = *(__n128 *)(a1 + 8);
  double v4[3] = v5;
  __n128 result = *(__n128 *)(a1 + 40);
  __n128 v7 = *(__n128 *)(a1 + 56);
  v4[4] = result;
  void v4[5] = v7;
  *a2 = (char *)v4 + 24;
  a2[1] = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<std::string>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<std::string>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)RIO_MTLX::TypedValue<std::string>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<std::string>::TYPE();
    float v3 = (long long *)RIO_MTLX::TypedValue<std::string>::TYPE(void)::v;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::TypedValue<std::string>::TYPE(void)::v, &v3)+ 5) = RIO_MTLX::TypedValue<std::string>::createFromString;
  }
  return a1;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<std::vector<int>>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<std::vector<int>>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)qword_268C40A98))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<std::vector<int>>::TYPE();
    float v3 = (long long *)qword_268C40A98;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40A98, &v3)+ 5) = RIO_MTLX::TypedValue<std::vector<int>>::createFromString;
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<int>>::createFromString(RIO_MTLX *a1@<X0>, _OWORD *a2@<X8>)
{
  std::string __p = 0;
  unint64_t v18 = 0;
  unint64_t v19 = 0;
  int v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)&v20);
  uint64_t v6 = (const std::string *)*((void *)&v20 + 1);
  for (uint64_t i = (const std::string *)v20; i != v6; ++i)
  {
    LODWORD(v21) = 0;
    __n128 v7 = v18;
    if (v18 >= v19)
    {
      uint64_t v9 = __p;
      uint64_t v10 = (v18 - __p) >> 2;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v19 - __p;
      if ((v19 - __p) >> 1 > v11) {
        unint64_t v11 = v12 >> 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v19, v13);
        uint64_t v9 = __p;
        __n128 v7 = v18;
      }
      else
      {
        long long v14 = 0;
      }
      long long v15 = &v14[4 * v10];
      *(_DWORD *)long long v15 = v21;
      uint64_t v8 = v15 + 4;
      while (v7 != v9)
      {
        int v16 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v16;
        v15 -= 4;
      }
      std::string __p = v15;
      unint64_t v19 = &v14[4 * v13];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v18 = v21;
      uint64_t v8 = v18 + 4;
    }
    unint64_t v18 = v8;
  }
  unint64_t v21 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<int>>,std::allocator<RIO_MTLX::TypedValue<std::vector<int>>>,std::vector<int> const&,void>(&v20, __p, (uint64_t)v18);
  *a2 = v20;
  if (__p) {
    operator delete(__p);
  }
}

void sub_23F6D69E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<int>>,std::allocator<RIO_MTLX::TypedValue<std::vector<int>>>,std::vector<int> const&,void>(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x38uLL);
  v6[1] = 0;
  double v6[2] = 0;
  void *v6 = &unk_26F346070;
  void v6[3] = &unk_26F3460C0;
  void v6[5] = 0;
  v6[6] = 0;
  void v6[4] = 0;
  __n128 result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6 + 4, a2, a3, (a3 - (uint64_t)a2) >> 2);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_23F6D6AC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346070;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<int>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *RIO_MTLX::TypedValue<std::vector<int>>::~TypedValue(void *a1)
{
  *a1 = &unk_26F3460C0;
  unint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<int>>::~TypedValue(void *a1)
{
  *a1 = &unk_26F3460C0;
  unint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2455D2BD0);
}

double RIO_MTLX::TypedValue<std::vector<int>>::copy@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<int>>,std::allocator<RIO_MTLX::TypedValue<std::vector<int>>>,std::vector<int> const&,void>(&v4, *(const void **)(a1 + 8), *(void *)(a1 + 16));
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<std::vector<BOOL>>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)qword_268C40AB0))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE();
    float v3 = (long long *)qword_268C40AB0;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40AB0, &v3)+ 5) = RIO_MTLX::TypedValue<std::vector<BOOL>>::createFromString;
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<BOOL>>::createFromString(RIO_MTLX *a1@<X0>, _OWORD *a2@<X8>)
{
  std::string __p = 0;
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  long long v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)&v16);
  uint64_t v6 = (RIO_MTLX *)*((void *)&v16 + 1);
  for (uint64_t i = (RIO_MTLX *)v16; i != v6; uint64_t i = (RIO_MTLX *)((char *)i + 24))
  {
    LOBYTE(v17) = 0;
    unint64_t v7 = v14;
    if (v14 == v15 << 6)
    {
      if ((uint64_t)(v14 + 1) < 0) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = v15 << 7;
      if (v15 << 7 <= (v14 & 0xFFFFFFFFFFFFFFC0) + 64) {
        unint64_t v8 = (v14 & 0xFFFFFFFFFFFFFFC0) + 64;
      }
      if (v14 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve((char **)&__p, v9);
      unint64_t v7 = v14;
    }
    unint64_t v14 = v7 + 1;
    unint64_t v10 = v7 >> 6;
    uint64_t v11 = 1 << v7;
    if ((_BYTE)v17) {
      uint64_t v12 = *((void *)__p + v10) | v11;
    }
    else {
      uint64_t v12 = *((void *)__p + v10) & ~v11;
    }
    *((void *)__p + v10) = v12;
  }
  uint64_t v17 = (void **)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<BOOL>>,std::allocator<RIO_MTLX::TypedValue<std::vector<BOOL>>>,std::vector<BOOL> const&,void>(&v16, (uint64_t)&__p);
  *a2 = v16;
  if (__p) {
    operator delete(__p);
  }
}

void sub_23F6D6E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<BOOL>>,std::allocator<RIO_MTLX::TypedValue<std::vector<BOOL>>>,std::vector<BOOL> const&,void>(void *a1, uint64_t a2)
{
  double result = operator new(0x38uLL);
  __n128 v5 = result;
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F3460F8;
  uint64_t v6 = result + 3;
  result[3] = &unk_26F346148;
  result[4] = 0;
  unint64_t v7 = result + 4;
  result[5] = 0;
  result[6] = 0;
  uint64_t v8 = *(void *)(a2 + 8);
  if (!v8) {
    goto LABEL_23;
  }
  double result = std::vector<BOOL>::__vallocate[abi:ne180100](result + 4, v8);
  unint64_t v9 = *(void **)a2;
  unint64_t v10 = *(void *)(a2 + 8);
  unint64_t v11 = v5[5];
  unint64_t v12 = v11 + v10;
  void v5[5] = v11 + v10;
  if (v11)
  {
    unint64_t v13 = v12 - 1;
    if (((v12 - 1) ^ (v11 - 1)) < 0x40) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v13 = v12 - 1;
  }
  unint64_t v14 = v13 >> 6;
  if (v12 >= 0x41) {
    unint64_t v15 = v14;
  }
  else {
    unint64_t v15 = 0;
  }
  *(void *)(*v7 + 8 * v15) = 0;
LABEL_10:
  int v16 = v10 & 0x3F;
  if (v10 > 0x3F || (v10 & 0x3F) != 0)
  {
    int v17 = 0;
    int v18 = 0;
    unint64_t v19 = &v9[v10 >> 6];
    int v20 = v11 & 0x3F;
    unint64_t v21 = (uint64_t *)(*v7 + 8 * (v11 >> 6));
    do
    {
      uint64_t v22 = 1 << v20;
      if ((*v9 >> v18)) {
        uint64_t v23 = *v21 | v22;
      }
      else {
        uint64_t v23 = *v21 & ~v22;
      }
      uint64_t *v21 = v23;
      ++v18;
      v9 += v17 == 63;
      if (v17 == 63) {
        int v18 = 0;
      }
      v21 += v20 == 63;
      if (v20 == 63) {
        int v20 = 0;
      }
      else {
        ++v20;
      }
      int v17 = v18;
    }
    while (v9 != v19 || v16 != v18);
  }
LABEL_23:
  *a1 = v6;
  a1[1] = v5;
  return result;
}

void sub_23F6D6FD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<BOOL>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3460F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<BOOL>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3460F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<BOOL>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *RIO_MTLX::TypedValue<std::vector<BOOL>>::~TypedValue(void *a1)
{
  *a1 = &unk_26F346148;
  unint64_t v2 = (void *)a1[1];
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<BOOL>>::~TypedValue(void *a1)
{
  *a1 = &unk_26F346148;
  uint64_t v1 = (void *)a1[1];
  if (v1) {
    operator delete(v1);
  }

  JUMPOUT(0x2455D2BD0);
}

double RIO_MTLX::TypedValue<std::vector<BOOL>>::copy@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<BOOL>>,std::allocator<RIO_MTLX::TypedValue<std::vector<BOOL>>>,std::vector<BOOL> const&,void>(&v4, a1 + 8);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<std::vector<float>>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<std::vector<float>>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)qword_268C40AC8))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<std::vector<float>>::TYPE();
    float v3 = (long long *)qword_268C40AC8;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40AC8, &v3)+ 5) = RIO_MTLX::TypedValue<std::vector<float>>::createFromString;
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<float>>::createFromString(RIO_MTLX *a1@<X0>, _OWORD *a2@<X8>)
{
  std::string __p = 0;
  int v18 = 0;
  unint64_t v19 = 0;
  long long v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)&v20);
  uint64_t v6 = (const std::string *)*((void *)&v20 + 1);
  for (uint64_t i = (const std::string *)v20; i != v6; ++i)
  {
    LODWORD(v21) = 0;
    unint64_t v7 = v18;
    if (v18 >= v19)
    {
      unint64_t v9 = __p;
      uint64_t v10 = (v18 - __p) >> 2;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62) {
        std::vector<char const*>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v19 - __p;
      if ((v19 - __p) >> 1 > v11) {
        unint64_t v11 = v12 >> 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v19, v13);
        unint64_t v9 = __p;
        unint64_t v7 = v18;
      }
      else
      {
        unint64_t v14 = 0;
      }
      unint64_t v15 = &v14[4 * v10];
      *(_DWORD *)unint64_t v15 = v21;
      uint64_t v8 = v15 + 4;
      while (v7 != v9)
      {
        int v16 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v16;
        v15 -= 4;
      }
      std::string __p = v15;
      unint64_t v19 = &v14[4 * v13];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(_DWORD *)int v18 = v21;
      uint64_t v8 = v18 + 4;
    }
    int v18 = v8;
  }
  unint64_t v21 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<float>>,std::allocator<RIO_MTLX::TypedValue<std::vector<float>>>,std::vector<float> const&,void>(&v20, __p, (uint64_t)v18);
  *a2 = v20;
  if (__p) {
    operator delete(__p);
  }
}

void sub_23F6D7364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<float>>,std::allocator<RIO_MTLX::TypedValue<std::vector<float>>>,std::vector<float> const&,void>(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x38uLL);
  v6[1] = 0;
  double v6[2] = 0;
  void *v6 = &unk_26F346180;
  void v6[3] = &unk_26F3461D0;
  void v6[5] = 0;
  v6[6] = 0;
  void v6[4] = 0;
  double result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6 + 4, a2, a3, (a3 - (uint64_t)a2) >> 2);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_23F6D7440(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346180;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<float>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *RIO_MTLX::TypedValue<std::vector<float>>::~TypedValue(void *a1)
{
  *a1 = &unk_26F3461D0;
  unint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<float>>::~TypedValue(void *a1)
{
  *a1 = &unk_26F3461D0;
  unint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2455D2BD0);
}

double RIO_MTLX::TypedValue<std::vector<float>>::copy@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<float>>,std::allocator<RIO_MTLX::TypedValue<std::vector<float>>>,std::vector<float> const&,void>(&v4, *(const void **)(a1 + 8), *(void *)(a1 + 16));
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<std::vector<std::string>>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE();
    float v3 = (long long *)RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v, &v3)+ 5) = RIO_MTLX::TypedValue<std::vector<std::string>>::createFromString;
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<std::string>>::createFromString(RIO_MTLX *a1@<X0>, _OWORD *a2@<X8>)
{
  RIO_MTLX::fromValueString<std::vector<std::string>>(a1, (uint64_t *)v3);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<std::string>>,std::allocator<RIO_MTLX::TypedValue<std::vector<std::string>>>,std::vector<std::string> const&,void>(v4, v3[0], v3[1]);
  *a2 = v4[0];
  *(void *)&v4[0] = v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
}

void sub_23F6D76B4(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<std::string>>,std::allocator<RIO_MTLX::TypedValue<std::vector<std::string>>>,std::vector<std::string> const&,void>(void *a1, long long *a2, long long *a3)
{
  uint64_t v6 = (char *)operator new(0x38uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26F346208;
  *((void *)v6 + 3) = &unk_26F346258;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 4) = 0;
  double result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v6 + 32), a2, a3, 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3));
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void sub_23F6D777C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346208;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<std::string>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t RIO_MTLX::TypedValue<std::vector<std::string>>::~TypedValue(uint64_t a1)
{
  *(void *)a1 = &unk_26F346258;
  float v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26F346258;
  float v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x2455D2BD0](a1, 0xA1C4030951706);
}

double RIO_MTLX::TypedValue<std::vector<std::string>>::copy@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<std::string>>,std::allocator<RIO_MTLX::TypedValue<std::vector<std::string>>>,std::vector<std::string> const&,void>(&v4, *(long long **)(a1 + 8), *(long long **)(a1 + 16));
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<long>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<long>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)qword_268C40AE0))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<long>::TYPE();
    float v3 = (long long *)qword_268C40AE0;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40AE0, &v3)+ 5) = RIO_MTLX::TypedValue<long>::createFromString;
  }
  return a1;
}

void *RIO_MTLX::TypedValue<long>::createFromString@<X0>(const std::string *a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v7, a1, 24);
  MEMORY[0x2455D28A0](v7, &v6);
  v7[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v7[2] = v3;
  uint64_t v7[3] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2455D2B30](&v9);
  uint64_t v4 = v6;
  double result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F346290;
  result[3] = &unk_26F3462E0;
  result[4] = v4;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void sub_23F6D7B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(v29 + *(void *)(*MEMORY[0x263F8C2B8] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  if (a26 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2455D2B30](&a29);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346290;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypedValue<long>::~TypedValue()
{
}

void *RIO_MTLX::TypedValue<long>::copy@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F346290;
  uint64_t v5 = *(void *)(a1 + 8);
  result[3] = &unk_26F3462E0;
  result[4] = v5;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<double>::ValueRegistry(RIO_MTLX::Value *a1)
{
  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<double>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::find<std::string>((unsigned __int8 *)qword_268C40AF8))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<double>::TYPE();
    uint64_t v3 = (long long *)qword_268C40AF8;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((unsigned __int8 *)qword_268C40AF8, &v3)+ 5) = RIO_MTLX::TypedValue<double>::createFromString;
  }
  return a1;
}

void *RIO_MTLX::TypedValue<double>::createFromString@<X0>(const std::string *a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v7, a1, 24);
  MEMORY[0x2455D2870](v7, &v6);
  v7[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v7[2] = v3;
  uint64_t v7[3] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2455D2B30](&v9);
  uint64_t v4 = v6;
  double result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26F346318;
  result[3] = &unk_26F346368;
  result[4] = v4;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void sub_23F6D7FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(v29 + *(void *)(*MEMORY[0x263F8C2B8] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  if (a26 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2455D2B30](&a29);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RIO_MTLX::TypedValue<double>::~TypedValue()
{
}

double RIO_MTLX::TypedValue<double>::copy@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (double *)operator new(0x28uLL);
  v4[1] = 0.0;
  _OWORD v4[2] = 0.0;
  *(void *)uint64_t v4 = &unk_26F346318;
  *((void *)v4 + 3) = &unk_26F346368;
  double result = *(double *)(a1 + 8);
  v4[4] = result;
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

uint64_t RIOPxrSdfAttributeSpecGetTypeID()
{
  if (RIOPxrSdfAttributeSpecGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfAttributeSpecGetTypeID::onceToken, &__block_literal_global_29);
  }
  return RIOPxrSdfAttributeSpecGetTypeID::typeID;
}

void __RIOPxrSdfAttributeSpecGetTypeID_block_invoke()
{
  if (!RIOPxrSdfAttributeSpecGetTypeID::typeID) {
    RIOPxrSdfAttributeSpecGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrSdfAttributeSpecHasColorSpace(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA4750](result + 16);
  }
  return result;
}

uint64_t RIOPxrSdfAttributeSpecCopyLayer(uint64_t a1)
{
  uint64_t v1 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(&v5, v1);
  uint64_t v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(&v5);
  uint64_t v3 = v6;
  if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return v2;
}

void sub_23F6D8320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfSpec *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>::operator->(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  uint64_t v1 = a1;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    uint64_t v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>::o"
            "perator->() const [T = pxrInternal__aapl__pxrReserved__::SdfAttributeSpec]";
    char v8 = 0;
    int v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__16SdfAttributeSpecE" & 0x7FFFFFFFFFFFFFFFLL), v2);
    if (v6 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, "Dereferenced an invalid %s", (const char *)v4);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v1;
}

void sub_23F6D8424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfAttributeSpecIsBlocked(uint64_t a1)
{
  v3[2] = *MEMORY[0x263EF8340];
  if (!a1) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDefaultValue(v3, (pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)(a1 + 16));
  uint64_t v1 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_23F6D84C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void _RIOPxrSdfAttributeSpecCFFinalize(const void *a1)
{
}

uint64_t _RIOPxrSdfAttributeSpecCFEqual(const void *a1, const void *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfSpec::operator==();
}

unint64_t _RIOPxrSdfAttributeSpecCFHash(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * a1[2]);
}

CFStringRef _RIOPxrSdfAttributeSpecCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfAttributeSpec %p>", a1);
}

CFStringRef _RIOPxrSdfAttributeSpecCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfAttributeSpec %p>", a1);
}

realityio::ShadowComponentBuilder *realityio::ShadowComponentBuilder::ShadowComponentBuilder(realityio::ShadowComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[23] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "ShadowComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kShadowComponentBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40B20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40B20))
  {
    operator new();
  }
  uint64_t v5 = _MergedGlobals_45;
  char v6 = *(std::__shared_weak_count **)algn_268C40B18;
  if (*(void *)algn_268C40B18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C40B18 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F346498;
  void v12[3] = v12;
  v11[0] = &unk_26F346518;
  void v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F346420;
  return this;
}

void sub_23F6D8C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  MEMORY[0x2455D2BD0](v63, 0x10A1C40F82F910ELL);
  *(void *)(v64 - 184) = &a46;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v64 - 184));
  MEMORY[0x2455D2BD0](v62, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v61, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40B20);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::ShadowComponentBuilder::run(realityio::ShadowComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v15 = a2;
  uint64_t v3 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v11, v4, v3);
  BOOL v10 = 0;
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::ShadowBuilderTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShadowBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShadowBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<BOOL>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11, v5, (uint64_t)&v16);
  if ((_BYTE)v16)
  {
    BOOL v6 = v17 != 0;
  }
  else
  {
    if (v19 < 0) {
      operator delete(__p);
    }
    BOOL v6 = 1;
  }
  BOOL v10 = v6;
  uint64_t v7 = *((void *)v15 + 6);
  char v8 = operator new(0x28uLL);
  *char v8 = &unk_26F346598;
  v8[1] = &v15;
  void v8[2] = &v11;
  void v8[3] = &v10;
  v8[4] = this;
  std::string __p = v8;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, &v16);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v16);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  uint64_t result = v12;
  if (v12) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  }
  return result;
}

void sub_23F6D9190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

void *realityio::ShadowComponentBuilder::clear(realityio::ShadowComponentBuilder *this, realityio::Inputs *a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a2 + 6);
  uint64_t v4 = a2;
  v5[0] = &unk_26F346698;
  v5[1] = &v4;
  void v5[3] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v5);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_23F6D9284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::ShadowComponentBuilder::~ShadowComponentBuilder(realityio::ShadowComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShadowBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShadowBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void sub_23F6D9350(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40FC86440BLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F346498;
  return result;
}

void std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F346498;
}

void std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  unint64_t v4 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x48uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330630;
  std::string::basic_string[abi:ne180100]<0>(&__p, "none");
  realityio::CurrentPrimInputDescriptor::CurrentPrimInputDescriptor(&v5[1].__vftable, (uint64_t)&__p, (uint64_t *)(v4 + 88), 0);
  if (v15 < 0) {
    operator delete(__p);
  }
  std::string __p = &v5[1];
  uint64_t v14 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::InputsDescriptor::addInputDescriptor(v3, &__p);
  BOOL v6 = (realityio::EntityBuilder *)v14;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v7 = realityio::EntityBuilder::kInputName(v6);
  unint64_t v8 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v10 = 1;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v7, (uint64_t *)(v8 + 64), &v10, &v11);
  int v9 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_23F6D95A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F346518;
  return result;
}

void std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F346518;
}

char *std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F346598;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F346598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = **(void **)(a1 + 8);
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v3, v4, (uint64_t)v13);
  if (v13[0])
  {
    uint64_t v5 = v14;
    uint64_t v12 = v14;
    if (v14)
    {
      RERetain();
      if (**(unsigned char **)(a1 + 24))
      {
        REShadowMapComponentGetComponentType();
        uint64_t v6 = *(void *)(a1 + 16);
        *(void *)&long long buf = &unk_26F346608;
        *((void *)&buf + 1) = v2;
        uint64_t v16 = v6;
        p_long long buf = &buf;
        uint64_t v7 = REEntityGetOrAddComponentByClass();
        std::function<void ()(REComponent *)>::operator()((uint64_t)&buf, v7);
        RENetworkMarkComponentDirty();
        std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](&buf);
      }
      else
      {
        REShadowMapComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  unint64_t v8 = *(id *)(realityio::logObjects(v5) + 24);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), &v11);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = Text;
    _os_log_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_DEFAULT, "Stopping operation to set shadow component because entity no longer exists for prim \"%s\"", (uint8_t *)&buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  }

LABEL_9:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v12);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F6D99F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio22ShadowComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio22ShadowComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F346608;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio22ShadowComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F346608;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

atomic_uint **_ZNSt3__110__function6__funcIZZN9realityio22ShadowComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  unint64_t v3 = atomic_load(&realityio::tokens::ShadowBuilderTokens);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShadowBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShadowBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v4 = *(void *)(v3 + 8);
  unint64_t v13 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  realityio::getAttributeValue<float>(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13, (uint64_t)&v14);
  if ((_BYTE)v14)
  {
    float v5 = *(float *)&v15;
  }
  else
  {
    float v5 = -1.0;
    if (v17 < 0) {
      operator delete(__p);
    }
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v6 = atomic_load(&realityio::tokens::ShadowBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShadowBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShadowBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v7 = *(void *)(v6 + 16);
  unint64_t v13 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  realityio::getAttributeValue<float>(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13, (uint64_t)&v14);
  if ((_BYTE)v14)
  {
    float v8 = *(float *)&v15;
  }
  else
  {
    float v8 = -1.0;
    if (v17 < 0) {
      operator delete(__p);
    }
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v14, *(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16));
  int v9 = v15;
  if (v15)
  {
    if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&v15)
                  + 14))
      int v9 = v14;
    else {
      int v9 = 0;
    }
  }
  unint64_t v13 = (unint64_t)v9;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v13);
  uint64_t v10 = (uint64_t)v15;
  if (v15 && atomic_fetch_add_explicit(v15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>((uint64_t *)&v14, (uint64_t *)&v13);
  pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
  uint64_t v11 = (uint64_t)v15;
  if (v15 && atomic_fetch_add_explicit(v15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  if (v5 > -0.5) {
    REShadowMapComponentSetDepthBias();
  }
  if (v8 > -0.5) {
    REShadowMapComponentSetDistance();
  }
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&v13);
}

void sub_23F6D9DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio22ShadowComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio22ShadowComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio22ShadowComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio22ShadowComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void std::__function::__func<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F346698;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F346698;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::EntityBuilder *a1)
{
  uint64_t v1 = **((void **)a1 + 1);
  uint64_t v2 = realityio::EntityBuilder::kInputName(a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v1, v2, (uint64_t)v5);
  if (v5[0])
  {
    uint64_t v4 = v6;
    if (v6)
    {
      RERetain();
      REShadowMapComponentGetComponentType();
      REEntityRemoveComponentByClass();
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v4);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v5);
}

void sub_23F6D9FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t SdfShouldNotCopyChildren()
{
  return pxrInternal__aapl__pxrReserved__::TfToken::operator==() ^ 1;
}

uint64_t RIOPxrUsdUtilsSdfCopySpec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = 0;
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v10 = (uint64_t *)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v34, (uint64_t *)(a1 + 16));
    uint64_t v11 = (uint64_t *)(a3 + 16);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(v36, v11);
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v29 = &v31;
    char v30 = 0;
    uint64_t v12 = (long long *)operator new(0x20uLL);
    uint64_t v13 = 0;
    unint64_t v31 = v12;
    uint64_t v32 = v12;
    uint64_t v33 = v12 + 2;
    unint64_t v25 = v12;
    v37[0] = (void **)&v33;
    v37[1] = (void **)&v25;
    v37[2] = (void **)&v27;
    do
    {
      long long v14 = *(_OWORD *)((char *)&v34 + v13 * 16);
      v12[v13] = v14;
      if (*((void *)&v14 + 1)) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v14 + 1) + 8), 1u, memory_order_relaxed);
      }
      ++v13;
    }
    while (v13 != 2);
    char v15 = v12 + 2;
    unint64_t v27 = v12 + 2;
    LOBYTE(v38) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v37);
    uint64_t v32 = v15;
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      char v17 = *(atomic_uint **)((char *)&v34 + i);
      if (v17 && atomic_fetch_add_explicit(v17 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v17 + 8))(v17);
      }
    }
    realityio::MultipleLayerMutex::MultipleLayerMutex<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>>((uint64_t *)&v29, v31, v32);
    realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)&v29);
    uint64_t v38 = 0;
    uint64_t v18 = a2 + 16;
    uint64_t v19 = a4 + 16;
    if (a5)
    {
      unint64_t v34 = (uint64_t (*)())MEMORY[0x263F90588];
      uint64_t v35 = v18;
      v36[0] = v19;
      std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator=<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,void>(v37, (uint64_t)&v34);
    }
    else
    {
      unint64_t v34 = SdfShouldNotCopyChildren;
      uint64_t v35 = v18;
      v36[0] = v19;
      std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator=<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,void>(v37, (uint64_t)&v34);
    }
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v27, v10);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v25, v11);
    uint64_t v20 = operator new(0x20uLL);
    void *v20 = &unk_26F3467B0;
    v20[1] = MEMORY[0x263F90568];
    v20[2] = v18;
    void v20[3] = v19;
    v36[1] = (uint64_t)v20;
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfCopySpec();
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__value_func[abi:ne180100](&v34);
    uint64_t v21 = v26;
    if (v26 && atomic_fetch_add_explicit((atomic_uint *volatile)(v26 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t v22 = v28;
    if (v28 && atomic_fetch_add_explicit((atomic_uint *volatile)(v28 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)&v29);
    uint64_t v23 = (void ***)std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__value_func[abi:ne180100](v37);
    v37[0] = (void **)&v29;
    std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](v23);
    v37[0] = (void **)&v31;
    std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](v37);
  }
  return v5;
}

void sub_23F6DA3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__value_func[abi:ne180100]((void *)(v17 - 104));
  *(void *)(v17 - 104) = &a14;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 104));
  *(void *)(v17 - 104) = &a17;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 104));
  _Unwind_Resume(a1);
}

void sub_23F6DA4A4()
{
}

void sub_23F6DA4AC()
{
}

void sub_23F6DA4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&a14);
  uint64_t v20 = 24;
  while (1)
  {
    uint64_t v21 = *(atomic_uint **)(&a20 + v20);
    if (v21 && atomic_fetch_add_explicit(v21 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v21 + 8))(v21);
    }
    v20 -= 16;
    if (v20 == -8) {
      JUMPOUT(0x23F6DA49CLL);
    }
  }
}

void sub_23F6DA518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,atomic_uint *a21)
{
  if (a21)
  {
    if (atomic_fetch_add_explicit(a21 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a21 + 8))(a21);
    }
  }
  JUMPOUT(0x23F6DA49CLL);
}

void sub_23F6DA560()
{
}

void *std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator=<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,void>(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v4 = &unk_26F346718;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((void *)v4 + 3) = *(void *)(a2 + 16);
  unint64_t v7 = v4;
  if (v6 != a1)
  {
    if ((void *)a1[3] == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      unint64_t v7 = v6;
    }
    else
    {
      unint64_t v7 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_23F6DA68C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F346718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F346718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, char *a8, void *a9, void *a10)
{
  char v11 = *a8;
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, char, void, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a1 + 24), a2, a3, a4, *a5, a6, a7, v11, *a9, *a10);
}

uint64_t std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target_type()
{
}

void std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F3467B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3467B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, char *a9, void *a10)
{
  char v11 = *a9;
  return (*(uint64_t (**)(void, void, void, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, char, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a1 + 24), *a2, a3, a4, a5, *a6, a7, a8, v11, *a10);
}

uint64_t std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target_type()
{
}

uint64_t realityio::MeshAssetBuilder::kOutputName(realityio::MeshAssetBuilder *this)
{
  {
    operator new();
  }
  return realityio::MeshAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_23F6DA9C4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::MeshAssetBuilder *realityio::MeshAssetBuilder::MeshAssetBuilder(realityio::MeshAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "MeshAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kMeshAssetBuilderIdentifier);
  realityio::generateMeshAssetBuilderDirtyStageSubscription(&v5);
  v12[0] = &unk_26F3468C0;
  void v12[3] = v12;
  v11[0] = &unk_26F3469D0;
  void v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F346848;
  return this;
}

void sub_23F6DAB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t isTexCoord3(const pxrInternal__aapl__pxrReserved__::UsdAttribute *a1)
{
  v6[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  v6[1] = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v6);
  uint64_t v1 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v1)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v1)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  return pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
}

uint64_t realityio::MeshAssetBuilder::run(realityio::MeshAssetBuilder *this, std::__shared_weak_count **a2)
{
  uint64_t v508 = *MEMORY[0x263EF8340];
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
  v387 = v2;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v461, v3, v2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v461))
  {
    realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v460, 2034, (uint64_t)this);
    uint64_t v458 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v459 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v4 = (realityio::MeshModelDescriptorBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    int64x2_t v456 = 0uLL;
    v457 = 0;
    uint64_t v5 = realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v4);
    long long v490 = 0uLL;
    uint64_t v6 = a2[3];
    if (v6)
    {
      *((void *)&v490 + 1) = std::__shared_weak_count::lock(v6);
      if (*((void *)&v490 + 1)) {
        *(void *)&long long v490 = a2[2];
      }
    }
    MEMORY[0x2455CF830](&v491, v5);
    unint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(a2[1], &v490);
    char v8 = v7;
    char v10 = v9;
    if (v7 == v9)
    {
      std::operator+<char>();
      uint64_t v43 = std::string::append(&v499, ") at prim path (");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v455.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v455.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v387);
      int v46 = *(char *)(String + 23);
      if (v46 >= 0) {
        uint64_t v47 = (const std::string::value_type *)String;
      }
      else {
        uint64_t v47 = *(const std::string::value_type **)String;
      }
      if (v46 >= 0) {
        std::string::size_type v48 = *(unsigned __int8 *)(String + 23);
      }
      else {
        std::string::size_type v48 = *(void *)(String + 8);
      }
      unsigned int v49 = std::string::append(&v455, v47, v48);
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(void *)v506 = *((void *)&v49->__r_.__value_.__l + 2);
      long long v505 = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      uint64_t v51 = std::string::append((std::string *)&v505, ")");
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      __p[0].__end_cap_.__value_ = (unsigned int *)v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__begin_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(v435, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)&v494[8] = *(_OWORD *)v435;
      uint64_t v53 = *(void *)&v435[16];
      v495.i64[0] = __s;
      *(uint64_t *)((char *)v495.i64 + 7) = *(void *)((char *)&__s + 7);
      __int8 v54 = HIBYTE(__s);
      *(void *)&v435[16] = 0;
      long long __s = 0uLL;
      v494[0] = 0;
      *(void *)&v494[24] = v53;
      v495.i8[15] = v54;
      if (SHIBYTE(__p[0].__end_cap_.__value_) < 0) {
        operator delete(__p[0].__begin_);
      }
      if ((v506[7] & 0x80000000) != 0) {
        operator delete((void *)v505);
      }
      if (SHIBYTE(v455.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v455.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v499.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v499.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      memset(&v455, 0, sizeof(v455));
      do
      {
        uint64_t v11 = *((void *)v8 + 5);
        uint64_t v13 = *(std::mutex **)(v11 + 16);
        uint64_t v12 = *(std::__shared_weak_count **)(v11 + 24);
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((*((void *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t EmptyString = (const void **)((*((void *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
        }
        realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>(v13, EmptyString, (uint64_t)v435);
        if (v435[0])
        {
          char v15 = *(unsigned int **)&v435[8];
          uint64_t v16 = *(void *)&v435[16];
          if (*(void *)&v435[16])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v435[16] + 8), 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
            LOBYTE(__p[0].__begin_) = 1;
            __p[0].__end_ = v15;
            __p[0].__end_cap_.__value_ = (unsigned int *)v16;
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16);
          }
          else
          {
            LOBYTE(__p[0].__begin_) = 1;
            __p[0].__end_ = *(std::vector<unsigned int>::pointer *)&v435[8];
            __p[0].__end_cap_.__value_ = 0;
          }
        }
        else
        {
          long long v505 = *(_OWORD *)&v435[8];
          if (SHIBYTE(v437) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v506, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
          }
          else
          {
            *(_OWORD *)v506 = __s;
            *(void *)&v506[16] = v437;
          }
          LOBYTE(__p[0].__begin_) = 0;
          *(_OWORD *)&__p[0].__end_ = v505;
          __p[1] = *(std::vector<unsigned int> *)v506;
        }
        realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v435);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        if (LOBYTE(__p[0].__begin_))
        {
          std::string::size_type size = v455.__r_.__value_.__l.__size_;
          if (v455.__r_.__value_.__l.__size_ >= v455.__r_.__value_.__r.__words[2])
          {
            uint64_t v20 = (uint64_t)(v455.__r_.__value_.__l.__size_ - v455.__r_.__value_.__r.__words[0]) >> 4;
            unint64_t v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 60) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            int64_t v22 = v455.__r_.__value_.__r.__words[2] - v455.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v455.__r_.__value_.__r.__words[2] - v455.__r_.__value_.__r.__words[0]) >> 3 > v21) {
              unint64_t v21 = v22 >> 3;
            }
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v21;
            }
            *((void *)&__s + 1) = (char *)&v455.__r_.__value_.__l + 16;
            uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v23);
            uint64_t v26 = &v24[16 * v20];
            value = __p[0].__end_cap_.__value_;
            *(_OWORD *)uint64_t v26 = *(_OWORD *)&__p[0].__end_;
            if (value) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)value + 1, 1uLL, memory_order_relaxed);
            }
            uint64_t v28 = (void *)v455.__r_.__value_.__l.__size_;
            std::string::size_type v29 = v455.__r_.__value_.__r.__words[0];
            if (v455.__r_.__value_.__l.__size_ == v455.__r_.__value_.__r.__words[0])
            {
              int64x2_t v32 = vdupq_n_s64(v455.__r_.__value_.__l.__size_);
              std::string::size_type v30 = (std::string::size_type)&v24[16 * v20];
            }
            else
            {
              std::string::size_type v30 = (std::string::size_type)&v24[16 * v20];
              do
              {
                long long v31 = *((_OWORD *)v28 - 1);
                v28 -= 2;
                *(_OWORD *)(v30 - 16) = v31;
                v30 -= 16;
                void *v28 = 0;
                v28[1] = 0;
              }
              while (v28 != (void *)v29);
              int64x2_t v32 = *(int64x2_t *)&v455.__r_.__value_.__l.__data_;
            }
            std::string::size_type v19 = (std::string::size_type)(v26 + 16);
            v455.__r_.__value_.__r.__words[0] = v30;
            v455.__r_.__value_.__l.__size_ = (std::string::size_type)(v26 + 16);
            *(int64x2_t *)&v435[8] = v32;
            std::string::size_type v33 = v455.__r_.__value_.__r.__words[2];
            v455.__r_.__value_.__r.__words[2] = (std::string::size_type)&v24[16 * v25];
            *(void *)&long long __s = v33;
            *(void *)size_t v435 = v32.i64[0];
            std::__split_buffer<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::~__split_buffer((uint64_t)v435);
          }
          else
          {
            *(void *)v455.__r_.__value_.__l.__size_ = __p[0].__end_;
            uint64_t v18 = __p[0].__end_cap_.__value_;
            *(void *)(size + 8) = __p[0].__end_cap_.__value_;
            if (v18) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)v18 + 1, 1uLL, memory_order_relaxed);
            }
            std::string::size_type v19 = size + 16;
          }
          v455.__r_.__value_.__l.__size_ = v19;
        }
        unint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)__p);
        char v8 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v8;
      }
      while (v8 != v10);
      memset(v435, 0, sizeof(v435));
      long long v34 = *(_OWORD *)&v455.__r_.__value_.__l.__data_;
      __p[0].__begin_ = (std::vector<unsigned int>::pointer)v435;
      LOBYTE(__p[0].__end_) = 0;
      int64_t v35 = v455.__r_.__value_.__l.__size_ - v455.__r_.__value_.__r.__words[0];
      if (v455.__r_.__value_.__l.__size_ == v455.__r_.__value_.__r.__words[0])
      {
        uint64_t v42 = 0;
        uint64_t v36 = 0;
      }
      else
      {
        if (v35 < 0) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v35 >> 4);
        uint64_t v37 = 0;
        *(void *)size_t v435 = v36;
        *(void *)&v435[8] = v36;
        *(void *)&v435[16] = &v36[16 * v38];
        do
        {
          uint64_t v39 = &v36[v37];
          uint64_t v40 = v34 + v37;
          *(void *)uint64_t v39 = *(void *)(v34 + v37);
          uint64_t v41 = *(void *)(v34 + v37 + 8);
          *((void *)v39 + 1) = v41;
          if (v41) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
          }
          v37 += 16;
        }
        while (v40 + 16 != *((void *)&v34 + 1));
        uint64_t v42 = *(void *)&v435[16];
        int64_t v35 = (int64_t)&v36[v37];
      }
      v494[0] = 1;
      *(void *)&v494[8] = v36;
      *(void *)&v494[16] = v35;
      *(void *)&v494[24] = v42;
      memset(v435, 0, sizeof(v435));
      __p[0].__begin_ = (std::vector<unsigned int>::pointer)v435;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      *(void *)size_t v435 = &v455;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
    }
    if ((v491 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v491 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (*((void *)&v490 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v490 + 1));
    }
    if (!v494[0]
      || (uint64_t v55 = *(uint64_t **)&v494[16], v56 = *(uint64_t **)&v494[8], *(void *)&v494[16] == *(void *)&v494[8]))
    {
      realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)v494);
LABEL_815:
      *(void *)size_t v435 = &v456;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v459);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v458);
      realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v460);
      goto LABEL_816;
    }
    char v408 = 0;
    unint64_t p_end_cap = (unint64_t)&__p[0].__end_cap_;
    std::vector<unsigned int>::pointer v412 = (std::vector<unsigned int>::pointer)&__p[0].__end_cap_.__value_ + 1;
    uint64_t v404 = *(uint64_t **)&v494[16];
    do
    {
      uint64_t v58 = *v56;
      unsigned int v59 = (std::__shared_weak_count *)v56[1];
      if (v59)
      {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v490, (_DWORD *)(v58 + 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v490 + 1, (_DWORD *)(v58 + 12));
      uint64_t v60 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)__p, v60, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v490);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimInPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (uint64_t)v435);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v435))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v435, &v455);
          if (v408)
          {
            if (v455.__r_.__value_.__r.__words[0] == v458) {
              operator new();
            }
            uint64_t v61 = v58;
            uint64_t v62 = v59;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v505, &v455);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v505 + 1, (_DWORD *)v455.__r_.__value_.__r.__words + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v505 + 2, &v490);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v505 + 3, (_DWORD *)&v490 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v458, (int *)&v505);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v458 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v459, (int *)&v505 + 2);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v459 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v505 + 8);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v505);
            uint64_t v61 = v58;
            uint64_t v62 = v59;
            uint64_t v55 = v404;
          }
          unint64_t p_end_cap = (unint64_t)&__p[0].__end_cap_;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v455);
          char v408 = 1;
        }
        else
        {
          uint64_t v61 = v58;
          uint64_t v62 = v59;
        }
        if ((__s & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(__s & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v435[16]);
        if (*(void *)&v435[8]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v435[8]);
        }
      }
      else
      {
        uint64_t v61 = v58;
        uint64_t v62 = v59;
      }
      uint64_t v63 = v456.i64[1];
      if (v456.i64[1] >= (unint64_t)v457)
      {
        uint64_t v65 = (v456.i64[1] - v456.i64[0]) >> 4;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 60) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v67 = (uint64_t)&v457[-v456.i64[0]];
        if ((uint64_t)&v457[-v456.i64[0]] >> 3 > v66) {
          unint64_t v66 = v67 >> 3;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        *((void *)&__s + 1) = &v457;
        uint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v68);
        unsigned int v71 = &v69[16 * v65];
        *(void *)unsigned int v71 = v61;
        *((void *)v71 + 1) = v62;
        if (v62) {
          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v72 = (void *)v456.i64[1];
        uint64_t v73 = (void *)v456.i64[0];
        unint64_t p_end_cap = (unint64_t)&__p[0].__end_cap_;
        if (v456.i64[1] == v456.i64[0])
        {
          int64x2_t v76 = vdupq_n_s64(v456.u64[1]);
          uint64_t v74 = v71;
        }
        else
        {
          uint64_t v74 = v71;
          do
          {
            long long v75 = *((_OWORD *)v72 - 1);
            v72 -= 2;
            *((_OWORD *)v74 - 1) = v75;
            v74 -= 16;
            *uint64_t v72 = 0;
            v72[1] = 0;
          }
          while (v72 != v73);
          int64x2_t v76 = v456;
        }
        uint64_t v64 = v71 + 16;
        v456.i64[0] = (uint64_t)v74;
        v456.i64[1] = (uint64_t)(v71 + 16);
        *(int64x2_t *)&v435[8] = v76;
        uint64_t v77 = v457;
        v457 = &v69[16 * v70];
        *(void *)&long long __s = v77;
        *(void *)size_t v435 = v76.i64[0];
        std::__split_buffer<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::~__split_buffer((uint64_t)v435);
      }
      else
      {
        *(void *)v456.i64[1] = v61;
        *(void *)(v63 + 8) = v62;
        if (v62) {
          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v64 = (void *)(v63 + 16);
      }
      v456.i64[1] = (uint64_t)v64;
      if (((uint64_t)__p[1].__begin_ & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[1].__begin_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[0].__end_cap_);
      if (__p[0].__end_) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p[0].__end_);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v490);
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
      if (v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      }
      v56 += 2;
    }
    while (v56 != v55);
    unint64_t v78 = (realityio::MaterialAssetBuilder *)realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)v494);
    uint64_t v79 = realityio::MaterialAssetBuilder::kMaterialDataName(v78);
    realityio::Inputs::getAccumulatedValues<realityio::MaterialAssetDataT *>((uint64_t)a2, v79, (uint64_t)&v455);
    v453 = 0;
    uint64_t v452 = 0;
    uint64_t v454 = 0;
    if (v455.__r_.__value_.__s.__data_[0]) {
      std::vector<realityio::MaterialAssetDataT *>::__init_with_size[abi:ne180100]<realityio::MaterialAssetDataT **,realityio::MaterialAssetDataT **>(&v452, (const void *)v455.__r_.__value_.__l.__size_, v455.__r_.__value_.__r.__words[2], (uint64_t)(v455.__r_.__value_.__r.__words[2] - v455.__r_.__value_.__l.__size_) >> 3);
    }
    EntityGeneratingDataForPriuint64_t m = realityio::internal::PrimToEntityMap::getEntityGeneratingDataForPrim((realityio::internal::PrimToEntityMap *)&(*a2)->__shared_weak_owners_, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v461);
    BOOL v388 = EntityGeneratingDataForPrim
        && *(void *)(EntityGeneratingDataForPrim + 96) == 1
        && !*(void *)(EntityGeneratingDataForPrim + 72)
        && *(unsigned char *)(a2[5]->__shared_weak_owners_ + 272) == 0;
    long long v450 = 0uLL;
    uint64_t v451 = 0;
    uint64_t v449 = 0;
    uint64_t v448 = 0;
    v447 = &v448;
    uint64_t v446 = 0;
    v445 = 0;
    uint64_t v444 = (uint64_t *)&v445;
    uint64_t v443 = 0;
    v442 = 0;
    v441 = (uint64_t *)&v442;
    if (!REMeshAssetDescriptorCreate())
    {
LABEL_812:
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v441, v442);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)&v444, v445);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)&v447, v448);
      *(void *)size_t v435 = &v450;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
      if (v452)
      {
        v453 = v452;
        operator delete(v452);
      }
      realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&v455);
      goto LABEL_815;
    }
    uint64_t ServiceLocator = REEngineGetServiceLocator();
    uint64_t v384 = MEMORY[0x2455CDC30](ServiceLocator);
    int shared_weak_owners_low = LOBYTE((*a2)[11].__shared_weak_owners_);
    uint64_t v83 = (uint64_t)a2[5];
    uint64_t v84 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
    MaterialIndexAssignor::make(v435, (uint64_t *)&v452, &v456, shared_weak_owners_low != 0, v83, v84, (uint64_t *)this);
    unint64_t v433 = 0;
    uint64_t v432 = 0;
    unint64_t v434 = 0;
    size_t v390 = (void *)v456.i64[1];
    uint64_t v86 = (void *)v456.i64[0];
    if (v456.i64[0] != v456.i64[1])
    {
      uint64_t SphereDescriptor = 0;
      uint64_t v391 = 0;
      int v382 = 0;
      int v383 = LOBYTE((*a2)[11].__shared_weak_owners_);
      std::vector<unsigned int>::pointer v412 = (std::vector<unsigned int>::pointer)&v499.__r_.__value_.__r.__words[2];
      int v385 = *(unsigned int (**)(unsigned char *))(MEMORY[0x263F90770] + 48);
      uint64_t v410 = *(unsigned int (**)(uint64_t *))(MEMORY[0x263F90730] + 48);
      int v409 = (uint64_t **)((char *)this + 136);
      while (1)
      {
        v405 = (uint64_t *)*v86;
        uint64_t v399 = v86;
        uint64_t v87 = (std::__shared_weak_count *)v86[1];
        if (v87) {
          atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v400 = v87;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v431, (_DWORD *)v405 + 2);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v431 + 1, (_DWORD *)v405 + 3);
        uint64_t v88 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v469, v88, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v431);
        unsigned int v89 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v447, &v431);
        if (&v448 != v89)
        {
          int v401 = *((_DWORD *)v89 + 9);
          goto LABEL_130;
        }
        unsigned int v94 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
        PrimAtPath = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v467, v94, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v431);
        pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(PrimAtPath);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) == 0)
        {
          int v145 = 5;
          int v401 = -1;
          goto LABEL_598;
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        uint64_t v466 = 0;
        uint64_t v464 = MEMORY[0x263F907A0] + 16;
        uint64_t v96 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
        if (!v96) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v464, v96, 0);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v427, &v472, &v473);
        MEMORY[0x2455CF810](&begin, "primvars:st");
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        __p[1].__begin_ = 0;
        __p[0].__begin_ = (std::vector<unsigned int>::pointer)(MEMORY[0x263F907A0] + 16);
        int v97 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
        if (!v97) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)__p, v97, 0);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v494, (uint64_t *)&v499.__r_.__value_.__l.__size_, &v499.__r_.__value_.__r.__words[2]);
        unint64_t v98 = atomic_load(MEMORY[0x263F90550]);
        if (!v98) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
        }
        uint64_t v99 = *(void *)(v98 + 216);
        if ((v99 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v99 &= 0xFFFFFFFFFFFFFFF8;
        }
        long long v490 = 0uLL;
        *(void *)&long long v491 = 0;
        uint64_t v484 = &v490;
        LOBYTE(v485) = 0;
        uint64_t v100 = operator new(8uLL);
        *(void *)&long long v490 = v100;
        *((void *)&v490 + 1) = v100;
        *uint64_t v100 = v99;
        *(void *)&long long v491 = v100 + 1;
        if ((v99 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v100 &= 0xFFFFFFFFFFFFFFF8;
        }
        *((void *)&v490 + 1) = v100 + 1;
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
        realityio::findFirstUVMeshAttributeNameFromShader((realityio *)&v505, v101, &v487);
        MEMORY[0x2455CECB0](&v505);
        uint64_t v484 = &v490;
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v484);
        if ((v99 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets((uint64_t *)&v484, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)__p);
        uint64_t v102 = (uint64_t *)v485;
        unint64_t v103 = (uint64_t *)v484;
        if (v485 != v484)
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v490, v103 + 1, (_DWORD *)v103 + 4);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            *(void *)&v506[8] = 0;
            *(void *)&long long v505 = MEMORY[0x263F907A0] + 16;
            if ((BYTE8(v491) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v491 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v491);
            if (*((void *)&v490 + 1)) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v490 + 1));
            }
            uint64_t v104 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
            if (!v104) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
            }
            pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v505, v104, 0);
            pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v490, (uint64_t *)&v482, &v483);
            unint64_t v105 = atomic_load(MEMORY[0x263F90550]);
            if (!v105) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
            }
            uint64_t v106 = *(void *)(v105 + 216);
            if ((v106 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v106 &= 0xFFFFFFFFFFFFFFF8;
            }
            size_t v475 = 0;
            int v474 = 0;
            v476 = 0;
            v488 = &v474;
            char v489 = 0;
            int v107 = (char *)operator new(8uLL);
            int v474 = (char **)v107;
            size_t v475 = v107;
            *(void *)int v107 = v106;
            v476 = v107 + 8;
            if ((v106 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *(void *)v107 &= 0xFFFFFFFFFFFFFFF8;
            }
            size_t v475 = v107 + 8;
            pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
            realityio::findFirstUVMeshAttributeNameFromShader((realityio *)&v477, v108, &__str);
            MEMORY[0x2455CECB0](&v477);
            v488 = &v474;
            std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v488);
            if ((v106 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              if (__str.__r_.__value_.__l.__size_)
              {
LABEL_220:
                std::string::operator=(&v487, &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if ((BYTE8(v491) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v491 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v491);
                if (*((void *)&v490 + 1)) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v490 + 1));
                }
                MEMORY[0x2455CEF40](&v481);
                MEMORY[0x2455CF4B0](&v505);
                break;
              }
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
            {
              goto LABEL_220;
            }
            if ((BYTE8(v491) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v491 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v491);
            if (*((void *)&v490 + 1)) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v490 + 1));
            }
            MEMORY[0x2455CEF40](&v481);
            MEMORY[0x2455CF4B0](&v505);
            v103 += 3;
          }
          while (v103 != v102);
        }
        if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
        {
          if (!v487.__r_.__value_.__l.__size_)
          {
LABEL_238:
            std::string::basic_string[abi:ne180100]<0>(v424, "");
            goto LABEL_239;
          }
        }
        else if (!*((unsigned char *)&v487.__r_.__value_.__s + 23))
        {
          goto LABEL_238;
        }
        std::string::size_type v146 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v505, "primvars:");
        if ((v487.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v147 = &v487;
        }
        else {
          int v147 = (std::string *)v487.__r_.__value_.__r.__words[0];
        }
        if ((v487.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v148 = HIBYTE(v487.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v148 = v487.__r_.__value_.__l.__size_;
        }
        int v149 = std::string::append(v146, (const std::string::value_type *)v147, v148);
        long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
        std::string::size_type v425 = v149->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long v424 = v150;
        v149->__r_.__value_.__l.__size_ = 0;
        v149->__r_.__value_.__r.__words[2] = 0;
        v149->__r_.__value_.__r.__words[0] = 0;
        if ((v506[7] & 0x80000000) != 0) {
          operator delete((void *)v505);
        }
LABEL_239:
        *(void *)&long long v505 = &v484;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)&v505);
        if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v487.__r_.__value_.__l.__data_);
        }
        if ((v494[24] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v494[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v494[16]);
        if (*(void *)&v494[8]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v494[8]);
        }
        MEMORY[0x2455CEF40](&v499);
        MEMORY[0x2455CF4B0](__p);
        if (SHIBYTE(v425) < 0)
        {
          if (!v424[1]) {
            goto LABEL_253;
          }
          char v151 = (void **)v424[0];
        }
        else
        {
          if (!HIBYTE(v425)) {
            goto LABEL_253;
          }
          char v151 = v424;
        }
        MEMORY[0x2455CF810](__p, v151);
        if ((begin & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(begin & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        begiuint64_t n = (unint64_t)__p[0].__begin_;
LABEL_253:
        LOBYTE(v474) = 0;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v461);
        end = (atomic_uint *)__p[0].__end_;
        if (__p[0].__end_)
        {
          if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&__p[0].__end_)
                        + 14))
            end = (atomic_uint *)__p[0].__begin_;
          else {
            end = 0;
          }
        }
        v423 = end;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v423);
        unint64_t v153 = atomic_load(&realityio::tokens::MeshBuilderTokens);
        if (!v153) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        BOOL RealityKitStage = realityio::getRealityKitStageMetadata<BOOL>((uint64_t *)&v423, (void *)(v153 + 112), (pxrInternal__aapl__pxrReserved__::VtValue *)&v474);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v423);
        uint64_t v155 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)__p[0].__end_;
        if (__p[0].__end_
          && atomic_fetch_add_explicit((atomic_uint *volatile)__p[0].__end_ + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          uint64_t v155 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *))(*(void *)v155 + 8))(v155);
        }
        size_t v477 = 0;
        pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v155);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
        {
          if (*(unsigned char *)(a2[5]->__shared_weak_owners_ + 272))
          {
            realityio::createGeomModelDescriptorWithPrimitivePrim((realityio *)&v467, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)0x40, 64, 32, 64, (uint64_t *)__p);
            size_t v163 = (unsigned int *)v477;
            if (v477 != __p[0].__begin_)
            {
              size_t v477 = __p[0].__begin_;
              __p[0].__begin_ = v163;
            }
            realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(__p);
            goto LABEL_540;
          }
          uint64_t IsValid = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v467);
          if (!IsValid) {
            goto LABEL_539;
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(IsValid);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          int IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if (!IsA) {
            goto LABEL_539;
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(IsA);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          uint64_t v166 = (pxrInternal__aapl__pxrReserved__::UsdGeomCube *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if (v166)
          {
            unint64_t v167 = atomic_load(&realityio::tokens::SphereMeshBuilderTokens);
            if (!v167) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
            realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v467, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v167 + 8), (uint64_t)__p);
            if (!LOBYTE(__p[0].__begin_) && SHIBYTE(__p[1].__end_cap_.__value_) < 0) {
              operator delete(__p[1].__begin_);
            }
            REGeomBuildSphereDefaultOptions();
            uint64_t SphereDescriptor = REMeshAssetCreateSphereDescriptor();
            goto LABEL_540;
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(v166);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          uint64_t v242 = (pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if (v242)
          {
            unint64_t v243 = atomic_load(&realityio::tokens::CubeMeshBuilderTokens);
            if (!v243) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
            realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v467, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v243 + 8), (uint64_t)__p);
            if (LOBYTE(__p[0].__begin_))
            {
              float v244 = *(float *)&__p[0].__end_;
            }
            else
            {
              float v244 = 2.0;
              if (SHIBYTE(__p[1].__end_cap_.__value_) < 0) {
                operator delete(__p[1].__begin_);
              }
            }
            memset(__p, 0, 28);
            REGeomBuildBoxDefaultOptions();
            *((float *)&__p[0].__end_ + 1) = v244;
            *(float *)&__p[0].__end_cap_.__value_ = v244;
            *((float *)&__p[0].__end_cap_.__value_ + 1) = v244;
            *(_OWORD *)uint64_t v494 = *(_OWORD *)&__p[0].__begin_;
            *(_OWORD *)&v494[12] = *(_OWORD *)((char *)&__p[0].__end_ + 4);
            uint64_t SphereDescriptor = REMeshAssetCreateBoxDescriptor();
            goto LABEL_540;
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType(v242);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          uint64_t v245 = (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if (v245)
          {
            unint64_t v246 = atomic_load(&realityio::tokens::CylinderMeshBuilderTokens);
            if (!v246) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
            realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v467, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v246 + 24), (uint64_t)__p);
            if (LOBYTE(__p[0].__begin_))
            {
              float v247 = *(float *)&__p[0].__end_;
            }
            else
            {
              float v247 = 1.0;
              if (SHIBYTE(__p[1].__end_cap_.__value_) < 0) {
                operator delete(__p[1].__begin_);
              }
            }
            unint64_t v280 = atomic_load(&realityio::tokens::CylinderMeshBuilderTokens);
            if (!v280) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
            realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v467, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v280 + 16), (uint64_t)__p);
            if (LOBYTE(__p[0].__begin_))
            {
              float v281 = *(float *)&__p[0].__end_;
            }
            else
            {
              float v281 = 2.0;
              if (SHIBYTE(__p[1].__end_cap_.__value_) < 0) {
                operator delete(__p[1].__begin_);
              }
            }
            memset(__p, 0, 24);
            REGeomBuildCylinderDefaultOptions();
            *((float *)&__p[0].__end_ + 1) = v247;
            *(float *)&__p[0].__end_ = v247;
            *((float *)&__p[0].__begin_ + 1) = v281;
            LOWORD(__p[0].__begin_) = 64;
            *(std::vector<unsigned int> *)uint64_t v494 = __p[0];
            uint64_t SphereDescriptor = REMeshAssetCreateCylinderDescriptor();
            goto LABEL_540;
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(v245);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
          {
            unint64_t v248 = atomic_load(&realityio::tokens::CapsuleMeshBuilderTokens);
            if (!v248) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
            LODWORD(__p[0].__begin_) = 1056964608;
            float AttributeValueWithDefault = realityio::getAttributeValueWithDefaultValue<float>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v248 + 24), (float *)__p, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v467);
            unint64_t v250 = atomic_load(&realityio::tokens::CapsuleMeshBuilderTokens);
            if (!v250) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
            LODWORD(__p[0].__begin_) = 1065353216;
            float v251 = realityio::getAttributeValueWithDefaultValue<float>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v250 + 16), (float *)__p, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v467);
            memset(__p, 0, 20);
            REGeomBuildCapsuleDefaultOptions();
            *(float *)&unsigned int v252 = v251 + AttributeValueWithDefault * 2.0;
            __p[0].__end_ = (std::vector<unsigned int>::pointer)__PAIR64__(v252, LODWORD(AttributeValueWithDefault));
            LOWORD(__p[0].__begin_) = 64;
            WORD2(__p[0].__begin_) = 32;
            *(_DWORD *)&v494[16] = __p[0].__end_cap_.__value_;
            *(_OWORD *)uint64_t v494 = *(_OWORD *)&__p[0].__begin_;
            uint64_t SphereDescriptor = REMeshAssetCreateCapsuleDescriptor();
            goto LABEL_540;
          }
          if (!pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCone>((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)&v467))
          {
LABEL_539:
            uint64_t SphereDescriptor = 0;
            goto LABEL_540;
          }
          unint64_t v253 = atomic_load(&realityio::tokens::ConeMeshBuilderTokens);
          if (!v253) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          LODWORD(__p[0].__begin_) = 1065353216;
          realityio::getAttributeValueWithDefaultValue<float>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v253 + 24), (float *)__p, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v467);
          unint64_t v254 = atomic_load(&realityio::tokens::ConeMeshBuilderTokens);
          if (!v254) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          LODWORD(__p[0].__begin_) = 0x40000000;
          realityio::getAttributeValueWithDefaultValue<float>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v254 + 16), (float *)__p, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v467);
          REGeomBuildConeDefaultOptions();
          uint64_t SphereDescriptor = REMeshAssetCreateConeDescriptor();
LABEL_540:
          uint64_t v241 = v477;
          if ((unint64_t)v477 | SphereDescriptor) {
            goto LABEL_541;
          }
          uint64_t SphereDescriptor = 0;
LABEL_578:
          int v145 = 5;
          int v401 = -1;
          goto LABEL_589;
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v487.__r_.__value_.__r.__words[0] = MEMORY[0x263F90690] + 16;
        realityio::createModelDescriptorFromUsdGeomMesh((realityio *)&v487, (const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&begin, (const pxrInternal__aapl__pxrReserved__::TfToken *)1, RealityKitStage, v383 != 0, (uint64_t *)__p);
        uint64_t v156 = (unsigned int *)v477;
        if (v477 != __p[0].__begin_)
        {
          size_t v477 = __p[0].__begin_;
          __p[0].__begin_ = v156;
        }
        realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(__p);
        if (!v477)
        {
          MEMORY[0x2455CE7A0](&v487);
          goto LABEL_578;
        }
        uint64_t v422 = v477;
        RERetain();
        unint64_t v157 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
        AttributeCFIndex Count = (realityio *)REGeomModelDescriptorGetAttributeCount();
        BOOL v160 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v405[7];
        size_t v159 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v405[8];
        if (((v159 - v160) >> 5) + (unint64_t)AttributeCount <= 0xC8)
        {
          if (v160 != v159)
          {
            LOBYTE(p_end_cap) = 0;
            do
            {
              pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)__p, v157, v160);
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *(void *)uint64_t v494 = MEMORY[0x263F90770] + 16;
              if (*(void *)&v494[8] && (*(unsigned char *)(*(void *)&v494[8] + 57) & 8) == 0 && v385(v494))
              {
                pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetInbetweens((uint64_t *)&v505, (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)v494);
                long long v168 = v505;
                *(void *)&long long v490 = &v505;
                std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v490);
                if (*((void *)&v168 + 1) != (void)v168)
                {
                  uint64_t v170 = *(id *)(realityio::logObjects(v169) + 24);
                  if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
                  {
                    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)__p, &v490);
                    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v490);
                    LODWORD(v505) = 136315138;
                    *(void *)((char *)&v505 + 4) = Text;
                    _os_log_impl(&dword_23F4EA000, v170, OS_LOG_TYPE_DEFAULT, "USD blend shape inbetweens on: \"%s\" are not currently supported by RealityIO.", (uint8_t *)&v505, 0xCu);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v490);
                  }
                }
                v499.__r_.__value_.__r.__words[0] = (std::string::size_type)v422;
                if (v422) {
                  RERetain();
                }
                char v172 = realityio::addAttributeFromUsdSkelBlendShape((uint64_t *)&v499, (uint64_t)v160 + 8, (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)v494);
                long long v173 = (realityio *)realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v499);
                if (v172)
                {
                  LOBYTE(p_end_cap) = 1;
                }
                else
                {
                  int v174 = *(id *)(realityio::logObjects(v173) + 24);
                  if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
                  {
                    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)__p, &v490);
                    uint64_t v175 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v490);
                    LODWORD(v505) = 136315138;
                    *(void *)((char *)&v505 + 4) = v175;
                    _os_log_impl(&dword_23F4EA000, v174, OS_LOG_TYPE_DEFAULT, "Could not ingest blend shape \"%s\"", (uint8_t *)&v505, 0xCu);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v490);
                  }
                }
              }
              MEMORY[0x2455CF060](v494);
              if (((uint64_t)__p[1].__begin_ & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[1].__begin_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[0].__end_cap_);
              if (__p[0].__end_) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p[0].__end_);
              }
              BOOL v160 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v160 + 32);
            }
            while (v160 != v159);
            realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v422);
            if (p_end_cap)
            {
              unint64_t v176 = v433;
              if (v433 >= v434)
              {
                uint64_t v177 = std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdPrim const&>(&v432, (uint64_t)&v467);
              }
              else
              {
                std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)&v434, v433, (uint64_t)&v467);
                uint64_t v177 = v176 + 32;
              }
              unint64_t v433 = v177;
              int v382 = 1;
            }
            goto LABEL_304;
          }
        }
        else
        {
          uint64_t v161 = *(NSObject **)(realityio::logObjects(AttributeCount) + 24);
          if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v162 = (v405[8] - v405[7]) >> 5;
            LODWORD(__p[0].__begin_) = 134217984;
            *(std::vector<unsigned int>::pointer *)((char *)&__p[0].__begin_ + 4) = (std::vector<unsigned int>::pointer)v162;
            _os_log_impl(&dword_23F4EA000, v161, OS_LOG_TYPE_DEFAULT, "Skipping %zu blend shape paths to avoid exceeding attribute limit", (uint8_t *)__p, 0xCu);
          }
        }
        realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v422);
LABEL_304:
        v485 = 0;
        uint64_t v486 = 0;
        uint64_t v484 = &v485;
        long long v490 = 0u;
        long long v491 = 0u;
        v492.i32[0] = 1065353216;
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)__p, (uint64_t *)&v487.__r_.__value_.__l.__size_, &v487.__r_.__value_.__r.__words[2]);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes((uint64_t *)&v481, (pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
        if (((uint64_t)__p[1].__begin_ & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[1].__begin_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[0].__end_cap_);
        if (__p[0].__end_) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p[0].__end_);
        }
        uint64_t v178 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v482;
        uint64_t v179 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v481;
        uint64_t v402 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v481;
        while (v178 != v179)
        {
          uint64_t v178 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v178 - 32);
          uint64_t v180 = *(void *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v178);
          if ((v180 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v180 &= 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)uint64_t v494 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v178);
          __p[0].__begin_ = (std::vector<unsigned int>::pointer)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v494);
          if (!atomic_load(MEMORY[0x263F90560])) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
          }
          if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
          {
            if (!atomic_load(MEMORY[0x263F90560])) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
            }
            if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
            {
              if (!atomic_load(MEMORY[0x263F90560])) {
                pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
              }
              if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0
                && (isTexCoord3(v178) & 1) == 0)
              {
                *(void *)uint64_t v494 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v178);
                __p[0].__begin_ = (std::vector<unsigned int>::pointer)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v494);
                if (!atomic_load(MEMORY[0x263F90560])) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
                }
                if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
                {
                  if (!atomic_load(MEMORY[0x263F90560])) {
                    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
                  }
                  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
                  {
                    if (!atomic_load(MEMORY[0x263F90560])) {
                      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
                    }
                    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
                    {
                      if ((v180 & 7) != 0) {
                        goto LABEL_419;
                      }
                      goto LABEL_420;
                    }
                  }
                }
              }
            }
          }
          char v187 = isTexCoord3(v178);
          uint64_t v421 = v180;
          if ((v180 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v421 &= 0xFFFFFFFFFFFFFFF8;
          }
          realityio::TexcoordID::TexcoordID((uint64_t)__p, &v421, -1, v187);
          if ((v421 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v421 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          unint64_t v188 = (unint64_t)std::__tree<realityio::TexcoordID>::__find_equal<realityio::TexcoordID>((uint64_t)&v484, &v505, (realityio::TexcoordID *)__p);
          if (!*(void *)v188)
          {
            *(void *)uint64_t v494 = operator new(0x50uLL);
            *(void *)&v494[8] = &v485;
            v494[16] = 0;
            realityio::TexcoordID::TexcoordID(*(void *)v494 + 32, (uint64_t)__p);
            v494[16] = 1;
            uint64_t v189 = v505;
            uint64_t v190 = *(uint64_t **)v494;
            **(void **)uint64_t v494 = 0;
            v190[1] = 0;
            v190[2] = v189;
            *(void *)unint64_t v188 = v190;
            if (*(void *)v484)
            {
              uint64_t v484 = *(void **)v484;
              uint64_t v190 = *(uint64_t **)v188;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v485, v190);
            ++v486;
            *(void *)uint64_t v494 = 0;
            std::unique_ptr<std::__tree_node<realityio::TexcoordID,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TexcoordID,void *>>>>::reset[abi:ne180100]((uint64_t)v494, 0);
          }
          int begin_high = HIDWORD(__p[0].__begin_);
          if (HIDWORD(__p[0].__begin_) != -1)
          {
            unint64_t p_end_cap = *((void *)&v490 + 1);
            if (*((void *)&v490 + 1))
            {
              uint8x8_t v192 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v490 + 8));
              v192.i16[0] = vaddlv_u8(v192);
              if (v192.u32[0] > 1uLL)
              {
                unint64_t v188 = SHIDWORD(__p[0].__begin_);
                if (*((void *)&v490 + 1) <= (unint64_t)SHIDWORD(__p[0].__begin_)) {
                  unint64_t v188 = (unint64_t)SHIDWORD(__p[0].__begin_) % *((void *)&v490 + 1);
                }
              }
              else
              {
                unint64_t v188 = (*((void *)&v490 + 1) - 1) & SHIDWORD(__p[0].__begin_);
              }
              uint64_t v193 = *(uint64_t ***)(v490 + 8 * v188);
              if (v193)
              {
                for (uint64_t i = *v193; i; uint64_t i = (uint64_t *)*i)
                {
                  unint64_t v195 = i[1];
                  if (v195 == SHIDWORD(__p[0].__begin_))
                  {
                    if (*((_DWORD *)i + 4) == HIDWORD(__p[0].__begin_)) {
                      goto LABEL_414;
                    }
                  }
                  else
                  {
                    if (v192.u32[0] > 1uLL)
                    {
                      if (v195 >= *((void *)&v490 + 1)) {
                        v195 %= *((void *)&v490 + 1);
                      }
                    }
                    else
                    {
                      v195 &= *((void *)&v490 + 1) - 1;
                    }
                    if (v195 != v188) {
                      break;
                    }
                  }
                }
              }
            }
            uint64_t v196 = operator new(0x18uLL);
            void *v196 = 0;
            v196[1] = begin_high;
            *((_DWORD *)v196 + 4) = begin_high;
            float v197 = (float)(unint64_t)(*((void *)&v491 + 1) + 1);
            if (!p_end_cap || (float)(*(float *)v492.i32 * (float)p_end_cap) < v197)
            {
              BOOL v198 = (p_end_cap & (p_end_cap - 1)) != 0;
              if (p_end_cap < 3) {
                BOOL v198 = 1;
              }
              unint64_t v199 = v198 | (2 * p_end_cap);
              unint64_t v200 = vcvtps_u32_f32(v197 / *(float *)v492.i32);
              if (v199 <= v200) {
                int8x8_t prime = (int8x8_t)v200;
              }
              else {
                int8x8_t prime = (int8x8_t)v199;
              }
              if (*(void *)&prime == 1)
              {
                int8x8_t prime = (int8x8_t)2;
              }
              else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
              {
                int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                unint64_t p_end_cap = *((void *)&v490 + 1);
              }
              if (*(void *)&prime <= p_end_cap)
              {
                if (*(void *)&prime < p_end_cap)
                {
                  unint64_t v208 = vcvtps_u32_f32((float)*((unint64_t *)&v491 + 1) / *(float *)v492.i32);
                  if (p_end_cap < 3
                    || (uint8x8_t v209 = (uint8x8_t)vcnt_s8((int8x8_t)p_end_cap), v209.i16[0] = vaddlv_u8(v209),
                                                                        v209.u32[0] > 1uLL))
                  {
                    unint64_t v208 = std::__next_prime(v208);
                  }
                  else
                  {
                    uint64_t v210 = 1 << -(char)__clz(v208 - 1);
                    if (v208 >= 2) {
                      unint64_t v208 = v210;
                    }
                  }
                  if (*(void *)&prime <= v208) {
                    int8x8_t prime = (int8x8_t)v208;
                  }
                  if (*(void *)&prime >= p_end_cap)
                  {
                    unint64_t p_end_cap = *((void *)&v490 + 1);
                  }
                  else
                  {
                    if (prime) {
                      goto LABEL_370;
                    }
                    char v216 = (void *)v490;
                    *(void *)&long long v490 = 0;
                    if (v216) {
                      operator delete(v216);
                    }
                    unint64_t p_end_cap = 0;
                    *((void *)&v490 + 1) = 0;
                  }
                }
              }
              else
              {
LABEL_370:
                if (*(void *)&prime >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                std::string v202 = operator new(8 * *(void *)&prime);
                unsigned int v203 = (void *)v490;
                *(void *)&long long v490 = v202;
                if (v203) {
                  operator delete(v203);
                }
                uint64_t v204 = 0;
                *((int8x8_t *)&v490 + 1) = prime;
                do
                  *(void *)(v490 + 8 * v204++) = 0;
                while (*(void *)&prime != v204);
                unint64_t v205 = (void **)v491;
                if ((void)v491)
                {
                  unint64_t v206 = *(void *)(v491 + 8);
                  uint8x8_t v207 = (uint8x8_t)vcnt_s8(prime);
                  v207.i16[0] = vaddlv_u8(v207);
                  if (v207.u32[0] > 1uLL)
                  {
                    if (v206 >= *(void *)&prime) {
                      v206 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v206 &= *(void *)&prime - 1;
                  }
                  *(void *)(v490 + 8 * v206) = &v491;
                  for (uint64_t j = *v205; j; v206 = v212)
                  {
                    unint64_t v212 = j[1];
                    if (v207.u32[0] > 1uLL)
                    {
                      if (v212 >= *(void *)&prime) {
                        v212 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v212 &= *(void *)&prime - 1;
                    }
                    if (v212 != v206)
                    {
                      if (!*(void *)(v490 + 8 * v212))
                      {
                        *(void *)(v490 + 8 * v212) = v205;
                        goto LABEL_395;
                      }
                      void *v205 = (void *)*j;
                      *uint64_t j = **(void **)(v490 + 8 * v212);
                      **(void **)(v490 + 8 * v212) = j;
                      uint64_t j = v205;
                    }
                    unint64_t v212 = v206;
LABEL_395:
                    unint64_t v205 = (void **)j;
                    uint64_t j = (void *)*j;
                  }
                }
                unint64_t p_end_cap = (unint64_t)prime;
              }
              if ((p_end_cap & (p_end_cap - 1)) != 0)
              {
                if (p_end_cap <= begin_high) {
                  unint64_t v188 = begin_high % p_end_cap;
                }
                else {
                  unint64_t v188 = begin_high;
                }
              }
              else
              {
                unint64_t v188 = (p_end_cap - 1) & begin_high;
              }
            }
            uint64_t v213 = v490;
            long long v214 = *(void **)(v490 + 8 * v188);
            if (v214)
            {
              void *v196 = *v214;
              goto LABEL_412;
            }
            void *v196 = v491;
            *(void *)&long long v491 = v196;
            *(void *)(v213 + 8 * v188) = &v491;
            if (*v196)
            {
              unint64_t v215 = *(void *)(*v196 + 8);
              if ((p_end_cap & (p_end_cap - 1)) != 0)
              {
                if (v215 >= p_end_cap) {
                  v215 %= p_end_cap;
                }
              }
              else
              {
                v215 &= p_end_cap - 1;
              }
              long long v214 = (void *)(v490 + 8 * v215);
LABEL_412:
              void *v214 = v196;
            }
            ++*((void *)&v491 + 1);
          }
LABEL_414:
          if (SHIBYTE(__p[1].__end_) < 0) {
            operator delete(__p[0].__end_cap_.__value_);
          }
          if (((uint64_t)__p[0].__end_ & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0].__end_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v180 & 7) != 0) {
LABEL_419:
          }
            atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
LABEL_420:
          uint64_t v179 = v402;
        }
        int v217 = 0;
        memset(__p, 0, sizeof(__p));
        char v218 = 1;
        *(_DWORD *)uint64_t v494 = 0;
        do
        {
          char v219 = v218;
          if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v490, *((unint64_t *)&v490 + 1), v217))std::deque<int>::push_back(__p, v494); {
          char v218 = 0;
          }
          *(_DWORD *)uint64_t v494 = v217 + 1;
          int v217 = 1;
        }
        while ((v219 & 1) != 0);
        int64x2_t v495 = 0u;
        memset(v494, 0, sizeof(v494));
        int v220 = 3;
        LODWORD(v505) = 2;
        do
        {
          if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v490, *((unint64_t *)&v490 + 1), v220 - 1))std::deque<int>::push_back(v494, &v505); {
          LODWORD(v505) = v220++;
          }
        }
        while (v220 != 7);
        uint64_t v221 = v484;
        if (v484 != &v485)
        {
          do
          {
            realityio::TexcoordID::TexcoordID((uint64_t)&v505, (uint64_t)v221 + 32);
            LODWORD(v222) = DWORD1(v505);
            if (DWORD1(v505) != -1) {
              goto LABEL_464;
            }
            _ZF = v506[24] || __p[1].__end_cap_.__value_ == 0;
            if (_ZF)
            {
              if (v495.i64[1])
              {
                realityio::TexcoordID::setIndex((realityio::TexcoordID *)&v505, *(_DWORD *)(*(void *)(*(void *)&v494[8]+ (((unint64_t)v495.i64[0] >> 7) & 0x1FFFFFFFFFFFFF8))+ 4 * (v495.i16[0] & 0x3FF)));
                int64x2_t v495 = vaddq_s64(v495, (int64x2_t)xmmword_23F7CED10);
                if (v495.i64[0] >= 0x800uLL)
                {
                  operator delete(**(void ***)&v494[8]);
                  *(void *)&v494[8] += 8;
                  v495.i64[0] -= 1024;
                }
              }
              else
              {
                int v224 = *(id *)(realityio::logObjects((realityio *)DWORD1(v505)) + 24);
                if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v225 = *((void *)&v505 + 1);
                  if ((BYTE8(v505) & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v505 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    v225 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  unint64_t v226 = v225 & 0xFFFFFFFFFFFFFFF8;
                  if ((v225 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    unsigned int v227 = (const char *)(v226 + 16);
                    if (*(char *)(v226 + 39) < 0) {
                      unsigned int v227 = *(const char **)v227;
                    }
                  }
                  else
                  {
                    unsigned int v227 = "";
                  }
                  LODWORD(v499.__r_.__value_.__l.__data_) = 136316162;
                  *(std::string::size_type *)((char *)v499.__r_.__value_.__r.__words + 4) = (std::string::size_type)v227;
                  WORD2(v499.__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&v499.__r_.__value_.__r.__words[1] + 6) = 6 - LODWORD(__p[1].__end_cap_.__value_);
                  WORD1(v499.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v499.__r_.__value_.__r.__words[2]) = 2;
                  LOWORD(v500) = 1024;
                  *(_DWORD *)((char *)&v500 + 2) = 6 - v495.i32[2];
                  HIWORD(v500) = 1024;
                  int v501 = 6;
                  _os_log_impl(&dword_23F4EA000, v224, OS_LOG_TYPE_DEFAULT, "Could not allocate a material buffer for '%s'. %d of %d float2 and %d of %d float4 buffers have been assigned already.", (uint8_t *)&v499, 0x24u);
                  if ((v225 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)v226, 0xFFFFFFFE, memory_order_release);
                  }
                }
              }
            }
            else
            {
              realityio::TexcoordID::setIndex((realityio::TexcoordID *)&v505, *(_DWORD *)(*(void *)((char *)__p[0].__end_+ (((unint64_t)__p[1].__end_ >> 7) & 0x1FFFFFFFFFFFFF8))+ 4 * ((uint64_t)__p[1].__end_ & 0x3FF)));
              *(int64x2_t *)&__p[1].__end_ = vaddq_s64(*(int64x2_t *)&__p[1].__end_, (int64x2_t)xmmword_23F7CED10);
              if (__p[1].__end_ >= (std::vector<unsigned int>::pointer)0x800)
              {
                operator delete(*(void **)__p[0].__end_);
                __p[0].__end_ += 2;
                __p[1].__end_ -= 256;
              }
            }
            uint64_t v222 = DWORD1(v505);
            if (DWORD1(v505) != -1)
            {
LABEL_464:
              std::to_string(&__str, v222);
              unsigned int v228 = std::string::insert(&__str, 0, "UV");
              long long v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
              v499.__r_.__value_.__r.__words[2] = v228->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v499.__r_.__value_.__l.__data_ = v229;
              v228->__r_.__value_.__l.__size_ = 0;
              v228->__r_.__value_.__r.__words[2] = 0;
              v228->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              uint64_t v230 = *((void *)&v505 + 1);
              if ((BYTE8(v505) & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v505 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v230 &= 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v222 = REGeomModelDescriptorAddAttributeAlias();
              if ((v230 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v230 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (SHIBYTE(v499.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v499.__r_.__value_.__l.__data_);
              }
            }
            uint64_t v231 = *((void *)&v505 + 1);
            if ((BYTE8(v505) & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v505 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v231 &= 0xFFFFFFFFFFFFFFF8;
            }
            BOOL v232 = (atomic_uint *)(v231 & 0xFFFFFFFFFFFFFFF8);
            if ((v231 & 0xFFFFFFFFFFFFFFF8) != 0) {
              uint64_t v233 = (uint64_t)(v232 + 4);
            }
            else {
              uint64_t v233 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v222);
            }
            unint64_t v234 = *(unsigned __int8 *)(v233 + 23);
            int v235 = (char)v234;
            if ((v234 & 0x80u) != 0) {
              unint64_t v234 = *(void *)(v233 + 8);
            }
            if (v234 >= 9)
            {
              if (v235 < 0) {
                uint64_t v233 = *(void *)v233;
              }
              uint64_t v233 = strncmp((const char *)v233, "primvars:", 9uLL);
              BOOL v236 = v233 == 0;
            }
            else
            {
              BOOL v236 = 0;
            }
            if ((v231 & 7) != 0) {
              atomic_fetch_add_explicit(v232, 0xFFFFFFFE, memory_order_release);
            }
            if (v236)
            {
              uint64_t v237 = *((void *)&v505 + 1);
              if ((BYTE8(v505) & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v505 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v237 &= 0xFFFFFFFFFFFFFFF8;
              }
              if ((v237 & 0xFFFFFFFFFFFFFFF8) == 0) {
                pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v233);
              }
              pxrInternal__aapl__pxrReserved__::TfStringGetSuffix();
              if ((v237 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v237 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (REGeomModelDescriptorGetAttributeIndex() == -1)
              {
                uint64_t v238 = *((void *)&v505 + 1);
                if ((BYTE8(v505) & 7) != 0
                  && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v505 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                {
                  v238 &= 0xFFFFFFFFFFFFFFF8;
                }
                REGeomModelDescriptorAddAttributeAlias();
                if ((v238 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v238 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
              }
              if (SHIBYTE(v499.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v499.__r_.__value_.__l.__data_);
              }
            }
            if ((v506[23] & 0x80000000) != 0) {
              operator delete(*(void **)v506);
            }
            if ((BYTE8(v505) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v505 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            unsigned int v239 = (void **)*((void *)v221 + 1);
            if (v239)
            {
              do
              {
                BOOL v240 = v239;
                unsigned int v239 = (void **)*v239;
              }
              while (v239);
            }
            else
            {
              do
              {
                BOOL v240 = (void **)*((void *)v221 + 2);
                _ZF = *v240 == v221;
                uint64_t v221 = v240;
              }
              while (!_ZF);
            }
            uint64_t v221 = v240;
          }
          while (v240 != &v485);
        }
        std::deque<int>::~deque[abi:ne180100]((uint64_t)v494);
        std::deque<int>::~deque[abi:ne180100]((uint64_t)__p);
        __p[0].__begin_ = (std::vector<unsigned int>::pointer)&v481;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v490);
        std::__tree<realityio::TexcoordID>::destroy((uint64_t)&v484, v485);
        MEMORY[0x2455CE7A0](&v487);
        uint64_t v241 = v477;
LABEL_541:
        if (v241)
        {
          int v401 = REMeshAssetDescriptorAddModel();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v494, &v431);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v494[4], (_DWORD *)&v431 + 1);
          *(_DWORD *)&v494[8] = v401;
          int v255 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v447, &v505, v494);
          if (!*v255)
          {
            unsigned int v256 = operator new(0x28uLL);
            __p[0].__end_ = (std::vector<unsigned int>::pointer)&v448;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v256 + 7, v494);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v256 + 8, &v494[4]);
            v256[9] = *(_DWORD *)&v494[8];
            LOBYTE(__p[0].__end_cap_.__value_) = 1;
            uint64_t v257 = v505;
            *(void *)unsigned int v256 = 0;
            *((void *)v256 + 1) = 0;
            *((void *)v256 + 2) = v257;
            *int v255 = v256;
            if (*v447)
            {
              v447 = (uint64_t **)*v447;
              unsigned int v256 = (_DWORD *)*v255;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v448, (uint64_t *)v256);
            ++v449;
            __p[0].__begin_ = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>>>>::reset[abi:ne180100]((uint64_t)__p, 0);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v494);
          BOOL v420 = v477;
          if (v477) {
            RERetain();
          }
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v467, __p);
          unsigned int v258 = (void *)v438[0];
          if (!v438[0]) {
            goto LABEL_558;
          }
          BOOL v259 = v438;
          do
          {
            uint64_t v260 = v259;
            uint64_t v261 = v258 + 4;
            int v262 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v258 + 4, __p);
            unint64_t v263 = v258 + 1;
            if (!v262)
            {
              unint64_t v263 = v258;
              BOOL v259 = v258;
            }
            unsigned int v258 = (void *)*v263;
          }
          while (*v263);
          if (v259 == v438
            || (!v262 ? (long long v264 = v261) : (long long v264 = v260 + 4),
                pxrInternal__aapl__pxrReserved__::SdfPath::operator<(__p, v264)))
          {
LABEL_558:
            BOOL v259 = v438;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
          LODWORD(v499.__r_.__value_.__l.__data_) = *((_DWORD *)v259 + 15);
          uint64_t v266 = v259[8];
          uint64_t v265 = v259[9];
          uint64_t v267 = v265 - v266;
          if (v265 == v266)
          {
            unint64_t v276 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)REGeomModelDescriptorSetMaterialAssignmentForModel();
            pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v276);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) == 0)
            {
              FaceCFIndex Count = REGeomModelDescriptorGetFaceCount();
              std::vector<unsigned int>::vector(__p, FaceCount, (const std::vector<unsigned int>::value_type *)&v499);
              REGeomModelDescriptorSetMaterialAssignmentsPerFace();
              std::vector<unsigned int>::pointer v275 = __p[0].__begin_;
              if (__p[0].__begin_)
              {
                __p[0].__end_ = __p[0].__begin_;
LABEL_583:
                operator delete(v275);
              }
            }
          }
          else
          {
            unsigned int v268 = REGeomModelDescriptorGetFaceCount();
            std::vector<unsigned int>::vector((std::vector<unsigned int> *)&v505, v268, (const std::vector<unsigned int>::value_type *)&v499);
            uint64_t v269 = 0;
            if ((unint64_t)(v267 / 24) <= 1) {
              uint64_t v270 = 1;
            }
            else {
              uint64_t v270 = v267 / 24;
            }
            do
            {
              pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr((uint64_t *)v494, (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)(v259[8] + 24 * v269));
              realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v494, (uint64_t)__p);
              if (LOBYTE(__p[0].__begin_))
              {
                int v271 = *(_DWORD *)(v259[11] + 4 * v269);
                if (v271 != -1)
                {
                  pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__p[0].__end_);
                  unint64_t p_end_cap = (unint64_t)__p[1].__end_cap_.__value_;
                  pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__p[0].__end_);
                  unsigned int v272 = &__p[1].__end_cap_.__value_[(uint64_t)__p[0].__end_];
                  if ((unsigned int *)p_end_cap != v272)
                  {
                    uint64_t v273 = v505;
                    do
                    {
                      uint64_t v274 = *(int *)p_end_cap;
                      if (v274 < v268) {
                        *(_DWORD *)(v273 + 4 * v274) = v271;
                      }
                      p_end_cap += 4;
                    }
                    while ((unsigned int *)p_end_cap != v272);
                  }
                }
              }
              realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)__p);
              if ((v494[24] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v494[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v494[16]);
              if (*(void *)&v494[8]) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v494[8]);
              }
              ++v269;
            }
            while (v269 != v270);
            REGeomModelDescriptorSetMaterialAssignmentsPerFace();
            std::vector<unsigned int>::pointer v275 = (std::vector<unsigned int>::pointer)v505;
            if ((void)v505)
            {
              *((void *)&v505 + 1) = v505;
              goto LABEL_583;
            }
          }
          realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v420);
        }
        else
        {
          int v401 = -1;
        }
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
        {
          __p[0].__begin_ = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          int v278 = (unsigned int *)v405[3];
          std::vector<unsigned int>::pointer v279 = __p[0].__begin_;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
          if (v278 != v279)
          {
            std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(__p, (_DWORD *)v405 + 4, (_DWORD *)v405 + 6);
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v441, __p, __p);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[0].__end_);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
          }
        }
        int v145 = 0;
LABEL_589:
        realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v477);
        if (SHIBYTE(v425) < 0) {
          operator delete(v424[0]);
        }
        if ((begin & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(begin & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v430 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v430 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v429);
        if (v428) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v428);
        }
        MEMORY[0x2455CEF40](&v471);
        MEMORY[0x2455CF4B0](&v464);
LABEL_598:
        if ((v468 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v468 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v467.__r_.__value_.__r.__words[2]);
        if (v467.__r_.__value_.__l.__size_) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v467.__r_.__value_.__l.__size_);
        }
        if (!v145)
        {
LABEL_130:
          if (!v391) {
            uint64_t v391 = *v405;
          }
          if (v401 != -1)
          {
            uint64_t v90 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
            int v91 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
            if (v91)
            {
              uint64_t v92 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
              pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v416, v92, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v405 + 2));
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v416)) {
                uint64_t v93 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v405 + 2);
              }
              else {
                uint64_t v93 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v431;
              }
            }
            else
            {
              uint64_t v93 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v431;
            }
            pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v467, v90, v93);
            if (v91)
            {
              if ((v419 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v419 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v418);
              if (v417) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v417);
              }
            }
            pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v494, 1.0);
            LODWORD(v499.__r_.__value_.__l.__data_) = v467.__r_.__value_.__l.__data_;
            v499.__r_.__value_.__l.__size_ = v467.__r_.__value_.__l.__size_;
            if (v467.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v467.__r_.__value_.__l.__size_ + 48), 1uLL, memory_order_relaxed);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v499.__r_.__value_.__r.__words[2], &v467.__r_.__value_.__r.__words[2]);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v499.__r_.__value_.__r.__words[2] + 1, (_DWORD *)&v467.__r_.__value_.__r.__words[2] + 1);
            unint64_t v500 = v468;
            if ((v468 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v468 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v500 &= 0xFFFFFFFFFFFFFFF8;
            }
            while ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v499) & 1) != 0)
            {
              if (LODWORD(v499.__r_.__value_.__l.__data_) == v461
                && *(_OWORD *)&v499.__r_.__value_.__r.__words[1] == v462)
              {
                unint64_t v109 = v500;
                if ((v500 & 0xFFFFFFFFFFFFFFF8) == (v463 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_208;
                }
              }
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              uint64_t v464 = MEMORY[0x263F90730] + 16;
              if (v465 && (*(unsigned char *)(v465 + 57) & 8) == 0 && v410(&v464))
              {
                pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v505, 1.0);
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__p, 1.0);
                MEMORY[0x2455CEEE0](&v490, &v464);
                pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation();
                v427 = (std::string *)&v490;
                std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100]((void ***)&v427);
                MEMORY[0x2455CE5D0](&v490, __p);
                long long v505 = v490;
                *(_OWORD *)v506 = v491;
                *(int64x2_t *)&v506[16] = v492;
                long long v507 = v493;
                long long v490 = *(_OWORD *)v494;
                long long v491 = *(_OWORD *)&v494[16];
                int64x2_t v492 = v495;
                long long v493 = v496;
                pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
                *(_OWORD *)uint64_t v494 = v490;
                *(_OWORD *)&v494[16] = v491;
                int64x2_t v495 = v492;
                long long v496 = v493;
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v499, &v490);
                unint64_t v110 = atomic_load(&realityio::tokens::MeshBuilderTokens);
                if (!v110) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
                }
                realityio::MutableDirtyPropertyTable::addProperty(v409, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v490, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v110 + 88));
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v490);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v499, &v490);
                unint64_t v111 = atomic_load(&realityio::tokens::MeshBuilderTokens);
                if (!v111) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
                }
                realityio::MutableDirtyPropertyTable::addProperty(v409, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v490, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v111 + 96));
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v490);
              }
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v499, (uint64_t)__p);
              LODWORD(v499.__r_.__value_.__l.__data_) = __p[0].__begin_;
              std::vector<unsigned int>::pointer v112 = __p[0].__end_;
              __p[0].__end_ = 0;
              std::string::size_type v113 = v499.__r_.__value_.__l.__size_;
              v499.__r_.__value_.__l.__size_ = (std::string::size_type)v112;
              if (v113) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v113);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v499.__r_.__value_.__r.__words[2], (int *)&__p[0].__end_cap_);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v499.__r_.__value_.__r.__words[2] + 4);
              if ((v500 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v500 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              unint64_t v500 = (unint64_t)__p[1].__begin_;
              __p[1].__begin_ = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[0].__end_cap_);
              if (__p[0].__end_) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p[0].__end_);
              }
              MEMORY[0x2455CEF00](&v464);
            }
            unint64_t v109 = v500;
LABEL_208:
            float32x4_t v406 = *(float32x4_t *)v494;
            int64x2_t v394 = v495;
            float32x4_t v396 = *(float32x4_t *)&v494[16];
            long long v392 = v496;
            if ((v109 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v499.__r_.__value_.__r.__words[2]);
            int v114 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v499.__r_.__value_.__l.__size_;
            if (v499.__r_.__value_.__l.__size_) {
              int v114 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v499.__r_.__value_.__l.__size_);
            }
            pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v114);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            int v115 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            float32x4_t v117 = (float32x4_t)v392;
            v117.i32[3] = 1.0;
            float32x4_t v118 = (float32x4_t)v394;
            v118.i32[3] = 0;
            float32x4_t v393 = v117;
            float32x4_t v395 = v118;
            float32x4_t v119 = v396;
            v119.i32[3] = 0;
            float32x4_t v397 = v119;
            float32x4_t v120 = v406;
            v120.i32[3] = 0;
            float32x4_t v407 = v120;
            if (((v388 | v115) & 1) == 0)
            {
              _Q0 = realityio::getGeomPrimitiveOrientation((realityio *)&v467, v116);
              uint64_t v122 = 0;
              _S1 = _Q0.n128_u32[1];
              _S3 = _Q0.n128_u32[2];
              __asm { FMLS            S2, S3, V0.S[2] }
              _S5 = _Q0.n128_u32[3];
              __asm { FMLA            S2, S5, V0.S[3] }
              float v131 = vmlas_n_f32(vmuls_lane_f32(_Q0.n128_f32[2], (float32x4_t)_Q0, 3), _Q0.n128_f32[1], _Q0.n128_f32[0]);
              float v132 = vmlas_n_f32(-(float)(_Q0.n128_f32[1] * _Q0.n128_f32[3]), _Q0.n128_f32[2], _Q0.n128_f32[0]);
              HIDWORD(v133) = 0;
              LODWORD(v133) = _S2;
              *((float *)&v133 + 1) = v131 + v131;
              *((float *)&v133 + 2) = v132 + v132;
              float v134 = vmlas_n_f32(-(float)(_Q0.n128_f32[2] * _Q0.n128_f32[3]), _Q0.n128_f32[1], _Q0.n128_f32[0]);
              __asm
              {
                FMLA            S4, S1, V0.S[1]
                FMLA            S4, S5, V0.S[3]
                FMLS            S4, S0, V0.S[0]
                FMLA            S6, S3, V0.S[1]
              }
              *(float *)&long long v139 = v134 + v134;
              DWORD1(v139) = _S4;
              *((void *)&v139 + 1) = COERCE_UNSIGNED_INT(_S6 + _S6);
              __asm
              {
                FMLA            S7, S0, V0.S[2]
                FMLA            S4, S3, V0.S[1]
                FMLA            S5, S3, V0.S[2]
                FMLS            S5, S0, V0.S[0]
                FMLS            S5, S1, V0.S[1]
              }
              _Q0.n128_f32[0] = _S7 + _S7;
              _Q0.n128_f32[1] = _S4 + _S4;
              _Q0.n128_u64[1] = _S5;
              *(_OWORD *)uint64_t v494 = v133;
              *(_OWORD *)&v494[16] = v139;
              int64x2_t v495 = (int64x2_t)_Q0;
              long long v496 = xmmword_23F7BDF00;
              do
              {
                *(float32x4_t *)((char *)&__p[0].__begin_ + v122) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v407, COERCE_FLOAT(*(_OWORD *)&v494[v122])), v397, *(float32x2_t *)&v494[v122], 1), v395, *(float32x4_t *)&v494[v122], 2), v393, *(float32x4_t *)&v494[v122], 3);
                v122 += 16;
              }
              while (v122 != 64);
            }
            REGeomInstanceCreate();
            REMeshAssetDescriptorAddInstance();
            RERelease();
            if ((v468 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v468 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v467.__r_.__value_.__r.__words[2]);
            if (v467.__r_.__value_.__l.__size_) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v467.__r_.__value_.__l.__size_);
            }
          }
        }
        if ((v470 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v470 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v469.__r_.__value_.__r.__words[2]);
        if (v469.__r_.__value_.__l.__size_) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v469.__r_.__value_.__l.__size_);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v431);
        unint64_t v85 = (realityio::SkeletonPoseDefinitionBuilder *)v400;
        if (v400) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v400);
        }
        uint64_t v86 = v399 + 2;
        if (v399 + 2 == v390) {
          goto LABEL_632;
        }
      }
    }
    int v382 = 0;
    uint64_t SphereDescriptor = 0;
LABEL_632:
    uint64_t v282 = realityio::SkeletonPoseDefinitionBuilder::kOutputName(v85);
    long long v490 = 0uLL;
    int64_t v283 = a2[3];
    if (v283)
    {
      *((void *)&v490 + 1) = std::__shared_weak_count::lock(v283);
      if (*((void *)&v490 + 1)) {
        *(void *)&long long v490 = a2[2];
      }
    }
    MEMORY[0x2455CF830](&v491, v282);
    unint64_t v284 = (unint64_t)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(a2[1], &v490);
    unsigned int v285 = (void *)v284;
    unsigned int v287 = v286;
    if ((void *)v284 == v286)
    {
      std::operator+<char>();
      v308 = std::string::append(&v467, ") at prim path (");
      long long v309 = *(_OWORD *)&v308->__r_.__value_.__l.__data_;
      v469.__r_.__value_.__r.__words[2] = v308->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v469.__r_.__value_.__l.__data_ = v309;
      v308->__r_.__value_.__l.__size_ = 0;
      v308->__r_.__value_.__r.__words[2] = 0;
      v308->__r_.__value_.__r.__words[0] = 0;
      uint64_t v310 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v387);
      int v311 = *(char *)(v310 + 23);
      if (v311 >= 0) {
        unsigned int v312 = (const std::string::value_type *)v310;
      }
      else {
        unsigned int v312 = *(const std::string::value_type **)v310;
      }
      if (v311 >= 0) {
        std::string::size_type v313 = *(unsigned __int8 *)(v310 + 23);
      }
      else {
        std::string::size_type v313 = *(void *)(v310 + 8);
      }
      unint64_t v314 = std::string::append(&v469, v312, v313);
      long long v315 = *(_OWORD *)&v314->__r_.__value_.__l.__data_;
      v499.__r_.__value_.__r.__words[2] = v314->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v499.__r_.__value_.__l.__data_ = v315;
      v314->__r_.__value_.__l.__size_ = 0;
      v314->__r_.__value_.__r.__words[2] = 0;
      v314->__r_.__value_.__r.__words[0] = 0;
      int v316 = std::string::append(&v499, ")");
      long long v317 = *(_OWORD *)&v316->__r_.__value_.__l.__data_;
      *(void *)v506 = *((void *)&v316->__r_.__value_.__l + 2);
      long long v505 = v317;
      v316->__r_.__value_.__l.__size_ = 0;
      v316->__r_.__value_.__r.__words[2] = 0;
      v316->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(__p, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v505);
      *(_OWORD *)&v494[8] = *(_OWORD *)&__p[0].__begin_;
      int v318 = __p[0].__end_cap_.__value_;
      v495.i64[0] = (uint64_t)__p[1].__begin_;
      *(uint64_t *)((char *)v495.i64 + 7) = *(uint64_t *)((char *)&__p[1].__begin_ + 7);
      __int8 end_high = HIBYTE(__p[1].__end_);
      __p[1].__end_ = 0;
      __p[0].__end_cap_.__value_ = 0;
      __p[1].__begin_ = 0;
      v494[0] = 0;
      *(void *)&v494[24] = v318;
      v495.i8[15] = end_high;
      if ((v506[7] & 0x80000000) != 0) {
        operator delete((void *)v505);
      }
      if (SHIBYTE(v499.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v499.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v469.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v467.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_693;
      }
      unsigned int v320 = (std::vector<unsigned int>::pointer *)v467.__r_.__value_.__r.__words[0];
    }
    else
    {
      BOOL v288 = 0;
      uint64_t v289 = 0;
      unint64_t v290 = 0;
      do
      {
        uint64_t v291 = v285[5];
        v293 = *(std::mutex **)(v291 + 16);
        unint64_t v292 = *(std::__shared_weak_count **)(v291 + 24);
        if (v292) {
          atomic_fetch_add_explicit(&v292->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((v285[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
          int v294 = (const void **)((v285[7] & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          int v294 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v284);
        }
        realityio::Outputs::getRawValue<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>(v293, v294, (uint64_t)__p);
        int begin_low = LOBYTE(__p[0].__begin_);
        if (LOBYTE(__p[0].__begin_))
        {
          std::vector<unsigned int>::pointer v296 = __p[0].__end_;
        }
        else
        {
          long long v505 = *(_OWORD *)&__p[0].__end_;
          if (SHIBYTE(__p[1].__end_cap_.__value_) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v506, (const std::string::value_type *)__p[1].__begin_, (std::string::size_type)__p[1].__end_);
            std::vector<unsigned int>::pointer v296 = (std::vector<unsigned int>::pointer)v505;
            std::vector<unsigned int>::pointer v412 = *(std::vector<unsigned int>::pointer *)v506;
            LOBYTE(p_end_cap) = v506[23];
            if (!LOBYTE(__p[0].__begin_) && SHIBYTE(__p[1].__end_cap_.__value_) < 0) {
              operator delete(__p[1].__begin_);
            }
          }
          else
          {
            *(std::vector<unsigned int> *)v506 = __p[1];
            std::vector<unsigned int>::pointer v296 = (std::vector<unsigned int>::pointer)v505;
            std::vector<unsigned int>::pointer v412 = __p[1].__begin_;
            LOBYTE(p_end_cap) = HIBYTE(__p[1].__end_cap_.__value_);
          }
        }
        if (v292) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v292);
        }
        if (begin_low)
        {
          if ((unint64_t)v289 >= v290)
          {
            uint64_t v297 = v289 - v288;
            unint64_t v298 = v297 + 1;
            if ((unint64_t)(v297 + 1) >> 61) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v290 - (void)v288) >> 2 > v298) {
              unint64_t v298 = (uint64_t)(v290 - (void)v288) >> 2;
            }
            if (v290 - (unint64_t)v288 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v284 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v284 = v298;
            }
            if (v284) {
              unint64_t v284 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v284);
            }
            else {
              uint64_t v299 = 0;
            }
            BOOL v300 = (std::vector<unsigned int>::pointer *)(v284 + 8 * v297);
            std::vector<unsigned int>::pointer *v300 = v296;
            uint64_t v301 = v300 + 1;
            while (v289 != v288)
            {
              uint64_t v302 = *--v289;
              *--BOOL v300 = v302;
            }
            unint64_t v290 = v284 + 8 * v299;
            if (v288) {
              operator delete(v288);
            }
            BOOL v288 = v300;
            uint64_t v289 = v301;
          }
          else
          {
            *v289++ = v296;
          }
        }
        else if ((p_end_cap & 0x80) != 0)
        {
          operator delete(v412);
        }
        unsigned int v285 = (void *)*v285;
      }
      while (v285 != v287);
      uint64_t v303 = (char *)v289 - (char *)v288;
      if (v289 == v288)
      {
        unint64_t v304 = 0;
        int v307 = 0;
        uint64_t v306 = 0;
      }
      else
      {
        if (v303 < 0) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v304 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v303 >> 3);
        uint64_t v306 = &v304[8 * v305];
        memmove(v304, v288, (char *)v289 - (char *)v288);
        int v307 = &v304[8 * (v303 >> 3)];
      }
      v494[0] = 1;
      *(void *)&v494[8] = v304;
      *(void *)&v494[16] = v307;
      *(void *)&v494[24] = v306;
      if (!v288) {
        goto LABEL_693;
      }
      unsigned int v320 = v288;
    }
    operator delete(v320);
LABEL_693:
    if ((v491 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v491 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (*((void *)&v490 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v490 + 1));
    }
    if (v494[0])
    {
      unsigned int v321 = *(uint64_t **)&v494[8];
      for (uint64_t k = *(uint64_t **)&v494[16]; v321 != k; ++v321)
      {
        uint64_t v323 = *v321;
        int64_t v324 = (unsigned int *)REMeshAssetDescriptorAddSkeleton();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, (_DWORD *)(v323 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p[0].__begin_ + 1, (_DWORD *)(v323 + 20));
        __p[0].__end_ = v324;
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>(&v444, __p, (uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        uint64_t v325 = *(_DWORD **)(v323 + 8);
        if (v325)
        {
          std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(__p, (_DWORD *)(v323 + 16), v325);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v441, __p, __p);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[0].__end_);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v505);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v431 = 0;
    begiuint64_t n = 0;
    ModelCFIndex Count = (realityio *)REMeshAssetDescriptorGetModelCount();
    if (ModelCount)
    {
      memset(__p, 0, 24);
      unint64_t v327 = a2[5];
      PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v461);
      uint64_t v329 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
      std::string::basic_string[abi:ne180100]<0>(&v490, "Mesh");
      int64_t v330 = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v461);
      char AssetURLFromBundle = realityio::ImportSessionImpl::getAssetURLFromBundle(v327->__shared_weak_owners_, v329, (uint64_t *)&v490, (uint64_t)v330, (uint64_t)__p);
      if (SBYTE7(v491) < 0) {
        operator delete((void *)v490);
      }
      if (AssetURLFromBundle)
      {
        uint64_t v332 = REMemoryAssetParametersCreate();
        if (begin) {
          RERelease();
        }
        begiuint64_t n = v332;
        REMemoryAssetParametersSetAsyncRegistration();
        REMemoryAssetParametersSetAssetName();
        ModelCFIndex Count = (realityio *)REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsWithParameters();
      }
      else
      {
        ModelCFIndex Count = (realityio *)REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsAsyncRegistration();
      }
      uint64_t v431 = (uint64_t)ModelCount;
      if (SHIBYTE(__p[0].__end_cap_.__value_) < 0) {
        operator delete(__p[0].__begin_);
      }
    }
    else if (SphereDescriptor)
    {
      REAssetRegistrationOptionsCreate();
      uint64_t v431 = REAssetHandleCreateFromAssetRegistrationOptions();
      ModelCFIndex Count = (realityio *)RERelease();
    }
    if (v431)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v461, __p);
      uint64_t v333 = (std::__shared_weak_count_vtbl *)a2[5];
      v334 = (std::__shared_weak_count *)operator new(0x50uLL);
      v334->__shared_owners_ = 0;
      v334->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346AC8;
      v334[1].__shared_owners_ = 0;
      LOBYTE(v334[1].__shared_weak_owners_) = 0;
      v334[2].__vftable = 0;
      v334[2].__shared_owners_ = 0;
      v398 = v334 + 1;
      v334->__shared_weak_owners_ = 0;
      v334[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346B18;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v334[2].__shared_weak_owners_, __p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v334[2].__shared_weak_owners_ + 1, (_DWORD *)&__p[0].__begin_ + 1);
      v334[3].__vftable = v333;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      realityio::WrappedRERef<REAsset *>::operator=(&v334[1].__shared_owners_, &v431);
      uint64_t v335 = *(void *)(*(void *)(a2[5]->__shared_weak_owners_ + 40) + 488);
      *(void *)&long long v415 = v334 + 1;
      *((void *)&v415 + 1) = v334;
      atomic_fetch_add_explicit(&v334->__shared_owners_, 1uLL, memory_order_relaxed);
      realityio::AssetLoadTracker::add(v335, &v415);
      if (*((void *)&v415 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v415 + 1));
      }
      v424[1] = 0;
      v424[0] = 0;
      std::string::size_type v425 = 0;
      std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(v424, v439, v440, (v440 - v439) >> 3);
      std::string::size_type v414 = 0;
      uint64_t v428 = 0;
      v427 = 0;
      uint64_t v429 = 0;
      memset(&v487, 0, sizeof(v487));
      v485 = 0;
      uint64_t v484 = 0;
      uint64_t v486 = 0;
      v482 = 0;
      BOOL v481 = 0;
      uint64_t v483 = 0;
      memset(&__str, 0, sizeof(__str));
      v478 = 0;
      size_t v477 = 0;
      uint64_t v479 = 0;
      if ((int)((v433 - v432) >> 5) < 1)
      {
        size_t v347 = 0;
        v346 = 0;
      }
      else
      {
        uint64_t v336 = 0;
        uint64_t v403 = ((v433 - v432) >> 5);
        do
        {
          size_t v475 = 0;
          v476 = 0;
          int v474 = &v475;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          uint64_t v471 = MEMORY[0x263F906B0] + 16;
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)__p, &v472, &v473);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          unint64_t v500 = 0;
          v499.__r_.__value_.__r.__words[0] = MEMORY[0x263F90768] + 16;
          if (((uint64_t)__p[1].__begin_ & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[1].__begin_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[0].__end_cap_);
          if (__p[0].__end_) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p[0].__end_);
          }
          MEMORY[0x2455CF2D0](__p, &v499);
          uint64_t v337 = v503[1];
          uint64_t v338 = v503[0];
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v490, &v472, &v473);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v490, &v469);
          uint64_t v339 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v469);
          int v340 = (_OWORD *)__str.__r_.__value_.__l.__size_;
          if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v342 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__str, (long long *)v339);
          }
          else
          {
            if (*(char *)(v339 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__str.__r_.__value_.__l.__size_, *(const std::string::value_type **)v339, *(void *)(v339 + 8));
            }
            else
            {
              long long v341 = *(_OWORD *)v339;
              *(void *)(__str.__r_.__value_.__l.__size_ + 16) = *(void *)(v339 + 16);
              *int v340 = v341;
            }
            std::string::size_type v342 = (std::string::size_type)v340 + 24;
          }
          __str.__r_.__value_.__l.__size_ = v342;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v469);
          if ((BYTE8(v491) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v491 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v491);
          if (*((void *)&v490 + 1)) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v490 + 1));
          }
          if (v337 != v338)
          {
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource((uint64_t *)&v469, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v499);
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v469))
            {
              MEMORY[0x2455CE910](&v490);
              pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetAnimQuery((uint64_t *)&v467, (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v490, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v469);
              if (*((void *)&v490 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v490 + 1));
              }
              pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeOrder((uint64_t *)&v490, (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)&v467);
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v490);
              for (uint64_t m = (void *)v492.i64[0]; ; ++m)
              {
                pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v490);
                if (m == (void *)(v492.i64[0] + 8 * v490)) {
                  break;
                }
                if ((*m & 0xFFFFFFFFFFFFFFF8) != 0) {
                  size_t v345 = (const void **)((*m & 0xFFFFFFFFFFFFFFF8) + 16);
                }
                else {
                  size_t v345 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v344);
                }
                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v474, v345, (uint64_t)v345);
              }
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v490);
              pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr((atomic_uint **)&v467);
            }
            v492.i64[0] = 0;
            long long v490 = 0u;
            long long v491 = 0u;
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr((uint64_t *)&v467, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v499);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
          }
          *(void *)&long long v490 = &v504;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v490);
          *(void *)&long long v490 = v503;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::_BlendShape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v490);
          if (__p[1].__end_)
          {
            __p[1].__end_cap_.__value_ = __p[1].__end_;
            operator delete(__p[1].__end_);
          }
          if (((uint64_t)__p[1].__begin_ & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[1].__begin_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[0].__end_cap_);
          if (__p[0].__end_) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p[0].__end_);
          }
          MEMORY[0x2455CF050](&v499);
          MEMORY[0x2455CE8E0](&v471);
          std::__tree<std::string>::destroy((uint64_t)&v474, v475);
          ++v336;
        }
        while (v336 != v403);
        v346 = v428;
        size_t v347 = v427;
      }
      std::vector<char const*>::resize((uint64_t)&v487, 0xAAAAAAAAAAAAAAABLL * (((char *)v346 - (char *)v347) >> 3));
      size_t v349 = v427;
      int v350 = v428;
      if (v427 != v428)
      {
        BOOL v351 = (std::string **)v487.__r_.__value_.__r.__words[0];
        do
        {
          if ((v349->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v352 = v349;
          }
          else {
            uint64_t v352 = (std::string *)v349->__r_.__value_.__r.__words[0];
          }
          *v351++ = v352;
          ++v349;
        }
        while (v349 != v350);
      }
      std::vector<char const*>::resize((uint64_t)&v477, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
      std::string::size_type v354 = __str.__r_.__value_.__l.__size_;
      std::string::size_type v353 = __str.__r_.__value_.__r.__words[0];
      if (__str.__r_.__value_.__r.__words[0] != __str.__r_.__value_.__l.__size_)
      {
        v355 = (std::string::size_type *)v477;
        do
        {
          if (*(char *)(v353 + 23) >= 0) {
            std::string::size_type v356 = v353;
          }
          else {
            std::string::size_type v356 = *(void *)v353;
          }
          *v355++ = v356;
          v353 += 24;
        }
        while (v353 != v354);
      }
      if (v485 != v484 && v482 != v481)
      {
        uint64_t AssetWithDefinitionsAndWeightNames = REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitionsAndWeightNames();
        if (v414) {
          RERelease();
        }
        std::string::size_type v414 = AssetWithDefinitionsAndWeightNames;
      }
      if (v477)
      {
        v478 = v477;
        operator delete(v477);
      }
      __p[0].__begin_ = (std::vector<unsigned int>::pointer)&__str;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v481)
      {
        v482 = v481;
        operator delete(v481);
      }
      if (v484)
      {
        v485 = v484;
        operator delete(v484);
      }
      if (v487.__r_.__value_.__r.__words[0])
      {
        v487.__r_.__value_.__l.__size_ = v487.__r_.__value_.__r.__words[0];
        operator delete(v487.__r_.__value_.__l.__data_);
      }
      __p[0].__begin_ = (std::vector<unsigned int>::pointer)&v427;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      char v358 = v435[9];
      size_t v359 = (char *)operator new(0xD8uLL);
      v360 = v359;
      *((void *)v359 + 1) = 0;
      *((void *)v359 + 2) = 0;
      *(void *)size_t v359 = &unk_26F346B48;
      atomic_fetch_add_explicit(&v334->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)v359 + 3) = v398;
      size_t v361 = v359 + 24;
      v499.__r_.__value_.__r.__words[0] = v414;
      std::string::size_type v414 = 0;
      *((void *)v359 + 4) = v334;
      atomic_fetch_add_explicit(&v334->__shared_owners_, 1uLL, memory_order_relaxed);
      *(_OWORD *)(v359 + 40) = v450;
      *((void *)v359 + 7) = v451;
      uint64_t v451 = 0;
      long long v450 = 0uLL;
      *((_OWORD *)v359 + 4) = *(_OWORD *)v424;
      *((void *)v359 + 10) = v425;
      v424[0] = 0;
      v424[1] = 0;
      v362 = v445;
      *((void *)v359 + 11) = v444;
      std::string::size_type v425 = 0;
      *((void *)v359 + 12) = v362;
      size_t v363 = v359 + 96;
      uint64_t v364 = v446;
      *((void *)v359 + 13) = v446;
      if (v364)
      {
        v362[2] = v363;
        uint64_t v444 = (uint64_t *)&v445;
        v445 = 0;
        uint64_t v446 = 0;
      }
      else
      {
        *((void *)v359 + 11) = v363;
      }
      BOOL v365 = v442;
      *((void *)v359 + 15) = v442;
      v366 = v359 + 120;
      *((void *)v359 + 14) = v441;
      uint64_t v367 = v443;
      *((void *)v359 + 16) = v443;
      if (v367)
      {
        v365[2] = v366;
        v441 = (uint64_t *)&v442;
        v442 = 0;
        uint64_t v443 = 0;
      }
      else
      {
        *((void *)v359 + 14) = v366;
      }
      if ((v506[7] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v359 + 136), (const std::string::value_type *)v505, *((std::string::size_type *)&v505 + 1));
      }
      else
      {
        *(_OWORD *)(v359 + 136) = v505;
        *((void *)v359 + 19) = *(void *)v506;
      }
      v368 = (std::string *)(v360 + 160);
      if ((v506[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v368, *(const std::string::value_type **)&v506[8], *(std::string::size_type *)&v506[16]);
      }
      else
      {
        *(_OWORD *)&v368->__r_.__value_.__l.__data_ = *(_OWORD *)&v506[8];
        *((void *)v360 + 22) = *(void *)&v506[24];
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v360 + 46, &v488);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v360 + 47, (_DWORD *)&v488 + 1);
      v360[192] = v382 != 0;
      std::string::size_type v369 = v499.__r_.__value_.__r.__words[0];
      *((void *)v360 + 25) = v499.__r_.__value_.__r.__words[0];
      if (v369) {
        RERetain();
      }
      v360[208] = v358;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)&v444, v445);
      uint64_t v446 = 0;
      uint64_t v444 = (uint64_t *)&v445;
      v445 = 0;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v441, v442);
      uint64_t v443 = 0;
      v441 = (uint64_t *)&v442;
      v442 = 0;
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v499);
      std::__shared_weak_count::__release_shared[abi:ne180100](v334);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v414);
      __p[0].__begin_ = (std::vector<unsigned int>::pointer)v424;
      std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      uint64_t v371 = *((void *)this + 2);
      uint64_t v372 = (std::__shared_weak_count *)*((void *)this + 3);
      if (v372) {
        atomic_fetch_add_explicit(&v372->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v373 = (unsigned int *)realityio::MeshAssetBuilder::kOutputName(v370);
      std::mutex::lock((std::mutex *)(v371 + 64));
      uint64_t v374 = operator new(0x30uLL);
      v374[1] = 0;
      v374[2] = 0;
      *uint64_t v374 = &unk_26F346B98;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v360 + 1, 1uLL, memory_order_relaxed);
      v374[3] = &unk_26F346BE8;
      v374[4] = v361;
      v374[5] = v360;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v360 + 1, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v360);
      __p[0].__begin_ = v373;
      v375 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v371 + 40), (const void **)v373, (uint64_t)&std::piecewise_construct, (long long **)__p);
      uint64_t v376 = (std::__shared_weak_count *)v375[8];
      v375[7] = (uint64_t)(v374 + 3);
      v375[8] = (uint64_t)v374;
      if (v376) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v376);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v371, (unsigned __int8 *)v373, (uint64_t)v373);
      std::mutex::unlock((std::mutex *)(v371 + 64));
      if (v372) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v372);
      }
      *(void *)&long long v413 = v334 + 1;
      *((void *)&v413 + 1) = v334;
      atomic_fetch_add_explicit(&v334->__shared_owners_, 1uLL, memory_order_relaxed);
      std::vector<std::shared_ptr<realityio::AssetLoadTracker::Asset>>::push_back[abi:ne180100]((uint64_t *)this + 11, &v413);
      if (*((void *)&v413 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v413 + 1));
      }
      uint64_t v377 = (uint64_t)a2[5];
      uint64_t v378 = v431;
      atomic_fetch_add_explicit(&v334->__shared_owners_, 1uLL, memory_order_relaxed);
      v498 = 0;
      v379 = operator new(0x30uLL);
      void *v379 = &unk_26F346C18;
      v379[1] = v378;
      v379[2] = this;
      v379[3] = v398;
      v379[4] = v334;
      v379[5] = v384;
      v498 = v379;
      realityio::ImportSession::performBlockPostAssetLoadOnEngineQueue(v377, (uint64_t)v497);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v497);
      RERelease();
      RERelease();
      if (SphereDescriptor) {
        RERelease();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v360);
      std::__shared_weak_count::__release_shared[abi:ne180100](v334);
    }
    else
    {
      v348 = *(id *)(realityio::logObjects(ModelCount) + 24);
      if (os_log_type_enabled(v348, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0].__begin_) = 0;
        _os_log_impl(&dword_23F4EA000, v348, OS_LOG_TYPE_DEFAULT, "Could not create valid meshAssetRef.", (uint8_t *)__p, 2u);
      }

      RERelease();
    }
    realityio::WrappedRERef<REMemoryAssetParameters *>::~WrappedRERef(&begin);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v488);
    if ((v506[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v506[8]);
    }
    if ((v506[7] & 0x80000000) != 0) {
      operator delete((void *)v505);
    }
    realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)v494);
    __p[0].__begin_ = (std::vector<unsigned int>::pointer)&v432;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    realityio::Result<MaterialIndexAssignor,realityio::DetailedError>::~Result((uint64_t)v435, v380);
    goto LABEL_812;
  }
LABEL_816:
  if ((v463 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v463 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v462 + 8);
  uint64_t result = v462;
  if ((void)v462) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v462);
  }
  return result;
}

void sub_23F6DF810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0xAA0]);
  MEMORY[0x2455CEF40](&STACK[0xB00]);
  MEMORY[0x2455CF4B0](&STACK[0xB30]);
  if ((STACK[0x2E8] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2E8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x2F0]);
  MEMORY[0x2455CEF40](&STACK[0x9A8]);
  MEMORY[0x2455CF4B0](&STACK[0x938]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x960]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x980]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x310]);
  if (a72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a72);
  }
  STACK[0xA60] = (unint64_t)&STACK[0x318];
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA60]);
  realityio::Result<MaterialIndexAssignor,realityio::DetailedError>::~Result((uint64_t)&STACK[0x330], v73);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&STACK[0x828], (void *)STACK[0x830]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)&STACK[0x840], (void *)STACK[0x848]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)&STACK[0x858], (void *)STACK[0x860]);
  STACK[0x330] = (unint64_t)&STACK[0x870];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x330]);
  uint64_t v74 = (void *)STACK[0x888];
  if (STACK[0x888])
  {
    STACK[0x890] = (unint64_t)v74;
    operator delete(v74);
  }
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&STACK[0x8A0]);
  STACK[0xA60] = (unint64_t)&STACK[0x8E0];
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA60]);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair((uint64_t)&STACK[0x8F8]);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&STACK[0x908]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x918]);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimInPrototype@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    uint64_t v5 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(a2, (uint64_t *)this + 1, &v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  }
  else
  {
    *(_DWORD *)a2 = 1;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

void sub_23F6E0698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

void MaterialIndexAssignor::make(unsigned char *a1, uint64_t *a2, void *a3, char a4, uint64_t a5, pxrInternal__aapl__pxrReserved__::UsdStage *a6, uint64_t *a7)
{
  uint64_t v223 = *MEMORY[0x263EF8340];
  LODWORD(v177) = 0;
  uint64_t v178 = v179;
  v179[0] = 0;
  v181[0] = 0;
  v181[1] = 0;
  v179[1] = 0;
  uint64_t v180 = (uint64_t *)v181;
  v183[1] = 0;
  long long v184 = 0uLL;
  unint64_t v182 = (uint64_t *)v183;
  v183[0] = 0;
  uint64_t v185 = 0;
  *(void *)&long long v11 = 0xFFFFFFFFLL;
  *((void *)&v11 + 1) = 0xFFFFFFFFLL;
  long long v186 = v11;
  unint64_t v188 = 0;
  uint64_t v189 = 0;
  char v187 = &v188;
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::concurrent_unordered_base((uint64_t)v190, 8uLL, &v219);
  uint64_t v162 = a1;
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::concurrent_unordered_base((uint64_t)v191, 8uLL, &v219);
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v14 = v12 - *a2;
  char v15 = (char *)*((void *)&v184 + 1);
  uint64_t v16 = (char *)v184;
  long long v168 = a6;
  if (*((void *)&v184 + 1) == (void)v184)
  {
    uint64_t v17 = v12 - *a2;
  }
  else
  {
    do
    {
      v15 -= 8;
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(v15);
    }
    while (v15 != v16);
    uint64_t v17 = a2[1] - *a2;
    char v15 = (char *)v184;
  }
  *((void *)&v184 + 1) = v16;
  if (v17 >> 2 > (unint64_t)(((char *)v185 - v15) >> 3))
  {
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
    }
    v210[0] = &v185;
    v207[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v185, v17 >> 2);
    v207[1] = (char *)v207[0] + v16 - v15;
    unint64_t v208 = (unsigned int **)v207[1];
    uint64_t v209 = (uint64_t)v207[0] + 8 * v18;
    std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer((uint64_t *)&v184, v207);
    std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)v207);
  }
  char v172 = a3;
  if (v12 != v13)
  {
    uint64_t v19 = 0;
    if ((unint64_t)(v14 >> 3) <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v14 >> 3;
    }
    do
    {
      uint64_t v21 = *(void *)(*a2 + 8 * v19);
      if (v21)
      {
        if (*(void *)(v21 + 8))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v219, *(_DWORD **)(*a2 + 8 * v19));
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v219 + 1, (_DWORD *)(v21 + 4));
          BYTE8(v219) = 0;
          if (v183 == (void **)std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)&v182, (uint64_t)&v219))
          {
            uint64_t v22 = (uint64_t)(*((void *)&v184 + 1) - v184) >> 3;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v207, &v219);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v207 + 1, (_DWORD *)&v219 + 1);
            LOBYTE(v207[1]) = BYTE8(v219);
            unint64_t v208 = (unsigned int **)v22;
            std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::__emplace_unique_key_args<MaterialIndexAssignor::MaterialKey,std::pair<MaterialIndexAssignor::MaterialKey,unsigned long>>(&v182, (uint64_t)v207, (uint64_t)v207);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v207);
            v205.__begin_ = *(std::vector<unsigned int>::pointer *)(v21 + 8);
            if (v205.__begin_) {
              RERetain();
            }
            uint64_t v23 = *((void *)&v184 + 1);
            if (*((void *)&v184 + 1) >= (unint64_t)v185)
            {
              uint64_t v25 = (uint64_t)(*((void *)&v184 + 1) - v184) >> 3;
              if ((unint64_t)(v25 + 1) >> 61) {
                std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v26 = (uint64_t)((uint64_t)v185 - v184) >> 2;
              if (v26 <= v25 + 1) {
                unint64_t v26 = v25 + 1;
              }
              if ((unint64_t)((unint64_t)v185 - v184) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v26;
              }
              v210[0] = &v185;
              if (v27) {
                uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v185, v27);
              }
              else {
                uint64_t v28 = 0;
              }
              std::string::size_type v29 = (std::vector<unsigned int>::pointer *)&v28[8 * v25];
              v207[0] = v28;
              v207[1] = v29;
              uint64_t v209 = (uint64_t)&v28[8 * v27];
              std::vector<unsigned int>::pointer *v29 = v205.__begin_;
              v205.__begin_ = 0;
              unint64_t v208 = v29 + 1;
              std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer((uint64_t *)&v184, v207);
              uint64_t v24 = *((void *)&v184 + 1);
              std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)v207);
            }
            else
            {
              **((void **)&v184 + 1) = v205.__begin_;
              uint64_t v24 = v23 + 8;
              v205.__begin_ = 0;
            }
            *((void *)&v184 + 1) = v24;
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v205);
            a3 = v172;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v219);
        }
        if (*(void *)(v21 + 16))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v219, (_DWORD *)v21);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v219 + 1, (_DWORD *)(v21 + 4));
          BYTE8(v219) = 1;
          if (v183 == (void **)std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)&v182, (uint64_t)&v219))
          {
            uint64_t v30 = (uint64_t)(*((void *)&v184 + 1) - v184) >> 3;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v207, &v219);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v207 + 1, (_DWORD *)&v219 + 1);
            LOBYTE(v207[1]) = BYTE8(v219);
            unint64_t v208 = (unsigned int **)v30;
            std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::__emplace_unique_key_args<MaterialIndexAssignor::MaterialKey,std::pair<MaterialIndexAssignor::MaterialKey,unsigned long>>(&v182, (uint64_t)v207, (uint64_t)v207);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v207);
            v205.__begin_ = *(std::vector<unsigned int>::pointer *)(v21 + 16);
            a3 = v172;
            if (v205.__begin_) {
              RERetain();
            }
            uint64_t v31 = *((void *)&v184 + 1);
            if (*((void *)&v184 + 1) >= (unint64_t)v185)
            {
              uint64_t v33 = (uint64_t)(*((void *)&v184 + 1) - v184) >> 3;
              if ((unint64_t)(v33 + 1) >> 61) {
                std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v34 = (uint64_t)((uint64_t)v185 - v184) >> 2;
              if (v34 <= v33 + 1) {
                unint64_t v34 = v33 + 1;
              }
              if ((unint64_t)((unint64_t)v185 - v184) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v34;
              }
              v210[0] = &v185;
              if (v35) {
                uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v185, v35);
              }
              else {
                uint64_t v36 = 0;
              }
              uint64_t v37 = (std::vector<unsigned int>::pointer *)&v36[8 * v33];
              v207[0] = v36;
              v207[1] = v37;
              uint64_t v209 = (uint64_t)&v36[8 * v35];
              *uint64_t v37 = v205.__begin_;
              v205.__begin_ = 0;
              unint64_t v208 = v37 + 1;
              std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer((uint64_t *)&v184, v207);
              uint64_t v32 = *((void *)&v184 + 1);
              std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)v207);
            }
            else
            {
              **((void **)&v184 + 1) = v205.__begin_;
              uint64_t v32 = v31 + 8;
              v205.__begin_ = 0;
            }
            *((void *)&v184 + 1) = v32;
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v205);
            LOBYTE(v177) = 1;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v219);
        }
      }
      ++v19;
    }
    while (v20 != v19);
  }
  uint64_t v39 = *a3;
  uint64_t v38 = a3[1];
  long long v40 = v184;
  size_t v41 = *((void *)&v184 + 1) - v184;
  std::vector<unsigned int>::size_type v42 = (uint64_t)(*((void *)&v184 + 1) - v184) >> 3;
  std::vector<unsigned int>::value_type __x = -1;
  std::vector<unsigned int>::vector(&v205, v42, &__x);
  size_t v163 = v41;
  unint64_t v164 = v42;
  if (v38 == v39)
  {
    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    unsigned int v45 = 0;
    unint64_t v173 = (v38 - v39) >> 4;
    int v46 = v168;
    do
    {
      uint64_t v47 = (uint64_t *)(*a3 + 16 * v43);
      uint64_t v48 = *v47;
      unsigned int v49 = (std::__shared_weak_count *)v47[1];
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v48)
      {
        BOOL v198 = 0;
        unsigned int v203 = 0;
        std::string v202 = 0;
        uint64_t v204 = 0;
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)v207, v46, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v48 + 8));
        uint64_t v50 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        *(void *)&long long v219 = MEMORY[0x263F906B0] + 16;
        int BoundSubsetsAndCoverage = realityio::getBoundSubsetsAndCoverage(v50, (void **)&v202, &v198);
        MEMORY[0x2455CE8E0](&v219);
        if (!BoundSubsetsAndCoverage) {
          goto LABEL_69;
        }
        BOOL v52 = !v198;
        if (v203 != v202)
        {
          uint64_t v53 = 0;
          if ((unint64_t)(((char *)v203 - (char *)v202) / 24) <= 1) {
            uint64_t v54 = 1;
          }
          else {
            uint64_t v54 = ((char *)v203 - (char *)v202) / 24;
          }
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            *((void *)&v220 + 1) = 0;
            *(void *)&long long v219 = MEMORY[0x263F907A0] + 16;
            if (!atomic_load(MEMORY[0x263F90550])) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
            }
            pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v195, &v200);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v192, &v200);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v193, &v201);
            char v194 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
            int v56 = std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)&v182, (uint64_t)&v192);
            if (v183 == (void **)v56)
            {
              BOOL v52 = 1;
            }
            else
            {
              uint64_t v57 = v56[6];
              if (v205.__begin_[v57] == -1) {
                v205.__begin_[v57] = v44++;
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v192);
            MEMORY[0x2455CEF40](&v195);
            MEMORY[0x2455CF4B0](&v219);
            v53 += 24;
            --v54;
          }
          while (v54);
        }
        int v46 = v168;
        a3 = v172;
        if (v52)
        {
LABEL_69:
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          *((void *)&v220 + 1) = 0;
          *(void *)&long long v219 = MEMORY[0x263F907A0] + 16;
          if (!atomic_load(MEMORY[0x263F90550])) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v195, &v200);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v192, &v200);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v193, &v201);
          char v194 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
          unsigned int v59 = std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)&v182, (uint64_t)&v192);
          if (v183 != (void **)v59)
          {
            uint64_t v60 = v59[6];
            if (v205.__begin_[v60] == -1) {
              v205.__begin_[v60] = v44++;
            }
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v192);
          MEMORY[0x2455CEF40](&v195);
          MEMORY[0x2455CF4B0](&v219);
        }
        if ((v209 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v209 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v208);
        if (v207[1]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v207[1]);
        }
        v207[0] = &v202;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)v207);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      uint64_t v43 = ++v45;
    }
    while (v173 > v45);
  }
  if (*((void *)&v40 + 1) == (void)v40)
  {
    v207[1] = 0;
    v207[0] = 0;
    unint64_t v208 = 0;
  }
  else
  {
    begiuint64_t n = v205.__begin_;
    if (v164 <= 1) {
      uint64_t v62 = 1;
    }
    else {
      uint64_t v62 = v164;
    }
    uint64_t v63 = v62;
    do
    {
      if (*begin == -1) {
        *begiuint64_t n = v44++;
      }
      ++begin;
      --v63;
    }
    while (v63);
    v207[1] = 0;
    v207[0] = 0;
    unint64_t v208 = 0;
    *(void *)&long long v219 = v207;
    BYTE8(v219) = 0;
    std::vector<realityio::WrappedRERef<REAsset *>>::__vallocate[abi:ne180100](v207, v164);
    uint64_t v64 = (char *)v207[1];
    bzero(v207[1], v163);
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    v207[1] = &v64[v163];
    do
    {
      realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)v207[0] + v205.__begin_[v66++], (uint64_t *)(v184 + v65));
      v65 += 8;
    }
    while (v62 != v66);
  }
  std::vector<realityio::WrappedRERef<REAsset *>>::__vdeallocate((void **)&v184);
  long long v184 = *(_OWORD *)v207;
  uint64_t v185 = v208;
  v207[1] = 0;
  v207[0] = 0;
  unint64_t v208 = 0;
  uint64_t v67 = v182;
  unint64_t v68 = v168;
  if (v182 != (uint64_t *)v183)
  {
    std::vector<unsigned int>::pointer v69 = v205.__begin_;
    do
    {
      v67[6] = v69[v67[6]];
      uint64_t v70 = (uint64_t *)v67[1];
      if (v70)
      {
        do
        {
          unsigned int v71 = v70;
          uint64_t v70 = (uint64_t *)*v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          unsigned int v71 = (uint64_t *)v67[2];
          BOOL v72 = *v71 == (void)v67;
          uint64_t v67 = v71;
        }
        while (!v72);
      }
      uint64_t v67 = v71;
    }
    while (v71 != (uint64_t *)v183);
  }
  *(void *)&long long v219 = v207;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
  if (v205.__begin_)
  {
    v205.__end_ = v205.__begin_;
    operator delete(v205.__begin_);
  }
  uint64_t v73 = a3[1] - *a3;
  if (v73)
  {
    uint64_t v74 = 0;
    unint64_t v75 = v73 >> 4;
    if (v75 <= 1) {
      uint64_t v76 = 1;
    }
    else {
      uint64_t v76 = v75;
    }
    while (1)
    {
      uint64_t v77 = *(void *)(*a3 + 16 * v74);
      if (v77) {
        break;
      }
LABEL_129:
      if (++v74 == v76) {
        goto LABEL_162;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v192, (_DWORD *)(v77 + 8));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v193, (_DWORD *)(v77 + 12));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v205, v68, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v192);
    hasMaterialXSurface = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)realityio::hasMaterialXSurface((realityio *)&v205, v78);
    if ((hasMaterialXSurface & 1) != 0
      || (pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(hasMaterialXSurface),
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
          !pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
      || (pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(),
          v207[0] = (void *)(MEMORY[0x263F90690] + 16),
          char v81 = realityio::isCatmullClarkSurface((realityio *)v207, v80) & a4,
          MEMORY[0x2455CE7A0](v207),
          (v81 & 1) == 0))
    {
      MaterialIndexAssignor::registerNonSubdGPrim(&v177, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v205);
LABEL_124:
      if ((v206 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v206 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v205.__end_cap_);
      if (v205.__end_) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v205.__end_);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v192);
      goto LABEL_129;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v205, v207);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v219, v207);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v219 + 1, (_DWORD *)v207 + 1);
    WORD4(v219) = 1;
    HIDWORD(v219) = -1;
    long long v220 = 0u;
    long long v221 = 0u;
    long long v222 = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v207);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v207[0] = (void *)(MEMORY[0x263F90690] + 16);
    int v82 = realityio::getBoundSubsetsAndCoverage((uint64_t)v207, (void **)&v220, (BOOL *)((unint64_t)&v219 | 9));
    MEMORY[0x2455CE7A0](v207);
    long long v161 = v220;
    unint64_t v83 = (*((void *)&v220 + 1) - (void)v220) / 24;
    if (*((void *)&v220 + 1) == (void)v220)
    {
      LOBYTE(v85) = 0;
    }
    else
    {
      uint64_t v84 = 0;
      int v85 = 0;
      if (v83 <= 1) {
        uint64_t v86 = 1;
      }
      else {
        uint64_t v86 = (*((void *)&v220 + 1) - (void)v220) / 24;
      }
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        uint64_t v209 = 0;
        v207[0] = (void *)(MEMORY[0x263F907A0] + 16);
        if (!atomic_load(MEMORY[0x263F90550])) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
        v85 |= realityio::isMaterialX((realityio *)&v202, v88);
        MEMORY[0x2455CEF40](&v202);
        MEMORY[0x2455CF4B0](v207);
        v84 += 24;
        --v86;
      }
      while (v86);
    }
    if (BYTE9(v219)) {
      char v89 = 0;
    }
    else {
      char v89 = v82;
    }
    if (v89 & 1) != 0 || (v85) {
      goto LABEL_157;
    }
    if (v82)
    {
      std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)&v221 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v220 + 1) - v220) >> 3), &MaterialIndexAssignor::kInvalidMaterialIndex);
      if (*((void *)&v161 + 1) != (void)v161)
      {
        uint64_t v90 = 0;
        uint64_t v91 = 0;
        if (v83 <= 1) {
          unint64_t v83 = 1;
        }
        char v92 = 1;
        do
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          uint64_t v209 = 0;
          v207[0] = (void *)(MEMORY[0x263F907A0] + 16);
          if (!atomic_load(MEMORY[0x263F90550])) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v202, &v200);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v195, &v200);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v196, &v201);
          char v197 = 1;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
          unsigned int v94 = std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)&v182, (uint64_t)&v195);
          if (v183 == (void **)v94) {
            char v92 = 0;
          }
          else {
            *(_DWORD *)(*((void *)&v221 + 1) + 4 * v91) = v94[6];
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v195);
          MEMORY[0x2455CEF40](&v202);
          MEMORY[0x2455CF4B0](v207);
          ++v91;
          v90 += 24;
        }
        while (v83 != v91);
        if ((v92 & 1) == 0)
        {
LABEL_157:
          MaterialIndexAssignor::registerNonSubdGPrim(&v177, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v205);
          a3 = v172;
LABEL_158:
          if (*((void *)&v221 + 1))
          {
            *(void *)&long long v222 = *((void *)&v221 + 1);
            operator delete(*((void **)&v221 + 1));
          }
          v207[0] = &v220;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)v207);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          unint64_t v68 = v168;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v219);
          goto LABEL_124;
        }
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v209 = 0;
      v207[0] = (void *)(MEMORY[0x263F907A0] + 16);
      if (!atomic_load(MEMORY[0x263F90550])) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v202, &v200);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v195, &v200);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v196, &v201);
      char v197 = 1;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
      uint64_t v96 = std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)&v182, (uint64_t)&v195);
      int v97 = v96;
      if (v183 != (void **)v96) {
        HIDWORD(v219) = v96[6];
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v195);
      MEMORY[0x2455CEF40](&v202);
      MEMORY[0x2455CF4B0](v207);
      if (v183 == (void **)v97) {
        goto LABEL_157;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v205, &v195);
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo,0>((uint64_t)v207, &v195, (uint64_t)&v219);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>(&v180, v207, (uint64_t)v207);
    if (__p)
    {
      unint64_t v212 = __p;
      operator delete(__p);
    }
    std::string v202 = (unsigned int *)v210;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)&v202);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    a3 = v172;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v208);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v207);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v195);
    BYTE1(v177) = 1;
    goto LABEL_158;
  }
LABEL_162:
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  uint64_t v99 = v178;
  uint64_t v100 = MEMORY[0x263F8C2B8];
  if (v178 != v179)
  {
    uint64_t v171 = (void *)*MEMORY[0x263F8C2B8];
    uint64_t v170 = *(void **)(MEMORY[0x263F8C2B8] + 64);
    int v169 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)(MEMORY[0x263F8C2B8] + 72);
    while (1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v207);
      uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a7 + 1));
      int v102 = *(char *)(Name + 23);
      if (v102 >= 0) {
        uint64_t v103 = Name;
      }
      else {
        uint64_t v103 = *(void *)Name;
      }
      if (v102 >= 0) {
        uint64_t v104 = *(unsigned __int8 *)(Name + 23);
      }
      else {
        uint64_t v104 = *(void *)(Name + 8);
      }
      unint64_t v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v208, v103, v104);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"_baseColor_", 11);
      uint64_t v106 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"_", 1);
      int v107 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"_", 1);
      uint64_t v108 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"_", 1);
      unint64_t v109 = (void *)std::ostream::operator<<();
      unint64_t v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"_", 1);
      LOBYTE(v219) = *((unsigned char *)v99 + 48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)&v219, 1);
      std::stringbuf::str();
      std::string v202 = 0;
      if (REAssetManagerCreateAssetHandle())
      {
        if (REMaterialAssetBuilderCreate())
        {
          REMaterialAssetBuilderSetName();
          REMaterialAssetBuilderSetMaterialDefinition();
          REMaterialAssetBuilderSetColor4F();
          unint64_t v111 = (unsigned int *)REAssetManagerMaterialAssetBuilderBuildAsync();
          v205.__begin_ = v111;
          if (v111)
          {
            RERetain();
            std::string v202 = v111;
            v205.__begin_ = 0;
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v205);
            RERelease();
          }
          else
          {
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v205);
          }
          RERelease();
        }
        RERelease();
      }
      if (SBYTE7(v220) < 0) {
        operator delete((void *)v219);
      }
      if (v202) {
        break;
      }
LABEL_223:
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v202);
      v207[0] = v171;
      *(void **)((char *)v207 + *((void *)v171 - 3)) = v170;
      unint64_t v208 = (unsigned int **)v169;
      uint64_t v209 = MEMORY[0x263F8C318] + 16;
      if (v215 < 0) {
        operator delete(v214);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2455D2B30](v216);
      uint64_t v127 = v99[1];
      if (v127)
      {
        do
        {
          int v128 = (void **)v127;
          uint64_t v127 = (void *)*v127;
        }
        while (v127);
      }
      else
      {
        do
        {
          int v128 = (void **)v99[2];
          BOOL v72 = *v128 == v99;
          uint64_t v99 = v128;
        }
        while (!v72);
      }
      uint64_t v99 = v128;
      if (v128 == v179) {
        goto LABEL_231;
      }
    }
    if (*(void *)(*(void *)(a5 + 16) + 40))
    {
      realityio::LiveSceneManager::queueForDeferredAssetLoad(*(void *)(*(void *)(a5 + 16) + 40), (uint64_t *)&v202);
      unint64_t v176 = v202;
      if (!v202) {
        goto LABEL_185;
      }
    }
    else
    {
      unint64_t v176 = v202;
    }
    RERetain();
LABEL_185:
    uint64_t v112 = v100;
    realityio::Builder::addAsset(a7, (uint64_t *)&v176, 0);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v176);
    std::string::size_type v113 = (unsigned int **)*((void *)&v184 + 1);
    uint64_t v114 = v184;
    float32x4_t v174 = *((float32x4_t *)v99 + 2);
    unsigned int v115 = *((unsigned __int8 *)v99 + 48);
    *(void *)&long long v219 = *(void **)((char *)v99 + 49);
    *(void *)((char *)&v219 + 7) = v99[7];
    int v116 = v188;
    float32x4_t v117 = &v188;
    float32x4_t v118 = &v188;
    if (v188)
    {
      while (1)
      {
        while (1)
        {
          float32x4_t v117 = (uint64_t **)v116;
          unsigned int v119 = *((unsigned __int8 *)v116 + 48);
          if (v119 <= v115) {
            break;
          }
LABEL_187:
          int v116 = *v117;
          float32x4_t v118 = v117;
          if (!*v117) {
            goto LABEL_214;
          }
        }
        if (v119 == v115)
        {
          float32x4_t v120 = *((float32x4_t *)v117 + 2);
          if (vmovn_s32(vcgtq_f32(v120, v174)).u8[0]) {
            goto LABEL_187;
          }
          if ((vmovn_s32(vceqq_f32(v174, v120)).u8[0] & 1) == 0)
          {
            unsigned __int8 v122 = vmovn_s32(vcgtq_f32(v174, v120)).u8[0];
LABEL_208:
            if ((v122 & 1) == 0) {
              goto LABEL_217;
            }
            goto LABEL_209;
          }
          if (v174.f32[1] < v120.f32[1]) {
            goto LABEL_187;
          }
          if (v174.f32[1] != v120.f32[1])
          {
            if ((vmovn_s32(vcgtq_f32(v174, v120)).u8[0] & 1) == 0 && v120.f32[1] >= v174.f32[1]) {
              goto LABEL_217;
            }
            goto LABEL_209;
          }
          if (v174.f32[2] < v120.f32[2]) {
            goto LABEL_187;
          }
          if (v174.f32[2] == v120.f32[2] && v174.f32[3] < v120.f32[3]) {
            goto LABEL_187;
          }
          unsigned __int8 v122 = v174.f32[2] == v120.f32[2];
          unsigned __int8 v123 = vmovn_s32(vcgtq_f32(v174, v120)).u8[0];
          if (v120.f32[3] >= v174.f32[3]) {
            unsigned __int8 v122 = 0;
          }
          if ((v123 & 1) == 0 && v120.f32[1] >= v174.f32[1] && v120.f32[2] >= v174.f32[2]) {
            goto LABEL_208;
          }
        }
        else if (v119 >= v115)
        {
          goto LABEL_217;
        }
LABEL_209:
        int v116 = v117[1];
        if (!v116)
        {
          float32x4_t v118 = v117 + 1;
          break;
        }
      }
    }
LABEL_214:
    unint64_t v124 = (char *)operator new(0x50uLL);
    *((float32x4_t *)v124 + 2) = v174;
    v124[48] = v115;
    *(void *)(v124 + 49) = v219;
    *((void *)v124 + 7) = *(void *)((char *)&v219 + 7);
    *((void *)v124 + 8) = ((uint64_t)v113 - v114) >> 3;
    *(void *)unint64_t v124 = 0;
    *((void *)v124 + 1) = 0;
    *((void *)v124 + 2) = v117;
    *float32x4_t v118 = (uint64_t *)v124;
    if (*v187)
    {
      char v187 = (uint64_t **)*v187;
      unint64_t v124 = (char *)*v118;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v188, (uint64_t *)v124);
    std::string::size_type v113 = (unsigned int **)*((void *)&v184 + 1);
    ++v189;
LABEL_217:
    uint64_t v100 = v112;
    if (v113 >= v185)
    {
      uint64_t v126 = std::vector<realityio::WrappedRERef<REAsset *>>::__push_back_slow_path<realityio::WrappedRERef<REAsset *> const&>((uint64_t *)&v184, (uint64_t *)&v202);
    }
    else
    {
      long long v125 = v202;
      unsigned __int8 *v113 = v202;
      if (v125) {
        RERetain();
      }
      uint64_t v126 = (uint64_t)(v113 + 1);
    }
    *((void *)&v184 + 1) = v126;
    goto LABEL_223;
  }
LABEL_231:
  if (BYTE3(v177))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v207);
    uint64_t v129 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a7 + 1));
    int v130 = *(char *)(v129 + 23);
    if (v130 >= 0) {
      uint64_t v131 = v129;
    }
    else {
      uint64_t v131 = *(void *)v129;
    }
    if (v130 >= 0) {
      uint64_t v132 = *(unsigned __int8 *)(v129 + 23);
    }
    else {
      uint64_t v132 = *(void *)(v129 + 8);
    }
    long long v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v208, v131, v132);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"_vertexColor", 12);
    std::stringbuf::str();
    std::string v202 = 0;
    if (REAssetManagerCreateAssetHandle())
    {
      if (REMaterialAssetBuilderCreate())
      {
        REMaterialAssetBuilderSetName();
        REMaterialAssetBuilderSetMaterialDefinition();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        float v134 = (unsigned int *)REAssetManagerMaterialAssetBuilderBuildAsync();
        v205.__begin_ = v134;
        if (v134)
        {
          RERetain();
          std::string v202 = v134;
          v205.__begin_ = 0;
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v205);
          RERelease();
        }
        else
        {
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v205);
        }
        RERelease();
      }
      RERelease();
    }
    if (SBYTE7(v220) < 0) {
      operator delete((void *)v219);
    }
    if (!v202) {
      goto LABEL_259;
    }
    if (*(void *)(*(void *)(a5 + 16) + 40))
    {
      realityio::LiveSceneManager::queueForDeferredAssetLoad(*(void *)(*(void *)(a5 + 16) + 40), (uint64_t *)&v202);
      uint64_t v175 = v202;
      if (!v202) {
        goto LABEL_253;
      }
    }
    else
    {
      uint64_t v175 = v202;
    }
    RERetain();
LABEL_253:
    realityio::Builder::addAsset(a7, (uint64_t *)&v175, 0);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v175);
    uint64_t v135 = *((void *)&v184 + 1);
    *((void *)&v186 + 1) = (uint64_t)(*((void *)&v184 + 1) - v184) >> 3;
    if (*((void *)&v184 + 1) >= (unint64_t)v185)
    {
      uint64_t v137 = std::vector<realityio::WrappedRERef<REAsset *>>::__push_back_slow_path<realityio::WrappedRERef<REAsset *> const&>((uint64_t *)&v184, (uint64_t *)&v202);
    }
    else
    {
      std::string::size_type v136 = v202;
      **((void **)&v184 + 1) = v202;
      if (v136) {
        RERetain();
      }
      uint64_t v137 = v135 + 8;
    }
    *((void *)&v184 + 1) = v137;
LABEL_259:
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v202);
    v207[0] = *(void **)v100;
    uint64_t v138 = *(unsigned int ***)(v100 + 72);
    *(void **)((char *)v207 + *((void *)v207[0] - 3)) = *(void **)(v100 + 64);
    unint64_t v208 = v138;
    uint64_t v209 = MEMORY[0x263F8C318] + 16;
    if (v215 < 0) {
      operator delete(v214);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2455D2B30](v216);
  }
  if (BYTE2(v177))
  {
    v207[0] = *(void **)(*(void *)(a5 + 16) + 248);
    if (v207[0])
    {
      RERetain();
      if (v207[0])
      {
        uint64_t v139 = *((void *)&v184 + 1);
        *(void *)&long long v186 = (uint64_t)(*((void *)&v184 + 1) - v184) >> 3;
        if (*((void *)&v184 + 1) >= (unint64_t)v185)
        {
          uint64_t v140 = std::vector<realityio::WrappedRERef<REAsset *>>::__push_back_slow_path<realityio::WrappedRERef<REAsset *> const&>((uint64_t *)&v184, (uint64_t *)v207);
        }
        else
        {
          **((void **)&v184 + 1) = v207[0];
          RERetain();
          uint64_t v140 = v139 + 8;
        }
        *((void *)&v184 + 1) = v140;
        uint64_t v141 = *(void *)(*(void *)(a5 + 16) + 40);
        if (v141) {
          realityio::LiveSceneManager::queueForDeferredAssetLoad(v141, (uint64_t *)v207);
        }
      }
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v207);
  }
  long long v142 = v180;
  if (v180 != (uint64_t *)v181)
  {
    do
    {
      MaterialIndexAssignor::updateSentinelToRealIndex((uint64_t)(v142 + 6), -2, v186);
      MaterialIndexAssignor::updateSentinelToRealIndex((uint64_t)(v142 + 6), -3, SDWORD2(v186));
      if (*((_DWORD *)v142 + 15) == -4)
      {
        uint64_t v143 = v188;
        if (v188)
        {
          unsigned int v144 = *((unsigned __int8 *)v142 + 128);
          float v146 = *((float *)v142 + 28);
          float v145 = *((float *)v142 + 29);
          int v147 = &v188;
          float v149 = *((float *)v142 + 30);
          float v148 = *((float *)v142 + 31);
          do
          {
            unsigned int v150 = *((unsigned __int8 *)v143 + 48);
            if (v150 < v144
              || v150 == v144
              && ((long long v151 = *((_OWORD *)v143 + 2), *(float *)&v151 < v146)
               || *(float *)&v151 == v146
               && (*((float *)&v151 + 1) < v145
                || *((float *)&v151 + 1) == v145
                && (*((float *)&v151 + 2) < v149
                 || (*((float *)&v151 + 2) == v149 ? (BOOL v152 = *((float *)&v151 + 3) < v148) : (BOOL v152 = 0), v152)))))
            {
              ++v143;
            }
            else
            {
              int v147 = (uint64_t **)v143;
            }
            uint64_t v143 = (uint64_t *)*v143;
          }
          while (v143);
          if (v147 != &v188)
          {
            unsigned int v153 = *((unsigned __int8 *)v147 + 48);
            if (v153 <= v144)
            {
              if (v153 != v144
                || (long long v154 = *((_OWORD *)v147 + 2), v146 >= *(float *)&v154)
                && (v146 != *(float *)&v154
                 || v145 >= *((float *)&v154 + 1)
                 && (v145 != *((float *)&v154 + 1)
                  || v149 >= *((float *)&v154 + 2) && (v149 != *((float *)&v154 + 2) || v148 >= *((float *)&v154 + 3)))))
              {
                *((_DWORD *)v142 + 15) = v147[8];
              }
            }
          }
        }
      }
      uint64_t v155 = (uint64_t *)v142[1];
      if (v155)
      {
        do
        {
          uint64_t v156 = v155;
          uint64_t v155 = (uint64_t *)*v155;
        }
        while (v155);
      }
      else
      {
        do
        {
          uint64_t v156 = (uint64_t *)v142[2];
          BOOL v72 = *v156 == (void)v142;
          long long v142 = v156;
        }
        while (!v72);
      }
      long long v142 = v156;
    }
    while (v156 != (uint64_t *)v181);
  }
  MaterialIndexAssignor::MaterialIndexAssignor((uint64_t)v207, (uint64_t)&v177);
  *uint64_t v162 = 1;
  MaterialIndexAssignor::MaterialIndexAssignor((uint64_t)(v162 + 8), (uint64_t)v207);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base((uint64_t)&v218, v157);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base((uint64_t)&v217, v158);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(v216[0]);
  *(void *)&long long v219 = &v213;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
  std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(v212);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy((void *)v210[1]);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(v208);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base((uint64_t)v191, v159);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base((uint64_t)v190, v160);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(v188);
  v207[0] = &v184;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)v207);
  std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(v183[0]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(v181[0]);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(v179[0]);
}

void sub_23F6E21DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,__int16 a41)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&STACK[0x628]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x660]);
  realityio::types::Ok<MaterialIndexAssignor>::~Ok((uint64_t)&a41, v42);
  _Unwind_Resume(a1);
}

BOOL realityio::getRealityKitStageMetadata<BOOL>(uint64_t *a1, void *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3 = a3;
  if (*a1) {
    BOOL v4 = *a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    int v5 = *(unsigned __int8 *)a3;
  }
  else
  {
    unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&v19, v7);
    char v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v19);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v22, v8);
    int v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)v20;
    if (v20 && atomic_fetch_add_explicit(v20 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      int v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))(*(void *)v9 + 8))(v9);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    }
    std::operator+<char>();
    uint64_t ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
    long long v11 = ValueAtPath;
    if (ValueAtPath && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(ValueAtPath))
    {
      uint64_t v12 = *((void *)v11 + 1);
      if ((v12 & 4) != 0) {
        long long v11 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(v11);
      }
      int v5 = *(unsigned __int8 *)v11;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfStringToLower();
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      uint64_t v14 = v13;
      if (v13 && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(v13))
      {
        uint64_t v15 = *((void *)v14 + 1);
        if ((v15 & 4) != 0) {
          uint64_t v3 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v14);
        }
        else {
          uint64_t v3 = v14;
        }
      }
      int v5 = *(unsigned __int8 *)v3;
      if (v18 < 0) {
        operator delete(__p);
      }
    }
    if (v21 < 0) {
      operator delete(v19);
    }
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v22, 0);
  }
  return v5 != 0;
}

void sub_23F6E270C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)(v21 - 24), 0);
  _Unwind_Resume(a1);
}

void sub_23F6E2758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14)
  {
    if (atomic_fetch_add_explicit(a14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 8))(a14);
    }
  }
  JUMPOUT(0x23F6E2750);
}

void std::deque<int>::push_back(void *a1, _DWORD *a2)
{
  BOOL v4 = (char *)a1[1];
  int v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 7) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x400)
    {
      uint64_t v24 = v6 >> 3;
      uint64_t v25 = (char *)a1[3];
      unint64_t v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v31);
        uint64_t v34 = v33;
        unint64_t v35 = operator new(0x1000uLL);
        uint64_t v36 = &v32[8 * v24];
        uint64_t v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            uint64_t v73 = v35;
            uint64_t v74 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v75);
            uint64_t v36 = &v76[8 * (v75 >> 2)];
            uint64_t v37 = &v76[8 * v77];
            if (v32) {
              operator delete(v32);
            }
            uint64_t v32 = v76;
            unint64_t v35 = v73;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)uint64_t v36 = v35;
        unint64_t v78 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v37 - v32) >> 2;
              }
              int v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v84);
              uint64_t v87 = v85;
              uint64_t v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v32;
              BOOL v88 = v78 == v32;
              unint64_t v78 = v36;
              if (!v88)
              {
                unint64_t v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                uint64_t v91 = v36;
                char v92 = (uint64_t *)v32;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)uint64_t v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              uint64_t v37 = &v85[8 * v86];
              if (v32) {
                operator delete(v32);
              }
              uint64_t v32 = v87;
            }
            else
            {
              uint64_t v80 = (v37 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              uint64_t v36 = &v32[8 * (v81 >> 1)];
              unint64_t v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                unint64_t v83 = v78;
              }
              unint64_t v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v36 - 1) = v94;
          v36 -= 8;
        }
        int v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      uint64_t v28 = operator new(0x1000uLL);
      std::string::size_type v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v51);
          BOOL v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)a1[1];
          int v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            int v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            unsigned int v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)unsigned int v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            BOOL v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        uint64_t v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            int v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v96);
            uint64_t v99 = &v97[8 * (v96 >> 2)];
            uint64_t v100 = (uint64_t *)a1[1];
            uint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              uint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              uint64_t v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)uint64_t v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            unint64_t v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            unsigned int v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              uint64_t v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)int v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 1024;
      uint64_t v13 = *(void *)v4;
      long long v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          std::vector<unsigned int>::size_type v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          unsigned int v45 = (uint64_t *)a1[1];
          int v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            int v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          uint64_t v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            int v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          uint64_t v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            int v5 = (char *)a1[1];
          }
          uint64_t v23 = &v5[8 * v19];
          int v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)int v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    BOOL v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(_DWORD *)(*(void *)&v4[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_23F6E2C64(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t realityio::MeshAssetBuilder::clear(realityio::MeshAssetBuilder *this, realityio::Inputs *a2)
{
  int v5 = (std::mutex *)*((void *)this + 2);
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (const void **)realityio::MeshAssetBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>(v5, v6, (uint64_t)&v26);
  if ((_BYTE)v26)
  {
    long long v7 = v27;
    if (*((void *)&v27 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
      v21[0] = 1;
      long long v22 = v7;
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
    else
    {
      v21[0] = 1;
      long long v22 = (unint64_t)v27;
    }
  }
  else
  {
    long long v24 = v27;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v25, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
    }
    else {
      std::string v25 = v28;
    }
    v21[0] = 0;
    long long v22 = v24;
    std::string v23 = v25;
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v26);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v21[0])
  {
    uint64_t v8 = v22;
    unint64_t v9 = (_DWORD *)(v22 + 160);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      if (*(char *)(v22 + 135) < 0) {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(v22 + 112), *(void *)(v22 + 120));
      }
      else {
        std::string v19 = *(std::string *)(v22 + 112);
      }
      if (*(char *)(v8 + 159) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 136), *(void *)(v8 + 144));
      }
      else {
        std::string __p = *(std::string *)(v8 + 136);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, v9);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, (_DWORD *)(v8 + 164));
      realityio::ImportSession::assetDescriptorCacheEject((long long *)&v19, &v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
    unint64_t v10 = (realityio::ImportSession *)*((void *)a2 + 5);
    long long v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v26, v11, (realityio::Inputs *)((char *)a2 + 32));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v26, &v24);
    realityio::ImportSession::clearMeshAsset(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
    if ((v28.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27 + 8);
    uint64_t v12 = (realityio::MeshAssetBuilder *)v27;
    if ((void)v27) {
      uint64_t v12 = (realityio::MeshAssetBuilder *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v27);
    }
    uint64_t v14 = *((void *)this + 2);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (const void **)realityio::MeshAssetBuilder::kOutputName(v12);
    std::mutex::lock((std::mutex *)(v14 + 64));
    if (v14 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v14 + 40, v15))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v14 + 40), v15); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v14, (unsigned __int8 *)v15);
    }
    std::mutex::unlock((std::mutex *)(v14 + 64));
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  return realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v21);
}

void sub_23F6E2FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void realityio::MeshAssetBuilder::~MeshAssetBuilder(realityio::MeshAssetBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t MaterialIndexAssignor::updateSentinelToRealIndex(uint64_t result, int a2, int a3)
{
  if (*(_DWORD *)(result + 12) == a2)
  {
    *(_DWORD *)(result + 12) = a3;
    uint64_t v3 = *(void *)(result + 24) - *(void *)(result + 16);
    if (v3 && *(unsigned char *)(result + 9) == 0)
    {
      unint64_t v5 = v3 / 24;
      uint64_t v6 = *(_DWORD **)(result + 40);
      if (v5 <= 1) {
        unint64_t v5 = 1;
      }
      do
      {
        if (*v6 == a2) {
          _DWORD *v6 = a3;
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t realityio::types::Ok<MaterialIndexAssignor>::~Ok(uint64_t a1, void *a2)
{
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base(a1 + 704, a2);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base(a1 + 144, v3);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(void **)(a1 + 128));
  unint64_t v5 = (void **)(a1 + 80);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(*(void **)(a1 + 64));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(*(void **)(a1 + 40));
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(void **)(a1 + 16));
  return a1;
}

void std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(*a1);
    std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<MaterialIndexAssignor::MaterialKey const,unsigned long>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<MaterialIndexAssignor::MaterialKey const,unsigned long>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void MaterialIndexAssignor::MaterialKey::~MaterialKey(MaterialIndexAssignor::MaterialKey *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,MaterialIndexAssignor::GPrimInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,MaterialIndexAssignor::GPrimInfo>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  BOOL v4 = (void **)(a1 + 32);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void MaterialIndexAssignor::GPrimInfo::~GPrimInfo(MaterialIndexAssignor::GPrimInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 16);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t std::pair<MaterialIndexAssignor::MaterialKey,unsigned long>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t *std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unint64_t v5 = (uint64_t *)(a1 + 8);
  do
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v3 + 4, (void *)a2)
      || v3[4] == *(void *)a2 && *((unsigned __int8 *)v3 + 40) < *(unsigned __int8 *)(a2 + 8))
    {
      ++v3;
    }
    else
    {
      unint64_t v5 = v3;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == v5
    || (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)a2, v5 + 4) & 1) != 0
    || *(void *)a2 == v5[4] && *(unsigned __int8 *)(a2 + 8) < *((unsigned __int8 *)v5 + 40))
  {
    return v2;
  }
  return v5;
}

uint64_t std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::__emplace_unique_key_args<MaterialIndexAssignor::MaterialKey,std::pair<MaterialIndexAssignor::MaterialKey,unsigned long>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v8 = (uint64_t *)(a1 + 1);
LABEL_13:
    long long v11 = operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11 + 8, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11 + 9, (_DWORD *)(a3 + 4));
    *((unsigned char *)v11 + 40) = *(unsigned char *)(a3 + 8);
    *((void *)v11 + 6) = *(void *)(a3 + 16);
    *(void *)long long v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v8;
    void *v6 = v11;
    uint64_t v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      long long v11 = (_DWORD *)*v6;
    }
    uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = v5;
      unint64_t v9 = v5 + 4;
      if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)a2, v5 + 4) & 1) == 0
        && (*(void *)a2 != *v9 || *(unsigned __int8 *)(a2 + 8) >= *((unsigned __int8 *)v8 + 40)))
      {
        break;
      }
      unint64_t v5 = (uint64_t *)*v8;
      uint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_13;
      }
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, (void *)a2);
    if ((result & 1) == 0
      && (*v9 != *(void *)a2 || *((unsigned __int8 *)v8 + 40) >= *(unsigned __int8 *)(a2 + 8)))
    {
      break;
    }
    uint64_t v6 = v8 + 1;
    unint64_t v5 = (uint64_t *)v8[1];
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!*v6) {
    goto LABEL_13;
  }
  return result;
}

uint64_t MaterialIndexAssignor::registerNonSubdGPrim(uint64_t **this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)this);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (!result) {
    return result;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v60);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v66, &v60);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v67, (_DWORD *)&v60 + 1);
  __int16 v68 = 0;
  int v69 = -1;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v60 = (void **)(MEMORY[0x263F906B0] + 16);
  int BoundSubsetsAndCoverage = realityio::getBoundSubsetsAndCoverage((uint64_t)&v60, (void **)&v70, (BOOL *)((unint64_t)&v66 | 9));
  MEMORY[0x2455CE8E0](&v60);
  if (!BoundSubsetsAndCoverage) {
    goto LABEL_14;
  }
  char v6 = HIBYTE(v68);
  long long v7 = v70;
  std::vector<unsigned int>::size_type v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v70 + 1) - v70) >> 3);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)&v71 + 8), v8, &MaterialIndexAssignor::kInvalidMaterialIndex);
  char v41 = v6 ^ 1;
  if (*((void *)&v7 + 1) != (void)v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    if (v8 <= 1) {
      std::vector<unsigned int>::size_type v8 = 1;
    }
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *(void *)&long long v62 = 0;
      uint64_t v60 = (void **)(MEMORY[0x263F907A0] + 16);
      if (!atomic_load(MEMORY[0x263F90550])) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v43, &v48);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v57, &v48);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v57 + 1, (_DWORD *)&v48 + 1);
      char v58 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
      uint64_t v12 = std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)(this + 7), (uint64_t)&v57);
      if (this + 8 == (uint64_t **)v12) {
        char v41 = 1;
      }
      else {
        *(_DWORD *)(*((void *)&v71 + 1) + 4 * v10) = v12[6];
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
      MEMORY[0x2455CEF40](&v43);
      MEMORY[0x2455CF4B0](&v60);
      ++v10;
      v9 += 24;
    }
    while (v8 != v10);
  }
  if (v41)
  {
LABEL_14:
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v59 = 0;
    uint64_t v57 = MEMORY[0x263F907A0] + 16;
    if (!atomic_load(MEMORY[0x263F90550])) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v56, &v60);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v53, &v60);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v54, (_DWORD *)&v60 + 1);
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
    uint64_t v14 = std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)(this + 7), (uint64_t)&v53);
    if (this + 8 != (uint64_t **)v14)
    {
      int v15 = *((_DWORD *)v14 + 12);
      int v69 = v15;
      if (BoundSubsetsAndCoverage)
      {
        BOOL v16 = (int *)*((void *)&v71 + 1);
        if ((void)v72 != *((void *)&v71 + 1))
        {
          unint64_t v17 = (uint64_t)(v72 - *((void *)&v71 + 1)) >> 2;
          if (v17 <= 1) {
            unint64_t v17 = 1;
          }
          do
          {
            if (*v16 == -1) {
              *BOOL v16 = v15;
            }
            ++v16;
            --v17;
          }
          while (v17);
        }
      }
LABEL_89:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
      MEMORY[0x2455CEF40](v56);
      MEMORY[0x2455CF4B0](&v57);
      goto LABEL_90;
    }
    int v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v52[0] = MEMORY[0x263F906B0] + 16;
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v18);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorPrimvar((uint64_t *)&v60, (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v52);
      if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
        && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v60))
      {
        *((unsigned char *)this + 3) = 1;
        int v69 = -3;
        if (BoundSubsetsAndCoverage)
        {
          std::string v19 = (_DWORD *)*((void *)&v71 + 1);
          if ((void)v72 != *((void *)&v71 + 1))
          {
            unint64_t v20 = (uint64_t)(v72 - *((void *)&v71 + 1)) >> 2;
            if (v20 <= 1) {
              unint64_t v20 = 1;
            }
            do
            {
              if (*v19 == -1) {
                *std::string v19 = -3;
              }
              ++v19;
              --v20;
            }
            while (v20);
          }
        }
      }
      else
      {
        *((unsigned char *)this + 2) = 1;
        int v69 = -2;
        if (BoundSubsetsAndCoverage)
        {
          uint64_t v34 = (_DWORD *)*((void *)&v71 + 1);
          if ((void)v72 != *((void *)&v71 + 1))
          {
            unint64_t v35 = (uint64_t)(v72 - *((void *)&v71 + 1)) >> 2;
            if (v35 <= 1) {
              unint64_t v35 = 1;
            }
            do
            {
              if (*v34 == -1) {
                _DWORD *v34 = -2;
              }
              ++v34;
              --v35;
            }
            while (v35);
          }
        }
      }
      if ((BYTE8(v62) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v62 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v62 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61 + 8);
      uint64_t v36 = v61;
      if (!(void)v61) {
        goto LABEL_88;
      }
      goto LABEL_87;
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorAttr(&v48, (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v52);
    unsigned __int8 v47 = 0;
    long long v46 = xmmword_23F7BDF10;
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v48)
      && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v48))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v48, (uint64_t)&v60);
      if ((_BYTE)v60)
      {
        long long v43 = v61;
        long long v44 = v62;
        unsigned int v45 = v63;
        if (v63)
        {
          uint64_t v21 = (atomic_ullong *)(v63 - 4);
          if (*((void *)&v44 + 1)) {
            uint64_t v21 = (atomic_ullong *)*((void *)&v44 + 1);
          }
          atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
        }
        if ((void)v43)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
          unsigned int v42 = *v45;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
          unsigned int v40 = v45[1];
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
          __asm { FMOV            V0.4S, #1.0 }
          _Q0.i64[0] = __PAIR64__(v40, v42);
          _Q0.i32[2] = v45[2];
          long long v46 = (__int128)_Q0;
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v43);
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)&v60);
    }
    realityio::assignGamutFromAttribute((const void **)&v46, &v47, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v48);
    int v69 = -4;
    float32x4_t v73 = (float32x4_t)v46;
    v74.i8[0] = v47;
    long long v27 = (float32x4_t **)(this + 2);
    uint64_t v26 = this[2];
    if (!v26)
    {
      std::string v28 = (float32x4_t *)(this + 2);
      goto LABEL_97;
    }
    while (1)
    {
      while (1)
      {
        std::string v28 = (float32x4_t *)v26;
        unsigned int v29 = *((unsigned __int8 *)v26 + 48);
        if (v29 <= v47) {
          break;
        }
LABEL_48:
        uint64_t v26 = (uint64_t *)v28->i64[0];
        long long v27 = (float32x4_t **)v28;
        if (!v28->i64[0]) {
          goto LABEL_97;
        }
      }
      if (v29 == v47)
      {
        float32x4_t v30 = v28[2];
        if (vmovn_s32(vcgtq_f32(v30, (float32x4_t)v46)).u8[0]) {
          goto LABEL_48;
        }
        if ((vmovn_s32(vceqq_f32((float32x4_t)v46, v30)).u8[0] & 1) == 0)
        {
          unsigned __int8 v32 = vmovn_s32(vcgtq_f32((float32x4_t)v46, v30)).u8[0];
LABEL_69:
          if ((v32 & 1) == 0) {
            goto LABEL_100;
          }
          goto LABEL_70;
        }
        if (*((float *)&v46 + 1) < v30.f32[1]) {
          goto LABEL_48;
        }
        if (*((float *)&v46 + 1) != v30.f32[1])
        {
          if ((vmovn_s32(vcgtq_f32((float32x4_t)v46, v30)).u8[0] & 1) == 0 && v30.f32[1] >= *((float *)&v46 + 1)) {
            goto LABEL_100;
          }
          goto LABEL_70;
        }
        if (*((float *)&v46 + 2) < v30.f32[2]) {
          goto LABEL_48;
        }
        if (*((float *)&v46 + 2) == v30.f32[2] && *((float *)&v46 + 3) < v30.f32[3]) {
          goto LABEL_48;
        }
        unsigned __int8 v32 = *((float *)&v46 + 2) == v30.f32[2];
        unsigned __int8 v33 = vmovn_s32(vcgtq_f32((float32x4_t)v46, v30)).u8[0];
        if (v30.f32[3] >= *((float *)&v46 + 3)) {
          unsigned __int8 v32 = 0;
        }
        if ((v33 & 1) == 0 && v30.f32[1] >= *((float *)&v46 + 1) && v30.f32[2] >= *((float *)&v46 + 2)) {
          goto LABEL_69;
        }
      }
      else if (v29 >= v47)
      {
        goto LABEL_100;
      }
LABEL_70:
      uint64_t v26 = (uint64_t *)v28->i64[1];
      if (!v26)
      {
        long long v27 = (float32x4_t **)&v28->i64[1];
LABEL_97:
        uint64_t v37 = (float32x4_t *)operator new(0x40uLL);
        float32x4_t v38 = v74;
        v37[2] = v73;
        v37[3] = v38;
        v37->i64[0] = 0;
        v37->i64[1] = 0;
        v37[1].i64[0] = (uint64_t)v28;
        *long long v27 = v37;
        uint64_t v39 = (uint64_t *)*this[1];
        if (v39)
        {
          this[1] = v39;
          uint64_t v37 = *v27;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[2], (uint64_t *)v37);
        this[3] = (uint64_t *)((char *)this[3] + 1);
LABEL_100:
        if ((v51 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
        uint64_t v36 = v49;
        if (!v49)
        {
LABEL_88:
          MEMORY[0x2455CE8E0](v52);
          goto LABEL_89;
        }
LABEL_87:
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
        goto LABEL_88;
      }
    }
  }
LABEL_90:
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v57);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo,0>((uint64_t)&v60, &v57, (uint64_t)&v66);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>(this + 4, &v60, (uint64_t)&v60);
  if (__p)
  {
    uint64_t v65 = __p;
    operator delete(__p);
  }
  *(void *)&long long v43 = (char *)&v62 + 8;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
  if (*((void *)&v71 + 1))
  {
    *(void *)&long long v72 = *((void *)&v71 + 1);
    operator delete(*((void **)&v71 + 1));
  }
  uint64_t v60 = (void **)&v70;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v60);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
}

void sub_23F6E3E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,int a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  BOOL v4 = (void **)(a1 + 32);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>(uint64_t **a1, void *a2, uint64_t a3)
{
  char v6 = (char **)(a1 + 1);
  unint64_t v5 = (char *)a1[1];
  if (!v5)
  {
    std::vector<unsigned int>::size_type v8 = (char **)(a1 + 1);
LABEL_10:
    long long v11 = (char *)operator new(0x90uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 8, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 9, (_DWORD *)(a3 + 4));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 12, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 13, (_DWORD *)(a3 + 20));
    *((void *)v11 + 7) = *(void *)(a3 + 24);
    *((_OWORD *)v11 + 4) = *(_OWORD *)(a3 + 32);
    *((void *)v11 + 10) = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(_OWORD *)(v11 + 88) = *(_OWORD *)(a3 + 56);
    *((void *)v11 + 13) = *(void *)(a3 + 72);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    long long v12 = *(_OWORD *)(a3 + 96);
    *((_OWORD *)v11 + 7) = *(_OWORD *)(a3 + 80);
    *((_OWORD *)v11 + 8) = v12;
    *(void *)long long v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v8;
    void *v6 = v11;
    uint64_t v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      long long v11 = *v6;
    }
    uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      std::vector<unsigned int>::size_type v8 = (char **)v5;
      uint64_t v9 = v5 + 32;
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (void *)v5 + 4)) {
        break;
      }
      unint64_t v5 = *v8;
      char v6 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, a2);
    if (!result) {
      break;
    }
    char v6 = v8 + 1;
    unint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (!*v6) {
    goto LABEL_10;
  }
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo,0>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  char v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a3 + 4));
  *(void *)(a1 + 24) = *(void *)(a3 + 8);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a3 + 16);
  *(void *)(a1 + 48) = *(void *)(a3 + 32);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 40);
  *(void *)(a1 + 72) = *(void *)(a3 + 56);
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  long long v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 96) = v7;
  return a1;
}

uint64_t MaterialIndexAssignor::MaterialIndexAssignor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  BOOL v4 = (void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a1 + 16;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)(a2 + 8) = v4;
    *BOOL v4 = 0;
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    *(void *)(a1 + 8) = v6;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  std::vector<unsigned int>::size_type v8 = (void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = a1 + 40;
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v11;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    *(void *)(a2 + 32) = v8;
    *std::vector<unsigned int>::size_type v8 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v10;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  long long v12 = (void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v13;
  uint64_t v14 = a1 + 64;
  uint64_t v15 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v15;
  if (v15)
  {
    *(void *)(v13 + 16) = v14;
    *(void *)(a2 + 56) = v12;
    *long long v12 = 0;
    *(void *)(a2 + 72) = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v14;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  BOOL v16 = (void *)(a2 + 128);
  uint64_t v17 = *(void *)(a2 + 128);
  *(void *)(a1 + 128) = v17;
  uint64_t v18 = a1 + 128;
  uint64_t v19 = *(void *)(a2 + 136);
  *(void *)(a1 + 136) = v19;
  if (v19)
  {
    *(void *)(v17 + 16) = v18;
    *(void *)(a2 + 120) = v16;
    *BOOL v16 = 0;
    *(void *)(a2 + 136) = 0;
  }
  else
  {
    *(void *)(a1 + 120) = v18;
  }
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(void *)(a1 + 168) = 0;
  unint64_t v20 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  void v20[3] = 0;
  void *v20 = 0;
  *(void *)(a1 + 176) = v20;
  *(_DWORD *)(a1 + 188) = 1082130432;
  __dmb(0xBu);
  *(void *)(a1 + 152) = 8;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  uint64_t v45 = *(void *)(a1 + 176);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(a1 + 144, 0, &v45);
  if (a1 != a2)
  {
    uint64_t v21 = 0;
    __int16 v22 = *(_WORD *)(a1 + 144);
    *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
    *(_WORD *)(a2 + 144) = v22;
    uint64_t v23 = *(void *)(a1 + 168);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a2 + 168) = v23;
    uint64_t v24 = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a2 + 176) = v24;
    uint64_t v25 = a2 + 192;
    uint64_t v26 = a1 + 192;
    do
    {
      uint64_t v27 = *(void *)(v26 + v21);
      __dmb(0xBu);
      uint64_t v28 = *(void *)(v25 + v21);
      __dmb(0xBu);
      *(void *)(v26 + v21) = v28;
      __dmb(0xBu);
      *(void *)(v25 + v21) = v27;
      v21 += 8;
    }
    while (v21 != 512);
    uint64_t v45 = *(void *)(a1 + 152);
    uint64_t v29 = *(void *)(a2 + 152);
    __dmb(0xBu);
    *(void *)(a1 + 152) = v29;
    uint64_t v30 = v45;
    __dmb(0xBu);
    *(void *)(a2 + 152) = v30;
    int v31 = *(_DWORD *)(a1 + 188);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
    *(_DWORD *)(a2 + 188) = v31;
  }
  *(_WORD *)(a1 + 704) = *(_WORD *)(a2 + 704);
  *(void *)(a1 + 728) = 0;
  unsigned __int8 v32 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  v32[3] = 0;
  *unsigned __int8 v32 = 0;
  *(void *)(a1 + 736) = v32;
  *(_DWORD *)(a1 + 748) = 1082130432;
  __dmb(0xBu);
  *(void *)(a1 + 712) = 8;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  uint64_t v45 = *(void *)(a1 + 736);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(a1 + 704, 0, &v45);
  if (a1 != a2)
  {
    uint64_t v33 = 0;
    __int16 v34 = *(_WORD *)(a1 + 704);
    *(_WORD *)(a1 + 704) = *(_WORD *)(a2 + 704);
    *(_WORD *)(a2 + 704) = v34;
    uint64_t v35 = *(void *)(a1 + 728);
    *(void *)(a1 + 728) = *(void *)(a2 + 728);
    *(void *)(a2 + 728) = v35;
    uint64_t v36 = *(void *)(a1 + 736);
    *(void *)(a1 + 736) = *(void *)(a2 + 736);
    *(void *)(a2 + 736) = v36;
    uint64_t v37 = a2 + 752;
    uint64_t v38 = a1 + 752;
    do
    {
      uint64_t v39 = *(void *)(v38 + v33);
      __dmb(0xBu);
      uint64_t v40 = *(void *)(v37 + v33);
      __dmb(0xBu);
      *(void *)(v38 + v33) = v40;
      __dmb(0xBu);
      *(void *)(v37 + v33) = v39;
      v33 += 8;
    }
    while (v33 != 512);
    uint64_t v45 = *(void *)(a1 + 712);
    uint64_t v41 = *(void *)(a2 + 712);
    __dmb(0xBu);
    *(void *)(a1 + 712) = v41;
    uint64_t v42 = v45;
    __dmb(0xBu);
    *(void *)(a2 + 712) = v42;
    int v43 = *(_DWORD *)(a1 + 748);
    *(_DWORD *)(a1 + 748) = *(_DWORD *)(a2 + 748);
    *(_DWORD *)(a2 + 748) = v43;
  }
  return a1;
}

void sub_23F6E4618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::~split_ordered_list(v9 + 720);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base(v10, v16);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*v14);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(*v13);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(*v12);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*v11);
  _Unwind_Resume(a1);
}

uint64_t realityio::TexcoordID::TexcoordID(uint64_t a1, void *a2, int a3, char a4)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  std::vector<unsigned int>::size_type v8 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 40) = 0;
  realityio::TexcoordID::setIndex((realityio::TexcoordID *)a1, a3);
  pxrInternal__aapl__pxrReserved__::TfToken::operator=(v8, a2);
  *(unsigned char *)(a1 + 40) = a4;
  if (*v8)
  {
    realityio::TexcoordID::computeNormalizedName((realityio::TexcoordID *)a1);
    if (a3 == -1) {
      realityio::TexcoordID::getIndexFromName((realityio::TexcoordID *)a1);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "UV");
    std::to_string(&v14, a3);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v14;
    }
    else {
      uint64_t v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v14.__r_.__value_.__l.__size_;
    }
    uint64_t v11 = std::string::append(&v15, (const std::string::value_type *)v9, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x2455CF830](&v18, __p);
    if (&v18 == v8)
    {
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *std::vector<unsigned int>::size_type v8 = v18;
      uint64_t v18 = 0;
    }
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void sub_23F6E47FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v26 + 39) < 0) {
    operator delete(*(void **)(v26 + 16));
  }
  if ((*v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 3, a3 + 1);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F6E496C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40FC86440BLL);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F6E4A28(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40FC86440BLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F3468C0;
  return result;
}

void std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3468C0;
}

void std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName((realityio::MeshModelDescriptorBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x48uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346930;
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v4;
    v19.__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v7;
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = v19;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)&v6[1], (long long *)&v20, (uint64_t *)(v5 + 104), 0);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346980;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v6[1];
  v20.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::InputsDescriptor::addInputDescriptor(v3, &v20);
  std::string::size_type size = (realityio::SkeletonPoseDefinitionBuilder *)v20.__r_.__value_.__l.__size_;
  if (v20.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20.__r_.__value_.__l.__size_);
  }
  uint64_t v9 = realityio::SkeletonPoseDefinitionBuilder::kOutputName(size);
  unint64_t v10 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v17) = 1;
  std::allocate_shared[abi:ne180100]<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v9, (uint64_t *)(v10 + 224), (int *)&v17, &v19);
  uint64_t v11 = (std::__shared_weak_count *)v19.__r_.__value_.__l.__size_;
  if (v19.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v19);
  long long v12 = (realityio::MaterialAssetBuilder *)v19.__r_.__value_.__l.__size_;
  if (v19.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19.__r_.__value_.__l.__size_);
  }
  uint64_t v13 = realityio::MaterialAssetBuilder::kMaterialDataName(v12);
  unint64_t v14 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v15) = 1;
  std::allocate_shared[abi:ne180100]<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v13, (uint64_t *)(v14 + 176), (int *)&v15, &v17);
  uint64_t v15 = v17;
  BOOL v16 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v15);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_23F6E4D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v30);
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::GPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::GPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346930;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::GPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void realityio::GPrimsOnPrimGeneratingEntityOnlyInputDescriptor::~GPrimsOnPrimGeneratingEntityOnlyInputDescriptor(realityio::GPrimsOnPrimGeneratingEntityOnlyInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

void realityio::GPrimsOnPrimGeneratingEntityOnlyInputDescriptor::resolvedPrimPaths(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X2>, const realityio::internal::PrimToEntityMap *a2@<X3>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  std::vector<unsigned int>::size_type v8 = (char *)a2 + 48;
  uint64_t v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2 + 48, a1);
  if ((void *)((char *)a2 + 56) != v9 && *(void *)(*((void *)a2 + 3) + 104 * v9[5] + 24) == *(void *)a1)
  {
    unint64_t v10 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v8, a1);
    if ((void *)((char *)a2 + 56) != v10)
    {
      uint64_t v11 = *((void *)a2 + 3);
      if (v11)
      {
        uint64_t v12 = v10[5];
        uint64_t v13 = (void *)(v11 + 104 * v12);
        unint64_t v14 = (unsigned int *)v13[7];
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a3, vcvtps_u32_f32((float)(unint64_t)(v13[12] + v13[9]) / *(float *)(a3 + 32)));
        uint64_t v15 = (unsigned int *)(v13 + 8);
        if (v14 != v15)
        {
          do
          {
            std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, v14 + 7, v14 + 7);
            BOOL v16 = (unsigned int *)*((void *)v14 + 1);
            if (v16)
            {
              do
              {
                uint64_t v17 = v16;
                BOOL v16 = *(unsigned int **)v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                uint64_t v17 = (unsigned int *)*((void *)v14 + 2);
                BOOL v18 = *(void *)v17 == (void)v14;
                unint64_t v14 = v17;
              }
              while (!v18);
            }
            unint64_t v14 = v17;
          }
          while (v17 != v15);
        }
        uint64_t v19 = v11 + 104 * v12;
        std::string v20 = *(unsigned int **)(v19 + 80);
        uint64_t v21 = (unsigned int *)(v19 + 88);
        if (v20 != (unsigned int *)(v19 + 88))
        {
          do
          {
            std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, v20 + 7, v20 + 7);
            __int16 v22 = (unsigned int *)*((void *)v20 + 1);
            if (v22)
            {
              do
              {
                uint64_t v23 = v22;
                __int16 v22 = *(unsigned int **)v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                uint64_t v23 = (unsigned int *)*((void *)v20 + 2);
                BOOL v18 = *(void *)v23 == (void)v20;
                std::string v20 = v23;
              }
              while (!v18);
            }
            std::string v20 = v23;
          }
          while (v23 != v21);
        }
      }
    }
  }
}